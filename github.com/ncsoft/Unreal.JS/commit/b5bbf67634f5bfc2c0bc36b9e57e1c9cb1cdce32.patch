From b5bbf67634f5bfc2c0bc36b9e57e1c9cb1cdce32 Mon Sep 17 00:00:00 2001
From: HyeonCheol Cho <crocuis@gmail.com>
Date: Tue, 12 Nov 2019 21:22:54 +0900
Subject: [PATCH] update for 4.23

---
 Examples/Config/Android/AndroidEngine.ini     |     7 +
 Examples/Config/DefaultEditor.ini             |    27 -
 Examples/Config/DefaultEngine.ini             |    56 +-
 Examples/Config/DefaultGame.ini               |     6 +-
 Examples/Config/DefaultInput.ini              |    62 -
 Examples/Config/IOS/IOSEngine.ini             |     7 +
 Examples/Config/Linux/LinuxEngine.ini         |     7 +
 Examples/Config/Mac/MacEngine.ini             |     7 +
 Examples/Config/PS4/PS4Engine.ini             |     7 +
 Examples/Config/Switch/SwitchEngine.ini       |     7 +
 Examples/Config/Windows/WindowsEngine.ini     |     7 +
 Examples/Config/XboxOne/XboxOneEngine.ini     |     7 +
 .../JavascriptUserObjectListEntry_BP.uasset   |     3 +
 Examples/Content/Scripts/aliases.js           |  1800 +-
 .../Scripts/extension-exampleWindow.js        |     4 +-
 .../Scripts/extension-spiralGenerator.js      |     2 +-
 Examples/Content/Scripts/helloUMG.js          |     2 +-
 Examples/Content/Scripts/package.json         |     1 +
 .../Content/Scripts/typings/_part_0_ue.d.ts   | 34087 ++++++++--------
 .../Content/Scripts/typings/_part_1_ue.d.ts   |  4195 +-
 Examples/Content/Scripts/typings/ue.d.ts      | 11093 +++--
 Examples/JavascriptPlayground.uproject        |     9 +-
 .../Source/JavascriptPlayground.Target.cs     |    13 -
 .../JavascriptPlayground.Build.cs             |    28 -
 .../JavascriptPlayground.cpp                  |     5 -
 .../JavascriptPlayground.h                    |     5 -
 .../Source/JavascriptPlayground/MyClass.cpp   |    12 -
 .../Source/JavascriptPlayground/MyClass.h     |    13 -
 .../JavascriptPlaygroundEditor.Target.cs      |    13 -
 29 files changed, 28493 insertions(+), 22999 deletions(-)
 create mode 100644 Examples/Config/Android/AndroidEngine.ini
 delete mode 100644 Examples/Config/DefaultInput.ini
 create mode 100644 Examples/Config/IOS/IOSEngine.ini
 create mode 100644 Examples/Config/Linux/LinuxEngine.ini
 create mode 100644 Examples/Config/Mac/MacEngine.ini
 create mode 100644 Examples/Config/PS4/PS4Engine.ini
 create mode 100644 Examples/Config/Switch/SwitchEngine.ini
 create mode 100644 Examples/Config/Windows/WindowsEngine.ini
 create mode 100644 Examples/Config/XboxOne/XboxOneEngine.ini
 create mode 100644 Examples/Content/JavascriptUserObjectListEntry_BP.uasset
 delete mode 100644 Examples/Source/JavascriptPlayground.Target.cs
 delete mode 100644 Examples/Source/JavascriptPlayground/JavascriptPlayground.Build.cs
 delete mode 100644 Examples/Source/JavascriptPlayground/JavascriptPlayground.cpp
 delete mode 100644 Examples/Source/JavascriptPlayground/JavascriptPlayground.h
 delete mode 100644 Examples/Source/JavascriptPlayground/MyClass.cpp
 delete mode 100644 Examples/Source/JavascriptPlayground/MyClass.h
 delete mode 100644 Examples/Source/JavascriptPlaygroundEditor.Target.cs

diff --git a/Examples/Config/Android/AndroidEngine.ini b/Examples/Config/Android/AndroidEngine.ini
new file mode 100644
index 0000000..45dbb4c
--- /dev/null
+++ b/Examples/Config/Android/AndroidEngine.ini
@@ -0,0 +1,7 @@
+[/Script/AndroidRuntimeSettings.AndroidRuntimeSettings]
+;AudioSampleRate=48000
+AudioMaxChannels=12
+;AudioCallbackBufferFrameSize=1024
+;AudioNumBuffersToEnqueue=2
+;AudioNumSourceWorkers=0
+
diff --git a/Examples/Config/DefaultEditor.ini b/Examples/Config/DefaultEditor.ini
index e353d0d..e69de29 100644
--- a/Examples/Config/DefaultEditor.ini
+++ b/Examples/Config/DefaultEditor.ini
@@ -1,27 +0,0 @@
-[EditoronlyBP]
-bAllowClassAndBlueprintPinMatching=true
-bReplaceBlueprintWithClass=true
-bDontLoadBlueprintOutsideEditor=true
-bBlueprintIsNotBlueprintType=true
-
-[/Script/Localization.LocalizationSettings]
--EngineTargetsSettings=(Name="Engine",Guid=33482D004789784C9DA695A682ACCA1B,TargetDependencies=,AdditionalManifestDependencies=,RequiredModuleNames=,GatherFromTextFiles=(IsEnabled=True,SearchDirectories=((Path="Source/Runtime/"),(Path="Source/Developer/"),(Path="Config/")),ExcludePathWildcards=((Pattern="Source/Developer/NoRedist/CommunityPortalServices/*"),(Pattern="Source/Developer/NoRedist/UnrealEngineLauncherServices/*"),(Pattern="Source/Developer/NoRedist/BuildPatchServices/*")),FileExtensions=((Pattern="cpp"),(Pattern="h"),(Pattern="c"),(Pattern="inl"),(Pattern="mm"),(Pattern="ini"))),GatherFromPackages=(IsEnabled=True,IncludePathWildcards=((Pattern="Content/*")),ExcludePathWildcards=((Pattern="Content/Editor/*"),(Pattern="Content/Tutorial/*"),(Pattern="Content/Developers/*"),(Pattern="Content/TestPackages/*"),(Pattern="Content/QA_Assets/*"),(Pattern="Content/Maps/Automation/*"),(Pattern="Content/EngineSounds/*")),FileExtensions=((Pattern="umap"),(Pattern="uasset")),ShouldGatherFromEditorOnlyData=True),GatherFromMetaData=(IsEnabled=False,IncludePathWildcards=,ExcludePathWildcards=,KeySpecifications=,ShouldGatherFromEditorOnlyData=True),NativeCultureIndex=0,SupportedCulturesStatistics=((CultureName="en"),(CultureName="es"),(CultureName="ja"),(CultureName="ko"),(CultureName="pt-BR"),(CultureName="zh-CN")))
--EngineTargetsSettings=(Name="Editor",Guid=AC8BFD2A41A2FB2893BB8EA0AF903E6D,TargetDependencies=(33482D004789784C9DA695A682ACCA1B),AdditionalManifestDependencies=,RequiredModuleNames=,GatherFromTextFiles=(IsEnabled=True,SearchDirectories=((Path="Source/Editor/")),ExcludePathWildcards=,FileExtensions=((Pattern="cpp"),(Pattern="h"),(Pattern="c"),(Pattern="inl"),(Pattern="mm"))),GatherFromPackages=(IsEnabled=True,IncludePathWildcards=((Pattern="Content/Editor/*"),(Pattern="Content/Editor*")),ExcludePathWildcards=,FileExtensions=((Pattern="umap"),(Pattern="uasset")),ShouldGatherFromEditorOnlyData=True),GatherFromMetaData=(IsEnabled=False,IncludePathWildcards=,ExcludePathWildcards=,KeySpecifications=,ShouldGatherFromEditorOnlyData=True),NativeCultureIndex=0,SupportedCulturesStatistics=((CultureName="en"),(CultureName="es"),(CultureName="ja"),(CultureName="ko"),(CultureName="pt-BR"),(CultureName="zh-CN")))
--EngineTargetsSettings=(Name="EditorTutorials",Guid=00F8E3AD47F0A73D50D46881C14DF28F,TargetDependencies=(33482D004789784C9DA695A682ACCA1B,AC8BFD2A41A2FB2893BB8EA0AF903E6D),AdditionalManifestDependencies=,RequiredModuleNames=("IntroTutorials"),GatherFromTextFiles=(IsEnabled=False,SearchDirectories=,ExcludePathWildcards=,FileExtensions=((Pattern="h"),(Pattern="cpp"),(Pattern="ini"))),GatherFromPackages=(IsEnabled=True,IncludePathWildcards=((Pattern="Content/Tutorial/*")),ExcludePathWildcards=,FileExtensions=((Pattern="umap"),(Pattern="uasset")),ShouldGatherFromEditorOnlyData=True),GatherFromMetaData=(IsEnabled=False,IncludePathWildcards=,ExcludePathWildcards=,KeySpecifications=,ShouldGatherFromEditorOnlyData=True),NativeCultureIndex=0,SupportedCulturesStatistics=((CultureName="en"),(CultureName="es"),(CultureName="ja"),(CultureName="ko"),(CultureName="pt-BR"),(CultureName="zh-CN")))
--EngineTargetsSettings=(Name="PropertyNames",Guid=E391A8B149980E8154E056AF2DA49479,TargetDependencies=(33482D004789784C9DA695A682ACCA1B,AC8BFD2A41A2FB2893BB8EA0AF903E6D),AdditionalManifestDependencies=,RequiredModuleNames=,GatherFromTextFiles=(IsEnabled=False,SearchDirectories=,ExcludePathWildcards=,FileExtensions=((Pattern="h"),(Pattern="cpp"),(Pattern="ini"))),GatherFromPackages=(IsEnabled=False,IncludePathWildcards=,ExcludePathWildcards=,FileExtensions=((Pattern="umap"),(Pattern="uasset")),ShouldGatherFromEditorOnlyData=True),GatherFromMetaData=(IsEnabled=True,IncludePathWildcards=((Pattern="Source/Editor/*"),(Pattern="Source/Runtime/*"),(Pattern="Source/Developer/*")),ExcludePathWildcards=((Pattern="Source/Developer/NoRedist/CommunityPortalServices/*")),KeySpecifications=((MetaDataKey=(Name="DisplayName"),TextNamespace="UObjectDisplayNames",TextKeyPattern=(Pattern="{FieldPath}"))),ShouldGatherFromEditorOnlyData=True),NativeCultureIndex=0,SupportedCulturesStatistics=((CultureName="en"),(CultureName="es"),(CultureName="ja"),(CultureName="ko"),(CultureName="pt-BR"),(CultureName="zh-CN")))
--EngineTargetsSettings=(Name="ToolTips",Guid=0F116534468918AEA432DD8C77703BA8,TargetDependencies=(33482D004789784C9DA695A682ACCA1B,AC8BFD2A41A2FB2893BB8EA0AF903E6D),AdditionalManifestDependencies=,RequiredModuleNames=,GatherFromTextFiles=(IsEnabled=False,SearchDirectories=,ExcludePathWildcards=,FileExtensions=((Pattern="h"),(Pattern="cpp"),(Pattern="ini"))),GatherFromPackages=(IsEnabled=False,IncludePathWildcards=,ExcludePathWildcards=,FileExtensions=((Pattern="umap"),(Pattern="uasset")),ShouldGatherFromEditorOnlyData=True),GatherFromMetaData=(IsEnabled=True,IncludePathWildcards=((Pattern="Source/Editor/*"),(Pattern="Source/Runtime/*"),(Pattern="Source/Developer/*")),ExcludePathWildcards=((Pattern="Source/Developer/NoRedist/CommunityPortalServices/*")),KeySpecifications=((MetaDataKey=(Name="ToolTip"),TextNamespace="UObjectToolTips",TextKeyPattern=(Pattern="{FieldPath}")),(MetaDataKey=(Name="ShortToolTip"),TextNamespace="UObjectShortToolTips",TextKeyPattern=(Pattern="{FieldPath}"))),ShouldGatherFromEditorOnlyData=True),NativeCultureIndex=0,SupportedCulturesStatistics=((CultureName="en"),(CultureName="es"),(CultureName="ja"),(CultureName="ko"),(CultureName="pt-BR"),(CultureName="zh-CN")))
--EngineTargetsSettings=(Name="Keywords",Guid=AE89AECB47475F420D0D69A5547515DC,TargetDependencies=(33482D004789784C9DA695A682ACCA1B,AC8BFD2A41A2FB2893BB8EA0AF903E6D),AdditionalManifestDependencies=,RequiredModuleNames=,GatherFromTextFiles=(IsEnabled=False,SearchDirectories=,ExcludePathWildcards=,FileExtensions=((Pattern="h"),(Pattern="cpp"),(Pattern="ini"))),GatherFromPackages=(IsEnabled=False,IncludePathWildcards=,ExcludePathWildcards=,FileExtensions=((Pattern="umap"),(Pattern="uasset")),ShouldGatherFromEditorOnlyData=True),GatherFromMetaData=(IsEnabled=True,IncludePathWildcards=((Pattern="Source/Editor/*"),(Pattern="Source/Runtime/*"),(Pattern="Source/Developer/*")),ExcludePathWildcards=((Pattern="Source/Developer/NoRedist/CommunityPortalServices/*")),KeySpecifications=((MetaDataKey=(Name="Keywords"),TextNamespace="UObjectKeywords",TextKeyPattern=(Pattern="{FieldPath}"))),ShouldGatherFromEditorOnlyData=True),NativeCultureIndex=0,SupportedCulturesStatistics=((CultureName="en"),(CultureName="es"),(CultureName="ja"),(CultureName="ko"),(CultureName="pt-BR"),(CultureName="zh-CN")))
--EngineTargetsSettings=(Name="Category",Guid=14B8DEE642A6A7AFEB5A28B959EC373A,TargetDependencies=,AdditionalManifestDependencies=,RequiredModuleNames=,GatherFromTextFiles=(IsEnabled=False,SearchDirectories=,ExcludePathWildcards=,FileExtensions=((Pattern="h"),(Pattern="cpp"),(Pattern="ini"))),GatherFromPackages=(IsEnabled=False,IncludePathWildcards=,ExcludePathWildcards=,FileExtensions=((Pattern="umap"),(Pattern="uasset")),ShouldGatherFromEditorOnlyData=False),GatherFromMetaData=(IsEnabled=True,IncludePathWildcards=((Pattern="Source/Editor/*"),(Pattern="Source/Runtime/*"),(Pattern="Source/Developer/*")),ExcludePathWildcards=((Pattern="Source/Developer/NoRedist/CommunityPortalServices/*")),KeySpecifications=((MetaDataKey=(Name="Category"),TextNamespace="UObjectCategory",TextKeyPattern=(Pattern="{FieldPath}"))),ShouldGatherFromEditorOnlyData=True),NativeCultureIndex=0,SupportedCulturesStatistics=((CultureName="en"),(CultureName="es"),(CultureName="ja"),(CultureName="ko"),(CultureName="pt-BR"),(CultureName="zh-CN")))
-+EngineTargetsSettings=(Name="Engine",Guid=33482D004789784C9DA695A682ACCA1B,TargetDependencies=,AdditionalManifestDependencies=,RequiredModuleNames=,GatherFromTextFiles=(IsEnabled=True,SearchDirectories=((Path="Source/Runtime/"),(Path="Source/Developer/"),(Path="Config/")),ExcludePathWildcards=((Pattern="Source/Developer/NoRedist/CommunityPortalServices/*"),(Pattern="Source/Developer/NoRedist/UnrealEngineLauncherServices/*"),(Pattern="Source/Developer/NoRedist/BuildPatchServices/*")),FileExtensions=((Pattern="cpp"),(Pattern="h"),(Pattern="c"),(Pattern="inl"),(Pattern="mm"),(Pattern="ini"))),GatherFromPackages=(IsEnabled=True,IncludePathWildcards=((Pattern="Content/*")),ExcludePathWildcards=((Pattern="Content/Editor/*"),(Pattern="Content/Tutorial/*"),(Pattern="Content/Developers/*"),(Pattern="Content/TestPackages/*"),(Pattern="Content/QA_Assets/*"),(Pattern="Content/Maps/Automation/*"),(Pattern="Content/EngineSounds/*")),FileExtensions=((Pattern="umap"),(Pattern="uasset")),ShouldGatherFromEditorOnlyData=True),GatherFromMetaData=(IsEnabled=False,IncludePathWildcards=,ExcludePathWildcards=,KeySpecifications=,ShouldGatherFromEditorOnlyData=True),NativeCultureIndex=0,SupportedCulturesStatistics=((CultureName="en"),(CultureName="es"),(CultureName="ja"),(CultureName="ko"),(CultureName="pt-BR"),(CultureName="zh-CN")))
-+EngineTargetsSettings=(Name="Editor",Guid=AC8BFD2A41A2FB2893BB8EA0AF903E6D,TargetDependencies=(33482D004789784C9DA695A682ACCA1B),AdditionalManifestDependencies=,RequiredModuleNames=,GatherFromTextFiles=(IsEnabled=True,SearchDirectories=((Path="Source/Editor/")),ExcludePathWildcards=,FileExtensions=((Pattern="cpp"),(Pattern="h"),(Pattern="c"),(Pattern="inl"),(Pattern="mm"))),GatherFromPackages=(IsEnabled=True,IncludePathWildcards=((Pattern="Content/Editor/*"),(Pattern="Content/Editor*")),ExcludePathWildcards=,FileExtensions=((Pattern="umap"),(Pattern="uasset")),ShouldGatherFromEditorOnlyData=True),GatherFromMetaData=(IsEnabled=False,IncludePathWildcards=,ExcludePathWildcards=,KeySpecifications=,ShouldGatherFromEditorOnlyData=True),NativeCultureIndex=0,SupportedCulturesStatistics=((CultureName="en"),(CultureName="es"),(CultureName="ja"),(CultureName="ko"),(CultureName="pt-BR"),(CultureName="zh-CN")))
-+EngineTargetsSettings=(Name="EditorTutorials",Guid=00F8E3AD47F0A73D50D46881C14DF28F,TargetDependencies=(33482D004789784C9DA695A682ACCA1B,AC8BFD2A41A2FB2893BB8EA0AF903E6D),AdditionalManifestDependencies=,RequiredModuleNames=("IntroTutorials"),GatherFromTextFiles=(IsEnabled=False,SearchDirectories=,ExcludePathWildcards=,FileExtensions=((Pattern="h"),(Pattern="cpp"),(Pattern="ini"))),GatherFromPackages=(IsEnabled=True,IncludePathWildcards=((Pattern="Content/Tutorial/*")),ExcludePathWildcards=,FileExtensions=((Pattern="umap"),(Pattern="uasset")),ShouldGatherFromEditorOnlyData=True),GatherFromMetaData=(IsEnabled=False,IncludePathWildcards=,ExcludePathWildcards=,KeySpecifications=,ShouldGatherFromEditorOnlyData=True),NativeCultureIndex=0,SupportedCulturesStatistics=((CultureName="en"),(CultureName="es"),(CultureName="ja"),(CultureName="ko"),(CultureName="pt-BR"),(CultureName="zh-CN")))
-+EngineTargetsSettings=(Name="PropertyNames",Guid=E391A8B149980E8154E056AF2DA49479,TargetDependencies=(33482D004789784C9DA695A682ACCA1B,AC8BFD2A41A2FB2893BB8EA0AF903E6D),AdditionalManifestDependencies=,RequiredModuleNames=,GatherFromTextFiles=(IsEnabled=False,SearchDirectories=,ExcludePathWildcards=,FileExtensions=((Pattern="h"),(Pattern="cpp"),(Pattern="ini"))),GatherFromPackages=(IsEnabled=False,IncludePathWildcards=,ExcludePathWildcards=,FileExtensions=((Pattern="umap"),(Pattern="uasset")),ShouldGatherFromEditorOnlyData=True),GatherFromMetaData=(IsEnabled=True,IncludePathWildcards=((Pattern="Source/Editor/*"),(Pattern="Source/Runtime/*"),(Pattern="Source/Developer/*")),ExcludePathWildcards=((Pattern="Source/Developer/NoRedist/CommunityPortalServices/*")),KeySpecifications=((MetaDataKey=(Name="DisplayName"),TextNamespace="UObjectDisplayNames",TextKeyPattern=(Pattern="{FieldPath}"))),ShouldGatherFromEditorOnlyData=True),NativeCultureIndex=0,SupportedCulturesStatistics=((CultureName="en"),(CultureName="es"),(CultureName="ja"),(CultureName="ko"),(CultureName="pt-BR"),(CultureName="zh-CN")))
-+EngineTargetsSettings=(Name="ToolTips",Guid=0F116534468918AEA432DD8C77703BA8,TargetDependencies=(33482D004789784C9DA695A682ACCA1B,AC8BFD2A41A2FB2893BB8EA0AF903E6D),AdditionalManifestDependencies=,RequiredModuleNames=,GatherFromTextFiles=(IsEnabled=False,SearchDirectories=,ExcludePathWildcards=,FileExtensions=((Pattern="h"),(Pattern="cpp"),(Pattern="ini"))),GatherFromPackages=(IsEnabled=False,IncludePathWildcards=,ExcludePathWildcards=,FileExtensions=((Pattern="umap"),(Pattern="uasset")),ShouldGatherFromEditorOnlyData=True),GatherFromMetaData=(IsEnabled=True,IncludePathWildcards=((Pattern="Source/Editor/*"),(Pattern="Source/Runtime/*"),(Pattern="Source/Developer/*")),ExcludePathWildcards=((Pattern="Source/Developer/NoRedist/CommunityPortalServices/*")),KeySpecifications=((MetaDataKey=(Name="ToolTip"),TextNamespace="UObjectToolTips",TextKeyPattern=(Pattern="{FieldPath}")),(MetaDataKey=(Name="ShortToolTip"),TextNamespace="UObjectShortToolTips",TextKeyPattern=(Pattern="{FieldPath}"))),ShouldGatherFromEditorOnlyData=True),NativeCultureIndex=0,SupportedCulturesStatistics=((CultureName="en"),(CultureName="es"),(CultureName="ja"),(CultureName="ko"),(CultureName="pt-BR"),(CultureName="zh-CN")))
-+EngineTargetsSettings=(Name="Keywords",Guid=AE89AECB47475F420D0D69A5547515DC,TargetDependencies=(33482D004789784C9DA695A682ACCA1B,AC8BFD2A41A2FB2893BB8EA0AF903E6D),AdditionalManifestDependencies=,RequiredModuleNames=,GatherFromTextFiles=(IsEnabled=False,SearchDirectories=,ExcludePathWildcards=,FileExtensions=((Pattern="h"),(Pattern="cpp"),(Pattern="ini"))),GatherFromPackages=(IsEnabled=False,IncludePathWildcards=,ExcludePathWildcards=,FileExtensions=((Pattern="umap"),(Pattern="uasset")),ShouldGatherFromEditorOnlyData=True),GatherFromMetaData=(IsEnabled=True,IncludePathWildcards=((Pattern="Source/Editor/*"),(Pattern="Source/Runtime/*"),(Pattern="Source/Developer/*")),ExcludePathWildcards=((Pattern="Source/Developer/NoRedist/CommunityPortalServices/*")),KeySpecifications=((MetaDataKey=(Name="Keywords"),TextNamespace="UObjectKeywords",TextKeyPattern=(Pattern="{FieldPath}"))),ShouldGatherFromEditorOnlyData=True),NativeCultureIndex=0,SupportedCulturesStatistics=((CultureName="en"),(CultureName="es"),(CultureName="ja"),(CultureName="ko"),(CultureName="pt-BR"),(CultureName="zh-CN")))
-+EngineTargetsSettings=(Name="Category",Guid=14B8DEE642A6A7AFEB5A28B959EC373A,TargetDependencies=,AdditionalManifestDependencies=,RequiredModuleNames=,GatherFromTextFiles=(IsEnabled=False,SearchDirectories=,ExcludePathWildcards=,FileExtensions=((Pattern="h"),(Pattern="cpp"),(Pattern="ini"))),GatherFromPackages=(IsEnabled=False,IncludePathWildcards=,ExcludePathWildcards=,FileExtensions=((Pattern="umap"),(Pattern="uasset")),ShouldGatherFromEditorOnlyData=False),GatherFromMetaData=(IsEnabled=True,IncludePathWildcards=((Pattern="Source/Editor/*"),(Pattern="Source/Runtime/*"),(Pattern="Source/Developer/*")),ExcludePathWildcards=((Pattern="Source/Developer/NoRedist/CommunityPortalServices/*")),KeySpecifications=((MetaDataKey=(Name="Category"),TextNamespace="UObjectCategory",TextKeyPattern=(Pattern="{FieldPath}"))),ShouldGatherFromEditorOnlyData=True),NativeCultureIndex=0,SupportedCulturesStatistics=((CultureName="en"),(CultureName="es"),(CultureName="ja"),(CultureName="ko"),(CultureName="pt-BR"),(CultureName="zh-CN")))
--GameTargetsSettings=(Name="Game",Guid=AE0EA34A45461A25BA65A391026F19F8,TargetDependencies=(33482D004789784C9DA695A682ACCA1B,AC8BFD2A41A2FB2893BB8EA0AF903E6D),AdditionalManifestDependencies=,RequiredModuleNames=,GatherFromTextFiles=(IsEnabled=False,SearchDirectories=,ExcludePathWildcards=,FileExtensions=((Pattern="h"),(Pattern="cpp"),(Pattern="ini"))),GatherFromPackages=(IsEnabled=False,IncludePathWildcards=,ExcludePathWildcards=,FileExtensions=((Pattern="umap"),(Pattern="uasset")),ShouldGatherFromEditorOnlyData=False),GatherFromMetaData=(IsEnabled=False,IncludePathWildcards=,ExcludePathWildcards=,KeySpecifications=,ShouldGatherFromEditorOnlyData=False),NativeCultureIndex=-1,SupportedCulturesStatistics=((CultureName="en")))
--GameTargetsSettings=(Name=,Guid=4FDC3D4847696028C05CADAB8D272007,TargetDependencies=,AdditionalManifestDependencies=,RequiredModuleNames=,GatherFromTextFiles=(IsEnabled=True,SearchDirectories=,ExcludePathWildcards=,FileExtensions=((Pattern="h"),(Pattern="cpp"),(Pattern="ini"))),GatherFromPackages=(IsEnabled=True,IncludePathWildcards=,ExcludePathWildcards=,FileExtensions=((Pattern="umap"),(Pattern="uasset")),ShouldGatherFromEditorOnlyData=False),GatherFromMetaData=(IsEnabled=False,IncludePathWildcards=,ExcludePathWildcards=,KeySpecifications=,ShouldGatherFromEditorOnlyData=False),NativeCultureIndex=-1,SupportedCulturesStatistics=)
-+GameTargetsSettings=(Name="Game",Guid=AE0EA34A45461A25BA65A391026F19F8,TargetDependencies=(33482D004789784C9DA695A682ACCA1B,AC8BFD2A41A2FB2893BB8EA0AF903E6D),AdditionalManifestDependencies=,RequiredModuleNames=,GatherFromTextFiles=(IsEnabled=False,SearchDirectories=,ExcludePathWildcards=,FileExtensions=((Pattern="h"),(Pattern="cpp"),(Pattern="ini"))),GatherFromPackages=(IsEnabled=False,IncludePathWildcards=,ExcludePathWildcards=,FileExtensions=((Pattern="umap"),(Pattern="uasset")),ShouldGatherFromEditorOnlyData=False),GatherFromMetaData=(IsEnabled=False,IncludePathWildcards=,ExcludePathWildcards=,KeySpecifications=,ShouldGatherFromEditorOnlyData=False),NativeCultureIndex=-1,SupportedCulturesStatistics=((CultureName="en")))
-+GameTargetsSettings=(Name="NewTarget",Guid=C2E59CDF4A9AFC05C4755F8E61FBFA0D,TargetDependencies=,AdditionalManifestDependencies=,RequiredModuleNames=,GatherFromTextFiles=(IsEnabled=True,SearchDirectories=,ExcludePathWildcards=,FileExtensions=((Pattern="h"),(Pattern="cpp"),(Pattern="ini"))),GatherFromPackages=(IsEnabled=True,IncludePathWildcards=,ExcludePathWildcards=,FileExtensions=((Pattern="umap"),(Pattern="uasset")),ShouldGatherFromEditorOnlyData=False),GatherFromMetaData=(IsEnabled=False,IncludePathWildcards=,ExcludePathWildcards=,KeySpecifications=,ShouldGatherFromEditorOnlyData=False),NativeCultureIndex=0,SupportedCulturesStatistics=((CultureName="ko-KR")))
-
-
diff --git a/Examples/Config/DefaultEngine.ini b/Examples/Config/DefaultEngine.ini
index d957362..7bf4e92 100644
--- a/Examples/Config/DefaultEngine.ini
+++ b/Examples/Config/DefaultEngine.ini
@@ -1,51 +1,10 @@
 [URL]
-[/Script/Engine.UserInterfaceSettings]
-RenderFocusRule=NavigationOnly
-DefaultCursor=None
-TextEditBeamCursor=None
-CrosshairsCursor=None
-GrabHandCursor=None
-GrabHandClosedCursor=None
-SlashedCircleCursor=None
-ApplicationScale=1.000000
-UIScaleRule=ShortestSide
-CustomScalingRuleClass=None
-UIScaleCurve=(EditorCurveData=(PreInfinityExtrap=RCCE_Constant,PostInfinityExtrap=RCCE_Constant,Keys=((Time=480.000000,Value=0.444000),(Time=720.000000,Value=0.666000),(Time=1080.000000,Value=1.000000),(Time=8640.000000,Value=8.000000))),ExternalCurve=None)
-
 [/Script/Engine.RendererSettings]
-r.MobileHDR=True
-r.MobileNumDynamicPointLights=4
-r.MobileDynamicPointLightsUseStaticBranch=True
-r.AllowOcclusionQueries=True
-r.MinScreenRadiusForLights=0.030000
-r.MinScreenRadiusForDepthPrepass=0.030000
-r.PrecomputedVisibilityWarning=False
-r.TextureStreaming=True
-Compat.UseDXT5NormalMaps=False
-r.AllowStaticLighting=True
-r.NormalMapsForStaticLighting=False
-r.GenerateMeshDistanceFields=False
-r.GenerateLandscapeGIData=True
-r.TessellationAdaptivePixelsPerTriangle=48.000000
-r.SeparateTranslucency=True
-r.TranslucentSortPolicy=0
-TranslucentSortAxis=(X=0.000000,Y=-1.000000,Z=0.000000)
-r.CustomDepth=1
-r.DefaultFeature.Bloom=True
-r.DefaultFeature.AmbientOcclusion=True
-r.DefaultFeature.AmbientOcclusionStaticFraction=True
-r.DefaultFeature.AutoExposure=True
-r.DefaultFeature.MotionBlur=True
-r.DefaultFeature.LensFlare=True
-r.DefaultFeature.AntiAliasing=2
-r.EarlyZPass=3
-r.EarlyZPassMovable=False
-r.DBuffer=False
-r.ClearSceneMethod=1
-r.BasePassOutputsVelocity=False
-r.WireframeCullThreshold=5.000000
-UIScaleRule=ShortestSide
-UIScaleCurve=(EditorCurveData=(PreInfinityExtrap=RCCE_Constant,PostInfinityExtrap=RCCE_Constant,Keys=),ExternalCurve=None)
+r.DefaultFeature.AutoExposure.ExtendDefaultLuminanceRange=True
+
+[/Script/EngineSettings.GameMapsSettings]
+EditorStartupMap=/Game/StarterContent/Maps/Minimal_Default
+GameDefaultMap=/Game/StarterContent/Maps/Minimal_Default
 
 [/Script/HardwareTargeting.HardwareTargetingSettings]
 TargetedHardwareClass=Desktop
@@ -53,9 +12,4 @@ AppliedTargetedHardwareClass=Desktop
 DefaultGraphicsPerformance=Maximum
 AppliedDefaultGraphicsPerformance=Maximum
 
-[/Script/IOSRuntimeSettings.IOSRuntimeSettings]
-bSupportsPortraitOrientation=False
-bSupportsUpsideDownOrientation=False
-bSupportsLandscapeLeftOrientation=True
-PreferredLandscapeOrientation=LandscapeLeft
 
diff --git a/Examples/Config/DefaultGame.ini b/Examples/Config/DefaultGame.ini
index 5edb722..12c7a11 100644
--- a/Examples/Config/DefaultGame.ini
+++ b/Examples/Config/DefaultGame.ini
@@ -1,2 +1,6 @@
 [/Script/EngineSettings.GeneralProjectSettings]
-ProjectID=6DA75D494D56C84033F23EAA7E92881B
+ProjectID=4D8A1B7B4B4251EF547B8BB990856585
+
+[StartupActions]
+bAddPacks=True
+InsertPack=(PackSource="StarterContent.upack",PackName="StarterContent")
diff --git a/Examples/Config/DefaultInput.ini b/Examples/Config/DefaultInput.ini
deleted file mode 100644
index 18cb027..0000000
--- a/Examples/Config/DefaultInput.ini
+++ /dev/null
@@ -1,62 +0,0 @@
-
-[/Script/Engine.InputSettings]
--AxisConfig=(AxisKeyName="Gamepad_LeftX",AxisProperties=(DeadZone=0.250000,Sensitivity=1.000000,Exponent=1.000000,bInvert=False))
--AxisConfig=(AxisKeyName="Gamepad_LeftY",AxisProperties=(DeadZone=0.250000,Sensitivity=1.000000,Exponent=1.000000,bInvert=False))
--AxisConfig=(AxisKeyName="Gamepad_RightX",AxisProperties=(DeadZone=0.250000,Sensitivity=1.000000,Exponent=1.000000,bInvert=False))
--AxisConfig=(AxisKeyName="Gamepad_RightY",AxisProperties=(DeadZone=0.250000,Sensitivity=1.000000,Exponent=1.000000,bInvert=False))
--AxisConfig=(AxisKeyName="MouseX",AxisProperties=(DeadZone=0.000000,Sensitivity=0.070000,Exponent=1.000000,bInvert=False))
--AxisConfig=(AxisKeyName="MouseY",AxisProperties=(DeadZone=0.000000,Sensitivity=0.070000,Exponent=1.000000,bInvert=False))
-+AxisConfig=(AxisKeyName="Gamepad_LeftX",AxisProperties=(DeadZone=0.250000,Sensitivity=1.000000,Exponent=1.000000,bInvert=False))
-+AxisConfig=(AxisKeyName="Gamepad_LeftY",AxisProperties=(DeadZone=0.250000,Sensitivity=1.000000,Exponent=1.000000,bInvert=False))
-+AxisConfig=(AxisKeyName="Gamepad_RightX",AxisProperties=(DeadZone=0.250000,Sensitivity=1.000000,Exponent=1.000000,bInvert=False))
-+AxisConfig=(AxisKeyName="Gamepad_RightY",AxisProperties=(DeadZone=0.250000,Sensitivity=1.000000,Exponent=1.000000,bInvert=False))
-+AxisConfig=(AxisKeyName="MouseX",AxisProperties=(DeadZone=0.000000,Sensitivity=0.070000,Exponent=1.000000,bInvert=False))
-+AxisConfig=(AxisKeyName="MouseY",AxisProperties=(DeadZone=0.000000,Sensitivity=0.070000,Exponent=1.000000,bInvert=False))
-bAltEnterTogglesFullscreen=True
-bUseMouseForTouch=False
-bEnableMouseSmoothing=True
-bEnableFOVScaling=True
-FOVScale=0.011110
-DoubleClickTime=0.200000
--ActionMappings=(ActionName="Jump2",Key=Gamepad_FaceButton_Bottom,bShift=False,bCtrl=False,bAlt=False,bCmd=False)
--ActionMappings=(ActionName="Jump2",Key=SpaceBar,bShift=False,bCtrl=False,bAlt=False,bCmd=False)
--ActionMappings=(ActionName="Wave",Key=None,bShift=False,bCtrl=False,bAlt=False,bCmd=False)
-+ActionMappings=(ActionName="Jump2",Key=Gamepad_FaceButton_Bottom,bShift=False,bCtrl=False,bAlt=False,bCmd=False)
-+ActionMappings=(ActionName="Jump2",Key=SpaceBar,bShift=False,bCtrl=False,bAlt=False,bCmd=False)
-+ActionMappings=(ActionName="Wave",Key=Q,bShift=False,bCtrl=False,bAlt=False,bCmd=False)
--AxisMappings=(AxisName="LookUp",Key=MouseY,Scale=-1.000000)
--AxisMappings=(AxisName="LookUpRate",Key=Gamepad_RightY,Scale=1.000000)
--AxisMappings=(AxisName="MoveForward",Key=Down,Scale=-1.000000)
--AxisMappings=(AxisName="MoveForward",Key=Gamepad_LeftY,Scale=1.000000)
--AxisMappings=(AxisName="MoveForward",Key=S,Scale=-1.000000)
--AxisMappings=(AxisName="MoveForward",Key=Up,Scale=1.000000)
--AxisMappings=(AxisName="MoveForward",Key=W,Scale=1.000000)
--AxisMappings=(AxisName="MoveRight",Key=A,Scale=-1.000000)
--AxisMappings=(AxisName="MoveRight",Key=D,Scale=1.000000)
--AxisMappings=(AxisName="MoveRight",Key=Gamepad_LeftX,Scale=1.000000)
--AxisMappings=(AxisName="Turn",Key=MouseX,Scale=1.000000)
--AxisMappings=(AxisName="TurnRate",Key=Gamepad_RightX,Scale=1.000000)
--AxisMappings=(AxisName="TurnRate",Key=Left,Scale=-1.000000)
--AxisMappings=(AxisName="TurnRate",Key=Right,Scale=1.000000)
-+AxisMappings=(AxisName="LookUp",Key=MouseY,Scale=-1.000000)
-+AxisMappings=(AxisName="LookUpRate",Key=Gamepad_RightY,Scale=1.000000)
-+AxisMappings=(AxisName="MoveForward",Key=Down,Scale=-1.000000)
-+AxisMappings=(AxisName="MoveForward",Key=Gamepad_LeftY,Scale=1.000000)
-+AxisMappings=(AxisName="MoveForward",Key=S,Scale=-1.000000)
-+AxisMappings=(AxisName="MoveForward",Key=Up,Scale=1.000000)
-+AxisMappings=(AxisName="MoveForward",Key=W,Scale=1.000000)
-+AxisMappings=(AxisName="MoveRight",Key=A,Scale=-1.000000)
-+AxisMappings=(AxisName="MoveRight",Key=D,Scale=1.000000)
-+AxisMappings=(AxisName="MoveRight",Key=Gamepad_LeftX,Scale=1.000000)
-+AxisMappings=(AxisName="Turn",Key=MouseX,Scale=1.000000)
-+AxisMappings=(AxisName="TurnRate",Key=Gamepad_RightX,Scale=1.000000)
-+AxisMappings=(AxisName="TurnRate",Key=Left,Scale=-1.000000)
-+AxisMappings=(AxisName="TurnRate",Key=Right,Scale=1.000000)
-bAlwaysShowTouchInterface=False
-bShowConsoleOnFourFingerTap=True
-DefaultTouchInterface=/Engine/MobileResources/HUD/DefaultVirtualJoysticks.DefaultVirtualJoysticks
-ConsoleKey=None
--ConsoleKeys=Tilde
-+ConsoleKeys=Tilde
-
-
diff --git a/Examples/Config/IOS/IOSEngine.ini b/Examples/Config/IOS/IOSEngine.ini
new file mode 100644
index 0000000..cfd00e6
--- /dev/null
+++ b/Examples/Config/IOS/IOSEngine.ini
@@ -0,0 +1,7 @@
+[/Script/IOSRuntimeSettings.IOSRuntimeSettings]
+;AudioSampleRate=48000
+AudioMaxChannels=16
+;AudioCallbackBufferFrameSize=1024
+;AudioNumBuffersToEnqueue=2
+;AudioNumSourceWorkers=0
+
diff --git a/Examples/Config/Linux/LinuxEngine.ini b/Examples/Config/Linux/LinuxEngine.ini
new file mode 100644
index 0000000..0d1efd5
--- /dev/null
+++ b/Examples/Config/Linux/LinuxEngine.ini
@@ -0,0 +1,7 @@
+[/Script/LinuxTargetPlatform.LinuxTargetSettings]
+;AudioSampleRate=48000
+AudioMaxChannels=16
+;AudioCallbackBufferFrameSize=1024
+;AudioNumBuffersToEnqueue=2
+;AudioNumSourceWorkers=0
+
diff --git a/Examples/Config/Mac/MacEngine.ini b/Examples/Config/Mac/MacEngine.ini
new file mode 100644
index 0000000..8a1440e
--- /dev/null
+++ b/Examples/Config/Mac/MacEngine.ini
@@ -0,0 +1,7 @@
+[/Script/MacTargetPlatform.MacTargetSettings]
+;AudioSampleRate=48000
+;AudioMaxChannels=32
+;AudioCallbackBufferFrameSize=1024
+;AudioNumBuffersToEnqueue=2
+;AudioNumSourceWorkers=0
+
diff --git a/Examples/Config/PS4/PS4Engine.ini b/Examples/Config/PS4/PS4Engine.ini
new file mode 100644
index 0000000..ec45464
--- /dev/null
+++ b/Examples/Config/PS4/PS4Engine.ini
@@ -0,0 +1,7 @@
+[/Script/PS4PlatformEditor.PS4TargetSettings]
+;AudioSampleRate=48000
+;AudioMaxChannels=32
+;AudioCallbackBufferFrameSize=1024
+;AudioNumBuffersToEnqueue=2
+;AudioNumSourceWorkers=0
+
diff --git a/Examples/Config/Switch/SwitchEngine.ini b/Examples/Config/Switch/SwitchEngine.ini
new file mode 100644
index 0000000..4bc2c76
--- /dev/null
+++ b/Examples/Config/Switch/SwitchEngine.ini
@@ -0,0 +1,7 @@
+[/Script/SwitchRuntimeSettings.SwitchRuntimeSettings]
+;AudioSampleRate=48000
+;AudioMaxChannels=32
+;AudioCallbackBufferFrameSize=1024
+;AudioNumBuffersToEnqueue=2
+;AudioNumSourceWorkers=0
+
diff --git a/Examples/Config/Windows/WindowsEngine.ini b/Examples/Config/Windows/WindowsEngine.ini
new file mode 100644
index 0000000..7127a0a
--- /dev/null
+++ b/Examples/Config/Windows/WindowsEngine.ini
@@ -0,0 +1,7 @@
+[/Script/WindowsTargetPlatform.WindowsTargetSettings]
+;AudioSampleRate=48000
+;AudioMaxChannels=32
+AudioCallbackBufferFrameSize=256
+AudioNumBuffersToEnqueue=7
+;AudioNumSourceWorkers=0
+
diff --git a/Examples/Config/XboxOne/XboxOneEngine.ini b/Examples/Config/XboxOne/XboxOneEngine.ini
new file mode 100644
index 0000000..87b7754
--- /dev/null
+++ b/Examples/Config/XboxOne/XboxOneEngine.ini
@@ -0,0 +1,7 @@
+[/Script/XboxOnePlatformEditor.XboxOneTargetSettings]
+;AudioSampleRate=48000
+;AudioMaxChannels=32
+AudioCallbackBufferFrameSize=256
+AudioNumBuffersToEnqueue=7
+;AudioNumSourceWorkers=0
+
diff --git a/Examples/Content/JavascriptUserObjectListEntry_BP.uasset b/Examples/Content/JavascriptUserObjectListEntry_BP.uasset
new file mode 100644
index 0000000..9c29fed
--- /dev/null
+++ b/Examples/Content/JavascriptUserObjectListEntry_BP.uasset
@@ -0,0 +1,3 @@
+version https://git-lfs.github.com/spec/v1
+oid sha256:844a2e0fb030896a9be50252fb7324c46b628a5716c36caf944fdc3dc831ffcb
+size 16077
diff --git a/Examples/Content/Scripts/aliases.js b/Examples/Content/Scripts/aliases.js
index 725f45d..b432341 100644
--- a/Examples/Content/Scripts/aliases.js
+++ b/Examples/Content/Scripts/aliases.js
@@ -30,6 +30,16 @@ try { let fnprepatch_5 = AssetRegistry.prototype.GetAssetsByPackageName;AssetReg
 try { let fnprepatch_6 = AssetRegistry.prototype.GetAssetsByClass;AssetRegistry.prototype.GetAssetsByClass = function (ClassName, OutAssetData, bSearchSubClasses = false) { return fnprepatch_6.call(this, ClassName, OutAssetData, bSearchSubClasses) }; } catch (e) {};
 try { let fnprepatch_7 = AssetRegistry.prototype.GetAssetByObjectPath;AssetRegistry.prototype.GetAssetByObjectPath = function (ObjectPath, bIncludeOnlyOnDiskAssets = false) { return fnprepatch_7.call(this, ObjectPath, bIncludeOnlyOnDiskAssets) }; } catch (e) {};
 try { let fnprepatch_8 = AssetRegistry.prototype.GetAllAssets;AssetRegistry.prototype.GetAllAssets = function (OutAssetData, bIncludeOnlyOnDiskAssets = false) { return fnprepatch_8.call(this, OutAssetData, bIncludeOnlyOnDiskAssets) }; } catch (e) {};
+try { AssetRegistry.prototype.GetReferencers = AssetRegistry.prototype.K2_GetReferencers; } catch (e) {};
+try { AssetRegistry.prototype.GetDependencies = AssetRegistry.prototype.K2_GetDependencies; } catch (e) {};
+try { BlueprintGameplayTagLibrary.prototype.NotEqual = BlueprintGameplayTagLibrary.prototype.NotEqual_GameplayTagContainer; } catch (e) {};
+try { BlueprintGameplayTagLibrary.NotEqual = BlueprintGameplayTagLibrary.NotEqual_GameplayTagContainer; } catch (e) {};
+try { BlueprintGameplayTagLibrary.prototype.NotEqual = BlueprintGameplayTagLibrary.prototype.NotEqual_GameplayTag; } catch (e) {};
+try { BlueprintGameplayTagLibrary.NotEqual = BlueprintGameplayTagLibrary.NotEqual_GameplayTag; } catch (e) {};
+try { BlueprintGameplayTagLibrary.prototype.Equal = BlueprintGameplayTagLibrary.prototype.EqualEqual_GameplayTagContainer; } catch (e) {};
+try { BlueprintGameplayTagLibrary.Equal = BlueprintGameplayTagLibrary.EqualEqual_GameplayTagContainer; } catch (e) {};
+try { BlueprintGameplayTagLibrary.prototype.Equal = BlueprintGameplayTagLibrary.prototype.EqualEqual_GameplayTag; } catch (e) {};
+try { BlueprintGameplayTagLibrary.Equal = BlueprintGameplayTagLibrary.EqualEqual_GameplayTag; } catch (e) {};
 try { let fnprepatch_9 = Actor.prototype.WasRecentlyRendered;Actor.prototype.WasRecentlyRendered = function (Tolerance = 0.20000000298023224) { return fnprepatch_9.call(this, Tolerance) }; } catch (e) {};
 try { let fnprepatch_10 = Actor.prototype.SetActorLabel;Actor.prototype.SetActorLabel = function (NewActorLabel, bMarkDirty = true) { return fnprepatch_10.call(this, NewActorLabel, bMarkDirty) }; } catch (e) {};
 try { let fnprepatch_11 = Actor.prototype.PrestreamTextures;Actor.prototype.PrestreamTextures = function (Seconds, bEnableStreaming, CinematicTextureGroups = 0) { return fnprepatch_11.call(this, Seconds, bEnableStreaming, CinematicTextureGroups) }; } catch (e) {};
@@ -89,31 +99,23 @@ try { Actor.prototype.AddActorLocalRotation = Actor.prototype.K2_AddActorLocalRo
 try { Actor.prototype.AddActorLocalOffset = Actor.prototype.K2_AddActorLocalOffset; } catch (e) {};
 try { Actor.prototype.GetActorTransform = Actor.prototype.GetTransform; } catch (e) {};
 try { Actor.prototype.DetachActorFromActor = Actor.prototype.DetachRootComponentFromParent; } catch (e) {};
-try { let fnprepatch_20 = Widget.prototype.HasMouseCaptureByUser;Widget.prototype.HasMouseCaptureByUser = function (UserIndex, PointerIndex = -1) { return fnprepatch_20.call(this, UserIndex, PointerIndex) }; } catch (e) {};
-try { Widget.prototype.HasAnyUserFocusedDescendants = Widget.prototype.HasFocusedDescendants; } catch (e) {};
-try { let fnprepatch_21 = UserWidget.prototype.SetPositionInViewport;UserWidget.prototype.SetPositionInViewport = function (Position, bRemoveDPIScale = true) { return fnprepatch_21.call(this, Position, bRemoveDPIScale) }; } catch (e) {};
-try { let fnprepatch_22 = UserWidget.prototype.SetPlaybackSpeed;UserWidget.prototype.SetPlaybackSpeed = function (InAnimation, PlaybackSpeed = 1) { return fnprepatch_22.call(this, InAnimation, PlaybackSpeed) }; } catch (e) {};
-try { let fnprepatch_23 = UserWidget.prototype.PlayAnimationTo;UserWidget.prototype.PlayAnimationTo = function (InAnimation, StartAtTime = 0, EndAtTime = 0, NumLoopsToPlay = 1, PlayMode = "Forward", PlaybackSpeed = 1) { return fnprepatch_23.call(this, InAnimation, StartAtTime, EndAtTime, NumLoopsToPlay, PlayMode, PlaybackSpeed) }; } catch (e) {};
-try { let fnprepatch_24 = UserWidget.prototype.PlayAnimation;UserWidget.prototype.PlayAnimation = function (InAnimation, StartAtTime = 0, NumLoopsToPlay = 1, PlayMode = "Forward", PlaybackSpeed = 1) { return fnprepatch_24.call(this, InAnimation, StartAtTime, NumLoopsToPlay, PlayMode, PlaybackSpeed) }; } catch (e) {};
-try { let fnprepatch_25 = UserWidget.prototype.AddToViewport;UserWidget.prototype.AddToViewport = function (ZOrder = 0) { return fnprepatch_25.call(this, ZOrder) }; } catch (e) {};
-try { let fnprepatch_26 = UserWidget.prototype.AddToPlayerScreen;UserWidget.prototype.AddToPlayerScreen = function (ZOrder = 0) { return fnprepatch_26.call(this, ZOrder) }; } catch (e) {};
-try { let fnprepatch_27 = ActorComponent.prototype.SetActive;ActorComponent.prototype.SetActive = function (bNewActive, bReset = false) { return fnprepatch_27.call(this, bNewActive, bReset) }; } catch (e) {};
-try { let fnprepatch_28 = ActorComponent.prototype.Activate;ActorComponent.prototype.Activate = function (bReset = false) { return fnprepatch_28.call(this, bReset) }; } catch (e) {};
+try { let fnprepatch_20 = ActorComponent.prototype.SetActive;ActorComponent.prototype.SetActive = function (bNewActive, bReset = false) { return fnprepatch_20.call(this, bNewActive, bReset) }; } catch (e) {};
+try { let fnprepatch_21 = ActorComponent.prototype.Activate;ActorComponent.prototype.Activate = function (bReset = false) { return fnprepatch_21.call(this, bReset) }; } catch (e) {};
 try { ActorComponent.prototype.Tick = ActorComponent.prototype.ReceiveTick; } catch (e) {};
 try { ActorComponent.prototype.EndPlay = ActorComponent.prototype.ReceiveEndPlay; } catch (e) {};
 try { ActorComponent.prototype.BeginPlay = ActorComponent.prototype.ReceiveBeginPlay; } catch (e) {};
 try { ActorComponent.prototype.DestroyComponent = ActorComponent.prototype.K2_DestroyComponent; } catch (e) {};
 try { ActorComponent.prototype.IsComponentBeingDestroyed = ActorComponent.prototype.IsBeingDestroyed; } catch (e) {};
-try { let fnprepatch_29 = SceneComponent.prototype.ToggleVisibility;SceneComponent.prototype.ToggleVisibility = function (bPropagateToChildren = false) { return fnprepatch_29.call(this, bPropagateToChildren) }; } catch (e) {};
-try { let fnprepatch_30 = SceneComponent.prototype.SnapTo;SceneComponent.prototype.SnapTo = function (InParent, InSocketName = "None") { return fnprepatch_30.call(this, InParent, InSocketName) }; } catch (e) {};
-try { let fnprepatch_31 = SceneComponent.prototype.SetVisibility;SceneComponent.prototype.SetVisibility = function (bNewVisibility, bPropagateToChildren = false) { return fnprepatch_31.call(this, bNewVisibility, bPropagateToChildren) }; } catch (e) {};
-try { let fnprepatch_32 = SceneComponent.prototype.SetHiddenInGame;SceneComponent.prototype.SetHiddenInGame = function (NewHidden, bPropagateToChildren = false) { return fnprepatch_32.call(this, NewHidden, bPropagateToChildren) }; } catch (e) {};
-try { let fnprepatch_33 = SceneComponent.prototype.SetAbsolute;SceneComponent.prototype.SetAbsolute = function (bNewAbsoluteLocation = false, bNewAbsoluteRotation = false, bNewAbsoluteScale = false) { return fnprepatch_33.call(this, bNewAbsoluteLocation, bNewAbsoluteRotation, bNewAbsoluteScale) }; } catch (e) {};
-try { let fnprepatch_34 = SceneComponent.prototype.K2_DetachFromComponent;SceneComponent.prototype.K2_DetachFromComponent = function (LocationRule = "KeepRelative", RotationRule = "KeepRelative", ScaleRule = "KeepRelative", bCallModify = true) { return fnprepatch_34.call(this, LocationRule, RotationRule, ScaleRule, bCallModify) }; } catch (e) {};
-try { let fnprepatch_35 = SceneComponent.prototype.K2_AttachTo;SceneComponent.prototype.K2_AttachTo = function (InParent, InSocketName = "None", AttachType = "KeepRelativeOffset", bWeldSimulatedBodies = true) { return fnprepatch_35.call(this, InParent, InSocketName, AttachType, bWeldSimulatedBodies) }; } catch (e) {};
-try { let fnprepatch_36 = SceneComponent.prototype.IsSimulatingPhysics;SceneComponent.prototype.IsSimulatingPhysics = function (BoneName = "None") { return fnprepatch_36.call(this, BoneName) }; } catch (e) {};
-try { let fnprepatch_37 = SceneComponent.prototype.GetSocketTransform;SceneComponent.prototype.GetSocketTransform = function (InSocketName, TransformSpace = "RTS_World") { return fnprepatch_37.call(this, InSocketName, TransformSpace) }; } catch (e) {};
-try { let fnprepatch_38 = SceneComponent.prototype.DetachFromParent;SceneComponent.prototype.DetachFromParent = function (bMaintainWorldPosition = false, bCallModify = true) { return fnprepatch_38.call(this, bMaintainWorldPosition, bCallModify) }; } catch (e) {};
+try { let fnprepatch_22 = SceneComponent.prototype.ToggleVisibility;SceneComponent.prototype.ToggleVisibility = function (bPropagateToChildren = false) { return fnprepatch_22.call(this, bPropagateToChildren) }; } catch (e) {};
+try { let fnprepatch_23 = SceneComponent.prototype.SnapTo;SceneComponent.prototype.SnapTo = function (InParent, InSocketName = "None") { return fnprepatch_23.call(this, InParent, InSocketName) }; } catch (e) {};
+try { let fnprepatch_24 = SceneComponent.prototype.SetVisibility;SceneComponent.prototype.SetVisibility = function (bNewVisibility, bPropagateToChildren = false) { return fnprepatch_24.call(this, bNewVisibility, bPropagateToChildren) }; } catch (e) {};
+try { let fnprepatch_25 = SceneComponent.prototype.SetHiddenInGame;SceneComponent.prototype.SetHiddenInGame = function (NewHidden, bPropagateToChildren = false) { return fnprepatch_25.call(this, NewHidden, bPropagateToChildren) }; } catch (e) {};
+try { let fnprepatch_26 = SceneComponent.prototype.SetAbsolute;SceneComponent.prototype.SetAbsolute = function (bNewAbsoluteLocation = false, bNewAbsoluteRotation = false, bNewAbsoluteScale = false) { return fnprepatch_26.call(this, bNewAbsoluteLocation, bNewAbsoluteRotation, bNewAbsoluteScale) }; } catch (e) {};
+try { let fnprepatch_27 = SceneComponent.prototype.K2_DetachFromComponent;SceneComponent.prototype.K2_DetachFromComponent = function (LocationRule = "KeepRelative", RotationRule = "KeepRelative", ScaleRule = "KeepRelative", bCallModify = true) { return fnprepatch_27.call(this, LocationRule, RotationRule, ScaleRule, bCallModify) }; } catch (e) {};
+try { let fnprepatch_28 = SceneComponent.prototype.K2_AttachTo;SceneComponent.prototype.K2_AttachTo = function (InParent, InSocketName = "None", AttachType = "KeepRelativeOffset", bWeldSimulatedBodies = true) { return fnprepatch_28.call(this, InParent, InSocketName, AttachType, bWeldSimulatedBodies) }; } catch (e) {};
+try { let fnprepatch_29 = SceneComponent.prototype.IsSimulatingPhysics;SceneComponent.prototype.IsSimulatingPhysics = function (BoneName = "None") { return fnprepatch_29.call(this, BoneName) }; } catch (e) {};
+try { let fnprepatch_30 = SceneComponent.prototype.GetSocketTransform;SceneComponent.prototype.GetSocketTransform = function (InSocketName, TransformSpace = "RTS_World") { return fnprepatch_30.call(this, InSocketName, TransformSpace) }; } catch (e) {};
+try { let fnprepatch_31 = SceneComponent.prototype.DetachFromParent;SceneComponent.prototype.DetachFromParent = function (bMaintainWorldPosition = false, bCallModify = true) { return fnprepatch_31.call(this, bMaintainWorldPosition, bCallModify) }; } catch (e) {};
 try { SceneComponent.prototype.SetWorldTransform = SceneComponent.prototype.K2_SetWorldTransform; } catch (e) {};
 try { SceneComponent.prototype.SetWorldRotation = SceneComponent.prototype.K2_SetWorldRotation; } catch (e) {};
 try { SceneComponent.prototype.SetWorldLocationAndRotation = SceneComponent.prototype.K2_SetWorldLocationAndRotation; } catch (e) {};
@@ -137,129 +139,7 @@ try { SceneComponent.prototype.AddRelativeLocation = SceneComponent.prototype.K2
 try { SceneComponent.prototype.AddLocalTransform = SceneComponent.prototype.K2_AddLocalTransform; } catch (e) {};
 try { SceneComponent.prototype.AddLocalRotation = SceneComponent.prototype.K2_AddLocalRotation; } catch (e) {};
 try { SceneComponent.prototype.AddLocalOffset = SceneComponent.prototype.K2_AddLocalOffset; } catch (e) {};
-try { let fnprepatch_39 = PrimitiveComponent.prototype.WakeRigidBody;PrimitiveComponent.prototype.WakeRigidBody = function (BoneName = "None") { return fnprepatch_39.call(this, BoneName) }; } catch (e) {};
-try { let fnprepatch_40 = PrimitiveComponent.prototype.SetUseCCD;PrimitiveComponent.prototype.SetUseCCD = function (InUseCCD, BoneName = "None") { return fnprepatch_40.call(this, InUseCCD, BoneName) }; } catch (e) {};
-try { let fnprepatch_41 = PrimitiveComponent.prototype.SetPhysicsMaxAngularVelocityInRadians;PrimitiveComponent.prototype.SetPhysicsMaxAngularVelocityInRadians = function (NewMaxAngVel, bAddToCurrent = false, BoneName = "None") { return fnprepatch_41.call(this, NewMaxAngVel, bAddToCurrent, BoneName) }; } catch (e) {};
-try { let fnprepatch_42 = PrimitiveComponent.prototype.SetPhysicsMaxAngularVelocityInDegrees;PrimitiveComponent.prototype.SetPhysicsMaxAngularVelocityInDegrees = function (NewMaxAngVel, bAddToCurrent = false, BoneName = "None") { return fnprepatch_42.call(this, NewMaxAngVel, bAddToCurrent, BoneName) }; } catch (e) {};
-try { let fnprepatch_43 = PrimitiveComponent.prototype.SetPhysicsMaxAngularVelocity;PrimitiveComponent.prototype.SetPhysicsMaxAngularVelocity = function (NewMaxAngVel, bAddToCurrent = false, BoneName = "None") { return fnprepatch_43.call(this, NewMaxAngVel, bAddToCurrent, BoneName) }; } catch (e) {};
-try { let fnprepatch_44 = PrimitiveComponent.prototype.SetPhysicsLinearVelocity;PrimitiveComponent.prototype.SetPhysicsLinearVelocity = function (NewVel, bAddToCurrent = false, BoneName = "None") { return fnprepatch_44.call(this, NewVel, bAddToCurrent, BoneName) }; } catch (e) {};
-try { let fnprepatch_45 = PrimitiveComponent.prototype.SetPhysicsAngularVelocityInRadians;PrimitiveComponent.prototype.SetPhysicsAngularVelocityInRadians = function (NewAngVel, bAddToCurrent = false, BoneName = "None") { return fnprepatch_45.call(this, NewAngVel, bAddToCurrent, BoneName) }; } catch (e) {};
-try { let fnprepatch_46 = PrimitiveComponent.prototype.SetPhysicsAngularVelocityInDegrees;PrimitiveComponent.prototype.SetPhysicsAngularVelocityInDegrees = function (NewAngVel, bAddToCurrent = false, BoneName = "None") { return fnprepatch_46.call(this, NewAngVel, bAddToCurrent, BoneName) }; } catch (e) {};
-try { let fnprepatch_47 = PrimitiveComponent.prototype.SetPhysicsAngularVelocity;PrimitiveComponent.prototype.SetPhysicsAngularVelocity = function (NewAngVel, bAddToCurrent = false, BoneName = "None") { return fnprepatch_47.call(this, NewAngVel, bAddToCurrent, BoneName) }; } catch (e) {};
-try { let fnprepatch_48 = PrimitiveComponent.prototype.SetMassScale;PrimitiveComponent.prototype.SetMassScale = function (BoneName = "None", InMassScale = 1) { return fnprepatch_48.call(this, BoneName, InMassScale) }; } catch (e) {};
-try { let fnprepatch_49 = PrimitiveComponent.prototype.SetMassOverrideInKg;PrimitiveComponent.prototype.SetMassOverrideInKg = function (BoneName = "None", MassInKg = 1, bOverrideMass = true) { return fnprepatch_49.call(this, BoneName, MassInKg, bOverrideMass) }; } catch (e) {};
-try { let fnprepatch_50 = PrimitiveComponent.prototype.SetCenterOfMass;PrimitiveComponent.prototype.SetCenterOfMass = function (CenterOfMassOffset, BoneName = "None") { return fnprepatch_50.call(this, CenterOfMassOffset, BoneName) }; } catch (e) {};
-try { let fnprepatch_51 = PrimitiveComponent.prototype.SetBoundsScale;PrimitiveComponent.prototype.SetBoundsScale = function (NewBoundsScale = 1) { return fnprepatch_51.call(this, NewBoundsScale) }; } catch (e) {};
-try { let fnprepatch_52 = PrimitiveComponent.prototype.SetAllPhysicsLinearVelocity;PrimitiveComponent.prototype.SetAllPhysicsLinearVelocity = function (NewVel, bAddToCurrent = false) { return fnprepatch_52.call(this, NewVel, bAddToCurrent) }; } catch (e) {};
-try { let fnprepatch_53 = PrimitiveComponent.prototype.SetAllPhysicsAngularVelocityInRadians;PrimitiveComponent.prototype.SetAllPhysicsAngularVelocityInRadians = function (NewAngVel, bAddToCurrent = false) { return fnprepatch_53.call(this, NewAngVel, bAddToCurrent) }; } catch (e) {};
-try { let fnprepatch_54 = PrimitiveComponent.prototype.SetAllPhysicsAngularVelocityInDegrees;PrimitiveComponent.prototype.SetAllPhysicsAngularVelocityInDegrees = function (NewAngVel, bAddToCurrent = false) { return fnprepatch_54.call(this, NewAngVel, bAddToCurrent) }; } catch (e) {};
-try { let fnprepatch_55 = PrimitiveComponent.prototype.SetAllPhysicsAngularVelocity;PrimitiveComponent.prototype.SetAllPhysicsAngularVelocity = function (NewAngVel, bAddToCurrent = false) { return fnprepatch_55.call(this, NewAngVel, bAddToCurrent) }; } catch (e) {};
-try { let fnprepatch_56 = PrimitiveComponent.prototype.SetAllMassScale;PrimitiveComponent.prototype.SetAllMassScale = function (InMassScale = 1) { return fnprepatch_56.call(this, InMassScale) }; } catch (e) {};
-try { let fnprepatch_57 = PrimitiveComponent.prototype.ScaleByMomentOfInertia;PrimitiveComponent.prototype.ScaleByMomentOfInertia = function (InputVector, BoneName = "None") { return fnprepatch_57.call(this, InputVector, BoneName) }; } catch (e) {};
-try { let fnprepatch_58 = PrimitiveComponent.prototype.PutRigidBodyToSleep;PrimitiveComponent.prototype.PutRigidBodyToSleep = function (BoneName = "None") { return fnprepatch_58.call(this, BoneName) }; } catch (e) {};
-try { let fnprepatch_59 = PrimitiveComponent.prototype.GetPhysicsLinearVelocityAtPoint;PrimitiveComponent.prototype.GetPhysicsLinearVelocityAtPoint = function (Point, BoneName = "None") { return fnprepatch_59.call(this, Point, BoneName) }; } catch (e) {};
-try { let fnprepatch_60 = PrimitiveComponent.prototype.GetPhysicsLinearVelocity;PrimitiveComponent.prototype.GetPhysicsLinearVelocity = function (BoneName = "None") { return fnprepatch_60.call(this, BoneName) }; } catch (e) {};
-try { let fnprepatch_61 = PrimitiveComponent.prototype.GetPhysicsAngularVelocityInRadians;PrimitiveComponent.prototype.GetPhysicsAngularVelocityInRadians = function (BoneName = "None") { return fnprepatch_61.call(this, BoneName) }; } catch (e) {};
-try { let fnprepatch_62 = PrimitiveComponent.prototype.GetPhysicsAngularVelocityInDegrees;PrimitiveComponent.prototype.GetPhysicsAngularVelocityInDegrees = function (BoneName = "None") { return fnprepatch_62.call(this, BoneName) }; } catch (e) {};
-try { let fnprepatch_63 = PrimitiveComponent.prototype.GetPhysicsAngularVelocity;PrimitiveComponent.prototype.GetPhysicsAngularVelocity = function (BoneName = "None") { return fnprepatch_63.call(this, BoneName) }; } catch (e) {};
-try { let fnprepatch_64 = PrimitiveComponent.prototype.GetOverlappingActors;PrimitiveComponent.prototype.GetOverlappingActors = function (OverlappingActors, ClassFilter = null) { return fnprepatch_64.call(this, OverlappingActors, ClassFilter) }; } catch (e) {};
-try { let fnprepatch_65 = PrimitiveComponent.prototype.GetMassScale;PrimitiveComponent.prototype.GetMassScale = function (BoneName = "None") { return fnprepatch_65.call(this, BoneName) }; } catch (e) {};
-try { let fnprepatch_66 = PrimitiveComponent.prototype.GetInertiaTensor;PrimitiveComponent.prototype.GetInertiaTensor = function (BoneName = "None") { return fnprepatch_66.call(this, BoneName) }; } catch (e) {};
-try { let fnprepatch_67 = PrimitiveComponent.prototype.GetClosestPointOnCollision;PrimitiveComponent.prototype.GetClosestPointOnCollision = function (Point, OutPointOnBody, BoneName = "None") { return fnprepatch_67.call(this, Point, OutPointOnBody, BoneName) }; } catch (e) {};
-try { let fnprepatch_68 = PrimitiveComponent.prototype.GetCenterOfMass;PrimitiveComponent.prototype.GetCenterOfMass = function (BoneName = "None") { return fnprepatch_68.call(this, BoneName) }; } catch (e) {};
-try { let fnprepatch_69 = PrimitiveComponent.prototype.CreateDynamicMaterialInstance;PrimitiveComponent.prototype.CreateDynamicMaterialInstance = function (ElementIndex, SourceMaterial = undefined, OptionalName = "None") { return fnprepatch_69.call(this, ElementIndex, SourceMaterial, OptionalName) }; } catch (e) {};
-try { let fnprepatch_70 = PrimitiveComponent.prototype.AddTorqueInRadians;PrimitiveComponent.prototype.AddTorqueInRadians = function (Torque, BoneName = "None", bAccelChange = false) { return fnprepatch_70.call(this, Torque, BoneName, bAccelChange) }; } catch (e) {};
-try { let fnprepatch_71 = PrimitiveComponent.prototype.AddTorqueInDegrees;PrimitiveComponent.prototype.AddTorqueInDegrees = function (Torque, BoneName = "None", bAccelChange = false) { return fnprepatch_71.call(this, Torque, BoneName, bAccelChange) }; } catch (e) {};
-try { let fnprepatch_72 = PrimitiveComponent.prototype.AddTorque;PrimitiveComponent.prototype.AddTorque = function (Torque, BoneName = "None", bAccelChange = false) { return fnprepatch_72.call(this, Torque, BoneName, bAccelChange) }; } catch (e) {};
-try { let fnprepatch_73 = PrimitiveComponent.prototype.AddRadialImpulse;PrimitiveComponent.prototype.AddRadialImpulse = function (Origin, Radius, Strength, Falloff, bVelChange = false) { return fnprepatch_73.call(this, Origin, Radius, Strength, Falloff, bVelChange) }; } catch (e) {};
-try { let fnprepatch_74 = PrimitiveComponent.prototype.AddRadialForce;PrimitiveComponent.prototype.AddRadialForce = function (Origin, Radius, Strength, Falloff, bAccelChange = false) { return fnprepatch_74.call(this, Origin, Radius, Strength, Falloff, bAccelChange) }; } catch (e) {};
-try { let fnprepatch_75 = PrimitiveComponent.prototype.AddImpulseAtLocation;PrimitiveComponent.prototype.AddImpulseAtLocation = function (Impulse, Location, BoneName = "None") { return fnprepatch_75.call(this, Impulse, Location, BoneName) }; } catch (e) {};
-try { let fnprepatch_76 = PrimitiveComponent.prototype.AddImpulse;PrimitiveComponent.prototype.AddImpulse = function (Impulse, BoneName = "None", bVelChange = false) { return fnprepatch_76.call(this, Impulse, BoneName, bVelChange) }; } catch (e) {};
-try { let fnprepatch_77 = PrimitiveComponent.prototype.AddForceAtLocationLocal;PrimitiveComponent.prototype.AddForceAtLocationLocal = function (Force, Location, BoneName = "None") { return fnprepatch_77.call(this, Force, Location, BoneName) }; } catch (e) {};
-try { let fnprepatch_78 = PrimitiveComponent.prototype.AddForceAtLocation;PrimitiveComponent.prototype.AddForceAtLocation = function (Force, Location, BoneName = "None") { return fnprepatch_78.call(this, Force, Location, BoneName) }; } catch (e) {};
-try { let fnprepatch_79 = PrimitiveComponent.prototype.AddForce;PrimitiveComponent.prototype.AddForce = function (Force, BoneName = "None", bAccelChange = false) { return fnprepatch_79.call(this, Force, BoneName, bAccelChange) }; } catch (e) {};
-try { let fnprepatch_80 = PrimitiveComponent.prototype.AddAngularImpulseInRadians;PrimitiveComponent.prototype.AddAngularImpulseInRadians = function (Impulse, BoneName = "None", bVelChange = false) { return fnprepatch_80.call(this, Impulse, BoneName, bVelChange) }; } catch (e) {};
-try { let fnprepatch_81 = PrimitiveComponent.prototype.AddAngularImpulseInDegrees;PrimitiveComponent.prototype.AddAngularImpulseInDegrees = function (Impulse, BoneName = "None", bVelChange = false) { return fnprepatch_81.call(this, Impulse, BoneName, bVelChange) }; } catch (e) {};
-try { let fnprepatch_82 = PrimitiveComponent.prototype.AddAngularImpulse;PrimitiveComponent.prototype.AddAngularImpulse = function (Impulse, BoneName = "None", bVelChange = false) { return fnprepatch_82.call(this, Impulse, BoneName, bVelChange) }; } catch (e) {};
-try { PrimitiveComponent.prototype.SetPhysicalMaterialOverride = PrimitiveComponent.prototype.SetPhysMaterialOverride; } catch (e) {};
-try { PrimitiveComponent.prototype.SetMaxDrawDistance = PrimitiveComponent.prototype.SetCullDistance; } catch (e) {};
-try { PrimitiveComponent.prototype.SphereTraceComponent = PrimitiveComponent.prototype.K2_SphereTraceComponent; } catch (e) {};
-try { PrimitiveComponent.prototype.SphereOverlapComponent = PrimitiveComponent.prototype.K2_SphereOverlapComponent; } catch (e) {};
-try { PrimitiveComponent.prototype.LineTraceComponent = PrimitiveComponent.prototype.K2_LineTraceComponent; } catch (e) {};
-try { PrimitiveComponent.prototype.IsQueryCollisionEnabled = PrimitiveComponent.prototype.K2_IsQueryCollisionEnabled; } catch (e) {};
-try { PrimitiveComponent.prototype.IsPhysicsCollisionEnabled = PrimitiveComponent.prototype.K2_IsPhysicsCollisionEnabled; } catch (e) {};
-try { PrimitiveComponent.prototype.IsCollisionEnabled = PrimitiveComponent.prototype.K2_IsCollisionEnabled; } catch (e) {};
-try { PrimitiveComponent.prototype.BoxOverlapComponent = PrimitiveComponent.prototype.K2_BoxOverlapComponent; } catch (e) {};
-try { PrimitiveComponent.prototype.CreateMIDForElementFromMaterial = PrimitiveComponent.prototype.CreateAndSetMaterialInstanceDynamicFromMaterial; } catch (e) {};
-try { PrimitiveComponent.prototype.CreateMIDForElement = PrimitiveComponent.prototype.CreateAndSetMaterialInstanceDynamic; } catch (e) {};
-try { PrimitiveComponent.prototype.GetMoveIgnoreComponents = PrimitiveComponent.prototype.CopyArrayOfMoveIgnoreComponents; } catch (e) {};
-try { PrimitiveComponent.prototype.GetMoveIgnoreActors = PrimitiveComponent.prototype.CopyArrayOfMoveIgnoreActors; } catch (e) {};
-try { let fnprepatch_83 = MeshComponent.prototype.PrestreamTextures;MeshComponent.prototype.PrestreamTextures = function (Seconds, bPrioritizeCharacterTextures, CinematicTextureGroups = 0) { return fnprepatch_83.call(this, Seconds, bPrioritizeCharacterTextures, CinematicTextureGroups) }; } catch (e) {};
-try { let fnprepatch_84 = MaterialEditingLibrary.prototype.UpdateMaterialFunction;MaterialEditingLibrary.prototype.UpdateMaterialFunction = function (MaterialFunction, PreviewMaterial = undefined) { return fnprepatch_84.call(this, MaterialFunction, PreviewMaterial) }; } catch (e) {};
-try { let fnprepatch_85 = MaterialEditingLibrary.prototype.CreateMaterialExpressionInFunction;MaterialEditingLibrary.prototype.CreateMaterialExpressionInFunction = function (MaterialFunction, ExpressionClass, NodePosX = 0, NodePosY = 0) { return fnprepatch_85.call(this, MaterialFunction, ExpressionClass, NodePosX, NodePosY) }; } catch (e) {};
-try { let fnprepatch_86 = MaterialEditingLibrary.prototype.CreateMaterialExpression;MaterialEditingLibrary.prototype.CreateMaterialExpression = function (Material, ExpressionClass, NodePosX = 0, NodePosY = 0) { return fnprepatch_86.call(this, Material, ExpressionClass, NodePosX, NodePosY) }; } catch (e) {};
-try { let fnprepatch_87 = HeadMountedDisplayFunctionLibrary.prototype.SetWorldToMetersScale;HeadMountedDisplayFunctionLibrary.prototype.SetWorldToMetersScale = function (WorldContext, NewScale = 100) { return fnprepatch_87.call(this, WorldContext, NewScale) }; } catch (e) {};
-try { let fnprepatch_88 = HeadMountedDisplayFunctionLibrary.prototype.SetSpectatorScreenModeTexturePlusEyeLayout;HeadMountedDisplayFunctionLibrary.prototype.SetSpectatorScreenModeTexturePlusEyeLayout = function (EyeRectMin, EyeRectMax, TextureRectMin, TextureRectMax, bDrawEyeFirst = true, bClearBlack = false, bUseAlpha = false) { return fnprepatch_88.call(this, EyeRectMin, EyeRectMax, TextureRectMin, TextureRectMax, bDrawEyeFirst, bClearBlack, bUseAlpha) }; } catch (e) {};
-try { let fnprepatch_89 = HeadMountedDisplayFunctionLibrary.prototype.ResetOrientationAndPosition;HeadMountedDisplayFunctionLibrary.prototype.ResetOrientationAndPosition = function (Yaw = 0, Options = "OrientationAndPosition") { return fnprepatch_89.call(this, Yaw, Options) }; } catch (e) {};
-try { let fnprepatch_90 = HeadMountedDisplayFunctionLibrary.prototype.GetTrackingSensorParameters;HeadMountedDisplayFunctionLibrary.prototype.GetTrackingSensorParameters = function (Origin, Rotation, LeftFOV, RightFOV, TopFOV, BottomFOV, Distance, NearPlane, FarPlane, IsActive, Index = 0) { return fnprepatch_90.call(this, Origin, Rotation, LeftFOV, RightFOV, TopFOV, BottomFOV, Distance, NearPlane, FarPlane, IsActive, Index) }; } catch (e) {};
-try { let fnprepatch_91 = HeadMountedDisplayFunctionLibrary.prototype.EnumerateTrackedDevices;HeadMountedDisplayFunctionLibrary.prototype.EnumerateTrackedDevices = function (SystemId = "None", DeviceType = "HeadMountedDisplay") { return fnprepatch_91.call(this, SystemId, DeviceType) }; } catch (e) {};
-try { let fnprepatch_92 = GameplayTask_ClaimResource.prototype.ClaimResources;GameplayTask_ClaimResource.prototype.ClaimResources = function (InTaskOwner, ResourceClasses, Priority = 192, TaskInstanceName = "None") { return fnprepatch_92.call(this, InTaskOwner, ResourceClasses, Priority, TaskInstanceName) }; } catch (e) {};
-try { let fnprepatch_93 = GameplayTask_ClaimResource.prototype.ClaimResource;GameplayTask_ClaimResource.prototype.ClaimResource = function (InTaskOwner, ResourceClass, Priority = 192, TaskInstanceName = "None") { return fnprepatch_93.call(this, InTaskOwner, ResourceClass, Priority, TaskInstanceName) }; } catch (e) {};
-try { let fnprepatch_94 = GameplayTask_SpawnActor.prototype.SpawnActor;GameplayTask_SpawnActor.prototype.SpawnActor = function (TaskOwner, SpawnLocation, SpawnRotation, Class, bSpawnOnlyOnAuthority = false) { return fnprepatch_94.call(this, TaskOwner, SpawnLocation, SpawnRotation, Class, bSpawnOnlyOnAuthority) }; } catch (e) {};
-try { let fnprepatch_95 = GameplayTask_WaitDelay.prototype.TaskWaitDelay;GameplayTask_WaitDelay.prototype.TaskWaitDelay = function (TaskOwner, Time, Priority = 192) { return fnprepatch_95.call(this, TaskOwner, Time, Priority) }; } catch (e) {};
-try { BlueprintGameplayTagLibrary.prototype.NotEqual = BlueprintGameplayTagLibrary.prototype.NotEqual_GameplayTagContainer; } catch (e) {};
-try { BlueprintGameplayTagLibrary.NotEqual = BlueprintGameplayTagLibrary.NotEqual_GameplayTagContainer; } catch (e) {};
-try { BlueprintGameplayTagLibrary.prototype.NotEqual = BlueprintGameplayTagLibrary.prototype.NotEqual_GameplayTag; } catch (e) {};
-try { BlueprintGameplayTagLibrary.NotEqual = BlueprintGameplayTagLibrary.NotEqual_GameplayTag; } catch (e) {};
-try { BlueprintGameplayTagLibrary.prototype.Equal = BlueprintGameplayTagLibrary.prototype.EqualEqual_GameplayTagContainer; } catch (e) {};
-try { BlueprintGameplayTagLibrary.Equal = BlueprintGameplayTagLibrary.EqualEqual_GameplayTagContainer; } catch (e) {};
-try { BlueprintGameplayTagLibrary.prototype.Equal = BlueprintGameplayTagLibrary.prototype.EqualEqual_GameplayTag; } catch (e) {};
-try { BlueprintGameplayTagLibrary.Equal = BlueprintGameplayTagLibrary.EqualEqual_GameplayTag; } catch (e) {};
-try { let fnprepatch_96 = AIBlueprintHelperLibrary.prototype.SpawnAIFromClass;AIBlueprintHelperLibrary.prototype.SpawnAIFromClass = function (WorldContextObject, PawnClass, BehaviorTree, Location, Rotation, bNoCollisionFail = false) { return fnprepatch_96.call(this, WorldContextObject, PawnClass, BehaviorTree, Location, Rotation, bNoCollisionFail) }; } catch (e) {};
-try { let fnprepatch_97 = AIBlueprintHelperLibrary.prototype.SendAIMessage;AIBlueprintHelperLibrary.prototype.SendAIMessage = function (Target, Message, MessageSource, bSuccess = true) { return fnprepatch_97.call(this, Target, Message, MessageSource, bSuccess) }; } catch (e) {};
-try { let fnprepatch_98 = AIBlueprintHelperLibrary.prototype.CreateMoveToProxyObject;AIBlueprintHelperLibrary.prototype.CreateMoveToProxyObject = function (WorldContextObject, Pawn, Destination, TargetActor = undefined, AcceptanceRadius = 5, bStopOnOverlap = false) { return fnprepatch_98.call(this, WorldContextObject, Pawn, Destination, TargetActor, AcceptanceRadius, bStopOnOverlap) }; } catch (e) {};
-try { let fnprepatch_99 = Controller.prototype.LineOfSightTo;Controller.prototype.LineOfSightTo = function (Other, ViewPoint, bAlternateChecks = false) { return fnprepatch_99.call(this, Other, ViewPoint, bAlternateChecks) }; } catch (e) {};
-try { Controller.prototype.GetControlledPawn = Controller.prototype.K2_GetPawn; } catch (e) {};
-try { let fnprepatch_100 = AIController.prototype.MoveToLocation;AIController.prototype.MoveToLocation = function (Dest, AcceptanceRadius = -1, bStopOnOverlap = true, bUsePathfinding = true, bProjectDestinationToNavigation = false, bCanStrafe = true, FilterClass = null, bAllowPartialPath = true) { return fnprepatch_100.call(this, Dest, AcceptanceRadius, bStopOnOverlap, bUsePathfinding, bProjectDestinationToNavigation, bCanStrafe, FilterClass, bAllowPartialPath) }; } catch (e) {};
-try { let fnprepatch_101 = AIController.prototype.MoveToActor;AIController.prototype.MoveToActor = function (Goal, AcceptanceRadius = -1, bStopOnOverlap = true, bUsePathfinding = true, bCanStrafe = true, FilterClass = null, bAllowPartialPath = true) { return fnprepatch_101.call(this, Goal, AcceptanceRadius, bStopOnOverlap, bUsePathfinding, bCanStrafe, FilterClass, bAllowPartialPath) }; } catch (e) {};
-try { AIController.prototype.SetFocus = AIController.prototype.K2_SetFocus; } catch (e) {};
-try { AIController.prototype.SetFocalPoint = AIController.prototype.K2_SetFocalPoint; } catch (e) {};
-try { AIController.prototype.ClearFocus = AIController.prototype.K2_ClearFocus; } catch (e) {};
-try { AISense_Blueprint.prototype.OnNewPawn = AISense_Blueprint.prototype.K2_OnNewPawn; } catch (e) {};
-try { let fnprepatch_102 = AISense_Hearing.prototype.ReportNoiseEvent;AISense_Hearing.prototype.ReportNoiseEvent = function (WorldContextObject, NoiseLocation, Loudness = 1, Instigator = undefined, MaxRange = 0, Tag = "None") { return fnprepatch_102.call(this, WorldContextObject, NoiseLocation, Loudness, Instigator, MaxRange, Tag) }; } catch (e) {};
-try { let fnprepatch_103 = AITask_MoveTo.prototype.AIMoveTo;AITask_MoveTo.prototype.AIMoveTo = function (Controller, GoalLocation, GoalActor = undefined, AcceptanceRadius = -1, StopOnOverlap = "Default", AcceptPartialPath = "Default", bUsePathfinding = true, bLockAILogic = true, bUseContinuosGoalTracking = false) { return fnprepatch_103.call(this, Controller, GoalLocation, GoalActor, AcceptanceRadius, StopOnOverlap, AcceptPartialPath, bUsePathfinding, bLockAILogic, bUseContinuosGoalTracking) }; } catch (e) {};
-try { AITask_MoveTo.prototype.MoveToLocationorActor = AITask_MoveTo.prototype.AIMoveTo; } catch (e) {};
-try { AITask_MoveTo.MoveToLocationorActor = AITask_MoveTo.AIMoveTo; } catch (e) {};
-try { let fnprepatch_104 = BTTask_BlueprintBase.prototype.SetFinishOnMessageWithId;BTTask_BlueprintBase.prototype.SetFinishOnMessageWithId = function (MessageName, RequestID = -1) { return fnprepatch_104.call(this, MessageName, RequestID) }; } catch (e) {};
-try { let fnprepatch_105 = Pawn.prototype.SetCanAffectNavigationGeneration;Pawn.prototype.SetCanAffectNavigationGeneration = function (bNewValue, bForceUpdate = false) { return fnprepatch_105.call(this, bNewValue, bForceUpdate) }; } catch (e) {};
-try { let fnprepatch_106 = Pawn.prototype.PawnMakeNoise;Pawn.prototype.PawnMakeNoise = function (Loudness, NoiseLocation, bUseNoiseMakerLocation = true, NoiseMaker = undefined) { return fnprepatch_106.call(this, Loudness, NoiseLocation, bUseNoiseMakerLocation, NoiseMaker) }; } catch (e) {};
-try { let fnprepatch_107 = Pawn.prototype.AddMovementInput;Pawn.prototype.AddMovementInput = function (WorldDirection, ScaleValue = 1, bForce = false) { return fnprepatch_107.call(this, WorldDirection, ScaleValue, bForce) }; } catch (e) {};
-try { Pawn.prototype.Unpossessed = Pawn.prototype.ReceiveUnpossessed; } catch (e) {};
-try { Pawn.prototype.Possessed = Pawn.prototype.ReceivePossessed; } catch (e) {};
-try { Pawn.prototype.GetMovementInputVector = Pawn.prototype.K2_GetMovementInputVector; } catch (e) {};
-try { let fnprepatch_108 = Character.prototype.UnCrouch;Character.prototype.UnCrouch = function (bClientSimulation = false) { return fnprepatch_108.call(this, bClientSimulation) }; } catch (e) {};
-try { let fnprepatch_109 = Character.prototype.StopAnimMontage;Character.prototype.StopAnimMontage = function (AnimMontage = undefined) { return fnprepatch_109.call(this, AnimMontage) }; } catch (e) {};
-try { let fnprepatch_110 = Character.prototype.PlayAnimMontage;Character.prototype.PlayAnimMontage = function (AnimMontage, InPlayRate = 1, StartSectionName = "None") { return fnprepatch_110.call(this, AnimMontage, InPlayRate, StartSectionName) }; } catch (e) {};
-try { let fnprepatch_111 = Character.prototype.Crouch;Character.prototype.Crouch = function (bClientSimulation = false) { return fnprepatch_111.call(this, bClientSimulation) }; } catch (e) {};
-try { Character.prototype.UpdateCustomMovement = Character.prototype.K2_UpdateCustomMovement; } catch (e) {};
-try { Character.prototype.OnStartCrouch = Character.prototype.K2_OnStartCrouch; } catch (e) {};
-try { Character.prototype.OnMovementModeChanged = Character.prototype.K2_OnMovementModeChanged; } catch (e) {};
-try { Character.prototype.OnEndCrouch = Character.prototype.K2_OnEndCrouch; } catch (e) {};
-try { Character.prototype.GetBaseRotationOffset = Character.prototype.GetBaseRotationOffsetRotator; } catch (e) {};
-try { Character.prototype.CanJump = Character.prototype.CanJumpInternal; } catch (e) {};
-try { let fnprepatch_112 = NavLocalGridManager.prototype.RemoveLocalNavigationGrid;NavLocalGridManager.prototype.RemoveLocalNavigationGrid = function (WorldContextObject, GridId, bRebuildGrids = true) { return fnprepatch_112.call(this, WorldContextObject, GridId, bRebuildGrids) }; } catch (e) {};
-try { let fnprepatch_113 = NavLocalGridManager.prototype.AddLocalNavigationGridForPoints;NavLocalGridManager.prototype.AddLocalNavigationGridForPoints = function (WorldContextObject, Locations, Radius2D = 5, Height = 100, bRebuildGrids = true) { return fnprepatch_113.call(this, WorldContextObject, Locations, Radius2D, Height, bRebuildGrids) }; } catch (e) {};
-try { let fnprepatch_114 = NavLocalGridManager.prototype.AddLocalNavigationGridForPoint;NavLocalGridManager.prototype.AddLocalNavigationGridForPoint = function (WorldContextObject, Location, Radius2D = 5, Height = 100, bRebuildGrids = true) { return fnprepatch_114.call(this, WorldContextObject, Location, Radius2D, Height, bRebuildGrids) }; } catch (e) {};
-try { let fnprepatch_115 = NavLocalGridManager.prototype.AddLocalNavigationGridForCapsule;NavLocalGridManager.prototype.AddLocalNavigationGridForCapsule = function (WorldContextObject, Location, CapsuleRadius, CapsuleHalfHeight, Radius2D = 5, Height = 100, bRebuildGrids = true) { return fnprepatch_115.call(this, WorldContextObject, Location, CapsuleRadius, CapsuleHalfHeight, Radius2D, Height, bRebuildGrids) }; } catch (e) {};
-try { let fnprepatch_116 = NavLocalGridManager.prototype.AddLocalNavigationGridForBox;NavLocalGridManager.prototype.AddLocalNavigationGridForBox = function (WorldContextObject, Location, Extent, Rotation, Radius2D = 5, Height = 100, bRebuildGrids = true) { return fnprepatch_116.call(this, WorldContextObject, Location, Extent, Rotation, Radius2D, Height, bRebuildGrids) }; } catch (e) {};
-try { let fnprepatch_117 = PawnActionsComponent.prototype.K2_PushAction;PawnActionsComponent.prototype.K2_PushAction = function (NewAction, Priority, Instigator = undefined) { return fnprepatch_117.call(this, NewAction, Priority, Instigator) }; } catch (e) {};
-try { let fnprepatch_118 = PawnActionsComponent.prototype.K2_PerformAction;PawnActionsComponent.prototype.K2_PerformAction = function (Pawn, Action, Priority = "HardScript") { return fnprepatch_118.call(this, Pawn, Action, Priority) }; } catch (e) {};
-try { PawnActionsComponent.prototype.PushAction = PawnActionsComponent.prototype.K2_PushAction; } catch (e) {};
-try { PawnActionsComponent.prototype.PerformAction = PawnActionsComponent.prototype.K2_PerformAction; } catch (e) {};
-try { PawnActionsComponent.PerformAction = PawnActionsComponent.K2_PerformAction; } catch (e) {};
-try { PawnActionsComponent.prototype.ForceAbortAction = PawnActionsComponent.prototype.K2_ForceAbortAction; } catch (e) {};
-try { PawnActionsComponent.prototype.AbortAction = PawnActionsComponent.prototype.K2_AbortAction; } catch (e) {};
-try { let fnprepatch_119 = NavigationPath.prototype.EnableDebugDrawing;NavigationPath.prototype.EnableDebugDrawing = function (bShouldDrawDebugData, PathColor = {"R":1,"G":1,"B":1,"A":1}) { return fnprepatch_119.call(this, bShouldDrawDebugData, PathColor) }; } catch (e) {};
+try { let fnprepatch_32 = NavigationPath.prototype.EnableDebugDrawing;NavigationPath.prototype.EnableDebugDrawing = function (bShouldDrawDebugData, PathColor = {"R":1,"G":1,"B":1,"A":1}) { return fnprepatch_32.call(this, bShouldDrawDebugData, PathColor) }; } catch (e) {};
 try { World.prototype.VisLogBoxShape = World.prototype.LogBox; } catch (e) {};
 try { World.prototype.VisLogLocation = World.prototype.LogLocation; } catch (e) {};
 try { World.prototype.VisLogSegment = World.prototype.LogSegment; } catch (e) {};
@@ -307,50 +187,221 @@ try { World.prototype.CreateWidget = World.prototype.Create; } catch (e) {};
 try { World.prototype.ScreenToAbsolute = World.prototype.ScreenToWidgetAbsolute; } catch (e) {};
 try { World.prototype.ScreenToLocal = World.prototype.ScreenToWidgetLocal; } catch (e) {};
 try { World.prototype.FinishRecordingOutput = World.prototype.StopRecordingOutput; } catch (e) {};
-try { let fnprepatch_120 = NavigationSystemV1.prototype.RegisterNavigationInvoker;NavigationSystemV1.prototype.RegisterNavigationInvoker = function (Invoker, TileGenerationRadius = 3000, TileRemovalRadius = 5000) { return fnprepatch_120.call(this, Invoker, TileGenerationRadius, TileRemovalRadius) }; } catch (e) {};
-try { let fnprepatch_121 = NavigationSystemV1.prototype.ProjectPointToNavigation;NavigationSystemV1.prototype.ProjectPointToNavigation = function (WorldContextObject, Point, NavData = undefined, FilterClass = null, QueryExtent) { return fnprepatch_121.call(this, WorldContextObject, Point, NavData, FilterClass, QueryExtent) }; } catch (e) {};
-try { let fnprepatch_122 = NavigationSystemV1.prototype.NavigationRaycast;NavigationSystemV1.prototype.NavigationRaycast = function (WorldContextObject, RayStart, RayEnd, HitLocation, FilterClass = null, Querier = undefined) { return fnprepatch_122.call(this, WorldContextObject, RayStart, RayEnd, HitLocation, FilterClass, Querier) }; } catch (e) {};
-try { let fnprepatch_123 = NavigationSystemV1.prototype.K2_GetRandomReachablePointInRadius;NavigationSystemV1.prototype.K2_GetRandomReachablePointInRadius = function (WorldContextObject, Origin, RandomLocation, Radius, NavData = undefined, FilterClass = null) { return fnprepatch_123.call(this, WorldContextObject, Origin, RandomLocation, Radius, NavData, FilterClass) }; } catch (e) {};
-try { let fnprepatch_124 = NavigationSystemV1.prototype.K2_GetRandomPointInNavigableRadius;NavigationSystemV1.prototype.K2_GetRandomPointInNavigableRadius = function (WorldContextObject, Origin, RandomLocation, Radius, NavData = undefined, FilterClass = null) { return fnprepatch_124.call(this, WorldContextObject, Origin, RandomLocation, Radius, NavData, FilterClass) }; } catch (e) {};
-try { let fnprepatch_125 = NavigationSystemV1.prototype.GetRandomReachablePointInRadius;NavigationSystemV1.prototype.GetRandomReachablePointInRadius = function (WorldContextObject, Origin, Radius, NavData = undefined, FilterClass = null) { return fnprepatch_125.call(this, WorldContextObject, Origin, Radius, NavData, FilterClass) }; } catch (e) {};
-try { let fnprepatch_126 = NavigationSystemV1.prototype.GetRandomPointInNavigableRadius;NavigationSystemV1.prototype.GetRandomPointInNavigableRadius = function (WorldContextObject, Origin, Radius, NavData = undefined, FilterClass = null) { return fnprepatch_126.call(this, WorldContextObject, Origin, Radius, NavData, FilterClass) }; } catch (e) {};
-try { let fnprepatch_127 = NavigationSystemV1.prototype.GetPathLength;NavigationSystemV1.prototype.GetPathLength = function (WorldContextObject, PathStart, PathEnd, PathLength, NavData = undefined, FilterClass = null) { return fnprepatch_127.call(this, WorldContextObject, PathStart, PathEnd, PathLength, NavData, FilterClass) }; } catch (e) {};
-try { let fnprepatch_128 = NavigationSystemV1.prototype.GetPathCost;NavigationSystemV1.prototype.GetPathCost = function (WorldContextObject, PathStart, PathEnd, PathCost, NavData = undefined, FilterClass = null) { return fnprepatch_128.call(this, WorldContextObject, PathStart, PathEnd, PathCost, NavData, FilterClass) }; } catch (e) {};
-try { let fnprepatch_129 = NavigationSystemV1.prototype.FindPathToLocationSynchronously;NavigationSystemV1.prototype.FindPathToLocationSynchronously = function (WorldContextObject, PathStart, PathEnd, PathfindingContext = undefined, FilterClass = null) { return fnprepatch_129.call(this, WorldContextObject, PathStart, PathEnd, PathfindingContext, FilterClass) }; } catch (e) {};
-try { let fnprepatch_130 = NavigationSystemV1.prototype.FindPathToActorSynchronously;NavigationSystemV1.prototype.FindPathToActorSynchronously = function (WorldContextObject, PathStart, GoalActor, TetherDistance = 50, PathfindingContext = undefined, FilterClass = null) { return fnprepatch_130.call(this, WorldContextObject, PathStart, GoalActor, TetherDistance, PathfindingContext, FilterClass) }; } catch (e) {};
+try { World.prototype.GetWorldSettings = World.prototype.K2_GetWorldSettings; } catch (e) {};
+try { let fnprepatch_33 = NavigationSystemV1.prototype.RegisterNavigationInvoker;NavigationSystemV1.prototype.RegisterNavigationInvoker = function (Invoker, TileGenerationRadius = 3000, TileRemovalRadius = 5000) { return fnprepatch_33.call(this, Invoker, TileGenerationRadius, TileRemovalRadius) }; } catch (e) {};
+try { let fnprepatch_34 = NavigationSystemV1.prototype.ProjectPointToNavigation;NavigationSystemV1.prototype.ProjectPointToNavigation = function (WorldContextObject, Point, NavData = undefined, FilterClass = null, QueryExtent) { return fnprepatch_34.call(this, WorldContextObject, Point, NavData, FilterClass, QueryExtent) }; } catch (e) {};
+try { let fnprepatch_35 = NavigationSystemV1.prototype.NavigationRaycast;NavigationSystemV1.prototype.NavigationRaycast = function (WorldContextObject, RayStart, RayEnd, HitLocation, FilterClass = null, Querier = undefined) { return fnprepatch_35.call(this, WorldContextObject, RayStart, RayEnd, HitLocation, FilterClass, Querier) }; } catch (e) {};
+try { let fnprepatch_36 = NavigationSystemV1.prototype.K2_GetRandomReachablePointInRadius;NavigationSystemV1.prototype.K2_GetRandomReachablePointInRadius = function (WorldContextObject, Origin, RandomLocation, Radius, NavData = undefined, FilterClass = null) { return fnprepatch_36.call(this, WorldContextObject, Origin, RandomLocation, Radius, NavData, FilterClass) }; } catch (e) {};
+try { let fnprepatch_37 = NavigationSystemV1.prototype.K2_GetRandomPointInNavigableRadius;NavigationSystemV1.prototype.K2_GetRandomPointInNavigableRadius = function (WorldContextObject, Origin, RandomLocation, Radius, NavData = undefined, FilterClass = null) { return fnprepatch_37.call(this, WorldContextObject, Origin, RandomLocation, Radius, NavData, FilterClass) }; } catch (e) {};
+try { let fnprepatch_38 = NavigationSystemV1.prototype.K2_GetRandomLocationInNavigableRadius;NavigationSystemV1.prototype.K2_GetRandomLocationInNavigableRadius = function (WorldContextObject, Origin, RandomLocation, Radius, NavData = undefined, FilterClass = null) { return fnprepatch_38.call(this, WorldContextObject, Origin, RandomLocation, Radius, NavData, FilterClass) }; } catch (e) {};
+try { let fnprepatch_39 = NavigationSystemV1.prototype.GetRandomReachablePointInRadius;NavigationSystemV1.prototype.GetRandomReachablePointInRadius = function (WorldContextObject, Origin, Radius, NavData = undefined, FilterClass = null) { return fnprepatch_39.call(this, WorldContextObject, Origin, Radius, NavData, FilterClass) }; } catch (e) {};
+try { let fnprepatch_40 = NavigationSystemV1.prototype.GetRandomPointInNavigableRadius;NavigationSystemV1.prototype.GetRandomPointInNavigableRadius = function (WorldContextObject, Origin, Radius, NavData = undefined, FilterClass = null) { return fnprepatch_40.call(this, WorldContextObject, Origin, Radius, NavData, FilterClass) }; } catch (e) {};
+try { let fnprepatch_41 = NavigationSystemV1.prototype.GetPathLength;NavigationSystemV1.prototype.GetPathLength = function (WorldContextObject, PathStart, PathEnd, PathLength, NavData = undefined, FilterClass = null) { return fnprepatch_41.call(this, WorldContextObject, PathStart, PathEnd, PathLength, NavData, FilterClass) }; } catch (e) {};
+try { let fnprepatch_42 = NavigationSystemV1.prototype.GetPathCost;NavigationSystemV1.prototype.GetPathCost = function (WorldContextObject, PathStart, PathEnd, PathCost, NavData = undefined, FilterClass = null) { return fnprepatch_42.call(this, WorldContextObject, PathStart, PathEnd, PathCost, NavData, FilterClass) }; } catch (e) {};
+try { let fnprepatch_43 = NavigationSystemV1.prototype.FindPathToLocationSynchronously;NavigationSystemV1.prototype.FindPathToLocationSynchronously = function (WorldContextObject, PathStart, PathEnd, PathfindingContext = undefined, FilterClass = null) { return fnprepatch_43.call(this, WorldContextObject, PathStart, PathEnd, PathfindingContext, FilterClass) }; } catch (e) {};
+try { let fnprepatch_44 = NavigationSystemV1.prototype.FindPathToActorSynchronously;NavigationSystemV1.prototype.FindPathToActorSynchronously = function (WorldContextObject, PathStart, GoalActor, TetherDistance = 50, PathfindingContext = undefined, FilterClass = null) { return fnprepatch_44.call(this, WorldContextObject, PathStart, GoalActor, TetherDistance, PathfindingContext, FilterClass) }; } catch (e) {};
 try { NavigationSystemV1.prototype.SimpleMoveToLocation_DEPRECATED = NavigationSystemV1.prototype.SimpleMoveToLocation; } catch (e) {};
 try { NavigationSystemV1.SimpleMoveToLocation_DEPRECATED = NavigationSystemV1.SimpleMoveToLocation; } catch (e) {};
 try { NavigationSystemV1.prototype.SimpleMoveToActor_DEPRECATED = NavigationSystemV1.prototype.SimpleMoveToActor; } catch (e) {};
 try { NavigationSystemV1.SimpleMoveToActor_DEPRECATED = NavigationSystemV1.SimpleMoveToActor; } catch (e) {};
 try { NavigationSystemV1.prototype.ProjectPointToNavigation_DEPRECATED = NavigationSystemV1.prototype.ProjectPointToNavigation; } catch (e) {};
 try { NavigationSystemV1.ProjectPointToNavigation_DEPRECATED = NavigationSystemV1.ProjectPointToNavigation; } catch (e) {};
+try { NavigationSystemV1.prototype.ReplaceAreaInOctreeData = NavigationSystemV1.prototype.K2_ReplaceAreaInOctreeData; } catch (e) {};
 try { NavigationSystemV1.prototype.ProjectPointToNavigation = NavigationSystemV1.prototype.K2_ProjectPointToNavigation; } catch (e) {};
 try { NavigationSystemV1.ProjectPointToNavigation = NavigationSystemV1.K2_ProjectPointToNavigation; } catch (e) {};
 try { NavigationSystemV1.prototype.GetRandomReachablePointInRadius = NavigationSystemV1.prototype.K2_GetRandomReachablePointInRadius; } catch (e) {};
 try { NavigationSystemV1.GetRandomReachablePointInRadius = NavigationSystemV1.K2_GetRandomReachablePointInRadius; } catch (e) {};
 try { NavigationSystemV1.prototype.GetRandomPointInNavigableRadius = NavigationSystemV1.prototype.K2_GetRandomPointInNavigableRadius; } catch (e) {};
 try { NavigationSystemV1.GetRandomPointInNavigableRadius = NavigationSystemV1.K2_GetRandomPointInNavigableRadius; } catch (e) {};
+try { NavigationSystemV1.prototype.GetRandomLocationInNavigableRadius = NavigationSystemV1.prototype.K2_GetRandomLocationInNavigableRadius; } catch (e) {};
+try { NavigationSystemV1.GetRandomLocationInNavigableRadius = NavigationSystemV1.K2_GetRandomLocationInNavigableRadius; } catch (e) {};
 try { NavigationSystemV1.prototype.GetRandomReachablePointInRadius_DEPRECATED = NavigationSystemV1.prototype.GetRandomReachablePointInRadius; } catch (e) {};
 try { NavigationSystemV1.GetRandomReachablePointInRadius_DEPRECATED = NavigationSystemV1.GetRandomReachablePointInRadius; } catch (e) {};
 try { NavigationSystemV1.prototype.GetRandomPointInNavigableRadius_DEPRECATED = NavigationSystemV1.prototype.GetRandomPointInNavigableRadius; } catch (e) {};
 try { NavigationSystemV1.GetRandomPointInNavigableRadius_DEPRECATED = NavigationSystemV1.GetRandomPointInNavigableRadius; } catch (e) {};
-try { let fnprepatch_131 = NavModifierVolume.prototype.SetAreaClass;NavModifierVolume.prototype.SetAreaClass = function (NewAreaClass = null) { return fnprepatch_131.call(this, NewAreaClass) }; } catch (e) {};
-try { let fnprepatch_132 = UserDefinedImageCaptureProtocol.prototype.WriteImageToDisk;UserDefinedImageCaptureProtocol.prototype.WriteImageToDisk = function (PixelData, StreamName, FrameMetrics, bCopyImageData = false) { return fnprepatch_132.call(this, PixelData, StreamName, FrameMetrics, bCopyImageData) }; } catch (e) {};
-try { let fnprepatch_133 = CameraComponent.prototype.AddOrUpdateBlendable;CameraComponent.prototype.AddOrUpdateBlendable = function (InBlendableObject, InWeight = 1) { return fnprepatch_133.call(this, InBlendableObject, InWeight) }; } catch (e) {};
-try { let fnprepatch_134 = AudioMixerBlueprintLibrary.prototype.StopRecordingOutput;AudioMixerBlueprintLibrary.prototype.StopRecordingOutput = function (WorldContextObject, ExportType, Name, Path, SubmixToRecord = undefined, ExistingSoundWaveToOverwrite = undefined) { return fnprepatch_134.call(this, WorldContextObject, ExportType, Name, Path, SubmixToRecord, ExistingSoundWaveToOverwrite) }; } catch (e) {};
-try { let fnprepatch_135 = AudioMixerBlueprintLibrary.prototype.StartRecordingOutput;AudioMixerBlueprintLibrary.prototype.StartRecordingOutput = function (WorldContextObject, ExpectedDuration, SubmixToRecord = undefined) { return fnprepatch_135.call(this, WorldContextObject, ExpectedDuration, SubmixToRecord) }; } catch (e) {};
-try { let fnprepatch_136 = AudioMixerBlueprintLibrary.prototype.ResumeRecordingOutput;AudioMixerBlueprintLibrary.prototype.ResumeRecordingOutput = function (WorldContextObject, SubmixToPause = undefined) { return fnprepatch_136.call(this, WorldContextObject, SubmixToPause) }; } catch (e) {};
-try { let fnprepatch_137 = AudioMixerBlueprintLibrary.prototype.PauseRecordingOutput;AudioMixerBlueprintLibrary.prototype.PauseRecordingOutput = function (WorldContextObject, SubmixToPause = undefined) { return fnprepatch_137.call(this, WorldContextObject, SubmixToPause) }; } catch (e) {};
+try { let fnprepatch_45 = PrimitiveComponent.prototype.WakeRigidBody;PrimitiveComponent.prototype.WakeRigidBody = function (BoneName = "None") { return fnprepatch_45.call(this, BoneName) }; } catch (e) {};
+try { let fnprepatch_46 = PrimitiveComponent.prototype.SetUseCCD;PrimitiveComponent.prototype.SetUseCCD = function (InUseCCD, BoneName = "None") { return fnprepatch_46.call(this, InUseCCD, BoneName) }; } catch (e) {};
+try { let fnprepatch_47 = PrimitiveComponent.prototype.SetPhysicsMaxAngularVelocityInRadians;PrimitiveComponent.prototype.SetPhysicsMaxAngularVelocityInRadians = function (NewMaxAngVel, bAddToCurrent = false, BoneName = "None") { return fnprepatch_47.call(this, NewMaxAngVel, bAddToCurrent, BoneName) }; } catch (e) {};
+try { let fnprepatch_48 = PrimitiveComponent.prototype.SetPhysicsMaxAngularVelocityInDegrees;PrimitiveComponent.prototype.SetPhysicsMaxAngularVelocityInDegrees = function (NewMaxAngVel, bAddToCurrent = false, BoneName = "None") { return fnprepatch_48.call(this, NewMaxAngVel, bAddToCurrent, BoneName) }; } catch (e) {};
+try { let fnprepatch_49 = PrimitiveComponent.prototype.SetPhysicsMaxAngularVelocity;PrimitiveComponent.prototype.SetPhysicsMaxAngularVelocity = function (NewMaxAngVel, bAddToCurrent = false, BoneName = "None") { return fnprepatch_49.call(this, NewMaxAngVel, bAddToCurrent, BoneName) }; } catch (e) {};
+try { let fnprepatch_50 = PrimitiveComponent.prototype.SetPhysicsLinearVelocity;PrimitiveComponent.prototype.SetPhysicsLinearVelocity = function (NewVel, bAddToCurrent = false, BoneName = "None") { return fnprepatch_50.call(this, NewVel, bAddToCurrent, BoneName) }; } catch (e) {};
+try { let fnprepatch_51 = PrimitiveComponent.prototype.SetPhysicsAngularVelocityInRadians;PrimitiveComponent.prototype.SetPhysicsAngularVelocityInRadians = function (NewAngVel, bAddToCurrent = false, BoneName = "None") { return fnprepatch_51.call(this, NewAngVel, bAddToCurrent, BoneName) }; } catch (e) {};
+try { let fnprepatch_52 = PrimitiveComponent.prototype.SetPhysicsAngularVelocityInDegrees;PrimitiveComponent.prototype.SetPhysicsAngularVelocityInDegrees = function (NewAngVel, bAddToCurrent = false, BoneName = "None") { return fnprepatch_52.call(this, NewAngVel, bAddToCurrent, BoneName) }; } catch (e) {};
+try { let fnprepatch_53 = PrimitiveComponent.prototype.SetPhysicsAngularVelocity;PrimitiveComponent.prototype.SetPhysicsAngularVelocity = function (NewAngVel, bAddToCurrent = false, BoneName = "None") { return fnprepatch_53.call(this, NewAngVel, bAddToCurrent, BoneName) }; } catch (e) {};
+try { let fnprepatch_54 = PrimitiveComponent.prototype.SetMassScale;PrimitiveComponent.prototype.SetMassScale = function (BoneName = "None", InMassScale = 1) { return fnprepatch_54.call(this, BoneName, InMassScale) }; } catch (e) {};
+try { let fnprepatch_55 = PrimitiveComponent.prototype.SetMassOverrideInKg;PrimitiveComponent.prototype.SetMassOverrideInKg = function (BoneName = "None", MassInKg = 1, bOverrideMass = true) { return fnprepatch_55.call(this, BoneName, MassInKg, bOverrideMass) }; } catch (e) {};
+try { let fnprepatch_56 = PrimitiveComponent.prototype.SetCenterOfMass;PrimitiveComponent.prototype.SetCenterOfMass = function (CenterOfMassOffset, BoneName = "None") { return fnprepatch_56.call(this, CenterOfMassOffset, BoneName) }; } catch (e) {};
+try { let fnprepatch_57 = PrimitiveComponent.prototype.SetBoundsScale;PrimitiveComponent.prototype.SetBoundsScale = function (NewBoundsScale = 1) { return fnprepatch_57.call(this, NewBoundsScale) }; } catch (e) {};
+try { let fnprepatch_58 = PrimitiveComponent.prototype.SetAllPhysicsLinearVelocity;PrimitiveComponent.prototype.SetAllPhysicsLinearVelocity = function (NewVel, bAddToCurrent = false) { return fnprepatch_58.call(this, NewVel, bAddToCurrent) }; } catch (e) {};
+try { let fnprepatch_59 = PrimitiveComponent.prototype.SetAllPhysicsAngularVelocityInRadians;PrimitiveComponent.prototype.SetAllPhysicsAngularVelocityInRadians = function (NewAngVel, bAddToCurrent = false) { return fnprepatch_59.call(this, NewAngVel, bAddToCurrent) }; } catch (e) {};
+try { let fnprepatch_60 = PrimitiveComponent.prototype.SetAllPhysicsAngularVelocityInDegrees;PrimitiveComponent.prototype.SetAllPhysicsAngularVelocityInDegrees = function (NewAngVel, bAddToCurrent = false) { return fnprepatch_60.call(this, NewAngVel, bAddToCurrent) }; } catch (e) {};
+try { let fnprepatch_61 = PrimitiveComponent.prototype.SetAllMassScale;PrimitiveComponent.prototype.SetAllMassScale = function (InMassScale = 1) { return fnprepatch_61.call(this, InMassScale) }; } catch (e) {};
+try { let fnprepatch_62 = PrimitiveComponent.prototype.ScaleByMomentOfInertia;PrimitiveComponent.prototype.ScaleByMomentOfInertia = function (InputVector, BoneName = "None") { return fnprepatch_62.call(this, InputVector, BoneName) }; } catch (e) {};
+try { let fnprepatch_63 = PrimitiveComponent.prototype.PutRigidBodyToSleep;PrimitiveComponent.prototype.PutRigidBodyToSleep = function (BoneName = "None") { return fnprepatch_63.call(this, BoneName) }; } catch (e) {};
+try { let fnprepatch_64 = PrimitiveComponent.prototype.GetPhysicsLinearVelocityAtPoint;PrimitiveComponent.prototype.GetPhysicsLinearVelocityAtPoint = function (Point, BoneName = "None") { return fnprepatch_64.call(this, Point, BoneName) }; } catch (e) {};
+try { let fnprepatch_65 = PrimitiveComponent.prototype.GetPhysicsLinearVelocity;PrimitiveComponent.prototype.GetPhysicsLinearVelocity = function (BoneName = "None") { return fnprepatch_65.call(this, BoneName) }; } catch (e) {};
+try { let fnprepatch_66 = PrimitiveComponent.prototype.GetPhysicsAngularVelocityInRadians;PrimitiveComponent.prototype.GetPhysicsAngularVelocityInRadians = function (BoneName = "None") { return fnprepatch_66.call(this, BoneName) }; } catch (e) {};
+try { let fnprepatch_67 = PrimitiveComponent.prototype.GetPhysicsAngularVelocityInDegrees;PrimitiveComponent.prototype.GetPhysicsAngularVelocityInDegrees = function (BoneName = "None") { return fnprepatch_67.call(this, BoneName) }; } catch (e) {};
+try { let fnprepatch_68 = PrimitiveComponent.prototype.GetPhysicsAngularVelocity;PrimitiveComponent.prototype.GetPhysicsAngularVelocity = function (BoneName = "None") { return fnprepatch_68.call(this, BoneName) }; } catch (e) {};
+try { let fnprepatch_69 = PrimitiveComponent.prototype.GetOverlappingActors;PrimitiveComponent.prototype.GetOverlappingActors = function (OverlappingActors, ClassFilter = null) { return fnprepatch_69.call(this, OverlappingActors, ClassFilter) }; } catch (e) {};
+try { let fnprepatch_70 = PrimitiveComponent.prototype.GetMassScale;PrimitiveComponent.prototype.GetMassScale = function (BoneName = "None") { return fnprepatch_70.call(this, BoneName) }; } catch (e) {};
+try { let fnprepatch_71 = PrimitiveComponent.prototype.GetInertiaTensor;PrimitiveComponent.prototype.GetInertiaTensor = function (BoneName = "None") { return fnprepatch_71.call(this, BoneName) }; } catch (e) {};
+try { let fnprepatch_72 = PrimitiveComponent.prototype.GetClosestPointOnCollision;PrimitiveComponent.prototype.GetClosestPointOnCollision = function (Point, OutPointOnBody, BoneName = "None") { return fnprepatch_72.call(this, Point, OutPointOnBody, BoneName) }; } catch (e) {};
+try { let fnprepatch_73 = PrimitiveComponent.prototype.GetCenterOfMass;PrimitiveComponent.prototype.GetCenterOfMass = function (BoneName = "None") { return fnprepatch_73.call(this, BoneName) }; } catch (e) {};
+try { let fnprepatch_74 = PrimitiveComponent.prototype.CreateDynamicMaterialInstance;PrimitiveComponent.prototype.CreateDynamicMaterialInstance = function (ElementIndex, SourceMaterial = undefined, OptionalName = "None") { return fnprepatch_74.call(this, ElementIndex, SourceMaterial, OptionalName) }; } catch (e) {};
+try { let fnprepatch_75 = PrimitiveComponent.prototype.AddTorqueInRadians;PrimitiveComponent.prototype.AddTorqueInRadians = function (Torque, BoneName = "None", bAccelChange = false) { return fnprepatch_75.call(this, Torque, BoneName, bAccelChange) }; } catch (e) {};
+try { let fnprepatch_76 = PrimitiveComponent.prototype.AddTorqueInDegrees;PrimitiveComponent.prototype.AddTorqueInDegrees = function (Torque, BoneName = "None", bAccelChange = false) { return fnprepatch_76.call(this, Torque, BoneName, bAccelChange) }; } catch (e) {};
+try { let fnprepatch_77 = PrimitiveComponent.prototype.AddTorque;PrimitiveComponent.prototype.AddTorque = function (Torque, BoneName = "None", bAccelChange = false) { return fnprepatch_77.call(this, Torque, BoneName, bAccelChange) }; } catch (e) {};
+try { let fnprepatch_78 = PrimitiveComponent.prototype.AddRadialImpulse;PrimitiveComponent.prototype.AddRadialImpulse = function (Origin, Radius, Strength, Falloff, bVelChange = false) { return fnprepatch_78.call(this, Origin, Radius, Strength, Falloff, bVelChange) }; } catch (e) {};
+try { let fnprepatch_79 = PrimitiveComponent.prototype.AddRadialForce;PrimitiveComponent.prototype.AddRadialForce = function (Origin, Radius, Strength, Falloff, bAccelChange = false) { return fnprepatch_79.call(this, Origin, Radius, Strength, Falloff, bAccelChange) }; } catch (e) {};
+try { let fnprepatch_80 = PrimitiveComponent.prototype.AddImpulseAtLocation;PrimitiveComponent.prototype.AddImpulseAtLocation = function (Impulse, Location, BoneName = "None") { return fnprepatch_80.call(this, Impulse, Location, BoneName) }; } catch (e) {};
+try { let fnprepatch_81 = PrimitiveComponent.prototype.AddImpulse;PrimitiveComponent.prototype.AddImpulse = function (Impulse, BoneName = "None", bVelChange = false) { return fnprepatch_81.call(this, Impulse, BoneName, bVelChange) }; } catch (e) {};
+try { let fnprepatch_82 = PrimitiveComponent.prototype.AddForceAtLocationLocal;PrimitiveComponent.prototype.AddForceAtLocationLocal = function (Force, Location, BoneName = "None") { return fnprepatch_82.call(this, Force, Location, BoneName) }; } catch (e) {};
+try { let fnprepatch_83 = PrimitiveComponent.prototype.AddForceAtLocation;PrimitiveComponent.prototype.AddForceAtLocation = function (Force, Location, BoneName = "None") { return fnprepatch_83.call(this, Force, Location, BoneName) }; } catch (e) {};
+try { let fnprepatch_84 = PrimitiveComponent.prototype.AddForce;PrimitiveComponent.prototype.AddForce = function (Force, BoneName = "None", bAccelChange = false) { return fnprepatch_84.call(this, Force, BoneName, bAccelChange) }; } catch (e) {};
+try { let fnprepatch_85 = PrimitiveComponent.prototype.AddAngularImpulseInRadians;PrimitiveComponent.prototype.AddAngularImpulseInRadians = function (Impulse, BoneName = "None", bVelChange = false) { return fnprepatch_85.call(this, Impulse, BoneName, bVelChange) }; } catch (e) {};
+try { let fnprepatch_86 = PrimitiveComponent.prototype.AddAngularImpulseInDegrees;PrimitiveComponent.prototype.AddAngularImpulseInDegrees = function (Impulse, BoneName = "None", bVelChange = false) { return fnprepatch_86.call(this, Impulse, BoneName, bVelChange) }; } catch (e) {};
+try { let fnprepatch_87 = PrimitiveComponent.prototype.AddAngularImpulse;PrimitiveComponent.prototype.AddAngularImpulse = function (Impulse, BoneName = "None", bVelChange = false) { return fnprepatch_87.call(this, Impulse, BoneName, bVelChange) }; } catch (e) {};
+try { PrimitiveComponent.prototype.SetPhysicalMaterialOverride = PrimitiveComponent.prototype.SetPhysMaterialOverride; } catch (e) {};
+try { PrimitiveComponent.prototype.SetMaxDrawDistance = PrimitiveComponent.prototype.SetCullDistance; } catch (e) {};
+try { PrimitiveComponent.prototype.SphereTraceComponent = PrimitiveComponent.prototype.K2_SphereTraceComponent; } catch (e) {};
+try { PrimitiveComponent.prototype.SphereOverlapComponent = PrimitiveComponent.prototype.K2_SphereOverlapComponent; } catch (e) {};
+try { PrimitiveComponent.prototype.LineTraceComponent = PrimitiveComponent.prototype.K2_LineTraceComponent; } catch (e) {};
+try { PrimitiveComponent.prototype.IsQueryCollisionEnabled = PrimitiveComponent.prototype.K2_IsQueryCollisionEnabled; } catch (e) {};
+try { PrimitiveComponent.prototype.IsPhysicsCollisionEnabled = PrimitiveComponent.prototype.K2_IsPhysicsCollisionEnabled; } catch (e) {};
+try { PrimitiveComponent.prototype.IsCollisionEnabled = PrimitiveComponent.prototype.K2_IsCollisionEnabled; } catch (e) {};
+try { PrimitiveComponent.prototype.BoxOverlapComponent = PrimitiveComponent.prototype.K2_BoxOverlapComponent; } catch (e) {};
+try { PrimitiveComponent.prototype.CreateMIDForElementFromMaterial = PrimitiveComponent.prototype.CreateAndSetMaterialInstanceDynamicFromMaterial; } catch (e) {};
+try { PrimitiveComponent.prototype.CreateMIDForElement = PrimitiveComponent.prototype.CreateAndSetMaterialInstanceDynamic; } catch (e) {};
+try { PrimitiveComponent.prototype.GetMoveIgnoreComponents = PrimitiveComponent.prototype.CopyArrayOfMoveIgnoreComponents; } catch (e) {};
+try { PrimitiveComponent.prototype.GetMoveIgnoreActors = PrimitiveComponent.prototype.CopyArrayOfMoveIgnoreActors; } catch (e) {};
+try { let fnprepatch_88 = NavModifierVolume.prototype.SetAreaClass;NavModifierVolume.prototype.SetAreaClass = function (NewAreaClass = null) { return fnprepatch_88.call(this, NewAreaClass) }; } catch (e) {};
+try { let fnprepatch_89 = RecastNavMesh.prototype.K2_ReplaceAreaInTileBounds;RecastNavMesh.prototype.K2_ReplaceAreaInTileBounds = function (Bounds, OldArea, NewArea, ReplaceLinks = true) { return fnprepatch_89.call(this, Bounds, OldArea, NewArea, ReplaceLinks) }; } catch (e) {};
+try { RecastNavMesh.prototype.ReplaceAreaInTileBounds = RecastNavMesh.prototype.K2_ReplaceAreaInTileBounds; } catch (e) {};
+try { let fnprepatch_90 = UserDefinedImageCaptureProtocol.prototype.WriteImageToDisk;UserDefinedImageCaptureProtocol.prototype.WriteImageToDisk = function (PixelData, StreamID, FrameMetrics, bCopyImageData = false) { return fnprepatch_90.call(this, PixelData, StreamID, FrameMetrics, bCopyImageData) }; } catch (e) {};
+try { let fnprepatch_91 = Widget.prototype.HasMouseCaptureByUser;Widget.prototype.HasMouseCaptureByUser = function (UserIndex, PointerIndex = -1) { return fnprepatch_91.call(this, UserIndex, PointerIndex) }; } catch (e) {};
+try { Widget.prototype.HasAnyUserFocusedDescendants = Widget.prototype.HasFocusedDescendants; } catch (e) {};
+try { let fnprepatch_92 = UserWidget.prototype.SetPositionInViewport;UserWidget.prototype.SetPositionInViewport = function (Position, bRemoveDPIScale = true) { return fnprepatch_92.call(this, Position, bRemoveDPIScale) }; } catch (e) {};
+try { let fnprepatch_93 = UserWidget.prototype.SetPlaybackSpeed;UserWidget.prototype.SetPlaybackSpeed = function (InAnimation, PlaybackSpeed = 1) { return fnprepatch_93.call(this, InAnimation, PlaybackSpeed) }; } catch (e) {};
+try { let fnprepatch_94 = UserWidget.prototype.PlayAnimationTimeRange;UserWidget.prototype.PlayAnimationTimeRange = function (InAnimation, StartAtTime = 0, EndAtTime = 0, NumLoopsToPlay = 1, PlayMode = "Forward", PlaybackSpeed = 1) { return fnprepatch_94.call(this, InAnimation, StartAtTime, EndAtTime, NumLoopsToPlay, PlayMode, PlaybackSpeed) }; } catch (e) {};
+try { let fnprepatch_95 = UserWidget.prototype.PlayAnimationReverse;UserWidget.prototype.PlayAnimationReverse = function (InAnimation, PlaybackSpeed = 1) { return fnprepatch_95.call(this, InAnimation, PlaybackSpeed) }; } catch (e) {};
+try { let fnprepatch_96 = UserWidget.prototype.PlayAnimationForward;UserWidget.prototype.PlayAnimationForward = function (InAnimation, PlaybackSpeed = 1) { return fnprepatch_96.call(this, InAnimation, PlaybackSpeed) }; } catch (e) {};
+try { let fnprepatch_97 = UserWidget.prototype.PlayAnimation;UserWidget.prototype.PlayAnimation = function (InAnimation, StartAtTime = 0, NumLoopsToPlay = 1, PlayMode = "Forward", PlaybackSpeed = 1) { return fnprepatch_97.call(this, InAnimation, StartAtTime, NumLoopsToPlay, PlayMode, PlaybackSpeed) }; } catch (e) {};
+try { let fnprepatch_98 = UserWidget.prototype.BindToAnimationEvent;UserWidget.prototype.BindToAnimationEvent = function (Animation, Delegate, AnimationEvent, UserTag = "None") { return fnprepatch_98.call(this, Animation, Delegate, AnimationEvent, UserTag) }; } catch (e) {};
+try { let fnprepatch_99 = UserWidget.prototype.AddToViewport;UserWidget.prototype.AddToViewport = function (ZOrder = 0) { return fnprepatch_99.call(this, ZOrder) }; } catch (e) {};
+try { let fnprepatch_100 = UserWidget.prototype.AddToPlayerScreen;UserWidget.prototype.AddToPlayerScreen = function (ZOrder = 0) { return fnprepatch_100.call(this, ZOrder) }; } catch (e) {};
+try { let fnprepatch_101 = ViewportInteractor.prototype.GetLaserPointer;ViewportInteractor.prototype.GetLaserPointer = function (LaserPointerStart, LaserPointerEnd, bEvenIfBlocked = false, LaserLengthOverride = 0) { return fnprepatch_101.call(this, LaserPointerStart, LaserPointerEnd, bEvenIfBlocked, LaserLengthOverride) }; } catch (e) {};
+try { ViewportInteractor.prototype.HandleInputKey = ViewportInteractor.prototype.HandleInputKey_BP; } catch (e) {};
+try { ViewportInteractor.prototype.HandleInputAxis = ViewportInteractor.prototype.HandleInputAxis_BP; } catch (e) {};
+try { let fnprepatch_102 = MeshComponent.prototype.PrestreamTextures;MeshComponent.prototype.PrestreamTextures = function (Seconds, bPrioritizeCharacterTextures, CinematicTextureGroups = 0) { return fnprepatch_102.call(this, Seconds, bPrioritizeCharacterTextures, CinematicTextureGroups) }; } catch (e) {};
+try { let fnprepatch_103 = ARBlueprintLibrary.prototype.PinComponentToTraceResult;ARBlueprintLibrary.prototype.PinComponentToTraceResult = function (ComponentToPin, TraceResult, DebugName = "None") { return fnprepatch_103.call(this, ComponentToPin, TraceResult, DebugName) }; } catch (e) {};
+try { let fnprepatch_104 = ARBlueprintLibrary.prototype.PinComponent;ARBlueprintLibrary.prototype.PinComponent = function (ComponentToPin, PinToWorldTransform, TrackedGeometry = undefined, DebugName = "None") { return fnprepatch_104.call(this, ComponentToPin, PinToWorldTransform, TrackedGeometry, DebugName) }; } catch (e) {};
+try { let fnprepatch_105 = ARBlueprintLibrary.prototype.LineTraceTrackedObjects3D;ARBlueprintLibrary.prototype.LineTraceTrackedObjects3D = function (Start, End, bTestFeaturePoints = true, bTestGroundPlane = true, bTestPlaneExtents = true, bTestPlaneBoundaryPolygon = true) { return fnprepatch_105.call(this, Start, End, bTestFeaturePoints, bTestGroundPlane, bTestPlaneExtents, bTestPlaneBoundaryPolygon) }; } catch (e) {};
+try { let fnprepatch_106 = ARBlueprintLibrary.prototype.LineTraceTrackedObjects;ARBlueprintLibrary.prototype.LineTraceTrackedObjects = function (ScreenCoord, bTestFeaturePoints = true, bTestGroundPlane = true, bTestPlaneExtents = true, bTestPlaneBoundaryPolygon = true) { return fnprepatch_106.call(this, ScreenCoord, bTestFeaturePoints, bTestGroundPlane, bTestPlaneExtents, bTestPlaneBoundaryPolygon) }; } catch (e) {};
+try { let fnprepatch_107 = ARBlueprintLibrary.prototype.DebugDrawTrackedGeometry;ARBlueprintLibrary.prototype.DebugDrawTrackedGeometry = function (TrackedGeometry, WorldContextObject, Color = {"R":1,"G":1,"B":0,"A":0.75}, OutlineThickness = 5, PersistForSeconds = 0) { return fnprepatch_107.call(this, TrackedGeometry, WorldContextObject, Color, OutlineThickness, PersistForSeconds) }; } catch (e) {};
+try { let fnprepatch_108 = ARBlueprintLibrary.prototype.DebugDrawPin;ARBlueprintLibrary.prototype.DebugDrawPin = function (ARPin, WorldContextObject, Color = {"R":1,"G":1,"B":0,"A":0.75}, Scale = 5, PersistForSeconds = 0) { return fnprepatch_108.call(this, ARPin, WorldContextObject, Color, Scale, PersistForSeconds) }; } catch (e) {};
+try { ARBlueprintLibrary.prototype.SetARAlignmentTransform = ARBlueprintLibrary.prototype.SetAlignmentTransform; } catch (e) {};
+try { ARBlueprintLibrary.SetARAlignmentTransform = ARBlueprintLibrary.SetAlignmentTransform; } catch (e) {};
+try { ARBlueprintLibrary.prototype.IsARSessionTypeSupported = ARBlueprintLibrary.prototype.IsSessionTypeSupported; } catch (e) {};
+try { ARBlueprintLibrary.IsARSessionTypeSupported = ARBlueprintLibrary.IsSessionTypeSupported; } catch (e) {};
+try { ARBlueprintLibrary.prototype.IsARSessionTrackingFeatureSupported = ARBlueprintLibrary.prototype.IsSessionTrackingFeatureSupported; } catch (e) {};
+try { ARBlueprintLibrary.IsARSessionTrackingFeatureSupported = ARBlueprintLibrary.IsSessionTrackingFeatureSupported; } catch (e) {};
+try { ARBlueprintLibrary.prototype.GetARWorldMappingStatus = ARBlueprintLibrary.prototype.GetWorldMappingStatus; } catch (e) {};
+try { ARBlueprintLibrary.GetARWorldMappingStatus = ARBlueprintLibrary.GetWorldMappingStatus; } catch (e) {};
+try { ARBlueprintLibrary.prototype.GetARTrackingQualityReason = ARBlueprintLibrary.prototype.GetTrackingQualityReason; } catch (e) {};
+try { ARBlueprintLibrary.GetARTrackingQualityReason = ARBlueprintLibrary.GetTrackingQualityReason; } catch (e) {};
+try { ARBlueprintLibrary.prototype.GetARTrackingQuality = ARBlueprintLibrary.prototype.GetTrackingQuality; } catch (e) {};
+try { ARBlueprintLibrary.GetARTrackingQuality = ARBlueprintLibrary.GetTrackingQuality; } catch (e) {};
+try { ARBlueprintLibrary.prototype.GetSupportedARVideoFormats = ARBlueprintLibrary.prototype.GetSupportedVideoFormats; } catch (e) {};
+try { ARBlueprintLibrary.GetSupportedARVideoFormats = ARBlueprintLibrary.GetSupportedVideoFormats; } catch (e) {};
+try { ARBlueprintLibrary.prototype.GetARSessionConfig = ARBlueprintLibrary.prototype.GetSessionConfig; } catch (e) {};
+try { ARBlueprintLibrary.GetARSessionConfig = ARBlueprintLibrary.GetSessionConfig; } catch (e) {};
+try { ARBlueprintLibrary.prototype.GetARPointCloud = ARBlueprintLibrary.prototype.GetPointCloud; } catch (e) {};
+try { ARBlueprintLibrary.GetARPointCloud = ARBlueprintLibrary.GetPointCloud; } catch (e) {};
+try { ARBlueprintLibrary.prototype.GetARPersonSegmentationImage = ARBlueprintLibrary.prototype.GetPersonSegmentationImage; } catch (e) {};
+try { ARBlueprintLibrary.GetARPersonSegmentationImage = ARBlueprintLibrary.GetPersonSegmentationImage; } catch (e) {};
+try { ARBlueprintLibrary.prototype.GetARPersonSegmentationDepthImage = ARBlueprintLibrary.prototype.GetPersonSegmentationDepthImage; } catch (e) {};
+try { ARBlueprintLibrary.GetARPersonSegmentationDepthImage = ARBlueprintLibrary.GetPersonSegmentationDepthImage; } catch (e) {};
+try { ARBlueprintLibrary.prototype.GetARCameraImage = ARBlueprintLibrary.prototype.GetCameraImage; } catch (e) {};
+try { ARBlueprintLibrary.GetARCameraImage = ARBlueprintLibrary.GetCameraImage; } catch (e) {};
+try { ARBlueprintLibrary.prototype.GetARCameraDepth = ARBlueprintLibrary.prototype.GetCameraDepth; } catch (e) {};
+try { ARBlueprintLibrary.GetARCameraDepth = ARBlueprintLibrary.GetCameraDepth; } catch (e) {};
+try { ARBlueprintLibrary.prototype.GetAllARTracked3DPoses = ARBlueprintLibrary.prototype.GetAllTrackedPoses; } catch (e) {};
+try { ARBlueprintLibrary.GetAllARTracked3DPoses = ARBlueprintLibrary.GetAllTrackedPoses; } catch (e) {};
+try { ARBlueprintLibrary.prototype.GetAllARTrackedPlanes = ARBlueprintLibrary.prototype.GetAllTrackedPlanes; } catch (e) {};
+try { ARBlueprintLibrary.GetAllARTrackedPlanes = ARBlueprintLibrary.GetAllTrackedPlanes; } catch (e) {};
+try { ARBlueprintLibrary.prototype.GetAllARTrackedImages = ARBlueprintLibrary.prototype.GetAllTrackedImages; } catch (e) {};
+try { ARBlueprintLibrary.GetAllARTrackedImages = ARBlueprintLibrary.GetAllTrackedImages; } catch (e) {};
+try { ARBlueprintLibrary.prototype.GetAllARTrackedEnvironmentProbes = ARBlueprintLibrary.prototype.GetAllTrackedEnvironmentCaptureProbes; } catch (e) {};
+try { ARBlueprintLibrary.GetAllARTrackedEnvironmentProbes = ARBlueprintLibrary.GetAllTrackedEnvironmentCaptureProbes; } catch (e) {};
+try { ARBlueprintLibrary.prototype.GetAllARTracked2DPoses = ARBlueprintLibrary.prototype.GetAllTracked2DPoses; } catch (e) {};
+try { ARBlueprintLibrary.GetAllARTracked2DPoses = ARBlueprintLibrary.GetAllTracked2DPoses; } catch (e) {};
+try { ARBlueprintLibrary.prototype.GetAllARGeometries = ARBlueprintLibrary.prototype.GetAllGeometries; } catch (e) {};
+try { ARBlueprintLibrary.GetAllARGeometries = ARBlueprintLibrary.GetAllGeometries; } catch (e) {};
+try { ARBlueprintLibrary.prototype.AddAREnvironmentProbe = ARBlueprintLibrary.prototype.AddManualEnvironmentCaptureProbe; } catch (e) {};
+try { ARBlueprintLibrary.AddAREnvironmentProbe = ARBlueprintLibrary.AddManualEnvironmentCaptureProbe; } catch (e) {};
+try { ARSaveWorldAsyncTaskBlueprintProxy.prototype.SaveARWorld = ARSaveWorldAsyncTaskBlueprintProxy.prototype.ARSaveWorld; } catch (e) {};
+try { ARSaveWorldAsyncTaskBlueprintProxy.SaveARWorld = ARSaveWorldAsyncTaskBlueprintProxy.ARSaveWorld; } catch (e) {};
+try { ARGetCandidateObjectAsyncTaskBlueprintProxy.prototype.GetARCandidateObject = ARGetCandidateObjectAsyncTaskBlueprintProxy.prototype.ARGetCandidateObject; } catch (e) {};
+try { ARGetCandidateObjectAsyncTaskBlueprintProxy.GetARCandidateObject = ARGetCandidateObjectAsyncTaskBlueprintProxy.ARGetCandidateObject; } catch (e) {};
+try { GameModeBase.prototype.OnPostLogin = GameModeBase.prototype.K2_PostLogin; } catch (e) {};
+try { GameModeBase.prototype.OnSwapPlayerControllers = GameModeBase.prototype.K2_OnSwapPlayerControllers; } catch (e) {};
+try { GameModeBase.prototype.OnRestartPlayer = GameModeBase.prototype.K2_OnRestartPlayer; } catch (e) {};
+try { GameModeBase.prototype.OnLogout = GameModeBase.prototype.K2_OnLogout; } catch (e) {};
+try { GameModeBase.prototype.OnChangeName = GameModeBase.prototype.K2_OnChangeName; } catch (e) {};
+try { GameModeBase.prototype.FindPlayerStart = GameModeBase.prototype.K2_FindPlayerStart; } catch (e) {};
+try { GameMode.prototype.OnSetMatchState = GameMode.prototype.K2_OnSetMatchState; } catch (e) {};
+try { ARSharedWorldGameMode.prototype.SetARPreviewImageData = ARSharedWorldGameMode.prototype.SetPreviewImageData; } catch (e) {};
+try { ARSharedWorldGameState.prototype.OnARWorldMapIsReady = ARSharedWorldGameState.prototype.K2_OnARWorldMapIsReady; } catch (e) {};
+try { let fnprepatch_109 = Controller.prototype.LineOfSightTo;Controller.prototype.LineOfSightTo = function (Other, ViewPoint, bAlternateChecks = false) { return fnprepatch_109.call(this, Other, ViewPoint, bAlternateChecks) }; } catch (e) {};
+try { Controller.prototype.OnUnPossess = Controller.prototype.ReceiveUnPossess; } catch (e) {};
+try { Controller.prototype.OnPossess = Controller.prototype.ReceivePossess; } catch (e) {};
+try { Controller.prototype.GetControlledPawn = Controller.prototype.K2_GetPawn; } catch (e) {};
+try { let fnprepatch_110 = PlayerController.prototype.StartFire;PlayerController.prototype.StartFire = function (FireModeNum = 0) { return fnprepatch_110.call(this, FireModeNum) }; } catch (e) {};
+try { let fnprepatch_111 = PlayerController.prototype.SetViewTargetWithBlend;PlayerController.prototype.SetViewTargetWithBlend = function (NewViewTarget, BlendTime = 0, BlendFunc = "VTBlend_Linear", BlendExp = 0, bLockOutgoing = false) { return fnprepatch_111.call(this, NewViewTarget, BlendTime, BlendFunc, BlendExp, bLockOutgoing) }; } catch (e) {};
+try { let fnprepatch_112 = PlayerController.prototype.ProjectWorldLocationToScreen;PlayerController.prototype.ProjectWorldLocationToScreen = function (WorldLocation, ScreenLocation, bPlayerViewportRelative = false) { return fnprepatch_112.call(this, WorldLocation, ScreenLocation, bPlayerViewportRelative) }; } catch (e) {};
+try { let fnprepatch_113 = PlayerController.prototype.PlayHapticEffect;PlayerController.prototype.PlayHapticEffect = function (HapticEffect, Hand, Scale = 1, bLoop = false) { return fnprepatch_113.call(this, HapticEffect, Hand, Scale, bLoop) }; } catch (e) {};
+try { let fnprepatch_114 = PlayerController.prototype.ClientStopCameraShake;PlayerController.prototype.ClientStopCameraShake = function (Shake, bImmediately = true) { return fnprepatch_114.call(this, Shake, bImmediately) }; } catch (e) {};
+try { let fnprepatch_115 = PlayerController.prototype.ClientPlayCameraShake;PlayerController.prototype.ClientPlayCameraShake = function (Shake, Scale = 1, PlaySpace = "CameraLocal", UserPlaySpaceRot) { return fnprepatch_115.call(this, Shake, Scale, PlaySpace, UserPlaySpaceRot) }; } catch (e) {};
+try { let fnprepatch_116 = PlayerController.prototype.ClientPlayCameraAnim;PlayerController.prototype.ClientPlayCameraAnim = function (AnimToPlay, Scale = 1, Rate = 1, BlendInTime = 0, BlendOutTime = 0, bLoop = false, bRandomStartTime = false, Space = "CameraLocal", CustomPlaySpace) { return fnprepatch_116.call(this, AnimToPlay, Scale, Rate, BlendInTime, BlendOutTime, bLoop, bRandomStartTime, Space, CustomPlaySpace) }; } catch (e) {};
+try { PlayerController.prototype.SetInputModeGameAndUI = PlayerController.prototype.SetInputMode_GameAndUI; } catch (e) {};
+try { PlayerController.prototype.SetInputModeGameAndUI = PlayerController.prototype.SetInputMode_GameAndUIEx; } catch (e) {};
+try { PlayerController.prototype.SetInputModeUIOnly = PlayerController.prototype.SetInputMode_UIOnly; } catch (e) {};
+try { PlayerController.prototype.SetInputModeUIOnly = PlayerController.prototype.SetInputMode_UIOnlyEx; } catch (e) {};
+try { PlayerController.prototype.SetMousePosition = PlayerController.prototype.SetMouseLocation; } catch (e) {};
+try { PlayerController.prototype.ConvertWorldLocationToScreenLocation = PlayerController.prototype.ProjectWorldLocationToScreen; } catch (e) {};
+try { PlayerController.prototype.ClientPlayForceFeedback = PlayerController.prototype.K2_ClientPlayForceFeedback; } catch (e) {};
+try { PlayerController.prototype.ConvertScreenLocationToWorldSpace = PlayerController.prototype.DeprojectScreenPositionToWorld; } catch (e) {};
+try { PlayerController.prototype.ConvertMouseLocationToWorldSpace = PlayerController.prototype.DeprojectMousePositionToWorld; } catch (e) {};
+try { let fnprepatch_117 = HeadMountedDisplayFunctionLibrary.prototype.SetWorldToMetersScale;HeadMountedDisplayFunctionLibrary.prototype.SetWorldToMetersScale = function (WorldContext, NewScale = 100) { return fnprepatch_117.call(this, WorldContext, NewScale) }; } catch (e) {};
+try { let fnprepatch_118 = HeadMountedDisplayFunctionLibrary.prototype.SetSpectatorScreenModeTexturePlusEyeLayout;HeadMountedDisplayFunctionLibrary.prototype.SetSpectatorScreenModeTexturePlusEyeLayout = function (EyeRectMin, EyeRectMax, TextureRectMin, TextureRectMax, bDrawEyeFirst = true, bClearBlack = false, bUseAlpha = false) { return fnprepatch_118.call(this, EyeRectMin, EyeRectMax, TextureRectMin, TextureRectMax, bDrawEyeFirst, bClearBlack, bUseAlpha) }; } catch (e) {};
+try { let fnprepatch_119 = HeadMountedDisplayFunctionLibrary.prototype.ResetOrientationAndPosition;HeadMountedDisplayFunctionLibrary.prototype.ResetOrientationAndPosition = function (Yaw = 0, Options = "OrientationAndPosition") { return fnprepatch_119.call(this, Yaw, Options) }; } catch (e) {};
+try { let fnprepatch_120 = HeadMountedDisplayFunctionLibrary.prototype.GetTrackingSensorParameters;HeadMountedDisplayFunctionLibrary.prototype.GetTrackingSensorParameters = function (Origin, Rotation, LeftFOV, RightFOV, TopFOV, BottomFOV, Distance, NearPlane, FarPlane, IsActive, Index = 0) { return fnprepatch_120.call(this, Origin, Rotation, LeftFOV, RightFOV, TopFOV, BottomFOV, Distance, NearPlane, FarPlane, IsActive, Index) }; } catch (e) {};
+try { let fnprepatch_121 = HeadMountedDisplayFunctionLibrary.prototype.EnumerateTrackedDevices;HeadMountedDisplayFunctionLibrary.prototype.EnumerateTrackedDevices = function (SystemId = "None", DeviceType = "HeadMountedDisplay") { return fnprepatch_121.call(this, SystemId, DeviceType) }; } catch (e) {};
+try { let fnprepatch_122 = MaterialEditingLibrary.prototype.UpdateMaterialFunction;MaterialEditingLibrary.prototype.UpdateMaterialFunction = function (MaterialFunction, PreviewMaterial = undefined) { return fnprepatch_122.call(this, MaterialFunction, PreviewMaterial) }; } catch (e) {};
+try { let fnprepatch_123 = MaterialEditingLibrary.prototype.CreateMaterialExpressionInFunction;MaterialEditingLibrary.prototype.CreateMaterialExpressionInFunction = function (MaterialFunction, ExpressionClass, NodePosX = 0, NodePosY = 0) { return fnprepatch_123.call(this, MaterialFunction, ExpressionClass, NodePosX, NodePosY) }; } catch (e) {};
+try { let fnprepatch_124 = MaterialEditingLibrary.prototype.CreateMaterialExpression;MaterialEditingLibrary.prototype.CreateMaterialExpression = function (Material, ExpressionClass, NodePosX = 0, NodePosY = 0) { return fnprepatch_124.call(this, Material, ExpressionClass, NodePosX, NodePosY) }; } catch (e) {};
+try { let fnprepatch_125 = CameraComponent.prototype.AddOrUpdateBlendable;CameraComponent.prototype.AddOrUpdateBlendable = function (InBlendableObject, InWeight = 1) { return fnprepatch_125.call(this, InBlendableObject, InWeight) }; } catch (e) {};
+try { let fnprepatch_126 = AudioMixerBlueprintLibrary.prototype.StopRecordingOutput;AudioMixerBlueprintLibrary.prototype.StopRecordingOutput = function (WorldContextObject, ExportType, Name, Path, SubmixToRecord = undefined, ExistingSoundWaveToOverwrite = undefined) { return fnprepatch_126.call(this, WorldContextObject, ExportType, Name, Path, SubmixToRecord, ExistingSoundWaveToOverwrite) }; } catch (e) {};
+try { let fnprepatch_127 = AudioMixerBlueprintLibrary.prototype.StopAnalyzingOutput;AudioMixerBlueprintLibrary.prototype.StopAnalyzingOutput = function (WorldContextObject, SubmixToStopAnalyzing = undefined) { return fnprepatch_127.call(this, WorldContextObject, SubmixToStopAnalyzing) }; } catch (e) {};
+try { let fnprepatch_128 = AudioMixerBlueprintLibrary.prototype.StartRecordingOutput;AudioMixerBlueprintLibrary.prototype.StartRecordingOutput = function (WorldContextObject, ExpectedDuration, SubmixToRecord = undefined) { return fnprepatch_128.call(this, WorldContextObject, ExpectedDuration, SubmixToRecord) }; } catch (e) {};
+try { let fnprepatch_129 = AudioMixerBlueprintLibrary.prototype.StartAnalyzingOutput;AudioMixerBlueprintLibrary.prototype.StartAnalyzingOutput = function (WorldContextObject, SubmixToAnalyze = undefined, FFTSize = "DefaultSize", InterpolationMethod = "NearestNeighbor", WindowType = "None", HopSize = 0) { return fnprepatch_129.call(this, WorldContextObject, SubmixToAnalyze, FFTSize, InterpolationMethod, WindowType, HopSize) }; } catch (e) {};
+try { let fnprepatch_130 = AudioMixerBlueprintLibrary.prototype.ResumeRecordingOutput;AudioMixerBlueprintLibrary.prototype.ResumeRecordingOutput = function (WorldContextObject, SubmixToPause = undefined) { return fnprepatch_130.call(this, WorldContextObject, SubmixToPause) }; } catch (e) {};
+try { let fnprepatch_131 = AudioMixerBlueprintLibrary.prototype.PauseRecordingOutput;AudioMixerBlueprintLibrary.prototype.PauseRecordingOutput = function (WorldContextObject, SubmixToPause = undefined) { return fnprepatch_131.call(this, WorldContextObject, SubmixToPause) }; } catch (e) {};
+try { let fnprepatch_132 = AudioMixerBlueprintLibrary.prototype.GetPhaseForFrequencies;AudioMixerBlueprintLibrary.prototype.GetPhaseForFrequencies = function (WorldContextObject, Frequencies, Phases, SubmixToAnalyze = undefined) { return fnprepatch_132.call(this, WorldContextObject, Frequencies, Phases, SubmixToAnalyze) }; } catch (e) {};
+try { let fnprepatch_133 = AudioMixerBlueprintLibrary.prototype.GetMagnitudeForFrequencies;AudioMixerBlueprintLibrary.prototype.GetMagnitudeForFrequencies = function (WorldContextObject, Frequencies, Magnitudes, SubmixToAnalyze = undefined) { return fnprepatch_133.call(this, WorldContextObject, Frequencies, Magnitudes, SubmixToAnalyze) }; } catch (e) {};
 try { AudioMixerBlueprintLibrary.prototype.FinishRecordingOutput = AudioMixerBlueprintLibrary.prototype.StopRecordingOutput; } catch (e) {};
 try { AudioMixerBlueprintLibrary.FinishRecordingOutput = AudioMixerBlueprintLibrary.StopRecordingOutput; } catch (e) {};
-try { let fnprepatch_138 = SubmixEffectReverbPreset.prototype.SetSettingsWithReverbEffect;SubmixEffectReverbPreset.prototype.SetSettingsWithReverbEffect = function (InReverbEffect, WetLevel, DryLevel = 0) { return fnprepatch_138.call(this, InReverbEffect, WetLevel, DryLevel) }; } catch (e) {};
-try { let fnprepatch_139 = DynamicEntryBox.prototype.Reset;DynamicEntryBox.prototype.Reset = function (bDeleteWidgets = false) { return fnprepatch_139.call(this, bDeleteWidgets) }; } catch (e) {};
+try { let fnprepatch_134 = SubmixEffectReverbPreset.prototype.SetSettingsWithReverbEffect;SubmixEffectReverbPreset.prototype.SetSettingsWithReverbEffect = function (InReverbEffect, WetLevel, DryLevel = 0) { return fnprepatch_134.call(this, InReverbEffect, WetLevel, DryLevel) }; } catch (e) {};
+try { let fnprepatch_135 = SubmixEffectReverbFastPreset.prototype.SetSettingsWithReverbEffect;SubmixEffectReverbFastPreset.prototype.SetSettingsWithReverbEffect = function (InReverbEffect, WetLevel, DryLevel = 0) { return fnprepatch_135.call(this, InReverbEffect, WetLevel, DryLevel) }; } catch (e) {};
+try { let fnprepatch_136 = DynamicEntryBox.prototype.Reset;DynamicEntryBox.prototype.Reset = function (bDeleteWidgets = false) { return fnprepatch_136.call(this, bDeleteWidgets) }; } catch (e) {};
 try { DynamicEntryBox.prototype.CreateEntryofClass = DynamicEntryBox.prototype.BP_CreateEntryOfClass; } catch (e) {};
 try { DynamicEntryBox.prototype.CreateEntry = DynamicEntryBox.prototype.BP_CreateEntry; } catch (e) {};
-try { let fnprepatch_140 = UImage.prototype.SetBrushFromTextureDynamic;UImage.prototype.SetBrushFromTextureDynamic = function (Texture, bMatchSize = false) { return fnprepatch_140.call(this, Texture, bMatchSize) }; } catch (e) {};
-try { let fnprepatch_141 = UImage.prototype.SetBrushFromTexture;UImage.prototype.SetBrushFromTexture = function (Texture, bMatchSize = false) { return fnprepatch_141.call(this, Texture, bMatchSize) }; } catch (e) {};
-try { let fnprepatch_142 = UImage.prototype.SetBrushFromSoftTexture;UImage.prototype.SetBrushFromSoftTexture = function (SoftTexture, bMatchSize = false) { return fnprepatch_142.call(this, SoftTexture, bMatchSize) }; } catch (e) {};
-try { let fnprepatch_143 = UImage.prototype.SetBrushFromAtlasInterface;UImage.prototype.SetBrushFromAtlasInterface = function (AtlasRegion, bMatchSize = false) { return fnprepatch_143.call(this, AtlasRegion, bMatchSize) }; } catch (e) {};
+try { let fnprepatch_137 = GridPanel.prototype.AddChildToGrid;GridPanel.prototype.AddChildToGrid = function (Content, InRow = 0, InColumn = 0) { return fnprepatch_137.call(this, Content, InRow, InColumn) }; } catch (e) {};
+try { let fnprepatch_138 = UImage.prototype.SetBrushFromTextureDynamic;UImage.prototype.SetBrushFromTextureDynamic = function (Texture, bMatchSize = false) { return fnprepatch_138.call(this, Texture, bMatchSize) }; } catch (e) {};
+try { let fnprepatch_139 = UImage.prototype.SetBrushFromTexture;UImage.prototype.SetBrushFromTexture = function (Texture, bMatchSize = false) { return fnprepatch_139.call(this, Texture, bMatchSize) }; } catch (e) {};
+try { let fnprepatch_140 = UImage.prototype.SetBrushFromSoftTexture;UImage.prototype.SetBrushFromSoftTexture = function (SoftTexture, bMatchSize = false) { return fnprepatch_140.call(this, SoftTexture, bMatchSize) }; } catch (e) {};
+try { let fnprepatch_141 = UImage.prototype.SetBrushFromAtlasInterface;UImage.prototype.SetBrushFromAtlasInterface = function (AtlasRegion, bMatchSize = false) { return fnprepatch_141.call(this, AtlasRegion, bMatchSize) }; } catch (e) {};
 try { UserListEntry.prototype.OnItemSelectionChanged = UserListEntry.prototype.BP_OnItemSelectionChanged; } catch (e) {};
 try { UserListEntry.prototype.OnItemExpansionChanged = UserListEntry.prototype.BP_OnItemExpansionChanged; } catch (e) {};
 try { UserListEntry.prototype.OnEntryReleased = UserListEntry.prototype.BP_OnEntryReleased; } catch (e) {};
@@ -365,29 +416,36 @@ try { ListView.prototype.GetSelectedItem = ListView.prototype.BP_GetSelectedItem
 try { ListView.prototype.GetNumItemsSelected = ListView.prototype.BP_GetNumItemsSelected; } catch (e) {};
 try { ListView.prototype.ClearSelection = ListView.prototype.BP_ClearSelection; } catch (e) {};
 try { ListView.prototype.CancelScrollIntoView = ListView.prototype.BP_CancelScrollIntoView; } catch (e) {};
-try { let fnprepatch_144 = ScrollBox.prototype.ScrollWidgetIntoView;ScrollBox.prototype.ScrollWidgetIntoView = function (WidgetToFind, AnimateScroll = true, ScrollDestination = "IntoView") { return fnprepatch_144.call(this, WidgetToFind, AnimateScroll, ScrollDestination) }; } catch (e) {};
+try { let fnprepatch_142 = ScrollBox.prototype.ScrollWidgetIntoView;ScrollBox.prototype.ScrollWidgetIntoView = function (WidgetToFind, AnimateScroll = true, ScrollDestination = "IntoView") { return fnprepatch_142.call(this, WidgetToFind, AnimateScroll, ScrollDestination) }; } catch (e) {};
 try { SlateBlueprintLibrary.prototype.ScreenToLocal = SlateBlueprintLibrary.prototype.ScreenToWidgetLocal; } catch (e) {};
 try { SlateBlueprintLibrary.ScreenToLocal = SlateBlueprintLibrary.ScreenToWidgetLocal; } catch (e) {};
 try { SlateBlueprintLibrary.prototype.ScreenToAbsolute = SlateBlueprintLibrary.prototype.ScreenToWidgetAbsolute; } catch (e) {};
 try { SlateBlueprintLibrary.ScreenToAbsolute = SlateBlueprintLibrary.ScreenToWidgetAbsolute; } catch (e) {};
 try { SlateBlueprintLibrary.prototype.Equal = SlateBlueprintLibrary.prototype.EqualEqual_SlateBrush; } catch (e) {};
 try { SlateBlueprintLibrary.Equal = SlateBlueprintLibrary.EqualEqual_SlateBrush; } catch (e) {};
-try { let fnprepatch_145 = WidgetBlueprintLibrary.prototype.SetUserFocus;WidgetBlueprintLibrary.prototype.SetUserFocus = function (Reply, FocusWidget, bInAllUsers = false) { return fnprepatch_145.call(this, Reply, FocusWidget, bInAllUsers) }; } catch (e) {};
-try { let fnprepatch_146 = WidgetBlueprintLibrary.prototype.SetInputMode_UIOnlyEx;WidgetBlueprintLibrary.prototype.SetInputMode_UIOnlyEx = function (PlayerController, InWidgetToFocus = undefined, InMouseLockMode = "DoNotLock") { return fnprepatch_146.call(this, PlayerController, InWidgetToFocus, InMouseLockMode) }; } catch (e) {};
-try { let fnprepatch_147 = WidgetBlueprintLibrary.prototype.SetInputMode_UIOnly;WidgetBlueprintLibrary.prototype.SetInputMode_UIOnly = function (Target, InWidgetToFocus = undefined, bLockMouseToViewport = false) { return fnprepatch_147.call(this, Target, InWidgetToFocus, bLockMouseToViewport) }; } catch (e) {};
-try { let fnprepatch_148 = WidgetBlueprintLibrary.prototype.SetInputMode_GameAndUIEx;WidgetBlueprintLibrary.prototype.SetInputMode_GameAndUIEx = function (PlayerController, InWidgetToFocus = undefined, InMouseLockMode = "DoNotLock", bHideCursorDuringCapture = true) { return fnprepatch_148.call(this, PlayerController, InWidgetToFocus, InMouseLockMode, bHideCursorDuringCapture) }; } catch (e) {};
-try { let fnprepatch_149 = WidgetBlueprintLibrary.prototype.SetInputMode_GameAndUI;WidgetBlueprintLibrary.prototype.SetInputMode_GameAndUI = function (Target, InWidgetToFocus = undefined, bLockMouseToViewport = false, bHideCursorDuringCapture = true) { return fnprepatch_149.call(this, Target, InWidgetToFocus, bLockMouseToViewport, bHideCursorDuringCapture) }; } catch (e) {};
-try { let fnprepatch_150 = WidgetBlueprintLibrary.prototype.ReleaseJoystickCapture;WidgetBlueprintLibrary.prototype.ReleaseJoystickCapture = function (Reply, bInAllJoysticks = false) { return fnprepatch_150.call(this, Reply, bInAllJoysticks) }; } catch (e) {};
-try { let fnprepatch_151 = WidgetBlueprintLibrary.prototype.MakeBrushFromTexture;WidgetBlueprintLibrary.prototype.MakeBrushFromTexture = function (Texture, Width = 0, Height = 0) { return fnprepatch_151.call(this, Texture, Width, Height) }; } catch (e) {};
-try { let fnprepatch_152 = WidgetBlueprintLibrary.prototype.MakeBrushFromMaterial;WidgetBlueprintLibrary.prototype.MakeBrushFromMaterial = function (Material, Width = 32, Height = 32) { return fnprepatch_152.call(this, Material, Width, Height) }; } catch (e) {};
-try { let fnprepatch_153 = WidgetBlueprintLibrary.prototype.GetAllWidgetsOfClass;WidgetBlueprintLibrary.prototype.GetAllWidgetsOfClass = function (WorldContextObject, FoundWidgets, WidgetClass, TopLevelOnly = true) { return fnprepatch_153.call(this, WorldContextObject, FoundWidgets, WidgetClass, TopLevelOnly) }; } catch (e) {};
-try { let fnprepatch_154 = WidgetBlueprintLibrary.prototype.DrawTextFormatted;WidgetBlueprintLibrary.prototype.DrawTextFormatted = function (Context, Text, Position, Font, FontSize = 16, FontTypeFace = "Regular", Tint = {"R":1,"G":1,"B":1,"A":1}) { return fnprepatch_154.call(this, Context, Text, Position, Font, FontSize, FontTypeFace, Tint) }; } catch (e) {};
-try { let fnprepatch_155 = WidgetBlueprintLibrary.prototype.DrawText;WidgetBlueprintLibrary.prototype.DrawText = function (Context, InString, Position, Tint = {"R":1,"G":1,"B":1,"A":1}) { return fnprepatch_155.call(this, Context, InString, Position, Tint) }; } catch (e) {};
-try { let fnprepatch_156 = WidgetBlueprintLibrary.prototype.DrawLines;WidgetBlueprintLibrary.prototype.DrawLines = function (Context, Points, Tint = {"R":1,"G":1,"B":1,"A":1}, bAntiAlias = true) { return fnprepatch_156.call(this, Context, Points, Tint, bAntiAlias) }; } catch (e) {};
-try { let fnprepatch_157 = WidgetBlueprintLibrary.prototype.DrawLine;WidgetBlueprintLibrary.prototype.DrawLine = function (Context, PositionA, PositionB, Tint = {"R":1,"G":1,"B":1,"A":1}, bAntiAlias = true) { return fnprepatch_157.call(this, Context, PositionA, PositionB, Tint, bAntiAlias) }; } catch (e) {};
-try { let fnprepatch_158 = WidgetBlueprintLibrary.prototype.DrawBox;WidgetBlueprintLibrary.prototype.DrawBox = function (Context, Position, Size, Brush, Tint = {"R":1,"G":1,"B":1,"A":1}) { return fnprepatch_158.call(this, Context, Position, Size, Brush, Tint) }; } catch (e) {};
-try { let fnprepatch_159 = WidgetBlueprintLibrary.prototype.ClearUserFocus;WidgetBlueprintLibrary.prototype.ClearUserFocus = function (Reply, bInAllUsers = false) { return fnprepatch_159.call(this, Reply, bInAllUsers) }; } catch (e) {};
-try { let fnprepatch_160 = WidgetBlueprintLibrary.prototype.CaptureJoystick;WidgetBlueprintLibrary.prototype.CaptureJoystick = function (Reply, CapturingWidget, bInAllJoysticks = false) { return fnprepatch_160.call(this, Reply, CapturingWidget, bInAllJoysticks) }; } catch (e) {};
+try { let fnprepatch_143 = UniformGridPanel.prototype.AddChildToUniformGrid;UniformGridPanel.prototype.AddChildToUniformGrid = function (Content, InRow = 0, InColumn = 0) { return fnprepatch_143.call(this, Content, InRow, InColumn) }; } catch (e) {};
+try { let fnprepatch_144 = WidgetAnimationPlayCallbackProxy.prototype.CreatePlayAnimationTimeRangeProxyObject;WidgetAnimationPlayCallbackProxy.prototype.CreatePlayAnimationTimeRangeProxyObject = function (Result, Widget, InAnimation, StartAtTime = 0, EndAtTime = 0, NumLoopsToPlay = 1, PlayMode = "Forward", PlaybackSpeed = 1) { return fnprepatch_144.call(this, Result, Widget, InAnimation, StartAtTime, EndAtTime, NumLoopsToPlay, PlayMode, PlaybackSpeed) }; } catch (e) {};
+try { let fnprepatch_145 = WidgetAnimationPlayCallbackProxy.prototype.CreatePlayAnimationProxyObject;WidgetAnimationPlayCallbackProxy.prototype.CreatePlayAnimationProxyObject = function (Result, Widget, InAnimation, StartAtTime = 0, NumLoopsToPlay = 1, PlayMode = "Forward", PlaybackSpeed = 1) { return fnprepatch_145.call(this, Result, Widget, InAnimation, StartAtTime, NumLoopsToPlay, PlayMode, PlaybackSpeed) }; } catch (e) {};
+try { WidgetAnimationPlayCallbackProxy.prototype.PlayAnimationTimeRangewithFinishedevent = WidgetAnimationPlayCallbackProxy.prototype.CreatePlayAnimationTimeRangeProxyObject; } catch (e) {};
+try { WidgetAnimationPlayCallbackProxy.PlayAnimationTimeRangewithFinishedevent = WidgetAnimationPlayCallbackProxy.CreatePlayAnimationTimeRangeProxyObject; } catch (e) {};
+try { WidgetAnimationPlayCallbackProxy.prototype.PlayAnimationwithFinishedevent = WidgetAnimationPlayCallbackProxy.prototype.CreatePlayAnimationProxyObject; } catch (e) {};
+try { WidgetAnimationPlayCallbackProxy.PlayAnimationwithFinishedevent = WidgetAnimationPlayCallbackProxy.CreatePlayAnimationProxyObject; } catch (e) {};
+try { let fnprepatch_146 = WidgetBlueprintLibrary.prototype.SetUserFocus;WidgetBlueprintLibrary.prototype.SetUserFocus = function (Reply, FocusWidget, bInAllUsers = false) { return fnprepatch_146.call(this, Reply, FocusWidget, bInAllUsers) }; } catch (e) {};
+try { let fnprepatch_147 = WidgetBlueprintLibrary.prototype.SetInputMode_UIOnlyEx;WidgetBlueprintLibrary.prototype.SetInputMode_UIOnlyEx = function (PlayerController, InWidgetToFocus = undefined, InMouseLockMode = "DoNotLock") { return fnprepatch_147.call(this, PlayerController, InWidgetToFocus, InMouseLockMode) }; } catch (e) {};
+try { let fnprepatch_148 = WidgetBlueprintLibrary.prototype.SetInputMode_UIOnly;WidgetBlueprintLibrary.prototype.SetInputMode_UIOnly = function (Target, InWidgetToFocus = undefined, bLockMouseToViewport = false) { return fnprepatch_148.call(this, Target, InWidgetToFocus, bLockMouseToViewport) }; } catch (e) {};
+try { let fnprepatch_149 = WidgetBlueprintLibrary.prototype.SetInputMode_GameAndUIEx;WidgetBlueprintLibrary.prototype.SetInputMode_GameAndUIEx = function (PlayerController, InWidgetToFocus = undefined, InMouseLockMode = "DoNotLock", bHideCursorDuringCapture = true) { return fnprepatch_149.call(this, PlayerController, InWidgetToFocus, InMouseLockMode, bHideCursorDuringCapture) }; } catch (e) {};
+try { let fnprepatch_150 = WidgetBlueprintLibrary.prototype.SetInputMode_GameAndUI;WidgetBlueprintLibrary.prototype.SetInputMode_GameAndUI = function (Target, InWidgetToFocus = undefined, bLockMouseToViewport = false, bHideCursorDuringCapture = true) { return fnprepatch_150.call(this, Target, InWidgetToFocus, bLockMouseToViewport, bHideCursorDuringCapture) }; } catch (e) {};
+try { let fnprepatch_151 = WidgetBlueprintLibrary.prototype.ReleaseJoystickCapture;WidgetBlueprintLibrary.prototype.ReleaseJoystickCapture = function (Reply, bInAllJoysticks = false) { return fnprepatch_151.call(this, Reply, bInAllJoysticks) }; } catch (e) {};
+try { let fnprepatch_152 = WidgetBlueprintLibrary.prototype.MakeBrushFromTexture;WidgetBlueprintLibrary.prototype.MakeBrushFromTexture = function (Texture, Width = 0, Height = 0) { return fnprepatch_152.call(this, Texture, Width, Height) }; } catch (e) {};
+try { let fnprepatch_153 = WidgetBlueprintLibrary.prototype.MakeBrushFromMaterial;WidgetBlueprintLibrary.prototype.MakeBrushFromMaterial = function (Material, Width = 32, Height = 32) { return fnprepatch_153.call(this, Material, Width, Height) }; } catch (e) {};
+try { let fnprepatch_154 = WidgetBlueprintLibrary.prototype.GetAllWidgetsOfClass;WidgetBlueprintLibrary.prototype.GetAllWidgetsOfClass = function (WorldContextObject, FoundWidgets, WidgetClass, TopLevelOnly = true) { return fnprepatch_154.call(this, WorldContextObject, FoundWidgets, WidgetClass, TopLevelOnly) }; } catch (e) {};
+try { let fnprepatch_155 = WidgetBlueprintLibrary.prototype.DrawTextFormatted;WidgetBlueprintLibrary.prototype.DrawTextFormatted = function (Context, Text, Position, Font, FontSize = 16, FontTypeFace = "Regular", Tint = {"R":1,"G":1,"B":1,"A":1}) { return fnprepatch_155.call(this, Context, Text, Position, Font, FontSize, FontTypeFace, Tint) }; } catch (e) {};
+try { let fnprepatch_156 = WidgetBlueprintLibrary.prototype.DrawText;WidgetBlueprintLibrary.prototype.DrawText = function (Context, InString, Position, Tint = {"R":1,"G":1,"B":1,"A":1}) { return fnprepatch_156.call(this, Context, InString, Position, Tint) }; } catch (e) {};
+try { let fnprepatch_157 = WidgetBlueprintLibrary.prototype.DrawLines;WidgetBlueprintLibrary.prototype.DrawLines = function (Context, Points, Tint = {"R":1,"G":1,"B":1,"A":1}, bAntiAlias = true, Thickness = 1) { return fnprepatch_157.call(this, Context, Points, Tint, bAntiAlias, Thickness) }; } catch (e) {};
+try { let fnprepatch_158 = WidgetBlueprintLibrary.prototype.DrawLine;WidgetBlueprintLibrary.prototype.DrawLine = function (Context, PositionA, PositionB, Tint = {"R":1,"G":1,"B":1,"A":1}, bAntiAlias = true, Thickness = 1) { return fnprepatch_158.call(this, Context, PositionA, PositionB, Tint, bAntiAlias, Thickness) }; } catch (e) {};
+try { let fnprepatch_159 = WidgetBlueprintLibrary.prototype.DrawBox;WidgetBlueprintLibrary.prototype.DrawBox = function (Context, Position, Size, Brush, Tint = {"R":1,"G":1,"B":1,"A":1}) { return fnprepatch_159.call(this, Context, Position, Size, Brush, Tint) }; } catch (e) {};
+try { let fnprepatch_160 = WidgetBlueprintLibrary.prototype.ClearUserFocus;WidgetBlueprintLibrary.prototype.ClearUserFocus = function (Reply, bInAllUsers = false) { return fnprepatch_160.call(this, Reply, bInAllUsers) }; } catch (e) {};
+try { let fnprepatch_161 = WidgetBlueprintLibrary.prototype.CaptureJoystick;WidgetBlueprintLibrary.prototype.CaptureJoystick = function (Reply, CapturingWidget, bInAllJoysticks = false) { return fnprepatch_161.call(this, Reply, CapturingWidget, bInAllJoysticks) }; } catch (e) {};
 try { WidgetBlueprintLibrary.prototype.SetInputModeUIOnly = WidgetBlueprintLibrary.prototype.SetInputMode_UIOnlyEx; } catch (e) {};
 try { WidgetBlueprintLibrary.SetInputModeUIOnly = WidgetBlueprintLibrary.SetInputMode_UIOnlyEx; } catch (e) {};
 try { WidgetBlueprintLibrary.prototype.SetInputModeUIOnly = WidgetBlueprintLibrary.prototype.SetInputMode_UIOnly; } catch (e) {};
@@ -402,65 +460,65 @@ try { WidgetBlueprintLibrary.prototype.DrawString = WidgetBlueprintLibrary.proto
 try { WidgetBlueprintLibrary.DrawString = WidgetBlueprintLibrary.DrawText; } catch (e) {};
 try { WidgetBlueprintLibrary.prototype.CreateWidget = WidgetBlueprintLibrary.prototype.Create; } catch (e) {};
 try { WidgetBlueprintLibrary.CreateWidget = WidgetBlueprintLibrary.Create; } catch (e) {};
-try { let fnprepatch_161 = WidgetInteractionComponent.prototype.SendKeyChar;WidgetInteractionComponent.prototype.SendKeyChar = function (Characters, bRepeat = false) { return fnprepatch_161.call(this, Characters, bRepeat) }; } catch (e) {};
-try { let fnprepatch_162 = WidgetInteractionComponent.prototype.PressKey;WidgetInteractionComponent.prototype.PressKey = function (Key, bRepeat = false) { return fnprepatch_162.call(this, Key, bRepeat) }; } catch (e) {};
-try { let fnprepatch_163 = SourceControlHelpers.prototype.RevertUnchangedFiles;SourceControlHelpers.prototype.RevertUnchangedFiles = function (InFiles, bSilent = false) { return fnprepatch_163.call(this, InFiles, bSilent) }; } catch (e) {};
-try { let fnprepatch_164 = SourceControlHelpers.prototype.RevertUnchangedFile;SourceControlHelpers.prototype.RevertUnchangedFile = function (InFile, bSilent = false) { return fnprepatch_164.call(this, InFile, bSilent) }; } catch (e) {};
-try { let fnprepatch_165 = SourceControlHelpers.prototype.RevertFiles;SourceControlHelpers.prototype.RevertFiles = function (InFiles, bSilent = false) { return fnprepatch_165.call(this, InFiles, bSilent) }; } catch (e) {};
-try { let fnprepatch_166 = SourceControlHelpers.prototype.RevertFile;SourceControlHelpers.prototype.RevertFile = function (InFile, bSilent = false) { return fnprepatch_166.call(this, InFile, bSilent) }; } catch (e) {};
-try { let fnprepatch_167 = SourceControlHelpers.prototype.QueryFileState;SourceControlHelpers.prototype.QueryFileState = function (InFile, bSilent = false) { return fnprepatch_167.call(this, InFile, bSilent) }; } catch (e) {};
-try { let fnprepatch_168 = SourceControlHelpers.prototype.MarkFilesForAdd;SourceControlHelpers.prototype.MarkFilesForAdd = function (InFiles, bSilent = false) { return fnprepatch_168.call(this, InFiles, bSilent) }; } catch (e) {};
-try { let fnprepatch_169 = SourceControlHelpers.prototype.MarkFileForDelete;SourceControlHelpers.prototype.MarkFileForDelete = function (InFile, bSilent = false) { return fnprepatch_169.call(this, InFile, bSilent) }; } catch (e) {};
-try { let fnprepatch_170 = SourceControlHelpers.prototype.MarkFileForAdd;SourceControlHelpers.prototype.MarkFileForAdd = function (InFile, bSilent = false) { return fnprepatch_170.call(this, InFile, bSilent) }; } catch (e) {};
-try { let fnprepatch_171 = SourceControlHelpers.prototype.CopyFile;SourceControlHelpers.prototype.CopyFile = function (InSourceFile, InDestFile, bSilent = false) { return fnprepatch_171.call(this, InSourceFile, InDestFile, bSilent) }; } catch (e) {};
-try { let fnprepatch_172 = SourceControlHelpers.prototype.CheckOutOrAddFile;SourceControlHelpers.prototype.CheckOutOrAddFile = function (InFile, bSilent = false) { return fnprepatch_172.call(this, InFile, bSilent) }; } catch (e) {};
-try { let fnprepatch_173 = SourceControlHelpers.prototype.CheckOutFiles;SourceControlHelpers.prototype.CheckOutFiles = function (InFiles, bSilent = false) { return fnprepatch_173.call(this, InFiles, bSilent) }; } catch (e) {};
-try { let fnprepatch_174 = SourceControlHelpers.prototype.CheckOutFile;SourceControlHelpers.prototype.CheckOutFile = function (InFile, bSilent = false) { return fnprepatch_174.call(this, InFile, bSilent) }; } catch (e) {};
-try { let fnprepatch_175 = SourceControlHelpers.prototype.CheckInFiles;SourceControlHelpers.prototype.CheckInFiles = function (InFiles, InDescription, bSilent = false) { return fnprepatch_175.call(this, InFiles, InDescription, bSilent) }; } catch (e) {};
-try { let fnprepatch_176 = SourceControlHelpers.prototype.CheckInFile;SourceControlHelpers.prototype.CheckInFile = function (InFile, InDescription, bSilent = false) { return fnprepatch_176.call(this, InFile, InDescription, bSilent) }; } catch (e) {};
-try { let fnprepatch_177 = SkinnedMeshComponent.prototype.SetSkeletalMesh;SkinnedMeshComponent.prototype.SetSkeletalMesh = function (NewMesh, bReinitPose = true) { return fnprepatch_177.call(this, NewMesh, bReinitPose) }; } catch (e) {};
-try { let fnprepatch_178 = SkinnedMeshComponent.prototype.SetPhysicsAsset;SkinnedMeshComponent.prototype.SetPhysicsAsset = function (NewPhysicsAsset, bForceReInit = false) { return fnprepatch_178.call(this, NewPhysicsAsset, bForceReInit) }; } catch (e) {};
-try { let fnprepatch_179 = SkinnedMeshComponent.prototype.SetMasterPoseComponent;SkinnedMeshComponent.prototype.SetMasterPoseComponent = function (NewMasterBoneComponent, bForceUpdate = false) { return fnprepatch_179.call(this, NewMasterBoneComponent, bForceUpdate) }; } catch (e) {};
-try { let fnprepatch_180 = SkinnedMeshComponent.prototype.GetDeltaTransformFromRefPose;SkinnedMeshComponent.prototype.GetDeltaTransformFromRefPose = function (BoneName, BaseName = "None") { return fnprepatch_180.call(this, BoneName, BaseName) }; } catch (e) {};
-try { let fnprepatch_181 = SkinnedMeshComponent.prototype.FindClosestBone_K2;SkinnedMeshComponent.prototype.FindClosestBone_K2 = function (TestLocation, BoneLocation, IgnoreScale = 0, bRequirePhysicsAsset = false) { return fnprepatch_181.call(this, TestLocation, BoneLocation, IgnoreScale, bRequirePhysicsAsset) }; } catch (e) {};
+try { let fnprepatch_162 = WidgetInteractionComponent.prototype.SendKeyChar;WidgetInteractionComponent.prototype.SendKeyChar = function (Characters, bRepeat = false) { return fnprepatch_162.call(this, Characters, bRepeat) }; } catch (e) {};
+try { let fnprepatch_163 = WidgetInteractionComponent.prototype.PressKey;WidgetInteractionComponent.prototype.PressKey = function (Key, bRepeat = false) { return fnprepatch_163.call(this, Key, bRepeat) }; } catch (e) {};
+try { let fnprepatch_164 = SourceControlHelpers.prototype.RevertUnchangedFiles;SourceControlHelpers.prototype.RevertUnchangedFiles = function (InFiles, bSilent = false) { return fnprepatch_164.call(this, InFiles, bSilent) }; } catch (e) {};
+try { let fnprepatch_165 = SourceControlHelpers.prototype.RevertUnchangedFile;SourceControlHelpers.prototype.RevertUnchangedFile = function (InFile, bSilent = false) { return fnprepatch_165.call(this, InFile, bSilent) }; } catch (e) {};
+try { let fnprepatch_166 = SourceControlHelpers.prototype.RevertFiles;SourceControlHelpers.prototype.RevertFiles = function (InFiles, bSilent = false) { return fnprepatch_166.call(this, InFiles, bSilent) }; } catch (e) {};
+try { let fnprepatch_167 = SourceControlHelpers.prototype.RevertFile;SourceControlHelpers.prototype.RevertFile = function (InFile, bSilent = false) { return fnprepatch_167.call(this, InFile, bSilent) }; } catch (e) {};
+try { let fnprepatch_168 = SourceControlHelpers.prototype.QueryFileState;SourceControlHelpers.prototype.QueryFileState = function (InFile, bSilent = false) { return fnprepatch_168.call(this, InFile, bSilent) }; } catch (e) {};
+try { let fnprepatch_169 = SourceControlHelpers.prototype.MarkFilesForAdd;SourceControlHelpers.prototype.MarkFilesForAdd = function (InFiles, bSilent = false) { return fnprepatch_169.call(this, InFiles, bSilent) }; } catch (e) {};
+try { let fnprepatch_170 = SourceControlHelpers.prototype.MarkFileForDelete;SourceControlHelpers.prototype.MarkFileForDelete = function (InFile, bSilent = false) { return fnprepatch_170.call(this, InFile, bSilent) }; } catch (e) {};
+try { let fnprepatch_171 = SourceControlHelpers.prototype.MarkFileForAdd;SourceControlHelpers.prototype.MarkFileForAdd = function (InFile, bSilent = false) { return fnprepatch_171.call(this, InFile, bSilent) }; } catch (e) {};
+try { let fnprepatch_172 = SourceControlHelpers.prototype.CopyFile;SourceControlHelpers.prototype.CopyFile = function (InSourceFile, InDestFile, bSilent = false) { return fnprepatch_172.call(this, InSourceFile, InDestFile, bSilent) }; } catch (e) {};
+try { let fnprepatch_173 = SourceControlHelpers.prototype.CheckOutOrAddFile;SourceControlHelpers.prototype.CheckOutOrAddFile = function (InFile, bSilent = false) { return fnprepatch_173.call(this, InFile, bSilent) }; } catch (e) {};
+try { let fnprepatch_174 = SourceControlHelpers.prototype.CheckOutFiles;SourceControlHelpers.prototype.CheckOutFiles = function (InFiles, bSilent = false) { return fnprepatch_174.call(this, InFiles, bSilent) }; } catch (e) {};
+try { let fnprepatch_175 = SourceControlHelpers.prototype.CheckOutFile;SourceControlHelpers.prototype.CheckOutFile = function (InFile, bSilent = false) { return fnprepatch_175.call(this, InFile, bSilent) }; } catch (e) {};
+try { let fnprepatch_176 = SourceControlHelpers.prototype.CheckInFiles;SourceControlHelpers.prototype.CheckInFiles = function (InFiles, InDescription, bSilent = false) { return fnprepatch_176.call(this, InFiles, InDescription, bSilent) }; } catch (e) {};
+try { let fnprepatch_177 = SourceControlHelpers.prototype.CheckInFile;SourceControlHelpers.prototype.CheckInFile = function (InFile, InDescription, bSilent = false) { return fnprepatch_177.call(this, InFile, InDescription, bSilent) }; } catch (e) {};
+try { let fnprepatch_178 = SkinnedMeshComponent.prototype.SetSkeletalMesh;SkinnedMeshComponent.prototype.SetSkeletalMesh = function (NewMesh, bReinitPose = true) { return fnprepatch_178.call(this, NewMesh, bReinitPose) }; } catch (e) {};
+try { let fnprepatch_179 = SkinnedMeshComponent.prototype.SetPhysicsAsset;SkinnedMeshComponent.prototype.SetPhysicsAsset = function (NewPhysicsAsset, bForceReInit = false) { return fnprepatch_179.call(this, NewPhysicsAsset, bForceReInit) }; } catch (e) {};
+try { let fnprepatch_180 = SkinnedMeshComponent.prototype.SetMasterPoseComponent;SkinnedMeshComponent.prototype.SetMasterPoseComponent = function (NewMasterBoneComponent, bForceUpdate = false) { return fnprepatch_180.call(this, NewMasterBoneComponent, bForceUpdate) }; } catch (e) {};
+try { let fnprepatch_181 = SkinnedMeshComponent.prototype.GetDeltaTransformFromRefPose;SkinnedMeshComponent.prototype.GetDeltaTransformFromRefPose = function (BoneName, BaseName = "None") { return fnprepatch_181.call(this, BoneName, BaseName) }; } catch (e) {};
+try { let fnprepatch_182 = SkinnedMeshComponent.prototype.FindClosestBone_K2;SkinnedMeshComponent.prototype.FindClosestBone_K2 = function (TestLocation, BoneLocation, IgnoreScale = 0, bRequirePhysicsAsset = false) { return fnprepatch_182.call(this, TestLocation, BoneLocation, IgnoreScale, bRequirePhysicsAsset) }; } catch (e) {};
 try { SkinnedMeshComponent.prototype.SetVertexColorOverride = SkinnedMeshComponent.prototype.SetVertexColorOverride_LinearColor; } catch (e) {};
 try { SkinnedMeshComponent.prototype.FindClosestBone = SkinnedMeshComponent.prototype.FindClosestBone_K2; } catch (e) {};
-try { let fnprepatch_182 = SkeletalMeshComponent.prototype.UnbindClothFromMasterPoseComponent;SkeletalMeshComponent.prototype.UnbindClothFromMasterPoseComponent = function (bRestoreSimulationSpace = true) { return fnprepatch_182.call(this, bRestoreSimulationSpace) }; } catch (e) {};
-try { let fnprepatch_183 = SkeletalMeshComponent.prototype.SetPosition;SkeletalMeshComponent.prototype.SetPosition = function (InPos, bFireNotifies = true) { return fnprepatch_183.call(this, InPos, bFireNotifies) }; } catch (e) {};
-try { let fnprepatch_184 = SkeletalMeshComponent.prototype.SetNotifyRigidBodyCollisionBelow;SkeletalMeshComponent.prototype.SetNotifyRigidBodyCollisionBelow = function (bNewNotifyRigidBodyCollision, BoneName = "None", bIncludeSelf = true) { return fnprepatch_184.call(this, bNewNotifyRigidBodyCollision, BoneName, bIncludeSelf) }; } catch (e) {};
-try { let fnprepatch_185 = SkeletalMeshComponent.prototype.SetMorphTarget;SkeletalMeshComponent.prototype.SetMorphTarget = function (MorphTargetName, Value, bRemoveZeroWeight = true) { return fnprepatch_185.call(this, MorphTargetName, Value, bRemoveZeroWeight) }; } catch (e) {};
-try { let fnprepatch_186 = SkeletalMeshComponent.prototype.SetEnableGravityOnAllBodiesBelow;SkeletalMeshComponent.prototype.SetEnableGravityOnAllBodiesBelow = function (bEnableGravity, BoneName, bIncludeSelf = true) { return fnprepatch_186.call(this, bEnableGravity, BoneName, bIncludeSelf) }; } catch (e) {};
-try { let fnprepatch_187 = SkeletalMeshComponent.prototype.SetConstraintProfileForAll;SkeletalMeshComponent.prototype.SetConstraintProfileForAll = function (ProfileName, bDefaultIfNotFound = false) { return fnprepatch_187.call(this, ProfileName, bDefaultIfNotFound) }; } catch (e) {};
-try { let fnprepatch_188 = SkeletalMeshComponent.prototype.SetConstraintProfile;SkeletalMeshComponent.prototype.SetConstraintProfile = function (JointName, ProfileName, bDefaultIfNotFound = false) { return fnprepatch_188.call(this, JointName, ProfileName, bDefaultIfNotFound) }; } catch (e) {};
-try { let fnprepatch_189 = SkeletalMeshComponent.prototype.SetBodyNotifyRigidBodyCollision;SkeletalMeshComponent.prototype.SetBodyNotifyRigidBodyCollision = function (bNewNotifyRigidBodyCollision, BoneName = "None") { return fnprepatch_189.call(this, bNewNotifyRigidBodyCollision, BoneName) }; } catch (e) {};
-try { let fnprepatch_190 = SkeletalMeshComponent.prototype.SetAllMotorsAngularVelocityDrive;SkeletalMeshComponent.prototype.SetAllMotorsAngularVelocityDrive = function (bEnableSwingDrive, bEnableTwistDrive, bSkipCustomPhysicsType = false) { return fnprepatch_190.call(this, bEnableSwingDrive, bEnableTwistDrive, bSkipCustomPhysicsType) }; } catch (e) {};
-try { let fnprepatch_191 = SkeletalMeshComponent.prototype.SetAllMotorsAngularPositionDrive;SkeletalMeshComponent.prototype.SetAllMotorsAngularPositionDrive = function (bEnableSwingDrive, bEnableTwistDrive, bSkipCustomPhysicsType = false) { return fnprepatch_191.call(this, bEnableSwingDrive, bEnableTwistDrive, bSkipCustomPhysicsType) }; } catch (e) {};
-try { let fnprepatch_192 = SkeletalMeshComponent.prototype.SetAllMotorsAngularDriveParams;SkeletalMeshComponent.prototype.SetAllMotorsAngularDriveParams = function (InSpring, InDamping, InForceLimit, bSkipCustomPhysicsType = false) { return fnprepatch_192.call(this, InSpring, InDamping, InForceLimit, bSkipCustomPhysicsType) }; } catch (e) {};
-try { let fnprepatch_193 = SkeletalMeshComponent.prototype.SetAllBodiesPhysicsBlendWeight;SkeletalMeshComponent.prototype.SetAllBodiesPhysicsBlendWeight = function (PhysicsBlendWeight, bSkipCustomPhysicsType = false) { return fnprepatch_193.call(this, PhysicsBlendWeight, bSkipCustomPhysicsType) }; } catch (e) {};
-try { let fnprepatch_194 = SkeletalMeshComponent.prototype.SetAllBodiesBelowSimulatePhysics;SkeletalMeshComponent.prototype.SetAllBodiesBelowSimulatePhysics = function (InBoneName, bNewSimulate, bIncludeSelf = true) { return fnprepatch_194.call(this, InBoneName, bNewSimulate, bIncludeSelf) }; } catch (e) {};
-try { let fnprepatch_195 = SkeletalMeshComponent.prototype.SetAllBodiesBelowPhysicsBlendWeight;SkeletalMeshComponent.prototype.SetAllBodiesBelowPhysicsBlendWeight = function (InBoneName, PhysicsBlendWeight, bSkipCustomPhysicsType = false, bIncludeSelf = true) { return fnprepatch_195.call(this, InBoneName, PhysicsBlendWeight, bSkipCustomPhysicsType, bIncludeSelf) }; } catch (e) {};
-try { let fnprepatch_196 = SkeletalMeshComponent.prototype.ResetAnimInstanceDynamics;SkeletalMeshComponent.prototype.ResetAnimInstanceDynamics = function (InTeleportType = "ResetPhysics") { return fnprepatch_196.call(this, InTeleportType) }; } catch (e) {};
-try { let fnprepatch_197 = SkeletalMeshComponent.prototype.OverrideAnimationData;SkeletalMeshComponent.prototype.OverrideAnimationData = function (InAnimToPlay, bIsLooping = true, bIsPlaying = true, Position = 0, PlayRate = 1) { return fnprepatch_197.call(this, InAnimToPlay, bIsLooping, bIsPlaying, Position, PlayRate) }; } catch (e) {};
-try { let fnprepatch_198 = SkeletalMeshComponent.prototype.GetBoneMass;SkeletalMeshComponent.prototype.GetBoneMass = function (BoneName = "None", bScaleMass = true) { return fnprepatch_198.call(this, BoneName, bScaleMass) }; } catch (e) {};
-try { let fnprepatch_199 = SkeletalMeshComponent.prototype.AddImpulseToAllBodiesBelow;SkeletalMeshComponent.prototype.AddImpulseToAllBodiesBelow = function (Impulse, BoneName = "None", bVelChange = false, bIncludeSelf = true) { return fnprepatch_199.call(this, Impulse, BoneName, bVelChange, bIncludeSelf) }; } catch (e) {};
-try { let fnprepatch_200 = SkeletalMeshComponent.prototype.AddForceToAllBodiesBelow;SkeletalMeshComponent.prototype.AddForceToAllBodiesBelow = function (Force, BoneName = "None", bAccelChange = false, bIncludeSelf = true) { return fnprepatch_200.call(this, Force, BoneName, bAccelChange, bIncludeSelf) }; } catch (e) {};
-try { let fnprepatch_201 = SkeletalMeshComponent.prototype.AccumulateAllBodiesBelowPhysicsBlendWeight;SkeletalMeshComponent.prototype.AccumulateAllBodiesBelowPhysicsBlendWeight = function (InBoneName, AddPhysicsBlendWeight, bSkipCustomPhysicsType = false) { return fnprepatch_201.call(this, InBoneName, AddPhysicsBlendWeight, bSkipCustomPhysicsType) }; } catch (e) {};
+try { let fnprepatch_183 = SkeletalMeshComponent.prototype.UnbindClothFromMasterPoseComponent;SkeletalMeshComponent.prototype.UnbindClothFromMasterPoseComponent = function (bRestoreSimulationSpace = true) { return fnprepatch_183.call(this, bRestoreSimulationSpace) }; } catch (e) {};
+try { let fnprepatch_184 = SkeletalMeshComponent.prototype.SetPosition;SkeletalMeshComponent.prototype.SetPosition = function (InPos, bFireNotifies = true) { return fnprepatch_184.call(this, InPos, bFireNotifies) }; } catch (e) {};
+try { let fnprepatch_185 = SkeletalMeshComponent.prototype.SetNotifyRigidBodyCollisionBelow;SkeletalMeshComponent.prototype.SetNotifyRigidBodyCollisionBelow = function (bNewNotifyRigidBodyCollision, BoneName = "None", bIncludeSelf = true) { return fnprepatch_185.call(this, bNewNotifyRigidBodyCollision, BoneName, bIncludeSelf) }; } catch (e) {};
+try { let fnprepatch_186 = SkeletalMeshComponent.prototype.SetMorphTarget;SkeletalMeshComponent.prototype.SetMorphTarget = function (MorphTargetName, Value, bRemoveZeroWeight = true) { return fnprepatch_186.call(this, MorphTargetName, Value, bRemoveZeroWeight) }; } catch (e) {};
+try { let fnprepatch_187 = SkeletalMeshComponent.prototype.SetEnableGravityOnAllBodiesBelow;SkeletalMeshComponent.prototype.SetEnableGravityOnAllBodiesBelow = function (bEnableGravity, BoneName, bIncludeSelf = true) { return fnprepatch_187.call(this, bEnableGravity, BoneName, bIncludeSelf) }; } catch (e) {};
+try { let fnprepatch_188 = SkeletalMeshComponent.prototype.SetConstraintProfileForAll;SkeletalMeshComponent.prototype.SetConstraintProfileForAll = function (ProfileName, bDefaultIfNotFound = false) { return fnprepatch_188.call(this, ProfileName, bDefaultIfNotFound) }; } catch (e) {};
+try { let fnprepatch_189 = SkeletalMeshComponent.prototype.SetConstraintProfile;SkeletalMeshComponent.prototype.SetConstraintProfile = function (JointName, ProfileName, bDefaultIfNotFound = false) { return fnprepatch_189.call(this, JointName, ProfileName, bDefaultIfNotFound) }; } catch (e) {};
+try { let fnprepatch_190 = SkeletalMeshComponent.prototype.SetBodyNotifyRigidBodyCollision;SkeletalMeshComponent.prototype.SetBodyNotifyRigidBodyCollision = function (bNewNotifyRigidBodyCollision, BoneName = "None") { return fnprepatch_190.call(this, bNewNotifyRigidBodyCollision, BoneName) }; } catch (e) {};
+try { let fnprepatch_191 = SkeletalMeshComponent.prototype.SetAllMotorsAngularVelocityDrive;SkeletalMeshComponent.prototype.SetAllMotorsAngularVelocityDrive = function (bEnableSwingDrive, bEnableTwistDrive, bSkipCustomPhysicsType = false) { return fnprepatch_191.call(this, bEnableSwingDrive, bEnableTwistDrive, bSkipCustomPhysicsType) }; } catch (e) {};
+try { let fnprepatch_192 = SkeletalMeshComponent.prototype.SetAllMotorsAngularPositionDrive;SkeletalMeshComponent.prototype.SetAllMotorsAngularPositionDrive = function (bEnableSwingDrive, bEnableTwistDrive, bSkipCustomPhysicsType = false) { return fnprepatch_192.call(this, bEnableSwingDrive, bEnableTwistDrive, bSkipCustomPhysicsType) }; } catch (e) {};
+try { let fnprepatch_193 = SkeletalMeshComponent.prototype.SetAllMotorsAngularDriveParams;SkeletalMeshComponent.prototype.SetAllMotorsAngularDriveParams = function (InSpring, InDamping, InForceLimit, bSkipCustomPhysicsType = false) { return fnprepatch_193.call(this, InSpring, InDamping, InForceLimit, bSkipCustomPhysicsType) }; } catch (e) {};
+try { let fnprepatch_194 = SkeletalMeshComponent.prototype.SetAllBodiesPhysicsBlendWeight;SkeletalMeshComponent.prototype.SetAllBodiesPhysicsBlendWeight = function (PhysicsBlendWeight, bSkipCustomPhysicsType = false) { return fnprepatch_194.call(this, PhysicsBlendWeight, bSkipCustomPhysicsType) }; } catch (e) {};
+try { let fnprepatch_195 = SkeletalMeshComponent.prototype.SetAllBodiesBelowSimulatePhysics;SkeletalMeshComponent.prototype.SetAllBodiesBelowSimulatePhysics = function (InBoneName, bNewSimulate, bIncludeSelf = true) { return fnprepatch_195.call(this, InBoneName, bNewSimulate, bIncludeSelf) }; } catch (e) {};
+try { let fnprepatch_196 = SkeletalMeshComponent.prototype.SetAllBodiesBelowPhysicsBlendWeight;SkeletalMeshComponent.prototype.SetAllBodiesBelowPhysicsBlendWeight = function (InBoneName, PhysicsBlendWeight, bSkipCustomPhysicsType = false, bIncludeSelf = true) { return fnprepatch_196.call(this, InBoneName, PhysicsBlendWeight, bSkipCustomPhysicsType, bIncludeSelf) }; } catch (e) {};
+try { let fnprepatch_197 = SkeletalMeshComponent.prototype.ResetAnimInstanceDynamics;SkeletalMeshComponent.prototype.ResetAnimInstanceDynamics = function (InTeleportType = "ResetPhysics") { return fnprepatch_197.call(this, InTeleportType) }; } catch (e) {};
+try { let fnprepatch_198 = SkeletalMeshComponent.prototype.OverrideAnimationData;SkeletalMeshComponent.prototype.OverrideAnimationData = function (InAnimToPlay, bIsLooping = true, bIsPlaying = true, Position = 0, PlayRate = 1) { return fnprepatch_198.call(this, InAnimToPlay, bIsLooping, bIsPlaying, Position, PlayRate) }; } catch (e) {};
+try { let fnprepatch_199 = SkeletalMeshComponent.prototype.GetBoneMass;SkeletalMeshComponent.prototype.GetBoneMass = function (BoneName = "None", bScaleMass = true) { return fnprepatch_199.call(this, BoneName, bScaleMass) }; } catch (e) {};
+try { let fnprepatch_200 = SkeletalMeshComponent.prototype.AddImpulseToAllBodiesBelow;SkeletalMeshComponent.prototype.AddImpulseToAllBodiesBelow = function (Impulse, BoneName = "None", bVelChange = false, bIncludeSelf = true) { return fnprepatch_200.call(this, Impulse, BoneName, bVelChange, bIncludeSelf) }; } catch (e) {};
+try { let fnprepatch_201 = SkeletalMeshComponent.prototype.AddForceToAllBodiesBelow;SkeletalMeshComponent.prototype.AddForceToAllBodiesBelow = function (Force, BoneName = "None", bAccelChange = false, bIncludeSelf = true) { return fnprepatch_201.call(this, Force, BoneName, bAccelChange, bIncludeSelf) }; } catch (e) {};
+try { let fnprepatch_202 = SkeletalMeshComponent.prototype.AccumulateAllBodiesBelowPhysicsBlendWeight;SkeletalMeshComponent.prototype.AccumulateAllBodiesBelowPhysicsBlendWeight = function (InBoneName, AddPhysicsBlendWeight, bSkipCustomPhysicsType = false) { return fnprepatch_202.call(this, InBoneName, AddPhysicsBlendWeight, bSkipCustomPhysicsType) }; } catch (e) {};
 try { SkeletalMeshComponent.prototype.GetDirectionBetweenSockets = SkeletalMeshComponent.prototype.K2_DirectionBetweenSockets; } catch (e) {};
 try { SkeletalMeshComponent.prototype.GetDistanceBetweenTwoSockets = SkeletalMeshComponent.prototype.K2_DistanceBetweenTwoSocketsAndMapRange; } catch (e) {};
-try { SkeletalMeshComponent.prototype.SetAnimInstanceClass = SkeletalMeshComponent.prototype.K2_SetAnimInstanceClass; } catch (e) {};
+try { SkeletalMeshComponent.prototype.SetAnimInstanceClass = SkeletalMeshComponent.prototype.SetAnimClass; } catch (e) {};
 try { SkeletalMeshComponent.prototype.GetClosestPointOnPhysicsAsset = SkeletalMeshComponent.prototype.K2_GetClosestPointOnPhysicsAsset; } catch (e) {};
-try { let fnprepatch_202 = AnimInstance.prototype.StopSlotAnimation;AnimInstance.prototype.StopSlotAnimation = function (InBlendOutTime = 0.25, SlotNodeName = "None") { return fnprepatch_202.call(this, InBlendOutTime, SlotNodeName) }; } catch (e) {};
-try { let fnprepatch_203 = AnimInstance.prototype.PlaySlotAnimationAsDynamicMontage;AnimInstance.prototype.PlaySlotAnimationAsDynamicMontage = function (Asset, SlotNodeName, BlendInTime = 0.25, BlendOutTime = 0.25, InPlayRate = 1, LoopCount = 1, BlendOutTriggerTime = -1, InTimeToStartMontageAt = 0) { return fnprepatch_203.call(this, Asset, SlotNodeName, BlendInTime, BlendOutTime, InPlayRate, LoopCount, BlendOutTriggerTime, InTimeToStartMontageAt) }; } catch (e) {};
-try { let fnprepatch_204 = AnimInstance.prototype.PlaySlotAnimation;AnimInstance.prototype.PlaySlotAnimation = function (Asset, SlotNodeName, BlendInTime = 0.25, BlendOutTime = 0.25, InPlayRate = 1, LoopCount = 1) { return fnprepatch_204.call(this, Asset, SlotNodeName, BlendInTime, BlendOutTime, InPlayRate, LoopCount) }; } catch (e) {};
-try { let fnprepatch_205 = AnimInstance.prototype.Montage_Stop;AnimInstance.prototype.Montage_Stop = function (InBlendOutTime, Montage = undefined) { return fnprepatch_205.call(this, InBlendOutTime, Montage) }; } catch (e) {};
-try { let fnprepatch_206 = AnimInstance.prototype.Montage_SetPlayRate;AnimInstance.prototype.Montage_SetPlayRate = function (Montage, NewPlayRate = 1) { return fnprepatch_206.call(this, Montage, NewPlayRate) }; } catch (e) {};
-try { let fnprepatch_207 = AnimInstance.prototype.Montage_SetNextSection;AnimInstance.prototype.Montage_SetNextSection = function (SectionNameToChange, NextSection, Montage = undefined) { return fnprepatch_207.call(this, SectionNameToChange, NextSection, Montage) }; } catch (e) {};
-try { let fnprepatch_208 = AnimInstance.prototype.Montage_Play;AnimInstance.prototype.Montage_Play = function (MontageToPlay, InPlayRate = 1, ReturnValueType = "MontageLength", InTimeToStartMontageAt = 0, bStopAllMontages = true) { return fnprepatch_208.call(this, MontageToPlay, InPlayRate, ReturnValueType, InTimeToStartMontageAt, bStopAllMontages) }; } catch (e) {};
-try { let fnprepatch_209 = AnimInstance.prototype.Montage_Pause;AnimInstance.prototype.Montage_Pause = function (Montage = undefined) { return fnprepatch_209.call(this, Montage) }; } catch (e) {};
-try { let fnprepatch_210 = AnimInstance.prototype.Montage_JumpToSectionsEnd;AnimInstance.prototype.Montage_JumpToSectionsEnd = function (SectionName, Montage = undefined) { return fnprepatch_210.call(this, SectionName, Montage) }; } catch (e) {};
-try { let fnprepatch_211 = AnimInstance.prototype.Montage_JumpToSection;AnimInstance.prototype.Montage_JumpToSection = function (SectionName, Montage = undefined) { return fnprepatch_211.call(this, SectionName, Montage) }; } catch (e) {};
-try { let fnprepatch_212 = AnimInstance.prototype.Montage_GetCurrentSection;AnimInstance.prototype.Montage_GetCurrentSection = function (Montage = undefined) { return fnprepatch_212.call(this, Montage) }; } catch (e) {};
-try { let fnprepatch_213 = AnimInstance.prototype.IsSyncGroupBetweenMarkers;AnimInstance.prototype.IsSyncGroupBetweenMarkers = function (InSyncGroupName, PreviousMarker, NextMarker, bRespectMarkerOrder = true) { return fnprepatch_213.call(this, InSyncGroupName, PreviousMarker, NextMarker, bRespectMarkerOrder) }; } catch (e) {};
+try { let fnprepatch_203 = AnimInstance.prototype.StopSlotAnimation;AnimInstance.prototype.StopSlotAnimation = function (InBlendOutTime = 0.25, SlotNodeName = "None") { return fnprepatch_203.call(this, InBlendOutTime, SlotNodeName) }; } catch (e) {};
+try { let fnprepatch_204 = AnimInstance.prototype.PlaySlotAnimationAsDynamicMontage;AnimInstance.prototype.PlaySlotAnimationAsDynamicMontage = function (Asset, SlotNodeName, BlendInTime = 0.25, BlendOutTime = 0.25, InPlayRate = 1, LoopCount = 1, BlendOutTriggerTime = -1, InTimeToStartMontageAt = 0) { return fnprepatch_204.call(this, Asset, SlotNodeName, BlendInTime, BlendOutTime, InPlayRate, LoopCount, BlendOutTriggerTime, InTimeToStartMontageAt) }; } catch (e) {};
+try { let fnprepatch_205 = AnimInstance.prototype.PlaySlotAnimation;AnimInstance.prototype.PlaySlotAnimation = function (Asset, SlotNodeName, BlendInTime = 0.25, BlendOutTime = 0.25, InPlayRate = 1, LoopCount = 1) { return fnprepatch_205.call(this, Asset, SlotNodeName, BlendInTime, BlendOutTime, InPlayRate, LoopCount) }; } catch (e) {};
+try { let fnprepatch_206 = AnimInstance.prototype.Montage_Stop;AnimInstance.prototype.Montage_Stop = function (InBlendOutTime, Montage = undefined) { return fnprepatch_206.call(this, InBlendOutTime, Montage) }; } catch (e) {};
+try { let fnprepatch_207 = AnimInstance.prototype.Montage_SetPlayRate;AnimInstance.prototype.Montage_SetPlayRate = function (Montage, NewPlayRate = 1) { return fnprepatch_207.call(this, Montage, NewPlayRate) }; } catch (e) {};
+try { let fnprepatch_208 = AnimInstance.prototype.Montage_SetNextSection;AnimInstance.prototype.Montage_SetNextSection = function (SectionNameToChange, NextSection, Montage = undefined) { return fnprepatch_208.call(this, SectionNameToChange, NextSection, Montage) }; } catch (e) {};
+try { let fnprepatch_209 = AnimInstance.prototype.Montage_Play;AnimInstance.prototype.Montage_Play = function (MontageToPlay, InPlayRate = 1, ReturnValueType = "MontageLength", InTimeToStartMontageAt = 0, bStopAllMontages = true) { return fnprepatch_209.call(this, MontageToPlay, InPlayRate, ReturnValueType, InTimeToStartMontageAt, bStopAllMontages) }; } catch (e) {};
+try { let fnprepatch_210 = AnimInstance.prototype.Montage_Pause;AnimInstance.prototype.Montage_Pause = function (Montage = undefined) { return fnprepatch_210.call(this, Montage) }; } catch (e) {};
+try { let fnprepatch_211 = AnimInstance.prototype.Montage_JumpToSectionsEnd;AnimInstance.prototype.Montage_JumpToSectionsEnd = function (SectionName, Montage = undefined) { return fnprepatch_211.call(this, SectionName, Montage) }; } catch (e) {};
+try { let fnprepatch_212 = AnimInstance.prototype.Montage_JumpToSection;AnimInstance.prototype.Montage_JumpToSection = function (SectionName, Montage = undefined) { return fnprepatch_212.call(this, SectionName, Montage) }; } catch (e) {};
+try { let fnprepatch_213 = AnimInstance.prototype.Montage_GetCurrentSection;AnimInstance.prototype.Montage_GetCurrentSection = function (Montage = undefined) { return fnprepatch_213.call(this, Montage) }; } catch (e) {};
+try { let fnprepatch_214 = AnimInstance.prototype.IsSyncGroupBetweenMarkers;AnimInstance.prototype.IsSyncGroupBetweenMarkers = function (InSyncGroupName, PreviousMarker, NextMarker, bRespectMarkerOrder = true) { return fnprepatch_214.call(this, InSyncGroupName, PreviousMarker, NextMarker, bRespectMarkerOrder) }; } catch (e) {};
 try { AnimInstance.prototype.GetTransitionTimeElapsed = AnimInstance.prototype.GetInstanceTransitionTimeElapsedFraction; } catch (e) {};
 try { AnimInstance.prototype.GetTransitionTimeElapsed = AnimInstance.prototype.GetInstanceTransitionTimeElapsed; } catch (e) {};
 try { AnimInstance.prototype.GetTransitionCrossfadeDuration = AnimInstance.prototype.GetInstanceTransitionCrossfadeDuration; } catch (e) {};
@@ -472,25 +530,34 @@ try { AnimInstance.prototype.TimeRemaining = AnimInstance.prototype.GetInstanceA
 try { AnimInstance.prototype.CurrentTime = AnimInstance.prototype.GetInstanceAssetPlayerTimeFraction; } catch (e) {};
 try { AnimInstance.prototype.CurrentTime = AnimInstance.prototype.GetInstanceAssetPlayerTime; } catch (e) {};
 try { AnimInstance.prototype.Length = AnimInstance.prototype.GetInstanceAssetPlayerLength; } catch (e) {};
-try { let fnprepatch_214 = AnimSingleNodeInstance.prototype.SetPositionWithPreviousTime;AnimSingleNodeInstance.prototype.SetPositionWithPreviousTime = function (InPosition, InPreviousTime, bFireNotifies = true) { return fnprepatch_214.call(this, InPosition, InPreviousTime, bFireNotifies) }; } catch (e) {};
-try { let fnprepatch_215 = AnimSingleNodeInstance.prototype.SetPosition;AnimSingleNodeInstance.prototype.SetPosition = function (InPosition, bFireNotifies = true) { return fnprepatch_215.call(this, InPosition, bFireNotifies) }; } catch (e) {};
-try { let fnprepatch_216 = AnimSingleNodeInstance.prototype.SetAnimationAsset;AnimSingleNodeInstance.prototype.SetAnimationAsset = function (NewAsset, bIsLooping = true, InPlayRate = 1) { return fnprepatch_216.call(this, NewAsset, bIsLooping, InPlayRate) }; } catch (e) {};
-try { let fnprepatch_217 = AnimSingleNodeInstance.prototype.PlayAnim;AnimSingleNodeInstance.prototype.PlayAnim = function (bIsLooping = false, InPlayRate = 1, InStartPosition = 0) { return fnprepatch_217.call(this, bIsLooping, InPlayRate, InStartPosition) }; } catch (e) {};
+try { let fnprepatch_215 = AnimSingleNodeInstance.prototype.SetPositionWithPreviousTime;AnimSingleNodeInstance.prototype.SetPositionWithPreviousTime = function (InPosition, InPreviousTime, bFireNotifies = true) { return fnprepatch_215.call(this, InPosition, InPreviousTime, bFireNotifies) }; } catch (e) {};
+try { let fnprepatch_216 = AnimSingleNodeInstance.prototype.SetPosition;AnimSingleNodeInstance.prototype.SetPosition = function (InPosition, bFireNotifies = true) { return fnprepatch_216.call(this, InPosition, bFireNotifies) }; } catch (e) {};
+try { let fnprepatch_217 = AnimSingleNodeInstance.prototype.SetAnimationAsset;AnimSingleNodeInstance.prototype.SetAnimationAsset = function (NewAsset, bIsLooping = true, InPlayRate = 1) { return fnprepatch_217.call(this, NewAsset, bIsLooping, InPlayRate) }; } catch (e) {};
+try { let fnprepatch_218 = AnimSingleNodeInstance.prototype.PlayAnim;AnimSingleNodeInstance.prototype.PlayAnim = function (bIsLooping = false, InPlayRate = 1, InStartPosition = 0) { return fnprepatch_218.call(this, bIsLooping, InPlayRate, InStartPosition) }; } catch (e) {};
+try { let fnprepatch_219 = KismetAnimationLibrary.prototype.K2_EndProfilingTimer;KismetAnimationLibrary.prototype.K2_EndProfilingTimer = function (bLog = true, LogPrefix) { return fnprepatch_219.call(this, bLog, LogPrefix) }; } catch (e) {};
 try { KismetAnimationLibrary.prototype.TwoBoneIKFunction = KismetAnimationLibrary.prototype.K2_TwoBoneIK; } catch (e) {};
 try { KismetAnimationLibrary.TwoBoneIKFunction = KismetAnimationLibrary.K2_TwoBoneIK; } catch (e) {};
+try { KismetAnimationLibrary.prototype.StartProfilingTimer = KismetAnimationLibrary.prototype.K2_StartProfilingTimer; } catch (e) {};
+try { KismetAnimationLibrary.StartProfilingTimer = KismetAnimationLibrary.K2_StartProfilingTimer; } catch (e) {};
 try { KismetAnimationLibrary.prototype.MakePerlinNoiseVectorandRemap = KismetAnimationLibrary.prototype.K2_MakePerlinNoiseVectorAndRemap; } catch (e) {};
 try { KismetAnimationLibrary.MakePerlinNoiseVectorandRemap = KismetAnimationLibrary.K2_MakePerlinNoiseVectorAndRemap; } catch (e) {};
 try { KismetAnimationLibrary.prototype.MakePerlinNoiseandRemap = KismetAnimationLibrary.prototype.K2_MakePerlinNoiseAndRemap; } catch (e) {};
 try { KismetAnimationLibrary.MakePerlinNoiseandRemap = KismetAnimationLibrary.K2_MakePerlinNoiseAndRemap; } catch (e) {};
 try { KismetAnimationLibrary.prototype.LookAtFunction = KismetAnimationLibrary.prototype.K2_LookAt; } catch (e) {};
 try { KismetAnimationLibrary.LookAtFunction = KismetAnimationLibrary.K2_LookAt; } catch (e) {};
+try { KismetAnimationLibrary.prototype.EndProfilingTimer = KismetAnimationLibrary.prototype.K2_EndProfilingTimer; } catch (e) {};
+try { KismetAnimationLibrary.EndProfilingTimer = KismetAnimationLibrary.K2_EndProfilingTimer; } catch (e) {};
 try { KismetAnimationLibrary.prototype.GetDistanceBetweenTwoSockets = KismetAnimationLibrary.prototype.K2_DistanceBetweenTwoSocketsAndMapRange; } catch (e) {};
 try { KismetAnimationLibrary.GetDistanceBetweenTwoSockets = KismetAnimationLibrary.K2_DistanceBetweenTwoSocketsAndMapRange; } catch (e) {};
 try { KismetAnimationLibrary.prototype.GetDirectionBetweenSockets = KismetAnimationLibrary.prototype.K2_DirectionBetweenSockets; } catch (e) {};
 try { KismetAnimationLibrary.GetDirectionBetweenSockets = KismetAnimationLibrary.K2_DirectionBetweenSockets; } catch (e) {};
-try { let fnprepatch_218 = PlayMontageCallbackProxy.prototype.CreateProxyObjectForPlayMontage;PlayMontageCallbackProxy.prototype.CreateProxyObjectForPlayMontage = function (InSkeletalMeshComponent, MontageToPlay, PlayRate = 1, StartingPosition = 0, StartingSection = "None") { return fnprepatch_218.call(this, InSkeletalMeshComponent, MontageToPlay, PlayRate, StartingPosition, StartingSection) }; } catch (e) {};
+try { KismetAnimationLibrary.prototype.CalculateVelocityFromSockets = KismetAnimationLibrary.prototype.K2_CalculateVelocityFromSockets; } catch (e) {};
+try { KismetAnimationLibrary.CalculateVelocityFromSockets = KismetAnimationLibrary.K2_CalculateVelocityFromSockets; } catch (e) {};
+try { KismetAnimationLibrary.prototype.CalculateVelocityFromPositionHistory = KismetAnimationLibrary.prototype.K2_CalculateVelocityFromPositionHistory; } catch (e) {};
+try { KismetAnimationLibrary.CalculateVelocityFromPositionHistory = KismetAnimationLibrary.K2_CalculateVelocityFromPositionHistory; } catch (e) {};
+try { let fnprepatch_220 = PlayMontageCallbackProxy.prototype.CreateProxyObjectForPlayMontage;PlayMontageCallbackProxy.prototype.CreateProxyObjectForPlayMontage = function (InSkeletalMeshComponent, MontageToPlay, PlayRate = 1, StartingPosition = 0, StartingSection = "None") { return fnprepatch_220.call(this, InSkeletalMeshComponent, MontageToPlay, PlayRate, StartingPosition, StartingSection) }; } catch (e) {};
 try { MovieSceneTransformOrigin.prototype.GetTransformOrigin = MovieSceneTransformOrigin.prototype.BP_GetTransformOrigin; } catch (e) {};
-try { let fnprepatch_219 = TimeManagementBlueprintLibrary.prototype.Conv_TimecodeToString;TimeManagementBlueprintLibrary.prototype.Conv_TimecodeToString = function (InTimecode, bForceSignDisplay = false) { return fnprepatch_219.call(this, InTimecode, bForceSignDisplay) }; } catch (e) {};
+try { let fnprepatch_221 = TimeManagementBlueprintLibrary.prototype.Conv_TimecodeToString;TimeManagementBlueprintLibrary.prototype.Conv_TimecodeToString = function (InTimecode, bForceSignDisplay = false) { return fnprepatch_221.call(this, InTimecode, bForceSignDisplay) }; } catch (e) {};
 try { TimeManagementBlueprintLibrary.prototype.TransformFrameTime = TimeManagementBlueprintLibrary.prototype.TransformTime; } catch (e) {};
 try { TimeManagementBlueprintLibrary.TransformFrameTime = TimeManagementBlueprintLibrary.TransformTime; } catch (e) {};
 try { TimeManagementBlueprintLibrary.prototype.SnapFrameTime = TimeManagementBlueprintLibrary.prototype.SnapFrameTimeToRate; } catch (e) {};
@@ -507,7 +574,7 @@ try { TimeManagementBlueprintLibrary.prototype.FrameRatetoSeconds = TimeManageme
 try { TimeManagementBlueprintLibrary.FrameRatetoSeconds = TimeManagementBlueprintLibrary.Conv_FrameRateToSeconds; } catch (e) {};
 try { TimeManagementBlueprintLibrary.prototype.FrameNumbertoInteger = TimeManagementBlueprintLibrary.prototype.Conv_FrameNumberToInteger; } catch (e) {};
 try { TimeManagementBlueprintLibrary.FrameNumbertoInteger = TimeManagementBlueprintLibrary.Conv_FrameNumberToInteger; } catch (e) {};
-try { let fnprepatch_220 = MovieSceneSequencePlayer.prototype.PlayLooping;MovieSceneSequencePlayer.prototype.PlayLooping = function (NumLoops = -1) { return fnprepatch_220.call(this, NumLoops) }; } catch (e) {};
+try { let fnprepatch_222 = MovieSceneSequencePlayer.prototype.PlayLooping;MovieSceneSequencePlayer.prototype.PlayLooping = function (NumLoops = -1) { return fnprepatch_222.call(this, NumLoops) }; } catch (e) {};
 try { MovieSceneSequencePlayer.prototype.SetPlayRange = MovieSceneSequencePlayer.prototype.SetTimeRange; } catch (e) {};
 try { MovieSceneSequencePlayer.prototype.SetPlayRange = MovieSceneSequencePlayer.prototype.SetFrameRange; } catch (e) {};
 try { MovieSceneSequencePlayer.prototype.ScrubTo = MovieSceneSequencePlayer.prototype.ScrubToSeconds; } catch (e) {};
@@ -516,36 +583,38 @@ try { MovieSceneSequencePlayer.prototype.PlayTo = MovieSceneSequencePlayer.proto
 try { MovieSceneSequencePlayer.prototype.PlayTo = MovieSceneSequencePlayer.prototype.PlayToFrame; } catch (e) {};
 try { MovieSceneSequencePlayer.prototype.JumpTo = MovieSceneSequencePlayer.prototype.JumpToSeconds; } catch (e) {};
 try { MovieSceneSequencePlayer.prototype.JumpTo = MovieSceneSequencePlayer.prototype.JumpToFrame; } catch (e) {};
-try { let fnprepatch_221 = LevelSequenceActor.prototype.SetBinding;LevelSequenceActor.prototype.SetBinding = function (Binding, Actors, bAllowBindingsFromAsset = false) { return fnprepatch_221.call(this, Binding, Actors, bAllowBindingsFromAsset) }; } catch (e) {};
-try { let fnprepatch_222 = LevelSequenceActor.prototype.GetSequence;LevelSequenceActor.prototype.GetSequence = function (bLoad = false, bInitializePlayer = false) { return fnprepatch_222.call(this, bLoad, bInitializePlayer) }; } catch (e) {};
-try { let fnprepatch_223 = LevelSequenceActor.prototype.AddBinding;LevelSequenceActor.prototype.AddBinding = function (Binding, Actor, bAllowBindingsFromAsset = false) { return fnprepatch_223.call(this, Binding, Actor, bAllowBindingsFromAsset) }; } catch (e) {};
+try { let fnprepatch_223 = LevelSequenceActor.prototype.SetBinding;LevelSequenceActor.prototype.SetBinding = function (Binding, Actors, bAllowBindingsFromAsset = false) { return fnprepatch_223.call(this, Binding, Actors, bAllowBindingsFromAsset) }; } catch (e) {};
+try { let fnprepatch_224 = LevelSequenceActor.prototype.AddBinding;LevelSequenceActor.prototype.AddBinding = function (Binding, Actor, bAllowBindingsFromAsset = false) { return fnprepatch_224.call(this, Binding, Actor, bAllowBindingsFromAsset) }; } catch (e) {};
 try { ActorGroupingUtils.prototype.GetActorGroupingUtils = ActorGroupingUtils.prototype.Get; } catch (e) {};
 try { ActorGroupingUtils.GetActorGroupingUtils = ActorGroupingUtils.Get; } catch (e) {};
-try { let fnprepatch_224 = EditorLevelUtils.prototype.MoveSelectedActorsToLevel;EditorLevelUtils.prototype.MoveSelectedActorsToLevel = function (DestLevel, bWarnAboutReferences = true) { return fnprepatch_224.call(this, DestLevel, bWarnAboutReferences) }; } catch (e) {};
-try { let fnprepatch_225 = EditorLevelUtils.prototype.MoveActorsToLevel;EditorLevelUtils.prototype.MoveActorsToLevel = function (ActorsToMove, DestStreamingLevel, bWarnAboutReferences = true) { return fnprepatch_225.call(this, ActorsToMove, DestStreamingLevel, bWarnAboutReferences) }; } catch (e) {};
-try { let fnprepatch_226 = EditorLevelUtils.prototype.CreateNewStreamingLevel;EditorLevelUtils.prototype.CreateNewStreamingLevel = function (LevelStreamingClass, NewLevelPath, bMoveSelectedActorsIntoNewLevel = false) { return fnprepatch_226.call(this, LevelStreamingClass, NewLevelPath, bMoveSelectedActorsIntoNewLevel) }; } catch (e) {};
+try { let fnprepatch_225 = EditorLevelUtils.prototype.SetLevelVisibility;EditorLevelUtils.prototype.SetLevelVisibility = function (Level, bShouldBeVisible, bForceLayersVisible, ModifyMode = "ModifyOnChange") { return fnprepatch_225.call(this, Level, bShouldBeVisible, bForceLayersVisible, ModifyMode) }; } catch (e) {};
+try { let fnprepatch_226 = EditorLevelUtils.prototype.MoveSelectedActorsToLevel;EditorLevelUtils.prototype.MoveSelectedActorsToLevel = function (DestLevel, bWarnAboutReferences = true) { return fnprepatch_226.call(this, DestLevel, bWarnAboutReferences) }; } catch (e) {};
+try { let fnprepatch_227 = EditorLevelUtils.prototype.MoveActorsToLevel;EditorLevelUtils.prototype.MoveActorsToLevel = function (ActorsToMove, DestStreamingLevel, bWarnAboutReferences = true) { return fnprepatch_227.call(this, ActorsToMove, DestStreamingLevel, bWarnAboutReferences) }; } catch (e) {};
+try { let fnprepatch_228 = EditorLevelUtils.prototype.CreateNewStreamingLevel;EditorLevelUtils.prototype.CreateNewStreamingLevel = function (LevelStreamingClass, NewLevelPath, bMoveSelectedActorsIntoNewLevel = false) { return fnprepatch_228.call(this, LevelStreamingClass, NewLevelPath, bMoveSelectedActorsIntoNewLevel) }; } catch (e) {};
 try { AssetImportData.prototype.GetFirstFilename = AssetImportData.prototype.K2_GetFirstFilename; } catch (e) {};
 try { AssetImportData.prototype.ExtractFilenames = AssetImportData.prototype.K2_ExtractFilenames; } catch (e) {};
-try { let fnprepatch_227 = MaterialInterface.prototype.SetForceMipLevelsToBeResident;MaterialInterface.prototype.SetForceMipLevelsToBeResident = function (OverrideForceMiplevelsToBeResident, bForceMiplevelsToBeResidentValue, ForceDuration, CinematicTextureGroups = 0) { return fnprepatch_227.call(this, OverrideForceMiplevelsToBeResident, bForceMiplevelsToBeResidentValue, ForceDuration, CinematicTextureGroups) }; } catch (e) {};
-try { let fnprepatch_228 = InstancedStaticMeshComponent.prototype.UpdateInstanceTransform;InstancedStaticMeshComponent.prototype.UpdateInstanceTransform = function (InstanceIndex, NewInstanceTransform, bWorldSpace = false, bMarkRenderStateDirty = false, bTeleport = false) { return fnprepatch_228.call(this, InstanceIndex, NewInstanceTransform, bWorldSpace, bMarkRenderStateDirty, bTeleport) }; } catch (e) {};
-try { let fnprepatch_229 = InstancedStaticMeshComponent.prototype.GetInstanceTransform;InstancedStaticMeshComponent.prototype.GetInstanceTransform = function (InstanceIndex, OutInstanceTransform, bWorldSpace = false) { return fnprepatch_229.call(this, InstanceIndex, OutInstanceTransform, bWorldSpace) }; } catch (e) {};
-try { let fnprepatch_230 = InstancedStaticMeshComponent.prototype.GetInstancesOverlappingSphere;InstancedStaticMeshComponent.prototype.GetInstancesOverlappingSphere = function (Center, Radius, bSphereInWorldSpace = true) { return fnprepatch_230.call(this, Center, Radius, bSphereInWorldSpace) }; } catch (e) {};
-try { let fnprepatch_231 = InstancedStaticMeshComponent.prototype.GetInstancesOverlappingBox;InstancedStaticMeshComponent.prototype.GetInstancesOverlappingBox = function (Box, bBoxInWorldSpace = true) { return fnprepatch_231.call(this, Box, bBoxInWorldSpace) }; } catch (e) {};
-try { let fnprepatch_232 = ProceduralFoliageSpawner.prototype.Simulate;ProceduralFoliageSpawner.prototype.Simulate = function (NumSteps = -1) { return fnprepatch_232.call(this, NumSteps) }; } catch (e) {};
-try { let fnprepatch_233 = LandscapeProxy.prototype.LandscapeImportHeightmapFromRenderTarget;LandscapeProxy.prototype.LandscapeImportHeightmapFromRenderTarget = function (InRenderTarget, InImportHeightFromRGChannel = false) { return fnprepatch_233.call(this, InRenderTarget, InImportHeightFromRGChannel) }; } catch (e) {};
-try { let fnprepatch_234 = LandscapeProxy.prototype.LandscapeExportHeightmapToRenderTarget;LandscapeProxy.prototype.LandscapeExportHeightmapToRenderTarget = function (InRenderTarget, InExportHeightIntoRGChannel = false) { return fnprepatch_234.call(this, InRenderTarget, InExportHeightIntoRGChannel) }; } catch (e) {};
-try { let fnprepatch_235 = LandscapeProxy.prototype.EditorApplySpline;LandscapeProxy.prototype.EditorApplySpline = function (InSplineComponent, StartWidth = 200, EndWidth = 200, StartSideFalloff = 200, EndSideFalloff = 200, StartRoll = 0, EndRoll = 0, NumSubdivisions = 20, bRaiseHeights = true, bLowerHeights = true, PaintLayer = undefined) { return fnprepatch_235.call(this, InSplineComponent, StartWidth, EndWidth, StartSideFalloff, EndSideFalloff, StartRoll, EndRoll, NumSubdivisions, bRaiseHeights, bLowerHeights, PaintLayer) }; } catch (e) {};
+try { let fnprepatch_229 = MaterialInterface.prototype.SetForceMipLevelsToBeResident;MaterialInterface.prototype.SetForceMipLevelsToBeResident = function (OverrideForceMiplevelsToBeResident, bForceMiplevelsToBeResidentValue, ForceDuration, CinematicTextureGroups = 0) { return fnprepatch_229.call(this, OverrideForceMiplevelsToBeResident, bForceMiplevelsToBeResidentValue, ForceDuration, CinematicTextureGroups) }; } catch (e) {};
+try { let fnprepatch_230 = InstancedStaticMeshComponent.prototype.UpdateInstanceTransform;InstancedStaticMeshComponent.prototype.UpdateInstanceTransform = function (InstanceIndex, NewInstanceTransform, bWorldSpace = false, bMarkRenderStateDirty = false, bTeleport = false) { return fnprepatch_230.call(this, InstanceIndex, NewInstanceTransform, bWorldSpace, bMarkRenderStateDirty, bTeleport) }; } catch (e) {};
+try { let fnprepatch_231 = InstancedStaticMeshComponent.prototype.GetInstanceTransform;InstancedStaticMeshComponent.prototype.GetInstanceTransform = function (InstanceIndex, OutInstanceTransform, bWorldSpace = false) { return fnprepatch_231.call(this, InstanceIndex, OutInstanceTransform, bWorldSpace) }; } catch (e) {};
+try { let fnprepatch_232 = InstancedStaticMeshComponent.prototype.GetInstancesOverlappingSphere;InstancedStaticMeshComponent.prototype.GetInstancesOverlappingSphere = function (Center, Radius, bSphereInWorldSpace = true) { return fnprepatch_232.call(this, Center, Radius, bSphereInWorldSpace) }; } catch (e) {};
+try { let fnprepatch_233 = InstancedStaticMeshComponent.prototype.GetInstancesOverlappingBox;InstancedStaticMeshComponent.prototype.GetInstancesOverlappingBox = function (Box, bBoxInWorldSpace = true) { return fnprepatch_233.call(this, Box, bBoxInWorldSpace) }; } catch (e) {};
+try { let fnprepatch_234 = InstancedStaticMeshComponent.prototype.BatchUpdateInstancesTransforms;InstancedStaticMeshComponent.prototype.BatchUpdateInstancesTransforms = function (StartInstanceIndex, NewInstancesTransforms, bWorldSpace = false, bMarkRenderStateDirty = false, bTeleport = false) { return fnprepatch_234.call(this, StartInstanceIndex, NewInstancesTransforms, bWorldSpace, bMarkRenderStateDirty, bTeleport) }; } catch (e) {};
+try { let fnprepatch_235 = InstancedStaticMeshComponent.prototype.BatchUpdateInstancesTransform;InstancedStaticMeshComponent.prototype.BatchUpdateInstancesTransform = function (StartInstanceIndex, NumInstances, NewInstancesTransform, bWorldSpace = false, bMarkRenderStateDirty = false, bTeleport = false) { return fnprepatch_235.call(this, StartInstanceIndex, NumInstances, NewInstancesTransform, bWorldSpace, bMarkRenderStateDirty, bTeleport) }; } catch (e) {};
+try { let fnprepatch_236 = ProceduralFoliageSpawner.prototype.Simulate;ProceduralFoliageSpawner.prototype.Simulate = function (NumSteps = -1) { return fnprepatch_236.call(this, NumSteps) }; } catch (e) {};
+try { let fnprepatch_237 = LandscapeProxy.prototype.LandscapeImportHeightmapFromRenderTarget;LandscapeProxy.prototype.LandscapeImportHeightmapFromRenderTarget = function (InRenderTarget, InImportHeightFromRGChannel = false) { return fnprepatch_237.call(this, InRenderTarget, InImportHeightFromRGChannel) }; } catch (e) {};
+try { let fnprepatch_238 = LandscapeProxy.prototype.LandscapeExportHeightmapToRenderTarget;LandscapeProxy.prototype.LandscapeExportHeightmapToRenderTarget = function (InRenderTarget, InExportHeightIntoRGChannel = false) { return fnprepatch_238.call(this, InRenderTarget, InExportHeightIntoRGChannel) }; } catch (e) {};
+try { let fnprepatch_239 = LandscapeProxy.prototype.EditorApplySpline;LandscapeProxy.prototype.EditorApplySpline = function (InSplineComponent, StartWidth = 200, EndWidth = 200, StartSideFalloff = 200, EndSideFalloff = 200, StartRoll = 0, EndRoll = 0, NumSubdivisions = 20, bRaiseHeights = true, bLowerHeights = true, PaintLayer = undefined) { return fnprepatch_239.call(this, InSplineComponent, StartWidth, EndWidth, StartSideFalloff, EndSideFalloff, StartRoll, EndRoll, NumSubdivisions, bRaiseHeights, bLowerHeights, PaintLayer) }; } catch (e) {};
 try { MaterialInstanceConstant.prototype.GetVectorParameterValue = MaterialInstanceConstant.prototype.K2_GetVectorParameterValue; } catch (e) {};
 try { MaterialInstanceConstant.prototype.GetTextureParameterValue = MaterialInstanceConstant.prototype.K2_GetTextureParameterValue; } catch (e) {};
 try { MaterialInstanceConstant.prototype.GetScalarParameterValue = MaterialInstanceConstant.prototype.K2_GetScalarParameterValue; } catch (e) {};
-try { let fnprepatch_236 = AmbientSound.prototype.Play;AmbientSound.prototype.Play = function (StartTime = 0) { return fnprepatch_236.call(this, StartTime) }; } catch (e) {};
-try { let fnprepatch_237 = AmbientSound.prototype.FadeIn;AmbientSound.prototype.FadeIn = function (FadeInDuration, FadeVolumeLevel = 1) { return fnprepatch_237.call(this, FadeInDuration, FadeVolumeLevel) }; } catch (e) {};
-try { let fnprepatch_238 = AudioComponent.prototype.Play;AudioComponent.prototype.Play = function (StartTime = 0) { return fnprepatch_238.call(this, StartTime) }; } catch (e) {};
-try { let fnprepatch_239 = AudioComponent.prototype.FadeIn;AudioComponent.prototype.FadeIn = function (FadeInDuration, FadeVolumeLevel = 1, StartTime = 0) { return fnprepatch_239.call(this, FadeInDuration, FadeVolumeLevel, StartTime) }; } catch (e) {};
+try { let fnprepatch_240 = AmbientSound.prototype.Play;AmbientSound.prototype.Play = function (StartTime = 0) { return fnprepatch_240.call(this, StartTime) }; } catch (e) {};
+try { let fnprepatch_241 = AmbientSound.prototype.FadeIn;AmbientSound.prototype.FadeIn = function (FadeInDuration, FadeVolumeLevel = 1) { return fnprepatch_241.call(this, FadeInDuration, FadeVolumeLevel) }; } catch (e) {};
+try { let fnprepatch_242 = AudioComponent.prototype.Play;AudioComponent.prototype.Play = function (StartTime = 0) { return fnprepatch_242.call(this, StartTime) }; } catch (e) {};
+try { let fnprepatch_243 = AudioComponent.prototype.FadeIn;AudioComponent.prototype.FadeIn = function (FadeInDuration, FadeVolumeLevel = 1, StartTime = 0) { return fnprepatch_243.call(this, FadeInDuration, FadeVolumeLevel, StartTime) }; } catch (e) {};
 try { AudioComponent.prototype.SetIntegerParameter = AudioComponent.prototype.SetIntParameter; } catch (e) {};
 try { AudioComponent.prototype.SetBooleanParameter = AudioComponent.prototype.SetBoolParameter; } catch (e) {};
 try { AudioComponent.prototype.GetAttenuationSettingsToApply = AudioComponent.prototype.BP_GetAttenuationSettingsToApply; } catch (e) {};
-try { let fnprepatch_240 = AvoidanceManager.prototype.RegisterMovementComponent;AvoidanceManager.prototype.RegisterMovementComponent = function (MovementComp, AvoidanceWeight = 0.5) { return fnprepatch_240.call(this, MovementComp, AvoidanceWeight) }; } catch (e) {};
+try { let fnprepatch_244 = AvoidanceManager.prototype.RegisterMovementComponent;AvoidanceManager.prototype.RegisterMovementComponent = function (MovementComp, AvoidanceWeight = 0.5) { return fnprepatch_244.call(this, MovementComp, AvoidanceWeight) }; } catch (e) {};
 try { BlueprintMapLibrary.prototype.Values = BlueprintMapLibrary.prototype.Map_Values; } catch (e) {};
 try { BlueprintMapLibrary.Values = BlueprintMapLibrary.Map_Values; } catch (e) {};
 try { BlueprintMapLibrary.prototype.Remove = BlueprintMapLibrary.prototype.Map_Remove; } catch (e) {};
@@ -562,6 +631,9 @@ try { BlueprintMapLibrary.prototype.Clear = BlueprintMapLibrary.prototype.Map_Cl
 try { BlueprintMapLibrary.Clear = BlueprintMapLibrary.Map_Clear; } catch (e) {};
 try { BlueprintMapLibrary.prototype.Add = BlueprintMapLibrary.prototype.Map_Add; } catch (e) {};
 try { BlueprintMapLibrary.Add = BlueprintMapLibrary.Map_Add; } catch (e) {};
+try { let fnprepatch_245 = BlueprintPathsLibrary.prototype.GetExtension;BlueprintPathsLibrary.prototype.GetExtension = function (InPath, bIncludeDot = false) { return fnprepatch_245.call(this, InPath, bIncludeDot) }; } catch (e) {};
+try { let fnprepatch_246 = BlueprintPathsLibrary.prototype.GetBaseFilename;BlueprintPathsLibrary.prototype.GetBaseFilename = function (InPath, bRemovePath = true) { return fnprepatch_246.call(this, InPath, bRemovePath) }; } catch (e) {};
+try { let fnprepatch_247 = BlueprintPathsLibrary.prototype.CreateTempFilename;BlueprintPathsLibrary.prototype.CreateTempFilename = function (Path, Prefix, Extension = ".tmp") { return fnprepatch_247.call(this, Path, Prefix, Extension) }; } catch (e) {};
 try { GameInstance.prototype.Shutdown = GameInstance.prototype.ReceiveShutdown; } catch (e) {};
 try { GameInstance.prototype.Init = GameInstance.prototype.ReceiveInit; } catch (e) {};
 try { GameInstance.prototype.TravelError = GameInstance.prototype.HandleTravelError; } catch (e) {};
@@ -588,17 +660,17 @@ try { BlueprintSetLibrary.prototype.AddItems = BlueprintSetLibrary.prototype.Set
 try { BlueprintSetLibrary.AddItems = BlueprintSetLibrary.Set_AddItems; } catch (e) {};
 try { BlueprintSetLibrary.prototype.Add = BlueprintSetLibrary.prototype.Set_Add; } catch (e) {};
 try { BlueprintSetLibrary.Add = BlueprintSetLibrary.Set_Add; } catch (e) {};
-try { let fnprepatch_241 = BoxComponent.prototype.SetBoxExtent;BoxComponent.prototype.SetBoxExtent = function (InBoxExtent, bUpdateOverlaps = true) { return fnprepatch_241.call(this, InBoxExtent, bUpdateOverlaps) }; } catch (e) {};
-try { let fnprepatch_242 = CameraAnimInst.prototype.Stop;CameraAnimInst.prototype.Stop = function (bImmediate = false) { return fnprepatch_242.call(this, bImmediate) }; } catch (e) {};
-try { let fnprepatch_243 = CameraModifier.prototype.DisableModifier;CameraModifier.prototype.DisableModifier = function (bImmediate = false) { return fnprepatch_243.call(this, bImmediate) }; } catch (e) {};
-try { let fnprepatch_244 = Canvas.prototype.K2_TextSize;Canvas.prototype.K2_TextSize = function (RenderFont, RenderText, Scale = {"X":1,"Y":1}) { return fnprepatch_244.call(this, RenderFont, RenderText, Scale) }; } catch (e) {};
-try { let fnprepatch_245 = Canvas.prototype.K2_DrawTexture;Canvas.prototype.K2_DrawTexture = function (RenderTexture, ScreenPosition, ScreenSize, CoordinatePosition, CoordinateSize = {"X":1,"Y":1}, RenderColor = {"R":1,"G":1,"B":1,"A":1}, BlendMode = "BLEND_Translucent", Rotation = 0, PivotPoint = {"X":0.5,"Y":0.5}) { return fnprepatch_245.call(this, RenderTexture, ScreenPosition, ScreenSize, CoordinatePosition, CoordinateSize, RenderColor, BlendMode, Rotation, PivotPoint) }; } catch (e) {};
-try { let fnprepatch_246 = Canvas.prototype.K2_DrawText;Canvas.prototype.K2_DrawText = function (RenderFont, RenderText, ScreenPosition, Scale = {"X":1,"Y":1}, RenderColor = {"R":1,"G":1,"B":1,"A":1}, Kerning = 0, ShadowColor = {"R":0,"G":0,"B":0,"A":1}, ShadowOffset = {"X":1,"Y":1}, bCentreX = false, bCentreY = false, bOutlined = false, OutlineColor = {"R":0,"G":0,"B":0,"A":1}) { return fnprepatch_246.call(this, RenderFont, RenderText, ScreenPosition, Scale, RenderColor, Kerning, ShadowColor, ShadowOffset, bCentreX, bCentreY, bOutlined, OutlineColor) }; } catch (e) {};
-try { let fnprepatch_247 = Canvas.prototype.K2_DrawPolygon;Canvas.prototype.K2_DrawPolygon = function (RenderTexture, ScreenPosition, Radius = {"X":1,"Y":1}, NumberOfSides = 3, RenderColor = {"R":1,"G":1,"B":1,"A":1}) { return fnprepatch_247.call(this, RenderTexture, ScreenPosition, Radius, NumberOfSides, RenderColor) }; } catch (e) {};
-try { let fnprepatch_248 = Canvas.prototype.K2_DrawMaterial;Canvas.prototype.K2_DrawMaterial = function (RenderMaterial, ScreenPosition, ScreenSize, CoordinatePosition, CoordinateSize = {"X":1,"Y":1}, Rotation = 0, PivotPoint = {"X":0.5,"Y":0.5}) { return fnprepatch_248.call(this, RenderMaterial, ScreenPosition, ScreenSize, CoordinatePosition, CoordinateSize, Rotation, PivotPoint) }; } catch (e) {};
-try { let fnprepatch_249 = Canvas.prototype.K2_DrawLine;Canvas.prototype.K2_DrawLine = function (ScreenPositionA, ScreenPositionB, Thickness = 1, RenderColor = {"R":1,"G":1,"B":1,"A":1}) { return fnprepatch_249.call(this, ScreenPositionA, ScreenPositionB, Thickness, RenderColor) }; } catch (e) {};
-try { let fnprepatch_250 = Canvas.prototype.K2_DrawBox;Canvas.prototype.K2_DrawBox = function (ScreenPosition, ScreenSize, Thickness = 1, RenderColor = {"R":1,"G":1,"B":1,"A":1}) { return fnprepatch_250.call(this, ScreenPosition, ScreenSize, Thickness, RenderColor) }; } catch (e) {};
-try { let fnprepatch_251 = Canvas.prototype.K2_DrawBorder;Canvas.prototype.K2_DrawBorder = function (BorderTexture, BackgroundTexture, LeftBorderTexture, RightBorderTexture, TopBorderTexture, BottomBorderTexture, ScreenPosition, ScreenSize, CoordinatePosition, CoordinateSize = {"X":1,"Y":1}, RenderColor = {"R":1,"G":1,"B":1,"A":1}, BorderScale = {"X":0.10000000149011612,"Y":0.10000000149011612}, BackgroundScale = {"X":0.10000000149011612,"Y":0.10000000149011612}, Rotation = 0, PivotPoint = {"X":0.5,"Y":0.5}, CornerSize) { return fnprepatch_251.call(this, BorderTexture, BackgroundTexture, LeftBorderTexture, RightBorderTexture, TopBorderTexture, BottomBorderTexture, ScreenPosition, ScreenSize, CoordinatePosition, CoordinateSize, RenderColor, BorderScale, BackgroundScale, Rotation, PivotPoint, CornerSize) }; } catch (e) {};
+try { let fnprepatch_248 = BoxComponent.prototype.SetBoxExtent;BoxComponent.prototype.SetBoxExtent = function (InBoxExtent, bUpdateOverlaps = true) { return fnprepatch_248.call(this, InBoxExtent, bUpdateOverlaps) }; } catch (e) {};
+try { let fnprepatch_249 = CameraAnimInst.prototype.Stop;CameraAnimInst.prototype.Stop = function (bImmediate = false) { return fnprepatch_249.call(this, bImmediate) }; } catch (e) {};
+try { let fnprepatch_250 = CameraModifier.prototype.DisableModifier;CameraModifier.prototype.DisableModifier = function (bImmediate = false) { return fnprepatch_250.call(this, bImmediate) }; } catch (e) {};
+try { let fnprepatch_251 = Canvas.prototype.K2_TextSize;Canvas.prototype.K2_TextSize = function (RenderFont, RenderText, Scale = {"X":1,"Y":1}) { return fnprepatch_251.call(this, RenderFont, RenderText, Scale) }; } catch (e) {};
+try { let fnprepatch_252 = Canvas.prototype.K2_DrawTexture;Canvas.prototype.K2_DrawTexture = function (RenderTexture, ScreenPosition, ScreenSize, CoordinatePosition, CoordinateSize = {"X":1,"Y":1}, RenderColor = {"R":1,"G":1,"B":1,"A":1}, BlendMode = "BLEND_Translucent", Rotation = 0, PivotPoint = {"X":0.5,"Y":0.5}) { return fnprepatch_252.call(this, RenderTexture, ScreenPosition, ScreenSize, CoordinatePosition, CoordinateSize, RenderColor, BlendMode, Rotation, PivotPoint) }; } catch (e) {};
+try { let fnprepatch_253 = Canvas.prototype.K2_DrawText;Canvas.prototype.K2_DrawText = function (RenderFont, RenderText, ScreenPosition, Scale = {"X":1,"Y":1}, RenderColor = {"R":1,"G":1,"B":1,"A":1}, Kerning = 0, ShadowColor = {"R":0,"G":0,"B":0,"A":1}, ShadowOffset = {"X":1,"Y":1}, bCentreX = false, bCentreY = false, bOutlined = false, OutlineColor = {"R":0,"G":0,"B":0,"A":1}) { return fnprepatch_253.call(this, RenderFont, RenderText, ScreenPosition, Scale, RenderColor, Kerning, ShadowColor, ShadowOffset, bCentreX, bCentreY, bOutlined, OutlineColor) }; } catch (e) {};
+try { let fnprepatch_254 = Canvas.prototype.K2_DrawPolygon;Canvas.prototype.K2_DrawPolygon = function (RenderTexture, ScreenPosition, Radius = {"X":1,"Y":1}, NumberOfSides = 3, RenderColor = {"R":1,"G":1,"B":1,"A":1}) { return fnprepatch_254.call(this, RenderTexture, ScreenPosition, Radius, NumberOfSides, RenderColor) }; } catch (e) {};
+try { let fnprepatch_255 = Canvas.prototype.K2_DrawMaterial;Canvas.prototype.K2_DrawMaterial = function (RenderMaterial, ScreenPosition, ScreenSize, CoordinatePosition, CoordinateSize = {"X":1,"Y":1}, Rotation = 0, PivotPoint = {"X":0.5,"Y":0.5}) { return fnprepatch_255.call(this, RenderMaterial, ScreenPosition, ScreenSize, CoordinatePosition, CoordinateSize, Rotation, PivotPoint) }; } catch (e) {};
+try { let fnprepatch_256 = Canvas.prototype.K2_DrawLine;Canvas.prototype.K2_DrawLine = function (ScreenPositionA, ScreenPositionB, Thickness = 1, RenderColor = {"R":1,"G":1,"B":1,"A":1}) { return fnprepatch_256.call(this, ScreenPositionA, ScreenPositionB, Thickness, RenderColor) }; } catch (e) {};
+try { let fnprepatch_257 = Canvas.prototype.K2_DrawBox;Canvas.prototype.K2_DrawBox = function (ScreenPosition, ScreenSize, Thickness = 1, RenderColor = {"R":1,"G":1,"B":1,"A":1}) { return fnprepatch_257.call(this, ScreenPosition, ScreenSize, Thickness, RenderColor) }; } catch (e) {};
+try { let fnprepatch_258 = Canvas.prototype.K2_DrawBorder;Canvas.prototype.K2_DrawBorder = function (BorderTexture, BackgroundTexture, LeftBorderTexture, RightBorderTexture, TopBorderTexture, BottomBorderTexture, ScreenPosition, ScreenSize, CoordinatePosition, CoordinateSize = {"X":1,"Y":1}, RenderColor = {"R":1,"G":1,"B":1,"A":1}, BorderScale = {"X":0.10000000149011612,"Y":0.10000000149011612}, BackgroundScale = {"X":0.10000000149011612,"Y":0.10000000149011612}, Rotation = 0, PivotPoint = {"X":0.5,"Y":0.5}, CornerSize) { return fnprepatch_258.call(this, BorderTexture, BackgroundTexture, LeftBorderTexture, RightBorderTexture, TopBorderTexture, BottomBorderTexture, ScreenPosition, ScreenSize, CoordinatePosition, CoordinateSize, RenderColor, BorderScale, BackgroundScale, Rotation, PivotPoint, CornerSize) }; } catch (e) {};
 try { Canvas.prototype.ClippedTextSize = Canvas.prototype.K2_TextSize; } catch (e) {};
 try { Canvas.prototype.WrappedTextSize = Canvas.prototype.K2_StrLen; } catch (e) {};
 try { Canvas.prototype.Project = Canvas.prototype.K2_Project; } catch (e) {};
@@ -613,38 +685,40 @@ try { Canvas.prototype.DrawBox = Canvas.prototype.K2_DrawBox; } catch (e) {};
 try { Canvas.prototype.DrawBorder = Canvas.prototype.K2_DrawBorder; } catch (e) {};
 try { Canvas.prototype.Deproject = Canvas.prototype.K2_Deproject; } catch (e) {};
 try { TextureRenderTarget2D.prototype.RenderTargetCreateStaticTextureEditorOnly = TextureRenderTarget2D.prototype.RenderTargetCreateStaticTexture2DEditorOnly; } catch (e) {};
-try { let fnprepatch_252 = CanvasRenderTarget2D.prototype.CreateCanvasRenderTarget2D;CanvasRenderTarget2D.prototype.CreateCanvasRenderTarget2D = function (WorldContextObject, CanvasRenderTarget2DClass, Width = 1024, Height = 1024) { return fnprepatch_252.call(this, WorldContextObject, CanvasRenderTarget2DClass, Width, Height) }; } catch (e) {};
-try { let fnprepatch_253 = CapsuleComponent.prototype.SetCapsuleSize;CapsuleComponent.prototype.SetCapsuleSize = function (InRadius, InHalfHeight, bUpdateOverlaps = true) { return fnprepatch_253.call(this, InRadius, InHalfHeight, bUpdateOverlaps) }; } catch (e) {};
-try { let fnprepatch_254 = CapsuleComponent.prototype.SetCapsuleRadius;CapsuleComponent.prototype.SetCapsuleRadius = function (Radius, bUpdateOverlaps = true) { return fnprepatch_254.call(this, Radius, bUpdateOverlaps) }; } catch (e) {};
-try { let fnprepatch_255 = CapsuleComponent.prototype.SetCapsuleHalfHeight;CapsuleComponent.prototype.SetCapsuleHalfHeight = function (HalfHeight, bUpdateOverlaps = true) { return fnprepatch_255.call(this, HalfHeight, bUpdateOverlaps) }; } catch (e) {};
-try { let fnprepatch_256 = MovementComponent.prototype.K2_MoveUpdatedComponent;MovementComponent.prototype.K2_MoveUpdatedComponent = function (Delta, NewRotation, OutHit, bSweep = true, bTeleport = false) { return fnprepatch_256.call(this, Delta, NewRotation, OutHit, bSweep, bTeleport) }; } catch (e) {};
+try { let fnprepatch_259 = CanvasRenderTarget2D.prototype.CreateCanvasRenderTarget2D;CanvasRenderTarget2D.prototype.CreateCanvasRenderTarget2D = function (WorldContextObject, CanvasRenderTarget2DClass, Width = 1024, Height = 1024) { return fnprepatch_259.call(this, WorldContextObject, CanvasRenderTarget2DClass, Width, Height) }; } catch (e) {};
+try { let fnprepatch_260 = CapsuleComponent.prototype.SetCapsuleSize;CapsuleComponent.prototype.SetCapsuleSize = function (InRadius, InHalfHeight, bUpdateOverlaps = true) { return fnprepatch_260.call(this, InRadius, InHalfHeight, bUpdateOverlaps) }; } catch (e) {};
+try { let fnprepatch_261 = CapsuleComponent.prototype.SetCapsuleRadius;CapsuleComponent.prototype.SetCapsuleRadius = function (Radius, bUpdateOverlaps = true) { return fnprepatch_261.call(this, Radius, bUpdateOverlaps) }; } catch (e) {};
+try { let fnprepatch_262 = CapsuleComponent.prototype.SetCapsuleHalfHeight;CapsuleComponent.prototype.SetCapsuleHalfHeight = function (HalfHeight, bUpdateOverlaps = true) { return fnprepatch_262.call(this, HalfHeight, bUpdateOverlaps) }; } catch (e) {};
+try { let fnprepatch_263 = Pawn.prototype.SetCanAffectNavigationGeneration;Pawn.prototype.SetCanAffectNavigationGeneration = function (bNewValue, bForceUpdate = false) { return fnprepatch_263.call(this, bNewValue, bForceUpdate) }; } catch (e) {};
+try { let fnprepatch_264 = Pawn.prototype.PawnMakeNoise;Pawn.prototype.PawnMakeNoise = function (Loudness, NoiseLocation, bUseNoiseMakerLocation = true, NoiseMaker = undefined) { return fnprepatch_264.call(this, Loudness, NoiseLocation, bUseNoiseMakerLocation, NoiseMaker) }; } catch (e) {};
+try { let fnprepatch_265 = Pawn.prototype.AddMovementInput;Pawn.prototype.AddMovementInput = function (WorldDirection, ScaleValue = 1, bForce = false) { return fnprepatch_265.call(this, WorldDirection, ScaleValue, bForce) }; } catch (e) {};
+try { Pawn.prototype.Unpossessed = Pawn.prototype.ReceiveUnpossessed; } catch (e) {};
+try { Pawn.prototype.Possessed = Pawn.prototype.ReceivePossessed; } catch (e) {};
+try { Pawn.prototype.GetMovementInputVector = Pawn.prototype.K2_GetMovementInputVector; } catch (e) {};
+try { let fnprepatch_266 = Character.prototype.UnCrouch;Character.prototype.UnCrouch = function (bClientSimulation = false) { return fnprepatch_266.call(this, bClientSimulation) }; } catch (e) {};
+try { let fnprepatch_267 = Character.prototype.StopAnimMontage;Character.prototype.StopAnimMontage = function (AnimMontage = undefined) { return fnprepatch_267.call(this, AnimMontage) }; } catch (e) {};
+try { let fnprepatch_268 = Character.prototype.PlayAnimMontage;Character.prototype.PlayAnimMontage = function (AnimMontage, InPlayRate = 1, StartSectionName = "None") { return fnprepatch_268.call(this, AnimMontage, InPlayRate, StartSectionName) }; } catch (e) {};
+try { let fnprepatch_269 = Character.prototype.Crouch;Character.prototype.Crouch = function (bClientSimulation = false) { return fnprepatch_269.call(this, bClientSimulation) }; } catch (e) {};
+try { Character.prototype.UpdateCustomMovement = Character.prototype.K2_UpdateCustomMovement; } catch (e) {};
+try { Character.prototype.OnStartCrouch = Character.prototype.K2_OnStartCrouch; } catch (e) {};
+try { Character.prototype.OnMovementModeChanged = Character.prototype.K2_OnMovementModeChanged; } catch (e) {};
+try { Character.prototype.OnEndCrouch = Character.prototype.K2_OnEndCrouch; } catch (e) {};
+try { Character.prototype.IsPlayingAnimRootMotion = Character.prototype.IsPlayingRootMotion; } catch (e) {};
+try { Character.prototype.GetBaseRotationOffset = Character.prototype.GetBaseRotationOffsetRotator; } catch (e) {};
+try { Character.prototype.CanJump = Character.prototype.CanJumpInternal; } catch (e) {};
+try { let fnprepatch_270 = MovementComponent.prototype.K2_MoveUpdatedComponent;MovementComponent.prototype.K2_MoveUpdatedComponent = function (Delta, NewRotation, OutHit, bSweep = true, bTeleport = false) { return fnprepatch_270.call(this, Delta, NewRotation, OutHit, bSweep, bTeleport) }; } catch (e) {};
 try { MovementComponent.prototype.MoveUpdatedComponent = MovementComponent.prototype.K2_MoveUpdatedComponent; } catch (e) {};
 try { MovementComponent.prototype.GetModifiedMaxSpeed = MovementComponent.prototype.K2_GetModifiedMaxSpeed; } catch (e) {};
 try { MovementComponent.prototype.GetMaxSpeedModifier = MovementComponent.prototype.K2_GetMaxSpeedModifier; } catch (e) {};
-try { let fnprepatch_257 = PawnMovementComponent.prototype.AddInputVector;PawnMovementComponent.prototype.AddInputVector = function (WorldVector, bForce = false) { return fnprepatch_257.call(this, WorldVector, bForce) }; } catch (e) {};
+try { let fnprepatch_271 = PawnMovementComponent.prototype.AddInputVector;PawnMovementComponent.prototype.AddInputVector = function (WorldVector, bForce = false) { return fnprepatch_271.call(this, WorldVector, bForce) }; } catch (e) {};
 try { PawnMovementComponent.prototype.GetInputVector = PawnMovementComponent.prototype.K2_GetInputVector; } catch (e) {};
-try { let fnprepatch_258 = CharacterMovementComponent.prototype.SetMovementMode;CharacterMovementComponent.prototype.SetMovementMode = function (NewMovementMode, NewCustomMode = 0) { return fnprepatch_258.call(this, NewMovementMode, NewCustomMode) }; } catch (e) {};
-try { let fnprepatch_259 = CharacterMovementComponent.prototype.AddImpulse;CharacterMovementComponent.prototype.AddImpulse = function (Impulse, bVelocityChange = false) { return fnprepatch_259.call(this, Impulse, bVelocityChange) }; } catch (e) {};
+try { let fnprepatch_272 = CharacterMovementComponent.prototype.SetMovementMode;CharacterMovementComponent.prototype.SetMovementMode = function (NewMovementMode, NewCustomMode = 0) { return fnprepatch_272.call(this, NewMovementMode, NewCustomMode) }; } catch (e) {};
+try { let fnprepatch_273 = CharacterMovementComponent.prototype.AddImpulse;CharacterMovementComponent.prototype.AddImpulse = function (Impulse, bVelocityChange = false) { return fnprepatch_273.call(this, Impulse, bVelocityChange) }; } catch (e) {};
 try { CharacterMovementComponent.prototype.GetWalkableFloorZ = CharacterMovementComponent.prototype.K2_GetWalkableFloorZ; } catch (e) {};
 try { CharacterMovementComponent.prototype.GetWalkableFloorAngle = CharacterMovementComponent.prototype.K2_GetWalkableFloorAngle; } catch (e) {};
 try { CharacterMovementComponent.prototype.GetModifiedMaxAcceleration = CharacterMovementComponent.prototype.K2_GetModifiedMaxAcceleration; } catch (e) {};
 try { CharacterMovementComponent.prototype.FindFloor = CharacterMovementComponent.prototype.K2_FindFloor; } catch (e) {};
 try { CharacterMovementComponent.prototype.ComputeFloorDistance = CharacterMovementComponent.prototype.K2_ComputeFloorDist; } catch (e) {};
-try { let fnprepatch_260 = PlayerController.prototype.StartFire;PlayerController.prototype.StartFire = function (FireModeNum = 0) { return fnprepatch_260.call(this, FireModeNum) }; } catch (e) {};
-try { let fnprepatch_261 = PlayerController.prototype.SetViewTargetWithBlend;PlayerController.prototype.SetViewTargetWithBlend = function (NewViewTarget, BlendTime = 0, BlendFunc = "VTBlend_Linear", BlendExp = 0, bLockOutgoing = false) { return fnprepatch_261.call(this, NewViewTarget, BlendTime, BlendFunc, BlendExp, bLockOutgoing) }; } catch (e) {};
-try { let fnprepatch_262 = PlayerController.prototype.ProjectWorldLocationToScreen;PlayerController.prototype.ProjectWorldLocationToScreen = function (WorldLocation, ScreenLocation, bPlayerViewportRelative = false) { return fnprepatch_262.call(this, WorldLocation, ScreenLocation, bPlayerViewportRelative) }; } catch (e) {};
-try { let fnprepatch_263 = PlayerController.prototype.PlayHapticEffect;PlayerController.prototype.PlayHapticEffect = function (HapticEffect, Hand, Scale = 1, bLoop = false) { return fnprepatch_263.call(this, HapticEffect, Hand, Scale, bLoop) }; } catch (e) {};
-try { let fnprepatch_264 = PlayerController.prototype.ClientStopCameraShake;PlayerController.prototype.ClientStopCameraShake = function (Shake, bImmediately = true) { return fnprepatch_264.call(this, Shake, bImmediately) }; } catch (e) {};
-try { let fnprepatch_265 = PlayerController.prototype.ClientPlayCameraShake;PlayerController.prototype.ClientPlayCameraShake = function (Shake, Scale = 1, PlaySpace = "CameraLocal", UserPlaySpaceRot) { return fnprepatch_265.call(this, Shake, Scale, PlaySpace, UserPlaySpaceRot) }; } catch (e) {};
-try { let fnprepatch_266 = PlayerController.prototype.ClientPlayCameraAnim;PlayerController.prototype.ClientPlayCameraAnim = function (AnimToPlay, Scale = 1, Rate = 1, BlendInTime = 0, BlendOutTime = 0, bLoop = false, bRandomStartTime = false, Space = "CameraLocal", CustomPlaySpace) { return fnprepatch_266.call(this, AnimToPlay, Scale, Rate, BlendInTime, BlendOutTime, bLoop, bRandomStartTime, Space, CustomPlaySpace) }; } catch (e) {};
-try { PlayerController.prototype.SetInputModeGameAndUI = PlayerController.prototype.SetInputMode_GameAndUI; } catch (e) {};
-try { PlayerController.prototype.SetInputModeGameAndUI = PlayerController.prototype.SetInputMode_GameAndUIEx; } catch (e) {};
-try { PlayerController.prototype.SetInputModeUIOnly = PlayerController.prototype.SetInputMode_UIOnly; } catch (e) {};
-try { PlayerController.prototype.SetInputModeUIOnly = PlayerController.prototype.SetInputMode_UIOnlyEx; } catch (e) {};
-try { PlayerController.prototype.SetMousePosition = PlayerController.prototype.SetMouseLocation; } catch (e) {};
-try { PlayerController.prototype.ConvertWorldLocationToScreenLocation = PlayerController.prototype.ProjectWorldLocationToScreen; } catch (e) {};
-try { PlayerController.prototype.ConvertScreenLocationToWorldSpace = PlayerController.prototype.DeprojectScreenPositionToWorld; } catch (e) {};
-try { PlayerController.prototype.ConvertMouseLocationToWorldSpace = PlayerController.prototype.DeprojectMousePositionToWorld; } catch (e) {};
 try { CheatManager.prototype.InitCheatManager = CheatManager.prototype.ReceiveInitCheatManager; } catch (e) {};
 try { CheatManager.prototype.Shutdown = CheatManager.prototype.ReceiveEndPlay; } catch (e) {};
 try { Texture2D.prototype.GetSizeY = Texture2D.prototype.Blueprint_GetSizeY; } catch (e) {};
@@ -652,66 +726,61 @@ try { Texture2D.prototype.GetSizeX = Texture2D.prototype.Blueprint_GetSizeX; } c
 try { DebugCameraController.prototype.OnDeactivate = DebugCameraController.prototype.ReceiveOnDeactivate; } catch (e) {};
 try { DebugCameraController.prototype.OnActorSelected = DebugCameraController.prototype.ReceiveOnActorSelected; } catch (e) {};
 try { DebugCameraController.prototype.OnActivate = DebugCameraController.prototype.ReceiveOnActivate; } catch (e) {};
-try { let fnprepatch_267 = HUD.prototype.ShowDebug;HUD.prototype.ShowDebug = function (DebugType = "None") { return fnprepatch_267.call(this, DebugType) }; } catch (e) {};
-try { let fnprepatch_268 = HUD.prototype.GetTextSize;HUD.prototype.GetTextSize = function (Text, OutWidth, OutHeight, Font = undefined, Scale = 1) { return fnprepatch_268.call(this, Text, OutWidth, OutHeight, Font, Scale) }; } catch (e) {};
-try { let fnprepatch_269 = HUD.prototype.GetActorsInSelectionRectangle;HUD.prototype.GetActorsInSelectionRectangle = function (ClassFilter, FirstPoint, SecondPoint, OutActors, bIncludeNonCollidingComponents = true, bActorMustBeFullyEnclosed = false) { return fnprepatch_269.call(this, ClassFilter, FirstPoint, SecondPoint, OutActors, bIncludeNonCollidingComponents, bActorMustBeFullyEnclosed) }; } catch (e) {};
-try { let fnprepatch_270 = HUD.prototype.DrawTextureSimple;HUD.prototype.DrawTextureSimple = function (Texture, ScreenX, ScreenY, Scale = 1, bScalePosition = false) { return fnprepatch_270.call(this, Texture, ScreenX, ScreenY, Scale, bScalePosition) }; } catch (e) {};
-try { let fnprepatch_271 = HUD.prototype.DrawTexture;HUD.prototype.DrawTexture = function (Texture, ScreenX, ScreenY, ScreenW, ScreenH, TextureU, TextureV, TextureUWidth, TextureVHeight, TintColor = {"R":1,"G":1,"B":1,"A":1}, BlendMode = "BLEND_Translucent", Scale = 1, bScalePosition = false, Rotation = 0, RotPivot) { return fnprepatch_271.call(this, Texture, ScreenX, ScreenY, ScreenW, ScreenH, TextureU, TextureV, TextureUWidth, TextureVHeight, TintColor, BlendMode, Scale, bScalePosition, Rotation, RotPivot) }; } catch (e) {};
-try { let fnprepatch_272 = HUD.prototype.DrawText;HUD.prototype.DrawText = function (Text, TextColor, ScreenX, ScreenY, Font = undefined, Scale = 1, bScalePosition = false) { return fnprepatch_272.call(this, Text, TextColor, ScreenX, ScreenY, Font, Scale, bScalePosition) }; } catch (e) {};
-try { let fnprepatch_273 = HUD.prototype.DrawMaterialTriangle;HUD.prototype.DrawMaterialTriangle = function (Material, V0_Pos, V1_Pos, V2_Pos, V0_UV, V1_UV, V2_UV, V0_Color = {"R":1,"G":1,"B":1,"A":1}, V1_Color = {"R":1,"G":1,"B":1,"A":1}, V2_Color = {"R":1,"G":1,"B":1,"A":1}) { return fnprepatch_273.call(this, Material, V0_Pos, V1_Pos, V2_Pos, V0_UV, V1_UV, V2_UV, V0_Color, V1_Color, V2_Color) }; } catch (e) {};
-try { let fnprepatch_274 = HUD.prototype.DrawMaterialSimple;HUD.prototype.DrawMaterialSimple = function (Material, ScreenX, ScreenY, ScreenW, ScreenH, Scale = 1, bScalePosition = false) { return fnprepatch_274.call(this, Material, ScreenX, ScreenY, ScreenW, ScreenH, Scale, bScalePosition) }; } catch (e) {};
-try { let fnprepatch_275 = HUD.prototype.DrawMaterial;HUD.prototype.DrawMaterial = function (Material, ScreenX, ScreenY, ScreenW, ScreenH, MaterialU, MaterialV, MaterialUWidth, MaterialVHeight, Scale = 1, bScalePosition = false, Rotation = 0, RotPivot) { return fnprepatch_275.call(this, Material, ScreenX, ScreenY, ScreenW, ScreenH, MaterialU, MaterialV, MaterialUWidth, MaterialVHeight, Scale, bScalePosition, Rotation, RotPivot) }; } catch (e) {};
-try { let fnprepatch_276 = HUD.prototype.DrawLine;HUD.prototype.DrawLine = function (StartScreenX, StartScreenY, EndScreenX, EndScreenY, LineColor, LineThickness = 0) { return fnprepatch_276.call(this, StartScreenX, StartScreenY, EndScreenX, EndScreenY, LineColor, LineThickness) }; } catch (e) {};
-try { let fnprepatch_277 = HUD.prototype.AddHitBox;HUD.prototype.AddHitBox = function (Position, Size, InName, bConsumesInput, Priority = 0) { return fnprepatch_277.call(this, Position, Size, InName, bConsumesInput, Priority) }; } catch (e) {};
+try { let fnprepatch_274 = HUD.prototype.ShowDebug;HUD.prototype.ShowDebug = function (DebugType = "None") { return fnprepatch_274.call(this, DebugType) }; } catch (e) {};
+try { let fnprepatch_275 = HUD.prototype.GetTextSize;HUD.prototype.GetTextSize = function (Text, OutWidth, OutHeight, Font = undefined, Scale = 1) { return fnprepatch_275.call(this, Text, OutWidth, OutHeight, Font, Scale) }; } catch (e) {};
+try { let fnprepatch_276 = HUD.prototype.GetActorsInSelectionRectangle;HUD.prototype.GetActorsInSelectionRectangle = function (ClassFilter, FirstPoint, SecondPoint, OutActors, bIncludeNonCollidingComponents = true, bActorMustBeFullyEnclosed = false) { return fnprepatch_276.call(this, ClassFilter, FirstPoint, SecondPoint, OutActors, bIncludeNonCollidingComponents, bActorMustBeFullyEnclosed) }; } catch (e) {};
+try { let fnprepatch_277 = HUD.prototype.DrawTextureSimple;HUD.prototype.DrawTextureSimple = function (Texture, ScreenX, ScreenY, Scale = 1, bScalePosition = false) { return fnprepatch_277.call(this, Texture, ScreenX, ScreenY, Scale, bScalePosition) }; } catch (e) {};
+try { let fnprepatch_278 = HUD.prototype.DrawTexture;HUD.prototype.DrawTexture = function (Texture, ScreenX, ScreenY, ScreenW, ScreenH, TextureU, TextureV, TextureUWidth, TextureVHeight, TintColor = {"R":1,"G":1,"B":1,"A":1}, BlendMode = "BLEND_Translucent", Scale = 1, bScalePosition = false, Rotation = 0, RotPivot) { return fnprepatch_278.call(this, Texture, ScreenX, ScreenY, ScreenW, ScreenH, TextureU, TextureV, TextureUWidth, TextureVHeight, TintColor, BlendMode, Scale, bScalePosition, Rotation, RotPivot) }; } catch (e) {};
+try { let fnprepatch_279 = HUD.prototype.DrawText;HUD.prototype.DrawText = function (Text, TextColor, ScreenX, ScreenY, Font = undefined, Scale = 1, bScalePosition = false) { return fnprepatch_279.call(this, Text, TextColor, ScreenX, ScreenY, Font, Scale, bScalePosition) }; } catch (e) {};
+try { let fnprepatch_280 = HUD.prototype.DrawMaterialTriangle;HUD.prototype.DrawMaterialTriangle = function (Material, V0_Pos, V1_Pos, V2_Pos, V0_UV, V1_UV, V2_UV, V0_Color = {"R":1,"G":1,"B":1,"A":1}, V1_Color = {"R":1,"G":1,"B":1,"A":1}, V2_Color = {"R":1,"G":1,"B":1,"A":1}) { return fnprepatch_280.call(this, Material, V0_Pos, V1_Pos, V2_Pos, V0_UV, V1_UV, V2_UV, V0_Color, V1_Color, V2_Color) }; } catch (e) {};
+try { let fnprepatch_281 = HUD.prototype.DrawMaterialSimple;HUD.prototype.DrawMaterialSimple = function (Material, ScreenX, ScreenY, ScreenW, ScreenH, Scale = 1, bScalePosition = false) { return fnprepatch_281.call(this, Material, ScreenX, ScreenY, ScreenW, ScreenH, Scale, bScalePosition) }; } catch (e) {};
+try { let fnprepatch_282 = HUD.prototype.DrawMaterial;HUD.prototype.DrawMaterial = function (Material, ScreenX, ScreenY, ScreenW, ScreenH, MaterialU, MaterialV, MaterialUWidth, MaterialVHeight, Scale = 1, bScalePosition = false, Rotation = 0, RotPivot) { return fnprepatch_282.call(this, Material, ScreenX, ScreenY, ScreenW, ScreenH, MaterialU, MaterialV, MaterialUWidth, MaterialVHeight, Scale, bScalePosition, Rotation, RotPivot) }; } catch (e) {};
+try { let fnprepatch_283 = HUD.prototype.DrawLine;HUD.prototype.DrawLine = function (StartScreenX, StartScreenY, EndScreenX, EndScreenY, LineColor, LineThickness = 0) { return fnprepatch_283.call(this, StartScreenX, StartScreenY, EndScreenX, EndScreenY, LineColor, LineThickness) }; } catch (e) {};
+try { let fnprepatch_284 = HUD.prototype.AddHitBox;HUD.prototype.AddHitBox = function (Position, Size, InName, bConsumesInput, Priority = 0) { return fnprepatch_284.call(this, Position, Size, InName, bConsumesInput, Priority) }; } catch (e) {};
 try { HUD.prototype.HitBoxReleased = HUD.prototype.ReceiveHitBoxRelease; } catch (e) {};
 try { HUD.prototype.HitBoxEndCursorOver = HUD.prototype.ReceiveHitBoxEndCursorOver; } catch (e) {};
 try { HUD.prototype.HitBoxClicked = HUD.prototype.ReceiveHitBoxClick; } catch (e) {};
 try { HUD.prototype.HitBoxBeginCursorOver = HUD.prototype.ReceiveHitBoxBeginCursorOver; } catch (e) {};
-try { let fnprepatch_278 = DecalComponent.prototype.SetFadeOut;DecalComponent.prototype.SetFadeOut = function (StartDelay, Duration, DestroyOwnerAfterFade = true) { return fnprepatch_278.call(this, StartDelay, Duration, DestroyOwnerAfterFade) }; } catch (e) {};
-try { let fnprepatch_279 = LightComponent.prototype.SetLightColor;LightComponent.prototype.SetLightColor = function (NewLightColor, bSRGB = true) { return fnprepatch_279.call(this, NewLightColor, bSRGB) }; } catch (e) {};
-try { let fnprepatch_280 = SphereComponent.prototype.SetSphereRadius;SphereComponent.prototype.SetSphereRadius = function (InSphereRadius, bUpdateOverlaps = true) { return fnprepatch_280.call(this, InSphereRadius, bUpdateOverlaps) }; } catch (e) {};
-try { let fnprepatch_281 = ForceFeedbackComponent.prototype.Play;ForceFeedbackComponent.prototype.Play = function (StartTime = 0) { return fnprepatch_281.call(this, StartTime) }; } catch (e) {};
+try { let fnprepatch_285 = DecalComponent.prototype.SetFadeOut;DecalComponent.prototype.SetFadeOut = function (StartDelay, Duration, DestroyOwnerAfterFade = true) { return fnprepatch_285.call(this, StartDelay, Duration, DestroyOwnerAfterFade) }; } catch (e) {};
+try { let fnprepatch_286 = LightComponent.prototype.SetLightColor;LightComponent.prototype.SetLightColor = function (NewLightColor, bSRGB = true) { return fnprepatch_286.call(this, NewLightColor, bSRGB) }; } catch (e) {};
+try { LightComponent.prototype.SetUseIESIntensity = LightComponent.prototype.SetUseIESBrightness; } catch (e) {};
+try { LightComponent.prototype.SetIESIntensityScale = LightComponent.prototype.SetIESBrightnessScale; } catch (e) {};
+try { let fnprepatch_287 = SphereComponent.prototype.SetSphereRadius;SphereComponent.prototype.SetSphereRadius = function (InSphereRadius, bUpdateOverlaps = true) { return fnprepatch_287.call(this, InSphereRadius, bUpdateOverlaps) }; } catch (e) {};
+try { let fnprepatch_288 = ForceFeedbackComponent.prototype.Play;ForceFeedbackComponent.prototype.Play = function (StartTime = 0) { return fnprepatch_288.call(this, StartTime) }; } catch (e) {};
 try { ForceFeedbackComponent.prototype.GetAttenuationSettingsToApply = ForceFeedbackComponent.prototype.BP_GetAttenuationSettingsToApply; } catch (e) {};
-try { GameModeBase.prototype.OnPostLogin = GameModeBase.prototype.K2_PostLogin; } catch (e) {};
-try { GameModeBase.prototype.OnSwapPlayerControllers = GameModeBase.prototype.K2_OnSwapPlayerControllers; } catch (e) {};
-try { GameModeBase.prototype.OnRestartPlayer = GameModeBase.prototype.K2_OnRestartPlayer; } catch (e) {};
-try { GameModeBase.prototype.OnLogout = GameModeBase.prototype.K2_OnLogout; } catch (e) {};
-try { GameModeBase.prototype.OnChangeName = GameModeBase.prototype.K2_OnChangeName; } catch (e) {};
-try { GameModeBase.prototype.FindPlayerStart = GameModeBase.prototype.K2_FindPlayerStart; } catch (e) {};
-try { GameMode.prototype.OnSetMatchState = GameMode.prototype.K2_OnSetMatchState; } catch (e) {};
-try { let fnprepatch_282 = GameplayStatics.prototype.SuggestProjectileVelocity_CustomArc;GameplayStatics.prototype.SuggestProjectileVelocity_CustomArc = function (WorldContextObject, OutLaunchVelocity, StartPos, EndPos, OverrideGravityZ = 0, ArcParam = 0.5) { return fnprepatch_282.call(this, WorldContextObject, OutLaunchVelocity, StartPos, EndPos, OverrideGravityZ, ArcParam) }; } catch (e) {};
-try { let fnprepatch_283 = GameplayStatics.prototype.SpawnSoundAttached;GameplayStatics.prototype.SpawnSoundAttached = function (Sound, AttachToComponent, AttachPointName = "None", Location, Rotation, LocationType = "KeepRelativeOffset", bStopWhenAttachedToDestroyed = false, VolumeMultiplier = 1, PitchMultiplier = 1, StartTime = 0, AttenuationSettings = undefined, ConcurrencySettings = undefined, bAutoDestroy = true) { return fnprepatch_283.call(this, Sound, AttachToComponent, AttachPointName, Location, Rotation, LocationType, bStopWhenAttachedToDestroyed, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, ConcurrencySettings, bAutoDestroy) }; } catch (e) {};
-try { let fnprepatch_284 = GameplayStatics.prototype.SpawnSoundAtLocation;GameplayStatics.prototype.SpawnSoundAtLocation = function (WorldContextObject, Sound, Location, Rotation, VolumeMultiplier = 1, PitchMultiplier = 1, StartTime = 0, AttenuationSettings = undefined, ConcurrencySettings = undefined, bAutoDestroy = true) { return fnprepatch_284.call(this, WorldContextObject, Sound, Location, Rotation, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, ConcurrencySettings, bAutoDestroy) }; } catch (e) {};
-try { let fnprepatch_285 = GameplayStatics.prototype.SpawnSound2D;GameplayStatics.prototype.SpawnSound2D = function (WorldContextObject, Sound, VolumeMultiplier = 1, PitchMultiplier = 1, StartTime = 0, ConcurrencySettings = undefined, bPersistAcrossLevelTransition = false, bAutoDestroy = true) { return fnprepatch_285.call(this, WorldContextObject, Sound, VolumeMultiplier, PitchMultiplier, StartTime, ConcurrencySettings, bPersistAcrossLevelTransition, bAutoDestroy) }; } catch (e) {};
-try { let fnprepatch_286 = GameplayStatics.prototype.SpawnForceFeedbackAttached;GameplayStatics.prototype.SpawnForceFeedbackAttached = function (ForceFeedbackEffect, AttachToComponent, AttachPointName = "None", Location, Rotation, LocationType = "KeepRelativeOffset", bStopWhenAttachedToDestroyed = false, bLooping = false, IntensityMultiplier = 1, StartTime = 0, AttenuationSettings = undefined, bAutoDestroy = true) { return fnprepatch_286.call(this, ForceFeedbackEffect, AttachToComponent, AttachPointName, Location, Rotation, LocationType, bStopWhenAttachedToDestroyed, bLooping, IntensityMultiplier, StartTime, AttenuationSettings, bAutoDestroy) }; } catch (e) {};
-try { let fnprepatch_287 = GameplayStatics.prototype.SpawnForceFeedbackAtLocation;GameplayStatics.prototype.SpawnForceFeedbackAtLocation = function (WorldContextObject, ForceFeedbackEffect, Location, Rotation, bLooping = false, IntensityMultiplier = 1, StartTime = 0, AttenuationSettings = undefined, bAutoDestroy = true) { return fnprepatch_287.call(this, WorldContextObject, ForceFeedbackEffect, Location, Rotation, bLooping, IntensityMultiplier, StartTime, AttenuationSettings, bAutoDestroy) }; } catch (e) {};
-try { let fnprepatch_288 = GameplayStatics.prototype.SpawnEmitterAttached;GameplayStatics.prototype.SpawnEmitterAttached = function (EmitterTemplate, AttachToComponent, AttachPointName = "None", Location, Rotation, Scale, LocationType = "KeepRelativeOffset", bAutoDestroy = true, PoolingMethod = "None") { return fnprepatch_288.call(this, EmitterTemplate, AttachToComponent, AttachPointName, Location, Rotation, Scale, LocationType, bAutoDestroy, PoolingMethod) }; } catch (e) {};
-try { let fnprepatch_289 = GameplayStatics.prototype.SpawnEmitterAtLocation;GameplayStatics.prototype.SpawnEmitterAtLocation = function (WorldContextObject, EmitterTemplate, Location, Rotation, Scale, bAutoDestroy = true, PoolingMethod = "None") { return fnprepatch_289.call(this, WorldContextObject, EmitterTemplate, Location, Rotation, Scale, bAutoDestroy, PoolingMethod) }; } catch (e) {};
-try { let fnprepatch_290 = GameplayStatics.prototype.SpawnDialogueAttached;GameplayStatics.prototype.SpawnDialogueAttached = function (Dialogue, Context, AttachToComponent, AttachPointName = "None", Location, Rotation, LocationType = "KeepRelativeOffset", bStopWhenAttachedToDestroyed = false, VolumeMultiplier = 1, PitchMultiplier = 1, StartTime = 0, AttenuationSettings = undefined, bAutoDestroy = true) { return fnprepatch_290.call(this, Dialogue, Context, AttachToComponent, AttachPointName, Location, Rotation, LocationType, bStopWhenAttachedToDestroyed, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, bAutoDestroy) }; } catch (e) {};
-try { let fnprepatch_291 = GameplayStatics.prototype.SpawnDialogueAtLocation;GameplayStatics.prototype.SpawnDialogueAtLocation = function (WorldContextObject, Dialogue, Context, Location, Rotation, VolumeMultiplier = 1, PitchMultiplier = 1, StartTime = 0, AttenuationSettings = undefined, bAutoDestroy = true) { return fnprepatch_291.call(this, WorldContextObject, Dialogue, Context, Location, Rotation, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, bAutoDestroy) }; } catch (e) {};
-try { let fnprepatch_292 = GameplayStatics.prototype.SpawnDialogue2D;GameplayStatics.prototype.SpawnDialogue2D = function (WorldContextObject, Dialogue, Context, VolumeMultiplier = 1, PitchMultiplier = 1, StartTime = 0, bAutoDestroy = true) { return fnprepatch_292.call(this, WorldContextObject, Dialogue, Context, VolumeMultiplier, PitchMultiplier, StartTime, bAutoDestroy) }; } catch (e) {};
-try { let fnprepatch_293 = GameplayStatics.prototype.SpawnDecalAttached;GameplayStatics.prototype.SpawnDecalAttached = function (DecalMaterial, DecalSize, AttachToComponent, AttachPointName = "None", Location, Rotation, LocationType = "KeepRelativeOffset", LifeSpan = 0) { return fnprepatch_293.call(this, DecalMaterial, DecalSize, AttachToComponent, AttachPointName, Location, Rotation, LocationType, LifeSpan) }; } catch (e) {};
-try { let fnprepatch_294 = GameplayStatics.prototype.SpawnDecalAtLocation;GameplayStatics.prototype.SpawnDecalAtLocation = function (WorldContextObject, DecalMaterial, DecalSize, Location, Rotation, LifeSpan = 0) { return fnprepatch_294.call(this, WorldContextObject, DecalMaterial, DecalSize, Location, Rotation, LifeSpan) }; } catch (e) {};
-try { let fnprepatch_295 = GameplayStatics.prototype.SetSoundMixClassOverride;GameplayStatics.prototype.SetSoundMixClassOverride = function (WorldContextObject, InSoundMixModifier, InSoundClass, Volume = 1, Pitch = 1, FadeInTime = 1, bApplyToChildren = true) { return fnprepatch_295.call(this, WorldContextObject, InSoundMixModifier, InSoundClass, Volume, Pitch, FadeInTime, bApplyToChildren) }; } catch (e) {};
-try { let fnprepatch_296 = GameplayStatics.prototype.SetGlobalListenerFocusParameters;GameplayStatics.prototype.SetGlobalListenerFocusParameters = function (WorldContextObject, FocusAzimuthScale = 1, NonFocusAzimuthScale = 1, FocusDistanceScale = 1, NonFocusDistanceScale = 1, FocusVolumeScale = 1, NonFocusVolumeScale = 1, FocusPriorityScale = 1, NonFocusPriorityScale = 1) { return fnprepatch_296.call(this, WorldContextObject, FocusAzimuthScale, NonFocusAzimuthScale, FocusDistanceScale, NonFocusDistanceScale, FocusVolumeScale, NonFocusVolumeScale, FocusPriorityScale, NonFocusPriorityScale) }; } catch (e) {};
-try { let fnprepatch_297 = GameplayStatics.prototype.ProjectWorldToScreen;GameplayStatics.prototype.ProjectWorldToScreen = function (Player, WorldPosition, ScreenPosition, bPlayerViewportRelative = false) { return fnprepatch_297.call(this, Player, WorldPosition, ScreenPosition, bPlayerViewportRelative) }; } catch (e) {};
-try { let fnprepatch_298 = GameplayStatics.prototype.PlayWorldCameraShake;GameplayStatics.prototype.PlayWorldCameraShake = function (WorldContextObject, Shake, Epicenter, InnerRadius, OuterRadius, Falloff = 1, bOrientShakeTowardsEpicenter = false) { return fnprepatch_298.call(this, WorldContextObject, Shake, Epicenter, InnerRadius, OuterRadius, Falloff, bOrientShakeTowardsEpicenter) }; } catch (e) {};
-try { let fnprepatch_299 = GameplayStatics.prototype.PlaySoundAtLocation;GameplayStatics.prototype.PlaySoundAtLocation = function (WorldContextObject, Sound, Location, Rotation, VolumeMultiplier = 1, PitchMultiplier = 1, StartTime = 0, AttenuationSettings = undefined, ConcurrencySettings = undefined, OwningActor = undefined) { return fnprepatch_299.call(this, WorldContextObject, Sound, Location, Rotation, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, ConcurrencySettings, OwningActor) }; } catch (e) {};
-try { let fnprepatch_300 = GameplayStatics.prototype.PlaySound2D;GameplayStatics.prototype.PlaySound2D = function (WorldContextObject, Sound, VolumeMultiplier = 1, PitchMultiplier = 1, StartTime = 0, ConcurrencySettings = undefined, OwningActor = undefined) { return fnprepatch_300.call(this, WorldContextObject, Sound, VolumeMultiplier, PitchMultiplier, StartTime, ConcurrencySettings, OwningActor) }; } catch (e) {};
-try { let fnprepatch_301 = GameplayStatics.prototype.PlayDialogueAtLocation;GameplayStatics.prototype.PlayDialogueAtLocation = function (WorldContextObject, Dialogue, Context, Location, Rotation, VolumeMultiplier = 1, PitchMultiplier = 1, StartTime = 0, AttenuationSettings = undefined) { return fnprepatch_301.call(this, WorldContextObject, Dialogue, Context, Location, Rotation, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings) }; } catch (e) {};
-try { let fnprepatch_302 = GameplayStatics.prototype.PlayDialogue2D;GameplayStatics.prototype.PlayDialogue2D = function (WorldContextObject, Dialogue, Context, VolumeMultiplier = 1, PitchMultiplier = 1, StartTime = 0) { return fnprepatch_302.call(this, WorldContextObject, Dialogue, Context, VolumeMultiplier, PitchMultiplier, StartTime) }; } catch (e) {};
-try { let fnprepatch_303 = GameplayStatics.prototype.OpenLevel;GameplayStatics.prototype.OpenLevel = function (WorldContextObject, LevelName, bAbsolute = true, Options) { return fnprepatch_303.call(this, WorldContextObject, LevelName, bAbsolute, Options) }; } catch (e) {};
-try { let fnprepatch_304 = GameplayStatics.prototype.GetCurrentLevelName;GameplayStatics.prototype.GetCurrentLevelName = function (WorldContextObject, bRemovePrefixString = true) { return fnprepatch_304.call(this, WorldContextObject, bRemovePrefixString) }; } catch (e) {};
-try { let fnprepatch_305 = GameplayStatics.prototype.CreateSound2D;GameplayStatics.prototype.CreateSound2D = function (WorldContextObject, Sound, VolumeMultiplier = 1, PitchMultiplier = 1, StartTime = 0, ConcurrencySettings = undefined, bPersistAcrossLevelTransition = false, bAutoDestroy = true) { return fnprepatch_305.call(this, WorldContextObject, Sound, VolumeMultiplier, PitchMultiplier, StartTime, ConcurrencySettings, bPersistAcrossLevelTransition, bAutoDestroy) }; } catch (e) {};
-try { let fnprepatch_306 = GameplayStatics.prototype.CreatePlayer;GameplayStatics.prototype.CreatePlayer = function (WorldContextObject, ControllerId = -1, bSpawnPawn = true) { return fnprepatch_306.call(this, WorldContextObject, ControllerId, bSpawnPawn) }; } catch (e) {};
-try { let fnprepatch_307 = GameplayStatics.prototype.ClearSoundMixClassOverride;GameplayStatics.prototype.ClearSoundMixClassOverride = function (WorldContextObject, InSoundMixModifier, InSoundClass, FadeOutTime = 1) { return fnprepatch_307.call(this, WorldContextObject, InSoundMixModifier, InSoundClass, FadeOutTime) }; } catch (e) {};
-try { let fnprepatch_308 = GameplayStatics.prototype.Blueprint_PredictProjectilePath_ByTraceChannel;GameplayStatics.prototype.Blueprint_PredictProjectilePath_ByTraceChannel = function (WorldContextObject, OutHit, OutPathPositions, OutLastTraceDestination, StartPos, LaunchVelocity, bTracePath, ProjectileRadius, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, DrawDebugTime, SimFrequency = 15, MaxSimTime = 2, OverrideGravityZ = 0) { return fnprepatch_308.call(this, WorldContextObject, OutHit, OutPathPositions, OutLastTraceDestination, StartPos, LaunchVelocity, bTracePath, ProjectileRadius, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, DrawDebugTime, SimFrequency, MaxSimTime, OverrideGravityZ) }; } catch (e) {};
-try { let fnprepatch_309 = GameplayStatics.prototype.Blueprint_PredictProjectilePath_ByObjectType;GameplayStatics.prototype.Blueprint_PredictProjectilePath_ByObjectType = function (WorldContextObject, OutHit, OutPathPositions, OutLastTraceDestination, StartPos, LaunchVelocity, bTracePath, ProjectileRadius, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, DrawDebugTime, SimFrequency = 15, MaxSimTime = 2, OverrideGravityZ = 0) { return fnprepatch_309.call(this, WorldContextObject, OutHit, OutPathPositions, OutLastTraceDestination, StartPos, LaunchVelocity, bTracePath, ProjectileRadius, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, DrawDebugTime, SimFrequency, MaxSimTime, OverrideGravityZ) }; } catch (e) {};
-try { let fnprepatch_310 = GameplayStatics.prototype.BeginSpawningActorFromClass;GameplayStatics.prototype.BeginSpawningActorFromClass = function (WorldContextObject, ActorClass, SpawnTransform, bNoCollisionFail = false, Owner = undefined) { return fnprepatch_310.call(this, WorldContextObject, ActorClass, SpawnTransform, bNoCollisionFail, Owner) }; } catch (e) {};
-try { let fnprepatch_311 = GameplayStatics.prototype.BeginDeferredActorSpawnFromClass;GameplayStatics.prototype.BeginDeferredActorSpawnFromClass = function (WorldContextObject, ActorClass, SpawnTransform, CollisionHandlingOverride = "Undefined", Owner = undefined) { return fnprepatch_311.call(this, WorldContextObject, ActorClass, SpawnTransform, CollisionHandlingOverride, Owner) }; } catch (e) {};
-try { let fnprepatch_312 = GameplayStatics.prototype.ApplyRadialDamageWithFalloff;GameplayStatics.prototype.ApplyRadialDamageWithFalloff = function (WorldContextObject, BaseDamage, MinimumDamage, Origin, DamageInnerRadius, DamageOuterRadius, DamageFalloff, DamageTypeClass, IgnoreActors, DamageCauser = undefined, InstigatedByController = undefined, DamagePreventionChannel = "ECC_Visibility") { return fnprepatch_312.call(this, WorldContextObject, BaseDamage, MinimumDamage, Origin, DamageInnerRadius, DamageOuterRadius, DamageFalloff, DamageTypeClass, IgnoreActors, DamageCauser, InstigatedByController, DamagePreventionChannel) }; } catch (e) {};
-try { let fnprepatch_313 = GameplayStatics.prototype.ApplyRadialDamage;GameplayStatics.prototype.ApplyRadialDamage = function (WorldContextObject, BaseDamage, Origin, DamageRadius, DamageTypeClass, IgnoreActors, DamageCauser = undefined, InstigatedByController = undefined, bDoFullDamage = false, DamagePreventionChannel = "ECC_Visibility") { return fnprepatch_313.call(this, WorldContextObject, BaseDamage, Origin, DamageRadius, DamageTypeClass, IgnoreActors, DamageCauser, InstigatedByController, bDoFullDamage, DamagePreventionChannel) }; } catch (e) {};
-try { let fnprepatch_314 = GameplayStatics.prototype.ActivateReverbEffect;GameplayStatics.prototype.ActivateReverbEffect = function (WorldContextObject, ReverbEffect, TagName, Priority = 0, Volume = 0.5, FadeTime = 2) { return fnprepatch_314.call(this, WorldContextObject, ReverbEffect, TagName, Priority, Volume, FadeTime) }; } catch (e) {};
+try { let fnprepatch_289 = GameplayStatics.prototype.SuggestProjectileVelocity_CustomArc;GameplayStatics.prototype.SuggestProjectileVelocity_CustomArc = function (WorldContextObject, OutLaunchVelocity, StartPos, EndPos, OverrideGravityZ = 0, ArcParam = 0.5) { return fnprepatch_289.call(this, WorldContextObject, OutLaunchVelocity, StartPos, EndPos, OverrideGravityZ, ArcParam) }; } catch (e) {};
+try { let fnprepatch_290 = GameplayStatics.prototype.SpawnSoundAttached;GameplayStatics.prototype.SpawnSoundAttached = function (Sound, AttachToComponent, AttachPointName = "None", Location, Rotation, LocationType = "KeepRelativeOffset", bStopWhenAttachedToDestroyed = false, VolumeMultiplier = 1, PitchMultiplier = 1, StartTime = 0, AttenuationSettings = undefined, ConcurrencySettings = undefined, bAutoDestroy = true) { return fnprepatch_290.call(this, Sound, AttachToComponent, AttachPointName, Location, Rotation, LocationType, bStopWhenAttachedToDestroyed, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, ConcurrencySettings, bAutoDestroy) }; } catch (e) {};
+try { let fnprepatch_291 = GameplayStatics.prototype.SpawnSoundAtLocation;GameplayStatics.prototype.SpawnSoundAtLocation = function (WorldContextObject, Sound, Location, Rotation, VolumeMultiplier = 1, PitchMultiplier = 1, StartTime = 0, AttenuationSettings = undefined, ConcurrencySettings = undefined, bAutoDestroy = true) { return fnprepatch_291.call(this, WorldContextObject, Sound, Location, Rotation, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, ConcurrencySettings, bAutoDestroy) }; } catch (e) {};
+try { let fnprepatch_292 = GameplayStatics.prototype.SpawnSound2D;GameplayStatics.prototype.SpawnSound2D = function (WorldContextObject, Sound, VolumeMultiplier = 1, PitchMultiplier = 1, StartTime = 0, ConcurrencySettings = undefined, bPersistAcrossLevelTransition = false, bAutoDestroy = true) { return fnprepatch_292.call(this, WorldContextObject, Sound, VolumeMultiplier, PitchMultiplier, StartTime, ConcurrencySettings, bPersistAcrossLevelTransition, bAutoDestroy) }; } catch (e) {};
+try { let fnprepatch_293 = GameplayStatics.prototype.SpawnForceFeedbackAttached;GameplayStatics.prototype.SpawnForceFeedbackAttached = function (ForceFeedbackEffect, AttachToComponent, AttachPointName = "None", Location, Rotation, LocationType = "KeepRelativeOffset", bStopWhenAttachedToDestroyed = false, bLooping = false, IntensityMultiplier = 1, StartTime = 0, AttenuationSettings = undefined, bAutoDestroy = true) { return fnprepatch_293.call(this, ForceFeedbackEffect, AttachToComponent, AttachPointName, Location, Rotation, LocationType, bStopWhenAttachedToDestroyed, bLooping, IntensityMultiplier, StartTime, AttenuationSettings, bAutoDestroy) }; } catch (e) {};
+try { let fnprepatch_294 = GameplayStatics.prototype.SpawnForceFeedbackAtLocation;GameplayStatics.prototype.SpawnForceFeedbackAtLocation = function (WorldContextObject, ForceFeedbackEffect, Location, Rotation, bLooping = false, IntensityMultiplier = 1, StartTime = 0, AttenuationSettings = undefined, bAutoDestroy = true) { return fnprepatch_294.call(this, WorldContextObject, ForceFeedbackEffect, Location, Rotation, bLooping, IntensityMultiplier, StartTime, AttenuationSettings, bAutoDestroy) }; } catch (e) {};
+try { let fnprepatch_295 = GameplayStatics.prototype.SpawnEmitterAttached;GameplayStatics.prototype.SpawnEmitterAttached = function (EmitterTemplate, AttachToComponent, AttachPointName = "None", Location, Rotation, Scale, LocationType = "KeepRelativeOffset", bAutoDestroy = true, PoolingMethod = "None") { return fnprepatch_295.call(this, EmitterTemplate, AttachToComponent, AttachPointName, Location, Rotation, Scale, LocationType, bAutoDestroy, PoolingMethod) }; } catch (e) {};
+try { let fnprepatch_296 = GameplayStatics.prototype.SpawnEmitterAtLocation;GameplayStatics.prototype.SpawnEmitterAtLocation = function (WorldContextObject, EmitterTemplate, Location, Rotation, Scale, bAutoDestroy = true, PoolingMethod = "None") { return fnprepatch_296.call(this, WorldContextObject, EmitterTemplate, Location, Rotation, Scale, bAutoDestroy, PoolingMethod) }; } catch (e) {};
+try { let fnprepatch_297 = GameplayStatics.prototype.SpawnDialogueAttached;GameplayStatics.prototype.SpawnDialogueAttached = function (Dialogue, Context, AttachToComponent, AttachPointName = "None", Location, Rotation, LocationType = "KeepRelativeOffset", bStopWhenAttachedToDestroyed = false, VolumeMultiplier = 1, PitchMultiplier = 1, StartTime = 0, AttenuationSettings = undefined, bAutoDestroy = true) { return fnprepatch_297.call(this, Dialogue, Context, AttachToComponent, AttachPointName, Location, Rotation, LocationType, bStopWhenAttachedToDestroyed, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, bAutoDestroy) }; } catch (e) {};
+try { let fnprepatch_298 = GameplayStatics.prototype.SpawnDialogueAtLocation;GameplayStatics.prototype.SpawnDialogueAtLocation = function (WorldContextObject, Dialogue, Context, Location, Rotation, VolumeMultiplier = 1, PitchMultiplier = 1, StartTime = 0, AttenuationSettings = undefined, bAutoDestroy = true) { return fnprepatch_298.call(this, WorldContextObject, Dialogue, Context, Location, Rotation, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, bAutoDestroy) }; } catch (e) {};
+try { let fnprepatch_299 = GameplayStatics.prototype.SpawnDialogue2D;GameplayStatics.prototype.SpawnDialogue2D = function (WorldContextObject, Dialogue, Context, VolumeMultiplier = 1, PitchMultiplier = 1, StartTime = 0, bAutoDestroy = true) { return fnprepatch_299.call(this, WorldContextObject, Dialogue, Context, VolumeMultiplier, PitchMultiplier, StartTime, bAutoDestroy) }; } catch (e) {};
+try { let fnprepatch_300 = GameplayStatics.prototype.SpawnDecalAttached;GameplayStatics.prototype.SpawnDecalAttached = function (DecalMaterial, DecalSize, AttachToComponent, AttachPointName = "None", Location, Rotation, LocationType = "KeepRelativeOffset", LifeSpan = 0) { return fnprepatch_300.call(this, DecalMaterial, DecalSize, AttachToComponent, AttachPointName, Location, Rotation, LocationType, LifeSpan) }; } catch (e) {};
+try { let fnprepatch_301 = GameplayStatics.prototype.SpawnDecalAtLocation;GameplayStatics.prototype.SpawnDecalAtLocation = function (WorldContextObject, DecalMaterial, DecalSize, Location, Rotation, LifeSpan = 0) { return fnprepatch_301.call(this, WorldContextObject, DecalMaterial, DecalSize, Location, Rotation, LifeSpan) }; } catch (e) {};
+try { let fnprepatch_302 = GameplayStatics.prototype.SetSoundMixClassOverride;GameplayStatics.prototype.SetSoundMixClassOverride = function (WorldContextObject, InSoundMixModifier, InSoundClass, Volume = 1, Pitch = 1, FadeInTime = 1, bApplyToChildren = true) { return fnprepatch_302.call(this, WorldContextObject, InSoundMixModifier, InSoundClass, Volume, Pitch, FadeInTime, bApplyToChildren) }; } catch (e) {};
+try { let fnprepatch_303 = GameplayStatics.prototype.SetGlobalListenerFocusParameters;GameplayStatics.prototype.SetGlobalListenerFocusParameters = function (WorldContextObject, FocusAzimuthScale = 1, NonFocusAzimuthScale = 1, FocusDistanceScale = 1, NonFocusDistanceScale = 1, FocusVolumeScale = 1, NonFocusVolumeScale = 1, FocusPriorityScale = 1, NonFocusPriorityScale = 1) { return fnprepatch_303.call(this, WorldContextObject, FocusAzimuthScale, NonFocusAzimuthScale, FocusDistanceScale, NonFocusDistanceScale, FocusVolumeScale, NonFocusVolumeScale, FocusPriorityScale, NonFocusPriorityScale) }; } catch (e) {};
+try { let fnprepatch_304 = GameplayStatics.prototype.ProjectWorldToScreen;GameplayStatics.prototype.ProjectWorldToScreen = function (Player, WorldPosition, ScreenPosition, bPlayerViewportRelative = false) { return fnprepatch_304.call(this, Player, WorldPosition, ScreenPosition, bPlayerViewportRelative) }; } catch (e) {};
+try { let fnprepatch_305 = GameplayStatics.prototype.PlayWorldCameraShake;GameplayStatics.prototype.PlayWorldCameraShake = function (WorldContextObject, Shake, Epicenter, InnerRadius, OuterRadius, Falloff = 1, bOrientShakeTowardsEpicenter = false) { return fnprepatch_305.call(this, WorldContextObject, Shake, Epicenter, InnerRadius, OuterRadius, Falloff, bOrientShakeTowardsEpicenter) }; } catch (e) {};
+try { let fnprepatch_306 = GameplayStatics.prototype.PlaySoundAtLocation;GameplayStatics.prototype.PlaySoundAtLocation = function (WorldContextObject, Sound, Location, Rotation, VolumeMultiplier = 1, PitchMultiplier = 1, StartTime = 0, AttenuationSettings = undefined, ConcurrencySettings = undefined, OwningActor = undefined) { return fnprepatch_306.call(this, WorldContextObject, Sound, Location, Rotation, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, ConcurrencySettings, OwningActor) }; } catch (e) {};
+try { let fnprepatch_307 = GameplayStatics.prototype.PlaySound2D;GameplayStatics.prototype.PlaySound2D = function (WorldContextObject, Sound, VolumeMultiplier = 1, PitchMultiplier = 1, StartTime = 0, ConcurrencySettings = undefined, OwningActor = undefined) { return fnprepatch_307.call(this, WorldContextObject, Sound, VolumeMultiplier, PitchMultiplier, StartTime, ConcurrencySettings, OwningActor) }; } catch (e) {};
+try { let fnprepatch_308 = GameplayStatics.prototype.PlayDialogueAtLocation;GameplayStatics.prototype.PlayDialogueAtLocation = function (WorldContextObject, Dialogue, Context, Location, Rotation, VolumeMultiplier = 1, PitchMultiplier = 1, StartTime = 0, AttenuationSettings = undefined) { return fnprepatch_308.call(this, WorldContextObject, Dialogue, Context, Location, Rotation, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings) }; } catch (e) {};
+try { let fnprepatch_309 = GameplayStatics.prototype.PlayDialogue2D;GameplayStatics.prototype.PlayDialogue2D = function (WorldContextObject, Dialogue, Context, VolumeMultiplier = 1, PitchMultiplier = 1, StartTime = 0) { return fnprepatch_309.call(this, WorldContextObject, Dialogue, Context, VolumeMultiplier, PitchMultiplier, StartTime) }; } catch (e) {};
+try { let fnprepatch_310 = GameplayStatics.prototype.OpenLevel;GameplayStatics.prototype.OpenLevel = function (WorldContextObject, LevelName, bAbsolute = true, Options) { return fnprepatch_310.call(this, WorldContextObject, LevelName, bAbsolute, Options) }; } catch (e) {};
+try { let fnprepatch_311 = GameplayStatics.prototype.GetCurrentLevelName;GameplayStatics.prototype.GetCurrentLevelName = function (WorldContextObject, bRemovePrefixString = true) { return fnprepatch_311.call(this, WorldContextObject, bRemovePrefixString) }; } catch (e) {};
+try { let fnprepatch_312 = GameplayStatics.prototype.CreateSound2D;GameplayStatics.prototype.CreateSound2D = function (WorldContextObject, Sound, VolumeMultiplier = 1, PitchMultiplier = 1, StartTime = 0, ConcurrencySettings = undefined, bPersistAcrossLevelTransition = false, bAutoDestroy = true) { return fnprepatch_312.call(this, WorldContextObject, Sound, VolumeMultiplier, PitchMultiplier, StartTime, ConcurrencySettings, bPersistAcrossLevelTransition, bAutoDestroy) }; } catch (e) {};
+try { let fnprepatch_313 = GameplayStatics.prototype.CreatePlayer;GameplayStatics.prototype.CreatePlayer = function (WorldContextObject, ControllerId = -1, bSpawnPlayerController = true) { return fnprepatch_313.call(this, WorldContextObject, ControllerId, bSpawnPlayerController) }; } catch (e) {};
+try { let fnprepatch_314 = GameplayStatics.prototype.ClearSoundMixClassOverride;GameplayStatics.prototype.ClearSoundMixClassOverride = function (WorldContextObject, InSoundMixModifier, InSoundClass, FadeOutTime = 1) { return fnprepatch_314.call(this, WorldContextObject, InSoundMixModifier, InSoundClass, FadeOutTime) }; } catch (e) {};
+try { let fnprepatch_315 = GameplayStatics.prototype.Blueprint_PredictProjectilePath_ByTraceChannel;GameplayStatics.prototype.Blueprint_PredictProjectilePath_ByTraceChannel = function (WorldContextObject, OutHit, OutPathPositions, OutLastTraceDestination, StartPos, LaunchVelocity, bTracePath, ProjectileRadius, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, DrawDebugTime, SimFrequency = 15, MaxSimTime = 2, OverrideGravityZ = 0) { return fnprepatch_315.call(this, WorldContextObject, OutHit, OutPathPositions, OutLastTraceDestination, StartPos, LaunchVelocity, bTracePath, ProjectileRadius, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, DrawDebugTime, SimFrequency, MaxSimTime, OverrideGravityZ) }; } catch (e) {};
+try { let fnprepatch_316 = GameplayStatics.prototype.Blueprint_PredictProjectilePath_ByObjectType;GameplayStatics.prototype.Blueprint_PredictProjectilePath_ByObjectType = function (WorldContextObject, OutHit, OutPathPositions, OutLastTraceDestination, StartPos, LaunchVelocity, bTracePath, ProjectileRadius, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, DrawDebugTime, SimFrequency = 15, MaxSimTime = 2, OverrideGravityZ = 0) { return fnprepatch_316.call(this, WorldContextObject, OutHit, OutPathPositions, OutLastTraceDestination, StartPos, LaunchVelocity, bTracePath, ProjectileRadius, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, DrawDebugTime, SimFrequency, MaxSimTime, OverrideGravityZ) }; } catch (e) {};
+try { let fnprepatch_317 = GameplayStatics.prototype.BeginSpawningActorFromClass;GameplayStatics.prototype.BeginSpawningActorFromClass = function (WorldContextObject, ActorClass, SpawnTransform, bNoCollisionFail = false, Owner = undefined) { return fnprepatch_317.call(this, WorldContextObject, ActorClass, SpawnTransform, bNoCollisionFail, Owner) }; } catch (e) {};
+try { let fnprepatch_318 = GameplayStatics.prototype.BeginDeferredActorSpawnFromClass;GameplayStatics.prototype.BeginDeferredActorSpawnFromClass = function (WorldContextObject, ActorClass, SpawnTransform, CollisionHandlingOverride = "Undefined", Owner = undefined) { return fnprepatch_318.call(this, WorldContextObject, ActorClass, SpawnTransform, CollisionHandlingOverride, Owner) }; } catch (e) {};
+try { let fnprepatch_319 = GameplayStatics.prototype.ApplyRadialDamageWithFalloff;GameplayStatics.prototype.ApplyRadialDamageWithFalloff = function (WorldContextObject, BaseDamage, MinimumDamage, Origin, DamageInnerRadius, DamageOuterRadius, DamageFalloff, DamageTypeClass, IgnoreActors, DamageCauser = undefined, InstigatedByController = undefined, DamagePreventionChannel = "ECC_Visibility") { return fnprepatch_319.call(this, WorldContextObject, BaseDamage, MinimumDamage, Origin, DamageInnerRadius, DamageOuterRadius, DamageFalloff, DamageTypeClass, IgnoreActors, DamageCauser, InstigatedByController, DamagePreventionChannel) }; } catch (e) {};
+try { let fnprepatch_320 = GameplayStatics.prototype.ApplyRadialDamage;GameplayStatics.prototype.ApplyRadialDamage = function (WorldContextObject, BaseDamage, Origin, DamageRadius, DamageTypeClass, IgnoreActors, DamageCauser = undefined, InstigatedByController = undefined, bDoFullDamage = false, DamagePreventionChannel = "ECC_Visibility") { return fnprepatch_320.call(this, WorldContextObject, BaseDamage, Origin, DamageRadius, DamageTypeClass, IgnoreActors, DamageCauser, InstigatedByController, bDoFullDamage, DamagePreventionChannel) }; } catch (e) {};
+try { let fnprepatch_321 = GameplayStatics.prototype.ActivateReverbEffect;GameplayStatics.prototype.ActivateReverbEffect = function (WorldContextObject, ReverbEffect, TagName, Priority = 0, Volume = 0.5, FadeTime = 2) { return fnprepatch_321.call(this, WorldContextObject, ReverbEffect, TagName, Priority, Volume, FadeTime) }; } catch (e) {};
 try { GameplayStatics.prototype.SuggestProjectileVelocityCustomArc = GameplayStatics.prototype.SuggestProjectileVelocity_CustomArc; } catch (e) {};
 try { GameplayStatics.SuggestProjectileVelocityCustomArc = GameplayStatics.SuggestProjectileVelocity_CustomArc; } catch (e) {};
 try { GameplayStatics.prototype.GetClass = GameplayStatics.prototype.GetObjectClass; } catch (e) {};
@@ -724,23 +793,23 @@ try { GameplayStatics.prototype.PredictProjectilePathByObjectType = GameplayStat
 try { GameplayStatics.PredictProjectilePathByObjectType = GameplayStatics.Blueprint_PredictProjectilePath_ByObjectType; } catch (e) {};
 try { GameplayStatics.prototype.PredictProjectilePath = GameplayStatics.prototype.Blueprint_PredictProjectilePath_Advanced; } catch (e) {};
 try { GameplayStatics.PredictProjectilePath = GameplayStatics.Blueprint_PredictProjectilePath_Advanced; } catch (e) {};
-try { let fnprepatch_315 = GameUserSettings.prototype.RunHardwareBenchmark;GameUserSettings.prototype.RunHardwareBenchmark = function (WorkScale = 10, CPUMultiplier = 1, GPUMultiplier = 1) { return fnprepatch_315.call(this, WorkScale, CPUMultiplier, GPUMultiplier) }; } catch (e) {};
-try { let fnprepatch_316 = GameUserSettings.prototype.LoadSettings;GameUserSettings.prototype.LoadSettings = function (bForceReload = false) { return fnprepatch_316.call(this, bForceReload) }; } catch (e) {};
-try { let fnprepatch_317 = GameUserSettings.prototype.EnableHDRDisplayOutput;GameUserSettings.prototype.EnableHDRDisplayOutput = function (bEnable, DisplayNits = 1000) { return fnprepatch_317.call(this, bEnable, DisplayNits) }; } catch (e) {};
+try { let fnprepatch_322 = GameUserSettings.prototype.RunHardwareBenchmark;GameUserSettings.prototype.RunHardwareBenchmark = function (WorkScale = 10, CPUMultiplier = 1, GPUMultiplier = 1) { return fnprepatch_322.call(this, WorkScale, CPUMultiplier, GPUMultiplier) }; } catch (e) {};
+try { let fnprepatch_323 = GameUserSettings.prototype.LoadSettings;GameUserSettings.prototype.LoadSettings = function (bForceReload = false) { return fnprepatch_323.call(this, bForceReload) }; } catch (e) {};
+try { let fnprepatch_324 = GameUserSettings.prototype.EnableHDRDisplayOutput;GameUserSettings.prototype.EnableHDRDisplayOutput = function (bEnable, DisplayNits = 1000) { return fnprepatch_324.call(this, bEnable, DisplayNits) }; } catch (e) {};
 try { GameUserSettings.prototype.SetResolutionScaleValue = GameUserSettings.prototype.SetResolutionScaleValueEx; } catch (e) {};
 try { GameUserSettings.prototype.SetResolutionScaleValue_Deprecated = GameUserSettings.prototype.SetResolutionScaleValue; } catch (e) {};
 try { GameUserSettings.prototype.GetResolutionScaleInformation = GameUserSettings.prototype.GetResolutionScaleInformationEx; } catch (e) {};
 try { GameUserSettings.prototype.GetResolutionScaleInformation_Deprecated = GameUserSettings.prototype.GetResolutionScaleInformation; } catch (e) {};
-try { let fnprepatch_318 = HealthSnapshotBlueprintLibrary.prototype.LogPerformanceSnapshot;HealthSnapshotBlueprintLibrary.prototype.LogPerformanceSnapshot = function (SnapshotTitle, bResetStats = true) { return fnprepatch_318.call(this, SnapshotTitle, bResetStats) }; } catch (e) {};
-try { let fnprepatch_319 = ImportanceSamplingLibrary.prototype.RandomSobolCell3D;ImportanceSamplingLibrary.prototype.RandomSobolCell3D = function (Index, NumCells = 1, Cell, Seed) { return fnprepatch_319.call(this, Index, NumCells, Cell, Seed) }; } catch (e) {};
-try { let fnprepatch_320 = ImportanceSamplingLibrary.prototype.RandomSobolCell2D;ImportanceSamplingLibrary.prototype.RandomSobolCell2D = function (Index, NumCells = 1, Cell = {"X":0,"Y":0}, Seed = {"X":0,"Y":0}) { return fnprepatch_320.call(this, Index, NumCells, Cell, Seed) }; } catch (e) {};
-try { let fnprepatch_321 = ImportanceSamplingLibrary.prototype.NextSobolCell3D;ImportanceSamplingLibrary.prototype.NextSobolCell3D = function (Index, NumCells = 1, PreviousValue) { return fnprepatch_321.call(this, Index, NumCells, PreviousValue) }; } catch (e) {};
-try { let fnprepatch_322 = ImportanceSamplingLibrary.prototype.NextSobolCell2D;ImportanceSamplingLibrary.prototype.NextSobolCell2D = function (Index, NumCells = 1, PreviousValue = {"X":0,"Y":0}) { return fnprepatch_322.call(this, Index, NumCells, PreviousValue) }; } catch (e) {};
-try { let fnprepatch_323 = InputSettings.prototype.RemoveAxisMapping;InputSettings.prototype.RemoveAxisMapping = function (KeyMapping, bForceRebuildKeymaps = true) { return fnprepatch_323.call(this, KeyMapping, bForceRebuildKeymaps) }; } catch (e) {};
-try { let fnprepatch_324 = InputSettings.prototype.RemoveActionMapping;InputSettings.prototype.RemoveActionMapping = function (KeyMapping, bForceRebuildKeymaps = true) { return fnprepatch_324.call(this, KeyMapping, bForceRebuildKeymaps) }; } catch (e) {};
-try { let fnprepatch_325 = InputSettings.prototype.AddAxisMapping;InputSettings.prototype.AddAxisMapping = function (KeyMapping, bForceRebuildKeymaps = true) { return fnprepatch_325.call(this, KeyMapping, bForceRebuildKeymaps) }; } catch (e) {};
-try { let fnprepatch_326 = InputSettings.prototype.AddActionMapping;InputSettings.prototype.AddActionMapping = function (KeyMapping, bForceRebuildKeymaps = true) { return fnprepatch_326.call(this, KeyMapping, bForceRebuildKeymaps) }; } catch (e) {};
-try { let fnprepatch_327 = InterpToMovementComponent.prototype.RestartMovement;InterpToMovementComponent.prototype.RestartMovement = function (InitialDirection = 1) { return fnprepatch_327.call(this, InitialDirection) }; } catch (e) {};
+try { let fnprepatch_325 = HealthSnapshotBlueprintLibrary.prototype.LogPerformanceSnapshot;HealthSnapshotBlueprintLibrary.prototype.LogPerformanceSnapshot = function (SnapshotTitle, bResetStats = true) { return fnprepatch_325.call(this, SnapshotTitle, bResetStats) }; } catch (e) {};
+try { let fnprepatch_326 = ImportanceSamplingLibrary.prototype.RandomSobolCell3D;ImportanceSamplingLibrary.prototype.RandomSobolCell3D = function (Index, NumCells = 1, Cell, Seed) { return fnprepatch_326.call(this, Index, NumCells, Cell, Seed) }; } catch (e) {};
+try { let fnprepatch_327 = ImportanceSamplingLibrary.prototype.RandomSobolCell2D;ImportanceSamplingLibrary.prototype.RandomSobolCell2D = function (Index, NumCells = 1, Cell = {"X":0,"Y":0}, Seed = {"X":0,"Y":0}) { return fnprepatch_327.call(this, Index, NumCells, Cell, Seed) }; } catch (e) {};
+try { let fnprepatch_328 = ImportanceSamplingLibrary.prototype.NextSobolCell3D;ImportanceSamplingLibrary.prototype.NextSobolCell3D = function (Index, NumCells = 1, PreviousValue) { return fnprepatch_328.call(this, Index, NumCells, PreviousValue) }; } catch (e) {};
+try { let fnprepatch_329 = ImportanceSamplingLibrary.prototype.NextSobolCell2D;ImportanceSamplingLibrary.prototype.NextSobolCell2D = function (Index, NumCells = 1, PreviousValue = {"X":0,"Y":0}) { return fnprepatch_329.call(this, Index, NumCells, PreviousValue) }; } catch (e) {};
+try { let fnprepatch_330 = InputSettings.prototype.RemoveAxisMapping;InputSettings.prototype.RemoveAxisMapping = function (KeyMapping, bForceRebuildKeymaps = true) { return fnprepatch_330.call(this, KeyMapping, bForceRebuildKeymaps) }; } catch (e) {};
+try { let fnprepatch_331 = InputSettings.prototype.RemoveActionMapping;InputSettings.prototype.RemoveActionMapping = function (KeyMapping, bForceRebuildKeymaps = true) { return fnprepatch_331.call(this, KeyMapping, bForceRebuildKeymaps) }; } catch (e) {};
+try { let fnprepatch_332 = InputSettings.prototype.AddAxisMapping;InputSettings.prototype.AddAxisMapping = function (KeyMapping, bForceRebuildKeymaps = true) { return fnprepatch_332.call(this, KeyMapping, bForceRebuildKeymaps) }; } catch (e) {};
+try { let fnprepatch_333 = InputSettings.prototype.AddActionMapping;InputSettings.prototype.AddActionMapping = function (KeyMapping, bForceRebuildKeymaps = true) { return fnprepatch_333.call(this, KeyMapping, bForceRebuildKeymaps) }; } catch (e) {};
+try { let fnprepatch_334 = InterpToMovementComponent.prototype.RestartMovement;InterpToMovementComponent.prototype.RestartMovement = function (InitialDirection = 1) { return fnprepatch_334.call(this, InitialDirection) }; } catch (e) {};
 try { KismetArrayLibrary.prototype.SwapArrayElements = KismetArrayLibrary.prototype.Array_Swap; } catch (e) {};
 try { KismetArrayLibrary.SwapArrayElements = KismetArrayLibrary.Array_Swap; } catch (e) {};
 try { KismetArrayLibrary.prototype.Shuffle = KismetArrayLibrary.prototype.Array_Shuffle; } catch (e) {};
@@ -761,6 +830,8 @@ try { KismetArrayLibrary.prototype.IsValidIndex = KismetArrayLibrary.prototype.A
 try { KismetArrayLibrary.IsValidIndex = KismetArrayLibrary.Array_IsValidIndex; } catch (e) {};
 try { KismetArrayLibrary.prototype.Insert = KismetArrayLibrary.prototype.Array_Insert; } catch (e) {};
 try { KismetArrayLibrary.Insert = KismetArrayLibrary.Array_Insert; } catch (e) {};
+try { KismetArrayLibrary.prototype.Identical = KismetArrayLibrary.prototype.Array_Identical; } catch (e) {};
+try { KismetArrayLibrary.Identical = KismetArrayLibrary.Array_Identical; } catch (e) {};
 try { KismetArrayLibrary.prototype.Get = KismetArrayLibrary.prototype.Array_Get; } catch (e) {};
 try { KismetArrayLibrary.Get = KismetArrayLibrary.Array_Get; } catch (e) {};
 try { KismetArrayLibrary.prototype.FindItem = KismetArrayLibrary.prototype.Array_Find; } catch (e) {};
@@ -821,6 +892,12 @@ try { KismetInputLibrary.prototype.IsGamepadKey = KismetInputLibrary.prototype.K
 try { KismetInputLibrary.IsGamepadKey = KismetInputLibrary.Key_IsGamepadKey; } catch (e) {};
 try { KismetInputLibrary.prototype.IsFloatAxis = KismetInputLibrary.prototype.Key_IsFloatAxis; } catch (e) {};
 try { KismetInputLibrary.IsFloatAxis = KismetInputLibrary.Key_IsFloatAxis; } catch (e) {};
+try { KismetInputLibrary.prototype.GetKeyEventNavigationDirection = KismetInputLibrary.prototype.Key_GetNavigationDirectionFromKey; } catch (e) {};
+try { KismetInputLibrary.GetKeyEventNavigationDirection = KismetInputLibrary.Key_GetNavigationDirectionFromKey; } catch (e) {};
+try { KismetInputLibrary.prototype.GetAnalogEventNavigationDirection = KismetInputLibrary.prototype.Key_GetNavigationDirectionFromAnalog; } catch (e) {};
+try { KismetInputLibrary.GetAnalogEventNavigationDirection = KismetInputLibrary.Key_GetNavigationDirectionFromAnalog; } catch (e) {};
+try { KismetInputLibrary.prototype.GetKeyNavigationAction = KismetInputLibrary.prototype.Key_GetNavigationAction; } catch (e) {};
+try { KismetInputLibrary.GetKeyNavigationAction = KismetInputLibrary.Key_GetNavigationAction; } catch (e) {};
 try { KismetInputLibrary.prototype.GetKeyDisplayName = KismetInputLibrary.prototype.Key_GetDisplayName; } catch (e) {};
 try { KismetInputLibrary.GetKeyDisplayName = KismetInputLibrary.Key_GetDisplayName; } catch (e) {};
 try { KismetInputLibrary.prototype.IsShiftDown = KismetInputLibrary.prototype.InputEvent_IsShiftDown; } catch (e) {};
@@ -849,63 +926,106 @@ try { KismetInputLibrary.prototype.IsCommandDown = KismetInputLibrary.prototype.
 try { KismetInputLibrary.IsCommandDown = KismetInputLibrary.InputEvent_IsCommandDown; } catch (e) {};
 try { KismetInputLibrary.prototype.IsAltDown = KismetInputLibrary.prototype.InputEvent_IsAltDown; } catch (e) {};
 try { KismetInputLibrary.IsAltDown = KismetInputLibrary.InputEvent_IsAltDown; } catch (e) {};
+try { KismetInputLibrary.prototype.GetInputChordDisplayName = KismetInputLibrary.prototype.InputChord_GetDisplayName; } catch (e) {};
+try { KismetInputLibrary.GetInputChordDisplayName = KismetInputLibrary.InputChord_GetDisplayName; } catch (e) {};
 try { KismetInputLibrary.prototype.Equal = KismetInputLibrary.prototype.EqualEqual_KeyKey; } catch (e) {};
 try { KismetInputLibrary.Equal = KismetInputLibrary.EqualEqual_KeyKey; } catch (e) {};
 try { KismetInputLibrary.prototype.Equal = KismetInputLibrary.prototype.EqualEqual_InputChordInputChord; } catch (e) {};
 try { KismetInputLibrary.Equal = KismetInputLibrary.EqualEqual_InputChordInputChord; } catch (e) {};
-try { let fnprepatch_328 = KismetInternationalizationLibrary.prototype.SetCurrentLocale;KismetInternationalizationLibrary.prototype.SetCurrentLocale = function (Culture, SaveToConfig = false) { return fnprepatch_328.call(this, Culture, SaveToConfig) }; } catch (e) {};
-try { let fnprepatch_329 = KismetInternationalizationLibrary.prototype.SetCurrentLanguageAndLocale;KismetInternationalizationLibrary.prototype.SetCurrentLanguageAndLocale = function (Culture, SaveToConfig = false) { return fnprepatch_329.call(this, Culture, SaveToConfig) }; } catch (e) {};
-try { let fnprepatch_330 = KismetInternationalizationLibrary.prototype.SetCurrentLanguage;KismetInternationalizationLibrary.prototype.SetCurrentLanguage = function (Culture, SaveToConfig = false) { return fnprepatch_330.call(this, Culture, SaveToConfig) }; } catch (e) {};
-try { let fnprepatch_331 = KismetInternationalizationLibrary.prototype.SetCurrentCulture;KismetInternationalizationLibrary.prototype.SetCurrentCulture = function (Culture, SaveToConfig = false) { return fnprepatch_331.call(this, Culture, SaveToConfig) }; } catch (e) {};
-try { let fnprepatch_332 = KismetInternationalizationLibrary.prototype.SetCurrentAssetGroupCulture;KismetInternationalizationLibrary.prototype.SetCurrentAssetGroupCulture = function (AssetGroup, Culture, SaveToConfig = false) { return fnprepatch_332.call(this, AssetGroup, Culture, SaveToConfig) }; } catch (e) {};
-try { let fnprepatch_333 = KismetInternationalizationLibrary.prototype.ClearCurrentAssetGroupCulture;KismetInternationalizationLibrary.prototype.ClearCurrentAssetGroupCulture = function (AssetGroup, SaveToConfig = false) { return fnprepatch_333.call(this, AssetGroup, SaveToConfig) }; } catch (e) {};
-try { let fnprepatch_334 = KismetMaterialLibrary.prototype.CreateDynamicMaterialInstance;KismetMaterialLibrary.prototype.CreateDynamicMaterialInstance = function (WorldContextObject, Parent, OptionalName = "None") { return fnprepatch_334.call(this, WorldContextObject, Parent, OptionalName) }; } catch (e) {};
-try { let fnprepatch_335 = KismetMathLibrary.prototype.VectorSpringInterp;KismetMathLibrary.prototype.VectorSpringInterp = function (Current, Target, SpringState, Stiffness, CriticalDampingFactor, DeltaTime, Mass = 1) { return fnprepatch_335.call(this, Current, Target, SpringState, Stiffness, CriticalDampingFactor, DeltaTime, Mass) }; } catch (e) {};
-try { let fnprepatch_336 = KismetMathLibrary.prototype.VEase;KismetMathLibrary.prototype.VEase = function (A, B, Alpha, EasingFunc, BlendExp = 2, Steps = 2) { return fnprepatch_336.call(this, A, B, Alpha, EasingFunc, BlendExp, Steps) }; } catch (e) {};
-try { let fnprepatch_337 = KismetMathLibrary.prototype.TLerp;KismetMathLibrary.prototype.TLerp = function (A, B, Alpha, InterpMode = "QuatInterp") { return fnprepatch_337.call(this, A, B, Alpha, InterpMode) }; } catch (e) {};
-try { let fnprepatch_338 = KismetMathLibrary.prototype.TEase;KismetMathLibrary.prototype.TEase = function (A, B, Alpha, EasingFunc, BlendExp = 2, Steps = 2) { return fnprepatch_338.call(this, A, B, Alpha, EasingFunc, BlendExp, Steps) }; } catch (e) {};
-try { let fnprepatch_339 = KismetMathLibrary.prototype.Subtract_IntInt;KismetMathLibrary.prototype.Subtract_IntInt = function (A, B = 1) { return fnprepatch_339.call(this, A, B) }; } catch (e) {};
-try { let fnprepatch_340 = KismetMathLibrary.prototype.Subtract_FloatFloat;KismetMathLibrary.prototype.Subtract_FloatFloat = function (A, B = 1) { return fnprepatch_340.call(this, A, B) }; } catch (e) {};
-try { let fnprepatch_341 = KismetMathLibrary.prototype.Subtract_ByteByte;KismetMathLibrary.prototype.Subtract_ByteByte = function (A, B = 1) { return fnprepatch_341.call(this, A, B) }; } catch (e) {};
-try { let fnprepatch_342 = KismetMathLibrary.prototype.REase;KismetMathLibrary.prototype.REase = function (A, B, Alpha, bShortestPath, EasingFunc, BlendExp = 2, Steps = 2) { return fnprepatch_342.call(this, A, B, Alpha, bShortestPath, EasingFunc, BlendExp, Steps) }; } catch (e) {};
-try { let fnprepatch_343 = KismetMathLibrary.prototype.RandomRotator;KismetMathLibrary.prototype.RandomRotator = function (bRoll = false) { return fnprepatch_343.call(this, bRoll) }; } catch (e) {};
-try { let fnprepatch_344 = KismetMathLibrary.prototype.PointsAreCoplanar;KismetMathLibrary.prototype.PointsAreCoplanar = function (Points, Tolerance = 0.10000000149011612) { return fnprepatch_344.call(this, Points, Tolerance) }; } catch (e) {};
-try { let fnprepatch_345 = KismetMathLibrary.prototype.Percent_IntInt;KismetMathLibrary.prototype.Percent_IntInt = function (A, B = 1) { return fnprepatch_345.call(this, A, B) }; } catch (e) {};
-try { let fnprepatch_346 = KismetMathLibrary.prototype.Percent_FloatFloat;KismetMathLibrary.prototype.Percent_FloatFloat = function (A, B = 1) { return fnprepatch_346.call(this, A, B) }; } catch (e) {};
-try { let fnprepatch_347 = KismetMathLibrary.prototype.Percent_ByteByte;KismetMathLibrary.prototype.Percent_ByteByte = function (A, B = 1) { return fnprepatch_347.call(this, A, B) }; } catch (e) {};
-try { let fnprepatch_348 = KismetMathLibrary.prototype.NotEqual_VectorVector;KismetMathLibrary.prototype.NotEqual_VectorVector = function (A, B, ErrorTolerance = 0.00009999999747378752) { return fnprepatch_348.call(this, A, B, ErrorTolerance) }; } catch (e) {};
-try { let fnprepatch_349 = KismetMathLibrary.prototype.NotEqual_Vector2DVector2D;KismetMathLibrary.prototype.NotEqual_Vector2DVector2D = function (A, B, ErrorTolerance = 0.00009999999747378752) { return fnprepatch_349.call(this, A, B, ErrorTolerance) }; } catch (e) {};
-try { let fnprepatch_350 = KismetMathLibrary.prototype.NotEqual_RotatorRotator;KismetMathLibrary.prototype.NotEqual_RotatorRotator = function (A, B, ErrorTolerance = 0.00009999999747378752) { return fnprepatch_350.call(this, A, B, ErrorTolerance) }; } catch (e) {};
-try { let fnprepatch_351 = KismetMathLibrary.prototype.NearlyEqual_TransformTransform;KismetMathLibrary.prototype.NearlyEqual_TransformTransform = function (A, B, LocationTolerance = 0.00009999999747378752, RotationTolerance = 0.00009999999747378752, Scale3DTolerance = 0.00009999999747378752) { return fnprepatch_351.call(this, A, B, LocationTolerance, RotationTolerance, Scale3DTolerance) }; } catch (e) {};
-try { let fnprepatch_352 = KismetMathLibrary.prototype.NearlyEqual_FloatFloat;KismetMathLibrary.prototype.NearlyEqual_FloatFloat = function (A, B, ErrorTolerance = 9.999999974752427e-7) { return fnprepatch_352.call(this, A, B, ErrorTolerance) }; } catch (e) {};
-try { let fnprepatch_353 = KismetMathLibrary.prototype.MinimumAreaRectangle;KismetMathLibrary.prototype.MinimumAreaRectangle = function (WorldContextObject, InVerts, SampleSurfaceNormal, OutRectCenter, OutRectRotation, OutSideLengthX, OutSideLengthY, bDebugDraw = false) { return fnprepatch_353.call(this, WorldContextObject, InVerts, SampleSurfaceNormal, OutRectCenter, OutRectRotation, OutSideLengthX, OutSideLengthY, bDebugDraw) }; } catch (e) {};
-try { let fnprepatch_354 = KismetMathLibrary.prototype.MakeQualifiedFrameTime;KismetMathLibrary.prototype.MakeQualifiedFrameTime = function (Frame, FrameRate, SubFrame = 0) { return fnprepatch_354.call(this, Frame, FrameRate, SubFrame) }; } catch (e) {};
-try { let fnprepatch_355 = KismetMathLibrary.prototype.MakePulsatingValue;KismetMathLibrary.prototype.MakePulsatingValue = function (InCurrentTime, InPulsesPerSecond = 1, InPhase = 0) { return fnprepatch_355.call(this, InCurrentTime, InPulsesPerSecond, InPhase) }; } catch (e) {};
-try { let fnprepatch_356 = KismetMathLibrary.prototype.MakeFrameRate;KismetMathLibrary.prototype.MakeFrameRate = function (Numerator, Denominator = 1) { return fnprepatch_356.call(this, Numerator, Denominator) }; } catch (e) {};
-try { let fnprepatch_357 = KismetMathLibrary.prototype.MakeDateTime;KismetMathLibrary.prototype.MakeDateTime = function (Year, Month, Day, Hour = 0, Minute = 0, Second = 0, Millisecond = 0) { return fnprepatch_357.call(this, Year, Month, Day, Hour, Minute, Second, Millisecond) }; } catch (e) {};
-try { let fnprepatch_358 = KismetMathLibrary.prototype.MakeColor;KismetMathLibrary.prototype.MakeColor = function (R, G, B, A = 1) { return fnprepatch_358.call(this, R, G, B, A) }; } catch (e) {};
-try { let fnprepatch_359 = KismetMathLibrary.prototype.Log;KismetMathLibrary.prototype.Log = function (A, Base = 1) { return fnprepatch_359.call(this, A, Base) }; } catch (e) {};
-try { let fnprepatch_360 = KismetMathLibrary.prototype.InRange_IntInt;KismetMathLibrary.prototype.InRange_IntInt = function (Value, Min, Max, InclusiveMin = true, InclusiveMax = true) { return fnprepatch_360.call(this, Value, Min, Max, InclusiveMin, InclusiveMax) }; } catch (e) {};
-try { let fnprepatch_361 = KismetMathLibrary.prototype.InRange_FloatFloat;KismetMathLibrary.prototype.InRange_FloatFloat = function (Value, Min, Max, InclusiveMin = true, InclusiveMax = true) { return fnprepatch_361.call(this, Value, Min, Max, InclusiveMin, InclusiveMax) }; } catch (e) {};
-try { let fnprepatch_362 = KismetMathLibrary.prototype.HSVToRGB;KismetMathLibrary.prototype.HSVToRGB = function (H, S, V, A = 1) { return fnprepatch_362.call(this, H, S, V, A) }; } catch (e) {};
-try { let fnprepatch_363 = KismetMathLibrary.prototype.FloatSpringInterp;KismetMathLibrary.prototype.FloatSpringInterp = function (Current, Target, SpringState, Stiffness, CriticalDampingFactor, DeltaTime, Mass = 1) { return fnprepatch_363.call(this, Current, Target, SpringState, Stiffness, CriticalDampingFactor, DeltaTime, Mass) }; } catch (e) {};
-try { let fnprepatch_364 = KismetMathLibrary.prototype.EqualEqual_VectorVector;KismetMathLibrary.prototype.EqualEqual_VectorVector = function (A, B, ErrorTolerance = 0.00009999999747378752) { return fnprepatch_364.call(this, A, B, ErrorTolerance) }; } catch (e) {};
-try { let fnprepatch_365 = KismetMathLibrary.prototype.EqualEqual_Vector2DVector2D;KismetMathLibrary.prototype.EqualEqual_Vector2DVector2D = function (A, B, ErrorTolerance = 0.00009999999747378752) { return fnprepatch_365.call(this, A, B, ErrorTolerance) }; } catch (e) {};
-try { let fnprepatch_366 = KismetMathLibrary.prototype.EqualEqual_RotatorRotator;KismetMathLibrary.prototype.EqualEqual_RotatorRotator = function (A, B, ErrorTolerance = 0.00009999999747378752) { return fnprepatch_366.call(this, A, B, ErrorTolerance) }; } catch (e) {};
-try { let fnprepatch_367 = KismetMathLibrary.prototype.Ease;KismetMathLibrary.prototype.Ease = function (A, B, Alpha, EasingFunc, BlendExp = 2, Steps = 2) { return fnprepatch_367.call(this, A, B, Alpha, EasingFunc, BlendExp, Steps) }; } catch (e) {};
-try { let fnprepatch_368 = KismetMathLibrary.prototype.Divide_VectorInt;KismetMathLibrary.prototype.Divide_VectorInt = function (A, B = 1) { return fnprepatch_368.call(this, A, B) }; } catch (e) {};
-try { let fnprepatch_369 = KismetMathLibrary.prototype.Divide_VectorFloat;KismetMathLibrary.prototype.Divide_VectorFloat = function (A, B = 1) { return fnprepatch_369.call(this, A, B) }; } catch (e) {};
-try { let fnprepatch_370 = KismetMathLibrary.prototype.Divide_Vector2DFloat;KismetMathLibrary.prototype.Divide_Vector2DFloat = function (A, B = 1) { return fnprepatch_370.call(this, A, B) }; } catch (e) {};
-try { let fnprepatch_371 = KismetMathLibrary.prototype.Divide_IntInt;KismetMathLibrary.prototype.Divide_IntInt = function (A, B = 1) { return fnprepatch_371.call(this, A, B) }; } catch (e) {};
-try { let fnprepatch_372 = KismetMathLibrary.prototype.Divide_FloatFloat;KismetMathLibrary.prototype.Divide_FloatFloat = function (A, B = 1) { return fnprepatch_372.call(this, A, B) }; } catch (e) {};
-try { let fnprepatch_373 = KismetMathLibrary.prototype.Divide_ByteByte;KismetMathLibrary.prototype.Divide_ByteByte = function (A, B = 1) { return fnprepatch_373.call(this, A, B) }; } catch (e) {};
-try { let fnprepatch_374 = KismetMathLibrary.prototype.CreateVectorFromYawPitch;KismetMathLibrary.prototype.CreateVectorFromYawPitch = function (Yaw, Pitch, Length = 1) { return fnprepatch_374.call(this, Yaw, Pitch, Length) }; } catch (e) {};
-try { let fnprepatch_375 = KismetMathLibrary.prototype.Conv_Vector2DToVector;KismetMathLibrary.prototype.Conv_Vector2DToVector = function (InVector2D, Z = 0) { return fnprepatch_375.call(this, InVector2D, Z) }; } catch (e) {};
-try { let fnprepatch_376 = KismetMathLibrary.prototype.Add_IntInt;KismetMathLibrary.prototype.Add_IntInt = function (A, B = 1) { return fnprepatch_376.call(this, A, B) }; } catch (e) {};
-try { let fnprepatch_377 = KismetMathLibrary.prototype.Add_FloatFloat;KismetMathLibrary.prototype.Add_FloatFloat = function (A, B = 1) { return fnprepatch_377.call(this, A, B) }; } catch (e) {};
-try { let fnprepatch_378 = KismetMathLibrary.prototype.Add_ByteByte;KismetMathLibrary.prototype.Add_ByteByte = function (A, B = 1) { return fnprepatch_378.call(this, A, B) }; } catch (e) {};
+try { let fnprepatch_335 = KismetInternationalizationLibrary.prototype.SetCurrentLocale;KismetInternationalizationLibrary.prototype.SetCurrentLocale = function (Culture, SaveToConfig = false) { return fnprepatch_335.call(this, Culture, SaveToConfig) }; } catch (e) {};
+try { let fnprepatch_336 = KismetInternationalizationLibrary.prototype.SetCurrentLanguageAndLocale;KismetInternationalizationLibrary.prototype.SetCurrentLanguageAndLocale = function (Culture, SaveToConfig = false) { return fnprepatch_336.call(this, Culture, SaveToConfig) }; } catch (e) {};
+try { let fnprepatch_337 = KismetInternationalizationLibrary.prototype.SetCurrentLanguage;KismetInternationalizationLibrary.prototype.SetCurrentLanguage = function (Culture, SaveToConfig = false) { return fnprepatch_337.call(this, Culture, SaveToConfig) }; } catch (e) {};
+try { let fnprepatch_338 = KismetInternationalizationLibrary.prototype.SetCurrentCulture;KismetInternationalizationLibrary.prototype.SetCurrentCulture = function (Culture, SaveToConfig = false) { return fnprepatch_338.call(this, Culture, SaveToConfig) }; } catch (e) {};
+try { let fnprepatch_339 = KismetInternationalizationLibrary.prototype.SetCurrentAssetGroupCulture;KismetInternationalizationLibrary.prototype.SetCurrentAssetGroupCulture = function (AssetGroup, Culture, SaveToConfig = false) { return fnprepatch_339.call(this, AssetGroup, Culture, SaveToConfig) }; } catch (e) {};
+try { let fnprepatch_340 = KismetInternationalizationLibrary.prototype.GetSuitableCulture;KismetInternationalizationLibrary.prototype.GetSuitableCulture = function (AvailableCultures, CultureToMatch, FallbackCulture = "en") { return fnprepatch_340.call(this, AvailableCultures, CultureToMatch, FallbackCulture) }; } catch (e) {};
+try { let fnprepatch_341 = KismetInternationalizationLibrary.prototype.GetLocalizedCultures;KismetInternationalizationLibrary.prototype.GetLocalizedCultures = function (IncludeGame = true, IncludeEngine = false, IncludeEditor = false, IncludeAdditional = false) { return fnprepatch_341.call(this, IncludeGame, IncludeEngine, IncludeEditor, IncludeAdditional) }; } catch (e) {};
+try { let fnprepatch_342 = KismetInternationalizationLibrary.prototype.GetCultureDisplayName;KismetInternationalizationLibrary.prototype.GetCultureDisplayName = function (Culture, Localized = true) { return fnprepatch_342.call(this, Culture, Localized) }; } catch (e) {};
+try { let fnprepatch_343 = KismetInternationalizationLibrary.prototype.ClearCurrentAssetGroupCulture;KismetInternationalizationLibrary.prototype.ClearCurrentAssetGroupCulture = function (AssetGroup, SaveToConfig = false) { return fnprepatch_343.call(this, AssetGroup, SaveToConfig) }; } catch (e) {};
+try { let fnprepatch_344 = KismetMaterialLibrary.prototype.CreateDynamicMaterialInstance;KismetMaterialLibrary.prototype.CreateDynamicMaterialInstance = function (WorldContextObject, Parent, OptionalName = "None") { return fnprepatch_344.call(this, WorldContextObject, Parent, OptionalName) }; } catch (e) {};
+try { let fnprepatch_345 = KismetMathLibrary.prototype.VectorSpringInterp;KismetMathLibrary.prototype.VectorSpringInterp = function (Current, Target, SpringState, Stiffness, CriticalDampingFactor, DeltaTime, Mass = 1) { return fnprepatch_345.call(this, Current, Target, SpringState, Stiffness, CriticalDampingFactor, DeltaTime, Mass) }; } catch (e) {};
+try { let fnprepatch_346 = KismetMathLibrary.prototype.Vector_Normalize;KismetMathLibrary.prototype.Vector_Normalize = function (A, Tolerance = 0) { return fnprepatch_346.call(this, A, Tolerance) }; } catch (e) {};
+try { let fnprepatch_347 = KismetMathLibrary.prototype.Vector_Normal2D;KismetMathLibrary.prototype.Vector_Normal2D = function (A, Tolerance = 0.00009999999747378752) { return fnprepatch_347.call(this, A, Tolerance) }; } catch (e) {};
+try { let fnprepatch_348 = KismetMathLibrary.prototype.Vector_IsUnit;KismetMathLibrary.prototype.Vector_IsUnit = function (A, SquaredLenthTolerance = 0.00009999999747378752) { return fnprepatch_348.call(this, A, SquaredLenthTolerance) }; } catch (e) {};
+try { let fnprepatch_349 = KismetMathLibrary.prototype.Vector_IsUniform;KismetMathLibrary.prototype.Vector_IsUniform = function (A, Tolerance = 0.00009999999747378752) { return fnprepatch_349.call(this, A, Tolerance) }; } catch (e) {};
+try { let fnprepatch_350 = KismetMathLibrary.prototype.Vector_IsNearlyZero;KismetMathLibrary.prototype.Vector_IsNearlyZero = function (A, Tolerance = 0.00009999999747378752) { return fnprepatch_350.call(this, A, Tolerance) }; } catch (e) {};
+try { let fnprepatch_351 = KismetMathLibrary.prototype.Vector4_Normalize3;KismetMathLibrary.prototype.Vector4_Normalize3 = function (A, Tolerance = 0) { return fnprepatch_351.call(this, A, Tolerance) }; } catch (e) {};
+try { let fnprepatch_352 = KismetMathLibrary.prototype.Vector4_Normal3;KismetMathLibrary.prototype.Vector4_Normal3 = function (A, Tolerance = 0.00009999999747378752) { return fnprepatch_352.call(this, A, Tolerance) }; } catch (e) {};
+try { let fnprepatch_353 = KismetMathLibrary.prototype.Vector4_IsUnit3;KismetMathLibrary.prototype.Vector4_IsUnit3 = function (A, SquaredLenthTolerance = 0.00009999999747378752) { return fnprepatch_353.call(this, A, SquaredLenthTolerance) }; } catch (e) {};
+try { let fnprepatch_354 = KismetMathLibrary.prototype.Vector4_IsNearlyZero3;KismetMathLibrary.prototype.Vector4_IsNearlyZero3 = function (A, Tolerance = 0.00009999999747378752) { return fnprepatch_354.call(this, A, Tolerance) }; } catch (e) {};
+try { let fnprepatch_355 = KismetMathLibrary.prototype.VEase;KismetMathLibrary.prototype.VEase = function (A, B, Alpha, EasingFunc, BlendExp = 2, Steps = 2) { return fnprepatch_355.call(this, A, B, Alpha, EasingFunc, BlendExp, Steps) }; } catch (e) {};
+try { let fnprepatch_356 = KismetMathLibrary.prototype.TLerp;KismetMathLibrary.prototype.TLerp = function (A, B, Alpha, InterpMode = "QuatInterp") { return fnprepatch_356.call(this, A, B, Alpha, InterpMode) }; } catch (e) {};
+try { let fnprepatch_357 = KismetMathLibrary.prototype.TEase;KismetMathLibrary.prototype.TEase = function (A, B, Alpha, EasingFunc, BlendExp = 2, Steps = 2) { return fnprepatch_357.call(this, A, B, Alpha, EasingFunc, BlendExp, Steps) }; } catch (e) {};
+try { let fnprepatch_358 = KismetMathLibrary.prototype.Subtract_IntInt;KismetMathLibrary.prototype.Subtract_IntInt = function (A, B = 1) { return fnprepatch_358.call(this, A, B) }; } catch (e) {};
+try { let fnprepatch_359 = KismetMathLibrary.prototype.Subtract_Int64Int64;KismetMathLibrary.prototype.Subtract_Int64Int64 = function (A, B = "<Unsupported type>") { return fnprepatch_359.call(this, A, B) }; } catch (e) {};
+try { let fnprepatch_360 = KismetMathLibrary.prototype.Subtract_FloatFloat;KismetMathLibrary.prototype.Subtract_FloatFloat = function (A, B = 1) { return fnprepatch_360.call(this, A, B) }; } catch (e) {};
+try { let fnprepatch_361 = KismetMathLibrary.prototype.Subtract_ByteByte;KismetMathLibrary.prototype.Subtract_ByteByte = function (A, B = 1) { return fnprepatch_361.call(this, A, B) }; } catch (e) {};
+try { let fnprepatch_362 = KismetMathLibrary.prototype.REase;KismetMathLibrary.prototype.REase = function (A, B, Alpha, bShortestPath, EasingFunc, BlendExp = 2, Steps = 2) { return fnprepatch_362.call(this, A, B, Alpha, bShortestPath, EasingFunc, BlendExp, Steps) }; } catch (e) {};
+try { let fnprepatch_363 = KismetMathLibrary.prototype.RandomRotator;KismetMathLibrary.prototype.RandomRotator = function (bRoll = false) { return fnprepatch_363.call(this, bRoll) }; } catch (e) {};
+try { let fnprepatch_364 = KismetMathLibrary.prototype.Quat_Normalized;KismetMathLibrary.prototype.Quat_Normalized = function (Q, Tolerance = 0.00009999999747378752) { return fnprepatch_364.call(this, Q, Tolerance) }; } catch (e) {};
+try { let fnprepatch_365 = KismetMathLibrary.prototype.Quat_Normalize;KismetMathLibrary.prototype.Quat_Normalize = function (Q, Tolerance = 0.00009999999747378752) { return fnprepatch_365.call(this, Q, Tolerance) }; } catch (e) {};
+try { let fnprepatch_366 = KismetMathLibrary.prototype.Quat_IsIdentity;KismetMathLibrary.prototype.Quat_IsIdentity = function (Q, Tolerance = 0.00009999999747378752) { return fnprepatch_366.call(this, Q, Tolerance) }; } catch (e) {};
+try { let fnprepatch_367 = KismetMathLibrary.prototype.PointsAreCoplanar;KismetMathLibrary.prototype.PointsAreCoplanar = function (Points, Tolerance = 0.10000000149011612) { return fnprepatch_367.call(this, Points, Tolerance) }; } catch (e) {};
+try { let fnprepatch_368 = KismetMathLibrary.prototype.Percent_IntInt;KismetMathLibrary.prototype.Percent_IntInt = function (A, B = 1) { return fnprepatch_368.call(this, A, B) }; } catch (e) {};
+try { let fnprepatch_369 = KismetMathLibrary.prototype.Percent_FloatFloat;KismetMathLibrary.prototype.Percent_FloatFloat = function (A, B = 1) { return fnprepatch_369.call(this, A, B) }; } catch (e) {};
+try { let fnprepatch_370 = KismetMathLibrary.prototype.Percent_ByteByte;KismetMathLibrary.prototype.Percent_ByteByte = function (A, B = 1) { return fnprepatch_370.call(this, A, B) }; } catch (e) {};
+try { let fnprepatch_371 = KismetMathLibrary.prototype.NotEqual_VectorVector;KismetMathLibrary.prototype.NotEqual_VectorVector = function (A, B, ErrorTolerance = 0.00009999999747378752) { return fnprepatch_371.call(this, A, B, ErrorTolerance) }; } catch (e) {};
+try { let fnprepatch_372 = KismetMathLibrary.prototype.NotEqual_Vector4Vector4;KismetMathLibrary.prototype.NotEqual_Vector4Vector4 = function (A, B, ErrorTolerance = 0.00009999999747378752) { return fnprepatch_372.call(this, A, B, ErrorTolerance) }; } catch (e) {};
+try { let fnprepatch_373 = KismetMathLibrary.prototype.NotEqual_Vector2DVector2D;KismetMathLibrary.prototype.NotEqual_Vector2DVector2D = function (A, B, ErrorTolerance = 0.00009999999747378752) { return fnprepatch_373.call(this, A, B, ErrorTolerance) }; } catch (e) {};
+try { let fnprepatch_374 = KismetMathLibrary.prototype.NotEqual_RotatorRotator;KismetMathLibrary.prototype.NotEqual_RotatorRotator = function (A, B, ErrorTolerance = 0.00009999999747378752) { return fnprepatch_374.call(this, A, B, ErrorTolerance) }; } catch (e) {};
+try { let fnprepatch_375 = KismetMathLibrary.prototype.NotEqual_QuatQuat;KismetMathLibrary.prototype.NotEqual_QuatQuat = function (A, B, ErrorTolerance = 0.00009999999747378752) { return fnprepatch_375.call(this, A, B, ErrorTolerance) }; } catch (e) {};
+try { let fnprepatch_376 = KismetMathLibrary.prototype.NormalSafe2D;KismetMathLibrary.prototype.NormalSafe2D = function (A, Tolerance = 0) { return fnprepatch_376.call(this, A, Tolerance) }; } catch (e) {};
+try { let fnprepatch_377 = KismetMathLibrary.prototype.Normalize2D;KismetMathLibrary.prototype.Normalize2D = function (A, Tolerance = 0) { return fnprepatch_377.call(this, A, Tolerance) }; } catch (e) {};
+try { let fnprepatch_378 = KismetMathLibrary.prototype.Normal;KismetMathLibrary.prototype.Normal = function (A, Tolerance = 0.00009999999747378752) { return fnprepatch_378.call(this, A, Tolerance) }; } catch (e) {};
+try { let fnprepatch_379 = KismetMathLibrary.prototype.NearlyEqual_TransformTransform;KismetMathLibrary.prototype.NearlyEqual_TransformTransform = function (A, B, LocationTolerance = 0.00009999999747378752, RotationTolerance = 0.00009999999747378752, Scale3DTolerance = 0.00009999999747378752) { return fnprepatch_379.call(this, A, B, LocationTolerance, RotationTolerance, Scale3DTolerance) }; } catch (e) {};
+try { let fnprepatch_380 = KismetMathLibrary.prototype.NearlyEqual_FloatFloat;KismetMathLibrary.prototype.NearlyEqual_FloatFloat = function (A, B, ErrorTolerance = 9.999999974752427e-7) { return fnprepatch_380.call(this, A, B, ErrorTolerance) }; } catch (e) {};
+try { let fnprepatch_381 = KismetMathLibrary.prototype.MinimumAreaRectangle;KismetMathLibrary.prototype.MinimumAreaRectangle = function (WorldContextObject, InVerts, SampleSurfaceNormal, OutRectCenter, OutRectRotation, OutSideLengthX, OutSideLengthY, bDebugDraw = false) { return fnprepatch_381.call(this, WorldContextObject, InVerts, SampleSurfaceNormal, OutRectCenter, OutRectRotation, OutSideLengthX, OutSideLengthY, bDebugDraw) }; } catch (e) {};
+try { let fnprepatch_382 = KismetMathLibrary.prototype.MakeQualifiedFrameTime;KismetMathLibrary.prototype.MakeQualifiedFrameTime = function (Frame, FrameRate, SubFrame = 0) { return fnprepatch_382.call(this, Frame, FrameRate, SubFrame) }; } catch (e) {};
+try { let fnprepatch_383 = KismetMathLibrary.prototype.MakePulsatingValue;KismetMathLibrary.prototype.MakePulsatingValue = function (InCurrentTime, InPulsesPerSecond = 1, InPhase = 0) { return fnprepatch_383.call(this, InCurrentTime, InPulsesPerSecond, InPhase) }; } catch (e) {};
+try { let fnprepatch_384 = KismetMathLibrary.prototype.MakeFrameRate;KismetMathLibrary.prototype.MakeFrameRate = function (Numerator, Denominator = 1) { return fnprepatch_384.call(this, Numerator, Denominator) }; } catch (e) {};
+try { let fnprepatch_385 = KismetMathLibrary.prototype.MakeDateTime;KismetMathLibrary.prototype.MakeDateTime = function (Year, Month, Day, Hour = 0, Minute = 0, Second = 0, Millisecond = 0) { return fnprepatch_385.call(this, Year, Month, Day, Hour, Minute, Second, Millisecond) }; } catch (e) {};
+try { let fnprepatch_386 = KismetMathLibrary.prototype.MakeColor;KismetMathLibrary.prototype.MakeColor = function (R, G, B, A = 1) { return fnprepatch_386.call(this, R, G, B, A) }; } catch (e) {};
+try { let fnprepatch_387 = KismetMathLibrary.prototype.Log;KismetMathLibrary.prototype.Log = function (A, Base = 1) { return fnprepatch_387.call(this, A, Base) }; } catch (e) {};
+try { let fnprepatch_388 = KismetMathLibrary.prototype.LinearColor_SetRGBA;KismetMathLibrary.prototype.LinearColor_SetRGBA = function (InOutColor, R, G, B, A = 1) { return fnprepatch_388.call(this, InOutColor, R, G, B, A) }; } catch (e) {};
+try { let fnprepatch_389 = KismetMathLibrary.prototype.LinearColor_SetFromHSV;KismetMathLibrary.prototype.LinearColor_SetFromHSV = function (InOutColor, H, S, V, A = 1) { return fnprepatch_389.call(this, InOutColor, H, S, V, A) }; } catch (e) {};
+try { let fnprepatch_390 = KismetMathLibrary.prototype.LinearColor_IsNearEqual;KismetMathLibrary.prototype.LinearColor_IsNearEqual = function (A, B, Tolerance = 0.00009999999747378752) { return fnprepatch_390.call(this, A, B, Tolerance) }; } catch (e) {};
+try { let fnprepatch_391 = KismetMathLibrary.prototype.IsNearlyZero2D;KismetMathLibrary.prototype.IsNearlyZero2D = function (A, Tolerance = 0.00009999999747378752) { return fnprepatch_391.call(this, A, Tolerance) }; } catch (e) {};
+try { let fnprepatch_392 = KismetMathLibrary.prototype.InRange_IntInt;KismetMathLibrary.prototype.InRange_IntInt = function (Value, Min, Max, InclusiveMin = true, InclusiveMax = true) { return fnprepatch_392.call(this, Value, Min, Max, InclusiveMin, InclusiveMax) }; } catch (e) {};
+try { let fnprepatch_393 = KismetMathLibrary.prototype.InRange_Int64Int64;KismetMathLibrary.prototype.InRange_Int64Int64 = function (Value, Min, Max, InclusiveMin = true, InclusiveMax = true) { return fnprepatch_393.call(this, Value, Min, Max, InclusiveMin, InclusiveMax) }; } catch (e) {};
+try { let fnprepatch_394 = KismetMathLibrary.prototype.InRange_FloatFloat;KismetMathLibrary.prototype.InRange_FloatFloat = function (Value, Min, Max, InclusiveMin = true, InclusiveMax = true) { return fnprepatch_394.call(this, Value, Min, Max, InclusiveMin, InclusiveMax) }; } catch (e) {};
+try { let fnprepatch_395 = KismetMathLibrary.prototype.HSVToRGB;KismetMathLibrary.prototype.HSVToRGB = function (H, S, V, A = 1) { return fnprepatch_395.call(this, H, S, V, A) }; } catch (e) {};
+try { let fnprepatch_396 = KismetMathLibrary.prototype.FloatSpringInterp;KismetMathLibrary.prototype.FloatSpringInterp = function (Current, Target, SpringState, Stiffness, CriticalDampingFactor, DeltaTime, Mass = 1) { return fnprepatch_396.call(this, Current, Target, SpringState, Stiffness, CriticalDampingFactor, DeltaTime, Mass) }; } catch (e) {};
+try { let fnprepatch_397 = KismetMathLibrary.prototype.EqualEqual_VectorVector;KismetMathLibrary.prototype.EqualEqual_VectorVector = function (A, B, ErrorTolerance = 0.00009999999747378752) { return fnprepatch_397.call(this, A, B, ErrorTolerance) }; } catch (e) {};
+try { let fnprepatch_398 = KismetMathLibrary.prototype.EqualEqual_Vector4Vector4;KismetMathLibrary.prototype.EqualEqual_Vector4Vector4 = function (A, B, ErrorTolerance = 0.00009999999747378752) { return fnprepatch_398.call(this, A, B, ErrorTolerance) }; } catch (e) {};
+try { let fnprepatch_399 = KismetMathLibrary.prototype.EqualEqual_Vector2DVector2D;KismetMathLibrary.prototype.EqualEqual_Vector2DVector2D = function (A, B, ErrorTolerance = 0.00009999999747378752) { return fnprepatch_399.call(this, A, B, ErrorTolerance) }; } catch (e) {};
+try { let fnprepatch_400 = KismetMathLibrary.prototype.EqualEqual_RotatorRotator;KismetMathLibrary.prototype.EqualEqual_RotatorRotator = function (A, B, ErrorTolerance = 0.00009999999747378752) { return fnprepatch_400.call(this, A, B, ErrorTolerance) }; } catch (e) {};
+try { let fnprepatch_401 = KismetMathLibrary.prototype.EqualEqual_QuatQuat;KismetMathLibrary.prototype.EqualEqual_QuatQuat = function (A, B, Tolerance = 0.00009999999747378752) { return fnprepatch_401.call(this, A, B, Tolerance) }; } catch (e) {};
+try { let fnprepatch_402 = KismetMathLibrary.prototype.Ease;KismetMathLibrary.prototype.Ease = function (A, B, Alpha, EasingFunc, BlendExp = 2, Steps = 2) { return fnprepatch_402.call(this, A, B, Alpha, EasingFunc, BlendExp, Steps) }; } catch (e) {};
+try { let fnprepatch_403 = KismetMathLibrary.prototype.Divide_VectorInt;KismetMathLibrary.prototype.Divide_VectorInt = function (A, B = 1) { return fnprepatch_403.call(this, A, B) }; } catch (e) {};
+try { let fnprepatch_404 = KismetMathLibrary.prototype.Divide_VectorFloat;KismetMathLibrary.prototype.Divide_VectorFloat = function (A, B = 1) { return fnprepatch_404.call(this, A, B) }; } catch (e) {};
+try { let fnprepatch_405 = KismetMathLibrary.prototype.Divide_Vector2DFloat;KismetMathLibrary.prototype.Divide_Vector2DFloat = function (A, B = 1) { return fnprepatch_405.call(this, A, B) }; } catch (e) {};
+try { let fnprepatch_406 = KismetMathLibrary.prototype.Divide_IntInt;KismetMathLibrary.prototype.Divide_IntInt = function (A, B = 1) { return fnprepatch_406.call(this, A, B) }; } catch (e) {};
+try { let fnprepatch_407 = KismetMathLibrary.prototype.Divide_Int64Int64;KismetMathLibrary.prototype.Divide_Int64Int64 = function (A, B = "<Unsupported type>") { return fnprepatch_407.call(this, A, B) }; } catch (e) {};
+try { let fnprepatch_408 = KismetMathLibrary.prototype.Divide_FloatFloat;KismetMathLibrary.prototype.Divide_FloatFloat = function (A, B = 1) { return fnprepatch_408.call(this, A, B) }; } catch (e) {};
+try { let fnprepatch_409 = KismetMathLibrary.prototype.Divide_ByteByte;KismetMathLibrary.prototype.Divide_ByteByte = function (A, B = 1) { return fnprepatch_409.call(this, A, B) }; } catch (e) {};
+try { let fnprepatch_410 = KismetMathLibrary.prototype.CreateVectorFromYawPitch;KismetMathLibrary.prototype.CreateVectorFromYawPitch = function (Yaw, Pitch, Length = 1) { return fnprepatch_410.call(this, Yaw, Pitch, Length) }; } catch (e) {};
+try { let fnprepatch_411 = KismetMathLibrary.prototype.Conv_Vector2DToVector;KismetMathLibrary.prototype.Conv_Vector2DToVector = function (InVector2D, Z = 0) { return fnprepatch_411.call(this, InVector2D, Z) }; } catch (e) {};
+try { let fnprepatch_412 = KismetMathLibrary.prototype.Conv_LinearColorToColor;KismetMathLibrary.prototype.Conv_LinearColorToColor = function (InLinearColor, InUseSRGB = true) { return fnprepatch_412.call(this, InLinearColor, InUseSRGB) }; } catch (e) {};
+try { let fnprepatch_413 = KismetMathLibrary.prototype.Add_IntInt;KismetMathLibrary.prototype.Add_IntInt = function (A, B = 1) { return fnprepatch_413.call(this, A, B) }; } catch (e) {};
+try { let fnprepatch_414 = KismetMathLibrary.prototype.Add_Int64Int64;KismetMathLibrary.prototype.Add_Int64Int64 = function (A, B = "<Unsupported type>") { return fnprepatch_414.call(this, A, B) }; } catch (e) {};
+try { let fnprepatch_415 = KismetMathLibrary.prototype.Add_FloatFloat;KismetMathLibrary.prototype.Add_FloatFloat = function (A, B = 1) { return fnprepatch_415.call(this, A, B) }; } catch (e) {};
+try { let fnprepatch_416 = KismetMathLibrary.prototype.Add_ByteByte;KismetMathLibrary.prototype.Add_ByteByte = function (A, B = 1) { return fnprepatch_416.call(this, A, B) }; } catch (e) {};
 try { KismetMathLibrary.prototype.BitwiseXOR = KismetMathLibrary.prototype.Xor_IntInt; } catch (e) {};
 try { KismetMathLibrary.BitwiseXOR = KismetMathLibrary.Xor_IntInt; } catch (e) {};
+try { KismetMathLibrary.prototype.BitwiseXOR = KismetMathLibrary.prototype.Xor_Int64Int64; } catch (e) {};
+try { KismetMathLibrary.BitwiseXOR = KismetMathLibrary.Xor_Int64Int64; } catch (e) {};
+try { KismetMathLibrary.prototype.WeightedMovingAverageVector = KismetMathLibrary.prototype.WeightedMovingAverage_FVector; } catch (e) {};
+try { KismetMathLibrary.WeightedMovingAverageVector = KismetMathLibrary.WeightedMovingAverage_FVector; } catch (e) {};
+try { KismetMathLibrary.prototype.WeightedMovingAverageRotator = KismetMathLibrary.prototype.WeightedMovingAverage_FRotator; } catch (e) {};
+try { KismetMathLibrary.WeightedMovingAverageRotator = KismetMathLibrary.WeightedMovingAverage_FRotator; } catch (e) {};
+try { KismetMathLibrary.prototype.WeightedMovingAverageFloat = KismetMathLibrary.prototype.WeightedMovingAverage_Float; } catch (e) {};
+try { KismetMathLibrary.WeightedMovingAverageFloat = KismetMathLibrary.WeightedMovingAverage_Float; } catch (e) {};
+try { KismetMathLibrary.prototype.VectorLengthXYSquared = KismetMathLibrary.prototype.VSizeXYSquared; } catch (e) {};
+try { KismetMathLibrary.VectorLengthXYSquared = KismetMathLibrary.VSizeXYSquared; } catch (e) {};
 try { KismetMathLibrary.prototype.VectorLengthXY = KismetMathLibrary.prototype.VSizeXY; } catch (e) {};
 try { KismetMathLibrary.VectorLengthXY = KismetMathLibrary.VSizeXY; } catch (e) {};
 try { KismetMathLibrary.prototype.VectorLengthSquared = KismetMathLibrary.prototype.VSizeSquared; } catch (e) {};
@@ -918,10 +1038,64 @@ try { KismetMathLibrary.prototype.VectorLength = KismetMathLibrary.prototype.VSi
 try { KismetMathLibrary.VectorLength = KismetMathLibrary.VSize; } catch (e) {};
 try { KismetMathLibrary.prototype.Lerp = KismetMathLibrary.prototype.VLerp; } catch (e) {};
 try { KismetMathLibrary.Lerp = KismetMathLibrary.VLerp; } catch (e) {};
+try { KismetMathLibrary.prototype.Reciprocal = KismetMathLibrary.prototype.Vector_Reciprocal; } catch (e) {};
+try { KismetMathLibrary.Reciprocal = KismetMathLibrary.Vector_Reciprocal; } catch (e) {};
+try { KismetMathLibrary.prototype.Normalunsafe = KismetMathLibrary.prototype.Vector_NormalUnsafe; } catch (e) {};
+try { KismetMathLibrary.Normalunsafe = KismetMathLibrary.Vector_NormalUnsafe; } catch (e) {};
+try { KismetMathLibrary.prototype.NormalizeInPlace = KismetMathLibrary.prototype.Vector_Normalize; } catch (e) {};
+try { KismetMathLibrary.NormalizeInPlace = KismetMathLibrary.Vector_Normalize; } catch (e) {};
+try { KismetMathLibrary.prototype.Normalize2D = KismetMathLibrary.prototype.Vector_Normal2D; } catch (e) {};
+try { KismetMathLibrary.Normalize2D = KismetMathLibrary.Vector_Normal2D; } catch (e) {};
+try { KismetMathLibrary.prototype.IsUnit = KismetMathLibrary.prototype.Vector_IsUnit; } catch (e) {};
+try { KismetMathLibrary.IsUnit = KismetMathLibrary.Vector_IsUnit; } catch (e) {};
+try { KismetMathLibrary.prototype.IsUniform = KismetMathLibrary.prototype.Vector_IsUniform; } catch (e) {};
+try { KismetMathLibrary.IsUniform = KismetMathLibrary.Vector_IsUniform; } catch (e) {};
+try { KismetMathLibrary.prototype.IsNormal = KismetMathLibrary.prototype.Vector_IsNormal; } catch (e) {};
+try { KismetMathLibrary.IsNormal = KismetMathLibrary.Vector_IsNormal; } catch (e) {};
+try { KismetMathLibrary.prototype.DistanceSquared = KismetMathLibrary.prototype.Vector_DistanceSquared; } catch (e) {};
+try { KismetMathLibrary.DistanceSquared = KismetMathLibrary.Vector_DistanceSquared; } catch (e) {};
+try { KismetMathLibrary.prototype.Distance2DSquared = KismetMathLibrary.prototype.Vector_Distance2DSquared; } catch (e) {};
+try { KismetMathLibrary.Distance2DSquared = KismetMathLibrary.Vector_Distance2DSquared; } catch (e) {};
+try { KismetMathLibrary.prototype.Distance2D = KismetMathLibrary.prototype.Vector_Distance2D; } catch (e) {};
+try { KismetMathLibrary.Distance2D = KismetMathLibrary.Vector_Distance2D; } catch (e) {};
+try { KismetMathLibrary.prototype.Distance = KismetMathLibrary.prototype.Vector_Distance; } catch (e) {};
+try { KismetMathLibrary.Distance = KismetMathLibrary.Vector_Distance; } catch (e) {};
+try { KismetMathLibrary.prototype.LengthXYZSquared = KismetMathLibrary.prototype.Vector4_SizeSquared3; } catch (e) {};
+try { KismetMathLibrary.LengthXYZSquared = KismetMathLibrary.Vector4_SizeSquared3; } catch (e) {};
+try { KismetMathLibrary.prototype.LengthSquared = KismetMathLibrary.prototype.Vector4_SizeSquared; } catch (e) {};
+try { KismetMathLibrary.LengthSquared = KismetMathLibrary.Vector4_SizeSquared; } catch (e) {};
+try { KismetMathLibrary.prototype.LengthXYZ = KismetMathLibrary.prototype.Vector4_Size3; } catch (e) {};
+try { KismetMathLibrary.LengthXYZ = KismetMathLibrary.Vector4_Size3; } catch (e) {};
+try { KismetMathLibrary.prototype.Length = KismetMathLibrary.prototype.Vector4_Size; } catch (e) {};
+try { KismetMathLibrary.Length = KismetMathLibrary.Vector4_Size; } catch (e) {};
+try { KismetMathLibrary.prototype.NormalunsafeXYZ = KismetMathLibrary.prototype.Vector4_NormalUnsafe3; } catch (e) {};
+try { KismetMathLibrary.NormalunsafeXYZ = KismetMathLibrary.Vector4_NormalUnsafe3; } catch (e) {};
+try { KismetMathLibrary.prototype.NormalizeInPlaceXYZ = KismetMathLibrary.prototype.Vector4_Normalize3; } catch (e) {};
+try { KismetMathLibrary.NormalizeInPlaceXYZ = KismetMathLibrary.Vector4_Normalize3; } catch (e) {};
+try { KismetMathLibrary.prototype.NormalizeXYZ = KismetMathLibrary.prototype.Vector4_Normal3; } catch (e) {};
+try { KismetMathLibrary.NormalizeXYZ = KismetMathLibrary.Vector4_Normal3; } catch (e) {};
+try { KismetMathLibrary.prototype.Negated = KismetMathLibrary.prototype.Vector4_Negated; } catch (e) {};
+try { KismetMathLibrary.Negated = KismetMathLibrary.Vector4_Negated; } catch (e) {};
+try { KismetMathLibrary.prototype.IsUnitXYZ = KismetMathLibrary.prototype.Vector4_IsUnit3; } catch (e) {};
+try { KismetMathLibrary.IsUnitXYZ = KismetMathLibrary.Vector4_IsUnit3; } catch (e) {};
+try { KismetMathLibrary.prototype.IsNormalXYZ = KismetMathLibrary.prototype.Vector4_IsNormal3; } catch (e) {};
+try { KismetMathLibrary.IsNormalXYZ = KismetMathLibrary.Vector4_IsNormal3; } catch (e) {};
+try { KismetMathLibrary.prototype.DotProductXYZ = KismetMathLibrary.prototype.Vector4_DotProduct3; } catch (e) {};
+try { KismetMathLibrary.DotProductXYZ = KismetMathLibrary.Vector4_DotProduct3; } catch (e) {};
+try { KismetMathLibrary.prototype.DotProduct = KismetMathLibrary.prototype.Vector4_DotProduct; } catch (e) {};
+try { KismetMathLibrary.DotProduct = KismetMathLibrary.Vector4_DotProduct; } catch (e) {};
+try { KismetMathLibrary.prototype.CrossProductXYZ = KismetMathLibrary.prototype.Vector4_CrossProduct3; } catch (e) {};
+try { KismetMathLibrary.CrossProductXYZ = KismetMathLibrary.Vector4_CrossProduct3; } catch (e) {};
 try { KismetMathLibrary.prototype.Ease = KismetMathLibrary.prototype.VEase; } catch (e) {};
 try { KismetMathLibrary.Ease = KismetMathLibrary.VEase; } catch (e) {};
 try { KismetMathLibrary.prototype.Determinant = KismetMathLibrary.prototype.Transform_Determinant; } catch (e) {};
 try { KismetMathLibrary.Determinant = KismetMathLibrary.Transform_Determinant; } catch (e) {};
+try { KismetMathLibrary.prototype.Tosign = KismetMathLibrary.prototype.ToSign2D; } catch (e) {};
+try { KismetMathLibrary.Tosign = KismetMathLibrary.ToSign2D; } catch (e) {};
+try { KismetMathLibrary.prototype.ToRounded = KismetMathLibrary.prototype.ToRounded2D; } catch (e) {};
+try { KismetMathLibrary.ToRounded = KismetMathLibrary.ToRounded2D; } catch (e) {};
+try { KismetMathLibrary.prototype.ToDirectionAndLength = KismetMathLibrary.prototype.ToDirectionAndLength2D; } catch (e) {};
+try { KismetMathLibrary.ToDirectionAndLength = KismetMathLibrary.ToDirectionAndLength2D; } catch (e) {};
 try { KismetMathLibrary.prototype.Lerp = KismetMathLibrary.prototype.TLerp; } catch (e) {};
 try { KismetMathLibrary.Lerp = KismetMathLibrary.TLerp; } catch (e) {};
 try { KismetMathLibrary.prototype.ZeroValue = KismetMathLibrary.prototype.TimespanZeroValue; } catch (e) {};
@@ -932,34 +1106,110 @@ try { KismetMathLibrary.prototype.MaxValue = KismetMathLibrary.prototype.Timespa
 try { KismetMathLibrary.MaxValue = KismetMathLibrary.TimespanMaxValue; } catch (e) {};
 try { KismetMathLibrary.prototype.Ease = KismetMathLibrary.prototype.TEase; } catch (e) {};
 try { KismetMathLibrary.Ease = KismetMathLibrary.TEase; } catch (e) {};
+try { KismetMathLibrary.prototype.Sign = KismetMathLibrary.prototype.SignOfInteger64; } catch (e) {};
+try { KismetMathLibrary.Sign = KismetMathLibrary.SignOfInteger64; } catch (e) {};
 try { KismetMathLibrary.prototype.Sign = KismetMathLibrary.prototype.SignOfInteger; } catch (e) {};
 try { KismetMathLibrary.Sign = KismetMathLibrary.SignOfInteger; } catch (e) {};
 try { KismetMathLibrary.prototype.Sign = KismetMathLibrary.prototype.SignOfFloat; } catch (e) {};
 try { KismetMathLibrary.Sign = KismetMathLibrary.SignOfFloat; } catch (e) {};
+try { KismetMathLibrary.prototype.RoundtoInt64 = KismetMathLibrary.prototype.Round64; } catch (e) {};
+try { KismetMathLibrary.RoundtoInt64 = KismetMathLibrary.Round64; } catch (e) {};
 try { KismetMathLibrary.prototype.RotateVectorAroundAxis = KismetMathLibrary.prototype.RotateAngleAxis; } catch (e) {};
 try { KismetMathLibrary.RotateVectorAroundAxis = KismetMathLibrary.RotateAngleAxis; } catch (e) {};
 try { KismetMathLibrary.prototype.Lerp = KismetMathLibrary.prototype.RLerp; } catch (e) {};
 try { KismetMathLibrary.Lerp = KismetMathLibrary.RLerp; } catch (e) {};
 try { KismetMathLibrary.prototype.RGBtoHSV = KismetMathLibrary.prototype.RGBToHSV_Vector; } catch (e) {};
 try { KismetMathLibrary.RGBtoHSV = KismetMathLibrary.RGBToHSV_Vector; } catch (e) {};
+try { KismetMathLibrary.prototype.RGBtoHSVlinearcolor = KismetMathLibrary.prototype.RGBLinearToHSV; } catch (e) {};
+try { KismetMathLibrary.RGBtoHSVlinearcolor = KismetMathLibrary.RGBLinearToHSV; } catch (e) {};
 try { KismetMathLibrary.prototype.Ease = KismetMathLibrary.prototype.REase; } catch (e) {};
 try { KismetMathLibrary.Ease = KismetMathLibrary.REase; } catch (e) {};
+try { KismetMathLibrary.prototype.VectorUp = KismetMathLibrary.prototype.Quat_VectorUp; } catch (e) {};
+try { KismetMathLibrary.VectorUp = KismetMathLibrary.Quat_VectorUp; } catch (e) {};
+try { KismetMathLibrary.prototype.VectorRight = KismetMathLibrary.prototype.Quat_VectorRight; } catch (e) {};
+try { KismetMathLibrary.VectorRight = KismetMathLibrary.Quat_VectorRight; } catch (e) {};
+try { KismetMathLibrary.prototype.VectorForward = KismetMathLibrary.prototype.Quat_VectorForward; } catch (e) {};
+try { KismetMathLibrary.VectorForward = KismetMathLibrary.Quat_VectorForward; } catch (e) {};
+try { KismetMathLibrary.prototype.UnrotateVector = KismetMathLibrary.prototype.Quat_UnrotateVector; } catch (e) {};
+try { KismetMathLibrary.UnrotateVector = KismetMathLibrary.Quat_UnrotateVector; } catch (e) {};
+try { KismetMathLibrary.prototype.SizeSquared = KismetMathLibrary.prototype.Quat_SizeSquared; } catch (e) {};
+try { KismetMathLibrary.SizeSquared = KismetMathLibrary.Quat_SizeSquared; } catch (e) {};
+try { KismetMathLibrary.prototype.Size = KismetMathLibrary.prototype.Quat_Size; } catch (e) {};
+try { KismetMathLibrary.Size = KismetMathLibrary.Quat_Size; } catch (e) {};
+try { KismetMathLibrary.prototype.SetfromEuler = KismetMathLibrary.prototype.Quat_SetFromEuler; } catch (e) {};
+try { KismetMathLibrary.SetfromEuler = KismetMathLibrary.Quat_SetFromEuler; } catch (e) {};
+try { KismetMathLibrary.prototype.SetComponents = KismetMathLibrary.prototype.Quat_SetComponents; } catch (e) {};
+try { KismetMathLibrary.SetComponents = KismetMathLibrary.Quat_SetComponents; } catch (e) {};
+try { KismetMathLibrary.prototype.ToRotator = KismetMathLibrary.prototype.Quat_Rotator; } catch (e) {};
+try { KismetMathLibrary.ToRotator = KismetMathLibrary.Quat_Rotator; } catch (e) {};
+try { KismetMathLibrary.prototype.RotateVector = KismetMathLibrary.prototype.Quat_RotateVector; } catch (e) {};
+try { KismetMathLibrary.RotateVector = KismetMathLibrary.Quat_RotateVector; } catch (e) {};
+try { KismetMathLibrary.prototype.Normalized = KismetMathLibrary.prototype.Quat_Normalized; } catch (e) {};
+try { KismetMathLibrary.Normalized = KismetMathLibrary.Quat_Normalized; } catch (e) {};
+try { KismetMathLibrary.prototype.Normalize = KismetMathLibrary.prototype.Quat_Normalize; } catch (e) {};
+try { KismetMathLibrary.Normalize = KismetMathLibrary.Quat_Normalize; } catch (e) {};
+try { KismetMathLibrary.prototype.MakefromEuler = KismetMathLibrary.prototype.Quat_MakeFromEuler; } catch (e) {};
+try { KismetMathLibrary.MakefromEuler = KismetMathLibrary.Quat_MakeFromEuler; } catch (e) {};
+try { KismetMathLibrary.prototype.Log = KismetMathLibrary.prototype.Quat_Log; } catch (e) {};
+try { KismetMathLibrary.Log = KismetMathLibrary.Quat_Log; } catch (e) {};
+try { KismetMathLibrary.prototype.IsNormalized = KismetMathLibrary.prototype.Quat_IsNormalized; } catch (e) {};
+try { KismetMathLibrary.IsNormalized = KismetMathLibrary.Quat_IsNormalized; } catch (e) {};
+try { KismetMathLibrary.prototype.IsIdentity = KismetMathLibrary.prototype.Quat_IsIdentity; } catch (e) {};
+try { KismetMathLibrary.IsIdentity = KismetMathLibrary.Quat_IsIdentity; } catch (e) {};
+try { KismetMathLibrary.prototype.IsFinite = KismetMathLibrary.prototype.Quat_IsFinite; } catch (e) {};
+try { KismetMathLibrary.IsFinite = KismetMathLibrary.Quat_IsFinite; } catch (e) {};
+try { KismetMathLibrary.prototype.Inversed = KismetMathLibrary.prototype.Quat_Inversed; } catch (e) {};
+try { KismetMathLibrary.Inversed = KismetMathLibrary.Quat_Inversed; } catch (e) {};
+try { KismetMathLibrary.prototype.RotationAxis = KismetMathLibrary.prototype.Quat_GetRotationAxis; } catch (e) {};
+try { KismetMathLibrary.RotationAxis = KismetMathLibrary.Quat_GetRotationAxis; } catch (e) {};
+try { KismetMathLibrary.prototype.AxisZ = KismetMathLibrary.prototype.Quat_GetAxisZ; } catch (e) {};
+try { KismetMathLibrary.AxisZ = KismetMathLibrary.Quat_GetAxisZ; } catch (e) {};
+try { KismetMathLibrary.prototype.AxisY = KismetMathLibrary.prototype.Quat_GetAxisY; } catch (e) {};
+try { KismetMathLibrary.AxisY = KismetMathLibrary.Quat_GetAxisY; } catch (e) {};
+try { KismetMathLibrary.prototype.AxisX = KismetMathLibrary.prototype.Quat_GetAxisX; } catch (e) {};
+try { KismetMathLibrary.AxisX = KismetMathLibrary.Quat_GetAxisX; } catch (e) {};
+try { KismetMathLibrary.prototype.Angle = KismetMathLibrary.prototype.Quat_GetAngle; } catch (e) {};
+try { KismetMathLibrary.Angle = KismetMathLibrary.Quat_GetAngle; } catch (e) {};
+try { KismetMathLibrary.prototype.Exp = KismetMathLibrary.prototype.Quat_Exp; } catch (e) {};
+try { KismetMathLibrary.Exp = KismetMathLibrary.Quat_Exp; } catch (e) {};
+try { KismetMathLibrary.prototype.Euler = KismetMathLibrary.prototype.Quat_Euler; } catch (e) {};
+try { KismetMathLibrary.Euler = KismetMathLibrary.Quat_Euler; } catch (e) {};
+try { KismetMathLibrary.prototype.Ensureshortestarcto = KismetMathLibrary.prototype.Quat_EnforceShortestArcWith; } catch (e) {};
+try { KismetMathLibrary.Ensureshortestarcto = KismetMathLibrary.Quat_EnforceShortestArcWith; } catch (e) {};
+try { KismetMathLibrary.prototype.AngularDistance = KismetMathLibrary.prototype.Quat_AngularDistance; } catch (e) {};
+try { KismetMathLibrary.AngularDistance = KismetMathLibrary.Quat_AngularDistance; } catch (e) {};
 try { KismetMathLibrary.prototype.BitwiseOR = KismetMathLibrary.prototype.Or_IntInt; } catch (e) {};
 try { KismetMathLibrary.BitwiseOR = KismetMathLibrary.Or_IntInt; } catch (e) {};
+try { KismetMathLibrary.prototype.BitwiseOR = KismetMathLibrary.prototype.Or_Int64Int64; } catch (e) {};
+try { KismetMathLibrary.BitwiseOR = KismetMathLibrary.Or_Int64Int64; } catch (e) {};
+try { KismetMathLibrary.prototype.NotEqualExactly = KismetMathLibrary.prototype.NotEqualExactly_VectorVector; } catch (e) {};
+try { KismetMathLibrary.NotEqualExactly = KismetMathLibrary.NotEqualExactly_VectorVector; } catch (e) {};
+try { KismetMathLibrary.prototype.NotEqualExactly = KismetMathLibrary.prototype.NotEqualExactly_Vector4Vector4; } catch (e) {};
+try { KismetMathLibrary.NotEqualExactly = KismetMathLibrary.NotEqualExactly_Vector4Vector4; } catch (e) {};
+try { KismetMathLibrary.prototype.NotEqualExactly = KismetMathLibrary.prototype.NotEqualExactly_Vector2DVector2D; } catch (e) {};
+try { KismetMathLibrary.NotEqualExactly = KismetMathLibrary.NotEqualExactly_Vector2DVector2D; } catch (e) {};
 try { KismetMathLibrary.prototype.NotEqual = KismetMathLibrary.prototype.NotEqual_VectorVector; } catch (e) {};
 try { KismetMathLibrary.NotEqual = KismetMathLibrary.NotEqual_VectorVector; } catch (e) {};
+try { KismetMathLibrary.prototype.NotEqual = KismetMathLibrary.prototype.NotEqual_Vector4Vector4; } catch (e) {};
+try { KismetMathLibrary.NotEqual = KismetMathLibrary.NotEqual_Vector4Vector4; } catch (e) {};
 try { KismetMathLibrary.prototype.NotEqual = KismetMathLibrary.prototype.NotEqual_Vector2DVector2D; } catch (e) {};
 try { KismetMathLibrary.NotEqual = KismetMathLibrary.NotEqual_Vector2DVector2D; } catch (e) {};
 try { KismetMathLibrary.prototype.NotEqual = KismetMathLibrary.prototype.NotEqual_TimespanTimespan; } catch (e) {};
 try { KismetMathLibrary.NotEqual = KismetMathLibrary.NotEqual_TimespanTimespan; } catch (e) {};
 try { KismetMathLibrary.prototype.NotEqual = KismetMathLibrary.prototype.NotEqual_RotatorRotator; } catch (e) {};
 try { KismetMathLibrary.NotEqual = KismetMathLibrary.NotEqual_RotatorRotator; } catch (e) {};
+try { KismetMathLibrary.prototype.NotEqual = KismetMathLibrary.prototype.NotEqual_QuatQuat; } catch (e) {};
+try { KismetMathLibrary.NotEqual = KismetMathLibrary.NotEqual_QuatQuat; } catch (e) {};
 try { KismetMathLibrary.prototype.NotEqual = KismetMathLibrary.prototype.NotEqual_ObjectObject; } catch (e) {};
 try { KismetMathLibrary.NotEqual = KismetMathLibrary.NotEqual_ObjectObject; } catch (e) {};
 try { KismetMathLibrary.prototype.NotEqual = KismetMathLibrary.prototype.NotEqual_NameName; } catch (e) {};
 try { KismetMathLibrary.NotEqual = KismetMathLibrary.NotEqual_NameName; } catch (e) {};
+try { KismetMathLibrary.prototype.NotEqual = KismetMathLibrary.prototype.NotEqual_LinearColorLinearColor; } catch (e) {};
+try { KismetMathLibrary.NotEqual = KismetMathLibrary.NotEqual_LinearColorLinearColor; } catch (e) {};
 try { KismetMathLibrary.prototype.NotEqual = KismetMathLibrary.prototype.NotEqual_IntInt; } catch (e) {};
 try { KismetMathLibrary.NotEqual = KismetMathLibrary.NotEqual_IntInt; } catch (e) {};
+try { KismetMathLibrary.prototype.NotEqual = KismetMathLibrary.prototype.NotEqual_Int64Int64; } catch (e) {};
+try { KismetMathLibrary.NotEqual = KismetMathLibrary.NotEqual_Int64Int64; } catch (e) {};
 try { KismetMathLibrary.prototype.NotEqual = KismetMathLibrary.prototype.NotEqual_FloatFloat; } catch (e) {};
 try { KismetMathLibrary.NotEqual = KismetMathLibrary.NotEqual_FloatFloat; } catch (e) {};
 try { KismetMathLibrary.prototype.NotEqual = KismetMathLibrary.prototype.NotEqual_DateTimeDateTime; } catch (e) {};
@@ -972,10 +1222,16 @@ try { KismetMathLibrary.prototype.NotEqualBoolean = KismetMathLibrary.prototype.
 try { KismetMathLibrary.NotEqualBoolean = KismetMathLibrary.NotEqual_BoolBool; } catch (e) {};
 try { KismetMathLibrary.prototype.NOTBoolean = KismetMathLibrary.prototype.Not_PreBool; } catch (e) {};
 try { KismetMathLibrary.NOTBoolean = KismetMathLibrary.Not_PreBool; } catch (e) {};
+try { KismetMathLibrary.prototype.BitwiseNOT = KismetMathLibrary.prototype.Not_Int64; } catch (e) {};
+try { KismetMathLibrary.BitwiseNOT = KismetMathLibrary.Not_Int64; } catch (e) {};
 try { KismetMathLibrary.prototype.BitwiseNOT = KismetMathLibrary.prototype.Not_Int; } catch (e) {};
 try { KismetMathLibrary.BitwiseNOT = KismetMathLibrary.Not_Int; } catch (e) {};
+try { KismetMathLibrary.prototype.NormalSafe = KismetMathLibrary.prototype.NormalSafe2D; } catch (e) {};
+try { KismetMathLibrary.NormalSafe = KismetMathLibrary.NormalSafe2D; } catch (e) {};
 try { KismetMathLibrary.prototype.Delta = KismetMathLibrary.prototype.NormalizedDeltaRotator; } catch (e) {};
 try { KismetMathLibrary.Delta = KismetMathLibrary.NormalizedDeltaRotator; } catch (e) {};
+try { KismetMathLibrary.prototype.NormalizeInPlace = KismetMathLibrary.prototype.Normalize2D; } catch (e) {};
+try { KismetMathLibrary.NormalizeInPlace = KismetMathLibrary.Normalize2D; } catch (e) {};
 try { KismetMathLibrary.prototype.Normalize2D = KismetMathLibrary.prototype.Normal2D; } catch (e) {};
 try { KismetMathLibrary.Normalize2D = KismetMathLibrary.Normal2D; } catch (e) {};
 try { KismetMathLibrary.prototype.Normalize = KismetMathLibrary.prototype.Normal; } catch (e) {};
@@ -992,28 +1248,56 @@ try { KismetMathLibrary.prototype.ScaleRotator = KismetMathLibrary.prototype.Mul
 try { KismetMathLibrary.ScaleRotator = KismetMathLibrary.Multiply_RotatorInt; } catch (e) {};
 try { KismetMathLibrary.prototype.ScaleRotator = KismetMathLibrary.prototype.Multiply_RotatorFloat; } catch (e) {};
 try { KismetMathLibrary.ScaleRotator = KismetMathLibrary.Multiply_RotatorFloat; } catch (e) {};
+try { KismetMathLibrary.prototype.Min = KismetMathLibrary.prototype.MinInt64; } catch (e) {};
+try { KismetMathLibrary.Min = KismetMathLibrary.MinInt64; } catch (e) {};
+try { KismetMathLibrary.prototype.Max = KismetMathLibrary.prototype.MaxInt64; } catch (e) {};
+try { KismetMathLibrary.Max = KismetMathLibrary.MaxInt64; } catch (e) {};
+try { KismetMathLibrary.prototype.GetOrigin = KismetMathLibrary.prototype.Matrix_GetOrigin; } catch (e) {};
+try { KismetMathLibrary.GetOrigin = KismetMathLibrary.Matrix_GetOrigin; } catch (e) {};
 try { KismetMathLibrary.prototype.LinePlaneIntersection = KismetMathLibrary.prototype.LinePlaneIntersection_OriginNormal; } catch (e) {};
 try { KismetMathLibrary.LinePlaneIntersection = KismetMathLibrary.LinePlaneIntersection_OriginNormal; } catch (e) {};
 try { KismetMathLibrary.prototype.LerpUsingHSV = KismetMathLibrary.prototype.LinearColorLerpUsingHSV; } catch (e) {};
 try { KismetMathLibrary.LerpUsingHSV = KismetMathLibrary.LinearColorLerpUsingHSV; } catch (e) {};
 try { KismetMathLibrary.prototype.Lerp = KismetMathLibrary.prototype.LinearColorLerp; } catch (e) {};
 try { KismetMathLibrary.Lerp = KismetMathLibrary.LinearColorLerp; } catch (e) {};
+try { KismetMathLibrary.prototype.ToRGBE = KismetMathLibrary.prototype.LinearColor_ToRGBE; } catch (e) {};
+try { KismetMathLibrary.ToRGBE = KismetMathLibrary.LinearColor_ToRGBE; } catch (e) {};
+try { KismetMathLibrary.prototype.NewOpacity = KismetMathLibrary.prototype.LinearColor_ToNewOpacity; } catch (e) {};
+try { KismetMathLibrary.NewOpacity = KismetMathLibrary.LinearColor_ToNewOpacity; } catch (e) {};
+try { KismetMathLibrary.prototype.NearEqual = KismetMathLibrary.prototype.LinearColor_IsNearEqual; } catch (e) {};
+try { KismetMathLibrary.NearEqual = KismetMathLibrary.LinearColor_IsNearEqual; } catch (e) {};
+try { KismetMathLibrary.prototype.Min = KismetMathLibrary.prototype.LinearColor_GetMin; } catch (e) {};
+try { KismetMathLibrary.Min = KismetMathLibrary.LinearColor_GetMin; } catch (e) {};
+try { KismetMathLibrary.prototype.Max = KismetMathLibrary.prototype.LinearColor_GetMax; } catch (e) {};
+try { KismetMathLibrary.Max = KismetMathLibrary.LinearColor_GetMax; } catch (e) {};
+try { KismetMathLibrary.prototype.Luminance = KismetMathLibrary.prototype.LinearColor_GetLuminance; } catch (e) {};
+try { KismetMathLibrary.Luminance = KismetMathLibrary.LinearColor_GetLuminance; } catch (e) {};
+try { KismetMathLibrary.prototype.Distance = KismetMathLibrary.prototype.LinearColor_Distance; } catch (e) {};
+try { KismetMathLibrary.Distance = KismetMathLibrary.LinearColor_Distance; } catch (e) {};
+try { KismetMathLibrary.prototype.Desaturate = KismetMathLibrary.prototype.LinearColor_Desaturated; } catch (e) {};
+try { KismetMathLibrary.Desaturate = KismetMathLibrary.LinearColor_Desaturated; } catch (e) {};
 try { KismetMathLibrary.prototype.UnrotateVector = KismetMathLibrary.prototype.LessLess_VectorRotator; } catch (e) {};
 try { KismetMathLibrary.UnrotateVector = KismetMathLibrary.LessLess_VectorRotator; } catch (e) {};
 try { KismetMathLibrary.prototype.InRange = KismetMathLibrary.prototype.InRange_IntInt; } catch (e) {};
 try { KismetMathLibrary.InRange = KismetMathLibrary.InRange_IntInt; } catch (e) {};
+try { KismetMathLibrary.prototype.InRange = KismetMathLibrary.prototype.InRange_Int64Int64; } catch (e) {};
+try { KismetMathLibrary.InRange = KismetMathLibrary.InRange_Int64Int64; } catch (e) {};
 try { KismetMathLibrary.prototype.InRange = KismetMathLibrary.prototype.InRange_FloatFloat; } catch (e) {};
 try { KismetMathLibrary.InRange = KismetMathLibrary.InRange_FloatFloat; } catch (e) {};
+try { KismetMathLibrary.prototype.HSVtoRGBlinearcolor = KismetMathLibrary.prototype.HSVToRGBLinear; } catch (e) {};
+try { KismetMathLibrary.HSVtoRGBlinearcolor = KismetMathLibrary.HSVToRGBLinear; } catch (e) {};
 try { KismetMathLibrary.prototype.HSVtoRGB = KismetMathLibrary.prototype.HSVToRGB_Vector; } catch (e) {};
 try { KismetMathLibrary.HSVtoRGB = KismetMathLibrary.HSVToRGB_Vector; } catch (e) {};
 try { KismetMathLibrary.prototype.Snaptogrid = KismetMathLibrary.prototype.GridSnap_Float; } catch (e) {};
 try { KismetMathLibrary.Snaptogrid = KismetMathLibrary.GridSnap_Float; } catch (e) {};
 try { KismetMathLibrary.prototype.RotateVector = KismetMathLibrary.prototype.GreaterGreater_VectorRotator; } catch (e) {};
 try { KismetMathLibrary.RotateVector = KismetMathLibrary.GreaterGreater_VectorRotator; } catch (e) {};
-try { KismetMathLibrary.prototype.GetUnitDirectionVector = KismetMathLibrary.prototype.GetDirectionUnitVector; } catch (e) {};
-try { KismetMathLibrary.GetUnitDirectionVector = KismetMathLibrary.GetDirectionUnitVector; } catch (e) {};
-try { KismetMathLibrary.prototype.TruncateVector = KismetMathLibrary.prototype.FTruncVector; } catch (e) {};
-try { KismetMathLibrary.TruncateVector = KismetMathLibrary.FTruncVector; } catch (e) {};
+try { KismetMathLibrary.prototype.GetUnitDirection = KismetMathLibrary.prototype.GetDirectionUnitVector; } catch (e) {};
+try { KismetMathLibrary.GetUnitDirection = KismetMathLibrary.GetDirectionUnitVector; } catch (e) {};
+try { KismetMathLibrary.prototype.Truncate = KismetMathLibrary.prototype.FTruncVector; } catch (e) {};
+try { KismetMathLibrary.Truncate = KismetMathLibrary.FTruncVector; } catch (e) {};
+try { KismetMathLibrary.prototype.TruncatetoInt64 = KismetMathLibrary.prototype.FTrunc64; } catch (e) {};
+try { KismetMathLibrary.TruncatetoInt64 = KismetMathLibrary.FTrunc64; } catch (e) {};
 try { KismetMathLibrary.prototype.Truncate = KismetMathLibrary.prototype.FTrunc; } catch (e) {};
 try { KismetMathLibrary.Truncate = KismetMathLibrary.FTrunc; } catch (e) {};
 try { KismetMathLibrary.prototype.Division = KismetMathLibrary.prototype.FMod; } catch (e) {};
@@ -1022,12 +1306,24 @@ try { KismetMathLibrary.prototype.Min = KismetMathLibrary.prototype.FMin; } catc
 try { KismetMathLibrary.Min = KismetMathLibrary.FMin; } catch (e) {};
 try { KismetMathLibrary.prototype.Max = KismetMathLibrary.prototype.FMax; } catch (e) {};
 try { KismetMathLibrary.Max = KismetMathLibrary.FMax; } catch (e) {};
+try { KismetMathLibrary.prototype.FloortoInt64 = KismetMathLibrary.prototype.FFloor64; } catch (e) {};
+try { KismetMathLibrary.FloortoInt64 = KismetMathLibrary.FFloor64; } catch (e) {};
 try { KismetMathLibrary.prototype.Floor = KismetMathLibrary.prototype.FFloor; } catch (e) {};
 try { KismetMathLibrary.Floor = KismetMathLibrary.FFloor; } catch (e) {};
 try { KismetMathLibrary.prototype.Clamp = KismetMathLibrary.prototype.FClamp; } catch (e) {};
 try { KismetMathLibrary.Clamp = KismetMathLibrary.FClamp; } catch (e) {};
+try { KismetMathLibrary.prototype.FloortoInt64 = KismetMathLibrary.prototype.FCeil64; } catch (e) {};
+try { KismetMathLibrary.FloortoInt64 = KismetMathLibrary.FCeil64; } catch (e) {};
+try { KismetMathLibrary.prototype.EqualExactly = KismetMathLibrary.prototype.EqualExactly_VectorVector; } catch (e) {};
+try { KismetMathLibrary.EqualExactly = KismetMathLibrary.EqualExactly_VectorVector; } catch (e) {};
+try { KismetMathLibrary.prototype.EqualExactly = KismetMathLibrary.prototype.EqualExactly_Vector4Vector4; } catch (e) {};
+try { KismetMathLibrary.EqualExactly = KismetMathLibrary.EqualExactly_Vector4Vector4; } catch (e) {};
+try { KismetMathLibrary.prototype.EqualExactly = KismetMathLibrary.prototype.EqualExactly_Vector2DVector2D; } catch (e) {};
+try { KismetMathLibrary.EqualExactly = KismetMathLibrary.EqualExactly_Vector2DVector2D; } catch (e) {};
 try { KismetMathLibrary.prototype.Equal = KismetMathLibrary.prototype.EqualEqual_VectorVector; } catch (e) {};
 try { KismetMathLibrary.Equal = KismetMathLibrary.EqualEqual_VectorVector; } catch (e) {};
+try { KismetMathLibrary.prototype.Equal = KismetMathLibrary.prototype.EqualEqual_Vector4Vector4; } catch (e) {};
+try { KismetMathLibrary.Equal = KismetMathLibrary.EqualEqual_Vector4Vector4; } catch (e) {};
 try { KismetMathLibrary.prototype.Equal = KismetMathLibrary.prototype.EqualEqual_Vector2DVector2D; } catch (e) {};
 try { KismetMathLibrary.Equal = KismetMathLibrary.EqualEqual_Vector2DVector2D; } catch (e) {};
 try { KismetMathLibrary.prototype.EqualTransform = KismetMathLibrary.prototype.EqualEqual_TransformTransform; } catch (e) {};
@@ -1036,12 +1332,18 @@ try { KismetMathLibrary.prototype.Equal = KismetMathLibrary.prototype.EqualEqual
 try { KismetMathLibrary.Equal = KismetMathLibrary.EqualEqual_TimespanTimespan; } catch (e) {};
 try { KismetMathLibrary.prototype.Equal = KismetMathLibrary.prototype.EqualEqual_RotatorRotator; } catch (e) {};
 try { KismetMathLibrary.Equal = KismetMathLibrary.EqualEqual_RotatorRotator; } catch (e) {};
+try { KismetMathLibrary.prototype.Equal = KismetMathLibrary.prototype.EqualEqual_QuatQuat; } catch (e) {};
+try { KismetMathLibrary.Equal = KismetMathLibrary.EqualEqual_QuatQuat; } catch (e) {};
 try { KismetMathLibrary.prototype.Equal = KismetMathLibrary.prototype.EqualEqual_ObjectObject; } catch (e) {};
 try { KismetMathLibrary.Equal = KismetMathLibrary.EqualEqual_ObjectObject; } catch (e) {};
 try { KismetMathLibrary.prototype.Equal = KismetMathLibrary.prototype.EqualEqual_NameName; } catch (e) {};
 try { KismetMathLibrary.Equal = KismetMathLibrary.EqualEqual_NameName; } catch (e) {};
+try { KismetMathLibrary.prototype.Equal = KismetMathLibrary.prototype.EqualEqual_LinearColorLinearColor; } catch (e) {};
+try { KismetMathLibrary.Equal = KismetMathLibrary.EqualEqual_LinearColorLinearColor; } catch (e) {};
 try { KismetMathLibrary.prototype.Equal = KismetMathLibrary.prototype.EqualEqual_IntInt; } catch (e) {};
 try { KismetMathLibrary.Equal = KismetMathLibrary.EqualEqual_IntInt; } catch (e) {};
+try { KismetMathLibrary.prototype.Equal = KismetMathLibrary.prototype.EqualEqual_Int64Int64; } catch (e) {};
+try { KismetMathLibrary.Equal = KismetMathLibrary.EqualEqual_Int64Int64; } catch (e) {};
 try { KismetMathLibrary.prototype.Equal = KismetMathLibrary.prototype.EqualEqual_FloatFloat; } catch (e) {};
 try { KismetMathLibrary.Equal = KismetMathLibrary.EqualEqual_FloatFloat; } catch (e) {};
 try { KismetMathLibrary.prototype.Equal = KismetMathLibrary.prototype.EqualEqual_DateTimeDateTime; } catch (e) {};
@@ -1052,6 +1354,12 @@ try { KismetMathLibrary.prototype.Equal = KismetMathLibrary.prototype.EqualEqual
 try { KismetMathLibrary.Equal = KismetMathLibrary.EqualEqual_ByteByte; } catch (e) {};
 try { KismetMathLibrary.prototype.EqualBoolean = KismetMathLibrary.prototype.EqualEqual_BoolBool; } catch (e) {};
 try { KismetMathLibrary.EqualBoolean = KismetMathLibrary.EqualEqual_BoolBool; } catch (e) {};
+try { KismetMathLibrary.prototype.DynamicWeightedMovingAverageVector = KismetMathLibrary.prototype.DynamicWeightedMovingAverage_FVector; } catch (e) {};
+try { KismetMathLibrary.DynamicWeightedMovingAverageVector = KismetMathLibrary.DynamicWeightedMovingAverage_FVector; } catch (e) {};
+try { KismetMathLibrary.prototype.DynamicWeightedMovingAverageRotator = KismetMathLibrary.prototype.DynamicWeightedMovingAverage_FRotator; } catch (e) {};
+try { KismetMathLibrary.DynamicWeightedMovingAverageRotator = KismetMathLibrary.DynamicWeightedMovingAverage_FRotator; } catch (e) {};
+try { KismetMathLibrary.prototype.DynamicWeightedMovingAverageFloat = KismetMathLibrary.prototype.DynamicWeightedMovingAverage_Float; } catch (e) {};
+try { KismetMathLibrary.DynamicWeightedMovingAverageFloat = KismetMathLibrary.DynamicWeightedMovingAverage_Float; } catch (e) {};
 try { KismetMathLibrary.prototype.DotProduct = KismetMathLibrary.prototype.DotProduct2D; } catch (e) {};
 try { KismetMathLibrary.DotProduct = KismetMathLibrary.DotProduct2D; } catch (e) {};
 try { KismetMathLibrary.prototype.DotProduct = KismetMathLibrary.prototype.Dot_VectorVector; } catch (e) {};
@@ -1084,10 +1392,20 @@ try { KismetMathLibrary.prototype.ToTransform = KismetMathLibrary.prototype.Conv
 try { KismetMathLibrary.ToTransform = KismetMathLibrary.Conv_VectorToTransform; } catch (e) {};
 try { KismetMathLibrary.prototype.RotationFromXVector = KismetMathLibrary.prototype.Conv_VectorToRotator; } catch (e) {};
 try { KismetMathLibrary.RotationFromXVector = KismetMathLibrary.Conv_VectorToRotator; } catch (e) {};
+try { KismetMathLibrary.prototype.ToQuaterion = KismetMathLibrary.prototype.Conv_VectorToQuaterion; } catch (e) {};
+try { KismetMathLibrary.ToQuaterion = KismetMathLibrary.Conv_VectorToQuaterion; } catch (e) {};
 try { KismetMathLibrary.prototype.ToLinearColor = KismetMathLibrary.prototype.Conv_VectorToLinearColor; } catch (e) {};
 try { KismetMathLibrary.ToLinearColor = KismetMathLibrary.Conv_VectorToLinearColor; } catch (e) {};
+try { KismetMathLibrary.prototype.ToVector = KismetMathLibrary.prototype.Conv_Vector4ToVector; } catch (e) {};
+try { KismetMathLibrary.ToVector = KismetMathLibrary.Conv_Vector4ToVector; } catch (e) {};
+try { KismetMathLibrary.prototype.ToRotation = KismetMathLibrary.prototype.Conv_Vector4ToRotator; } catch (e) {};
+try { KismetMathLibrary.ToRotation = KismetMathLibrary.Conv_Vector4ToRotator; } catch (e) {};
+try { KismetMathLibrary.prototype.ToQuaterion = KismetMathLibrary.prototype.Conv_Vector4ToQuaterion; } catch (e) {};
+try { KismetMathLibrary.ToQuaterion = KismetMathLibrary.Conv_Vector4ToQuaterion; } catch (e) {};
 try { KismetMathLibrary.prototype.ToVector = KismetMathLibrary.prototype.Conv_Vector2DToVector; } catch (e) {};
 try { KismetMathLibrary.ToVector = KismetMathLibrary.Conv_Vector2DToVector; } catch (e) {};
+try { KismetMathLibrary.prototype.ToIntPoint = KismetMathLibrary.prototype.Conv_Vector2DToIntPoint; } catch (e) {};
+try { KismetMathLibrary.ToIntPoint = KismetMathLibrary.Conv_Vector2DToIntPoint; } catch (e) {};
 try { KismetMathLibrary.prototype.GetRotationXVector = KismetMathLibrary.prototype.Conv_RotatorToVector; } catch (e) {};
 try { KismetMathLibrary.GetRotationXVector = KismetMathLibrary.Conv_RotatorToVector; } catch (e) {};
 try { KismetMathLibrary.prototype.ToTransform = KismetMathLibrary.prototype.Conv_RotatorToTransform; } catch (e) {};
@@ -1104,6 +1422,8 @@ try { KismetMathLibrary.prototype.ToVector = KismetMathLibrary.prototype.Conv_In
 try { KismetMathLibrary.ToVector = KismetMathLibrary.Conv_IntVectorToVector; } catch (e) {};
 try { KismetMathLibrary.prototype.ToIntVector = KismetMathLibrary.prototype.Conv_IntToIntVector; } catch (e) {};
 try { KismetMathLibrary.ToIntVector = KismetMathLibrary.Conv_IntToIntVector; } catch (e) {};
+try { KismetMathLibrary.prototype.ToInt64 = KismetMathLibrary.prototype.Conv_IntToInt64; } catch (e) {};
+try { KismetMathLibrary.ToInt64 = KismetMathLibrary.Conv_IntToInt64; } catch (e) {};
 try { KismetMathLibrary.prototype.ToFloat = KismetMathLibrary.prototype.Conv_IntToFloat; } catch (e) {};
 try { KismetMathLibrary.ToFloat = KismetMathLibrary.Conv_IntToFloat; } catch (e) {};
 try { KismetMathLibrary.prototype.ToByte = KismetMathLibrary.prototype.Conv_IntToByte; } catch (e) {};
@@ -1128,6 +1448,10 @@ try { KismetMathLibrary.prototype.ToByte = KismetMathLibrary.prototype.Conv_Bool
 try { KismetMathLibrary.ToByte = KismetMathLibrary.Conv_BoolToByte; } catch (e) {};
 try { KismetMathLibrary.prototype.CombineRotators = KismetMathLibrary.prototype.ComposeRotators; } catch (e) {};
 try { KismetMathLibrary.CombineRotators = KismetMathLibrary.ComposeRotators; } catch (e) {};
+try { KismetMathLibrary.prototype.Clamp = KismetMathLibrary.prototype.ClampInt64; } catch (e) {};
+try { KismetMathLibrary.Clamp = KismetMathLibrary.ClampInt64; } catch (e) {};
+try { KismetMathLibrary.prototype.Interpolate = KismetMathLibrary.prototype.CInterpTo; } catch (e) {};
+try { KismetMathLibrary.Interpolate = KismetMathLibrary.CInterpTo; } catch (e) {};
 try { KismetMathLibrary.prototype.XORBoolean = KismetMathLibrary.prototype.BooleanXOR; } catch (e) {};
 try { KismetMathLibrary.XORBoolean = KismetMathLibrary.BooleanXOR; } catch (e) {};
 try { KismetMathLibrary.prototype.ORBoolean = KismetMathLibrary.prototype.BooleanOR; } catch (e) {};
@@ -1144,27 +1468,31 @@ try { KismetMathLibrary.prototype.Max = KismetMathLibrary.prototype.BMax; } catc
 try { KismetMathLibrary.Max = KismetMathLibrary.BMax; } catch (e) {};
 try { KismetMathLibrary.prototype.BitwiseAND = KismetMathLibrary.prototype.And_IntInt; } catch (e) {};
 try { KismetMathLibrary.BitwiseAND = KismetMathLibrary.And_IntInt; } catch (e) {};
+try { KismetMathLibrary.prototype.BitwiseAND = KismetMathLibrary.prototype.And_Int64Int64; } catch (e) {};
+try { KismetMathLibrary.BitwiseAND = KismetMathLibrary.And_Int64Int64; } catch (e) {};
+try { KismetMathLibrary.prototype.Absolute = KismetMathLibrary.prototype.Abs_Int64; } catch (e) {};
+try { KismetMathLibrary.Absolute = KismetMathLibrary.Abs_Int64; } catch (e) {};
 try { KismetMathLibrary.prototype.Absolute = KismetMathLibrary.prototype.Abs_Int; } catch (e) {};
 try { KismetMathLibrary.Absolute = KismetMathLibrary.Abs_Int; } catch (e) {};
 try { KismetMathLibrary.prototype.Absolute = KismetMathLibrary.prototype.Abs; } catch (e) {};
 try { KismetMathLibrary.Absolute = KismetMathLibrary.Abs; } catch (e) {};
-try { let fnprepatch_379 = KismetRenderingLibrary.prototype.RenderTargetCreateStaticTexture2DEditorOnly;KismetRenderingLibrary.prototype.RenderTargetCreateStaticTexture2DEditorOnly = function (RenderTarget, Name = "Texture", CompressionSettings = "TC_Default", MipSettings = "TMGS_FromTextureGroup") { return fnprepatch_379.call(this, RenderTarget, Name, CompressionSettings, MipSettings) }; } catch (e) {};
-try { let fnprepatch_380 = KismetRenderingLibrary.prototype.CreateRenderTarget2D;KismetRenderingLibrary.prototype.CreateRenderTarget2D = function (WorldContextObject, Width = 256, Height = 256, Format = "RTF_RGBA16f") { return fnprepatch_380.call(this, WorldContextObject, Width, Height, Format) }; } catch (e) {};
-try { let fnprepatch_381 = KismetRenderingLibrary.prototype.ClearRenderTarget2D;KismetRenderingLibrary.prototype.ClearRenderTarget2D = function (WorldContextObject, TextureRenderTarget, ClearColor = {"R":0,"G":0,"B":0,"A":1}) { return fnprepatch_381.call(this, WorldContextObject, TextureRenderTarget, ClearColor) }; } catch (e) {};
+try { let fnprepatch_417 = KismetRenderingLibrary.prototype.RenderTargetCreateStaticTexture2DEditorOnly;KismetRenderingLibrary.prototype.RenderTargetCreateStaticTexture2DEditorOnly = function (RenderTarget, Name = "Texture", CompressionSettings = "TC_Default", MipSettings = "TMGS_FromTextureGroup") { return fnprepatch_417.call(this, RenderTarget, Name, CompressionSettings, MipSettings) }; } catch (e) {};
+try { let fnprepatch_418 = KismetRenderingLibrary.prototype.CreateRenderTarget2D;KismetRenderingLibrary.prototype.CreateRenderTarget2D = function (WorldContextObject, Width = 256, Height = 256, Format = "RTF_RGBA16f", ClearColor = {"R":0,"G":0,"B":0,"A":1}) { return fnprepatch_418.call(this, WorldContextObject, Width, Height, Format, ClearColor) }; } catch (e) {};
+try { let fnprepatch_419 = KismetRenderingLibrary.prototype.ClearRenderTarget2D;KismetRenderingLibrary.prototype.ClearRenderTarget2D = function (WorldContextObject, TextureRenderTarget, ClearColor = {"R":0,"G":0,"B":0,"A":1}) { return fnprepatch_419.call(this, WorldContextObject, TextureRenderTarget, ClearColor) }; } catch (e) {};
 try { KismetRenderingLibrary.prototype.RenderTargetCreateStaticTextureEditorOnly = KismetRenderingLibrary.prototype.RenderTargetCreateStaticTexture2DEditorOnly; } catch (e) {};
 try { KismetRenderingLibrary.RenderTargetCreateStaticTextureEditorOnly = KismetRenderingLibrary.RenderTargetCreateStaticTexture2DEditorOnly; } catch (e) {};
-try { let fnprepatch_382 = KismetStringLibrary.prototype.StartsWith;KismetStringLibrary.prototype.StartsWith = function (SourceString, InPrefix, SearchCase = "IgnoreCase") { return fnprepatch_382.call(this, SourceString, InPrefix, SearchCase) }; } catch (e) {};
-try { let fnprepatch_383 = KismetStringLibrary.prototype.Split;KismetStringLibrary.prototype.Split = function (SourceString, InStr, LeftS, RightS, SearchCase = "IgnoreCase", SearchDir = "FromStart") { return fnprepatch_383.call(this, SourceString, InStr, LeftS, RightS, SearchCase, SearchDir) }; } catch (e) {};
-try { let fnprepatch_384 = KismetStringLibrary.prototype.ReplaceInline;KismetStringLibrary.prototype.ReplaceInline = function (SourceString, SearchText, ReplacementText, SearchCase = "IgnoreCase") { return fnprepatch_384.call(this, SourceString, SearchText, ReplacementText, SearchCase) }; } catch (e) {};
-try { let fnprepatch_385 = KismetStringLibrary.prototype.Replace;KismetStringLibrary.prototype.Replace = function (SourceString, From, To, SearchCase = "IgnoreCase") { return fnprepatch_385.call(this, SourceString, From, To, SearchCase) }; } catch (e) {};
-try { let fnprepatch_386 = KismetStringLibrary.prototype.ParseIntoArray;KismetStringLibrary.prototype.ParseIntoArray = function (SourceString, Delimiter = " ", CullEmptyStrings = true) { return fnprepatch_386.call(this, SourceString, Delimiter, CullEmptyStrings) }; } catch (e) {};
-try { let fnprepatch_387 = KismetStringLibrary.prototype.MatchesWildcard;KismetStringLibrary.prototype.MatchesWildcard = function (SourceString, Wildcard, SearchCase = "IgnoreCase") { return fnprepatch_387.call(this, SourceString, Wildcard, SearchCase) }; } catch (e) {};
-try { let fnprepatch_388 = KismetStringLibrary.prototype.JoinStringArray;KismetStringLibrary.prototype.JoinStringArray = function (SourceArray, Separator = " ") { return fnprepatch_388.call(this, SourceArray, Separator) }; } catch (e) {};
-try { let fnprepatch_389 = KismetStringLibrary.prototype.GetSubstring;KismetStringLibrary.prototype.GetSubstring = function (SourceString, StartIndex = 0, Length = 1) { return fnprepatch_389.call(this, SourceString, StartIndex, Length) }; } catch (e) {};
-try { let fnprepatch_390 = KismetStringLibrary.prototype.GetCharacterAsNumber;KismetStringLibrary.prototype.GetCharacterAsNumber = function (SourceString, Index = 0) { return fnprepatch_390.call(this, SourceString, Index) }; } catch (e) {};
-try { let fnprepatch_391 = KismetStringLibrary.prototype.FindSubstring;KismetStringLibrary.prototype.FindSubstring = function (SearchIn, Substring, bUseCase = false, bSearchFromEnd = false, StartPosition = -1) { return fnprepatch_391.call(this, SearchIn, Substring, bUseCase, bSearchFromEnd, StartPosition) }; } catch (e) {};
-try { let fnprepatch_392 = KismetStringLibrary.prototype.EndsWith;KismetStringLibrary.prototype.EndsWith = function (SourceString, InSuffix, SearchCase = "IgnoreCase") { return fnprepatch_392.call(this, SourceString, InSuffix, SearchCase) }; } catch (e) {};
-try { let fnprepatch_393 = KismetStringLibrary.prototype.Contains;KismetStringLibrary.prototype.Contains = function (SearchIn, Substring, bUseCase = false, bSearchFromEnd = false) { return fnprepatch_393.call(this, SearchIn, Substring, bUseCase, bSearchFromEnd) }; } catch (e) {};
+try { let fnprepatch_420 = KismetStringLibrary.prototype.StartsWith;KismetStringLibrary.prototype.StartsWith = function (SourceString, InPrefix, SearchCase = "IgnoreCase") { return fnprepatch_420.call(this, SourceString, InPrefix, SearchCase) }; } catch (e) {};
+try { let fnprepatch_421 = KismetStringLibrary.prototype.Split;KismetStringLibrary.prototype.Split = function (SourceString, InStr, LeftS, RightS, SearchCase = "IgnoreCase", SearchDir = "FromStart") { return fnprepatch_421.call(this, SourceString, InStr, LeftS, RightS, SearchCase, SearchDir) }; } catch (e) {};
+try { let fnprepatch_422 = KismetStringLibrary.prototype.ReplaceInline;KismetStringLibrary.prototype.ReplaceInline = function (SourceString, SearchText, ReplacementText, SearchCase = "IgnoreCase") { return fnprepatch_422.call(this, SourceString, SearchText, ReplacementText, SearchCase) }; } catch (e) {};
+try { let fnprepatch_423 = KismetStringLibrary.prototype.Replace;KismetStringLibrary.prototype.Replace = function (SourceString, From, To, SearchCase = "IgnoreCase") { return fnprepatch_423.call(this, SourceString, From, To, SearchCase) }; } catch (e) {};
+try { let fnprepatch_424 = KismetStringLibrary.prototype.ParseIntoArray;KismetStringLibrary.prototype.ParseIntoArray = function (SourceString, Delimiter = " ", CullEmptyStrings = true) { return fnprepatch_424.call(this, SourceString, Delimiter, CullEmptyStrings) }; } catch (e) {};
+try { let fnprepatch_425 = KismetStringLibrary.prototype.MatchesWildcard;KismetStringLibrary.prototype.MatchesWildcard = function (SourceString, Wildcard, SearchCase = "IgnoreCase") { return fnprepatch_425.call(this, SourceString, Wildcard, SearchCase) }; } catch (e) {};
+try { let fnprepatch_426 = KismetStringLibrary.prototype.JoinStringArray;KismetStringLibrary.prototype.JoinStringArray = function (SourceArray, Separator = " ") { return fnprepatch_426.call(this, SourceArray, Separator) }; } catch (e) {};
+try { let fnprepatch_427 = KismetStringLibrary.prototype.GetSubstring;KismetStringLibrary.prototype.GetSubstring = function (SourceString, StartIndex = 0, Length = 1) { return fnprepatch_427.call(this, SourceString, StartIndex, Length) }; } catch (e) {};
+try { let fnprepatch_428 = KismetStringLibrary.prototype.GetCharacterAsNumber;KismetStringLibrary.prototype.GetCharacterAsNumber = function (SourceString, Index = 0) { return fnprepatch_428.call(this, SourceString, Index) }; } catch (e) {};
+try { let fnprepatch_429 = KismetStringLibrary.prototype.FindSubstring;KismetStringLibrary.prototype.FindSubstring = function (SearchIn, Substring, bUseCase = false, bSearchFromEnd = false, StartPosition = -1) { return fnprepatch_429.call(this, SearchIn, Substring, bUseCase, bSearchFromEnd, StartPosition) }; } catch (e) {};
+try { let fnprepatch_430 = KismetStringLibrary.prototype.EndsWith;KismetStringLibrary.prototype.EndsWith = function (SourceString, InSuffix, SearchCase = "IgnoreCase") { return fnprepatch_430.call(this, SourceString, InSuffix, SearchCase) }; } catch (e) {};
+try { let fnprepatch_431 = KismetStringLibrary.prototype.Contains;KismetStringLibrary.prototype.Contains = function (SearchIn, Substring, bUseCase = false, bSearchFromEnd = false) { return fnprepatch_431.call(this, SearchIn, Substring, bUseCase, bSearchFromEnd) }; } catch (e) {};
 try { KismetStringLibrary.prototype.NotEqual = KismetStringLibrary.prototype.NotEqual_StrStr; } catch (e) {};
 try { KismetStringLibrary.NotEqual = KismetStringLibrary.NotEqual_StrStr; } catch (e) {};
 try { KismetStringLibrary.prototype.Equal = KismetStringLibrary.prototype.EqualEqual_StrStr; } catch (e) {};
@@ -1237,50 +1565,52 @@ try { KismetStringTableLibrary.prototype.GetStringTableNamespace = KismetStringT
 try { KismetStringTableLibrary.GetStringTableNamespace = KismetStringTableLibrary.GetTableNamespace; } catch (e) {};
 try { KismetStringTableLibrary.prototype.GetStringTableEntrySourceString = KismetStringTableLibrary.prototype.GetTableEntrySourceString; } catch (e) {};
 try { KismetStringTableLibrary.GetStringTableEntrySourceString = KismetStringTableLibrary.GetTableEntrySourceString; } catch (e) {};
-try { let fnprepatch_394 = KismetSystemLibrary.prototype.SphereTraceSingleForObjects;KismetSystemLibrary.prototype.SphereTraceSingleForObjects = function (WorldContextObject, Start, End, Radius, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_394.call(this, WorldContextObject, Start, End, Radius, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
-try { let fnprepatch_395 = KismetSystemLibrary.prototype.SphereTraceSingleByProfile;KismetSystemLibrary.prototype.SphereTraceSingleByProfile = function (WorldContextObject, Start, End, Radius, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_395.call(this, WorldContextObject, Start, End, Radius, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
-try { let fnprepatch_396 = KismetSystemLibrary.prototype.SphereTraceSingle;KismetSystemLibrary.prototype.SphereTraceSingle = function (WorldContextObject, Start, End, Radius, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_396.call(this, WorldContextObject, Start, End, Radius, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
-try { let fnprepatch_397 = KismetSystemLibrary.prototype.SphereTraceMultiForObjects;KismetSystemLibrary.prototype.SphereTraceMultiForObjects = function (WorldContextObject, Start, End, Radius, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_397.call(this, WorldContextObject, Start, End, Radius, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
-try { let fnprepatch_398 = KismetSystemLibrary.prototype.SphereTraceMultiByProfile;KismetSystemLibrary.prototype.SphereTraceMultiByProfile = function (WorldContextObject, Start, End, Radius, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_398.call(this, WorldContextObject, Start, End, Radius, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
-try { let fnprepatch_399 = KismetSystemLibrary.prototype.SphereTraceMulti;KismetSystemLibrary.prototype.SphereTraceMulti = function (WorldContextObject, Start, End, Radius, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_399.call(this, WorldContextObject, Start, End, Radius, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
-try { let fnprepatch_400 = KismetSystemLibrary.prototype.PrintText;KismetSystemLibrary.prototype.PrintText = function (WorldContextObject, InText = "Hello", bPrintToScreen = true, bPrintToLog = true, TextColor = {"R":0,"G":0.6600000262260437,"B":1,"A":1}, Duration = 2) { return fnprepatch_400.call(this, WorldContextObject, InText, bPrintToScreen, bPrintToLog, TextColor, Duration) }; } catch (e) {};
-try { let fnprepatch_401 = KismetSystemLibrary.prototype.PrintString;KismetSystemLibrary.prototype.PrintString = function (WorldContextObject, InString = "Hello", bPrintToScreen = true, bPrintToLog = true, TextColor = {"R":0,"G":0.6600000262260437,"B":1,"A":1}, Duration = 2) { return fnprepatch_401.call(this, WorldContextObject, InString, bPrintToScreen, bPrintToLog, TextColor, Duration) }; } catch (e) {};
-try { let fnprepatch_402 = KismetSystemLibrary.prototype.LineTraceSingleForObjects;KismetSystemLibrary.prototype.LineTraceSingleForObjects = function (WorldContextObject, Start, End, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_402.call(this, WorldContextObject, Start, End, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
-try { let fnprepatch_403 = KismetSystemLibrary.prototype.LineTraceSingleByProfile;KismetSystemLibrary.prototype.LineTraceSingleByProfile = function (WorldContextObject, Start, End, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_403.call(this, WorldContextObject, Start, End, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
-try { let fnprepatch_404 = KismetSystemLibrary.prototype.LineTraceSingle;KismetSystemLibrary.prototype.LineTraceSingle = function (WorldContextObject, Start, End, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_404.call(this, WorldContextObject, Start, End, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
-try { let fnprepatch_405 = KismetSystemLibrary.prototype.LineTraceMultiForObjects;KismetSystemLibrary.prototype.LineTraceMultiForObjects = function (WorldContextObject, Start, End, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_405.call(this, WorldContextObject, Start, End, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
-try { let fnprepatch_406 = KismetSystemLibrary.prototype.LineTraceMultiByProfile;KismetSystemLibrary.prototype.LineTraceMultiByProfile = function (WorldContextObject, Start, End, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_406.call(this, WorldContextObject, Start, End, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
-try { let fnprepatch_407 = KismetSystemLibrary.prototype.LineTraceMulti;KismetSystemLibrary.prototype.LineTraceMulti = function (WorldContextObject, Start, End, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_407.call(this, WorldContextObject, Start, End, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
-try { let fnprepatch_408 = KismetSystemLibrary.prototype.ExecuteConsoleCommand;KismetSystemLibrary.prototype.ExecuteConsoleCommand = function (WorldContextObject, Command, SpecificPlayer = undefined) { return fnprepatch_408.call(this, WorldContextObject, Command, SpecificPlayer) }; } catch (e) {};
-try { let fnprepatch_409 = KismetSystemLibrary.prototype.DrawDebugString;KismetSystemLibrary.prototype.DrawDebugString = function (WorldContextObject, TextLocation, Text, TestBaseActor = undefined, TextColor = {"R":1,"G":1,"B":1,"A":1}, Duration = 0) { return fnprepatch_409.call(this, WorldContextObject, TextLocation, Text, TestBaseActor, TextColor, Duration) }; } catch (e) {};
-try { let fnprepatch_410 = KismetSystemLibrary.prototype.DrawDebugSphere;KismetSystemLibrary.prototype.DrawDebugSphere = function (WorldContextObject, Center, Radius = 100, Segments = 12, LineColor = {"R":1,"G":1,"B":1,"A":1}, Duration = 0, Thickness = 0) { return fnprepatch_410.call(this, WorldContextObject, Center, Radius, Segments, LineColor, Duration, Thickness) }; } catch (e) {};
-try { let fnprepatch_411 = KismetSystemLibrary.prototype.DrawDebugPoint;KismetSystemLibrary.prototype.DrawDebugPoint = function (WorldContextObject, Position, Size, PointColor, Duration = 0) { return fnprepatch_411.call(this, WorldContextObject, Position, Size, PointColor, Duration) }; } catch (e) {};
-try { let fnprepatch_412 = KismetSystemLibrary.prototype.DrawDebugPlane;KismetSystemLibrary.prototype.DrawDebugPlane = function (WorldContextObject, PlaneCoordinates, Location, Size, PlaneColor = {"R":1,"G":1,"B":1,"A":1}, Duration = 0) { return fnprepatch_412.call(this, WorldContextObject, PlaneCoordinates, Location, Size, PlaneColor, Duration) }; } catch (e) {};
-try { let fnprepatch_413 = KismetSystemLibrary.prototype.DrawDebugLine;KismetSystemLibrary.prototype.DrawDebugLine = function (WorldContextObject, LineStart, LineEnd, LineColor, Duration = 0, Thickness = 0) { return fnprepatch_413.call(this, WorldContextObject, LineStart, LineEnd, LineColor, Duration, Thickness) }; } catch (e) {};
-try { let fnprepatch_414 = KismetSystemLibrary.prototype.DrawDebugFrustum;KismetSystemLibrary.prototype.DrawDebugFrustum = function (WorldContextObject, FrustumTransform, FrustumColor = {"R":1,"G":1,"B":1,"A":1}, Duration = 0, Thickness = 0) { return fnprepatch_414.call(this, WorldContextObject, FrustumTransform, FrustumColor, Duration, Thickness) }; } catch (e) {};
-try { let fnprepatch_415 = KismetSystemLibrary.prototype.DrawDebugFloatHistoryTransform;KismetSystemLibrary.prototype.DrawDebugFloatHistoryTransform = function (WorldContextObject, FloatHistory, DrawTransform, DrawSize, DrawColor = {"R":1,"G":1,"B":1,"A":1}, Duration = 0) { return fnprepatch_415.call(this, WorldContextObject, FloatHistory, DrawTransform, DrawSize, DrawColor, Duration) }; } catch (e) {};
-try { let fnprepatch_416 = KismetSystemLibrary.prototype.DrawDebugFloatHistoryLocation;KismetSystemLibrary.prototype.DrawDebugFloatHistoryLocation = function (WorldContextObject, FloatHistory, DrawLocation, DrawSize, DrawColor = {"R":1,"G":1,"B":1,"A":1}, Duration = 0) { return fnprepatch_416.call(this, WorldContextObject, FloatHistory, DrawLocation, DrawSize, DrawColor, Duration) }; } catch (e) {};
-try { let fnprepatch_417 = KismetSystemLibrary.prototype.DrawDebugCylinder;KismetSystemLibrary.prototype.DrawDebugCylinder = function (WorldContextObject, Start, End, Radius = 100, Segments = 12, LineColor = {"R":1,"G":1,"B":1,"A":1}, Duration = 0, Thickness = 0) { return fnprepatch_417.call(this, WorldContextObject, Start, End, Radius, Segments, LineColor, Duration, Thickness) }; } catch (e) {};
-try { let fnprepatch_418 = KismetSystemLibrary.prototype.DrawDebugCoordinateSystem;KismetSystemLibrary.prototype.DrawDebugCoordinateSystem = function (WorldContextObject, AxisLoc, AxisRot, Scale = 1, Duration = 0, Thickness = 0) { return fnprepatch_418.call(this, WorldContextObject, AxisLoc, AxisRot, Scale, Duration, Thickness) }; } catch (e) {};
-try { let fnprepatch_419 = KismetSystemLibrary.prototype.DrawDebugConeInDegrees;KismetSystemLibrary.prototype.DrawDebugConeInDegrees = function (WorldContextObject, Origin, Direction, Length = 100, AngleWidth = 45, AngleHeight = 45, NumSides = 12, LineColor = {"R":1,"G":1,"B":1,"A":1}, Duration = 0, Thickness = 0) { return fnprepatch_419.call(this, WorldContextObject, Origin, Direction, Length, AngleWidth, AngleHeight, NumSides, LineColor, Duration, Thickness) }; } catch (e) {};
-try { let fnprepatch_420 = KismetSystemLibrary.prototype.DrawDebugCone;KismetSystemLibrary.prototype.DrawDebugCone = function (WorldContextObject, Origin, Direction, Length, AngleWidth, AngleHeight, NumSides, LineColor, Duration = 0, Thickness = 0) { return fnprepatch_420.call(this, WorldContextObject, Origin, Direction, Length, AngleWidth, AngleHeight, NumSides, LineColor, Duration, Thickness) }; } catch (e) {};
-try { let fnprepatch_421 = KismetSystemLibrary.prototype.DrawDebugCircle;KismetSystemLibrary.prototype.DrawDebugCircle = function (WorldContextObject, Center, Radius, NumSegments = 12, LineColor = {"R":1,"G":1,"B":1,"A":1}, Duration = 0, Thickness = 0, YAxis, ZAxis, bDrawAxis = false) { return fnprepatch_421.call(this, WorldContextObject, Center, Radius, NumSegments, LineColor, Duration, Thickness, YAxis, ZAxis, bDrawAxis) }; } catch (e) {};
-try { let fnprepatch_422 = KismetSystemLibrary.prototype.DrawDebugCapsule;KismetSystemLibrary.prototype.DrawDebugCapsule = function (WorldContextObject, Center, HalfHeight, Radius, Rotation, LineColor = {"R":1,"G":1,"B":1,"A":1}, Duration = 0, Thickness = 0) { return fnprepatch_422.call(this, WorldContextObject, Center, HalfHeight, Radius, Rotation, LineColor, Duration, Thickness) }; } catch (e) {};
-try { let fnprepatch_423 = KismetSystemLibrary.prototype.DrawDebugCamera;KismetSystemLibrary.prototype.DrawDebugCamera = function (CameraActor, CameraColor = {"R":1,"G":1,"B":1,"A":1}, Duration = 0) { return fnprepatch_423.call(this, CameraActor, CameraColor, Duration) }; } catch (e) {};
-try { let fnprepatch_424 = KismetSystemLibrary.prototype.DrawDebugBox;KismetSystemLibrary.prototype.DrawDebugBox = function (WorldContextObject, Center, Extent, LineColor, Rotation, Duration = 0, Thickness = 0) { return fnprepatch_424.call(this, WorldContextObject, Center, Extent, LineColor, Rotation, Duration, Thickness) }; } catch (e) {};
-try { let fnprepatch_425 = KismetSystemLibrary.prototype.DrawDebugArrow;KismetSystemLibrary.prototype.DrawDebugArrow = function (WorldContextObject, LineStart, LineEnd, ArrowSize, LineColor, Duration = 0, Thickness = 0) { return fnprepatch_425.call(this, WorldContextObject, LineStart, LineEnd, ArrowSize, LineColor, Duration, Thickness) }; } catch (e) {};
-try { let fnprepatch_426 = KismetSystemLibrary.prototype.CapsuleTraceSingleForObjects;KismetSystemLibrary.prototype.CapsuleTraceSingleForObjects = function (WorldContextObject, Start, End, Radius, HalfHeight, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_426.call(this, WorldContextObject, Start, End, Radius, HalfHeight, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
-try { let fnprepatch_427 = KismetSystemLibrary.prototype.CapsuleTraceSingleByProfile;KismetSystemLibrary.prototype.CapsuleTraceSingleByProfile = function (WorldContextObject, Start, End, Radius, HalfHeight, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_427.call(this, WorldContextObject, Start, End, Radius, HalfHeight, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
-try { let fnprepatch_428 = KismetSystemLibrary.prototype.CapsuleTraceSingle;KismetSystemLibrary.prototype.CapsuleTraceSingle = function (WorldContextObject, Start, End, Radius, HalfHeight, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_428.call(this, WorldContextObject, Start, End, Radius, HalfHeight, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
-try { let fnprepatch_429 = KismetSystemLibrary.prototype.CapsuleTraceMultiForObjects;KismetSystemLibrary.prototype.CapsuleTraceMultiForObjects = function (WorldContextObject, Start, End, Radius, HalfHeight, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_429.call(this, WorldContextObject, Start, End, Radius, HalfHeight, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
-try { let fnprepatch_430 = KismetSystemLibrary.prototype.CapsuleTraceMultiByProfile;KismetSystemLibrary.prototype.CapsuleTraceMultiByProfile = function (WorldContextObject, Start, End, Radius, HalfHeight, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_430.call(this, WorldContextObject, Start, End, Radius, HalfHeight, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
-try { let fnprepatch_431 = KismetSystemLibrary.prototype.CapsuleTraceMulti;KismetSystemLibrary.prototype.CapsuleTraceMulti = function (WorldContextObject, Start, End, Radius, HalfHeight, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_431.call(this, WorldContextObject, Start, End, Radius, HalfHeight, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
-try { let fnprepatch_432 = KismetSystemLibrary.prototype.BoxTraceSingleForObjects;KismetSystemLibrary.prototype.BoxTraceSingleForObjects = function (WorldContextObject, Start, End, HalfSize, Orientation, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_432.call(this, WorldContextObject, Start, End, HalfSize, Orientation, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
-try { let fnprepatch_433 = KismetSystemLibrary.prototype.BoxTraceSingleByProfile;KismetSystemLibrary.prototype.BoxTraceSingleByProfile = function (WorldContextObject, Start, End, HalfSize, Orientation, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_433.call(this, WorldContextObject, Start, End, HalfSize, Orientation, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
-try { let fnprepatch_434 = KismetSystemLibrary.prototype.BoxTraceSingle;KismetSystemLibrary.prototype.BoxTraceSingle = function (WorldContextObject, Start, End, HalfSize, Orientation, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_434.call(this, WorldContextObject, Start, End, HalfSize, Orientation, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
-try { let fnprepatch_435 = KismetSystemLibrary.prototype.BoxTraceMultiForObjects;KismetSystemLibrary.prototype.BoxTraceMultiForObjects = function (WorldContextObject, Start, End, HalfSize, Orientation, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_435.call(this, WorldContextObject, Start, End, HalfSize, Orientation, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
-try { let fnprepatch_436 = KismetSystemLibrary.prototype.BoxTraceMultiByProfile;KismetSystemLibrary.prototype.BoxTraceMultiByProfile = function (WorldContextObject, Start, End, HalfSize, Orientation, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_436.call(this, WorldContextObject, Start, End, HalfSize, Orientation, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
-try { let fnprepatch_437 = KismetSystemLibrary.prototype.BoxTraceMulti;KismetSystemLibrary.prototype.BoxTraceMulti = function (WorldContextObject, Start, End, HalfSize, Orientation, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_437.call(this, WorldContextObject, Start, End, HalfSize, Orientation, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
+try { let fnprepatch_432 = KismetSystemLibrary.prototype.SphereTraceSingleForObjects;KismetSystemLibrary.prototype.SphereTraceSingleForObjects = function (WorldContextObject, Start, End, Radius, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_432.call(this, WorldContextObject, Start, End, Radius, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
+try { let fnprepatch_433 = KismetSystemLibrary.prototype.SphereTraceSingleByProfile;KismetSystemLibrary.prototype.SphereTraceSingleByProfile = function (WorldContextObject, Start, End, Radius, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_433.call(this, WorldContextObject, Start, End, Radius, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
+try { let fnprepatch_434 = KismetSystemLibrary.prototype.SphereTraceSingle;KismetSystemLibrary.prototype.SphereTraceSingle = function (WorldContextObject, Start, End, Radius, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_434.call(this, WorldContextObject, Start, End, Radius, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
+try { let fnprepatch_435 = KismetSystemLibrary.prototype.SphereTraceMultiForObjects;KismetSystemLibrary.prototype.SphereTraceMultiForObjects = function (WorldContextObject, Start, End, Radius, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_435.call(this, WorldContextObject, Start, End, Radius, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
+try { let fnprepatch_436 = KismetSystemLibrary.prototype.SphereTraceMultiByProfile;KismetSystemLibrary.prototype.SphereTraceMultiByProfile = function (WorldContextObject, Start, End, Radius, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_436.call(this, WorldContextObject, Start, End, Radius, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
+try { let fnprepatch_437 = KismetSystemLibrary.prototype.SphereTraceMulti;KismetSystemLibrary.prototype.SphereTraceMulti = function (WorldContextObject, Start, End, Radius, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_437.call(this, WorldContextObject, Start, End, Radius, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
+try { let fnprepatch_438 = KismetSystemLibrary.prototype.PrintText;KismetSystemLibrary.prototype.PrintText = function (WorldContextObject, InText = "Hello", bPrintToScreen = true, bPrintToLog = true, TextColor = {"R":0,"G":0.6600000262260437,"B":1,"A":1}, Duration = 2) { return fnprepatch_438.call(this, WorldContextObject, InText, bPrintToScreen, bPrintToLog, TextColor, Duration) }; } catch (e) {};
+try { let fnprepatch_439 = KismetSystemLibrary.prototype.PrintString;KismetSystemLibrary.prototype.PrintString = function (WorldContextObject, InString = "Hello", bPrintToScreen = true, bPrintToLog = true, TextColor = {"R":0,"G":0.6600000262260437,"B":1,"A":1}, Duration = 2) { return fnprepatch_439.call(this, WorldContextObject, InString, bPrintToScreen, bPrintToLog, TextColor, Duration) }; } catch (e) {};
+try { let fnprepatch_440 = KismetSystemLibrary.prototype.LineTraceSingleForObjects;KismetSystemLibrary.prototype.LineTraceSingleForObjects = function (WorldContextObject, Start, End, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_440.call(this, WorldContextObject, Start, End, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
+try { let fnprepatch_441 = KismetSystemLibrary.prototype.LineTraceSingleByProfile;KismetSystemLibrary.prototype.LineTraceSingleByProfile = function (WorldContextObject, Start, End, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_441.call(this, WorldContextObject, Start, End, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
+try { let fnprepatch_442 = KismetSystemLibrary.prototype.LineTraceSingle;KismetSystemLibrary.prototype.LineTraceSingle = function (WorldContextObject, Start, End, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_442.call(this, WorldContextObject, Start, End, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
+try { let fnprepatch_443 = KismetSystemLibrary.prototype.LineTraceMultiForObjects;KismetSystemLibrary.prototype.LineTraceMultiForObjects = function (WorldContextObject, Start, End, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_443.call(this, WorldContextObject, Start, End, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
+try { let fnprepatch_444 = KismetSystemLibrary.prototype.LineTraceMultiByProfile;KismetSystemLibrary.prototype.LineTraceMultiByProfile = function (WorldContextObject, Start, End, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_444.call(this, WorldContextObject, Start, End, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
+try { let fnprepatch_445 = KismetSystemLibrary.prototype.LineTraceMulti;KismetSystemLibrary.prototype.LineTraceMulti = function (WorldContextObject, Start, End, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_445.call(this, WorldContextObject, Start, End, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
+try { let fnprepatch_446 = KismetSystemLibrary.prototype.K2_SetTimerDelegate;KismetSystemLibrary.prototype.K2_SetTimerDelegate = function (Delegate, Time, bLooping, InitialStartDelay = 0, InitialStartDelayVariance = 0) { return fnprepatch_446.call(this, Delegate, Time, bLooping, InitialStartDelay, InitialStartDelayVariance) }; } catch (e) {};
+try { let fnprepatch_447 = KismetSystemLibrary.prototype.K2_SetTimer;KismetSystemLibrary.prototype.K2_SetTimer = function (Object, FunctionName, Time, bLooping, InitialStartDelay = 0, InitialStartDelayVariance = 0) { return fnprepatch_447.call(this, Object, FunctionName, Time, bLooping, InitialStartDelay, InitialStartDelayVariance) }; } catch (e) {};
+try { let fnprepatch_448 = KismetSystemLibrary.prototype.ExecuteConsoleCommand;KismetSystemLibrary.prototype.ExecuteConsoleCommand = function (WorldContextObject, Command, SpecificPlayer = undefined) { return fnprepatch_448.call(this, WorldContextObject, Command, SpecificPlayer) }; } catch (e) {};
+try { let fnprepatch_449 = KismetSystemLibrary.prototype.DrawDebugString;KismetSystemLibrary.prototype.DrawDebugString = function (WorldContextObject, TextLocation, Text, TestBaseActor = undefined, TextColor = {"R":1,"G":1,"B":1,"A":1}, Duration = 0) { return fnprepatch_449.call(this, WorldContextObject, TextLocation, Text, TestBaseActor, TextColor, Duration) }; } catch (e) {};
+try { let fnprepatch_450 = KismetSystemLibrary.prototype.DrawDebugSphere;KismetSystemLibrary.prototype.DrawDebugSphere = function (WorldContextObject, Center, Radius = 100, Segments = 12, LineColor = {"R":1,"G":1,"B":1,"A":1}, Duration = 0, Thickness = 0) { return fnprepatch_450.call(this, WorldContextObject, Center, Radius, Segments, LineColor, Duration, Thickness) }; } catch (e) {};
+try { let fnprepatch_451 = KismetSystemLibrary.prototype.DrawDebugPoint;KismetSystemLibrary.prototype.DrawDebugPoint = function (WorldContextObject, Position, Size, PointColor, Duration = 0) { return fnprepatch_451.call(this, WorldContextObject, Position, Size, PointColor, Duration) }; } catch (e) {};
+try { let fnprepatch_452 = KismetSystemLibrary.prototype.DrawDebugPlane;KismetSystemLibrary.prototype.DrawDebugPlane = function (WorldContextObject, PlaneCoordinates, Location, Size, PlaneColor = {"R":1,"G":1,"B":1,"A":1}, Duration = 0) { return fnprepatch_452.call(this, WorldContextObject, PlaneCoordinates, Location, Size, PlaneColor, Duration) }; } catch (e) {};
+try { let fnprepatch_453 = KismetSystemLibrary.prototype.DrawDebugLine;KismetSystemLibrary.prototype.DrawDebugLine = function (WorldContextObject, LineStart, LineEnd, LineColor, Duration = 0, Thickness = 0) { return fnprepatch_453.call(this, WorldContextObject, LineStart, LineEnd, LineColor, Duration, Thickness) }; } catch (e) {};
+try { let fnprepatch_454 = KismetSystemLibrary.prototype.DrawDebugFrustum;KismetSystemLibrary.prototype.DrawDebugFrustum = function (WorldContextObject, FrustumTransform, FrustumColor = {"R":1,"G":1,"B":1,"A":1}, Duration = 0, Thickness = 0) { return fnprepatch_454.call(this, WorldContextObject, FrustumTransform, FrustumColor, Duration, Thickness) }; } catch (e) {};
+try { let fnprepatch_455 = KismetSystemLibrary.prototype.DrawDebugFloatHistoryTransform;KismetSystemLibrary.prototype.DrawDebugFloatHistoryTransform = function (WorldContextObject, FloatHistory, DrawTransform, DrawSize, DrawColor = {"R":1,"G":1,"B":1,"A":1}, Duration = 0) { return fnprepatch_455.call(this, WorldContextObject, FloatHistory, DrawTransform, DrawSize, DrawColor, Duration) }; } catch (e) {};
+try { let fnprepatch_456 = KismetSystemLibrary.prototype.DrawDebugFloatHistoryLocation;KismetSystemLibrary.prototype.DrawDebugFloatHistoryLocation = function (WorldContextObject, FloatHistory, DrawLocation, DrawSize, DrawColor = {"R":1,"G":1,"B":1,"A":1}, Duration = 0) { return fnprepatch_456.call(this, WorldContextObject, FloatHistory, DrawLocation, DrawSize, DrawColor, Duration) }; } catch (e) {};
+try { let fnprepatch_457 = KismetSystemLibrary.prototype.DrawDebugCylinder;KismetSystemLibrary.prototype.DrawDebugCylinder = function (WorldContextObject, Start, End, Radius = 100, Segments = 12, LineColor = {"R":1,"G":1,"B":1,"A":1}, Duration = 0, Thickness = 0) { return fnprepatch_457.call(this, WorldContextObject, Start, End, Radius, Segments, LineColor, Duration, Thickness) }; } catch (e) {};
+try { let fnprepatch_458 = KismetSystemLibrary.prototype.DrawDebugCoordinateSystem;KismetSystemLibrary.prototype.DrawDebugCoordinateSystem = function (WorldContextObject, AxisLoc, AxisRot, Scale = 1, Duration = 0, Thickness = 0) { return fnprepatch_458.call(this, WorldContextObject, AxisLoc, AxisRot, Scale, Duration, Thickness) }; } catch (e) {};
+try { let fnprepatch_459 = KismetSystemLibrary.prototype.DrawDebugConeInDegrees;KismetSystemLibrary.prototype.DrawDebugConeInDegrees = function (WorldContextObject, Origin, Direction, Length = 100, AngleWidth = 45, AngleHeight = 45, NumSides = 12, LineColor = {"R":1,"G":1,"B":1,"A":1}, Duration = 0, Thickness = 0) { return fnprepatch_459.call(this, WorldContextObject, Origin, Direction, Length, AngleWidth, AngleHeight, NumSides, LineColor, Duration, Thickness) }; } catch (e) {};
+try { let fnprepatch_460 = KismetSystemLibrary.prototype.DrawDebugCone;KismetSystemLibrary.prototype.DrawDebugCone = function (WorldContextObject, Origin, Direction, Length, AngleWidth, AngleHeight, NumSides, LineColor, Duration = 0, Thickness = 0) { return fnprepatch_460.call(this, WorldContextObject, Origin, Direction, Length, AngleWidth, AngleHeight, NumSides, LineColor, Duration, Thickness) }; } catch (e) {};
+try { let fnprepatch_461 = KismetSystemLibrary.prototype.DrawDebugCircle;KismetSystemLibrary.prototype.DrawDebugCircle = function (WorldContextObject, Center, Radius, NumSegments = 12, LineColor = {"R":1,"G":1,"B":1,"A":1}, Duration = 0, Thickness = 0, YAxis, ZAxis, bDrawAxis = false) { return fnprepatch_461.call(this, WorldContextObject, Center, Radius, NumSegments, LineColor, Duration, Thickness, YAxis, ZAxis, bDrawAxis) }; } catch (e) {};
+try { let fnprepatch_462 = KismetSystemLibrary.prototype.DrawDebugCapsule;KismetSystemLibrary.prototype.DrawDebugCapsule = function (WorldContextObject, Center, HalfHeight, Radius, Rotation, LineColor = {"R":1,"G":1,"B":1,"A":1}, Duration = 0, Thickness = 0) { return fnprepatch_462.call(this, WorldContextObject, Center, HalfHeight, Radius, Rotation, LineColor, Duration, Thickness) }; } catch (e) {};
+try { let fnprepatch_463 = KismetSystemLibrary.prototype.DrawDebugCamera;KismetSystemLibrary.prototype.DrawDebugCamera = function (CameraActor, CameraColor = {"R":1,"G":1,"B":1,"A":1}, Duration = 0) { return fnprepatch_463.call(this, CameraActor, CameraColor, Duration) }; } catch (e) {};
+try { let fnprepatch_464 = KismetSystemLibrary.prototype.DrawDebugBox;KismetSystemLibrary.prototype.DrawDebugBox = function (WorldContextObject, Center, Extent, LineColor, Rotation, Duration = 0, Thickness = 0) { return fnprepatch_464.call(this, WorldContextObject, Center, Extent, LineColor, Rotation, Duration, Thickness) }; } catch (e) {};
+try { let fnprepatch_465 = KismetSystemLibrary.prototype.DrawDebugArrow;KismetSystemLibrary.prototype.DrawDebugArrow = function (WorldContextObject, LineStart, LineEnd, ArrowSize, LineColor, Duration = 0, Thickness = 0) { return fnprepatch_465.call(this, WorldContextObject, LineStart, LineEnd, ArrowSize, LineColor, Duration, Thickness) }; } catch (e) {};
+try { let fnprepatch_466 = KismetSystemLibrary.prototype.CapsuleTraceSingleForObjects;KismetSystemLibrary.prototype.CapsuleTraceSingleForObjects = function (WorldContextObject, Start, End, Radius, HalfHeight, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_466.call(this, WorldContextObject, Start, End, Radius, HalfHeight, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
+try { let fnprepatch_467 = KismetSystemLibrary.prototype.CapsuleTraceSingleByProfile;KismetSystemLibrary.prototype.CapsuleTraceSingleByProfile = function (WorldContextObject, Start, End, Radius, HalfHeight, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_467.call(this, WorldContextObject, Start, End, Radius, HalfHeight, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
+try { let fnprepatch_468 = KismetSystemLibrary.prototype.CapsuleTraceSingle;KismetSystemLibrary.prototype.CapsuleTraceSingle = function (WorldContextObject, Start, End, Radius, HalfHeight, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_468.call(this, WorldContextObject, Start, End, Radius, HalfHeight, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
+try { let fnprepatch_469 = KismetSystemLibrary.prototype.CapsuleTraceMultiForObjects;KismetSystemLibrary.prototype.CapsuleTraceMultiForObjects = function (WorldContextObject, Start, End, Radius, HalfHeight, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_469.call(this, WorldContextObject, Start, End, Radius, HalfHeight, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
+try { let fnprepatch_470 = KismetSystemLibrary.prototype.CapsuleTraceMultiByProfile;KismetSystemLibrary.prototype.CapsuleTraceMultiByProfile = function (WorldContextObject, Start, End, Radius, HalfHeight, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_470.call(this, WorldContextObject, Start, End, Radius, HalfHeight, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
+try { let fnprepatch_471 = KismetSystemLibrary.prototype.CapsuleTraceMulti;KismetSystemLibrary.prototype.CapsuleTraceMulti = function (WorldContextObject, Start, End, Radius, HalfHeight, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_471.call(this, WorldContextObject, Start, End, Radius, HalfHeight, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
+try { let fnprepatch_472 = KismetSystemLibrary.prototype.BoxTraceSingleForObjects;KismetSystemLibrary.prototype.BoxTraceSingleForObjects = function (WorldContextObject, Start, End, HalfSize, Orientation, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_472.call(this, WorldContextObject, Start, End, HalfSize, Orientation, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
+try { let fnprepatch_473 = KismetSystemLibrary.prototype.BoxTraceSingleByProfile;KismetSystemLibrary.prototype.BoxTraceSingleByProfile = function (WorldContextObject, Start, End, HalfSize, Orientation, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_473.call(this, WorldContextObject, Start, End, HalfSize, Orientation, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
+try { let fnprepatch_474 = KismetSystemLibrary.prototype.BoxTraceSingle;KismetSystemLibrary.prototype.BoxTraceSingle = function (WorldContextObject, Start, End, HalfSize, Orientation, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_474.call(this, WorldContextObject, Start, End, HalfSize, Orientation, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
+try { let fnprepatch_475 = KismetSystemLibrary.prototype.BoxTraceMultiForObjects;KismetSystemLibrary.prototype.BoxTraceMultiForObjects = function (WorldContextObject, Start, End, HalfSize, Orientation, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_475.call(this, WorldContextObject, Start, End, HalfSize, Orientation, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
+try { let fnprepatch_476 = KismetSystemLibrary.prototype.BoxTraceMultiByProfile;KismetSystemLibrary.prototype.BoxTraceMultiByProfile = function (WorldContextObject, Start, End, HalfSize, Orientation, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_476.call(this, WorldContextObject, Start, End, HalfSize, Orientation, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
+try { let fnprepatch_477 = KismetSystemLibrary.prototype.BoxTraceMulti;KismetSystemLibrary.prototype.BoxTraceMulti = function (WorldContextObject, Start, End, HalfSize, Orientation, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_477.call(this, WorldContextObject, Start, End, HalfSize, Orientation, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
 try { KismetSystemLibrary.prototype.SphereTraceForObjects = KismetSystemLibrary.prototype.SphereTraceSingleForObjects; } catch (e) {};
 try { KismetSystemLibrary.SphereTraceForObjects = KismetSystemLibrary.SphereTraceSingleForObjects; } catch (e) {};
 try { KismetSystemLibrary.prototype.SphereTraceByProfile = KismetSystemLibrary.prototype.SphereTraceSingleByProfile; } catch (e) {};
@@ -1365,10 +1695,14 @@ try { KismetSystemLibrary.prototype.Equal = KismetSystemLibrary.prototype.EqualE
 try { KismetSystemLibrary.Equal = KismetSystemLibrary.EqualEqual_PrimaryAssetId; } catch (e) {};
 try { KismetSystemLibrary.prototype.DrawDebugCone = KismetSystemLibrary.prototype.DrawDebugConeInDegrees; } catch (e) {};
 try { KismetSystemLibrary.DrawDebugCone = KismetSystemLibrary.DrawDebugConeInDegrees; } catch (e) {};
+try { KismetSystemLibrary.prototype.ToSoftObjectReference = KismetSystemLibrary.prototype.Conv_SoftObjPathToSoftObjRef; } catch (e) {};
+try { KismetSystemLibrary.ToSoftObjectReference = KismetSystemLibrary.Conv_SoftObjPathToSoftObjRef; } catch (e) {};
 try { KismetSystemLibrary.prototype.ToString = KismetSystemLibrary.prototype.Conv_SoftObjectReferenceToString; } catch (e) {};
 try { KismetSystemLibrary.ToString = KismetSystemLibrary.Conv_SoftObjectReferenceToString; } catch (e) {};
 try { KismetSystemLibrary.prototype.ToString = KismetSystemLibrary.prototype.Conv_SoftClassReferenceToString; } catch (e) {};
 try { KismetSystemLibrary.ToString = KismetSystemLibrary.Conv_SoftClassReferenceToString; } catch (e) {};
+try { KismetSystemLibrary.prototype.ToSoftClassReference = KismetSystemLibrary.prototype.Conv_SoftClassPathToSoftClassRef; } catch (e) {};
+try { KismetSystemLibrary.ToSoftClassReference = KismetSystemLibrary.Conv_SoftClassPathToSoftClassRef; } catch (e) {};
 try { KismetSystemLibrary.prototype.ToString = KismetSystemLibrary.prototype.Conv_PrimaryAssetTypeToString; } catch (e) {};
 try { KismetSystemLibrary.ToString = KismetSystemLibrary.Conv_PrimaryAssetTypeToString; } catch (e) {};
 try { KismetSystemLibrary.prototype.ToString = KismetSystemLibrary.prototype.Conv_PrimaryAssetIdToString; } catch (e) {};
@@ -1397,11 +1731,12 @@ try { KismetSystemLibrary.prototype.MultiBoxTraceByProfile = KismetSystemLibrary
 try { KismetSystemLibrary.MultiBoxTraceByProfile = KismetSystemLibrary.BoxTraceMultiByProfile; } catch (e) {};
 try { KismetSystemLibrary.prototype.MultiBoxTraceByChannel = KismetSystemLibrary.prototype.BoxTraceMulti; } catch (e) {};
 try { KismetSystemLibrary.MultiBoxTraceByChannel = KismetSystemLibrary.BoxTraceMulti; } catch (e) {};
-try { let fnprepatch_438 = KismetTextLibrary.prototype.Conv_IntToText;KismetTextLibrary.prototype.Conv_IntToText = function (Value, bAlwaysSign = false, bUseGrouping = true, MinimumIntegralDigits = 1, MaximumIntegralDigits = 324) { return fnprepatch_438.call(this, Value, bAlwaysSign, bUseGrouping, MinimumIntegralDigits, MaximumIntegralDigits) }; } catch (e) {};
-try { let fnprepatch_439 = KismetTextLibrary.prototype.Conv_FloatToText;KismetTextLibrary.prototype.Conv_FloatToText = function (Value, RoundingMode, bAlwaysSign = false, bUseGrouping = true, MinimumIntegralDigits = 1, MaximumIntegralDigits = 324, MinimumFractionalDigits = 0, MaximumFractionalDigits = 3) { return fnprepatch_439.call(this, Value, RoundingMode, bAlwaysSign, bUseGrouping, MinimumIntegralDigits, MaximumIntegralDigits, MinimumFractionalDigits, MaximumFractionalDigits) }; } catch (e) {};
-try { let fnprepatch_440 = KismetTextLibrary.prototype.AsPercent_Float;KismetTextLibrary.prototype.AsPercent_Float = function (Value, RoundingMode, bAlwaysSign = false, bUseGrouping = true, MinimumIntegralDigits = 1, MaximumIntegralDigits = 324, MinimumFractionalDigits = 0, MaximumFractionalDigits = 3) { return fnprepatch_440.call(this, Value, RoundingMode, bAlwaysSign, bUseGrouping, MinimumIntegralDigits, MaximumIntegralDigits, MinimumFractionalDigits, MaximumFractionalDigits) }; } catch (e) {};
-try { let fnprepatch_441 = KismetTextLibrary.prototype.AsCurrency_Integer;KismetTextLibrary.prototype.AsCurrency_Integer = function (Value, RoundingMode, bAlwaysSign = false, bUseGrouping = true, MinimumIntegralDigits = 1, MaximumIntegralDigits = 324, MinimumFractionalDigits = 0, MaximumFractionalDigits = 3, CurrencyCode) { return fnprepatch_441.call(this, Value, RoundingMode, bAlwaysSign, bUseGrouping, MinimumIntegralDigits, MaximumIntegralDigits, MinimumFractionalDigits, MaximumFractionalDigits, CurrencyCode) }; } catch (e) {};
-try { let fnprepatch_442 = KismetTextLibrary.prototype.AsCurrency_Float;KismetTextLibrary.prototype.AsCurrency_Float = function (Value, RoundingMode, bAlwaysSign = false, bUseGrouping = true, MinimumIntegralDigits = 1, MaximumIntegralDigits = 324, MinimumFractionalDigits = 0, MaximumFractionalDigits = 3, CurrencyCode) { return fnprepatch_442.call(this, Value, RoundingMode, bAlwaysSign, bUseGrouping, MinimumIntegralDigits, MaximumIntegralDigits, MinimumFractionalDigits, MaximumFractionalDigits, CurrencyCode) }; } catch (e) {};
+try { let fnprepatch_478 = KismetTextLibrary.prototype.Conv_IntToText;KismetTextLibrary.prototype.Conv_IntToText = function (Value, bAlwaysSign = false, bUseGrouping = true, MinimumIntegralDigits = 1, MaximumIntegralDigits = 324) { return fnprepatch_478.call(this, Value, bAlwaysSign, bUseGrouping, MinimumIntegralDigits, MaximumIntegralDigits) }; } catch (e) {};
+try { let fnprepatch_479 = KismetTextLibrary.prototype.Conv_Int64ToText;KismetTextLibrary.prototype.Conv_Int64ToText = function (Value, bAlwaysSign = false, bUseGrouping = true, MinimumIntegralDigits = 1, MaximumIntegralDigits = 324) { return fnprepatch_479.call(this, Value, bAlwaysSign, bUseGrouping, MinimumIntegralDigits, MaximumIntegralDigits) }; } catch (e) {};
+try { let fnprepatch_480 = KismetTextLibrary.prototype.Conv_FloatToText;KismetTextLibrary.prototype.Conv_FloatToText = function (Value, RoundingMode, bAlwaysSign = false, bUseGrouping = true, MinimumIntegralDigits = 1, MaximumIntegralDigits = 324, MinimumFractionalDigits = 0, MaximumFractionalDigits = 3) { return fnprepatch_480.call(this, Value, RoundingMode, bAlwaysSign, bUseGrouping, MinimumIntegralDigits, MaximumIntegralDigits, MinimumFractionalDigits, MaximumFractionalDigits) }; } catch (e) {};
+try { let fnprepatch_481 = KismetTextLibrary.prototype.AsPercent_Float;KismetTextLibrary.prototype.AsPercent_Float = function (Value, RoundingMode, bAlwaysSign = false, bUseGrouping = true, MinimumIntegralDigits = 1, MaximumIntegralDigits = 324, MinimumFractionalDigits = 0, MaximumFractionalDigits = 3) { return fnprepatch_481.call(this, Value, RoundingMode, bAlwaysSign, bUseGrouping, MinimumIntegralDigits, MaximumIntegralDigits, MinimumFractionalDigits, MaximumFractionalDigits) }; } catch (e) {};
+try { let fnprepatch_482 = KismetTextLibrary.prototype.AsCurrency_Integer;KismetTextLibrary.prototype.AsCurrency_Integer = function (Value, RoundingMode, bAlwaysSign = false, bUseGrouping = true, MinimumIntegralDigits = 1, MaximumIntegralDigits = 324, MinimumFractionalDigits = 0, MaximumFractionalDigits = 3, CurrencyCode) { return fnprepatch_482.call(this, Value, RoundingMode, bAlwaysSign, bUseGrouping, MinimumIntegralDigits, MaximumIntegralDigits, MinimumFractionalDigits, MaximumFractionalDigits, CurrencyCode) }; } catch (e) {};
+try { let fnprepatch_483 = KismetTextLibrary.prototype.AsCurrency_Float;KismetTextLibrary.prototype.AsCurrency_Float = function (Value, RoundingMode, bAlwaysSign = false, bUseGrouping = true, MinimumIntegralDigits = 1, MaximumIntegralDigits = 324, MinimumFractionalDigits = 0, MaximumFractionalDigits = 3, CurrencyCode) { return fnprepatch_483.call(this, Value, RoundingMode, bAlwaysSign, bUseGrouping, MinimumIntegralDigits, MaximumIntegralDigits, MinimumFractionalDigits, MaximumFractionalDigits, CurrencyCode) }; } catch (e) {};
 try { KismetTextLibrary.prototype.IsTextfromStringTable = KismetTextLibrary.prototype.TextIsFromStringTable; } catch (e) {};
 try { KismetTextLibrary.IsTextfromStringTable = KismetTextLibrary.TextIsFromStringTable; } catch (e) {};
 try { KismetTextLibrary.prototype.MakeTextfromStringTable = KismetTextLibrary.prototype.TextFromStringTable; } catch (e) {};
@@ -1430,6 +1765,8 @@ try { KismetTextLibrary.prototype.ToText = KismetTextLibrary.prototype.Conv_Name
 try { KismetTextLibrary.ToText = KismetTextLibrary.Conv_NameToText; } catch (e) {};
 try { KismetTextLibrary.prototype.ToText = KismetTextLibrary.prototype.Conv_IntToText; } catch (e) {};
 try { KismetTextLibrary.ToText = KismetTextLibrary.Conv_IntToText; } catch (e) {};
+try { KismetTextLibrary.prototype.ToText = KismetTextLibrary.prototype.Conv_Int64ToText; } catch (e) {};
+try { KismetTextLibrary.ToText = KismetTextLibrary.Conv_Int64ToText; } catch (e) {};
 try { KismetTextLibrary.prototype.ToText = KismetTextLibrary.prototype.Conv_FloatToText; } catch (e) {};
 try { KismetTextLibrary.ToText = KismetTextLibrary.Conv_FloatToText; } catch (e) {};
 try { KismetTextLibrary.prototype.ToText = KismetTextLibrary.prototype.Conv_ColorToText; } catch (e) {};
@@ -1460,96 +1797,97 @@ try { KismetTextLibrary.prototype.AsCurrency = KismetTextLibrary.prototype.AsCur
 try { KismetTextLibrary.AsCurrency = KismetTextLibrary.AsCurrency_Integer; } catch (e) {};
 try { KismetTextLibrary.prototype.AsCurrency = KismetTextLibrary.prototype.AsCurrency_Float; } catch (e) {};
 try { KismetTextLibrary.AsCurrency = KismetTextLibrary.AsCurrency_Float; } catch (e) {};
-try { let fnprepatch_443 = LevelScriptActor.prototype.SetCinematicMode;LevelScriptActor.prototype.SetCinematicMode = function (bCinematicMode, bHidePlayer = true, bAffectsHUD = true, bAffectsMovement = false, bAffectsTurning = false) { return fnprepatch_443.call(this, bCinematicMode, bHidePlayer, bAffectsHUD, bAffectsMovement, bAffectsTurning) }; } catch (e) {};
+try { let fnprepatch_484 = LevelScriptActor.prototype.SetCinematicMode;LevelScriptActor.prototype.SetCinematicMode = function (bCinematicMode, bHidePlayer = true, bAffectsHUD = true, bAffectsMovement = false, bAffectsTurning = false) { return fnprepatch_484.call(this, bCinematicMode, bHidePlayer, bAffectsHUD, bAffectsMovement, bAffectsTurning) }; } catch (e) {};
 try { LevelStreamingDynamic.prototype.LoadLevelInstance = LevelStreamingDynamic.prototype.LoadLevelInstanceBySoftObjectPtr; } catch (e) {};
 try { LevelStreamingDynamic.LoadLevelInstance = LevelStreamingDynamic.LoadLevelInstanceBySoftObjectPtr; } catch (e) {};
-try { let fnprepatch_444 = LocalLightComponent.prototype.GetUnitsConversionFactor;LocalLightComponent.prototype.GetUnitsConversionFactor = function (SrcUnits, TargetUnits, CosHalfConeAngle = -1) { return fnprepatch_444.call(this, SrcUnits, TargetUnits, CosHalfConeAngle) }; } catch (e) {};
-try { let fnprepatch_445 = MaterialInstanceDynamic.prototype.K2_CopyMaterialInstanceParameters;MaterialInstanceDynamic.prototype.K2_CopyMaterialInstanceParameters = function (Source, bQuickParametersOnly = false) { return fnprepatch_445.call(this, Source, bQuickParametersOnly) }; } catch (e) {};
+try { let fnprepatch_485 = LocalLightComponent.prototype.GetUnitsConversionFactor;LocalLightComponent.prototype.GetUnitsConversionFactor = function (SrcUnits, TargetUnits, CosHalfConeAngle = -1) { return fnprepatch_485.call(this, SrcUnits, TargetUnits, CosHalfConeAngle) }; } catch (e) {};
+try { let fnprepatch_486 = MaterialInstanceDynamic.prototype.K2_CopyMaterialInstanceParameters;MaterialInstanceDynamic.prototype.K2_CopyMaterialInstanceParameters = function (Source, bQuickParametersOnly = false) { return fnprepatch_486.call(this, Source, bQuickParametersOnly) }; } catch (e) {};
 try { MaterialInstanceDynamic.prototype.InterpolateMaterialInstanceParameters = MaterialInstanceDynamic.prototype.K2_InterpolateMaterialInstanceParams; } catch (e) {};
 try { MaterialInstanceDynamic.prototype.GetVectorParameterValue = MaterialInstanceDynamic.prototype.K2_GetVectorParameterValue; } catch (e) {};
 try { MaterialInstanceDynamic.prototype.GetTextureParameterValue = MaterialInstanceDynamic.prototype.K2_GetTextureParameterValue; } catch (e) {};
 try { MaterialInstanceDynamic.prototype.GetScalarParameterValue = MaterialInstanceDynamic.prototype.K2_GetScalarParameterValue; } catch (e) {};
 try { MaterialInstanceDynamic.prototype.CopyMaterialInstanceParameters = MaterialInstanceDynamic.prototype.K2_CopyMaterialInstanceParameters; } catch (e) {};
-try { let fnprepatch_446 = MatineeActor.prototype.SetPosition;MatineeActor.prototype.SetPosition = function (NewPosition, bJump = false) { return fnprepatch_446.call(this, NewPosition, bJump) }; } catch (e) {};
-try { let fnprepatch_447 = MeshVertexPainterKismetLibrary.prototype.PaintVerticesSingleColor;MeshVertexPainterKismetLibrary.prototype.PaintVerticesSingleColor = function (StaticMeshComponent, FillColor, bConvertToSRGB = true) { return fnprepatch_447.call(this, StaticMeshComponent, FillColor, bConvertToSRGB) }; } catch (e) {};
-try { let fnprepatch_448 = MeshVertexPainterKismetLibrary.prototype.PaintVerticesLerpAlongAxis;MeshVertexPainterKismetLibrary.prototype.PaintVerticesLerpAlongAxis = function (StaticMeshComponent, StartColor, EndColor, Axis, bConvertToSRGB = true) { return fnprepatch_448.call(this, StaticMeshComponent, StartColor, EndColor, Axis, bConvertToSRGB) }; } catch (e) {};
+try { let fnprepatch_487 = MatineeActor.prototype.SetPosition;MatineeActor.prototype.SetPosition = function (NewPosition, bJump = false) { return fnprepatch_487.call(this, NewPosition, bJump) }; } catch (e) {};
+try { let fnprepatch_488 = MeshVertexPainterKismetLibrary.prototype.PaintVerticesSingleColor;MeshVertexPainterKismetLibrary.prototype.PaintVerticesSingleColor = function (StaticMeshComponent, FillColor, bConvertToSRGB = true) { return fnprepatch_488.call(this, StaticMeshComponent, FillColor, bConvertToSRGB) }; } catch (e) {};
+try { let fnprepatch_489 = MeshVertexPainterKismetLibrary.prototype.PaintVerticesLerpAlongAxis;MeshVertexPainterKismetLibrary.prototype.PaintVerticesLerpAlongAxis = function (StaticMeshComponent, StartColor, EndColor, Axis, bConvertToSRGB = true) { return fnprepatch_489.call(this, StaticMeshComponent, StartColor, EndColor, Axis, bConvertToSRGB) }; } catch (e) {};
 try { NavigationSystem.prototype.SimpleMoveToLocation_DEPRECATED = NavigationSystem.prototype.SimpleMoveToLocation; } catch (e) {};
 try { NavigationSystem.SimpleMoveToLocation_DEPRECATED = NavigationSystem.SimpleMoveToLocation; } catch (e) {};
 try { NavigationSystem.prototype.SimpleMoveToActor_DEPRECATED = NavigationSystem.prototype.SimpleMoveToActor; } catch (e) {};
 try { NavigationSystem.SimpleMoveToActor_DEPRECATED = NavigationSystem.SimpleMoveToActor; } catch (e) {};
-try { let fnprepatch_449 = ParticleSystemComponent.prototype.SetAutoAttachParams;ParticleSystemComponent.prototype.SetAutoAttachParams = function (Parent, SocketName = "None", LocationType = "KeepRelativeOffset") { return fnprepatch_449.call(this, Parent, SocketName, LocationType) }; } catch (e) {};
-try { let fnprepatch_450 = ParticleSystemComponent.prototype.CreateNamedDynamicMaterialInstance;ParticleSystemComponent.prototype.CreateNamedDynamicMaterialInstance = function (InName, SourceMaterial = undefined) { return fnprepatch_450.call(this, InName, SourceMaterial) }; } catch (e) {};
-try { let fnprepatch_451 = PhysicalAnimationComponent.prototype.ApplyPhysicalAnimationSettingsBelow;PhysicalAnimationComponent.prototype.ApplyPhysicalAnimationSettingsBelow = function (BodyName, PhysicalAnimationData, bIncludeSelf = true) { return fnprepatch_451.call(this, BodyName, PhysicalAnimationData, bIncludeSelf) }; } catch (e) {};
-try { let fnprepatch_452 = PhysicalAnimationComponent.prototype.ApplyPhysicalAnimationProfileBelow;PhysicalAnimationComponent.prototype.ApplyPhysicalAnimationProfileBelow = function (BodyName, ProfileName, bIncludeSelf = true, bClearNotFound = false) { return fnprepatch_452.call(this, BodyName, ProfileName, bIncludeSelf, bClearNotFound) }; } catch (e) {};
-try { let fnprepatch_453 = PlayerCameraManager.prototype.StopCameraShake;PlayerCameraManager.prototype.StopCameraShake = function (ShakeInstance, bImmediately = true) { return fnprepatch_453.call(this, ShakeInstance, bImmediately) }; } catch (e) {};
-try { let fnprepatch_454 = PlayerCameraManager.prototype.StopCameraAnimInst;PlayerCameraManager.prototype.StopCameraAnimInst = function (AnimInst, bImmediate = false) { return fnprepatch_454.call(this, AnimInst, bImmediate) }; } catch (e) {};
-try { let fnprepatch_455 = PlayerCameraManager.prototype.StopAllInstancesOfCameraShake;PlayerCameraManager.prototype.StopAllInstancesOfCameraShake = function (Shake, bImmediately = true) { return fnprepatch_455.call(this, Shake, bImmediately) }; } catch (e) {};
-try { let fnprepatch_456 = PlayerCameraManager.prototype.StopAllInstancesOfCameraAnim;PlayerCameraManager.prototype.StopAllInstancesOfCameraAnim = function (Anim, bImmediate = false) { return fnprepatch_456.call(this, Anim, bImmediate) }; } catch (e) {};
-try { let fnprepatch_457 = PlayerCameraManager.prototype.StopAllCameraShakes;PlayerCameraManager.prototype.StopAllCameraShakes = function (bImmediately = true) { return fnprepatch_457.call(this, bImmediately) }; } catch (e) {};
-try { let fnprepatch_458 = PlayerCameraManager.prototype.StopAllCameraAnims;PlayerCameraManager.prototype.StopAllCameraAnims = function (bImmediate = false) { return fnprepatch_458.call(this, bImmediate) }; } catch (e) {};
-try { let fnprepatch_459 = PlayerCameraManager.prototype.StartCameraFade;PlayerCameraManager.prototype.StartCameraFade = function (FromAlpha, ToAlpha, Duration, Color, bShouldFadeAudio = false, bHoldWhenFinished = false) { return fnprepatch_459.call(this, FromAlpha, ToAlpha, Duration, Color, bShouldFadeAudio, bHoldWhenFinished) }; } catch (e) {};
-try { let fnprepatch_460 = PlayerCameraManager.prototype.PlayCameraShake;PlayerCameraManager.prototype.PlayCameraShake = function (ShakeClass, Scale = 1, PlaySpace = "CameraLocal", UserPlaySpaceRot) { return fnprepatch_460.call(this, ShakeClass, Scale, PlaySpace, UserPlaySpaceRot) }; } catch (e) {};
-try { let fnprepatch_461 = PlayerCameraManager.prototype.PlayCameraAnim;PlayerCameraManager.prototype.PlayCameraAnim = function (Anim, Rate = 1, Scale = 1, BlendInTime = 0, BlendOutTime = 0, bLoop = false, bRandomStartTime = false, Duration = 0, PlaySpace = "CameraLocal", UserPlaySpaceRot) { return fnprepatch_461.call(this, Anim, Rate, Scale, BlendInTime, BlendOutTime, bLoop, bRandomStartTime, Duration, PlaySpace, UserPlaySpaceRot) }; } catch (e) {};
+try { let fnprepatch_490 = ParticleSystemComponent.prototype.SetAutoAttachParams;ParticleSystemComponent.prototype.SetAutoAttachParams = function (Parent, SocketName = "None", LocationType = "KeepRelativeOffset") { return fnprepatch_490.call(this, Parent, SocketName, LocationType) }; } catch (e) {};
+try { let fnprepatch_491 = ParticleSystemComponent.prototype.CreateNamedDynamicMaterialInstance;ParticleSystemComponent.prototype.CreateNamedDynamicMaterialInstance = function (InName, SourceMaterial = undefined) { return fnprepatch_491.call(this, InName, SourceMaterial) }; } catch (e) {};
+try { let fnprepatch_492 = PhysicalAnimationComponent.prototype.ApplyPhysicalAnimationSettingsBelow;PhysicalAnimationComponent.prototype.ApplyPhysicalAnimationSettingsBelow = function (BodyName, PhysicalAnimationData, bIncludeSelf = true) { return fnprepatch_492.call(this, BodyName, PhysicalAnimationData, bIncludeSelf) }; } catch (e) {};
+try { let fnprepatch_493 = PhysicalAnimationComponent.prototype.ApplyPhysicalAnimationProfileBelow;PhysicalAnimationComponent.prototype.ApplyPhysicalAnimationProfileBelow = function (BodyName, ProfileName, bIncludeSelf = true, bClearNotFound = false) { return fnprepatch_493.call(this, BodyName, ProfileName, bIncludeSelf, bClearNotFound) }; } catch (e) {};
+try { let fnprepatch_494 = PlayerCameraManager.prototype.StopCameraShake;PlayerCameraManager.prototype.StopCameraShake = function (ShakeInstance, bImmediately = true) { return fnprepatch_494.call(this, ShakeInstance, bImmediately) }; } catch (e) {};
+try { let fnprepatch_495 = PlayerCameraManager.prototype.StopCameraAnimInst;PlayerCameraManager.prototype.StopCameraAnimInst = function (AnimInst, bImmediate = false) { return fnprepatch_495.call(this, AnimInst, bImmediate) }; } catch (e) {};
+try { let fnprepatch_496 = PlayerCameraManager.prototype.StopAllInstancesOfCameraShake;PlayerCameraManager.prototype.StopAllInstancesOfCameraShake = function (Shake, bImmediately = true) { return fnprepatch_496.call(this, Shake, bImmediately) }; } catch (e) {};
+try { let fnprepatch_497 = PlayerCameraManager.prototype.StopAllInstancesOfCameraAnim;PlayerCameraManager.prototype.StopAllInstancesOfCameraAnim = function (Anim, bImmediate = false) { return fnprepatch_497.call(this, Anim, bImmediate) }; } catch (e) {};
+try { let fnprepatch_498 = PlayerCameraManager.prototype.StopAllCameraShakes;PlayerCameraManager.prototype.StopAllCameraShakes = function (bImmediately = true) { return fnprepatch_498.call(this, bImmediately) }; } catch (e) {};
+try { let fnprepatch_499 = PlayerCameraManager.prototype.StopAllCameraAnims;PlayerCameraManager.prototype.StopAllCameraAnims = function (bImmediate = false) { return fnprepatch_499.call(this, bImmediate) }; } catch (e) {};
+try { let fnprepatch_500 = PlayerCameraManager.prototype.StartCameraFade;PlayerCameraManager.prototype.StartCameraFade = function (FromAlpha, ToAlpha, Duration, Color, bShouldFadeAudio = false, bHoldWhenFinished = false) { return fnprepatch_500.call(this, FromAlpha, ToAlpha, Duration, Color, bShouldFadeAudio, bHoldWhenFinished) }; } catch (e) {};
+try { let fnprepatch_501 = PlayerCameraManager.prototype.PlayCameraShake;PlayerCameraManager.prototype.PlayCameraShake = function (ShakeClass, Scale = 1, PlaySpace = "CameraLocal", UserPlaySpaceRot) { return fnprepatch_501.call(this, ShakeClass, Scale, PlaySpace, UserPlaySpaceRot) }; } catch (e) {};
+try { let fnprepatch_502 = PlayerCameraManager.prototype.PlayCameraAnim;PlayerCameraManager.prototype.PlayCameraAnim = function (Anim, Rate = 1, Scale = 1, BlendInTime = 0, BlendOutTime = 0, bLoop = false, bRandomStartTime = false, Duration = 0, PlaySpace = "CameraLocal", UserPlaySpaceRot) { return fnprepatch_502.call(this, Anim, Rate, Scale, BlendInTime, BlendOutTime, bLoop, bRandomStartTime, Duration, PlaySpace, UserPlaySpaceRot) }; } catch (e) {};
 try { PlayerState.prototype.OverrideWith = PlayerState.prototype.ReceiveOverrideWith; } catch (e) {};
 try { PlayerState.prototype.CopyProperties = PlayerState.prototype.ReceiveCopyProperties; } catch (e) {};
-try { let fnprepatch_462 = PostProcessComponent.prototype.AddOrUpdateBlendable;PostProcessComponent.prototype.AddOrUpdateBlendable = function (InBlendableObject, InWeight = 1) { return fnprepatch_462.call(this, InBlendableObject, InWeight) }; } catch (e) {};
-try { let fnprepatch_463 = PostProcessVolume.prototype.AddOrUpdateBlendable;PostProcessVolume.prototype.AddOrUpdateBlendable = function (InBlendableObject, InWeight = 1) { return fnprepatch_463.call(this, InBlendableObject, InWeight) }; } catch (e) {};
-try { let fnprepatch_464 = SceneCaptureComponent2D.prototype.AddOrUpdateBlendable;SceneCaptureComponent2D.prototype.AddOrUpdateBlendable = function (InBlendableObject, InWeight = 1) { return fnprepatch_464.call(this, InBlendableObject, InWeight) }; } catch (e) {};
-try { let fnprepatch_465 = SkeletalMesh.prototype.IsSectionUsingCloth;SkeletalMesh.prototype.IsSectionUsingCloth = function (InSectionIndex, bCheckCorrespondingSections = true) { return fnprepatch_465.call(this, InSectionIndex, bCheckCorrespondingSections) }; } catch (e) {};
-try { let fnprepatch_466 = SoundSubmix.prototype.StopRecordingOutput;SoundSubmix.prototype.StopRecordingOutput = function (WorldContextObject, ExportType, Name, Path, ExistingSoundWaveToOverwrite = undefined) { return fnprepatch_466.call(this, WorldContextObject, ExportType, Name, Path, ExistingSoundWaveToOverwrite) }; } catch (e) {};
+try { let fnprepatch_503 = PostProcessComponent.prototype.AddOrUpdateBlendable;PostProcessComponent.prototype.AddOrUpdateBlendable = function (InBlendableObject, InWeight = 1) { return fnprepatch_503.call(this, InBlendableObject, InWeight) }; } catch (e) {};
+try { let fnprepatch_504 = PostProcessVolume.prototype.AddOrUpdateBlendable;PostProcessVolume.prototype.AddOrUpdateBlendable = function (InBlendableObject, InWeight = 1) { return fnprepatch_504.call(this, InBlendableObject, InWeight) }; } catch (e) {};
+try { let fnprepatch_505 = SceneCaptureComponent2D.prototype.AddOrUpdateBlendable;SceneCaptureComponent2D.prototype.AddOrUpdateBlendable = function (InBlendableObject, InWeight = 1) { return fnprepatch_505.call(this, InBlendableObject, InWeight) }; } catch (e) {};
+try { let fnprepatch_506 = SkeletalMesh.prototype.IsSectionUsingCloth;SkeletalMesh.prototype.IsSectionUsingCloth = function (InSectionIndex, bCheckCorrespondingSections = true) { return fnprepatch_506.call(this, InSectionIndex, bCheckCorrespondingSections) }; } catch (e) {};
+try { SkeletalMesh.prototype.GetAllMorphTargetNames = SkeletalMesh.prototype.K2_GetAllMorphTargetNames; } catch (e) {};
+try { let fnprepatch_507 = SoundSubmix.prototype.StopRecordingOutput;SoundSubmix.prototype.StopRecordingOutput = function (WorldContextObject, ExportType, Name, Path, ExistingSoundWaveToOverwrite = undefined) { return fnprepatch_507.call(this, WorldContextObject, ExportType, Name, Path, ExistingSoundWaveToOverwrite) }; } catch (e) {};
 try { SoundSubmix.prototype.FinishRecordingSubmixOutput = SoundSubmix.prototype.StopRecordingOutput; } catch (e) {};
 try { SoundSubmix.prototype.StartRecordingSubmixOutput = SoundSubmix.prototype.StartRecordingOutput; } catch (e) {};
-try { let fnprepatch_467 = SplineComponent.prototype.SetUpVectorAtSplinePoint;SplineComponent.prototype.SetUpVectorAtSplinePoint = function (PointIndex, InUpVector, CoordinateSpace, bUpdateSpline = true) { return fnprepatch_467.call(this, PointIndex, InUpVector, CoordinateSpace, bUpdateSpline) }; } catch (e) {};
-try { let fnprepatch_468 = SplineComponent.prototype.SetTangentsAtSplinePoint;SplineComponent.prototype.SetTangentsAtSplinePoint = function (PointIndex, InArriveTangent, InLeaveTangent, CoordinateSpace, bUpdateSpline = true) { return fnprepatch_468.call(this, PointIndex, InArriveTangent, InLeaveTangent, CoordinateSpace, bUpdateSpline) }; } catch (e) {};
-try { let fnprepatch_469 = SplineComponent.prototype.SetTangentAtSplinePoint;SplineComponent.prototype.SetTangentAtSplinePoint = function (PointIndex, InTangent, CoordinateSpace, bUpdateSpline = true) { return fnprepatch_469.call(this, PointIndex, InTangent, CoordinateSpace, bUpdateSpline) }; } catch (e) {};
-try { let fnprepatch_470 = SplineComponent.prototype.SetSplinePointType;SplineComponent.prototype.SetSplinePointType = function (PointIndex, Type, bUpdateSpline = true) { return fnprepatch_470.call(this, PointIndex, Type, bUpdateSpline) }; } catch (e) {};
-try { let fnprepatch_471 = SplineComponent.prototype.SetSplinePoints;SplineComponent.prototype.SetSplinePoints = function (Points, CoordinateSpace, bUpdateSpline = true) { return fnprepatch_471.call(this, Points, CoordinateSpace, bUpdateSpline) }; } catch (e) {};
-try { let fnprepatch_472 = SplineComponent.prototype.SetLocationAtSplinePoint;SplineComponent.prototype.SetLocationAtSplinePoint = function (PointIndex, InLocation, CoordinateSpace, bUpdateSpline = true) { return fnprepatch_472.call(this, PointIndex, InLocation, CoordinateSpace, bUpdateSpline) }; } catch (e) {};
-try { let fnprepatch_473 = SplineComponent.prototype.SetClosedLoopAtPosition;SplineComponent.prototype.SetClosedLoopAtPosition = function (bInClosedLoop, Key, bUpdateSpline = true) { return fnprepatch_473.call(this, bInClosedLoop, Key, bUpdateSpline) }; } catch (e) {};
-try { let fnprepatch_474 = SplineComponent.prototype.SetClosedLoop;SplineComponent.prototype.SetClosedLoop = function (bInClosedLoop, bUpdateSpline = true) { return fnprepatch_474.call(this, bInClosedLoop, bUpdateSpline) }; } catch (e) {};
-try { let fnprepatch_475 = SplineComponent.prototype.RemoveSplinePoint;SplineComponent.prototype.RemoveSplinePoint = function (Index, bUpdateSpline = true) { return fnprepatch_475.call(this, Index, bUpdateSpline) }; } catch (e) {};
-try { let fnprepatch_476 = SplineComponent.prototype.GetWorldRotationAtTime;SplineComponent.prototype.GetWorldRotationAtTime = function (Time, bUseConstantVelocity = false) { return fnprepatch_476.call(this, Time, bUseConstantVelocity) }; } catch (e) {};
-try { let fnprepatch_477 = SplineComponent.prototype.GetWorldLocationAtTime;SplineComponent.prototype.GetWorldLocationAtTime = function (Time, bUseConstantVelocity = false) { return fnprepatch_477.call(this, Time, bUseConstantVelocity) }; } catch (e) {};
-try { let fnprepatch_478 = SplineComponent.prototype.GetWorldDirectionAtTime;SplineComponent.prototype.GetWorldDirectionAtTime = function (Time, bUseConstantVelocity = false) { return fnprepatch_478.call(this, Time, bUseConstantVelocity) }; } catch (e) {};
-try { let fnprepatch_479 = SplineComponent.prototype.GetUpVectorAtTime;SplineComponent.prototype.GetUpVectorAtTime = function (Time, CoordinateSpace, bUseConstantVelocity = false) { return fnprepatch_479.call(this, Time, CoordinateSpace, bUseConstantVelocity) }; } catch (e) {};
-try { let fnprepatch_480 = SplineComponent.prototype.GetTransformAtTime;SplineComponent.prototype.GetTransformAtTime = function (Time, CoordinateSpace, bUseConstantVelocity = false, bUseScale = false) { return fnprepatch_480.call(this, Time, CoordinateSpace, bUseConstantVelocity, bUseScale) }; } catch (e) {};
-try { let fnprepatch_481 = SplineComponent.prototype.GetTransformAtSplinePoint;SplineComponent.prototype.GetTransformAtSplinePoint = function (PointIndex, CoordinateSpace, bUseScale = false) { return fnprepatch_481.call(this, PointIndex, CoordinateSpace, bUseScale) }; } catch (e) {};
-try { let fnprepatch_482 = SplineComponent.prototype.GetTransformAtDistanceAlongSpline;SplineComponent.prototype.GetTransformAtDistanceAlongSpline = function (Distance, CoordinateSpace, bUseScale = false) { return fnprepatch_482.call(this, Distance, CoordinateSpace, bUseScale) }; } catch (e) {};
-try { let fnprepatch_483 = SplineComponent.prototype.GetTangentAtTime;SplineComponent.prototype.GetTangentAtTime = function (Time, CoordinateSpace, bUseConstantVelocity = false) { return fnprepatch_483.call(this, Time, CoordinateSpace, bUseConstantVelocity) }; } catch (e) {};
-try { let fnprepatch_484 = SplineComponent.prototype.GetScaleAtTime;SplineComponent.prototype.GetScaleAtTime = function (Time, bUseConstantVelocity = false) { return fnprepatch_484.call(this, Time, bUseConstantVelocity) }; } catch (e) {};
-try { let fnprepatch_485 = SplineComponent.prototype.GetRotationAtTime;SplineComponent.prototype.GetRotationAtTime = function (Time, CoordinateSpace, bUseConstantVelocity = false) { return fnprepatch_485.call(this, Time, CoordinateSpace, bUseConstantVelocity) }; } catch (e) {};
-try { let fnprepatch_486 = SplineComponent.prototype.GetRollAtTime;SplineComponent.prototype.GetRollAtTime = function (Time, CoordinateSpace, bUseConstantVelocity = false) { return fnprepatch_486.call(this, Time, CoordinateSpace, bUseConstantVelocity) }; } catch (e) {};
-try { let fnprepatch_487 = SplineComponent.prototype.GetRightVectorAtTime;SplineComponent.prototype.GetRightVectorAtTime = function (Time, CoordinateSpace, bUseConstantVelocity = false) { return fnprepatch_487.call(this, Time, CoordinateSpace, bUseConstantVelocity) }; } catch (e) {};
-try { let fnprepatch_488 = SplineComponent.prototype.GetLocationAtTime;SplineComponent.prototype.GetLocationAtTime = function (Time, CoordinateSpace, bUseConstantVelocity = false) { return fnprepatch_488.call(this, Time, CoordinateSpace, bUseConstantVelocity) }; } catch (e) {};
-try { let fnprepatch_489 = SplineComponent.prototype.GetDirectionAtTime;SplineComponent.prototype.GetDirectionAtTime = function (Time, CoordinateSpace, bUseConstantVelocity = false) { return fnprepatch_489.call(this, Time, CoordinateSpace, bUseConstantVelocity) }; } catch (e) {};
-try { let fnprepatch_490 = SplineComponent.prototype.FindTransformClosestToWorldLocation;SplineComponent.prototype.FindTransformClosestToWorldLocation = function (WorldLocation, CoordinateSpace, bUseScale = false) { return fnprepatch_490.call(this, WorldLocation, CoordinateSpace, bUseScale) }; } catch (e) {};
-try { let fnprepatch_491 = SplineComponent.prototype.ClearSplinePoints;SplineComponent.prototype.ClearSplinePoints = function (bUpdateSpline = true) { return fnprepatch_491.call(this, bUpdateSpline) }; } catch (e) {};
-try { let fnprepatch_492 = SplineComponent.prototype.AddSplinePointAtIndex;SplineComponent.prototype.AddSplinePointAtIndex = function (Position, Index, CoordinateSpace, bUpdateSpline = true) { return fnprepatch_492.call(this, Position, Index, CoordinateSpace, bUpdateSpline) }; } catch (e) {};
-try { let fnprepatch_493 = SplineComponent.prototype.AddSplinePoint;SplineComponent.prototype.AddSplinePoint = function (Position, CoordinateSpace, bUpdateSpline = true) { return fnprepatch_493.call(this, Position, CoordinateSpace, bUpdateSpline) }; } catch (e) {};
-try { let fnprepatch_494 = SplineComponent.prototype.AddPoints;SplineComponent.prototype.AddPoints = function (Points, bUpdateSpline = true) { return fnprepatch_494.call(this, Points, bUpdateSpline) }; } catch (e) {};
-try { let fnprepatch_495 = SplineComponent.prototype.AddPoint;SplineComponent.prototype.AddPoint = function (Point, bUpdateSpline = true) { return fnprepatch_495.call(this, Point, bUpdateSpline) }; } catch (e) {};
-try { let fnprepatch_496 = SplineMeshComponent.prototype.SetStartTangent;SplineMeshComponent.prototype.SetStartTangent = function (StartTangent, bUpdateMesh = true) { return fnprepatch_496.call(this, StartTangent, bUpdateMesh) }; } catch (e) {};
-try { let fnprepatch_497 = SplineMeshComponent.prototype.SetStartScale;SplineMeshComponent.prototype.SetStartScale = function (StartScale = {"X":1,"Y":1}, bUpdateMesh = true) { return fnprepatch_497.call(this, StartScale, bUpdateMesh) }; } catch (e) {};
-try { let fnprepatch_498 = SplineMeshComponent.prototype.SetStartRoll;SplineMeshComponent.prototype.SetStartRoll = function (StartRoll, bUpdateMesh = true) { return fnprepatch_498.call(this, StartRoll, bUpdateMesh) }; } catch (e) {};
-try { let fnprepatch_499 = SplineMeshComponent.prototype.SetStartPosition;SplineMeshComponent.prototype.SetStartPosition = function (StartPos, bUpdateMesh = true) { return fnprepatch_499.call(this, StartPos, bUpdateMesh) }; } catch (e) {};
-try { let fnprepatch_500 = SplineMeshComponent.prototype.SetStartOffset;SplineMeshComponent.prototype.SetStartOffset = function (StartOffset, bUpdateMesh = true) { return fnprepatch_500.call(this, StartOffset, bUpdateMesh) }; } catch (e) {};
-try { let fnprepatch_501 = SplineMeshComponent.prototype.SetStartAndEnd;SplineMeshComponent.prototype.SetStartAndEnd = function (StartPos, StartTangent, EndPos, EndTangent, bUpdateMesh = true) { return fnprepatch_501.call(this, StartPos, StartTangent, EndPos, EndTangent, bUpdateMesh) }; } catch (e) {};
-try { let fnprepatch_502 = SplineMeshComponent.prototype.SetSplineUpDir;SplineMeshComponent.prototype.SetSplineUpDir = function (InSplineUpDir, bUpdateMesh = true) { return fnprepatch_502.call(this, InSplineUpDir, bUpdateMesh) }; } catch (e) {};
-try { let fnprepatch_503 = SplineMeshComponent.prototype.SetForwardAxis;SplineMeshComponent.prototype.SetForwardAxis = function (InForwardAxis, bUpdateMesh = true) { return fnprepatch_503.call(this, InForwardAxis, bUpdateMesh) }; } catch (e) {};
-try { let fnprepatch_504 = SplineMeshComponent.prototype.SetEndTangent;SplineMeshComponent.prototype.SetEndTangent = function (EndTangent, bUpdateMesh = true) { return fnprepatch_504.call(this, EndTangent, bUpdateMesh) }; } catch (e) {};
-try { let fnprepatch_505 = SplineMeshComponent.prototype.SetEndScale;SplineMeshComponent.prototype.SetEndScale = function (EndScale = {"X":1,"Y":1}, bUpdateMesh = true) { return fnprepatch_505.call(this, EndScale, bUpdateMesh) }; } catch (e) {};
-try { let fnprepatch_506 = SplineMeshComponent.prototype.SetEndRoll;SplineMeshComponent.prototype.SetEndRoll = function (EndRoll, bUpdateMesh = true) { return fnprepatch_506.call(this, EndRoll, bUpdateMesh) }; } catch (e) {};
-try { let fnprepatch_507 = SplineMeshComponent.prototype.SetEndPosition;SplineMeshComponent.prototype.SetEndPosition = function (EndPos, bUpdateMesh = true) { return fnprepatch_507.call(this, EndPos, bUpdateMesh) }; } catch (e) {};
-try { let fnprepatch_508 = SplineMeshComponent.prototype.SetEndOffset;SplineMeshComponent.prototype.SetEndOffset = function (EndOffset, bUpdateMesh = true) { return fnprepatch_508.call(this, EndOffset, bUpdateMesh) }; } catch (e) {};
-try { let fnprepatch_509 = SplineMeshComponent.prototype.SetBoundaryMin;SplineMeshComponent.prototype.SetBoundaryMin = function (InBoundaryMin, bUpdateMesh = true) { return fnprepatch_509.call(this, InBoundaryMin, bUpdateMesh) }; } catch (e) {};
-try { let fnprepatch_510 = SplineMeshComponent.prototype.SetBoundaryMax;SplineMeshComponent.prototype.SetBoundaryMax = function (InBoundaryMax, bUpdateMesh = true) { return fnprepatch_510.call(this, InBoundaryMax, bUpdateMesh) }; } catch (e) {};
-try { let fnprepatch_511 = StereoLayerFunctionLibrary.prototype.SetSplashScreen;StereoLayerFunctionLibrary.prototype.SetSplashScreen = function (Texture, Scale = {"X":1,"Y":1}, Offset = {"X":0,"Y":0}, bShowLoadingMovie = false, bShowOnSet = false) { return fnprepatch_511.call(this, Texture, Scale, Offset, bShowLoadingMovie, bShowOnSet) }; } catch (e) {};
+try { let fnprepatch_508 = SplineComponent.prototype.SetUpVectorAtSplinePoint;SplineComponent.prototype.SetUpVectorAtSplinePoint = function (PointIndex, InUpVector, CoordinateSpace, bUpdateSpline = true) { return fnprepatch_508.call(this, PointIndex, InUpVector, CoordinateSpace, bUpdateSpline) }; } catch (e) {};
+try { let fnprepatch_509 = SplineComponent.prototype.SetTangentsAtSplinePoint;SplineComponent.prototype.SetTangentsAtSplinePoint = function (PointIndex, InArriveTangent, InLeaveTangent, CoordinateSpace, bUpdateSpline = true) { return fnprepatch_509.call(this, PointIndex, InArriveTangent, InLeaveTangent, CoordinateSpace, bUpdateSpline) }; } catch (e) {};
+try { let fnprepatch_510 = SplineComponent.prototype.SetTangentAtSplinePoint;SplineComponent.prototype.SetTangentAtSplinePoint = function (PointIndex, InTangent, CoordinateSpace, bUpdateSpline = true) { return fnprepatch_510.call(this, PointIndex, InTangent, CoordinateSpace, bUpdateSpline) }; } catch (e) {};
+try { let fnprepatch_511 = SplineComponent.prototype.SetSplinePointType;SplineComponent.prototype.SetSplinePointType = function (PointIndex, Type, bUpdateSpline = true) { return fnprepatch_511.call(this, PointIndex, Type, bUpdateSpline) }; } catch (e) {};
+try { let fnprepatch_512 = SplineComponent.prototype.SetSplinePoints;SplineComponent.prototype.SetSplinePoints = function (Points, CoordinateSpace, bUpdateSpline = true) { return fnprepatch_512.call(this, Points, CoordinateSpace, bUpdateSpline) }; } catch (e) {};
+try { let fnprepatch_513 = SplineComponent.prototype.SetLocationAtSplinePoint;SplineComponent.prototype.SetLocationAtSplinePoint = function (PointIndex, InLocation, CoordinateSpace, bUpdateSpline = true) { return fnprepatch_513.call(this, PointIndex, InLocation, CoordinateSpace, bUpdateSpline) }; } catch (e) {};
+try { let fnprepatch_514 = SplineComponent.prototype.SetClosedLoopAtPosition;SplineComponent.prototype.SetClosedLoopAtPosition = function (bInClosedLoop, Key, bUpdateSpline = true) { return fnprepatch_514.call(this, bInClosedLoop, Key, bUpdateSpline) }; } catch (e) {};
+try { let fnprepatch_515 = SplineComponent.prototype.SetClosedLoop;SplineComponent.prototype.SetClosedLoop = function (bInClosedLoop, bUpdateSpline = true) { return fnprepatch_515.call(this, bInClosedLoop, bUpdateSpline) }; } catch (e) {};
+try { let fnprepatch_516 = SplineComponent.prototype.RemoveSplinePoint;SplineComponent.prototype.RemoveSplinePoint = function (Index, bUpdateSpline = true) { return fnprepatch_516.call(this, Index, bUpdateSpline) }; } catch (e) {};
+try { let fnprepatch_517 = SplineComponent.prototype.GetWorldRotationAtTime;SplineComponent.prototype.GetWorldRotationAtTime = function (Time, bUseConstantVelocity = false) { return fnprepatch_517.call(this, Time, bUseConstantVelocity) }; } catch (e) {};
+try { let fnprepatch_518 = SplineComponent.prototype.GetWorldLocationAtTime;SplineComponent.prototype.GetWorldLocationAtTime = function (Time, bUseConstantVelocity = false) { return fnprepatch_518.call(this, Time, bUseConstantVelocity) }; } catch (e) {};
+try { let fnprepatch_519 = SplineComponent.prototype.GetWorldDirectionAtTime;SplineComponent.prototype.GetWorldDirectionAtTime = function (Time, bUseConstantVelocity = false) { return fnprepatch_519.call(this, Time, bUseConstantVelocity) }; } catch (e) {};
+try { let fnprepatch_520 = SplineComponent.prototype.GetUpVectorAtTime;SplineComponent.prototype.GetUpVectorAtTime = function (Time, CoordinateSpace, bUseConstantVelocity = false) { return fnprepatch_520.call(this, Time, CoordinateSpace, bUseConstantVelocity) }; } catch (e) {};
+try { let fnprepatch_521 = SplineComponent.prototype.GetTransformAtTime;SplineComponent.prototype.GetTransformAtTime = function (Time, CoordinateSpace, bUseConstantVelocity = false, bUseScale = false) { return fnprepatch_521.call(this, Time, CoordinateSpace, bUseConstantVelocity, bUseScale) }; } catch (e) {};
+try { let fnprepatch_522 = SplineComponent.prototype.GetTransformAtSplinePoint;SplineComponent.prototype.GetTransformAtSplinePoint = function (PointIndex, CoordinateSpace, bUseScale = false) { return fnprepatch_522.call(this, PointIndex, CoordinateSpace, bUseScale) }; } catch (e) {};
+try { let fnprepatch_523 = SplineComponent.prototype.GetTransformAtDistanceAlongSpline;SplineComponent.prototype.GetTransformAtDistanceAlongSpline = function (Distance, CoordinateSpace, bUseScale = false) { return fnprepatch_523.call(this, Distance, CoordinateSpace, bUseScale) }; } catch (e) {};
+try { let fnprepatch_524 = SplineComponent.prototype.GetTangentAtTime;SplineComponent.prototype.GetTangentAtTime = function (Time, CoordinateSpace, bUseConstantVelocity = false) { return fnprepatch_524.call(this, Time, CoordinateSpace, bUseConstantVelocity) }; } catch (e) {};
+try { let fnprepatch_525 = SplineComponent.prototype.GetScaleAtTime;SplineComponent.prototype.GetScaleAtTime = function (Time, bUseConstantVelocity = false) { return fnprepatch_525.call(this, Time, bUseConstantVelocity) }; } catch (e) {};
+try { let fnprepatch_526 = SplineComponent.prototype.GetRotationAtTime;SplineComponent.prototype.GetRotationAtTime = function (Time, CoordinateSpace, bUseConstantVelocity = false) { return fnprepatch_526.call(this, Time, CoordinateSpace, bUseConstantVelocity) }; } catch (e) {};
+try { let fnprepatch_527 = SplineComponent.prototype.GetRollAtTime;SplineComponent.prototype.GetRollAtTime = function (Time, CoordinateSpace, bUseConstantVelocity = false) { return fnprepatch_527.call(this, Time, CoordinateSpace, bUseConstantVelocity) }; } catch (e) {};
+try { let fnprepatch_528 = SplineComponent.prototype.GetRightVectorAtTime;SplineComponent.prototype.GetRightVectorAtTime = function (Time, CoordinateSpace, bUseConstantVelocity = false) { return fnprepatch_528.call(this, Time, CoordinateSpace, bUseConstantVelocity) }; } catch (e) {};
+try { let fnprepatch_529 = SplineComponent.prototype.GetLocationAtTime;SplineComponent.prototype.GetLocationAtTime = function (Time, CoordinateSpace, bUseConstantVelocity = false) { return fnprepatch_529.call(this, Time, CoordinateSpace, bUseConstantVelocity) }; } catch (e) {};
+try { let fnprepatch_530 = SplineComponent.prototype.GetDirectionAtTime;SplineComponent.prototype.GetDirectionAtTime = function (Time, CoordinateSpace, bUseConstantVelocity = false) { return fnprepatch_530.call(this, Time, CoordinateSpace, bUseConstantVelocity) }; } catch (e) {};
+try { let fnprepatch_531 = SplineComponent.prototype.FindTransformClosestToWorldLocation;SplineComponent.prototype.FindTransformClosestToWorldLocation = function (WorldLocation, CoordinateSpace, bUseScale = false) { return fnprepatch_531.call(this, WorldLocation, CoordinateSpace, bUseScale) }; } catch (e) {};
+try { let fnprepatch_532 = SplineComponent.prototype.ClearSplinePoints;SplineComponent.prototype.ClearSplinePoints = function (bUpdateSpline = true) { return fnprepatch_532.call(this, bUpdateSpline) }; } catch (e) {};
+try { let fnprepatch_533 = SplineComponent.prototype.AddSplinePointAtIndex;SplineComponent.prototype.AddSplinePointAtIndex = function (Position, Index, CoordinateSpace, bUpdateSpline = true) { return fnprepatch_533.call(this, Position, Index, CoordinateSpace, bUpdateSpline) }; } catch (e) {};
+try { let fnprepatch_534 = SplineComponent.prototype.AddSplinePoint;SplineComponent.prototype.AddSplinePoint = function (Position, CoordinateSpace, bUpdateSpline = true) { return fnprepatch_534.call(this, Position, CoordinateSpace, bUpdateSpline) }; } catch (e) {};
+try { let fnprepatch_535 = SplineComponent.prototype.AddPoints;SplineComponent.prototype.AddPoints = function (Points, bUpdateSpline = true) { return fnprepatch_535.call(this, Points, bUpdateSpline) }; } catch (e) {};
+try { let fnprepatch_536 = SplineComponent.prototype.AddPoint;SplineComponent.prototype.AddPoint = function (Point, bUpdateSpline = true) { return fnprepatch_536.call(this, Point, bUpdateSpline) }; } catch (e) {};
+try { let fnprepatch_537 = SplineMeshComponent.prototype.SetStartTangent;SplineMeshComponent.prototype.SetStartTangent = function (StartTangent, bUpdateMesh = true) { return fnprepatch_537.call(this, StartTangent, bUpdateMesh) }; } catch (e) {};
+try { let fnprepatch_538 = SplineMeshComponent.prototype.SetStartScale;SplineMeshComponent.prototype.SetStartScale = function (StartScale = {"X":1,"Y":1}, bUpdateMesh = true) { return fnprepatch_538.call(this, StartScale, bUpdateMesh) }; } catch (e) {};
+try { let fnprepatch_539 = SplineMeshComponent.prototype.SetStartRoll;SplineMeshComponent.prototype.SetStartRoll = function (StartRoll, bUpdateMesh = true) { return fnprepatch_539.call(this, StartRoll, bUpdateMesh) }; } catch (e) {};
+try { let fnprepatch_540 = SplineMeshComponent.prototype.SetStartPosition;SplineMeshComponent.prototype.SetStartPosition = function (StartPos, bUpdateMesh = true) { return fnprepatch_540.call(this, StartPos, bUpdateMesh) }; } catch (e) {};
+try { let fnprepatch_541 = SplineMeshComponent.prototype.SetStartOffset;SplineMeshComponent.prototype.SetStartOffset = function (StartOffset, bUpdateMesh = true) { return fnprepatch_541.call(this, StartOffset, bUpdateMesh) }; } catch (e) {};
+try { let fnprepatch_542 = SplineMeshComponent.prototype.SetStartAndEnd;SplineMeshComponent.prototype.SetStartAndEnd = function (StartPos, StartTangent, EndPos, EndTangent, bUpdateMesh = true) { return fnprepatch_542.call(this, StartPos, StartTangent, EndPos, EndTangent, bUpdateMesh) }; } catch (e) {};
+try { let fnprepatch_543 = SplineMeshComponent.prototype.SetSplineUpDir;SplineMeshComponent.prototype.SetSplineUpDir = function (InSplineUpDir, bUpdateMesh = true) { return fnprepatch_543.call(this, InSplineUpDir, bUpdateMesh) }; } catch (e) {};
+try { let fnprepatch_544 = SplineMeshComponent.prototype.SetForwardAxis;SplineMeshComponent.prototype.SetForwardAxis = function (InForwardAxis, bUpdateMesh = true) { return fnprepatch_544.call(this, InForwardAxis, bUpdateMesh) }; } catch (e) {};
+try { let fnprepatch_545 = SplineMeshComponent.prototype.SetEndTangent;SplineMeshComponent.prototype.SetEndTangent = function (EndTangent, bUpdateMesh = true) { return fnprepatch_545.call(this, EndTangent, bUpdateMesh) }; } catch (e) {};
+try { let fnprepatch_546 = SplineMeshComponent.prototype.SetEndScale;SplineMeshComponent.prototype.SetEndScale = function (EndScale = {"X":1,"Y":1}, bUpdateMesh = true) { return fnprepatch_546.call(this, EndScale, bUpdateMesh) }; } catch (e) {};
+try { let fnprepatch_547 = SplineMeshComponent.prototype.SetEndRoll;SplineMeshComponent.prototype.SetEndRoll = function (EndRoll, bUpdateMesh = true) { return fnprepatch_547.call(this, EndRoll, bUpdateMesh) }; } catch (e) {};
+try { let fnprepatch_548 = SplineMeshComponent.prototype.SetEndPosition;SplineMeshComponent.prototype.SetEndPosition = function (EndPos, bUpdateMesh = true) { return fnprepatch_548.call(this, EndPos, bUpdateMesh) }; } catch (e) {};
+try { let fnprepatch_549 = SplineMeshComponent.prototype.SetEndOffset;SplineMeshComponent.prototype.SetEndOffset = function (EndOffset, bUpdateMesh = true) { return fnprepatch_549.call(this, EndOffset, bUpdateMesh) }; } catch (e) {};
+try { let fnprepatch_550 = SplineMeshComponent.prototype.SetBoundaryMin;SplineMeshComponent.prototype.SetBoundaryMin = function (InBoundaryMin, bUpdateMesh = true) { return fnprepatch_550.call(this, InBoundaryMin, bUpdateMesh) }; } catch (e) {};
+try { let fnprepatch_551 = SplineMeshComponent.prototype.SetBoundaryMax;SplineMeshComponent.prototype.SetBoundaryMax = function (InBoundaryMax, bUpdateMesh = true) { return fnprepatch_551.call(this, InBoundaryMax, bUpdateMesh) }; } catch (e) {};
+try { let fnprepatch_552 = StereoLayerFunctionLibrary.prototype.SetSplashScreen;StereoLayerFunctionLibrary.prototype.SetSplashScreen = function (Texture, Scale = {"X":1,"Y":1}, Offset, bShowLoadingMovie = false, bShowOnSet = false) { return fnprepatch_552.call(this, Texture, Scale, Offset, bShowLoadingMovie, bShowOnSet) }; } catch (e) {};
 try { TextRenderComponent.prototype.SetText = TextRenderComponent.prototype.K2_SetText; } catch (e) {};
-try { let fnprepatch_512 = TimelineComponent.prototype.SetPlaybackPosition;TimelineComponent.prototype.SetPlaybackPosition = function (NewPosition, bFireEvents, bFireUpdate = true) { return fnprepatch_512.call(this, NewPosition, bFireEvents, bFireUpdate) }; } catch (e) {};
-try { let fnprepatch_513 = VisualLoggerKismetLibrary.prototype.LogText;VisualLoggerKismetLibrary.prototype.LogText = function (WorldContextObject, Text, LogCategory = "VisLogBP", bAddToMessageLog = false) { return fnprepatch_513.call(this, WorldContextObject, Text, LogCategory, bAddToMessageLog) }; } catch (e) {};
-try { let fnprepatch_514 = VisualLoggerKismetLibrary.prototype.LogSegment;VisualLoggerKismetLibrary.prototype.LogSegment = function (WorldContextObject, SegmentStart, SegmentEnd, Text, ObjectColor = {"R":0,"G":0,"B":1,"A":1}, Thickness = 0, CategoryName = "VisLogBP", bAddToMessageLog = false) { return fnprepatch_514.call(this, WorldContextObject, SegmentStart, SegmentEnd, Text, ObjectColor, Thickness, CategoryName, bAddToMessageLog) }; } catch (e) {};
-try { let fnprepatch_515 = VisualLoggerKismetLibrary.prototype.LogLocation;VisualLoggerKismetLibrary.prototype.LogLocation = function (WorldContextObject, Location, Text, ObjectColor = {"R":0,"G":0,"B":1,"A":1}, Radius = 10, LogCategory = "VisLogBP", bAddToMessageLog = false) { return fnprepatch_515.call(this, WorldContextObject, Location, Text, ObjectColor, Radius, LogCategory, bAddToMessageLog) }; } catch (e) {};
-try { let fnprepatch_516 = VisualLoggerKismetLibrary.prototype.LogBox;VisualLoggerKismetLibrary.prototype.LogBox = function (WorldContextObject, BoxShape, Text, ObjectColor = {"R":0,"G":0,"B":1,"A":1}, LogCategory = "VisLogBP", bAddToMessageLog = false) { return fnprepatch_516.call(this, WorldContextObject, BoxShape, Text, ObjectColor, LogCategory, bAddToMessageLog) }; } catch (e) {};
+try { let fnprepatch_553 = TimelineComponent.prototype.SetPlaybackPosition;TimelineComponent.prototype.SetPlaybackPosition = function (NewPosition, bFireEvents, bFireUpdate = true) { return fnprepatch_553.call(this, NewPosition, bFireEvents, bFireUpdate) }; } catch (e) {};
+try { let fnprepatch_554 = VisualLoggerKismetLibrary.prototype.LogText;VisualLoggerKismetLibrary.prototype.LogText = function (WorldContextObject, Text, LogCategory = "VisLogBP", bAddToMessageLog = false) { return fnprepatch_554.call(this, WorldContextObject, Text, LogCategory, bAddToMessageLog) }; } catch (e) {};
+try { let fnprepatch_555 = VisualLoggerKismetLibrary.prototype.LogSegment;VisualLoggerKismetLibrary.prototype.LogSegment = function (WorldContextObject, SegmentStart, SegmentEnd, Text, ObjectColor = {"R":0,"G":0,"B":1,"A":1}, Thickness = 0, CategoryName = "VisLogBP", bAddToMessageLog = false) { return fnprepatch_555.call(this, WorldContextObject, SegmentStart, SegmentEnd, Text, ObjectColor, Thickness, CategoryName, bAddToMessageLog) }; } catch (e) {};
+try { let fnprepatch_556 = VisualLoggerKismetLibrary.prototype.LogLocation;VisualLoggerKismetLibrary.prototype.LogLocation = function (WorldContextObject, Location, Text, ObjectColor = {"R":0,"G":0,"B":1,"A":1}, Radius = 10, LogCategory = "VisLogBP", bAddToMessageLog = false) { return fnprepatch_556.call(this, WorldContextObject, Location, Text, ObjectColor, Radius, LogCategory, bAddToMessageLog) }; } catch (e) {};
+try { let fnprepatch_557 = VisualLoggerKismetLibrary.prototype.LogBox;VisualLoggerKismetLibrary.prototype.LogBox = function (WorldContextObject, BoxShape, Text, ObjectColor = {"R":0,"G":0,"B":1,"A":1}, LogCategory = "VisLogBP", bAddToMessageLog = false) { return fnprepatch_557.call(this, WorldContextObject, BoxShape, Text, ObjectColor, LogCategory, bAddToMessageLog) }; } catch (e) {};
 try { VisualLoggerKismetLibrary.prototype.VisLogText = VisualLoggerKismetLibrary.prototype.LogText; } catch (e) {};
 try { VisualLoggerKismetLibrary.VisLogText = VisualLoggerKismetLibrary.LogText; } catch (e) {};
 try { VisualLoggerKismetLibrary.prototype.VisLogSegment = VisualLoggerKismetLibrary.prototype.LogSegment; } catch (e) {};
@@ -1562,51 +1900,85 @@ try { VisualLoggerKismetLibrary.prototype.EnableVisLogRecording = VisualLoggerKi
 try { VisualLoggerKismetLibrary.EnableVisLogRecording = VisualLoggerKismetLibrary.EnableRecording; } catch (e) {};
 try { VOIPTalker.prototype.EndTalking = VOIPTalker.prototype.BPOnTalkingEnd; } catch (e) {};
 try { VOIPTalker.prototype.BeginTalking = VOIPTalker.prototype.BPOnTalkingBegin; } catch (e) {};
-try { let fnprepatch_517 = AnimationBlueprintLibrary.prototype.RemoveCurve;AnimationBlueprintLibrary.prototype.RemoveCurve = function (AnimationSequence, CurveName, bRemoveNameFromSkeleton = false) { return fnprepatch_517.call(this, AnimationSequence, CurveName, bRemoveNameFromSkeleton) }; } catch (e) {};
-try { let fnprepatch_518 = AnimationBlueprintLibrary.prototype.RemoveBoneAnimation;AnimationBlueprintLibrary.prototype.RemoveBoneAnimation = function (AnimationSequence, BoneName, bIncludeChildren = true, bFinalize = true) { return fnprepatch_518.call(this, AnimationSequence, BoneName, bIncludeChildren, bFinalize) }; } catch (e) {};
-try { let fnprepatch_519 = AnimationBlueprintLibrary.prototype.GetBonePosesForTime;AnimationBlueprintLibrary.prototype.GetBonePosesForTime = function (AnimationSequence, BoneNames, Time, bExtractRootMotion, Poses, PreviewMesh = undefined) { return fnprepatch_519.call(this, AnimationSequence, BoneNames, Time, bExtractRootMotion, Poses, PreviewMesh) }; } catch (e) {};
-try { let fnprepatch_520 = AnimationBlueprintLibrary.prototype.GetBonePosesForFrame;AnimationBlueprintLibrary.prototype.GetBonePosesForFrame = function (AnimationSequence, BoneNames, Frame, bExtractRootMotion, Poses, PreviewMesh = undefined) { return fnprepatch_520.call(this, AnimationSequence, BoneNames, Frame, bExtractRootMotion, Poses, PreviewMesh) }; } catch (e) {};
-try { let fnprepatch_521 = AnimationBlueprintLibrary.prototype.AddCurve;AnimationBlueprintLibrary.prototype.AddCurve = function (AnimationSequence, CurveName, CurveType = "RCT_Float", bMetaDataCurve = false) { return fnprepatch_521.call(this, AnimationSequence, CurveName, CurveType, bMetaDataCurve) }; } catch (e) {};
-try { let fnprepatch_522 = AnimationBlueprintLibrary.prototype.AddAnimationNotifyTrack;AnimationBlueprintLibrary.prototype.AddAnimationNotifyTrack = function (AnimationSequence, NotifyTrackName, TrackColor = {"R":1,"G":1,"B":1,"A":1}) { return fnprepatch_522.call(this, AnimationSequence, NotifyTrackName, TrackColor) }; } catch (e) {};
-try { let fnprepatch_523 = MagicLeapHandTrackingFunctionLibrary.prototype.SetConfiguration;MagicLeapHandTrackingFunctionLibrary.prototype.SetConfiguration = function (StaticGesturesToActivate, KeypointsFilterLevel = "NoFilter", GestureFilterLevel = "NoFilter", HandSwitchingFilterLevel = "NoFilter", bTrackingEnabled = true) { return fnprepatch_523.call(this, StaticGesturesToActivate, KeypointsFilterLevel, GestureFilterLevel, HandSwitchingFilterLevel, bTrackingEnabled) }; } catch (e) {};
-try { let fnprepatch_524 = AchievementWriteCallbackProxy.prototype.WriteAchievementProgress;AchievementWriteCallbackProxy.prototype.WriteAchievementProgress = function (WorldContextObject, PlayerController, AchievementName, Progress = 100, UserTag = 0) { return fnprepatch_524.call(this, WorldContextObject, PlayerController, AchievementName, Progress, UserTag) }; } catch (e) {};
+try { let fnprepatch_558 = AnimationBlueprintLibrary.prototype.RemoveCurve;AnimationBlueprintLibrary.prototype.RemoveCurve = function (AnimationSequence, CurveName, bRemoveNameFromSkeleton = false) { return fnprepatch_558.call(this, AnimationSequence, CurveName, bRemoveNameFromSkeleton) }; } catch (e) {};
+try { let fnprepatch_559 = AnimationBlueprintLibrary.prototype.RemoveBoneAnimation;AnimationBlueprintLibrary.prototype.RemoveBoneAnimation = function (AnimationSequence, BoneName, bIncludeChildren = true, bFinalize = true) { return fnprepatch_559.call(this, AnimationSequence, BoneName, bIncludeChildren, bFinalize) }; } catch (e) {};
+try { let fnprepatch_560 = AnimationBlueprintLibrary.prototype.GetBonePosesForTime;AnimationBlueprintLibrary.prototype.GetBonePosesForTime = function (AnimationSequence, BoneNames, Time, bExtractRootMotion, Poses, PreviewMesh = undefined) { return fnprepatch_560.call(this, AnimationSequence, BoneNames, Time, bExtractRootMotion, Poses, PreviewMesh) }; } catch (e) {};
+try { let fnprepatch_561 = AnimationBlueprintLibrary.prototype.GetBonePosesForFrame;AnimationBlueprintLibrary.prototype.GetBonePosesForFrame = function (AnimationSequence, BoneNames, Frame, bExtractRootMotion, Poses, PreviewMesh = undefined) { return fnprepatch_561.call(this, AnimationSequence, BoneNames, Frame, bExtractRootMotion, Poses, PreviewMesh) }; } catch (e) {};
+try { let fnprepatch_562 = AnimationBlueprintLibrary.prototype.AddCurve;AnimationBlueprintLibrary.prototype.AddCurve = function (AnimationSequence, CurveName, CurveType = "RCT_Float", bMetaDataCurve = false) { return fnprepatch_562.call(this, AnimationSequence, CurveName, CurveType, bMetaDataCurve) }; } catch (e) {};
+try { let fnprepatch_563 = AnimationBlueprintLibrary.prototype.AddAnimationNotifyTrack;AnimationBlueprintLibrary.prototype.AddAnimationNotifyTrack = function (AnimationSequence, NotifyTrackName, TrackColor = {"R":1,"G":1,"B":1,"A":1}) { return fnprepatch_563.call(this, AnimationSequence, NotifyTrackName, TrackColor) }; } catch (e) {};
+try { let fnprepatch_564 = GameplayTask_ClaimResource.prototype.ClaimResources;GameplayTask_ClaimResource.prototype.ClaimResources = function (InTaskOwner, ResourceClasses, Priority = 192, TaskInstanceName = "None") { return fnprepatch_564.call(this, InTaskOwner, ResourceClasses, Priority, TaskInstanceName) }; } catch (e) {};
+try { let fnprepatch_565 = GameplayTask_ClaimResource.prototype.ClaimResource;GameplayTask_ClaimResource.prototype.ClaimResource = function (InTaskOwner, ResourceClass, Priority = 192, TaskInstanceName = "None") { return fnprepatch_565.call(this, InTaskOwner, ResourceClass, Priority, TaskInstanceName) }; } catch (e) {};
+try { let fnprepatch_566 = GameplayTask_SpawnActor.prototype.SpawnActor;GameplayTask_SpawnActor.prototype.SpawnActor = function (TaskOwner, SpawnLocation, SpawnRotation, Class, bSpawnOnlyOnAuthority = false) { return fnprepatch_566.call(this, TaskOwner, SpawnLocation, SpawnRotation, Class, bSpawnOnlyOnAuthority) }; } catch (e) {};
+try { let fnprepatch_567 = GameplayTask_WaitDelay.prototype.TaskWaitDelay;GameplayTask_WaitDelay.prototype.TaskWaitDelay = function (TaskOwner, Time, Priority = 192) { return fnprepatch_567.call(this, TaskOwner, Time, Priority) }; } catch (e) {};
+try { let fnprepatch_568 = AIBlueprintHelperLibrary.prototype.SpawnAIFromClass;AIBlueprintHelperLibrary.prototype.SpawnAIFromClass = function (WorldContextObject, PawnClass, BehaviorTree, Location, Rotation, bNoCollisionFail = false) { return fnprepatch_568.call(this, WorldContextObject, PawnClass, BehaviorTree, Location, Rotation, bNoCollisionFail) }; } catch (e) {};
+try { let fnprepatch_569 = AIBlueprintHelperLibrary.prototype.SendAIMessage;AIBlueprintHelperLibrary.prototype.SendAIMessage = function (Target, Message, MessageSource, bSuccess = true) { return fnprepatch_569.call(this, Target, Message, MessageSource, bSuccess) }; } catch (e) {};
+try { let fnprepatch_570 = AIBlueprintHelperLibrary.prototype.CreateMoveToProxyObject;AIBlueprintHelperLibrary.prototype.CreateMoveToProxyObject = function (WorldContextObject, Pawn, Destination, TargetActor = undefined, AcceptanceRadius = 5, bStopOnOverlap = false) { return fnprepatch_570.call(this, WorldContextObject, Pawn, Destination, TargetActor, AcceptanceRadius, bStopOnOverlap) }; } catch (e) {};
+try { let fnprepatch_571 = AIController.prototype.MoveToLocation;AIController.prototype.MoveToLocation = function (Dest, AcceptanceRadius = -1, bStopOnOverlap = true, bUsePathfinding = true, bProjectDestinationToNavigation = false, bCanStrafe = true, FilterClass = null, bAllowPartialPath = true) { return fnprepatch_571.call(this, Dest, AcceptanceRadius, bStopOnOverlap, bUsePathfinding, bProjectDestinationToNavigation, bCanStrafe, FilterClass, bAllowPartialPath) }; } catch (e) {};
+try { let fnprepatch_572 = AIController.prototype.MoveToActor;AIController.prototype.MoveToActor = function (Goal, AcceptanceRadius = -1, bStopOnOverlap = true, bUsePathfinding = true, bCanStrafe = true, FilterClass = null, bAllowPartialPath = true) { return fnprepatch_572.call(this, Goal, AcceptanceRadius, bStopOnOverlap, bUsePathfinding, bCanStrafe, FilterClass, bAllowPartialPath) }; } catch (e) {};
+try { AIController.prototype.SetFocus = AIController.prototype.K2_SetFocus; } catch (e) {};
+try { AIController.prototype.SetFocalPoint = AIController.prototype.K2_SetFocalPoint; } catch (e) {};
+try { AIController.prototype.ClearFocus = AIController.prototype.K2_ClearFocus; } catch (e) {};
+try { AISense_Blueprint.prototype.OnNewPawn = AISense_Blueprint.prototype.K2_OnNewPawn; } catch (e) {};
+try { let fnprepatch_573 = AISense_Hearing.prototype.ReportNoiseEvent;AISense_Hearing.prototype.ReportNoiseEvent = function (WorldContextObject, NoiseLocation, Loudness = 1, Instigator = undefined, MaxRange = 0, Tag = "None") { return fnprepatch_573.call(this, WorldContextObject, NoiseLocation, Loudness, Instigator, MaxRange, Tag) }; } catch (e) {};
+try { let fnprepatch_574 = AITask_MoveTo.prototype.AIMoveTo;AITask_MoveTo.prototype.AIMoveTo = function (Controller, GoalLocation, GoalActor = undefined, AcceptanceRadius = -1, StopOnOverlap = "Default", AcceptPartialPath = "Default", bUsePathfinding = true, bLockAILogic = true, bUseContinuosGoalTracking = false, ProjectGoalOnNavigation = "Default") { return fnprepatch_574.call(this, Controller, GoalLocation, GoalActor, AcceptanceRadius, StopOnOverlap, AcceptPartialPath, bUsePathfinding, bLockAILogic, bUseContinuosGoalTracking, ProjectGoalOnNavigation) }; } catch (e) {};
+try { AITask_MoveTo.prototype.MoveToLocationorActor = AITask_MoveTo.prototype.AIMoveTo; } catch (e) {};
+try { AITask_MoveTo.MoveToLocationorActor = AITask_MoveTo.AIMoveTo; } catch (e) {};
+try { let fnprepatch_575 = BTTask_BlueprintBase.prototype.SetFinishOnMessageWithId;BTTask_BlueprintBase.prototype.SetFinishOnMessageWithId = function (MessageName, RequestID = -1) { return fnprepatch_575.call(this, MessageName, RequestID) }; } catch (e) {};
+try { let fnprepatch_576 = NavLocalGridManager.prototype.RemoveLocalNavigationGrid;NavLocalGridManager.prototype.RemoveLocalNavigationGrid = function (WorldContextObject, GridId, bRebuildGrids = true) { return fnprepatch_576.call(this, WorldContextObject, GridId, bRebuildGrids) }; } catch (e) {};
+try { let fnprepatch_577 = NavLocalGridManager.prototype.AddLocalNavigationGridForPoints;NavLocalGridManager.prototype.AddLocalNavigationGridForPoints = function (WorldContextObject, Locations, Radius2D = 5, Height = 100, bRebuildGrids = true) { return fnprepatch_577.call(this, WorldContextObject, Locations, Radius2D, Height, bRebuildGrids) }; } catch (e) {};
+try { let fnprepatch_578 = NavLocalGridManager.prototype.AddLocalNavigationGridForPoint;NavLocalGridManager.prototype.AddLocalNavigationGridForPoint = function (WorldContextObject, Location, Radius2D = 5, Height = 100, bRebuildGrids = true) { return fnprepatch_578.call(this, WorldContextObject, Location, Radius2D, Height, bRebuildGrids) }; } catch (e) {};
+try { let fnprepatch_579 = NavLocalGridManager.prototype.AddLocalNavigationGridForCapsule;NavLocalGridManager.prototype.AddLocalNavigationGridForCapsule = function (WorldContextObject, Location, CapsuleRadius, CapsuleHalfHeight, Radius2D = 5, Height = 100, bRebuildGrids = true) { return fnprepatch_579.call(this, WorldContextObject, Location, CapsuleRadius, CapsuleHalfHeight, Radius2D, Height, bRebuildGrids) }; } catch (e) {};
+try { let fnprepatch_580 = NavLocalGridManager.prototype.AddLocalNavigationGridForBox;NavLocalGridManager.prototype.AddLocalNavigationGridForBox = function (WorldContextObject, Location, Extent, Rotation, Radius2D = 5, Height = 100, bRebuildGrids = true) { return fnprepatch_580.call(this, WorldContextObject, Location, Extent, Rotation, Radius2D, Height, bRebuildGrids) }; } catch (e) {};
+try { let fnprepatch_581 = PawnActionsComponent.prototype.K2_PushAction;PawnActionsComponent.prototype.K2_PushAction = function (NewAction, Priority, Instigator = undefined) { return fnprepatch_581.call(this, NewAction, Priority, Instigator) }; } catch (e) {};
+try { let fnprepatch_582 = PawnActionsComponent.prototype.K2_PerformAction;PawnActionsComponent.prototype.K2_PerformAction = function (Pawn, Action, Priority = "HardScript") { return fnprepatch_582.call(this, Pawn, Action, Priority) }; } catch (e) {};
+try { PawnActionsComponent.prototype.PushAction = PawnActionsComponent.prototype.K2_PushAction; } catch (e) {};
+try { PawnActionsComponent.prototype.PerformAction = PawnActionsComponent.prototype.K2_PerformAction; } catch (e) {};
+try { PawnActionsComponent.PerformAction = PawnActionsComponent.K2_PerformAction; } catch (e) {};
+try { PawnActionsComponent.prototype.ForceAbortAction = PawnActionsComponent.prototype.K2_ForceAbortAction; } catch (e) {};
+try { PawnActionsComponent.prototype.AbortAction = PawnActionsComponent.prototype.K2_AbortAction; } catch (e) {};
+try { let fnprepatch_583 = AchievementWriteCallbackProxy.prototype.WriteAchievementProgress;AchievementWriteCallbackProxy.prototype.WriteAchievementProgress = function (WorldContextObject, PlayerController, AchievementName, Progress = 100, UserTag = 0) { return fnprepatch_583.call(this, WorldContextObject, PlayerController, AchievementName, Progress, UserTag) }; } catch (e) {};
 try { InAppPurchaseQueryCallbackProxy.prototype.ReadInAppPurchaseInformation = InAppPurchaseQueryCallbackProxy.prototype.CreateProxyObjectForInAppPurchaseQuery; } catch (e) {};
 try { InAppPurchaseQueryCallbackProxy.ReadInAppPurchaseInformation = InAppPurchaseQueryCallbackProxy.CreateProxyObjectForInAppPurchaseQuery; } catch (e) {};
 try { LeaderboardQueryCallbackProxy.prototype.ReadLeaderboardInteger = LeaderboardQueryCallbackProxy.prototype.CreateProxyObjectForIntQuery; } catch (e) {};
 try { LeaderboardQueryCallbackProxy.ReadLeaderboardInteger = LeaderboardQueryCallbackProxy.CreateProxyObjectForIntQuery; } catch (e) {};
-try { let fnprepatch_525 = OculusFunctionLibrary.prototype.HideLoadingSplashScreen;OculusFunctionLibrary.prototype.HideLoadingSplashScreen = function (bClear = false) { return fnprepatch_525.call(this, bClear) }; } catch (e) {};
-try { let fnprepatch_526 = OculusFunctionLibrary.prototype.GetRawSensorData;OculusFunctionLibrary.prototype.GetRawSensorData = function (AngularAcceleration, LinearAcceleration, AngularVelocity, LinearVelocity, TimeInSeconds, DeviceType = "None") { return fnprepatch_526.call(this, AngularAcceleration, LinearAcceleration, AngularVelocity, LinearVelocity, TimeInSeconds, DeviceType) }; } catch (e) {};
-try { let fnprepatch_527 = OculusFunctionLibrary.prototype.GetPose;OculusFunctionLibrary.prototype.GetPose = function (DeviceRotation, DevicePosition, NeckPosition, bUseOrienationForPlayerCamera = false, bUsePositionForPlayerCamera = false, PositionScale) { return fnprepatch_527.call(this, DeviceRotation, DevicePosition, NeckPosition, bUseOrienationForPlayerCamera, bUsePositionForPlayerCamera, PositionScale) }; } catch (e) {};
-try { let fnprepatch_528 = OculusFunctionLibrary.prototype.AddLoadingSplashScreen;OculusFunctionLibrary.prototype.AddLoadingSplashScreen = function (Texture, TranslationInMeters, Rotation, SizeInMeters = {"X":1,"Y":1}, DeltaRotation, bClearBeforeAdd = false) { return fnprepatch_528.call(this, Texture, TranslationInMeters, Rotation, SizeInMeters, DeltaRotation, bClearBeforeAdd) }; } catch (e) {};
+try { let fnprepatch_584 = OculusFunctionLibrary.prototype.SetColorScaleAndOffset;OculusFunctionLibrary.prototype.SetColorScaleAndOffset = function (ColorScale, ColorOffset, bApplyToAllLayers = false) { return fnprepatch_584.call(this, ColorScale, ColorOffset, bApplyToAllLayers) }; } catch (e) {};
+try { let fnprepatch_585 = OculusFunctionLibrary.prototype.HideLoadingSplashScreen;OculusFunctionLibrary.prototype.HideLoadingSplashScreen = function (bClear = false) { return fnprepatch_585.call(this, bClear) }; } catch (e) {};
+try { let fnprepatch_586 = OculusFunctionLibrary.prototype.GetRawSensorData;OculusFunctionLibrary.prototype.GetRawSensorData = function (AngularAcceleration, LinearAcceleration, AngularVelocity, LinearVelocity, TimeInSeconds, DeviceType = "None") { return fnprepatch_586.call(this, AngularAcceleration, LinearAcceleration, AngularVelocity, LinearVelocity, TimeInSeconds, DeviceType) }; } catch (e) {};
+try { let fnprepatch_587 = OculusFunctionLibrary.prototype.GetPose;OculusFunctionLibrary.prototype.GetPose = function (DeviceRotation, DevicePosition, NeckPosition, bUseOrienationForPlayerCamera = false, bUsePositionForPlayerCamera = false, PositionScale) { return fnprepatch_587.call(this, DeviceRotation, DevicePosition, NeckPosition, bUseOrienationForPlayerCamera, bUsePositionForPlayerCamera, PositionScale) }; } catch (e) {};
+try { let fnprepatch_588 = OculusFunctionLibrary.prototype.GetGuardianPoints;OculusFunctionLibrary.prototype.GetGuardianPoints = function (BoundaryType, UsePawnSpace = false) { return fnprepatch_588.call(this, BoundaryType, UsePawnSpace) }; } catch (e) {};
+try { let fnprepatch_589 = OculusFunctionLibrary.prototype.AddLoadingSplashScreen;OculusFunctionLibrary.prototype.AddLoadingSplashScreen = function (Texture, TranslationInMeters, Rotation, SizeInMeters = {"X":1,"Y":1}, DeltaRotation, bClearBeforeAdd = false) { return fnprepatch_589.call(this, Texture, TranslationInMeters, Rotation, SizeInMeters, DeltaRotation, bClearBeforeAdd) }; } catch (e) {};
+try { let fnprepatch_590 = KismetProceduralMeshLibrary.prototype.CreateGridMeshWelded;KismetProceduralMeshLibrary.prototype.CreateGridMeshWelded = function (NumX, NumY, Triangles, Vertices, UVs, GridSpacing = 16) { return fnprepatch_590.call(this, NumX, NumY, Triangles, Vertices, UVs, GridSpacing) }; } catch (e) {};
+try { let fnprepatch_591 = KismetProceduralMeshLibrary.prototype.CreateGridMeshSplit;KismetProceduralMeshLibrary.prototype.CreateGridMeshSplit = function (NumX, NumY, Triangles, Vertices, UVs, UV1s, GridSpacing = 16) { return fnprepatch_591.call(this, NumX, NumY, Triangles, Vertices, UVs, UV1s, GridSpacing) }; } catch (e) {};
 try { ProceduralMeshComponent.prototype.UpdateMeshSection = ProceduralMeshComponent.prototype.UpdateMeshSection_LinearColor; } catch (e) {};
 try { ProceduralMeshComponent.prototype.UpdateMeshSectionFColor = ProceduralMeshComponent.prototype.UpdateMeshSection; } catch (e) {};
 try { ProceduralMeshComponent.prototype.CreateMeshSection = ProceduralMeshComponent.prototype.CreateMeshSection_LinearColor; } catch (e) {};
 try { ProceduralMeshComponent.prototype.CreateMeshSectionFColor = ProceduralMeshComponent.prototype.CreateMeshSection; } catch (e) {};
-try { let fnprepatch_529 = AssetTools.prototype.RenameAssetsWithDialog;AssetTools.prototype.RenameAssetsWithDialog = function (AssetsAndNames, bAutoCheckout = false) { return fnprepatch_529.call(this, AssetsAndNames, bAutoCheckout) }; } catch (e) {};
-try { let fnprepatch_530 = AssetTools.prototype.CreateAssetWithDialog;AssetTools.prototype.CreateAssetWithDialog = function (AssetName, PackagePath, AssetClass, Factory, CallingContext = "None") { return fnprepatch_530.call(this, AssetName, PackagePath, AssetClass, Factory, CallingContext) }; } catch (e) {};
-try { let fnprepatch_531 = AssetTools.prototype.CreateAsset;AssetTools.prototype.CreateAsset = function (AssetName, PackagePath, AssetClass, Factory, CallingContext = "None") { return fnprepatch_531.call(this, AssetName, PackagePath, AssetClass, Factory, CallingContext) }; } catch (e) {};
-try { let fnprepatch_532 = AutomationBlueprintFunctionLibrary.prototype.SetScalabilityQualityLevelRelativeToMax;AutomationBlueprintFunctionLibrary.prototype.SetScalabilityQualityLevelRelativeToMax = function (WorldContextObject, Value = 1) { return fnprepatch_532.call(this, WorldContextObject, Value) }; } catch (e) {};
-try { let fnprepatch_533 = AutomationBlueprintFunctionLibrary.prototype.GetDefaultScreenshotOptionsForRendering;AutomationBlueprintFunctionLibrary.prototype.GetDefaultScreenshotOptionsForRendering = function (Tolerance = "Low", Delay = 0.20000000298023224) { return fnprepatch_533.call(this, Tolerance, Delay) }; } catch (e) {};
-try { let fnprepatch_534 = AutomationBlueprintFunctionLibrary.prototype.GetDefaultScreenshotOptionsForGameplay;AutomationBlueprintFunctionLibrary.prototype.GetDefaultScreenshotOptionsForGameplay = function (Tolerance = "Low", Delay = 0.20000000298023224) { return fnprepatch_534.call(this, Tolerance, Delay) }; } catch (e) {};
-try { let fnprepatch_535 = FunctionalTest.prototype.AssertValue_Int;FunctionalTest.prototype.AssertValue_Int = function (Actual, ShouldBe, Expected, What, ContextObject = undefined) { return fnprepatch_535.call(this, Actual, ShouldBe, Expected, What, ContextObject) }; } catch (e) {};
-try { let fnprepatch_536 = FunctionalTest.prototype.AssertValue_Float;FunctionalTest.prototype.AssertValue_Float = function (Actual, ShouldBe, Expected, What, ContextObject = undefined) { return fnprepatch_536.call(this, Actual, ShouldBe, Expected, What, ContextObject) }; } catch (e) {};
-try { let fnprepatch_537 = FunctionalTest.prototype.AssertValue_DateTime;FunctionalTest.prototype.AssertValue_DateTime = function (Actual, ShouldBe, Expected, What, ContextObject = undefined) { return fnprepatch_537.call(this, Actual, ShouldBe, Expected, What, ContextObject) }; } catch (e) {};
-try { let fnprepatch_538 = FunctionalTest.prototype.AssertTrue;FunctionalTest.prototype.AssertTrue = function (Condition, Message, ContextObject = undefined) { return fnprepatch_538.call(this, Condition, Message, ContextObject) }; } catch (e) {};
-try { let fnprepatch_539 = FunctionalTest.prototype.AssertNotEqual_Vector;FunctionalTest.prototype.AssertNotEqual_Vector = function (Actual, NotExpected, What, ContextObject = undefined) { return fnprepatch_539.call(this, Actual, NotExpected, What, ContextObject) }; } catch (e) {};
-try { let fnprepatch_540 = FunctionalTest.prototype.AssertNotEqual_Transform;FunctionalTest.prototype.AssertNotEqual_Transform = function (Actual, NotExpected, What, ContextObject = undefined) { return fnprepatch_540.call(this, Actual, NotExpected, What, ContextObject) }; } catch (e) {};
-try { let fnprepatch_541 = FunctionalTest.prototype.AssertNotEqual_String;FunctionalTest.prototype.AssertNotEqual_String = function (Actual, NotExpected, What, ContextObject = undefined) { return fnprepatch_541.call(this, Actual, NotExpected, What, ContextObject) }; } catch (e) {};
-try { let fnprepatch_542 = FunctionalTest.prototype.AssertNotEqual_Rotator;FunctionalTest.prototype.AssertNotEqual_Rotator = function (Actual, NotExpected, What, ContextObject = undefined) { return fnprepatch_542.call(this, Actual, NotExpected, What, ContextObject) }; } catch (e) {};
-try { let fnprepatch_543 = FunctionalTest.prototype.AssertIsValid;FunctionalTest.prototype.AssertIsValid = function (Object, Message, ContextObject = undefined) { return fnprepatch_543.call(this, Object, Message, ContextObject) }; } catch (e) {};
-try { let fnprepatch_544 = FunctionalTest.prototype.AssertFalse;FunctionalTest.prototype.AssertFalse = function (Condition, Message, ContextObject = undefined) { return fnprepatch_544.call(this, Condition, Message, ContextObject) }; } catch (e) {};
-try { let fnprepatch_545 = FunctionalTest.prototype.AssertEqual_Vector;FunctionalTest.prototype.AssertEqual_Vector = function (Actual, Expected, What, Tolerance = 0.00009999999747378752, ContextObject = undefined) { return fnprepatch_545.call(this, Actual, Expected, What, Tolerance, ContextObject) }; } catch (e) {};
-try { let fnprepatch_546 = FunctionalTest.prototype.AssertEqual_Transform;FunctionalTest.prototype.AssertEqual_Transform = function (Actual, Expected, What, Tolerance = 0.00009999999747378752, ContextObject = undefined) { return fnprepatch_546.call(this, Actual, Expected, What, Tolerance, ContextObject) }; } catch (e) {};
-try { let fnprepatch_547 = FunctionalTest.prototype.AssertEqual_TraceQueryResults;FunctionalTest.prototype.AssertEqual_TraceQueryResults = function (Actual, Expected, What, ContextObject = undefined) { return fnprepatch_547.call(this, Actual, Expected, What, ContextObject) }; } catch (e) {};
-try { let fnprepatch_548 = FunctionalTest.prototype.AssertEqual_String;FunctionalTest.prototype.AssertEqual_String = function (Actual, Expected, What, ContextObject = undefined) { return fnprepatch_548.call(this, Actual, Expected, What, ContextObject) }; } catch (e) {};
-try { let fnprepatch_549 = FunctionalTest.prototype.AssertEqual_Rotator;FunctionalTest.prototype.AssertEqual_Rotator = function (Actual, Expected, What, Tolerance = 0.00009999999747378752, ContextObject = undefined) { return fnprepatch_549.call(this, Actual, Expected, What, Tolerance, ContextObject) }; } catch (e) {};
-try { let fnprepatch_550 = FunctionalTest.prototype.AssertEqual_Name;FunctionalTest.prototype.AssertEqual_Name = function (Actual, Expected, What, ContextObject = undefined) { return fnprepatch_550.call(this, Actual, Expected, What, ContextObject) }; } catch (e) {};
-try { let fnprepatch_551 = FunctionalTest.prototype.AssertEqual_Int;FunctionalTest.prototype.AssertEqual_Int = function (Actual, Expected, What, ContextObject = undefined) { return fnprepatch_551.call(this, Actual, Expected, What, ContextObject) }; } catch (e) {};
-try { let fnprepatch_552 = FunctionalTest.prototype.AssertEqual_Float;FunctionalTest.prototype.AssertEqual_Float = function (Actual, Expected, What, Tolerance = 0.00009999999747378752, ContextObject = undefined) { return fnprepatch_552.call(this, Actual, Expected, What, Tolerance, ContextObject) }; } catch (e) {};
-try { let fnprepatch_553 = FunctionalTest.prototype.AssertEqual_Bool;FunctionalTest.prototype.AssertEqual_Bool = function (Actual, Expected, What, ContextObject = undefined) { return fnprepatch_553.call(this, Actual, Expected, What, ContextObject) }; } catch (e) {};
+try { let fnprepatch_592 = AssetTools.prototype.RenameAssetsWithDialog;AssetTools.prototype.RenameAssetsWithDialog = function (AssetsAndNames, bAutoCheckout = false) { return fnprepatch_592.call(this, AssetsAndNames, bAutoCheckout) }; } catch (e) {};
+try { let fnprepatch_593 = AssetTools.prototype.CreateAssetWithDialog;AssetTools.prototype.CreateAssetWithDialog = function (AssetName, PackagePath, AssetClass, Factory, CallingContext = "None") { return fnprepatch_593.call(this, AssetName, PackagePath, AssetClass, Factory, CallingContext) }; } catch (e) {};
+try { let fnprepatch_594 = AssetTools.prototype.CreateAsset;AssetTools.prototype.CreateAsset = function (AssetName, PackagePath, AssetClass, Factory, CallingContext = "None") { return fnprepatch_594.call(this, AssetName, PackagePath, AssetClass, Factory, CallingContext) }; } catch (e) {};
+try { let fnprepatch_595 = AutomationBlueprintFunctionLibrary.prototype.TakeHighResScreenshot;AutomationBlueprintFunctionLibrary.prototype.TakeHighResScreenshot = function (ResX, ResY, Filename, Camera = undefined, bMaskEnabled = false, bCaptureHDR = false) { return fnprepatch_595.call(this, ResX, ResY, Filename, Camera, bMaskEnabled, bCaptureHDR) }; } catch (e) {};
+try { let fnprepatch_596 = AutomationBlueprintFunctionLibrary.prototype.SetScalabilityQualityLevelRelativeToMax;AutomationBlueprintFunctionLibrary.prototype.SetScalabilityQualityLevelRelativeToMax = function (WorldContextObject, Value = 1) { return fnprepatch_596.call(this, WorldContextObject, Value) }; } catch (e) {};
+try { let fnprepatch_597 = AutomationBlueprintFunctionLibrary.prototype.GetDefaultScreenshotOptionsForRendering;AutomationBlueprintFunctionLibrary.prototype.GetDefaultScreenshotOptionsForRendering = function (Tolerance = "Low", Delay = 0.20000000298023224) { return fnprepatch_597.call(this, Tolerance, Delay) }; } catch (e) {};
+try { let fnprepatch_598 = AutomationBlueprintFunctionLibrary.prototype.GetDefaultScreenshotOptionsForGameplay;AutomationBlueprintFunctionLibrary.prototype.GetDefaultScreenshotOptionsForGameplay = function (Tolerance = "Low", Delay = 0.20000000298023224) { return fnprepatch_598.call(this, Tolerance, Delay) }; } catch (e) {};
+try { let fnprepatch_599 = FunctionalTest.prototype.AssertValue_Int;FunctionalTest.prototype.AssertValue_Int = function (Actual, ShouldBe, Expected, What, ContextObject = undefined) { return fnprepatch_599.call(this, Actual, ShouldBe, Expected, What, ContextObject) }; } catch (e) {};
+try { let fnprepatch_600 = FunctionalTest.prototype.AssertValue_Float;FunctionalTest.prototype.AssertValue_Float = function (Actual, ShouldBe, Expected, What, ContextObject = undefined) { return fnprepatch_600.call(this, Actual, ShouldBe, Expected, What, ContextObject) }; } catch (e) {};
+try { let fnprepatch_601 = FunctionalTest.prototype.AssertValue_DateTime;FunctionalTest.prototype.AssertValue_DateTime = function (Actual, ShouldBe, Expected, What, ContextObject = undefined) { return fnprepatch_601.call(this, Actual, ShouldBe, Expected, What, ContextObject) }; } catch (e) {};
+try { let fnprepatch_602 = FunctionalTest.prototype.AssertTrue;FunctionalTest.prototype.AssertTrue = function (Condition, Message, ContextObject = undefined) { return fnprepatch_602.call(this, Condition, Message, ContextObject) }; } catch (e) {};
+try { let fnprepatch_603 = FunctionalTest.prototype.AssertNotEqual_Vector;FunctionalTest.prototype.AssertNotEqual_Vector = function (Actual, NotExpected, What, ContextObject = undefined) { return fnprepatch_603.call(this, Actual, NotExpected, What, ContextObject) }; } catch (e) {};
+try { let fnprepatch_604 = FunctionalTest.prototype.AssertNotEqual_Transform;FunctionalTest.prototype.AssertNotEqual_Transform = function (Actual, NotExpected, What, ContextObject = undefined) { return fnprepatch_604.call(this, Actual, NotExpected, What, ContextObject) }; } catch (e) {};
+try { let fnprepatch_605 = FunctionalTest.prototype.AssertNotEqual_String;FunctionalTest.prototype.AssertNotEqual_String = function (Actual, NotExpected, What, ContextObject = undefined) { return fnprepatch_605.call(this, Actual, NotExpected, What, ContextObject) }; } catch (e) {};
+try { let fnprepatch_606 = FunctionalTest.prototype.AssertNotEqual_Rotator;FunctionalTest.prototype.AssertNotEqual_Rotator = function (Actual, NotExpected, What, ContextObject = undefined) { return fnprepatch_606.call(this, Actual, NotExpected, What, ContextObject) }; } catch (e) {};
+try { let fnprepatch_607 = FunctionalTest.prototype.AssertIsValid;FunctionalTest.prototype.AssertIsValid = function (Object, Message, ContextObject = undefined) { return fnprepatch_607.call(this, Object, Message, ContextObject) }; } catch (e) {};
+try { let fnprepatch_608 = FunctionalTest.prototype.AssertFalse;FunctionalTest.prototype.AssertFalse = function (Condition, Message, ContextObject = undefined) { return fnprepatch_608.call(this, Condition, Message, ContextObject) }; } catch (e) {};
+try { let fnprepatch_609 = FunctionalTest.prototype.AssertEqual_Vector;FunctionalTest.prototype.AssertEqual_Vector = function (Actual, Expected, What, Tolerance = 0.00009999999747378752, ContextObject = undefined) { return fnprepatch_609.call(this, Actual, Expected, What, Tolerance, ContextObject) }; } catch (e) {};
+try { let fnprepatch_610 = FunctionalTest.prototype.AssertEqual_Transform;FunctionalTest.prototype.AssertEqual_Transform = function (Actual, Expected, What, Tolerance = 0.00009999999747378752, ContextObject = undefined) { return fnprepatch_610.call(this, Actual, Expected, What, Tolerance, ContextObject) }; } catch (e) {};
+try { let fnprepatch_611 = FunctionalTest.prototype.AssertEqual_TraceQueryResults;FunctionalTest.prototype.AssertEqual_TraceQueryResults = function (Actual, Expected, What, ContextObject = undefined) { return fnprepatch_611.call(this, Actual, Expected, What, ContextObject) }; } catch (e) {};
+try { let fnprepatch_612 = FunctionalTest.prototype.AssertEqual_String;FunctionalTest.prototype.AssertEqual_String = function (Actual, Expected, What, ContextObject = undefined) { return fnprepatch_612.call(this, Actual, Expected, What, ContextObject) }; } catch (e) {};
+try { let fnprepatch_613 = FunctionalTest.prototype.AssertEqual_Rotator;FunctionalTest.prototype.AssertEqual_Rotator = function (Actual, Expected, What, Tolerance = 0.00009999999747378752, ContextObject = undefined) { return fnprepatch_613.call(this, Actual, Expected, What, Tolerance, ContextObject) }; } catch (e) {};
+try { let fnprepatch_614 = FunctionalTest.prototype.AssertEqual_Name;FunctionalTest.prototype.AssertEqual_Name = function (Actual, Expected, What, ContextObject = undefined) { return fnprepatch_614.call(this, Actual, Expected, What, ContextObject) }; } catch (e) {};
+try { let fnprepatch_615 = FunctionalTest.prototype.AssertEqual_Int;FunctionalTest.prototype.AssertEqual_Int = function (Actual, Expected, What, ContextObject = undefined) { return fnprepatch_615.call(this, Actual, Expected, What, ContextObject) }; } catch (e) {};
+try { let fnprepatch_616 = FunctionalTest.prototype.AssertEqual_Float;FunctionalTest.prototype.AssertEqual_Float = function (Actual, Expected, What, Tolerance = 0.00009999999747378752, ContextObject = undefined) { return fnprepatch_616.call(this, Actual, Expected, What, Tolerance, ContextObject) }; } catch (e) {};
+try { let fnprepatch_617 = FunctionalTest.prototype.AssertEqual_Bool;FunctionalTest.prototype.AssertEqual_Bool = function (Actual, Expected, What, ContextObject = undefined) { return fnprepatch_617.call(this, Actual, Expected, What, ContextObject) }; } catch (e) {};
 try { FunctionalTest.prototype.StartTest = FunctionalTest.prototype.ReceiveStartTest; } catch (e) {};
 try { FunctionalTest.prototype.PrepareTest = FunctionalTest.prototype.ReceivePrepareTest; } catch (e) {};
 try { FunctionalTest.prototype.AssertValue = FunctionalTest.prototype.AssertValue_Int; } catch (e) {};
@@ -1625,40 +1997,49 @@ try { FunctionalTest.prototype.AssertEqual = FunctionalTest.prototype.AssertEqua
 try { FunctionalTest.prototype.AssertEqual = FunctionalTest.prototype.AssertEqual_Int; } catch (e) {};
 try { FunctionalTest.prototype.AssertEqual = FunctionalTest.prototype.AssertEqual_Float; } catch (e) {};
 try { FunctionalTest.prototype.AssertEqual = FunctionalTest.prototype.AssertEqual_Bool; } catch (e) {};
-try { let fnprepatch_554 = FunctionalTestingManager.prototype.RunAllFunctionalTests;FunctionalTestingManager.prototype.RunAllFunctionalTests = function (WorldContextObject, bNewLog = true, bRunLooped = false, FailedTestsReproString) { return fnprepatch_554.call(this, WorldContextObject, bNewLog, bRunLooped, FailedTestsReproString) }; } catch (e) {};
-try { let fnprepatch_555 = FunctionalTestUtilityLibrary.prototype.TraceChannelTestUtil;FunctionalTestUtilityLibrary.prototype.TraceChannelTestUtil = function (WorldContextObject, BatchOptions, Start, End, SphereCapsuleRadius, CapsuleHalfHeight, BoxHalfSize, Orientation, TraceChannel, ObjectTypes, ProfileName, bTraceComplex, ActorsToIgnore, bIgnoreSelf, DrawDebugType, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_555.call(this, WorldContextObject, BatchOptions, Start, End, SphereCapsuleRadius, CapsuleHalfHeight, BoxHalfSize, Orientation, TraceChannel, ObjectTypes, ProfileName, bTraceComplex, ActorsToIgnore, bIgnoreSelf, DrawDebugType, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
-try { let fnprepatch_556 = MediaBlueprintFunctionLibrary.prototype.EnumerateWebcamCaptureDevices;MediaBlueprintFunctionLibrary.prototype.EnumerateWebcamCaptureDevices = function (OutDevices, Filter = -1) { return fnprepatch_556.call(this, OutDevices, Filter) }; } catch (e) {};
-try { let fnprepatch_557 = MediaBlueprintFunctionLibrary.prototype.EnumerateVideoCaptureDevices;MediaBlueprintFunctionLibrary.prototype.EnumerateVideoCaptureDevices = function (OutDevices, Filter = -1) { return fnprepatch_557.call(this, OutDevices, Filter) }; } catch (e) {};
-try { let fnprepatch_558 = MediaBlueprintFunctionLibrary.prototype.EnumerateAudioCaptureDevices;MediaBlueprintFunctionLibrary.prototype.EnumerateAudioCaptureDevices = function (OutDevices, Filter = -1) { return fnprepatch_558.call(this, OutDevices, Filter) }; } catch (e) {};
+try { let fnprepatch_618 = FunctionalTestingManager.prototype.RunAllFunctionalTests;FunctionalTestingManager.prototype.RunAllFunctionalTests = function (WorldContextObject, bNewLog = true, bRunLooped = false, FailedTestsReproString) { return fnprepatch_618.call(this, WorldContextObject, bNewLog, bRunLooped, FailedTestsReproString) }; } catch (e) {};
+try { let fnprepatch_619 = FunctionalTestUtilityLibrary.prototype.TraceChannelTestUtil;FunctionalTestUtilityLibrary.prototype.TraceChannelTestUtil = function (WorldContextObject, BatchOptions, Start, End, SphereCapsuleRadius, CapsuleHalfHeight, BoxHalfSize, Orientation, TraceChannel, ObjectTypes, ProfileName, bTraceComplex, ActorsToIgnore, bIgnoreSelf, DrawDebugType, TraceColor = {"R":1,"G":0,"B":0,"A":1}, TraceHitColor = {"R":0,"G":1,"B":0,"A":1}, DrawTime = 5) { return fnprepatch_619.call(this, WorldContextObject, BatchOptions, Start, End, SphereCapsuleRadius, CapsuleHalfHeight, BoxHalfSize, Orientation, TraceChannel, ObjectTypes, ProfileName, bTraceComplex, ActorsToIgnore, bIgnoreSelf, DrawDebugType, TraceColor, TraceHitColor, DrawTime) }; } catch (e) {};
+try { let fnprepatch_620 = MediaBlueprintFunctionLibrary.prototype.EnumerateWebcamCaptureDevices;MediaBlueprintFunctionLibrary.prototype.EnumerateWebcamCaptureDevices = function (OutDevices, Filter = -1) { return fnprepatch_620.call(this, OutDevices, Filter) }; } catch (e) {};
+try { let fnprepatch_621 = MediaBlueprintFunctionLibrary.prototype.EnumerateVideoCaptureDevices;MediaBlueprintFunctionLibrary.prototype.EnumerateVideoCaptureDevices = function (OutDevices, Filter = -1) { return fnprepatch_621.call(this, OutDevices, Filter) }; } catch (e) {};
+try { let fnprepatch_622 = MediaBlueprintFunctionLibrary.prototype.EnumerateAudioCaptureDevices;MediaBlueprintFunctionLibrary.prototype.EnumerateAudioCaptureDevices = function (OutDevices, Filter = -1) { return fnprepatch_622.call(this, OutDevices, Filter) }; } catch (e) {};
+try { let fnprepatch_623 = MediaSoundComponent.prototype.SetSpectralAnalysisSettings;MediaSoundComponent.prototype.SetSpectralAnalysisSettings = function (InFrequenciesToAnalyze, InFFTSize = "Min_64") { return fnprepatch_623.call(this, InFrequenciesToAnalyze, InFFTSize) }; } catch (e) {};
 try { MediaSoundComponent.prototype.GetAttenuationSettingsToApply = MediaSoundComponent.prototype.BP_GetAttenuationSettingsToApply; } catch (e) {};
-try { let fnprepatch_559 = PaperFlipbook.prototype.GetSpriteAtTime;PaperFlipbook.prototype.GetSpriteAtTime = function (Time, bClampToEnds = false) { return fnprepatch_559.call(this, Time, bClampToEnds) }; } catch (e) {};
-try { let fnprepatch_560 = PaperFlipbook.prototype.GetKeyFrameIndexAtTime;PaperFlipbook.prototype.GetKeyFrameIndexAtTime = function (Time, bClampToEnds = false) { return fnprepatch_560.call(this, Time, bClampToEnds) }; } catch (e) {};
-try { let fnprepatch_561 = PaperGroupedSpriteComponent.prototype.UpdateInstanceTransform;PaperGroupedSpriteComponent.prototype.UpdateInstanceTransform = function (InstanceIndex, NewInstanceTransform, bWorldSpace = false, bMarkRenderStateDirty = true, bTeleport = false) { return fnprepatch_561.call(this, InstanceIndex, NewInstanceTransform, bWorldSpace, bMarkRenderStateDirty, bTeleport) }; } catch (e) {};
-try { let fnprepatch_562 = PaperGroupedSpriteComponent.prototype.UpdateInstanceColor;PaperGroupedSpriteComponent.prototype.UpdateInstanceColor = function (InstanceIndex, NewInstanceColor, bMarkRenderStateDirty = true) { return fnprepatch_562.call(this, InstanceIndex, NewInstanceColor, bMarkRenderStateDirty) }; } catch (e) {};
-try { let fnprepatch_563 = PaperGroupedSpriteComponent.prototype.GetInstanceTransform;PaperGroupedSpriteComponent.prototype.GetInstanceTransform = function (InstanceIndex, OutInstanceTransform, bWorldSpace = false) { return fnprepatch_563.call(this, InstanceIndex, OutInstanceTransform, bWorldSpace) }; } catch (e) {};
-try { let fnprepatch_564 = PaperGroupedSpriteComponent.prototype.AddInstance;PaperGroupedSpriteComponent.prototype.AddInstance = function (Transform, Sprite, bWorldSpace = false, Color = {"R":1,"G":1,"B":1,"A":1}) { return fnprepatch_564.call(this, Transform, Sprite, bWorldSpace, Color) }; } catch (e) {};
-try { let fnprepatch_565 = PaperTileMapComponent.prototype.SetLayerColor;PaperTileMapComponent.prototype.SetLayerColor = function (NewColor, Layer = 0) { return fnprepatch_565.call(this, NewColor, Layer) }; } catch (e) {};
-try { let fnprepatch_566 = PaperTileMapComponent.prototype.SetLayerCollision;PaperTileMapComponent.prototype.SetLayerCollision = function (Layer = 0, bHasCollision = true, bOverrideThickness = true, CustomThickness = 50, bOverrideOffset = false, CustomOffset = 0, bRebuildCollision = true) { return fnprepatch_566.call(this, Layer, bHasCollision, bOverrideThickness, CustomThickness, bOverrideOffset, CustomOffset, bRebuildCollision) }; } catch (e) {};
-try { let fnprepatch_567 = PaperTileMapComponent.prototype.SetDefaultCollisionThickness;PaperTileMapComponent.prototype.SetDefaultCollisionThickness = function (Thickness, bRebuildCollision = true) { return fnprepatch_567.call(this, Thickness, bRebuildCollision) }; } catch (e) {};
-try { let fnprepatch_568 = PaperTileMapComponent.prototype.GetTilePolygon;PaperTileMapComponent.prototype.GetTilePolygon = function (TileX, TileY, Points, LayerIndex = 0, bWorldSpace = false) { return fnprepatch_568.call(this, TileX, TileY, Points, LayerIndex, bWorldSpace) }; } catch (e) {};
-try { let fnprepatch_569 = PaperTileMapComponent.prototype.GetTileCornerPosition;PaperTileMapComponent.prototype.GetTileCornerPosition = function (TileX, TileY, LayerIndex = 0, bWorldSpace = false) { return fnprepatch_569.call(this, TileX, TileY, LayerIndex, bWorldSpace) }; } catch (e) {};
-try { let fnprepatch_570 = PaperTileMapComponent.prototype.GetTileCenterPosition;PaperTileMapComponent.prototype.GetTileCenterPosition = function (TileX, TileY, LayerIndex = 0, bWorldSpace = false) { return fnprepatch_570.call(this, TileX, TileY, LayerIndex, bWorldSpace) }; } catch (e) {};
-try { let fnprepatch_571 = PaperTileMapComponent.prototype.GetLayerColor;PaperTileMapComponent.prototype.GetLayerColor = function (Layer = 0) { return fnprepatch_571.call(this, Layer) }; } catch (e) {};
-try { let fnprepatch_572 = PaperTileMapComponent.prototype.CreateNewTileMap;PaperTileMapComponent.prototype.CreateNewTileMap = function (MapWidth = 4, MapHeight = 4, TileWidth = 32, TileHeight = 32, PixelsPerUnrealUnit = 1, bCreateLayer = true) { return fnprepatch_572.call(this, MapWidth, MapHeight, TileWidth, TileHeight, PixelsPerUnrealUnit, bCreateLayer) }; } catch (e) {};
-try { let fnprepatch_573 = JavascriptComponent.prototype.ResolveAsset;JavascriptComponent.prototype.ResolveAsset = function (Name, bTryLoad = true) { return fnprepatch_573.call(this, Name, bTryLoad) }; } catch (e) {};
-try { let fnprepatch_574 = JavascriptContext.prototype.SetAsDebugContext;JavascriptContext.prototype.SetAsDebugContext = function (InPort = 5858) { return fnprepatch_574.call(this, InPort) }; } catch (e) {};
-try { let fnprepatch_575 = JavascriptContext.prototype.RunScript;JavascriptContext.prototype.RunScript = function (Script, bOutput = true) { return fnprepatch_575.call(this, Script, bOutput) }; } catch (e) {};
-try { let fnprepatch_576 = JavascriptContext.prototype.CreateInspector;JavascriptContext.prototype.CreateInspector = function (Port = 9229) { return fnprepatch_576.call(this, Port) }; } catch (e) {};
-try { let fnprepatch_577 = JavascriptLibrary.prototype.DeleteFile;JavascriptLibrary.prototype.DeleteFile = function (Filename, ReadOnly = false) { return fnprepatch_577.call(this, Filename, ReadOnly) }; } catch (e) {};
-try { let fnprepatch_578 = JavascriptLibrary.prototype.CreateSocket;JavascriptLibrary.prototype.CreateSocket = function (SocketType, Description, bForceUDP = false) { return fnprepatch_578.call(this, SocketType, Description, bForceUDP) }; } catch (e) {};
-try { let fnprepatch_579 = JavascriptProcess.prototype.Terminate;JavascriptProcess.prototype.Terminate = function (KillTree = false) { return fnprepatch_579.call(this, KillTree) }; } catch (e) {};
-try { let fnprepatch_580 = JavascriptUMGLibrary.prototype.AddWindow;JavascriptUMGLibrary.prototype.AddWindow = function (NewWindow, bShowImmediately = true) { return fnprepatch_580.call(this, NewWindow, bShowImmediately) }; } catch (e) {};
-try { let fnprepatch_581 = EditableMesh.prototype.EndModification;EditableMesh.prototype.EndModification = function (bFromUndo = false) { return fnprepatch_581.call(this, bFromUndo) }; } catch (e) {};
-try { let fnprepatch_582 = LevelVariantSetsActor.prototype.GetLevelVariantSets;LevelVariantSetsActor.prototype.GetLevelVariantSets = function (bLoad = false) { return fnprepatch_582.call(this, bLoad) }; } catch (e) {};
-try { let fnprepatch_583 = AppleImageUtilsBaseAsyncTaskBlueprintProxy.prototype.CreateProxyObjectForConvertToTIFF;AppleImageUtilsBaseAsyncTaskBlueprintProxy.prototype.CreateProxyObjectForConvertToTIFF = function (SourceImage, bWantColor = true, bUseGpu = true, Scale = 1, Rotate = "None") { return fnprepatch_583.call(this, SourceImage, bWantColor, bUseGpu, Scale, Rotate) }; } catch (e) {};
-try { let fnprepatch_584 = AppleImageUtilsBaseAsyncTaskBlueprintProxy.prototype.CreateProxyObjectForConvertToPNG;AppleImageUtilsBaseAsyncTaskBlueprintProxy.prototype.CreateProxyObjectForConvertToPNG = function (SourceImage, bWantColor = true, bUseGpu = true, Scale = 1, Rotate = "None") { return fnprepatch_584.call(this, SourceImage, bWantColor, bUseGpu, Scale, Rotate) }; } catch (e) {};
-try { let fnprepatch_585 = AppleImageUtilsBaseAsyncTaskBlueprintProxy.prototype.CreateProxyObjectForConvertToJPEG;AppleImageUtilsBaseAsyncTaskBlueprintProxy.prototype.CreateProxyObjectForConvertToJPEG = function (SourceImage, Quality = 85, bWantColor = true, bUseGpu = true, Scale = 1, Rotate = "None") { return fnprepatch_585.call(this, SourceImage, Quality, bWantColor, bUseGpu, Scale, Rotate) }; } catch (e) {};
-try { let fnprepatch_586 = AppleImageUtilsBaseAsyncTaskBlueprintProxy.prototype.CreateProxyObjectForConvertToHEIF;AppleImageUtilsBaseAsyncTaskBlueprintProxy.prototype.CreateProxyObjectForConvertToHEIF = function (SourceImage, Quality = 85, bWantColor = true, bUseGpu = true, Scale = 1, Rotate = "None") { return fnprepatch_586.call(this, SourceImage, Quality, bWantColor, bUseGpu, Scale, Rotate) }; } catch (e) {};
+try { let fnprepatch_624 = PaperFlipbook.prototype.GetSpriteAtTime;PaperFlipbook.prototype.GetSpriteAtTime = function (Time, bClampToEnds = false) { return fnprepatch_624.call(this, Time, bClampToEnds) }; } catch (e) {};
+try { let fnprepatch_625 = PaperFlipbook.prototype.GetKeyFrameIndexAtTime;PaperFlipbook.prototype.GetKeyFrameIndexAtTime = function (Time, bClampToEnds = false) { return fnprepatch_625.call(this, Time, bClampToEnds) }; } catch (e) {};
+try { let fnprepatch_626 = PaperGroupedSpriteComponent.prototype.UpdateInstanceTransform;PaperGroupedSpriteComponent.prototype.UpdateInstanceTransform = function (InstanceIndex, NewInstanceTransform, bWorldSpace = false, bMarkRenderStateDirty = true, bTeleport = false) { return fnprepatch_626.call(this, InstanceIndex, NewInstanceTransform, bWorldSpace, bMarkRenderStateDirty, bTeleport) }; } catch (e) {};
+try { let fnprepatch_627 = PaperGroupedSpriteComponent.prototype.UpdateInstanceColor;PaperGroupedSpriteComponent.prototype.UpdateInstanceColor = function (InstanceIndex, NewInstanceColor, bMarkRenderStateDirty = true) { return fnprepatch_627.call(this, InstanceIndex, NewInstanceColor, bMarkRenderStateDirty) }; } catch (e) {};
+try { let fnprepatch_628 = PaperGroupedSpriteComponent.prototype.GetInstanceTransform;PaperGroupedSpriteComponent.prototype.GetInstanceTransform = function (InstanceIndex, OutInstanceTransform, bWorldSpace = false) { return fnprepatch_628.call(this, InstanceIndex, OutInstanceTransform, bWorldSpace) }; } catch (e) {};
+try { let fnprepatch_629 = PaperGroupedSpriteComponent.prototype.AddInstance;PaperGroupedSpriteComponent.prototype.AddInstance = function (Transform, Sprite, bWorldSpace = false, Color = {"R":1,"G":1,"B":1,"A":1}) { return fnprepatch_629.call(this, Transform, Sprite, bWorldSpace, Color) }; } catch (e) {};
+try { let fnprepatch_630 = PaperTileMapComponent.prototype.SetLayerColor;PaperTileMapComponent.prototype.SetLayerColor = function (NewColor, Layer = 0) { return fnprepatch_630.call(this, NewColor, Layer) }; } catch (e) {};
+try { let fnprepatch_631 = PaperTileMapComponent.prototype.SetLayerCollision;PaperTileMapComponent.prototype.SetLayerCollision = function (Layer = 0, bHasCollision = true, bOverrideThickness = true, CustomThickness = 50, bOverrideOffset = false, CustomOffset = 0, bRebuildCollision = true) { return fnprepatch_631.call(this, Layer, bHasCollision, bOverrideThickness, CustomThickness, bOverrideOffset, CustomOffset, bRebuildCollision) }; } catch (e) {};
+try { let fnprepatch_632 = PaperTileMapComponent.prototype.SetDefaultCollisionThickness;PaperTileMapComponent.prototype.SetDefaultCollisionThickness = function (Thickness, bRebuildCollision = true) { return fnprepatch_632.call(this, Thickness, bRebuildCollision) }; } catch (e) {};
+try { let fnprepatch_633 = PaperTileMapComponent.prototype.GetTilePolygon;PaperTileMapComponent.prototype.GetTilePolygon = function (TileX, TileY, Points, LayerIndex = 0, bWorldSpace = false) { return fnprepatch_633.call(this, TileX, TileY, Points, LayerIndex, bWorldSpace) }; } catch (e) {};
+try { let fnprepatch_634 = PaperTileMapComponent.prototype.GetTileCornerPosition;PaperTileMapComponent.prototype.GetTileCornerPosition = function (TileX, TileY, LayerIndex = 0, bWorldSpace = false) { return fnprepatch_634.call(this, TileX, TileY, LayerIndex, bWorldSpace) }; } catch (e) {};
+try { let fnprepatch_635 = PaperTileMapComponent.prototype.GetTileCenterPosition;PaperTileMapComponent.prototype.GetTileCenterPosition = function (TileX, TileY, LayerIndex = 0, bWorldSpace = false) { return fnprepatch_635.call(this, TileX, TileY, LayerIndex, bWorldSpace) }; } catch (e) {};
+try { let fnprepatch_636 = PaperTileMapComponent.prototype.GetLayerColor;PaperTileMapComponent.prototype.GetLayerColor = function (Layer = 0) { return fnprepatch_636.call(this, Layer) }; } catch (e) {};
+try { let fnprepatch_637 = PaperTileMapComponent.prototype.CreateNewTileMap;PaperTileMapComponent.prototype.CreateNewTileMap = function (MapWidth = 4, MapHeight = 4, TileWidth = 32, TileHeight = 32, PixelsPerUnrealUnit = 1, bCreateLayer = true) { return fnprepatch_637.call(this, MapWidth, MapHeight, TileWidth, TileHeight, PixelsPerUnrealUnit, bCreateLayer) }; } catch (e) {};
+try { AnimationSharingManager.prototype.RegisterActor = AnimationSharingManager.prototype.RegisterActorWithSkeletonBP; } catch (e) {};
+try { let fnprepatch_638 = EditorValidatorSubsystem.prototype.ValidateAssets;EditorValidatorSubsystem.prototype.ValidateAssets = function (AssetDataList, bSkipExcludedDirectories = true, bShowIfNoFailures = true) { return fnprepatch_638.call(this, AssetDataList, bSkipExcludedDirectories, bShowIfNoFailures) }; } catch (e) {};
+try { let fnprepatch_639 = MagicLeapHandTrackingFunctionLibrary.prototype.SetConfiguration;MagicLeapHandTrackingFunctionLibrary.prototype.SetConfiguration = function (StaticGesturesToActivate, KeypointsFilterLevel = "NoFilter", GestureFilterLevel = "NoFilter", HandSwitchingFilterLevel = "NoFilter", bTrackingEnabled = true) { return fnprepatch_639.call(this, StaticGesturesToActivate, KeypointsFilterLevel, GestureFilterLevel, HandSwitchingFilterLevel, bTrackingEnabled) }; } catch (e) {};
+try { let fnprepatch_640 = JavascriptComponent.prototype.ResolveAsset;JavascriptComponent.prototype.ResolveAsset = function (Name, bTryLoad = true) { return fnprepatch_640.call(this, Name, bTryLoad) }; } catch (e) {};
+try { let fnprepatch_641 = JavascriptContext.prototype.RunScript;JavascriptContext.prototype.RunScript = function (Script, bOutput = true) { return fnprepatch_641.call(this, Script, bOutput) }; } catch (e) {};
+try { let fnprepatch_642 = JavascriptContext.prototype.CreateInspector;JavascriptContext.prototype.CreateInspector = function (Port = 9229) { return fnprepatch_642.call(this, Port) }; } catch (e) {};
+try { let fnprepatch_643 = JavascriptLibrary.prototype.DeleteFile;JavascriptLibrary.prototype.DeleteFile = function (Filename, ReadOnly = false) { return fnprepatch_643.call(this, Filename, ReadOnly) }; } catch (e) {};
+try { let fnprepatch_644 = JavascriptLibrary.prototype.CreateSocket;JavascriptLibrary.prototype.CreateSocket = function (SocketType, Description, bForceUDP = false) { return fnprepatch_644.call(this, SocketType, Description, bForceUDP) }; } catch (e) {};
+try { let fnprepatch_645 = JavascriptProcess.prototype.Terminate;JavascriptProcess.prototype.Terminate = function (KillTree = false) { return fnprepatch_645.call(this, KillTree) }; } catch (e) {};
+try { let fnprepatch_646 = JavascriptUMGLibrary.prototype.AddWindow;JavascriptUMGLibrary.prototype.AddWindow = function (NewWindow, bShowImmediately = true) { return fnprepatch_646.call(this, NewWindow, bShowImmediately) }; } catch (e) {};
+try { let fnprepatch_647 = LevelVariantSetsActor.prototype.GetLevelVariantSets;LevelVariantSetsActor.prototype.GetLevelVariantSets = function (bLoad = false) { return fnprepatch_647.call(this, bLoad) }; } catch (e) {};
+try { let fnprepatch_648 = AutomationUtilsBlueprintLibrary.prototype.TakeGameplayAutomationScreenshot;AutomationUtilsBlueprintLibrary.prototype.TakeGameplayAutomationScreenshot = function (ScreenshotName, MaxGlobalError = 0.019999999552965164, MaxLocalError = 0.11999999731779099, MapNameOverride) { return fnprepatch_648.call(this, ScreenshotName, MaxGlobalError, MaxLocalError, MapNameOverride) }; } catch (e) {};
+try { let fnprepatch_649 = NUTActor.prototype.UnitTravel;NUTActor.prototype.UnitTravel = function (Dest = " ") { return fnprepatch_649.call(this, Dest) }; } catch (e) {};
+try { let fnprepatch_650 = NUTActor.prototype.UnitSeamlessTravel;NUTActor.prototype.UnitSeamlessTravel = function (Dest = " ") { return fnprepatch_650.call(this, Dest) }; } catch (e) {};
+try { AndroidPermissionFunctionLibrary.prototype.CheckAndroidPermission = AndroidPermissionFunctionLibrary.prototype.CheckPermission; } catch (e) {};
+try { AndroidPermissionFunctionLibrary.CheckAndroidPermission = AndroidPermissionFunctionLibrary.CheckPermission; } catch (e) {};
+try { AndroidPermissionFunctionLibrary.prototype.RequestAndroidPermissions = AndroidPermissionFunctionLibrary.prototype.AcquirePermissions; } catch (e) {};
+try { AndroidPermissionFunctionLibrary.RequestAndroidPermissions = AndroidPermissionFunctionLibrary.AcquirePermissions; } catch (e) {};
+try { let fnprepatch_651 = AppleImageUtilsBaseAsyncTaskBlueprintProxy.prototype.CreateProxyObjectForConvertToTIFF;AppleImageUtilsBaseAsyncTaskBlueprintProxy.prototype.CreateProxyObjectForConvertToTIFF = function (SourceImage, bWantColor = true, bUseGpu = true, Scale = 1, Rotate = "None") { return fnprepatch_651.call(this, SourceImage, bWantColor, bUseGpu, Scale, Rotate) }; } catch (e) {};
+try { let fnprepatch_652 = AppleImageUtilsBaseAsyncTaskBlueprintProxy.prototype.CreateProxyObjectForConvertToPNG;AppleImageUtilsBaseAsyncTaskBlueprintProxy.prototype.CreateProxyObjectForConvertToPNG = function (SourceImage, bWantColor = true, bUseGpu = true, Scale = 1, Rotate = "None") { return fnprepatch_652.call(this, SourceImage, bWantColor, bUseGpu, Scale, Rotate) }; } catch (e) {};
+try { let fnprepatch_653 = AppleImageUtilsBaseAsyncTaskBlueprintProxy.prototype.CreateProxyObjectForConvertToJPEG;AppleImageUtilsBaseAsyncTaskBlueprintProxy.prototype.CreateProxyObjectForConvertToJPEG = function (SourceImage, Quality = 85, bWantColor = true, bUseGpu = true, Scale = 1, Rotate = "None") { return fnprepatch_653.call(this, SourceImage, Quality, bWantColor, bUseGpu, Scale, Rotate) }; } catch (e) {};
+try { let fnprepatch_654 = AppleImageUtilsBaseAsyncTaskBlueprintProxy.prototype.CreateProxyObjectForConvertToHEIF;AppleImageUtilsBaseAsyncTaskBlueprintProxy.prototype.CreateProxyObjectForConvertToHEIF = function (SourceImage, Quality = 85, bWantColor = true, bUseGpu = true, Scale = 1, Rotate = "None") { return fnprepatch_654.call(this, SourceImage, Quality, bWantColor, bUseGpu, Scale, Rotate) }; } catch (e) {};
 try { AppleImageUtilsBaseAsyncTaskBlueprintProxy.prototype.ConvertToTIFF = AppleImageUtilsBaseAsyncTaskBlueprintProxy.prototype.CreateProxyObjectForConvertToTIFF; } catch (e) {};
 try { AppleImageUtilsBaseAsyncTaskBlueprintProxy.ConvertToTIFF = AppleImageUtilsBaseAsyncTaskBlueprintProxy.CreateProxyObjectForConvertToTIFF; } catch (e) {};
 try { AppleImageUtilsBaseAsyncTaskBlueprintProxy.prototype.ConvertToPNG = AppleImageUtilsBaseAsyncTaskBlueprintProxy.prototype.CreateProxyObjectForConvertToPNG; } catch (e) {};
@@ -1667,35 +2048,33 @@ try { AppleImageUtilsBaseAsyncTaskBlueprintProxy.prototype.ConvertToJPEG = Apple
 try { AppleImageUtilsBaseAsyncTaskBlueprintProxy.ConvertToJPEG = AppleImageUtilsBaseAsyncTaskBlueprintProxy.CreateProxyObjectForConvertToJPEG; } catch (e) {};
 try { AppleImageUtilsBaseAsyncTaskBlueprintProxy.prototype.ConvertToHEIF = AppleImageUtilsBaseAsyncTaskBlueprintProxy.prototype.CreateProxyObjectForConvertToHEIF; } catch (e) {};
 try { AppleImageUtilsBaseAsyncTaskBlueprintProxy.ConvertToHEIF = AppleImageUtilsBaseAsyncTaskBlueprintProxy.CreateProxyObjectForConvertToHEIF; } catch (e) {};
-try { AppleVisionDetectFacesAsyncTaskBlueprintProxy.prototype.DetectFaces = AppleVisionDetectFacesAsyncTaskBlueprintProxy.prototype.CreateProxyObjectForDetectFaces; } catch (e) {};
-try { AppleVisionDetectFacesAsyncTaskBlueprintProxy.DetectFaces = AppleVisionDetectFacesAsyncTaskBlueprintProxy.CreateProxyObjectForDetectFaces; } catch (e) {};
-try { DropTimecodeToStringConversion.prototype.ToString = DropTimecodeToStringConversion.prototype.Conv_DropTimecodeToString; } catch (e) {};
-try { DropTimecodeToStringConversion.ToString = DropTimecodeToStringConversion.Conv_DropTimecodeToString; } catch (e) {};
-try { let fnprepatch_587 = NUTActor.prototype.UnitTravel;NUTActor.prototype.UnitTravel = function (Dest = " ") { return fnprepatch_587.call(this, Dest) }; } catch (e) {};
-try { let fnprepatch_588 = NUTActor.prototype.UnitSeamlessTravel;NUTActor.prototype.UnitSeamlessTravel = function (Dest = " ") { return fnprepatch_588.call(this, Dest) }; } catch (e) {};
-try { AndroidPermissionFunctionLibrary.prototype.CheckAndroidPermission = AndroidPermissionFunctionLibrary.prototype.CheckPermission; } catch (e) {};
-try { AndroidPermissionFunctionLibrary.CheckAndroidPermission = AndroidPermissionFunctionLibrary.CheckPermission; } catch (e) {};
-try { AndroidPermissionFunctionLibrary.prototype.RequestAndroidPermissions = AndroidPermissionFunctionLibrary.prototype.AcquirePermissions; } catch (e) {};
-try { AndroidPermissionFunctionLibrary.RequestAndroidPermissions = AndroidPermissionFunctionLibrary.AcquirePermissions; } catch (e) {};
-try { let fnprepatch_589 = CableComponent.prototype.SetAttachEndTo;CableComponent.prototype.SetAttachEndTo = function (Actor, ComponentProperty, SocketName = "None") { return fnprepatch_589.call(this, Actor, ComponentProperty, SocketName) }; } catch (e) {};
-try { let fnprepatch_590 = SteamVRControllerLibrary.prototype.SetTouchDPadMapping;SteamVRControllerLibrary.prototype.SetTouchDPadMapping = function (NewMapping = "FaceButtons") { return fnprepatch_590.call(this, NewMapping) }; } catch (e) {};
-try { let fnprepatch_591 = JavascriptGraphEditorLibrary.prototype.NodeCreator;JavascriptGraphEditorLibrary.prototype.NodeCreator = function (Graph, bSelectNewNode = true) { return fnprepatch_591.call(this, Graph, bSelectNewNode) }; } catch (e) {};
-try { let fnprepatch_592 = JavascriptGraphEditorWidget.prototype.JumpToNode;JavascriptGraphEditorWidget.prototype.JumpToNode = function (JumpToMe, bRequestRename = false, bSelectNode = true) { return fnprepatch_592.call(this, JumpToMe, bRequestRename, bSelectNode) }; } catch (e) {};
-try { let fnprepatch_593 = JavascriptGraphEdNode.prototype.GetNumOfPins;JavascriptGraphEdNode.prototype.GetNumOfPins = function (Direction = "EGPD_MAX") { return fnprepatch_593.call(this, Direction) }; } catch (e) {};
-try { let fnprepatch_594 = JavascriptEditorEngineLibrary.prototype.SelectNone;JavascriptEditorEngineLibrary.prototype.SelectNone = function (Engine, bNoteSelectionChange, bDeselectBSPSurfs, WarnAboutManyActors = true) { return fnprepatch_594.call(this, Engine, bNoteSelectionChange, bDeselectBSPSurfs, WarnAboutManyActors) }; } catch (e) {};
-try { let fnprepatch_595 = JavascriptEditorEngineLibrary.prototype.SelectGroup;JavascriptEditorEngineLibrary.prototype.SelectGroup = function (Engine, InGroupActor, bForceSelection = false, bInSelected = true, bNotify = true) { return fnprepatch_595.call(this, Engine, InGroupActor, bForceSelection, bInSelected, bNotify) }; } catch (e) {};
-try { let fnprepatch_596 = JavascriptEditorEngineLibrary.prototype.SelectComponent;JavascriptEditorEngineLibrary.prototype.SelectComponent = function (Engine, Component, bInSelected, bNotify, bSelectEvenIfHidden = false) { return fnprepatch_596.call(this, Engine, Component, bInSelected, bNotify, bSelectEvenIfHidden) }; } catch (e) {};
-try { let fnprepatch_597 = JavascriptEditorEngineLibrary.prototype.SelectActor;JavascriptEditorEngineLibrary.prototype.SelectActor = function (Engine, Actor, bInSelected, bNotify, bSelectEvenIfHidden = false, bForceRefresh = false) { return fnprepatch_597.call(this, Engine, Actor, bInSelected, bNotify, bSelectEvenIfHidden, bForceRefresh) }; } catch (e) {};
-try { let fnprepatch_598 = JavascriptEditorEngineLibrary.prototype.CanSelectActor;JavascriptEditorEngineLibrary.prototype.CanSelectActor = function (Engine, Actor, bInSelected, bSelectEvenIfHidden = false, bWarnIfLevelLocked = false) { return fnprepatch_598.call(this, Engine, Actor, bInSelected, bSelectEvenIfHidden, bWarnIfLevelLocked) }; } catch (e) {};
-try { let fnprepatch_599 = JavascriptEditorEngineLibrary.prototype.bspBrushCSG;JavascriptEditorEngineLibrary.prototype.bspBrushCSG = function (Engine, Actor, Model, PolyFlags, BrushType, CSGOper, bBuildBounds, bMergePolys, bReplaceNULLMaterialRefs, bShowProgressBar = true) { return fnprepatch_599.call(this, Engine, Actor, Model, PolyFlags, BrushType, CSGOper, bBuildBounds, bMergePolys, bReplaceNULLMaterialRefs, bShowProgressBar) }; } catch (e) {};
-try { let fnprepatch_600 = JavascriptEditorLibrary.prototype.SetAlphamapDataFromMemory;JavascriptEditorLibrary.prototype.SetAlphamapDataFromMemory = function (LandscapeInfo, LayerInfo, MinX, MinY, MaxX, MaxY, PaintingRestriction = "None") { return fnprepatch_600.call(this, LandscapeInfo, LayerInfo, MinX, MinY, MaxX, MaxY, PaintingRestriction) }; } catch (e) {};
-try { let fnprepatch_601 = JavascriptEditorLibrary.prototype.RemoveComponentFromBlueprint;JavascriptEditorLibrary.prototype.RemoveComponentFromBlueprint = function (Blueprint, RemoveComponent, bPromoteChildren = false) { return fnprepatch_601.call(this, Blueprint, RemoveComponent, bPromoteChildren) }; } catch (e) {};
-try { let fnprepatch_602 = JavascriptEditorLibrary.prototype.ModifyObject;JavascriptEditorLibrary.prototype.ModifyObject = function (Object, bAlwaysMarkDirty = false) { return fnprepatch_602.call(this, Object, bAlwaysMarkDirty) }; } catch (e) {};
-try { let fnprepatch_603 = JavascriptEditorLibrary.prototype.GetLayerInfoByName;JavascriptEditorLibrary.prototype.GetLayerInfoByName = function (LandscapeInfo, LayerName, Owner = undefined) { return fnprepatch_603.call(this, LandscapeInfo, LayerName, Owner) }; } catch (e) {};
-try { let fnprepatch_604 = JavascriptEditorLibrary.prototype.GetAssetsByType;JavascriptEditorLibrary.prototype.GetAssetsByType = function (Types, bRecursiveClasses = true) { return fnprepatch_604.call(this, Types, bRecursiveClasses) }; } catch (e) {};
-try { let fnprepatch_605 = JavascriptEditorLibrary.prototype.DeselectAll;JavascriptEditorLibrary.prototype.DeselectAll = function (Selection, InClass = null) { return fnprepatch_605.call(this, Selection, InClass) }; } catch (e) {};
-try { let fnprepatch_606 = JavascriptEditorLibrary.prototype.Build;JavascriptEditorLibrary.prototype.Build = function (Builder, InWorld, InBrush = undefined) { return fnprepatch_606.call(this, Builder, InWorld, InBrush) }; } catch (e) {};
-try { let fnprepatch_607 = JavascriptEditorLibrary.prototype.AddComponentsToBlueprint;JavascriptEditorLibrary.prototype.AddComponentsToBlueprint = function (Blueprint, Components, bHarvesting = false, OptionalNewRootComponent = undefined, bKeepMobility = false) { return fnprepatch_607.call(this, Blueprint, Components, bHarvesting, OptionalNewRootComponent, bKeepMobility) }; } catch (e) {};
+try { let fnprepatch_655 = CableComponent.prototype.SetAttachEndToComponent;CableComponent.prototype.SetAttachEndToComponent = function (Component, SocketName = "None") { return fnprepatch_655.call(this, Component, SocketName) }; } catch (e) {};
+try { let fnprepatch_656 = CableComponent.prototype.SetAttachEndTo;CableComponent.prototype.SetAttachEndTo = function (Actor, ComponentProperty, SocketName = "None") { return fnprepatch_656.call(this, Actor, ComponentProperty, SocketName) }; } catch (e) {};
+try { GeometryCollectionComponent.prototype.PhysicsCollision = GeometryCollectionComponent.prototype.ReceivePhysicsCollision; } catch (e) {};
+try { SkeletalMeshSimulationComponent.prototype.PhysicsCollision = SkeletalMeshSimulationComponent.prototype.ReceivePhysicsCollision; } catch (e) {};
+try { StaticMeshSimulationComponent.prototype.PhysicsCollision = StaticMeshSimulationComponent.prototype.ReceivePhysicsCollision; } catch (e) {};
+try { let fnprepatch_657 = EditableMesh.prototype.EndModification;EditableMesh.prototype.EndModification = function (bFromUndo = false) { return fnprepatch_657.call(this, bFromUndo) }; } catch (e) {};
+try { let fnprepatch_658 = SteamVRControllerLibrary.prototype.SetTouchDPadMapping;SteamVRControllerLibrary.prototype.SetTouchDPadMapping = function (NewMapping = "FaceButtons") { return fnprepatch_658.call(this, NewMapping) }; } catch (e) {};
+try { let fnprepatch_659 = JavascriptGraphEditorLibrary.prototype.NodeCreator;JavascriptGraphEditorLibrary.prototype.NodeCreator = function (Graph, bSelectNewNode = true) { return fnprepatch_659.call(this, Graph, bSelectNewNode) }; } catch (e) {};
+try { let fnprepatch_660 = JavascriptGraphEditorWidget.prototype.JumpToNode;JavascriptGraphEditorWidget.prototype.JumpToNode = function (JumpToMe, bRequestRename = false, bSelectNode = true) { return fnprepatch_660.call(this, JumpToMe, bRequestRename, bSelectNode) }; } catch (e) {};
+try { let fnprepatch_661 = JavascriptGraphEdNode.prototype.GetNumOfPins;JavascriptGraphEdNode.prototype.GetNumOfPins = function (Direction = "EGPD_MAX") { return fnprepatch_661.call(this, Direction) }; } catch (e) {};
+try { let fnprepatch_662 = JavascriptEditorEngineLibrary.prototype.SelectNone;JavascriptEditorEngineLibrary.prototype.SelectNone = function (Engine, bNoteSelectionChange, bDeselectBSPSurfs, WarnAboutManyActors = true) { return fnprepatch_662.call(this, Engine, bNoteSelectionChange, bDeselectBSPSurfs, WarnAboutManyActors) }; } catch (e) {};
+try { let fnprepatch_663 = JavascriptEditorEngineLibrary.prototype.SelectGroup;JavascriptEditorEngineLibrary.prototype.SelectGroup = function (Engine, InGroupActor, bForceSelection = false, bInSelected = true, bNotify = true) { return fnprepatch_663.call(this, Engine, InGroupActor, bForceSelection, bInSelected, bNotify) }; } catch (e) {};
+try { let fnprepatch_664 = JavascriptEditorEngineLibrary.prototype.SelectComponent;JavascriptEditorEngineLibrary.prototype.SelectComponent = function (Engine, Component, bInSelected, bNotify, bSelectEvenIfHidden = false) { return fnprepatch_664.call(this, Engine, Component, bInSelected, bNotify, bSelectEvenIfHidden) }; } catch (e) {};
+try { let fnprepatch_665 = JavascriptEditorEngineLibrary.prototype.SelectActor;JavascriptEditorEngineLibrary.prototype.SelectActor = function (Engine, Actor, bInSelected, bNotify, bSelectEvenIfHidden = false, bForceRefresh = false) { return fnprepatch_665.call(this, Engine, Actor, bInSelected, bNotify, bSelectEvenIfHidden, bForceRefresh) }; } catch (e) {};
+try { let fnprepatch_666 = JavascriptEditorEngineLibrary.prototype.CanSelectActor;JavascriptEditorEngineLibrary.prototype.CanSelectActor = function (Engine, Actor, bInSelected, bSelectEvenIfHidden = false, bWarnIfLevelLocked = false) { return fnprepatch_666.call(this, Engine, Actor, bInSelected, bSelectEvenIfHidden, bWarnIfLevelLocked) }; } catch (e) {};
+try { let fnprepatch_667 = JavascriptEditorEngineLibrary.prototype.bspBrushCSG;JavascriptEditorEngineLibrary.prototype.bspBrushCSG = function (Engine, Actor, Model, PolyFlags, BrushType, CSGOper, bBuildBounds, bMergePolys, bReplaceNULLMaterialRefs, bShowProgressBar = true) { return fnprepatch_667.call(this, Engine, Actor, Model, PolyFlags, BrushType, CSGOper, bBuildBounds, bMergePolys, bReplaceNULLMaterialRefs, bShowProgressBar) }; } catch (e) {};
+try { let fnprepatch_668 = JavascriptEditorLibrary.prototype.SetAlphamapDataFromMemory;JavascriptEditorLibrary.prototype.SetAlphamapDataFromMemory = function (LandscapeInfo, LayerInfo, MinX, MinY, MaxX, MaxY, PaintingRestriction = "None") { return fnprepatch_668.call(this, LandscapeInfo, LayerInfo, MinX, MinY, MaxX, MaxY, PaintingRestriction) }; } catch (e) {};
+try { let fnprepatch_669 = JavascriptEditorLibrary.prototype.RemoveComponentFromBlueprint;JavascriptEditorLibrary.prototype.RemoveComponentFromBlueprint = function (Blueprint, RemoveComponent, bPromoteChildren = false) { return fnprepatch_669.call(this, Blueprint, RemoveComponent, bPromoteChildren) }; } catch (e) {};
+try { let fnprepatch_670 = JavascriptEditorLibrary.prototype.ModifyObject;JavascriptEditorLibrary.prototype.ModifyObject = function (Object, bAlwaysMarkDirty = false) { return fnprepatch_670.call(this, Object, bAlwaysMarkDirty) }; } catch (e) {};
+try { let fnprepatch_671 = JavascriptEditorLibrary.prototype.GetLayerInfoByName;JavascriptEditorLibrary.prototype.GetLayerInfoByName = function (LandscapeInfo, LayerName, Owner = undefined) { return fnprepatch_671.call(this, LandscapeInfo, LayerName, Owner) }; } catch (e) {};
+try { let fnprepatch_672 = JavascriptEditorLibrary.prototype.GetDataTableAsJSON;JavascriptEditorLibrary.prototype.GetDataTableAsJSON = function (InDataTable, InDTExportFlags = 0) { return fnprepatch_672.call(this, InDataTable, InDTExportFlags) }; } catch (e) {};
+try { let fnprepatch_673 = JavascriptEditorLibrary.prototype.GetAssetsByType;JavascriptEditorLibrary.prototype.GetAssetsByType = function (Types, bRecursiveClasses = true) { return fnprepatch_673.call(this, Types, bRecursiveClasses) }; } catch (e) {};
+try { let fnprepatch_674 = JavascriptEditorLibrary.prototype.DeselectAll;JavascriptEditorLibrary.prototype.DeselectAll = function (Selection, InClass = null) { return fnprepatch_674.call(this, Selection, InClass) }; } catch (e) {};
+try { let fnprepatch_675 = JavascriptEditorLibrary.prototype.Build;JavascriptEditorLibrary.prototype.Build = function (Builder, InWorld, InBrush = undefined) { return fnprepatch_675.call(this, Builder, InWorld, InBrush) }; } catch (e) {};
+try { let fnprepatch_676 = JavascriptEditorLibrary.prototype.AddComponentsToBlueprint;JavascriptEditorLibrary.prototype.AddComponentsToBlueprint = function (Blueprint, Components, bHarvesting = false, OptionalNewRootComponent = undefined, bKeepMobility = false) { return fnprepatch_676.call(this, Blueprint, Components, bHarvesting, OptionalNewRootComponent, bKeepMobility) }; } catch (e) {};
+try { let fnprepatch_677 = JavascriptPropertyCustomizationLibrary.prototype.AddExternalObjects;JavascriptPropertyCustomizationLibrary.prototype.AddExternalObjects = function (ChildBuilder, Objects, UniqueIdName = "None") { return fnprepatch_677.call(this, ChildBuilder, Objects, UniqueIdName) }; } catch (e) {};
+try { let fnprepatch_678 = JavascriptPropertyCustomizationLibrary.prototype.AddExternalObjectProperty;JavascriptPropertyCustomizationLibrary.prototype.AddExternalObjectProperty = function (ChildBuilder, Objects, PropertyName, UniqueIdName = "None", bAllowChildrenOverride = false, bCreateCategoryNodesOverride = false) { return fnprepatch_678.call(this, ChildBuilder, Objects, PropertyName, UniqueIdName, bAllowChildrenOverride, bCreateCategoryNodesOverride) }; } catch (e) {};
 try { Guid.prototype.ToString = Guid.prototype.Conv_GuidToString; } catch (e) {};
 try { Guid.prototype.Equal = Guid.prototype.EqualEqual_GuidGuid; } catch (e) {};
 try { Guid.prototype.IsValid = Guid.prototype.IsValid_Guid; } catch (e) {};
@@ -1703,34 +2082,81 @@ try { Guid.prototype.NotEqual = Guid.prototype.NotEqual_GuidGuid; } catch (e) {}
 try { Vector.prototype.ToText = Vector.prototype.Conv_VectorToText; } catch (e) {};
 try { Vector.prototype.ToString = Vector.prototype.Conv_VectorToString; } catch (e) {};
 try { Vector.prototype.ToLinearColor = Vector.prototype.Conv_VectorToLinearColor; } catch (e) {};
+try { Vector.prototype.ToQuaterion = Vector.prototype.Conv_VectorToQuaterion; } catch (e) {};
 try { Vector.prototype.RotationFromXVector = Vector.prototype.Conv_VectorToRotator; } catch (e) {};
 try { Vector.prototype.ToTransform = Vector.prototype.Conv_VectorToTransform; } catch (e) {};
 try { Vector.prototype.ToVector2D = Vector.prototype.Conv_VectorToVector2D; } catch (e) {};
 try { Vector.prototype.CrossProduct = Vector.prototype.Cross_VectorVector; } catch (e) {};
 try { Vector.prototype.DotProduct = Vector.prototype.Dot_VectorVector; } catch (e) {};
+try { Vector.prototype.DynamicWeightedMovingAverageVector = Vector.prototype.DynamicWeightedMovingAverage_FVector; } catch (e) {};
 try { Vector.prototype.Equal = Vector.prototype.EqualEqual_VectorVector; } catch (e) {};
-try { Vector.prototype.TruncateVector = Vector.prototype.FTruncVector; } catch (e) {};
-try { Vector.prototype.GetUnitDirectionVector = Vector.prototype.GetDirectionUnitVector; } catch (e) {};
+try { Vector.prototype.EqualExactly = Vector.prototype.EqualExactly_VectorVector; } catch (e) {};
+try { Vector.prototype.Truncate = Vector.prototype.FTruncVector; } catch (e) {};
+try { Vector.prototype.GetUnitDirection = Vector.prototype.GetDirectionUnitVector; } catch (e) {};
 try { Vector.prototype.RotateVector = Vector.prototype.GreaterGreater_VectorRotator; } catch (e) {};
 try { Vector.prototype.UnrotateVector = Vector.prototype.LessLess_VectorRotator; } catch (e) {};
 try { Vector.prototype.LinePlaneIntersection = Vector.prototype.LinePlaneIntersection_OriginNormal; } catch (e) {};
 try { Vector.prototype.Normalize = Vector.prototype.Normal; } catch (e) {};
 try { Vector.prototype.NotEqual = Vector.prototype.NotEqual_VectorVector; } catch (e) {};
+try { Vector.prototype.NotEqualExactly = Vector.prototype.NotEqualExactly_VectorVector; } catch (e) {};
+try { Vector.prototype.MakefromEuler = Vector.prototype.Quat_MakeFromEuler; } catch (e) {};
 try { Vector.prototype.RotateVectorAroundAxis = Vector.prototype.RotateAngleAxis; } catch (e) {};
 try { Vector.prototype.Ease = Vector.prototype.VEase; } catch (e) {};
+try { Vector.prototype.Distance = Vector.prototype.Vector_Distance; } catch (e) {};
+try { Vector.prototype.Distance2D = Vector.prototype.Vector_Distance2D; } catch (e) {};
+try { Vector.prototype.Distance2DSquared = Vector.prototype.Vector_Distance2DSquared; } catch (e) {};
+try { Vector.prototype.DistanceSquared = Vector.prototype.Vector_DistanceSquared; } catch (e) {};
+try { Vector.prototype.IsNormal = Vector.prototype.Vector_IsNormal; } catch (e) {};
+try { Vector.prototype.IsUniform = Vector.prototype.Vector_IsUniform; } catch (e) {};
+try { Vector.prototype.IsUnit = Vector.prototype.Vector_IsUnit; } catch (e) {};
+try { Vector.prototype.Normalize2D = Vector.prototype.Vector_Normal2D; } catch (e) {};
+try { Vector.prototype.NormalizeInPlace = Vector.prototype.Vector_Normalize; } catch (e) {};
+try { Vector.prototype.Normalunsafe = Vector.prototype.Vector_NormalUnsafe; } catch (e) {};
+try { Vector.prototype.Reciprocal = Vector.prototype.Vector_Reciprocal; } catch (e) {};
 try { Vector.prototype.Lerp = Vector.prototype.VLerp; } catch (e) {};
 try { Vector.prototype.VectorLength = Vector.prototype.VSize; } catch (e) {};
 try { Vector.prototype.VectorLengthSquared = Vector.prototype.VSizeSquared; } catch (e) {};
 try { Vector.prototype.VectorLengthXY = Vector.prototype.VSizeXY; } catch (e) {};
+try { Vector.prototype.VectorLengthXYSquared = Vector.prototype.VSizeXYSquared; } catch (e) {};
+try { Vector.prototype.WeightedMovingAverageVector = Vector.prototype.WeightedMovingAverage_FVector; } catch (e) {};
 try { Vector.prototype.TwoBoneIKFunction = Vector.prototype.K2_TwoBoneIK; } catch (e) {};
+try { Vector.prototype.AddAREnvironmentProbe = Vector.prototype.AddManualEnvironmentCaptureProbe; } catch (e) {};
+try { Vector4.prototype.ToQuaterion = Vector4.prototype.Conv_Vector4ToQuaterion; } catch (e) {};
+try { Vector4.prototype.ToRotation = Vector4.prototype.Conv_Vector4ToRotator; } catch (e) {};
+try { Vector4.prototype.ToVector = Vector4.prototype.Conv_Vector4ToVector; } catch (e) {};
+try { Vector4.prototype.Equal = Vector4.prototype.EqualEqual_Vector4Vector4; } catch (e) {};
+try { Vector4.prototype.EqualExactly = Vector4.prototype.EqualExactly_Vector4Vector4; } catch (e) {};
+try { Vector4.prototype.NotEqual = Vector4.prototype.NotEqual_Vector4Vector4; } catch (e) {};
+try { Vector4.prototype.NotEqualExactly = Vector4.prototype.NotEqualExactly_Vector4Vector4; } catch (e) {};
+try { Vector4.prototype.CrossProductXYZ = Vector4.prototype.Vector4_CrossProduct3; } catch (e) {};
+try { Vector4.prototype.DotProduct = Vector4.prototype.Vector4_DotProduct; } catch (e) {};
+try { Vector4.prototype.DotProductXYZ = Vector4.prototype.Vector4_DotProduct3; } catch (e) {};
+try { Vector4.prototype.IsNormalXYZ = Vector4.prototype.Vector4_IsNormal3; } catch (e) {};
+try { Vector4.prototype.IsUnitXYZ = Vector4.prototype.Vector4_IsUnit3; } catch (e) {};
+try { Vector4.prototype.Negated = Vector4.prototype.Vector4_Negated; } catch (e) {};
+try { Vector4.prototype.NormalizeXYZ = Vector4.prototype.Vector4_Normal3; } catch (e) {};
+try { Vector4.prototype.NormalizeInPlaceXYZ = Vector4.prototype.Vector4_Normalize3; } catch (e) {};
+try { Vector4.prototype.NormalunsafeXYZ = Vector4.prototype.Vector4_NormalUnsafe3; } catch (e) {};
+try { Vector4.prototype.Length = Vector4.prototype.Vector4_Size; } catch (e) {};
+try { Vector4.prototype.LengthXYZ = Vector4.prototype.Vector4_Size3; } catch (e) {};
+try { Vector4.prototype.LengthSquared = Vector4.prototype.Vector4_SizeSquared; } catch (e) {};
+try { Vector4.prototype.LengthXYZSquared = Vector4.prototype.Vector4_SizeSquared3; } catch (e) {};
 try { Vector2D.prototype.ToText = Vector2D.prototype.Conv_Vector2dToText; } catch (e) {};
 try { Vector2D.prototype.ToString = Vector2D.prototype.Conv_Vector2dToString; } catch (e) {};
+try { Vector2D.prototype.ToIntPoint = Vector2D.prototype.Conv_Vector2DToIntPoint; } catch (e) {};
 try { Vector2D.prototype.ToVector = Vector2D.prototype.Conv_Vector2DToVector; } catch (e) {};
 try { Vector2D.prototype.CrossProduct = Vector2D.prototype.CrossProduct2D; } catch (e) {};
 try { Vector2D.prototype.DotProduct = Vector2D.prototype.DotProduct2D; } catch (e) {};
 try { Vector2D.prototype.Equal = Vector2D.prototype.EqualEqual_Vector2DVector2D; } catch (e) {};
+try { Vector2D.prototype.EqualExactly = Vector2D.prototype.EqualExactly_Vector2DVector2D; } catch (e) {};
 try { Vector2D.prototype.Normalize2D = Vector2D.prototype.Normal2D; } catch (e) {};
+try { Vector2D.prototype.NormalizeInPlace = Vector2D.prototype.Normalize2D; } catch (e) {};
+try { Vector2D.prototype.NormalSafe = Vector2D.prototype.NormalSafe2D; } catch (e) {};
 try { Vector2D.prototype.NotEqual = Vector2D.prototype.NotEqual_Vector2DVector2D; } catch (e) {};
+try { Vector2D.prototype.NotEqualExactly = Vector2D.prototype.NotEqualExactly_Vector2DVector2D; } catch (e) {};
+try { Vector2D.prototype.ToDirectionAndLength = Vector2D.prototype.ToDirectionAndLength2D; } catch (e) {};
+try { Vector2D.prototype.ToRounded = Vector2D.prototype.ToRounded2D; } catch (e) {};
+try { Vector2D.prototype.Tosign = Vector2D.prototype.ToSign2D; } catch (e) {};
 try { Vector2D.prototype.Vector2dLength = Vector2D.prototype.VSize2D; } catch (e) {};
 try { Vector2D.prototype.Vector2dLengthSquared = Vector2D.prototype.VSize2DSquared; } catch (e) {};
 try { Rotator.prototype.ToText = Rotator.prototype.Conv_RotatorToText; } catch (e) {};
@@ -1738,6 +2164,7 @@ try { Rotator.prototype.ToString = Rotator.prototype.Conv_RotatorToString; } cat
 try { Rotator.prototype.CombineRotators = Rotator.prototype.ComposeRotators; } catch (e) {};
 try { Rotator.prototype.ToTransform = Rotator.prototype.Conv_RotatorToTransform; } catch (e) {};
 try { Rotator.prototype.GetRotationXVector = Rotator.prototype.Conv_RotatorToVector; } catch (e) {};
+try { Rotator.prototype.DynamicWeightedMovingAverageRotator = Rotator.prototype.DynamicWeightedMovingAverage_FRotator; } catch (e) {};
 try { Rotator.prototype.Equal = Rotator.prototype.EqualEqual_RotatorRotator; } catch (e) {};
 try { Rotator.prototype.ScaleRotator = Rotator.prototype.Multiply_RotatorFloat; } catch (e) {};
 try { Rotator.prototype.ScaleRotator = Rotator.prototype.Multiply_RotatorInt; } catch (e) {};
@@ -1746,19 +2173,62 @@ try { Rotator.prototype.Delta = Rotator.prototype.NormalizedDeltaRotator; } catc
 try { Rotator.prototype.NotEqual = Rotator.prototype.NotEqual_RotatorRotator; } catch (e) {};
 try { Rotator.prototype.Ease = Rotator.prototype.REase; } catch (e) {};
 try { Rotator.prototype.Lerp = Rotator.prototype.RLerp; } catch (e) {};
+try { Rotator.prototype.WeightedMovingAverageRotator = Rotator.prototype.WeightedMovingAverage_FRotator; } catch (e) {};
+try { Quat.prototype.Equal = Quat.prototype.EqualEqual_QuatQuat; } catch (e) {};
+try { Quat.prototype.NotEqual = Quat.prototype.NotEqual_QuatQuat; } catch (e) {};
+try { Quat.prototype.AngularDistance = Quat.prototype.Quat_AngularDistance; } catch (e) {};
+try { Quat.prototype.Ensureshortestarcto = Quat.prototype.Quat_EnforceShortestArcWith; } catch (e) {};
+try { Quat.prototype.Euler = Quat.prototype.Quat_Euler; } catch (e) {};
+try { Quat.prototype.Exp = Quat.prototype.Quat_Exp; } catch (e) {};
+try { Quat.prototype.Angle = Quat.prototype.Quat_GetAngle; } catch (e) {};
+try { Quat.prototype.AxisX = Quat.prototype.Quat_GetAxisX; } catch (e) {};
+try { Quat.prototype.AxisY = Quat.prototype.Quat_GetAxisY; } catch (e) {};
+try { Quat.prototype.AxisZ = Quat.prototype.Quat_GetAxisZ; } catch (e) {};
+try { Quat.prototype.RotationAxis = Quat.prototype.Quat_GetRotationAxis; } catch (e) {};
+try { Quat.prototype.Inversed = Quat.prototype.Quat_Inversed; } catch (e) {};
+try { Quat.prototype.IsFinite = Quat.prototype.Quat_IsFinite; } catch (e) {};
+try { Quat.prototype.IsIdentity = Quat.prototype.Quat_IsIdentity; } catch (e) {};
+try { Quat.prototype.IsNormalized = Quat.prototype.Quat_IsNormalized; } catch (e) {};
+try { Quat.prototype.Log = Quat.prototype.Quat_Log; } catch (e) {};
+try { Quat.prototype.Normalize = Quat.prototype.Quat_Normalize; } catch (e) {};
+try { Quat.prototype.Normalized = Quat.prototype.Quat_Normalized; } catch (e) {};
+try { Quat.prototype.RotateVector = Quat.prototype.Quat_RotateVector; } catch (e) {};
+try { Quat.prototype.ToRotator = Quat.prototype.Quat_Rotator; } catch (e) {};
+try { Quat.prototype.SetComponents = Quat.prototype.Quat_SetComponents; } catch (e) {};
+try { Quat.prototype.SetfromEuler = Quat.prototype.Quat_SetFromEuler; } catch (e) {};
+try { Quat.prototype.Size = Quat.prototype.Quat_Size; } catch (e) {};
+try { Quat.prototype.SizeSquared = Quat.prototype.Quat_SizeSquared; } catch (e) {};
+try { Quat.prototype.UnrotateVector = Quat.prototype.Quat_UnrotateVector; } catch (e) {};
+try { Quat.prototype.VectorForward = Quat.prototype.Quat_VectorForward; } catch (e) {};
+try { Quat.prototype.VectorRight = Quat.prototype.Quat_VectorRight; } catch (e) {};
+try { Quat.prototype.VectorUp = Quat.prototype.Quat_VectorUp; } catch (e) {};
 try { IntVector.prototype.ToString = IntVector.prototype.Conv_IntVectorToString; } catch (e) {};
 try { IntVector.prototype.ToVector = IntVector.prototype.Conv_IntVectorToVector; } catch (e) {};
 try { Color.prototype.ToLinearColor = Color.prototype.Conv_ColorToLinearColor; } catch (e) {};
 try { LinearColor.prototype.ToText = LinearColor.prototype.Conv_ColorToText; } catch (e) {};
 try { LinearColor.prototype.ToString = LinearColor.prototype.Conv_ColorToString; } catch (e) {};
+try { LinearColor.prototype.Interpolate = LinearColor.prototype.CInterpTo; } catch (e) {};
 try { LinearColor.prototype.ToColor = LinearColor.prototype.Conv_LinearColorToColor; } catch (e) {};
 try { LinearColor.prototype.ToVector = LinearColor.prototype.Conv_LinearColorToVector; } catch (e) {};
+try { LinearColor.prototype.Equal = LinearColor.prototype.EqualEqual_LinearColorLinearColor; } catch (e) {};
 try { LinearColor.prototype.HSVtoRGB = LinearColor.prototype.HSVToRGB_Vector; } catch (e) {};
+try { LinearColor.prototype.HSVtoRGBlinearcolor = LinearColor.prototype.HSVToRGBLinear; } catch (e) {};
+try { LinearColor.prototype.Desaturate = LinearColor.prototype.LinearColor_Desaturated; } catch (e) {};
+try { LinearColor.prototype.Distance = LinearColor.prototype.LinearColor_Distance; } catch (e) {};
+try { LinearColor.prototype.Luminance = LinearColor.prototype.LinearColor_GetLuminance; } catch (e) {};
+try { LinearColor.prototype.Max = LinearColor.prototype.LinearColor_GetMax; } catch (e) {};
+try { LinearColor.prototype.Min = LinearColor.prototype.LinearColor_GetMin; } catch (e) {};
+try { LinearColor.prototype.NearEqual = LinearColor.prototype.LinearColor_IsNearEqual; } catch (e) {};
+try { LinearColor.prototype.NewOpacity = LinearColor.prototype.LinearColor_ToNewOpacity; } catch (e) {};
+try { LinearColor.prototype.ToRGBE = LinearColor.prototype.LinearColor_ToRGBE; } catch (e) {};
 try { LinearColor.prototype.Lerp = LinearColor.prototype.LinearColorLerp; } catch (e) {};
 try { LinearColor.prototype.LerpUsingHSV = LinearColor.prototype.LinearColorLerpUsingHSV; } catch (e) {};
+try { LinearColor.prototype.NotEqual = LinearColor.prototype.NotEqual_LinearColorLinearColor; } catch (e) {};
+try { LinearColor.prototype.RGBtoHSVlinearcolor = LinearColor.prototype.RGBLinearToHSV; } catch (e) {};
 try { LinearColor.prototype.RGBtoHSV = LinearColor.prototype.RGBToHSV_Vector; } catch (e) {};
 try { Matrix.prototype.ToRotator = Matrix.prototype.Conv_MatrixToRotator; } catch (e) {};
 try { Matrix.prototype.ToTransform = Matrix.prototype.Conv_MatrixToTransform; } catch (e) {};
+try { Matrix.prototype.GetOrigin = Matrix.prototype.Matrix_GetOrigin; } catch (e) {};
 try { Transform.prototype.ToText = Transform.prototype.Conv_TransformToText; } catch (e) {};
 try { Transform.prototype.ToString = Transform.prototype.Conv_TransformToString; } catch (e) {};
 try { Transform.prototype.EqualTransform = Transform.prototype.EqualEqual_TransformTransform; } catch (e) {};
@@ -1767,6 +2237,7 @@ try { Transform.prototype.Ease = Transform.prototype.TEase; } catch (e) {};
 try { Transform.prototype.Lerp = Transform.prototype.TLerp; } catch (e) {};
 try { Transform.prototype.Determinant = Transform.prototype.Transform_Determinant; } catch (e) {};
 try { Transform.prototype.LookAtFunction = Transform.prototype.K2_LookAt; } catch (e) {};
+try { Transform.prototype.SetARAlignmentTransform = Transform.prototype.SetAlignmentTransform; } catch (e) {};
 try { DateTime.prototype.AsDate = DateTime.prototype.AsDate_DateTime; } catch (e) {};
 try { DateTime.prototype.AsDateTime = DateTime.prototype.AsDateTime_DateTime; } catch (e) {};
 try { DateTime.prototype.AsTime = DateTime.prototype.AsTime_DateTime; } catch (e) {};
@@ -1786,6 +2257,8 @@ try { Timecode.prototype.TimecodetoString = Timecode.prototype.Conv_TimecodeToSt
 try { Timespan.prototype.AsTimespan = Timespan.prototype.AsTimespan_Timespan; } catch (e) {};
 try { Timespan.prototype.Equal = Timespan.prototype.EqualEqual_TimespanTimespan; } catch (e) {};
 try { Timespan.prototype.NotEqual = Timespan.prototype.NotEqual_TimespanTimespan; } catch (e) {};
+try { SoftObjectPath.prototype.ToSoftObjectReference = SoftObjectPath.prototype.Conv_SoftObjPathToSoftObjRef; } catch (e) {};
+try { SoftClassPath.prototype.ToSoftClassReference = SoftClassPath.prototype.Conv_SoftClassPathToSoftClassRef; } catch (e) {};
 try { PrimaryAssetType.prototype.ToString = PrimaryAssetType.prototype.Conv_PrimaryAssetTypeToString; } catch (e) {};
 try { PrimaryAssetType.prototype.Equal = PrimaryAssetType.prototype.EqualEqual_PrimaryAssetType; } catch (e) {};
 try { PrimaryAssetType.prototype.NotEqual = PrimaryAssetType.prototype.NotEqual_PrimaryAssetType; } catch (e) {};
@@ -1794,6 +2267,7 @@ try { PrimaryAssetId.prototype.Equal = PrimaryAssetId.prototype.EqualEqual_Prima
 try { PrimaryAssetId.prototype.NotEqual = PrimaryAssetId.prototype.NotEqual_PrimaryAssetId; } catch (e) {};
 try { Key.prototype.Equal = Key.prototype.EqualEqual_KeyKey; } catch (e) {};
 try { Key.prototype.GetKeyDisplayName = Key.prototype.Key_GetDisplayName; } catch (e) {};
+try { Key.prototype.GetKeyNavigationAction = Key.prototype.Key_GetNavigationAction; } catch (e) {};
 try { Key.prototype.IsFloatAxis = Key.prototype.Key_IsFloatAxis; } catch (e) {};
 try { Key.prototype.IsGamepadKey = Key.prototype.Key_IsGamepadKey; } catch (e) {};
 try { Key.prototype.IsKeyboardKey = Key.prototype.Key_IsKeyboardKey; } catch (e) {};
@@ -1830,9 +2304,11 @@ try { UPointerEvent.prototype.IsMouseButtonDown = UPointerEvent.prototype.Pointe
 try { UPointerEvent.prototype.IsTouchEvent = UPointerEvent.prototype.PointerEvent_IsTouchEvent; } catch (e) {};
 try { PaintContext.prototype.DrawString = PaintContext.prototype.DrawText; } catch (e) {};
 try { PaintContext.prototype.DrawText = PaintContext.prototype.DrawTextFormatted; } catch (e) {};
+try { KeyEvent.prototype.GetKeyEventNavigationDirection = KeyEvent.prototype.Key_GetNavigationDirectionFromKey; } catch (e) {};
+try { AnalogInputEvent.prototype.GetAnalogEventNavigationDirection = AnalogInputEvent.prototype.Key_GetNavigationDirectionFromAnalog; } catch (e) {};
 try { InputChord.prototype.Equal = InputChord.prototype.EqualEqual_InputChordInputChord; } catch (e) {};
+try { InputChord.prototype.GetInputChordDisplayName = InputChord.prototype.InputChord_GetDisplayName; } catch (e) {};
 try { GameplayTag.prototype.Equal = GameplayTag.prototype.EqualEqual_GameplayTag; } catch (e) {};
 try { GameplayTag.prototype.NotEqual = GameplayTag.prototype.NotEqual_GameplayTag; } catch (e) {};
 try { GameplayTagContainer.prototype.Equal = GameplayTagContainer.prototype.EqualEqual_GameplayTagContainer; } catch (e) {};
 try { GameplayTagContainer.prototype.NotEqual = GameplayTagContainer.prototype.NotEqual_GameplayTagContainer; } catch (e) {};
-try { DropTimecode.prototype.ToString = DropTimecode.prototype.Conv_DropTimecodeToString; } catch (e) {};
diff --git a/Examples/Content/Scripts/extension-exampleWindow.js b/Examples/Content/Scripts/extension-exampleWindow.js
index 0ed625d..343de24 100644
--- a/Examples/Content/Scripts/extension-exampleWindow.js
+++ b/Examples/Content/Scripts/extension-exampleWindow.js
@@ -281,7 +281,7 @@ function main() {
                 ),
                 $link:elem => {
                     elem.JavascriptContext = Context
-                    elem.EntryWidgetClass = JavascriptUserObjectListEntry
+                    elem.EntryWidgetClass = WidgetBlueprint.Load('/Game/JavascriptUserObjectListEntry_BP.JavascriptUserObjectListEntry_BP').GeneratedClass
                     elem.alive = true
                     elem.proxy = {
                         OnSelectionChanged: item => contexts.setCurrent(item)
@@ -396,7 +396,7 @@ function main() {
                         ],
                         $link:elem => {
                             elem.JavascriptContext = Context
-                            elem.EntryWidgetClass = JavascriptUserObjectListEntry
+                            elem.EntryWidgetClass = WidgetBlueprint.Load('/Game/JavascriptUserObjectListEntry_BP.JavascriptUserObjectListEntry_BP').GeneratedClass
                             elem.alive = true
                             elem.proxy = {
                                 OnDoubleClick : item => item.actions.install(),
diff --git a/Examples/Content/Scripts/extension-spiralGenerator.js b/Examples/Content/Scripts/extension-spiralGenerator.js
index 364aac5..3013d06 100644
--- a/Examples/Content/Scripts/extension-spiralGenerator.js
+++ b/Examples/Content/Scripts/extension-spiralGenerator.js
@@ -278,7 +278,7 @@ function main() {
                 },
                 $link:elem => {
                     elem.JavascriptContext = Context
-                    elem.EntryWidgetClass = JavascriptUserObjectListEntry
+                    elem.EntryWidgetClass = WidgetBlueprint.Load('/Game/JavascriptUserObjectListEntry_BP.JavascriptUserObjectListEntry_BP').GeneratedClass
                     elem.proxy = {
                         OnSelectionChanged: item => {
                             data = item
diff --git a/Examples/Content/Scripts/helloUMG.js b/Examples/Content/Scripts/helloUMG.js
index 123a25f..3646506 100644
--- a/Examples/Content/Scripts/helloUMG.js
+++ b/Examples/Content/Scripts/helloUMG.js
@@ -217,7 +217,7 @@ function main() {
                                             },
                                             $link:elem => {
                                                 elem.JavascriptContext = Context
-                                                elem.EntryWidgetClass = JavascriptUserObjectListEntry
+                                                elem.EntryWidgetClass = WidgetBlueprint.Load('/Game/JavascriptUserObjectListEntry_BP.JavascriptUserObjectListEntry_BP').GeneratedClass
                                                 elem.proxy = {}
                                                 elem.proxy.OnSelectionChanged = (row) => {
                                                     console.log('selection')
diff --git a/Examples/Content/Scripts/package.json b/Examples/Content/Scripts/package.json
index bf5013c..3221c7c 100644
--- a/Examples/Content/Scripts/package.json
+++ b/Examples/Content/Scripts/package.json
@@ -9,6 +9,7 @@
   "license": "ISC",
   "description": "",
   "dependencies": {
+    "convnetjs": "^0.3.0",
     "springy": "^2.7.1"
   }
 }
diff --git a/Examples/Content/Scripts/typings/_part_0_ue.d.ts b/Examples/Content/Scripts/typings/_part_0_ue.d.ts
index 81092a1..58fdf85 100644
--- a/Examples/Content/Scripts/typings/_part_0_ue.d.ts
+++ b/Examples/Content/Scripts/typings/_part_0_ue.d.ts
@@ -53,7 +53,9 @@ declare class Field extends UObject {
 	static GetDefaultObject(): Field;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Field;
 	static C(Other: UObject | any): Field;
+	HasMetaData(Key: string): boolean;
 	GetMetaData(Key: string): string;
+	static HasMetaData(Field: Field,Key: string): boolean;
 	static GetMetaData(Field: Field,Key: string): string;
 }
 
@@ -112,6 +114,13 @@ declare class ActorTickFunction extends TickFunction {
 
 declare type ENetRole = 'ROLE_None' | 'ROLE_SimulatedProxy' | 'ROLE_AutonomousProxy' | 'ROLE_Authority' | 'ROLE_MAX';
 declare var ENetRole : { ROLE_None:'ROLE_None',ROLE_SimulatedProxy:'ROLE_SimulatedProxy',ROLE_AutonomousProxy:'ROLE_AutonomousProxy',ROLE_Authority:'ROLE_Authority',ROLE_MAX:'ROLE_MAX', };
+declare class IntPoint { 
+	X: number;
+	Y: number;
+	clone() : IntPoint;
+	static C(Other: UObject | any): IntPoint;
+}
+
 declare class Box2D { 
 	Min: Vector2D;
 	Max: Vector2D;
@@ -120,156 +129,12 @@ declare class Box2D {
 	static C(Other: UObject | any): Box2D;
 }
 
-declare class Vector2D { 
-	X: number;
-	Y: number;
-	clone() : Vector2D;
-	static C(Other: UObject | any): Vector2D;
-	Conv_Vector2dToText(): string;
-	Conv_Vector2dToString(): string;
-	Add_Vector2DFloat(B: number): Vector2D;
-	Add_Vector2DVector2D(B: Vector2D): Vector2D;
-	BreakVector2D(X?: number,Y?: number): {X: number, Y: number};
-	Conv_Vector2DToVector(Z: number): Vector;
-	CrossProduct2D(B: Vector2D): number;
-	Divide_Vector2DFloat(B: number): Vector2D;
-	Divide_Vector2DVector2D(B: Vector2D): Vector2D;
-	DotProduct2D(B: Vector2D): number;
-	EqualEqual_Vector2DVector2D(B: Vector2D,ErrorTolerance: number): boolean;
-	MakeBox2D(Max: Vector2D): Box2D;
-	Multiply_Vector2DFloat(B: number): Vector2D;
-	Multiply_Vector2DVector2D(B: Vector2D): Vector2D;
-	Normal2D(): Vector2D;
-	NotEqual_Vector2DVector2D(B: Vector2D,ErrorTolerance: number): boolean;
-	Subtract_Vector2DFloat(B: number): Vector2D;
-	Subtract_Vector2DVector2D(B: Vector2D): Vector2D;
-	Vector2DInterpTo(Target: Vector2D,DeltaTime: number,InterpSpeed: number): Vector2D;
-	Vector2DInterpTo_Constant(Target: Vector2D,DeltaTime: number,InterpSpeed: number): Vector2D;
-	VSize2D(): number;
-	VSize2DSquared(): number;
-	SetSpectatorScreenModeTexturePlusEyeLayout(EyeRectMax: Vector2D,TextureRectMin: Vector2D,TextureRectMax: Vector2D,bDrawEyeFirst: boolean,bClearBlack: boolean,bUseAlpha: boolean): void;
-	static Conv_Vector2dToText(InVec: Vector2D): string;
-	static Conv_Vector2dToString(InVec: Vector2D): string;
-	static Add_Vector2DFloat(A: Vector2D,B: number): Vector2D;
-	static Add_Vector2DVector2D(A: Vector2D,B: Vector2D): Vector2D;
-	static BreakVector2D(InVec: Vector2D,X?: number,Y?: number): {X: number, Y: number};
-	static Conv_Vector2DToVector(InVector2D: Vector2D,Z: number): Vector;
-	static CrossProduct2D(A: Vector2D,B: Vector2D): number;
-	static Divide_Vector2DFloat(A: Vector2D,B: number): Vector2D;
-	static Divide_Vector2DVector2D(A: Vector2D,B: Vector2D): Vector2D;
-	static DotProduct2D(A: Vector2D,B: Vector2D): number;
-	static EqualEqual_Vector2DVector2D(A: Vector2D,B: Vector2D,ErrorTolerance: number): boolean;
-	static MakeBox2D(Min: Vector2D,Max: Vector2D): Box2D;
-	static Multiply_Vector2DFloat(A: Vector2D,B: number): Vector2D;
-	static Multiply_Vector2DVector2D(A: Vector2D,B: Vector2D): Vector2D;
-	static Normal2D(A: Vector2D): Vector2D;
-	static NotEqual_Vector2DVector2D(A: Vector2D,B: Vector2D,ErrorTolerance: number): boolean;
-	static Subtract_Vector2DFloat(A: Vector2D,B: number): Vector2D;
-	static Subtract_Vector2DVector2D(A: Vector2D,B: Vector2D): Vector2D;
-	static Vector2DInterpTo(Current: Vector2D,Target: Vector2D,DeltaTime: number,InterpSpeed: number): Vector2D;
-	static Vector2DInterpTo_Constant(Current: Vector2D,Target: Vector2D,DeltaTime: number,InterpSpeed: number): Vector2D;
-	static VSize2D(A: Vector2D): number;
-	static VSize2DSquared(A: Vector2D): number;
-	static SetSpectatorScreenModeTexturePlusEyeLayout(EyeRectMin: Vector2D,EyeRectMax: Vector2D,TextureRectMin: Vector2D,TextureRectMax: Vector2D,bDrawEyeFirst: boolean,bClearBlack: boolean,bUseAlpha: boolean): void;
-	static GenerateDynamicImageResource(InDynamicBrushName: string): Vector2D;
-	static MakeVector2D(X: number,Y: number): Vector2D;
-	static NextSobolCell2D(index: number,NumCells: number,PreviousValue: Vector2D): Vector2D;
-	static RandomSobolCell2D(index: number,NumCells: number,Cell: Vector2D,Seed: Vector2D): Vector2D;
-	static GetMousePositionOnPlatform(): Vector2D;
-}
-
-declare class ProcMeshTangent { 
-	TangentX: Vector;
-	bFlipTangentY: boolean;
-	clone() : ProcMeshTangent;
-	static C(Other: UObject | any): ProcMeshTangent;
-}
-
-declare type EBoundaryType = 'Boundary_Outer' | 'Boundary_PlayArea' | 'Boundary_MAX';
-declare var EBoundaryType : { Boundary_Outer:'Boundary_Outer',Boundary_PlayArea:'Boundary_PlayArea',Boundary_MAX:'Boundary_MAX', };
-declare type ETrackedDeviceType = 'None' | 'HMD' | 'LTouch' | 'RTouch' | 'Touch' | 'DeviceObjectZero' | 'All' | 'ETrackedDeviceType_MAX';
-declare var ETrackedDeviceType : { None:'None',HMD:'HMD',LTouch:'LTouch',RTouch:'RTouch',Touch:'Touch',DeviceObjectZero:'DeviceObjectZero',All:'All',ETrackedDeviceType_MAX:'ETrackedDeviceType_MAX', };
-declare class GuardianTestResult { 
-	IsTriggering: boolean;
-	DeviceType: ETrackedDeviceType;
-	ClosestDistance: number;
-	ClosestPoint: Vector;
-	ClosestPointNormal: Vector;
-	clone() : GuardianTestResult;
-	static C(Other: UObject | any): GuardianTestResult;
-	static GetNodeGuardianIntersection(DeviceType: ETrackedDeviceType,BoundaryType: EBoundaryType): GuardianTestResult;
-}
-
+declare type EARLineTraceChannels = 'None' | 'FeaturePoint' | 'GroundPlane' | 'PlaneUsingExtent' | 'PlaneUsingBoundaryPolygon' | 'EARLineTraceChannels_MAX';
+declare var EARLineTraceChannels : { None:'None',FeaturePoint:'FeaturePoint',GroundPlane:'GroundPlane',PlaneUsingExtent:'PlaneUsingExtent',PlaneUsingBoundaryPolygon:'PlaneUsingBoundaryPolygon',EARLineTraceChannels_MAX:'EARLineTraceChannels_MAX', };
 declare type EOrientPositionSelector = 'Orientation' | 'Position' | 'OrientationAndPosition' | 'EOrientPositionSelector_MAX';
 declare var EOrientPositionSelector : { Orientation:'Orientation',Position:'Position',OrientationAndPosition:'OrientationAndPosition',EOrientPositionSelector_MAX:'EOrientPositionSelector_MAX', };
-declare class Quat { 
-	X: number;
-	Y: number;
-	Z: number;
-	W: number;
-	clone() : Quat;
-	static C(Other: UObject | any): Quat;
-	SetBaseOrientation(): void;
-	static SetBaseOrientation(InBaseOrientation: Quat): void;
-}
-
 declare type EEasingFunc = 'Linear' | 'Step' | 'SinusoidalIn' | 'SinusoidalOut' | 'SinusoidalInOut' | 'EaseIn' | 'EaseOut' | 'EaseInOut' | 'ExpoIn' | 'ExpoOut' | 'ExpoInOut' | 'CircularIn' | 'CircularOut' | 'CircularInOut' | 'EEasingFunc_MAX';
 declare var EEasingFunc : { Linear:'Linear',Step:'Step',SinusoidalIn:'SinusoidalIn',SinusoidalOut:'SinusoidalOut',SinusoidalInOut:'SinusoidalInOut',EaseIn:'EaseIn',EaseOut:'EaseOut',EaseInOut:'EaseInOut',ExpoIn:'ExpoIn',ExpoOut:'ExpoOut',ExpoInOut:'ExpoInOut',CircularIn:'CircularIn',CircularOut:'CircularOut',CircularInOut:'CircularInOut',EEasingFunc_MAX:'EEasingFunc_MAX', };
-declare type ELerpInterpolationMode = 'QuatInterp' | 'EulerInterp' | 'DualQuatInterp' | 'ELerpInterpolationMode_MAX';
-declare var ELerpInterpolationMode : { QuatInterp:'QuatInterp',EulerInterp:'EulerInterp',DualQuatInterp:'DualQuatInterp',ELerpInterpolationMode_MAX:'ELerpInterpolationMode_MAX', };
-declare class Transform { 
-	Rotation: Quat;
-	Translation: Vector;
-	Scale3D: Vector;
-	clone() : Transform;
-	static C(Other: UObject | any): Transform;
-	Conv_TransformToText(): string;
-	Conv_TransformToString(): string;
-	BreakTransform(Location?: Vector,Rotation?: Rotator,Scale?: Vector): {Location: Vector, Rotation: Rotator, Scale: Vector};
-	ComposeTransforms(B: Transform): Transform;
-	ConvertTransformToRelative(ParentTransform: Transform): Transform;
-	EqualEqual_TransformTransform(B: Transform): boolean;
-	InverseTransformDirection(Direction: Vector): Vector;
-	InverseTransformLocation(Location: Vector): Vector;
-	InverseTransformRotation(Rotation: Rotator): Rotator;
-	InvertTransform(): Transform;
-	NearlyEqual_TransformTransform(B: Transform,LocationTolerance: number,RotationTolerance: number,Scale3DTolerance: number): boolean;
-	SelectTransform(B: Transform,bPickA: boolean): Transform;
-	TEase(B: Transform,Alpha: number,EasingFunc: EEasingFunc,BlendExp: number,Steps: number): Transform;
-	TInterpTo(Target: Transform,DeltaTime: number,InterpSpeed: number): Transform;
-	TLerp(B: Transform,Alpha: number,InterpMode: ELerpInterpolationMode): Transform;
-	Transform_Determinant(): number;
-	TransformDirection(Direction: Vector): Vector;
-	TransformLocation(Location: Vector): Vector;
-	TransformRotation(Rotation: Rotator): Rotator;
-	K2_LookAt(TargetPosition: Vector,LookAtVector: Vector,bUseUpVector: boolean,UpVector: Vector,ClampConeInDegree: number): Transform;
-	CalibrateExternalTrackingToHMD(): void;
-	UpdateExternalTrackingHMDPosition(): void;
-	static Conv_TransformToText(InTrans: Transform): string;
-	static Conv_TransformToString(InTrans: Transform): string;
-	static BreakTransform(InTransform: Transform,Location?: Vector,Rotation?: Rotator,Scale?: Vector): {Location: Vector, Rotation: Rotator, Scale: Vector};
-	static ComposeTransforms(A: Transform,B: Transform): Transform;
-	static ConvertTransformToRelative(Transform: Transform,ParentTransform: Transform): Transform;
-	static EqualEqual_TransformTransform(A: Transform,B: Transform): boolean;
-	static InverseTransformDirection(T: Transform,Direction: Vector): Vector;
-	static InverseTransformLocation(T: Transform,Location: Vector): Vector;
-	static InverseTransformRotation(T: Transform,Rotation: Rotator): Rotator;
-	static InvertTransform(T: Transform): Transform;
-	static NearlyEqual_TransformTransform(A: Transform,B: Transform,LocationTolerance: number,RotationTolerance: number,Scale3DTolerance: number): boolean;
-	static SelectTransform(A: Transform,B: Transform,bPickA: boolean): Transform;
-	static TEase(A: Transform,B: Transform,Alpha: number,EasingFunc: EEasingFunc,BlendExp: number,Steps: number): Transform;
-	static TInterpTo(Current: Transform,Target: Transform,DeltaTime: number,InterpSpeed: number): Transform;
-	static TLerp(A: Transform,B: Transform,Alpha: number,InterpMode: ELerpInterpolationMode): Transform;
-	static Transform_Determinant(Transform: Transform): number;
-	static TransformDirection(T: Transform,Direction: Vector): Vector;
-	static TransformLocation(T: Transform,Location: Vector): Vector;
-	static TransformRotation(T: Transform,Rotation: Rotator): Rotator;
-	static K2_LookAt(CurrentTransform: Transform,TargetPosition: Vector,LookAtVector: Vector,bUseUpVector: boolean,UpVector: Vector,ClampConeInDegree: number): Transform;
-	static CalibrateExternalTrackingToHMD(ExternalTrackingTransform: Transform): void;
-	static UpdateExternalTrackingHMDPosition(ExternalTrackingTransform: Transform): void;
-	static GetPlayAreaTransform(): Transform;
-}
-
 declare class RandomStream { 
 	InitialSeed: number;
 	Seed: number;
@@ -304,6 +169,7 @@ declare class Rotator {
 	SetBaseRotationAndBaseOffsetInMeters(BaseOffsetInMeters: Vector,Options: EOrientPositionSelector): void;
 	SetBaseRotationAndPositionOffset(PosOffset: Vector,Options: EOrientPositionSelector): void;
 	SetBaseRotation(): void;
+	IsValidAIRotation(): boolean;
 	Conv_RotatorToText(): string;
 	Conv_RotatorToString(): string;
 	BreakRotator(Roll?: number,Pitch?: number,Yaw?: number): {Roll: number, Pitch: number, Yaw: number};
@@ -311,6 +177,7 @@ declare class Rotator {
 	ComposeRotators(B: Rotator): Rotator;
 	Conv_RotatorToTransform(): Transform;
 	Conv_RotatorToVector(): Vector;
+	DynamicWeightedMovingAverage_FRotator(PreviousSample: Rotator,MaxDistance: number,MinWeight: number,MaxWeight: number): Rotator;
 	EqualEqual_RotatorRotator(B: Rotator,ErrorTolerance: number): boolean;
 	GetAxes(X?: Vector,Y?: Vector,Z?: Vector): {X: Vector, Y: Vector, Z: Vector};
 	GetForwardVector(): Vector;
@@ -326,7 +193,7 @@ declare class Rotator {
 	RInterpTo_Constant(Target: Rotator,DeltaTime: number,InterpSpeed: number): Rotator;
 	RLerp(B: Rotator,Alpha: number,bShortestPath: boolean): Rotator;
 	SelectRotator(B: Rotator,bPickA: boolean): Rotator;
-	IsValidAIRotation(): boolean;
+	WeightedMovingAverage_FRotator(PreviousSample: Rotator,Weight: number): Rotator;
 	GetOrientationAndPosition(DevicePosition?: Vector): {DeviceRotation: Rotator, DevicePosition: Vector};
 	static GetBaseRotationAndBaseOffsetInMeters(OutRotation?: Rotator,OutBaseOffsetInMeters?: Vector): {OutRotation: Rotator, OutBaseOffsetInMeters: Vector};
 	static GetBaseRotationAndPositionOffset(OutRot?: Rotator,OutPosOffset?: Vector): {OutRot: Rotator, OutPosOffset: Vector};
@@ -334,6 +201,7 @@ declare class Rotator {
 	static SetBaseRotationAndBaseOffsetInMeters(Rotation: Rotator,BaseOffsetInMeters: Vector,Options: EOrientPositionSelector): void;
 	static SetBaseRotationAndPositionOffset(BaseRot: Rotator,PosOffset: Vector,Options: EOrientPositionSelector): void;
 	static SetBaseRotation(InBaseRotation: Rotator): void;
+	static IsValidAIRotation(Rotation: Rotator): boolean;
 	static Conv_RotatorToText(InRot: Rotator): string;
 	static Conv_RotatorToString(InRot: Rotator): string;
 	static BreakRotator(InRot: Rotator,Roll?: number,Pitch?: number,Yaw?: number): {Roll: number, Pitch: number, Yaw: number};
@@ -341,6 +209,7 @@ declare class Rotator {
 	static ComposeRotators(A: Rotator,B: Rotator): Rotator;
 	static Conv_RotatorToTransform(InRotator: Rotator): Transform;
 	static Conv_RotatorToVector(InRot: Rotator): Vector;
+	static DynamicWeightedMovingAverage_FRotator(CurrentSample: Rotator,PreviousSample: Rotator,MaxDistance: number,MinWeight: number,MaxWeight: number): Rotator;
 	static EqualEqual_RotatorRotator(A: Rotator,B: Rotator,ErrorTolerance: number): boolean;
 	static GetAxes(A: Rotator,X?: Vector,Y?: Vector,Z?: Vector): {X: Vector, Y: Vector, Z: Vector};
 	static GetForwardVector(InRot: Rotator): Vector;
@@ -356,13 +225,148 @@ declare class Rotator {
 	static RInterpTo_Constant(Current: Rotator,Target: Rotator,DeltaTime: number,InterpSpeed: number): Rotator;
 	static RLerp(A: Rotator,B: Rotator,Alpha: number,bShortestPath: boolean): Rotator;
 	static SelectRotator(A: Rotator,B: Rotator,bPickA: boolean): Rotator;
-	static IsValidAIRotation(Rotation: Rotator): boolean;
+	static WeightedMovingAverage_FRotator(CurrentSample: Rotator,PreviousSample: Rotator,Weight: number): Rotator;
 	static GetOrientationAndPosition(DeviceRotation?: Rotator,DevicePosition?: Vector): {DeviceRotation: Rotator, DevicePosition: Vector};
 	static MakeRotator(Roll: number,Pitch: number,Yaw: number): Rotator;
 	static RandomRotator(bRoll: boolean): Rotator;
 	static RandomRotatorFromStream(bRoll: boolean,Stream: RandomStream): Rotator;
 }
 
+declare class Quat { 
+	X: number;
+	Y: number;
+	Z: number;
+	W: number;
+	clone() : Quat;
+	static C(Other: UObject | any): Quat;
+	SetBaseOrientation(): void;
+	Add_QuatQuat(B: Quat): Quat;
+	EqualEqual_QuatQuat(B: Quat,Tolerance: number): boolean;
+	Multiply_QuatQuat(B: Quat): Quat;
+	NotEqual_QuatQuat(B: Quat,ErrorTolerance: number): boolean;
+	Quat_AngularDistance(B: Quat): number;
+	Quat_EnforceShortestArcWith(B?: Quat): {A: Quat};
+	Quat_Euler(): Vector;
+	Quat_Exp(): Quat;
+	Quat_GetAngle(): number;
+	Quat_GetAxisX(): Vector;
+	Quat_GetAxisY(): Vector;
+	Quat_GetAxisZ(): Vector;
+	Quat_GetRotationAxis(): Vector;
+	Quat_Inversed(): Quat;
+	Quat_IsFinite(): boolean;
+	Quat_IsIdentity(Tolerance: number): boolean;
+	Quat_IsNonFinite(): boolean;
+	Quat_IsNormalized(): boolean;
+	Quat_Log(): Quat;
+	Quat_Normalize(Tolerance?: number): {Q: Quat};
+	Quat_Normalized(Tolerance: number): Quat;
+	Quat_RotateVector(V: Vector): Vector;
+	Quat_Rotator(): Rotator;
+	Quat_SetComponents(X?: number,Y?: number,Z?: number,W?: number): {Q: Quat};
+	Quat_SetFromEuler(Euler?: Vector): {Q: Quat};
+	Quat_Size(): number;
+	Quat_SizeSquared(): number;
+	Quat_UnrotateVector(V: Vector): Vector;
+	Quat_VectorForward(): Vector;
+	Quat_VectorRight(): Vector;
+	Quat_VectorUp(): Vector;
+	Subtract_QuatQuat(B: Quat): Quat;
+	static SetBaseOrientation(InBaseOrientation: Quat): void;
+	static Add_QuatQuat(A: Quat,B: Quat): Quat;
+	static EqualEqual_QuatQuat(A: Quat,B: Quat,Tolerance: number): boolean;
+	static Multiply_QuatQuat(A: Quat,B: Quat): Quat;
+	static NotEqual_QuatQuat(A: Quat,B: Quat,ErrorTolerance: number): boolean;
+	static Quat_AngularDistance(A: Quat,B: Quat): number;
+	static Quat_EnforceShortestArcWith(A?: Quat,B?: Quat): {A: Quat};
+	static Quat_Euler(Q: Quat): Vector;
+	static Quat_Exp(Q: Quat): Quat;
+	static Quat_GetAngle(Q: Quat): number;
+	static Quat_GetAxisX(Q: Quat): Vector;
+	static Quat_GetAxisY(Q: Quat): Vector;
+	static Quat_GetAxisZ(Q: Quat): Vector;
+	static Quat_GetRotationAxis(Q: Quat): Vector;
+	static Quat_Inversed(Q: Quat): Quat;
+	static Quat_IsFinite(Q: Quat): boolean;
+	static Quat_IsIdentity(Q: Quat,Tolerance: number): boolean;
+	static Quat_IsNonFinite(Q: Quat): boolean;
+	static Quat_IsNormalized(Q: Quat): boolean;
+	static Quat_Log(Q: Quat): Quat;
+	static Quat_Normalize(Q?: Quat,Tolerance?: number): {Q: Quat};
+	static Quat_Normalized(Q: Quat,Tolerance: number): Quat;
+	static Quat_RotateVector(Q: Quat,V: Vector): Vector;
+	static Quat_Rotator(Q: Quat): Rotator;
+	static Quat_SetComponents(Q?: Quat,X?: number,Y?: number,Z?: number,W?: number): {Q: Quat};
+	static Quat_SetFromEuler(Q?: Quat,Euler?: Vector): {Q: Quat};
+	static Quat_Size(Q: Quat): number;
+	static Quat_SizeSquared(Q: Quat): number;
+	static Quat_UnrotateVector(Q: Quat,V: Vector): Vector;
+	static Quat_VectorForward(Q: Quat): Vector;
+	static Quat_VectorRight(Q: Quat): Vector;
+	static Quat_VectorUp(Q: Quat): Vector;
+	static Subtract_QuatQuat(A: Quat,B: Quat): Quat;
+	static Quat_Identity(): Quat;
+}
+
+declare type ELerpInterpolationMode = 'QuatInterp' | 'EulerInterp' | 'DualQuatInterp' | 'ELerpInterpolationMode_MAX';
+declare var ELerpInterpolationMode : { QuatInterp:'QuatInterp',EulerInterp:'EulerInterp',DualQuatInterp:'DualQuatInterp',ELerpInterpolationMode_MAX:'ELerpInterpolationMode_MAX', };
+declare class Transform { 
+	Rotation: Quat;
+	Translation: Vector;
+	Scale3d: Vector;
+	clone() : Transform;
+	static C(Other: UObject | any): Transform;
+	Conv_TransformToText(): string;
+	Conv_TransformToString(): string;
+	BreakTransform(Location?: Vector,Rotation?: Rotator,Scale?: Vector): {Location: Vector, Rotation: Rotator, Scale: Vector};
+	ComposeTransforms(B: Transform): Transform;
+	ConvertTransformToRelative(ParentTransform: Transform): Transform;
+	EqualEqual_TransformTransform(B: Transform): boolean;
+	InverseTransformDirection(Direction: Vector): Vector;
+	InverseTransformLocation(Location: Vector): Vector;
+	InverseTransformRotation(Rotation: Rotator): Rotator;
+	InvertTransform(): Transform;
+	MakeRelativeTransform(RelativeTo: Transform): Transform;
+	NearlyEqual_TransformTransform(B: Transform,LocationTolerance: number,RotationTolerance: number,Scale3DTolerance: number): boolean;
+	SelectTransform(B: Transform,bPickA: boolean): Transform;
+	TEase(B: Transform,Alpha: number,EasingFunc: EEasingFunc,BlendExp: number,Steps: number): Transform;
+	TInterpTo(Target: Transform,DeltaTime: number,InterpSpeed: number): Transform;
+	TLerp(B: Transform,Alpha: number,InterpMode: ELerpInterpolationMode): Transform;
+	Transform_Determinant(): number;
+	TransformDirection(Direction: Vector): Vector;
+	TransformLocation(Location: Vector): Vector;
+	TransformRotation(Rotation: Rotator): Rotator;
+	K2_LookAt(TargetPosition: Vector,LookAtVector: Vector,bUseUpVector: boolean,UpVector: Vector,ClampConeInDegree: number): Transform;
+	CalibrateExternalTrackingToHMD(): void;
+	UpdateExternalTrackingHMDPosition(): void;
+	SetAlignmentTransform(): void;
+	static Conv_TransformToText(InTrans: Transform): string;
+	static Conv_TransformToString(InTrans: Transform): string;
+	static BreakTransform(InTransform: Transform,Location?: Vector,Rotation?: Rotator,Scale?: Vector): {Location: Vector, Rotation: Rotator, Scale: Vector};
+	static ComposeTransforms(A: Transform,B: Transform): Transform;
+	static ConvertTransformToRelative(Transform: Transform,ParentTransform: Transform): Transform;
+	static EqualEqual_TransformTransform(A: Transform,B: Transform): boolean;
+	static InverseTransformDirection(T: Transform,Direction: Vector): Vector;
+	static InverseTransformLocation(T: Transform,Location: Vector): Vector;
+	static InverseTransformRotation(T: Transform,Rotation: Rotator): Rotator;
+	static InvertTransform(T: Transform): Transform;
+	static MakeRelativeTransform(A: Transform,RelativeTo: Transform): Transform;
+	static NearlyEqual_TransformTransform(A: Transform,B: Transform,LocationTolerance: number,RotationTolerance: number,Scale3DTolerance: number): boolean;
+	static SelectTransform(A: Transform,B: Transform,bPickA: boolean): Transform;
+	static TEase(A: Transform,B: Transform,Alpha: number,EasingFunc: EEasingFunc,BlendExp: number,Steps: number): Transform;
+	static TInterpTo(Current: Transform,Target: Transform,DeltaTime: number,InterpSpeed: number): Transform;
+	static TLerp(A: Transform,B: Transform,Alpha: number,InterpMode: ELerpInterpolationMode): Transform;
+	static Transform_Determinant(Transform: Transform): number;
+	static TransformDirection(T: Transform,Direction: Vector): Vector;
+	static TransformLocation(T: Transform,Location: Vector): Vector;
+	static TransformRotation(T: Transform,Rotation: Rotator): Rotator;
+	static K2_LookAt(CurrentTransform: Transform,TargetPosition: Vector,LookAtVector: Vector,bUseUpVector: boolean,UpVector: Vector,ClampConeInDegree: number): Transform;
+	static CalibrateExternalTrackingToHMD(ExternalTrackingTransform: Transform): void;
+	static UpdateExternalTrackingHMDPosition(ExternalTrackingTransform: Transform): void;
+	static SetAlignmentTransform(InAlignmentTransform: Transform): void;
+	static GetPlayAreaTransform(): Transform;
+}
+
 declare class Guid { 
 	A: number;
 	B: number;
@@ -385,70 +389,222 @@ declare class Guid {
 	static NewGuid(): Guid;
 }
 
-declare type EPassableWorldError = 'None' | 'LowMapQuality' | 'UnableToLocalize' | 'Unavailable' | 'PrivilegeDenied' | 'InvalidParam' | 'UnspecifiedFailure' | 'PrivilegeRequestPending' | 'EPassableWorldError_MAX';
-declare var EPassableWorldError : { None:'None',LowMapQuality:'LowMapQuality',UnableToLocalize:'UnableToLocalize',Unavailable:'Unavailable',PrivilegeDenied:'PrivilegeDenied',InvalidParam:'InvalidParam',UnspecifiedFailure:'UnspecifiedFailure',PrivilegeRequestPending:'PrivilegeRequestPending',EPassableWorldError_MAX:'EPassableWorldError_MAX', };
-declare class Color { 
-	B: number;
-	G: number;
-	R: number;
-	A: number;
-	clone() : Color;
-	static C(Other: UObject | any): Color;
-	Conv_ColorToLinearColor(): LinearColor;
-	static Conv_ColorToLinearColor(InColor: Color): LinearColor;
+declare type EARTrackingState = 'Unknown' | 'Tracking' | 'NotTracking' | 'StoppedTracking' | 'EARTrackingState_MAX';
+declare var EARTrackingState : { Unknown:'Unknown',Tracking:'Tracking',NotTracking:'NotTracking',StoppedTracking:'StoppedTracking',EARTrackingState_MAX:'EARTrackingState_MAX', };
+declare class ActorComponentTickFunction extends TickFunction { 
+	clone() : ActorComponentTickFunction;
+	static C(Other: UObject | any): ActorComponentTickFunction;
 }
 
-declare class LinearColor { 
-	R: number;
-	G: number;
-	B: number;
-	A: number;
-	clone() : LinearColor;
-	static C(Other: UObject | any): LinearColor;
-	Conv_ColorToText(): string;
-	Conv_ColorToString(): string;
-	BreakColor(R?: number,G?: number,B?: number,A?: number): {R: number, G: number, B: number, A: number};
-	CInterpTo(Target: LinearColor,DeltaTime: number,InterpSpeed: number): LinearColor;
-	Conv_LinearColorToColor(): Color;
-	Conv_LinearColorToVector(): Vector;
-	HSVToRGB_Vector(RGB?: LinearColor): {RGB: LinearColor};
-	LinearColorLerp(B: LinearColor,Alpha: number): LinearColor;
-	LinearColorLerpUsingHSV(B: LinearColor,Alpha: number): LinearColor;
-	Multiply_LinearColorFloat(B: number): LinearColor;
-	Multiply_LinearColorLinearColor(B: LinearColor): LinearColor;
-	RGBToHSV(H?: number,S?: number,V?: number,A?: number): {H: number, S: number, V: number, A: number};
-	RGBToHSV_Vector(HSV?: LinearColor): {HSV: LinearColor};
-	SelectColor(B: LinearColor,bPickA: boolean): LinearColor;
-	static Conv_ColorToText(InColor: LinearColor): string;
+declare class AssetUserData extends UObject { 
+	static Load(ResourceName: string): AssetUserData;
+	static Find(Outer: UObject, ResourceName: string): AssetUserData;
+	static GetDefaultObject(): AssetUserData;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetUserData;
+	static C(Other: UObject | any): AssetUserData;
+}
+
+declare type EComponentCreationMethod = 'Native' | 'SimpleConstructionScript' | 'UserConstructionScript' | 'Instance' | 'EComponentCreationMethod_MAX';
+declare var EComponentCreationMethod : { Native:'Native',SimpleConstructionScript:'SimpleConstructionScript',UserConstructionScript:'UserConstructionScript',Instance:'Instance',EComponentCreationMethod_MAX:'EComponentCreationMethod_MAX', };
+declare class SimpleMemberReference { 
+	MemberParent: UObject;
+	MemberName: string;
+	MemberGuid: Guid;
+	clone() : SimpleMemberReference;
+	static C(Other: UObject | any): SimpleMemberReference;
+}
+
+declare type EEndPlayReason = 'Destroyed' | 'LevelTransition' | 'EndPlayInEditor' | 'RemovedFromWorld' | 'Quit' | 'EEndPlayReason_MAX';
+declare var EEndPlayReason : { Destroyed:'Destroyed',LevelTransition:'LevelTransition',EndPlayInEditor:'EndPlayInEditor',RemovedFromWorld:'RemovedFromWorld',Quit:'Quit',EEndPlayReason_MAX:'EEndPlayReason_MAX', };
+declare class ActorComponent extends UObject { 
+	PrimaryComponentTick: ActorComponentTickFunction;
+	ComponentTags: string[];
+	AssetUserData: AssetUserData[];
+	bReplicates: boolean;
+	bNetAddressable: boolean;
+	bCreatedByConstructionScript: boolean;
+	bInstanceComponent: boolean;
+	bAutoActivate: boolean;
+	bIsActive: boolean;
+	bEditableWhenInherited: boolean;
+	bCanEverAffectNavigation: boolean;
+	bIsEditorOnly: boolean;
+	bIsVisualizationComponent: boolean;
+	CreationMethod: EComponentCreationMethod;
+	OnComponentActivated: UnrealEngineMulticastDelegate<(Component: ActorComponent, bReset: boolean) => void>;
+	OnComponentDeactivated: UnrealEngineMulticastDelegate<(Component: ActorComponent) => void>;
+	UCSModifiedProperties: SimpleMemberReference[];
+	static Load(ResourceName: string): ActorComponent;
+	static Find(Outer: UObject, ResourceName: string): ActorComponent;
+	static GetDefaultObject(): ActorComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorComponent;
+	ToggleActive(): void;
+	SetTickGroup(NewTickGroup: ETickingGroup): void;
+	SetTickableWhenPaused(bTickableWhenPaused: boolean): void;
+	SetIsReplicated(ShouldReplicate: boolean): void;
+	SetComponentTickInterval(TickInterval: number): void;
+	SetComponentTickEnabled(bEnabled: boolean): void;
+	SetAutoActivate(bNewAutoActivate: boolean): void;
+	SetActive(bNewActive: boolean,bReset: boolean): void;
+	RemoveTickPrerequisiteComponent(PrerequisiteComponent: ActorComponent): void;
+	RemoveTickPrerequisiteActor(PrerequisiteActor: Actor): void;
+	ReceiveTick(DeltaSeconds: number): void;
+	ReceiveEndPlay(EndPlayReason: EEndPlayReason): void;
+	ReceiveBeginPlay(): void;
+	OnRep_IsActive(): void;
+	K2_DestroyComponent(UObject: UObject): void;
+	IsComponentTickEnabled(): boolean;
+	IsBeingDestroyed(): boolean;
+	IsActive(): boolean;
+	GetOwner(): Actor;
+	GetComponentTickInterval(): number;
+	Deactivate(): void;
+	ComponentHasTag(Tag: string): boolean;
+	AddTickPrerequisiteComponent(PrerequisiteComponent: ActorComponent): void;
+	AddTickPrerequisiteActor(PrerequisiteActor: Actor): void;
+	Activate(bReset: boolean): void;
+	static C(Other: UObject | any): ActorComponent;
+	IsRegistered(): boolean;
+	MarkRenderStateDirty(): void;
+	RegisterComponent(): void;
+	ReregisterComponent(): void;
+	UnregisterComponent(): void;
+	static IsRegistered(ActorComponent: ActorComponent): boolean;
+	static MarkRenderStateDirty(Component: ActorComponent): void;
+	static RegisterComponent(ActorComponent: ActorComponent): void;
+	static ReregisterComponent(ActorComponent: ActorComponent): void;
+	static UnregisterComponent(ActorComponent: ActorComponent): void;
+}
+
+declare type EComponentMobility = 'Static' | 'Stationary' | 'Movable' | 'EComponentMobility_MAX';
+declare var EComponentMobility : { Static:'Static',Stationary:'Stationary',Movable:'Movable',EComponentMobility_MAX:'EComponentMobility_MAX', };
+declare type EDetailMode = 'DM_Low' | 'DM_Medium' | 'DM_High' | 'DM_MAX';
+declare var EDetailMode : { DM_Low:'DM_Low',DM_Medium:'DM_Medium',DM_High:'DM_High',DM_MAX:'DM_MAX', };
+declare type EBrushType = 'Brush_Default' | 'Brush_Add' | 'Brush_Subtract' | 'Brush_MAX';
+declare var EBrushType : { Brush_Default:'Brush_Default',Brush_Add:'Brush_Add',Brush_Subtract:'Brush_Subtract',Brush_MAX:'Brush_MAX', };
+declare class LinearColor { 
+	R: number;
+	G: number;
+	B: number;
+	A: number;
+	clone() : LinearColor;
+	static C(Other: UObject | any): LinearColor;
+	SetColorScaleAndOffset(ColorOffset: LinearColor,bApplyToAllLayers: boolean): void;
+	Conv_ColorToText(): string;
+	Conv_ColorToString(): string;
+	Add_LinearColorLinearColor(B: LinearColor): LinearColor;
+	BreakColor(R?: number,G?: number,B?: number,A?: number): {R: number, G: number, B: number, A: number};
+	CInterpTo(Target: LinearColor,DeltaTime: number,InterpSpeed: number): LinearColor;
+	Conv_LinearColorToColor(InUseSRGB: boolean): Color;
+	Conv_LinearColorToVector(): Vector;
+	Divide_LinearColorLinearColor(B: LinearColor): LinearColor;
+	EqualEqual_LinearColorLinearColor(B: LinearColor): boolean;
+	HSVToRGB_Vector(RGB?: LinearColor): {RGB: LinearColor};
+	HSVToRGBLinear(): LinearColor;
+	LinearColor_Desaturated(InDesaturation: number): LinearColor;
+	LinearColor_Distance(C2: LinearColor): number;
+	LinearColor_GetLuminance(): number;
+	LinearColor_GetMax(): number;
+	LinearColor_GetMin(): number;
+	LinearColor_IsNearEqual(B: LinearColor,Tolerance: number): boolean;
+	LinearColor_Quantize(): Color;
+	LinearColor_QuantizeRound(): Color;
+	LinearColor_Set(InColor?: LinearColor): {InOutColor: LinearColor};
+	LinearColor_SetFromHSV(H?: number,S?: number,V?: number,A?: number): {InOutColor: LinearColor};
+	LinearColor_SetFromPow22(InColor?: Color): {InOutColor: LinearColor};
+	LinearColor_SetFromSRGB(InSRGB?: Color): {InOutColor: LinearColor};
+	LinearColor_SetRandomHue(): {InOutColor: LinearColor};
+	LinearColor_SetRGBA(R?: number,G?: number,B?: number,A?: number): {InOutColor: LinearColor};
+	LinearColor_SetTemperature(InTemperature?: number): {InOutColor: LinearColor};
+	LinearColor_ToNewOpacity(InOpacity: number): LinearColor;
+	LinearColor_ToRGBE(): Color;
+	LinearColorLerp(B: LinearColor,Alpha: number): LinearColor;
+	LinearColorLerpUsingHSV(B: LinearColor,Alpha: number): LinearColor;
+	Multiply_LinearColorFloat(B: number): LinearColor;
+	Multiply_LinearColorLinearColor(B: LinearColor): LinearColor;
+	NotEqual_LinearColorLinearColor(B: LinearColor): boolean;
+	RGBLinearToHSV(): LinearColor;
+	RGBToHSV(H?: number,S?: number,V?: number,A?: number): {H: number, S: number, V: number, A: number};
+	RGBToHSV_Vector(HSV?: LinearColor): {HSV: LinearColor};
+	SelectColor(B: LinearColor,bPickA: boolean): LinearColor;
+	Subtract_LinearColorLinearColor(B: LinearColor): LinearColor;
+	static SetColorScaleAndOffset(ColorScale: LinearColor,ColorOffset: LinearColor,bApplyToAllLayers: boolean): void;
+	static Conv_ColorToText(InColor: LinearColor): string;
 	static Conv_ColorToString(InColor: LinearColor): string;
+	static Add_LinearColorLinearColor(A: LinearColor,B: LinearColor): LinearColor;
 	static BreakColor(InColor: LinearColor,R?: number,G?: number,B?: number,A?: number): {R: number, G: number, B: number, A: number};
 	static CInterpTo(Current: LinearColor,Target: LinearColor,DeltaTime: number,InterpSpeed: number): LinearColor;
-	static Conv_LinearColorToColor(InLinearColor: LinearColor): Color;
+	static Conv_LinearColorToColor(InLinearColor: LinearColor,InUseSRGB: boolean): Color;
 	static Conv_LinearColorToVector(InLinearColor: LinearColor): Vector;
+	static Divide_LinearColorLinearColor(A: LinearColor,B: LinearColor): LinearColor;
+	static EqualEqual_LinearColorLinearColor(A: LinearColor,B: LinearColor): boolean;
 	static HSVToRGB_Vector(HSV: LinearColor,RGB?: LinearColor): {RGB: LinearColor};
+	static HSVToRGBLinear(HSV: LinearColor): LinearColor;
+	static LinearColor_Desaturated(InColor: LinearColor,InDesaturation: number): LinearColor;
+	static LinearColor_Distance(C1: LinearColor,C2: LinearColor): number;
+	static LinearColor_GetLuminance(InColor: LinearColor): number;
+	static LinearColor_GetMax(InColor: LinearColor): number;
+	static LinearColor_GetMin(InColor: LinearColor): number;
+	static LinearColor_IsNearEqual(A: LinearColor,B: LinearColor,Tolerance: number): boolean;
+	static LinearColor_Quantize(InColor: LinearColor): Color;
+	static LinearColor_QuantizeRound(InColor: LinearColor): Color;
+	static LinearColor_Set(InOutColor?: LinearColor,InColor?: LinearColor): {InOutColor: LinearColor};
+	static LinearColor_SetFromHSV(InOutColor?: LinearColor,H?: number,S?: number,V?: number,A?: number): {InOutColor: LinearColor};
+	static LinearColor_SetFromPow22(InOutColor?: LinearColor,InColor?: Color): {InOutColor: LinearColor};
+	static LinearColor_SetFromSRGB(InOutColor?: LinearColor,InSRGB?: Color): {InOutColor: LinearColor};
+	static LinearColor_SetRandomHue(InOutColor?: LinearColor): {InOutColor: LinearColor};
+	static LinearColor_SetRGBA(InOutColor?: LinearColor,R?: number,G?: number,B?: number,A?: number): {InOutColor: LinearColor};
+	static LinearColor_SetTemperature(InOutColor?: LinearColor,InTemperature?: number): {InOutColor: LinearColor};
+	static LinearColor_ToNewOpacity(InColor: LinearColor,InOpacity: number): LinearColor;
+	static LinearColor_ToRGBE(InLinearColor: LinearColor): Color;
 	static LinearColorLerp(A: LinearColor,B: LinearColor,Alpha: number): LinearColor;
 	static LinearColorLerpUsingHSV(A: LinearColor,B: LinearColor,Alpha: number): LinearColor;
 	static Multiply_LinearColorFloat(A: LinearColor,B: number): LinearColor;
 	static Multiply_LinearColorLinearColor(A: LinearColor,B: LinearColor): LinearColor;
+	static NotEqual_LinearColorLinearColor(A: LinearColor,B: LinearColor): boolean;
+	static RGBLinearToHSV(RGB: LinearColor): LinearColor;
 	static RGBToHSV(InColor: LinearColor,H?: number,S?: number,V?: number,A?: number): {H: number, S: number, V: number, A: number};
 	static RGBToHSV_Vector(RGB: LinearColor,HSV?: LinearColor): {HSV: LinearColor};
 	static SelectColor(A: LinearColor,B: LinearColor,bPickA: boolean): LinearColor;
+	static Subtract_LinearColorLinearColor(A: LinearColor,B: LinearColor): LinearColor;
 	static Conv_FloatToLinearColor(InFloat: number): LinearColor;
 	static HSVToRGB(H: number,S: number,V: number,A: number): LinearColor;
+	static LinearColor_Black(): LinearColor;
+	static LinearColor_Blue(): LinearColor;
+	static LinearColor_Gray(): LinearColor;
+	static LinearColor_Green(): LinearColor;
+	static LinearColor_Red(): LinearColor;
+	static LinearColor_Transparent(): LinearColor;
+	static LinearColor_White(): LinearColor;
+	static LinearColor_Yellow(): LinearColor;
 	static MakeColor(R: number,G: number,B: number,A: number): LinearColor;
 }
 
-declare class IntVector { 
-	X: number;
-	Y: number;
-	Z: number;
-	clone() : IntVector;
-	static C(Other: UObject | any): IntVector;
-	Conv_IntVectorToString(): string;
-	Conv_IntVectorToVector(): Vector;
-	static Conv_IntVectorToString(InIntVec: IntVector): string;
-	static Conv_IntVectorToVector(InIntVector: IntVector): Vector;
-	static Conv_IntToIntVector(inInt: number): IntVector;
+declare class Color { 
+	B: number;
+	G: number;
+	R: number;
+	A: number;
+	clone() : Color;
+	static C(Other: UObject | any): Color;
+	Conv_ColorToLinearColor(): LinearColor;
+	static Conv_ColorToLinearColor(InColor: Color): LinearColor;
+}
+
+declare class Model extends UObject { 
+	static Load(ResourceName: string): Model;
+	static Find(Outer: UObject, ResourceName: string): Model;
+	static GetDefaultObject(): Model;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Model;
+	static C(Other: UObject | any): Model;
+}
+
+declare class KShapeElem { 
+	RestOffset: number;
+	Name: string;
+	bContributeToMass: boolean;
+	clone() : KShapeElem;
+	static C(Other: UObject | any): KShapeElem;
 }
 
 declare class Plane extends Vector { 
@@ -457,6 +613,52 @@ declare class Plane extends Vector {
 	static C(Other: UObject | any): Plane;
 }
 
+declare class Matrix { 
+	XPlane: Plane;
+	YPlane: Plane;
+	ZPlane: Plane;
+	WPlane: Plane;
+	clone() : Matrix;
+	static C(Other: UObject | any): Matrix;
+	Conv_MatrixToRotator(): Rotator;
+	Conv_MatrixToTransform(): Transform;
+	Matrix_GetOrigin(): Vector;
+	static Conv_MatrixToRotator(InMatrix: Matrix): Rotator;
+	static Conv_MatrixToTransform(InMatrix: Matrix): Transform;
+	static Matrix_GetOrigin(InMatrix: Matrix): Vector;
+}
+
+declare class KSphereElem extends KShapeElem { 
+	TM: Matrix;
+	Center: Vector;
+	Radius: number;
+	clone() : KSphereElem;
+	static C(Other: UObject | any): KSphereElem;
+}
+
+declare class KBoxElem extends KShapeElem { 
+	TM: Matrix;
+	Orientation: Quat;
+	Center: Vector;
+	Rotation: Rotator;
+	X: number;
+	Y: number;
+	Z: number;
+	clone() : KBoxElem;
+	static C(Other: UObject | any): KBoxElem;
+}
+
+declare class KSphylElem extends KShapeElem { 
+	TM: Matrix;
+	Orientation: Quat;
+	Center: Vector;
+	Rotation: Rotator;
+	Radius: number;
+	Length: number;
+	clone() : KSphylElem;
+	static C(Other: UObject | any): KSphylElem;
+}
+
 declare class Box { 
 	Min: Vector;
 	Max: Vector;
@@ -465,363 +667,107 @@ declare class Box {
 	static C(Other: UObject | any): Box;
 }
 
-declare class VectorSpringState { 
-	clone() : VectorSpringState;
-	static C(Other: UObject | any): VectorSpringState;
-	ResetVectorSpringState(): {SpringState: VectorSpringState};
-	static ResetVectorSpringState(SpringState?: VectorSpringState): {SpringState: VectorSpringState};
+declare class KConvexElem extends KShapeElem { 
+	VertexData: Vector[];
+	ElemBox: Box;
+	Transform: Transform;
+	clone() : KConvexElem;
+	static C(Other: UObject | any): KConvexElem;
 }
 
-declare class Vector { 
-	X: number;
-	Y: number;
-	Z: number;
-	clone() : Vector;
-	static C(Other: UObject | any): Vector;
-	SegmentIntersection2D(SegmentEndA: Vector,SegmentStartB: Vector,SegmentEndB: Vector,IntersectionPoint?: Vector): {IntersectionPoint: Vector, $: boolean};
-	GenerateBoxMesh(Vertices?: Vector[],Triangles?: number[],Normals?: Vector[],UVs?: Vector2D[],Tangents?: ProcMeshTangent[]): {Vertices: Vector[], Triangles: number[], Normals: Vector[], UVs: Vector2D[], Tangents: ProcMeshTangent[]};
-	GetPointGuardianIntersection(BoundaryType: EBoundaryType): GuardianTestResult;
-	GetRawSensorData(LinearAcceleration?: Vector,AngularVelocity?: Vector,LinearVelocity?: Vector,TimeInSeconds?: number,DeviceType?: ETrackedDeviceType): {AngularAcceleration: Vector, LinearAcceleration: Vector, AngularVelocity: Vector, LinearVelocity: Vector, TimeInSeconds: number};
-	SetPositionScale3D(): void;
-	SetBasePosition(): void;
-	GetClosestARPin(PinID?: Guid): {PinID: Guid, $: EPassableWorldError};
-	Conv_VectorToText(): string;
-	Conv_VectorToString(): string;
-	Add_VectorFloat(B: number): Vector;
-	Add_VectorInt(B: number): Vector;
-	Add_VectorVector(B: Vector): Vector;
-	BreakVector(X?: number,Y?: number,Z?: number): {X: number, Y: number, Z: number};
-	ClampVectorSize(Min: number,Max: number): Vector;
-	Conv_VectorToLinearColor(): LinearColor;
-	Conv_VectorToRotator(): Rotator;
-	Conv_VectorToTransform(): Transform;
-	Conv_VectorToVector2D(): Vector2D;
-	Cross_VectorVector(B: Vector): Vector;
-	Divide_VectorFloat(B: number): Vector;
-	Divide_VectorInt(B: number): Vector;
-	Divide_VectorVector(B: Vector): Vector;
-	Dot_VectorVector(B: Vector): number;
-	EqualEqual_VectorVector(B: Vector,ErrorTolerance: number): boolean;
-	FindClosestPointOnLine(LineOrigin: Vector,LineDirection: Vector): Vector;
-	FindClosestPointOnSegment(SegmentStart: Vector,SegmentEnd: Vector): Vector;
-	FindLookAtRotation(Target: Vector): Rotator;
-	FindNearestPointsOnLineSegments(Segment1End: Vector,Segment2Start: Vector,Segment2End: Vector,Segment1Point?: Vector,Segment2Point?: Vector): {Segment1Point: Vector, Segment2Point: Vector};
-	FTruncVector(): IntVector;
-	GetAzimuthAndElevation(ReferenceFrame: Transform,Azimuth?: number,Elevation?: number): {Azimuth: number, Elevation: number};
-	GetDirectionUnitVector(To: Vector): Vector;
-	GetMaxElement(): number;
-	GetMinElement(): number;
-	GetPointDistanceToLine(LineOrigin: Vector,LineDirection: Vector): number;
-	GetPointDistanceToSegment(SegmentStart: Vector,SegmentEnd: Vector): number;
-	GetReflectionVector(SurfaceNormal: Vector): Vector;
-	GetSlopeDegreeAngles(FloorNormal: Vector,UpVector: Vector,OutSlopePitchDegreeAngle?: number,OutSlopeRollDegreeAngle?: number): {OutSlopePitchDegreeAngle: number, OutSlopeRollDegreeAngle: number};
-	GetYawPitchFromVector(Yaw?: number,Pitch?: number): {Yaw: number, Pitch: number};
-	GreaterGreater_VectorRotator(B: Rotator): Vector;
-	IsPointInBox(BoxOrigin: Vector,BoxExtent: Vector): boolean;
-	IsPointInBoxWithTransform(BoxWorldTransform: Transform,BoxExtent: Vector): boolean;
-	LessLess_VectorRotator(B: Rotator): Vector;
-	LinePlaneIntersection(LineEnd: Vector,APlane: Plane,T?: number,Intersection?: Vector): {T: number, Intersection: Vector, $: boolean};
-	LinePlaneIntersection_OriginNormal(LineEnd: Vector,PlaneOrigin: Vector,PlaneNormal: Vector,T?: number,Intersection?: Vector): {T: number, Intersection: Vector, $: boolean};
-	MakeBox(Max: Vector): Box;
-	MakePlaneFromPointAndNormal(Normal: Vector): Plane;
-	MakeRotationFromAxes(Right: Vector,Up: Vector): Rotator;
-	MakeRotFromX(): Rotator;
-	MakeRotFromXY(Y: Vector): Rotator;
-	MakeRotFromXZ(Z: Vector): Rotator;
-	MakeRotFromY(): Rotator;
-	MakeRotFromYX(X: Vector): Rotator;
-	MakeRotFromYZ(Z: Vector): Rotator;
-	MakeRotFromZ(): Rotator;
-	MakeRotFromZX(X: Vector): Rotator;
-	MakeRotFromZY(Y: Vector): Rotator;
-	MakeTransform(Rotation: Rotator,Scale: Vector): Transform;
-	MirrorVectorByNormal(InNormal: Vector): Vector;
-	Multiply_VectorFloat(B: number): Vector;
-	Multiply_VectorInt(B: number): Vector;
-	Multiply_VectorVector(B: Vector): Vector;
-	NegateVector(): Vector;
-	Normal(): Vector;
-	NotEqual_VectorVector(B: Vector,ErrorTolerance: number): boolean;
-	ProjectPointOnToPlane(PlaneBase: Vector,PlaneNormal: Vector): Vector;
-	ProjectVectorOnToPlane(PlaneNormal: Vector): Vector;
-	ProjectVectorOnToVector(Target: Vector): Vector;
-	RandomPointInBoundingBox(BoxExtent: Vector): Vector;
-	RandomUnitVectorInConeInDegrees(ConeHalfAngleInDegrees: number): Vector;
-	RandomUnitVectorInConeInDegreesFromStream(ConeHalfAngleInDegrees: number,Stream: RandomStream): Vector;
-	RandomUnitVectorInConeInRadians(ConeHalfAngleInRadians: number): Vector;
-	RandomUnitVectorInConeInRadiansFromStream(ConeHalfAngleInRadians: number,Stream: RandomStream): Vector;
-	RandomUnitVectorInEllipticalConeInDegrees(MaxYawInDegrees: number,MaxPitchInDegrees: number): Vector;
-	RandomUnitVectorInEllipticalConeInDegreesFromStream(MaxYawInDegrees: number,MaxPitchInDegrees: number,Stream: RandomStream): Vector;
-	RandomUnitVectorInEllipticalConeInRadians(MaxYawInRadians: number,MaxPitchInRadians: number): Vector;
-	RandomUnitVectorInEllipticalConeInRadiansFromStream(MaxYawInRadians: number,MaxPitchInRadians: number,Stream: RandomStream): Vector;
-	RotateAngleAxis(AngleDeg: number,Axis: Vector): Vector;
-	RotatorFromAxisAndAngle(Angle: number): Rotator;
-	SelectVector(B: Vector,bPickA: boolean): Vector;
-	Subtract_VectorFloat(B: number): Vector;
-	Subtract_VectorInt(B: number): Vector;
-	Subtract_VectorVector(B: Vector): Vector;
-	VEase(B: Vector,Alpha: number,EasingFunc: EEasingFunc,BlendExp: number,Steps: number): Vector;
-	VectorSpringInterp(Target: Vector,SpringState?: VectorSpringState,Stiffness?: number,CriticalDampingFactor?: number,DeltaTime?: number,Mass?: number): {SpringState: VectorSpringState, $: Vector};
-	VInterpTo(Target: Vector,DeltaTime: number,InterpSpeed: number): Vector;
-	VInterpTo_Constant(Target: Vector,DeltaTime: number,InterpSpeed: number): Vector;
-	VLerp(B: Vector,Alpha: number): Vector;
-	VSize(): number;
-	VSizeSquared(): number;
-	VSizeXY(): number;
-	K2_TwoBoneIK(JointPos: Vector,EndPos: Vector,JointTarget: Vector,Effector: Vector,OutJointPos?: Vector,OutEndPos?: Vector,bAllowStretching?: boolean,StartStretchRatio?: number,MaxStretchScale?: number): {OutJointPos: Vector, OutEndPos: Vector};
-	IsValidAIDirection(): boolean;
-	IsValidAILocation(): boolean;
-	GetPositionalTrackingCameraParameters(CameraRotation?: Rotator,HFOV?: number,VFOV?: number,CameraDistance?: number,NearPlane?: number,FarPlane?: number): {CameraOrigin: Vector, CameraRotation: Rotator, HFOV: number, VFOV: number, CameraDistance: number, NearPlane: number, FarPlane: number};
-	GetTrackingSensorParameters(Rotation?: Rotator,LeftFOV?: number,RightFOV?: number,TopFOV?: number,BottomFOV?: number,Distance?: number,NearPlane?: number,FarPlane?: number,IsActive?: boolean,index?: number): {Origin: Vector, Rotation: Rotator, LeftFOV: number, RightFOV: number, TopFOV: number, BottomFOV: number, Distance: number, NearPlane: number, FarPlane: number, IsActive: boolean};
-	static SegmentIntersection2D(SegmentStartA: Vector,SegmentEndA: Vector,SegmentStartB: Vector,SegmentEndB: Vector,IntersectionPoint?: Vector): {IntersectionPoint: Vector, $: boolean};
-	static GenerateBoxMesh(BoxRadius: Vector,Vertices?: Vector[],Triangles?: number[],Normals?: Vector[],UVs?: Vector2D[],Tangents?: ProcMeshTangent[]): {Vertices: Vector[], Triangles: number[], Normals: Vector[], UVs: Vector2D[], Tangents: ProcMeshTangent[]};
-	static GetPointGuardianIntersection(Point: Vector,BoundaryType: EBoundaryType): GuardianTestResult;
-	static GetRawSensorData(AngularAcceleration?: Vector,LinearAcceleration?: Vector,AngularVelocity?: Vector,LinearVelocity?: Vector,TimeInSeconds?: number,DeviceType?: ETrackedDeviceType): {AngularAcceleration: Vector, LinearAcceleration: Vector, AngularVelocity: Vector, LinearVelocity: Vector, TimeInSeconds: number};
-	static SetPositionScale3D(PosScale3D: Vector): void;
-	static SetBasePosition(InBasePosition: Vector): void;
-	static GetClosestARPin(SearchPoint: Vector,PinID?: Guid): {PinID: Guid, $: EPassableWorldError};
-	static Conv_VectorToText(InVec: Vector): string;
-	static Conv_VectorToString(InVec: Vector): string;
-	static Add_VectorFloat(A: Vector,B: number): Vector;
-	static Add_VectorInt(A: Vector,B: number): Vector;
-	static Add_VectorVector(A: Vector,B: Vector): Vector;
-	static BreakVector(InVec: Vector,X?: number,Y?: number,Z?: number): {X: number, Y: number, Z: number};
-	static ClampVectorSize(A: Vector,Min: number,Max: number): Vector;
-	static Conv_VectorToLinearColor(InVec: Vector): LinearColor;
-	static Conv_VectorToRotator(InVec: Vector): Rotator;
-	static Conv_VectorToTransform(InLocation: Vector): Transform;
-	static Conv_VectorToVector2D(InVector: Vector): Vector2D;
-	static Cross_VectorVector(A: Vector,B: Vector): Vector;
-	static Divide_VectorFloat(A: Vector,B: number): Vector;
-	static Divide_VectorInt(A: Vector,B: number): Vector;
-	static Divide_VectorVector(A: Vector,B: Vector): Vector;
-	static Dot_VectorVector(A: Vector,B: Vector): number;
-	static EqualEqual_VectorVector(A: Vector,B: Vector,ErrorTolerance: number): boolean;
-	static FindClosestPointOnLine(Point: Vector,LineOrigin: Vector,LineDirection: Vector): Vector;
-	static FindClosestPointOnSegment(Point: Vector,SegmentStart: Vector,SegmentEnd: Vector): Vector;
-	static FindLookAtRotation(Start: Vector,Target: Vector): Rotator;
-	static FindNearestPointsOnLineSegments(Segment1Start: Vector,Segment1End: Vector,Segment2Start: Vector,Segment2End: Vector,Segment1Point?: Vector,Segment2Point?: Vector): {Segment1Point: Vector, Segment2Point: Vector};
-	static FTruncVector(InVector: Vector): IntVector;
-	static GetAzimuthAndElevation(InDirection: Vector,ReferenceFrame: Transform,Azimuth?: number,Elevation?: number): {Azimuth: number, Elevation: number};
-	static GetDirectionUnitVector(From: Vector,To: Vector): Vector;
-	static GetMaxElement(A: Vector): number;
-	static GetMinElement(A: Vector): number;
-	static GetPointDistanceToLine(Point: Vector,LineOrigin: Vector,LineDirection: Vector): number;
-	static GetPointDistanceToSegment(Point: Vector,SegmentStart: Vector,SegmentEnd: Vector): number;
-	static GetReflectionVector(Direction: Vector,SurfaceNormal: Vector): Vector;
-	static GetSlopeDegreeAngles(MyRightYAxis: Vector,FloorNormal: Vector,UpVector: Vector,OutSlopePitchDegreeAngle?: number,OutSlopeRollDegreeAngle?: number): {OutSlopePitchDegreeAngle: number, OutSlopeRollDegreeAngle: number};
-	static GetYawPitchFromVector(InVec: Vector,Yaw?: number,Pitch?: number): {Yaw: number, Pitch: number};
-	static GreaterGreater_VectorRotator(A: Vector,B: Rotator): Vector;
-	static IsPointInBox(Point: Vector,BoxOrigin: Vector,BoxExtent: Vector): boolean;
-	static IsPointInBoxWithTransform(Point: Vector,BoxWorldTransform: Transform,BoxExtent: Vector): boolean;
-	static LessLess_VectorRotator(A: Vector,B: Rotator): Vector;
-	static LinePlaneIntersection(LineStart: Vector,LineEnd: Vector,APlane: Plane,T?: number,Intersection?: Vector): {T: number, Intersection: Vector, $: boolean};
-	static LinePlaneIntersection_OriginNormal(LineStart: Vector,LineEnd: Vector,PlaneOrigin: Vector,PlaneNormal: Vector,T?: number,Intersection?: Vector): {T: number, Intersection: Vector, $: boolean};
-	static MakeBox(Min: Vector,Max: Vector): Box;
-	static MakePlaneFromPointAndNormal(Point: Vector,Normal: Vector): Plane;
-	static MakeRotationFromAxes(Forward: Vector,Right: Vector,Up: Vector): Rotator;
-	static MakeRotFromX(X: Vector): Rotator;
-	static MakeRotFromXY(X: Vector,Y: Vector): Rotator;
-	static MakeRotFromXZ(X: Vector,Z: Vector): Rotator;
-	static MakeRotFromY(Y: Vector): Rotator;
-	static MakeRotFromYX(Y: Vector,X: Vector): Rotator;
-	static MakeRotFromYZ(Y: Vector,Z: Vector): Rotator;
-	static MakeRotFromZ(Z: Vector): Rotator;
-	static MakeRotFromZX(Z: Vector,X: Vector): Rotator;
-	static MakeRotFromZY(Z: Vector,Y: Vector): Rotator;
-	static MakeTransform(Location: Vector,Rotation: Rotator,Scale: Vector): Transform;
-	static MirrorVectorByNormal(InVect: Vector,InNormal: Vector): Vector;
-	static Multiply_VectorFloat(A: Vector,B: number): Vector;
-	static Multiply_VectorInt(A: Vector,B: number): Vector;
-	static Multiply_VectorVector(A: Vector,B: Vector): Vector;
-	static NegateVector(A: Vector): Vector;
-	static Normal(A: Vector): Vector;
-	static NotEqual_VectorVector(A: Vector,B: Vector,ErrorTolerance: number): boolean;
-	static ProjectPointOnToPlane(Point: Vector,PlaneBase: Vector,PlaneNormal: Vector): Vector;
-	static ProjectVectorOnToPlane(V: Vector,PlaneNormal: Vector): Vector;
-	static ProjectVectorOnToVector(V: Vector,Target: Vector): Vector;
-	static RandomPointInBoundingBox(Origin: Vector,BoxExtent: Vector): Vector;
-	static RandomUnitVectorInConeInDegrees(ConeDir: Vector,ConeHalfAngleInDegrees: number): Vector;
-	static RandomUnitVectorInConeInDegreesFromStream(ConeDir: Vector,ConeHalfAngleInDegrees: number,Stream: RandomStream): Vector;
-	static RandomUnitVectorInConeInRadians(ConeDir: Vector,ConeHalfAngleInRadians: number): Vector;
-	static RandomUnitVectorInConeInRadiansFromStream(ConeDir: Vector,ConeHalfAngleInRadians: number,Stream: RandomStream): Vector;
-	static RandomUnitVectorInEllipticalConeInDegrees(ConeDir: Vector,MaxYawInDegrees: number,MaxPitchInDegrees: number): Vector;
-	static RandomUnitVectorInEllipticalConeInDegreesFromStream(ConeDir: Vector,MaxYawInDegrees: number,MaxPitchInDegrees: number,Stream: RandomStream): Vector;
-	static RandomUnitVectorInEllipticalConeInRadians(ConeDir: Vector,MaxYawInRadians: number,MaxPitchInRadians: number): Vector;
-	static RandomUnitVectorInEllipticalConeInRadiansFromStream(ConeDir: Vector,MaxYawInRadians: number,MaxPitchInRadians: number,Stream: RandomStream): Vector;
-	static RotateAngleAxis(InVect: Vector,AngleDeg: number,Axis: Vector): Vector;
-	static RotatorFromAxisAndAngle(Axis: Vector,Angle: number): Rotator;
-	static SelectVector(A: Vector,B: Vector,bPickA: boolean): Vector;
-	static Subtract_VectorFloat(A: Vector,B: number): Vector;
-	static Subtract_VectorInt(A: Vector,B: number): Vector;
-	static Subtract_VectorVector(A: Vector,B: Vector): Vector;
-	static VEase(A: Vector,B: Vector,Alpha: number,EasingFunc: EEasingFunc,BlendExp: number,Steps: number): Vector;
-	static VectorSpringInterp(Current: Vector,Target: Vector,SpringState?: VectorSpringState,Stiffness?: number,CriticalDampingFactor?: number,DeltaTime?: number,Mass?: number): {SpringState: VectorSpringState, $: Vector};
-	static VInterpTo(Current: Vector,Target: Vector,DeltaTime: number,InterpSpeed: number): Vector;
-	static VInterpTo_Constant(Current: Vector,Target: Vector,DeltaTime: number,InterpSpeed: number): Vector;
-	static VLerp(A: Vector,B: Vector,Alpha: number): Vector;
-	static VSize(A: Vector): number;
-	static VSizeSquared(A: Vector): number;
-	static VSizeXY(A: Vector): number;
-	static K2_TwoBoneIK(RootPos: Vector,JointPos: Vector,EndPos: Vector,JointTarget: Vector,Effector: Vector,OutJointPos?: Vector,OutEndPos?: Vector,bAllowStretching?: boolean,StartStretchRatio?: number,MaxStretchScale?: number): {OutJointPos: Vector, OutEndPos: Vector};
-	static IsValidAIDirection(DirectionVector: Vector): boolean;
-	static IsValidAILocation(Location: Vector): boolean;
-	static GetPositionalTrackingCameraParameters(CameraOrigin?: Vector,CameraRotation?: Rotator,HFOV?: number,VFOV?: number,CameraDistance?: number,NearPlane?: number,FarPlane?: number): {CameraOrigin: Vector, CameraRotation: Rotator, HFOV: number, VFOV: number, CameraDistance: number, NearPlane: number, FarPlane: number};
-	static GetTrackingSensorParameters(Origin?: Vector,Rotation?: Rotator,LeftFOV?: number,RightFOV?: number,TopFOV?: number,BottomFOV?: number,Distance?: number,NearPlane?: number,FarPlane?: number,IsActive?: boolean,index?: number): {Origin: Vector, Rotation: Rotator, LeftFOV: number, RightFOV: number, TopFOV: number, BottomFOV: number, Distance: number, NearPlane: number, FarPlane: number, IsActive: boolean};
-	static GetGuardianDimensions(BoundaryType: EBoundaryType): Vector;
-	static Conv_FloatToVector(InFloat: number): Vector;
-	static CreateVectorFromYawPitch(Yaw: number,Pitch: number,Length: number): Vector;
-	static GetVectorArrayAverage(Vectors: Vector[]): Vector;
-	static MakeVector(X: number,Y: number,Z: number): Vector;
-	static RandomUnitVector(): Vector;
-	static NextSobolCell3D(index: number,NumCells: number,PreviousValue: Vector): Vector;
-	static RandomSobolCell3D(index: number,NumCells: number,Cell: Vector,Seed: Vector): Vector;
-	static GetActorArrayAverageLocation(Actors: Actor[]): Vector;
-	static K2_MakePerlinNoiseVectorAndRemap(X: number,Y: number,Z: number,RangeOutMinX: number,RangeOutMaxX: number,RangeOutMinY: number,RangeOutMaxY: number,RangeOutMinZ: number,RangeOutMaxZ: number): Vector;
+declare class KTaperedCapsuleElem extends KShapeElem { 
+	Center: Vector;
+	Rotation: Rotator;
+	Radius0: number;
+	Radius1: number;
+	Length: number;
+	clone() : KTaperedCapsuleElem;
+	static C(Other: UObject | any): KTaperedCapsuleElem;
 }
 
-declare type EVectorQuantization = 'RoundWholeNumber' | 'RoundOneDecimal' | 'RoundTwoDecimals' | 'EVectorQuantization_MAX';
-declare var EVectorQuantization : { RoundWholeNumber:'RoundWholeNumber',RoundOneDecimal:'RoundOneDecimal',RoundTwoDecimals:'RoundTwoDecimals',EVectorQuantization_MAX:'EVectorQuantization_MAX', };
-declare type ERotatorQuantization = 'ByteComponents' | 'ShortComponents' | 'ERotatorQuantization_MAX';
-declare var ERotatorQuantization : { ByteComponents:'ByteComponents',ShortComponents:'ShortComponents',ERotatorQuantization_MAX:'ERotatorQuantization_MAX', };
-declare class RepMovement { 
-	LinearVelocity: Vector;
-	AngularVelocity: Vector;
-	Location: Vector;
-	Rotation: Rotator;
-	bSimulatedPhysicSleep: boolean;
-	bRepPhysics: boolean;
-	LocationQuantizationLevel: EVectorQuantization;
-	VelocityQuantizationLevel: EVectorQuantization;
-	RotationQuantizationLevel: ERotatorQuantization;
-	clone() : RepMovement;
-	static C(Other: UObject | any): RepMovement;
+declare class KAggregateGeom { 
+	SphereElems: KSphereElem[];
+	BoxElems: KBoxElem[];
+	SphylElems: KSphylElem[];
+	ConvexElems: KConvexElem[];
+	TaperedCapsuleElems: KTaperedCapsuleElem[];
+	clone() : KAggregateGeom;
+	static C(Other: UObject | any): KAggregateGeom;
 }
 
-declare class Vector_NetQuantize100 extends Vector { 
-	clone() : Vector_NetQuantize100;
-	static C(Other: UObject | any): Vector_NetQuantize100;
+declare type EPhysicsType = 'PhysType_Default' | 'PhysType_Kinematic' | 'PhysType_Simulated' | 'PhysType_MAX';
+declare var EPhysicsType : { PhysType_Default:'PhysType_Default',PhysType_Kinematic:'PhysType_Kinematic',PhysType_Simulated:'PhysType_Simulated',PhysType_MAX:'PhysType_MAX', };
+declare type EBodyCollisionResponse = 'BodyCollision_Enabled' | 'BodyCollision_Disabled' | 'BodyCollision_MAX';
+declare var EBodyCollisionResponse : { BodyCollision_Enabled:'BodyCollision_Enabled',BodyCollision_Disabled:'BodyCollision_Disabled',BodyCollision_MAX:'BodyCollision_MAX', };
+declare type ECollisionTraceFlag = 'CTF_UseDefault' | 'CTF_UseSimpleAndComplex' | 'CTF_UseSimpleAsComplex' | 'CTF_UseComplexAsSimple' | 'CTF_MAX';
+declare var ECollisionTraceFlag : { CTF_UseDefault:'CTF_UseDefault',CTF_UseSimpleAndComplex:'CTF_UseSimpleAndComplex',CTF_UseSimpleAsComplex:'CTF_UseSimpleAsComplex',CTF_UseComplexAsSimple:'CTF_UseComplexAsSimple',CTF_MAX:'CTF_MAX', };
+declare type EFrictionCombineMode = 'Average' | 'Min' | 'Multiply' | 'Max' | 'EFrictionCombineMode_MAX';
+declare var EFrictionCombineMode : { Average:'Average',Min:'Min',Multiply:'Multiply',Max:'Max',EFrictionCombineMode_MAX:'EFrictionCombineMode_MAX', };
+declare class PhysicalMaterialPropertyBase extends UObject { 
+	static Load(ResourceName: string): PhysicalMaterialPropertyBase;
+	static Find(Outer: UObject, ResourceName: string): PhysicalMaterialPropertyBase;
+	static GetDefaultObject(): PhysicalMaterialPropertyBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicalMaterialPropertyBase;
+	static C(Other: UObject | any): PhysicalMaterialPropertyBase;
 }
 
-declare class ActorComponentTickFunction extends TickFunction { 
-	clone() : ActorComponentTickFunction;
-	static C(Other: UObject | any): ActorComponentTickFunction;
+declare type EPhysicalSurface = 'SurfaceType_Default' | 'SurfaceType1' | 'SurfaceType2' | 'SurfaceType3' | 'SurfaceType4' | 'SurfaceType5' | 'SurfaceType6' | 'SurfaceType7' | 'SurfaceType8' | 'SurfaceType9' | 'SurfaceType10' | 'SurfaceType11' | 'SurfaceType12' | 'SurfaceType13' | 'SurfaceType14' | 'SurfaceType15' | 'SurfaceType16' | 'SurfaceType17' | 'SurfaceType18' | 'SurfaceType19' | 'SurfaceType20' | 'SurfaceType21' | 'SurfaceType22' | 'SurfaceType23' | 'SurfaceType24' | 'SurfaceType25' | 'SurfaceType26' | 'SurfaceType27' | 'SurfaceType28' | 'SurfaceType29' | 'SurfaceType30' | 'SurfaceType31' | 'SurfaceType32' | 'SurfaceType33' | 'SurfaceType34' | 'SurfaceType35' | 'SurfaceType36' | 'SurfaceType37' | 'SurfaceType38' | 'SurfaceType39' | 'SurfaceType40' | 'SurfaceType41' | 'SurfaceType42' | 'SurfaceType43' | 'SurfaceType44' | 'SurfaceType45' | 'SurfaceType46' | 'SurfaceType47' | 'SurfaceType48' | 'SurfaceType49' | 'SurfaceType50' | 'SurfaceType51' | 'SurfaceType52' | 'SurfaceType53' | 'SurfaceType54' | 'SurfaceType55' | 'SurfaceType56' | 'SurfaceType57' | 'SurfaceType58' | 'SurfaceType59' | 'SurfaceType60' | 'SurfaceType61' | 'SurfaceType62' | 'SurfaceType_Max' | 'EPhysicalSurface_MAX';
+declare var EPhysicalSurface : { SurfaceType_Default:'SurfaceType_Default',SurfaceType1:'SurfaceType1',SurfaceType2:'SurfaceType2',SurfaceType3:'SurfaceType3',SurfaceType4:'SurfaceType4',SurfaceType5:'SurfaceType5',SurfaceType6:'SurfaceType6',SurfaceType7:'SurfaceType7',SurfaceType8:'SurfaceType8',SurfaceType9:'SurfaceType9',SurfaceType10:'SurfaceType10',SurfaceType11:'SurfaceType11',SurfaceType12:'SurfaceType12',SurfaceType13:'SurfaceType13',SurfaceType14:'SurfaceType14',SurfaceType15:'SurfaceType15',SurfaceType16:'SurfaceType16',SurfaceType17:'SurfaceType17',SurfaceType18:'SurfaceType18',SurfaceType19:'SurfaceType19',SurfaceType20:'SurfaceType20',SurfaceType21:'SurfaceType21',SurfaceType22:'SurfaceType22',SurfaceType23:'SurfaceType23',SurfaceType24:'SurfaceType24',SurfaceType25:'SurfaceType25',SurfaceType26:'SurfaceType26',SurfaceType27:'SurfaceType27',SurfaceType28:'SurfaceType28',SurfaceType29:'SurfaceType29',SurfaceType30:'SurfaceType30',SurfaceType31:'SurfaceType31',SurfaceType32:'SurfaceType32',SurfaceType33:'SurfaceType33',SurfaceType34:'SurfaceType34',SurfaceType35:'SurfaceType35',SurfaceType36:'SurfaceType36',SurfaceType37:'SurfaceType37',SurfaceType38:'SurfaceType38',SurfaceType39:'SurfaceType39',SurfaceType40:'SurfaceType40',SurfaceType41:'SurfaceType41',SurfaceType42:'SurfaceType42',SurfaceType43:'SurfaceType43',SurfaceType44:'SurfaceType44',SurfaceType45:'SurfaceType45',SurfaceType46:'SurfaceType46',SurfaceType47:'SurfaceType47',SurfaceType48:'SurfaceType48',SurfaceType49:'SurfaceType49',SurfaceType50:'SurfaceType50',SurfaceType51:'SurfaceType51',SurfaceType52:'SurfaceType52',SurfaceType53:'SurfaceType53',SurfaceType54:'SurfaceType54',SurfaceType55:'SurfaceType55',SurfaceType56:'SurfaceType56',SurfaceType57:'SurfaceType57',SurfaceType58:'SurfaceType58',SurfaceType59:'SurfaceType59',SurfaceType60:'SurfaceType60',SurfaceType61:'SurfaceType61',SurfaceType62:'SurfaceType62',SurfaceType_Max:'SurfaceType_Max',EPhysicalSurface_MAX:'EPhysicalSurface_MAX', };
+declare class DataAsset extends UObject { 
+	NativeClass: UnrealEngineClass;
+	static Load(ResourceName: string): DataAsset;
+	static Find(Outer: UObject, ResourceName: string): DataAsset;
+	static GetDefaultObject(): DataAsset;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DataAsset;
+	static C(Other: UObject | any): DataAsset;
 }
 
-declare class AssetUserData extends UObject { 
-	static Load(ResourceName: string): AssetUserData;
-	static Find(Outer: UObject, ResourceName: string): AssetUserData;
-	static GetDefaultObject(): AssetUserData;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetUserData;
-	static C(Other: UObject | any): AssetUserData;
+declare class TireType extends DataAsset { 
+	FrictionScale: number;
+	static Load(ResourceName: string): TireType;
+	static Find(Outer: UObject, ResourceName: string): TireType;
+	static GetDefaultObject(): TireType;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TireType;
+	static C(Other: UObject | any): TireType;
 }
 
-declare type EComponentCreationMethod = 'Native' | 'SimpleConstructionScript' | 'UserConstructionScript' | 'Instance' | 'EComponentCreationMethod_MAX';
-declare var EComponentCreationMethod : { Native:'Native',SimpleConstructionScript:'SimpleConstructionScript',UserConstructionScript:'UserConstructionScript',Instance:'Instance',EComponentCreationMethod_MAX:'EComponentCreationMethod_MAX', };
-declare class SimpleMemberReference { 
-	MemberParent: UObject;
-	MemberName: string;
-	MemberGuid: Guid;
-	clone() : SimpleMemberReference;
-	static C(Other: UObject | any): SimpleMemberReference;
+declare class TireFrictionScalePair { 
+	TireType: TireType;
+	FrictionScale: number;
+	clone() : TireFrictionScalePair;
+	static C(Other: UObject | any): TireFrictionScalePair;
 }
 
-declare type EEndPlayReason = 'Destroyed' | 'LevelTransition' | 'EndPlayInEditor' | 'RemovedFromWorld' | 'Quit' | 'EEndPlayReason_MAX';
-declare var EEndPlayReason : { Destroyed:'Destroyed',LevelTransition:'LevelTransition',EndPlayInEditor:'EndPlayInEditor',RemovedFromWorld:'RemovedFromWorld',Quit:'Quit',EEndPlayReason_MAX:'EEndPlayReason_MAX', };
-declare class ActorComponent extends UObject { 
-	PrimaryComponentTick: ActorComponentTickFunction;
-	ComponentTags: string[];
-	AssetUserData: AssetUserData[];
-	bReplicates: boolean;
-	bNetAddressable: boolean;
-	bCreatedByConstructionScript: boolean;
-	bInstanceComponent: boolean;
-	bAutoActivate: boolean;
-	bIsActive: boolean;
-	bEditableWhenInherited: boolean;
-	bCanEverAffectNavigation: boolean;
-	bIsEditorOnly: boolean;
-	bIsVisualizationComponent: boolean;
-	CreationMethod: EComponentCreationMethod;
-	UCSModifiedProperties: SimpleMemberReference[];
-	OnComponentActivated: UnrealEngineMulticastDelegate<(Component: ActorComponent, bReset: boolean) => void>;
-	OnComponentDeactivated: UnrealEngineMulticastDelegate<(Component: ActorComponent) => void>;
-	static Load(ResourceName: string): ActorComponent;
-	static Find(Outer: UObject, ResourceName: string): ActorComponent;
-	static GetDefaultObject(): ActorComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorComponent;
-	ToggleActive(): void;
-	SetTickGroup(NewTickGroup: ETickingGroup): void;
-	SetTickableWhenPaused(bTickableWhenPaused: boolean): void;
-	SetIsReplicated(ShouldReplicate: boolean): void;
-	SetComponentTickInterval(TickInterval: number): void;
-	SetComponentTickEnabled(bEnabled: boolean): void;
-	SetAutoActivate(bNewAutoActivate: boolean): void;
-	SetActive(bNewActive: boolean,bReset: boolean): void;
-	RemoveTickPrerequisiteComponent(PrerequisiteComponent: ActorComponent): void;
-	RemoveTickPrerequisiteActor(PrerequisiteActor: Actor): void;
-	ReceiveTick(DeltaSeconds: number): void;
-	ReceiveEndPlay(EndPlayReason: EEndPlayReason): void;
-	ReceiveBeginPlay(): void;
-	OnRep_IsActive(): void;
-	K2_DestroyComponent(UObject: UObject): void;
-	IsComponentTickEnabled(): boolean;
-	IsBeingDestroyed(): boolean;
-	IsActive(): boolean;
-	GetOwner(): Actor;
-	GetComponentTickInterval(): number;
-	Deactivate(): void;
-	ComponentHasTag(Tag: string): boolean;
-	AddTickPrerequisiteComponent(PrerequisiteComponent: ActorComponent): void;
-	AddTickPrerequisiteActor(PrerequisiteActor: Actor): void;
-	Activate(bReset: boolean): void;
-	static C(Other: UObject | any): ActorComponent;
-	IsRegistered(): boolean;
-	MarkRenderStateDirty(): void;
-	RegisterComponent(): void;
-	ReregisterComponent(): void;
-	UnregisterComponent(): void;
-	static IsRegistered(ActorComponent: ActorComponent): boolean;
-	static MarkRenderStateDirty(Component: ActorComponent): void;
-	static RegisterComponent(ActorComponent: ActorComponent): void;
-	static ReregisterComponent(ActorComponent: ActorComponent): void;
-	static UnregisterComponent(ActorComponent: ActorComponent): void;
-}
-
-declare type EComponentMobility = 'Static' | 'Stationary' | 'Movable' | 'EComponentMobility_MAX';
-declare var EComponentMobility : { Static:'Static',Stationary:'Stationary',Movable:'Movable',EComponentMobility_MAX:'EComponentMobility_MAX', };
-declare type EDetailMode = 'DM_Low' | 'DM_Medium' | 'DM_High' | 'DM_MAX';
-declare var EDetailMode : { DM_Low:'DM_Low',DM_Medium:'DM_Medium',DM_High:'DM_High',DM_MAX:'DM_MAX', };
-declare type EBrushType = 'Brush_Default' | 'Brush_Add' | 'Brush_Subtract' | 'Brush_MAX';
-declare var EBrushType : { Brush_Default:'Brush_Default',Brush_Add:'Brush_Add',Brush_Subtract:'Brush_Subtract',Brush_MAX:'Brush_MAX', };
-declare class Model extends UObject { 
-	static Load(ResourceName: string): Model;
-	static Find(Outer: UObject, ResourceName: string): Model;
-	static GetDefaultObject(): Model;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Model;
-	static C(Other: UObject | any): Model;
+declare class PhysicalMaterial extends UObject { 
+	Friction: number;
+	FrictionCombineMode: EFrictionCombineMode;
+	bOverrideFrictionCombineMode: boolean;
+	Restitution: number;
+	RestitutionCombineMode: EFrictionCombineMode;
+	bOverrideRestitutionCombineMode: boolean;
+	Density: number;
+	RaiseMassToPower: number;
+	DestructibleDamageThresholdScale: number;
+	PhysicalMaterialProperty: PhysicalMaterialPropertyBase;
+	SurfaceType: EPhysicalSurface;
+	TireFrictionScale: number;
+	TireFrictionScales: TireFrictionScalePair[];
+	static Load(ResourceName: string): PhysicalMaterial;
+	static Find(Outer: UObject, ResourceName: string): PhysicalMaterial;
+	static GetDefaultObject(): PhysicalMaterial;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicalMaterial;
+	static C(Other: UObject | any): PhysicalMaterial;
 }
 
-declare type ESceneDepthPriorityGroup = 'SDPG_World' | 'SDPG_Foreground' | 'SDPG_MAX';
-declare var ESceneDepthPriorityGroup : { SDPG_World:'SDPG_World',SDPG_Foreground:'SDPG_Foreground',SDPG_MAX:'SDPG_MAX', };
-declare type EIndirectLightingCacheQuality = 'ILCQ_Off' | 'ILCQ_Point' | 'ILCQ_Volume' | 'ILCQ_MAX';
-declare var EIndirectLightingCacheQuality : { ILCQ_Off:'ILCQ_Off',ILCQ_Point:'ILCQ_Point',ILCQ_Volume:'ILCQ_Volume',ILCQ_MAX:'ILCQ_MAX', };
-declare type ELightmapType = 'Default' | 'ForceSurface' | 'ForceVolumetric' | 'ELightmapType_MAX';
-declare var ELightmapType : { Default:'Default',ForceSurface:'ForceSurface',ForceVolumetric:'ForceVolumetric',ELightmapType_MAX:'ELightmapType_MAX', };
-declare type EHasCustomNavigableGeometry = 'No' | 'Yes' | 'EvenIfNotCollidable' | 'DontExport' | 'EHasCustomNavigableGeometry_MAX';
-declare var EHasCustomNavigableGeometry : { No:'No',Yes:'Yes',EvenIfNotCollidable:'EvenIfNotCollidable',DontExport:'DontExport',EHasCustomNavigableGeometry_MAX:'EHasCustomNavigableGeometry_MAX', };
-declare type ECanBeCharacterBase = 'ECB_No' | 'ECB_Yes' | 'ECB_Owner' | 'ECB_MAX';
-declare var ECanBeCharacterBase : { ECB_No:'ECB_No',ECB_Yes:'ECB_Yes',ECB_Owner:'ECB_Owner',ECB_MAX:'ECB_MAX', };
-declare class LightingChannels { 
-	bChannel0: boolean;
-	bChannel1: boolean;
-	bChannel2: boolean;
-	clone() : LightingChannels;
-	static C(Other: UObject | any): LightingChannels;
+declare type EWalkableSlopeBehavior = 'WalkableSlope_Default' | 'WalkableSlope_Increase' | 'WalkableSlope_Decrease' | 'WalkableSlope_Unwalkable' | 'WalkableSlope_Max';
+declare var EWalkableSlopeBehavior : { WalkableSlope_Default:'WalkableSlope_Default',WalkableSlope_Increase:'WalkableSlope_Increase',WalkableSlope_Decrease:'WalkableSlope_Decrease',WalkableSlope_Unwalkable:'WalkableSlope_Unwalkable',WalkableSlope_Max:'WalkableSlope_Max', };
+declare class WalkableSlopeOverride { 
+	WalkableSlopeBehavior: EWalkableSlopeBehavior;
+	WalkableSlopeAngle: number;
+	clone() : WalkableSlopeOverride;
+	static C(Other: UObject | any): WalkableSlopeOverride;
 }
 
-declare type ERendererStencilMask = 'ERSM_Default' | 'ERSM_255' | 'ERSM_1' | 'ERSM_2' | 'ERSM_4' | 'ERSM_8' | 'ERSM_16' | 'ERSM_32' | 'ERSM_64' | 'ERSM_128' | 'ERSM_MAX';
-declare var ERendererStencilMask : { ERSM_Default:'ERSM_Default',ERSM_255:'ERSM_255',ERSM_1:'ERSM_1',ERSM_2:'ERSM_2',ERSM_4:'ERSM_4',ERSM_8:'ERSM_8',ERSM_16:'ERSM_16',ERSM_32:'ERSM_32',ERSM_64:'ERSM_64',ERSM_128:'ERSM_128',ERSM_MAX:'ERSM_MAX', };
 declare type ECollisionChannel = 'ECC_WorldStatic' | 'ECC_WorldDynamic' | 'ECC_Pawn' | 'ECC_Visibility' | 'ECC_Camera' | 'ECC_PhysicsBody' | 'ECC_Vehicle' | 'ECC_Destructible' | 'ECC_EngineTraceChannel1' | 'ECC_EngineTraceChannel2' | 'ECC_EngineTraceChannel3' | 'ECC_EngineTraceChannel4' | 'ECC_EngineTraceChannel5' | 'ECC_EngineTraceChannel6' | 'ECC_GameTraceChannel1' | 'ECC_GameTraceChannel2' | 'ECC_GameTraceChannel3' | 'ECC_GameTraceChannel4' | 'ECC_GameTraceChannel5' | 'ECC_GameTraceChannel6' | 'ECC_GameTraceChannel7' | 'ECC_GameTraceChannel8' | 'ECC_GameTraceChannel9' | 'ECC_GameTraceChannel10' | 'ECC_GameTraceChannel11' | 'ECC_GameTraceChannel12' | 'ECC_GameTraceChannel13' | 'ECC_GameTraceChannel14' | 'ECC_GameTraceChannel15' | 'ECC_GameTraceChannel16' | 'ECC_GameTraceChannel17' | 'ECC_GameTraceChannel18' | 'ECC_OverlapAll_Deprecated' | 'ECC_MAX';
 declare var ECollisionChannel : { ECC_WorldStatic:'ECC_WorldStatic',ECC_WorldDynamic:'ECC_WorldDynamic',ECC_Pawn:'ECC_Pawn',ECC_Visibility:'ECC_Visibility',ECC_Camera:'ECC_Camera',ECC_PhysicsBody:'ECC_PhysicsBody',ECC_Vehicle:'ECC_Vehicle',ECC_Destructible:'ECC_Destructible',ECC_EngineTraceChannel1:'ECC_EngineTraceChannel1',ECC_EngineTraceChannel2:'ECC_EngineTraceChannel2',ECC_EngineTraceChannel3:'ECC_EngineTraceChannel3',ECC_EngineTraceChannel4:'ECC_EngineTraceChannel4',ECC_EngineTraceChannel5:'ECC_EngineTraceChannel5',ECC_EngineTraceChannel6:'ECC_EngineTraceChannel6',ECC_GameTraceChannel1:'ECC_GameTraceChannel1',ECC_GameTraceChannel2:'ECC_GameTraceChannel2',ECC_GameTraceChannel3:'ECC_GameTraceChannel3',ECC_GameTraceChannel4:'ECC_GameTraceChannel4',ECC_GameTraceChannel5:'ECC_GameTraceChannel5',ECC_GameTraceChannel6:'ECC_GameTraceChannel6',ECC_GameTraceChannel7:'ECC_GameTraceChannel7',ECC_GameTraceChannel8:'ECC_GameTraceChannel8',ECC_GameTraceChannel9:'ECC_GameTraceChannel9',ECC_GameTraceChannel10:'ECC_GameTraceChannel10',ECC_GameTraceChannel11:'ECC_GameTraceChannel11',ECC_GameTraceChannel12:'ECC_GameTraceChannel12',ECC_GameTraceChannel13:'ECC_GameTraceChannel13',ECC_GameTraceChannel14:'ECC_GameTraceChannel14',ECC_GameTraceChannel15:'ECC_GameTraceChannel15',ECC_GameTraceChannel16:'ECC_GameTraceChannel16',ECC_GameTraceChannel17:'ECC_GameTraceChannel17',ECC_GameTraceChannel18:'ECC_GameTraceChannel18',ECC_OverlapAll_Deprecated:'ECC_OverlapAll_Deprecated',ECC_MAX:'ECC_MAX', };
 declare type ECollisionEnabled = 'NoCollision' | 'QueryOnly' | 'PhysicsOnly' | 'QueryAndPhysics' | 'ECollisionEnabled_MAX';
@@ -883,73 +829,6 @@ declare class CollisionResponse {
 	static C(Other: UObject | any): CollisionResponse;
 }
 
-declare type EWalkableSlopeBehavior = 'WalkableSlope_Default' | 'WalkableSlope_Increase' | 'WalkableSlope_Decrease' | 'WalkableSlope_Unwalkable' | 'WalkableSlope_Max';
-declare var EWalkableSlopeBehavior : { WalkableSlope_Default:'WalkableSlope_Default',WalkableSlope_Increase:'WalkableSlope_Increase',WalkableSlope_Decrease:'WalkableSlope_Decrease',WalkableSlope_Unwalkable:'WalkableSlope_Unwalkable',WalkableSlope_Max:'WalkableSlope_Max', };
-declare class WalkableSlopeOverride { 
-	WalkableSlopeBehavior: EWalkableSlopeBehavior;
-	WalkableSlopeAngle: number;
-	clone() : WalkableSlopeOverride;
-	static C(Other: UObject | any): WalkableSlopeOverride;
-}
-
-declare type EFrictionCombineMode = 'Average' | 'Min' | 'Multiply' | 'Max' | 'EFrictionCombineMode_MAX';
-declare var EFrictionCombineMode : { Average:'Average',Min:'Min',Multiply:'Multiply',Max:'Max',EFrictionCombineMode_MAX:'EFrictionCombineMode_MAX', };
-declare class PhysicalMaterialPropertyBase extends UObject { 
-	static Load(ResourceName: string): PhysicalMaterialPropertyBase;
-	static Find(Outer: UObject, ResourceName: string): PhysicalMaterialPropertyBase;
-	static GetDefaultObject(): PhysicalMaterialPropertyBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicalMaterialPropertyBase;
-	static C(Other: UObject | any): PhysicalMaterialPropertyBase;
-}
-
-declare type EPhysicalSurface = 'SurfaceType_Default' | 'SurfaceType1' | 'SurfaceType2' | 'SurfaceType3' | 'SurfaceType4' | 'SurfaceType5' | 'SurfaceType6' | 'SurfaceType7' | 'SurfaceType8' | 'SurfaceType9' | 'SurfaceType10' | 'SurfaceType11' | 'SurfaceType12' | 'SurfaceType13' | 'SurfaceType14' | 'SurfaceType15' | 'SurfaceType16' | 'SurfaceType17' | 'SurfaceType18' | 'SurfaceType19' | 'SurfaceType20' | 'SurfaceType21' | 'SurfaceType22' | 'SurfaceType23' | 'SurfaceType24' | 'SurfaceType25' | 'SurfaceType26' | 'SurfaceType27' | 'SurfaceType28' | 'SurfaceType29' | 'SurfaceType30' | 'SurfaceType31' | 'SurfaceType32' | 'SurfaceType33' | 'SurfaceType34' | 'SurfaceType35' | 'SurfaceType36' | 'SurfaceType37' | 'SurfaceType38' | 'SurfaceType39' | 'SurfaceType40' | 'SurfaceType41' | 'SurfaceType42' | 'SurfaceType43' | 'SurfaceType44' | 'SurfaceType45' | 'SurfaceType46' | 'SurfaceType47' | 'SurfaceType48' | 'SurfaceType49' | 'SurfaceType50' | 'SurfaceType51' | 'SurfaceType52' | 'SurfaceType53' | 'SurfaceType54' | 'SurfaceType55' | 'SurfaceType56' | 'SurfaceType57' | 'SurfaceType58' | 'SurfaceType59' | 'SurfaceType60' | 'SurfaceType61' | 'SurfaceType62' | 'SurfaceType_Max' | 'EPhysicalSurface_MAX';
-declare var EPhysicalSurface : { SurfaceType_Default:'SurfaceType_Default',SurfaceType1:'SurfaceType1',SurfaceType2:'SurfaceType2',SurfaceType3:'SurfaceType3',SurfaceType4:'SurfaceType4',SurfaceType5:'SurfaceType5',SurfaceType6:'SurfaceType6',SurfaceType7:'SurfaceType7',SurfaceType8:'SurfaceType8',SurfaceType9:'SurfaceType9',SurfaceType10:'SurfaceType10',SurfaceType11:'SurfaceType11',SurfaceType12:'SurfaceType12',SurfaceType13:'SurfaceType13',SurfaceType14:'SurfaceType14',SurfaceType15:'SurfaceType15',SurfaceType16:'SurfaceType16',SurfaceType17:'SurfaceType17',SurfaceType18:'SurfaceType18',SurfaceType19:'SurfaceType19',SurfaceType20:'SurfaceType20',SurfaceType21:'SurfaceType21',SurfaceType22:'SurfaceType22',SurfaceType23:'SurfaceType23',SurfaceType24:'SurfaceType24',SurfaceType25:'SurfaceType25',SurfaceType26:'SurfaceType26',SurfaceType27:'SurfaceType27',SurfaceType28:'SurfaceType28',SurfaceType29:'SurfaceType29',SurfaceType30:'SurfaceType30',SurfaceType31:'SurfaceType31',SurfaceType32:'SurfaceType32',SurfaceType33:'SurfaceType33',SurfaceType34:'SurfaceType34',SurfaceType35:'SurfaceType35',SurfaceType36:'SurfaceType36',SurfaceType37:'SurfaceType37',SurfaceType38:'SurfaceType38',SurfaceType39:'SurfaceType39',SurfaceType40:'SurfaceType40',SurfaceType41:'SurfaceType41',SurfaceType42:'SurfaceType42',SurfaceType43:'SurfaceType43',SurfaceType44:'SurfaceType44',SurfaceType45:'SurfaceType45',SurfaceType46:'SurfaceType46',SurfaceType47:'SurfaceType47',SurfaceType48:'SurfaceType48',SurfaceType49:'SurfaceType49',SurfaceType50:'SurfaceType50',SurfaceType51:'SurfaceType51',SurfaceType52:'SurfaceType52',SurfaceType53:'SurfaceType53',SurfaceType54:'SurfaceType54',SurfaceType55:'SurfaceType55',SurfaceType56:'SurfaceType56',SurfaceType57:'SurfaceType57',SurfaceType58:'SurfaceType58',SurfaceType59:'SurfaceType59',SurfaceType60:'SurfaceType60',SurfaceType61:'SurfaceType61',SurfaceType62:'SurfaceType62',SurfaceType_Max:'SurfaceType_Max',EPhysicalSurface_MAX:'EPhysicalSurface_MAX', };
-declare class DataAsset extends UObject { 
-	NativeClass: UnrealEngineClass;
-	static Load(ResourceName: string): DataAsset;
-	static Find(Outer: UObject, ResourceName: string): DataAsset;
-	static GetDefaultObject(): DataAsset;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DataAsset;
-	static C(Other: UObject | any): DataAsset;
-}
-
-declare class TireType extends DataAsset { 
-	FrictionScale: number;
-	static Load(ResourceName: string): TireType;
-	static Find(Outer: UObject, ResourceName: string): TireType;
-	static GetDefaultObject(): TireType;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TireType;
-	static C(Other: UObject | any): TireType;
-}
-
-declare class TireFrictionScalePair { 
-	TireType: TireType;
-	FrictionScale: number;
-	clone() : TireFrictionScalePair;
-	static C(Other: UObject | any): TireFrictionScalePair;
-}
-
-declare class PhysicalMaterial extends UObject { 
-	Friction: number;
-	FrictionCombineMode: EFrictionCombineMode;
-	bOverrideFrictionCombineMode: boolean;
-	Restitution: number;
-	RestitutionCombineMode: EFrictionCombineMode;
-	bOverrideRestitutionCombineMode: boolean;
-	Density: number;
-	RaiseMassToPower: number;
-	DestructibleDamageThresholdScale: number;
-	PhysicalMaterialProperty: PhysicalMaterialPropertyBase;
-	SurfaceType: EPhysicalSurface;
-	TireFrictionScale: number;
-	TireFrictionScales: TireFrictionScalePair[];
-	static Load(ResourceName: string): PhysicalMaterial;
-	static Find(Outer: UObject, ResourceName: string): PhysicalMaterial;
-	static GetDefaultObject(): PhysicalMaterial;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicalMaterial;
-	static C(Other: UObject | any): PhysicalMaterial;
-}
-
 declare class BodyInstance { 
 	ObjectType: ECollisionChannel;
 	CollisionEnabled: ECollisionEnabled;
@@ -973,12 +852,13 @@ declare class BodyInstance {
 	bLockYRotation: boolean;
 	bLockZRotation: boolean;
 	bOverrideMaxAngularVelocity: boolean;
-	bUseAsyncScene: boolean;
 	bOverrideMaxDepenetrationVelocity: boolean;
 	bOverrideWalkableSlopeOnInstance: boolean;
 	bInterpolateWhenSubStepping: boolean;
 	ResponseToChannels: CollisionResponseContainer;
 	CollisionProfileName: string;
+	PositionSolverIterationCount: number;
+	VelocitySolverIterationCount: number;
 	CollisionResponses: CollisionResponse;
 	MaxDepenetrationVelocity: number;
 	MassInKgOverride: number;
@@ -994,1235 +874,1697 @@ declare class BodyInstance {
 	CustomSleepThresholdMultiplier: number;
 	StabilizationThresholdMultiplier: number;
 	PhysicsBlendWeight: number;
-	PositionSolverIterationCount: number;
-	VelocitySolverIterationCount: number;
 	clone() : BodyInstance;
 	static C(Other: UObject | any): BodyInstance;
 }
 
-declare class Vector_NetQuantize extends Vector { 
-	clone() : Vector_NetQuantize;
-	static C(Other: UObject | any): Vector_NetQuantize;
+declare class BodySetup extends UObject { 
+	AggGeom: KAggregateGeom;
+	BoneName: string;
+	PhysicsType: EPhysicsType;
+	bAlwaysFullAnimWeight: boolean;
+	bConsiderForBounds: boolean;
+	bMeshCollideAll: boolean;
+	bDoubleSidedGeometry: boolean;
+	bGenerateNonMirroredCollision: boolean;
+	bSharedCookedData: boolean;
+	bGenerateMirroredCollision: boolean;
+	CollisionReponse: EBodyCollisionResponse;
+	CollisionTraceFlag: ECollisionTraceFlag;
+	PhysMaterial: PhysicalMaterial;
+	WalkableSlopeOverride: WalkableSlopeOverride;
+	BuildScale: number;
+	DefaultInstance: BodyInstance;
+	BuildScale3D: Vector;
+	static Load(ResourceName: string): BodySetup;
+	static Find(Outer: UObject, ResourceName: string): BodySetup;
+	static GetDefaultObject(): BodySetup;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BodySetup;
+	static C(Other: UObject | any): BodySetup;
 }
 
-declare class Vector_NetQuantizeNormal extends Vector { 
-	clone() : Vector_NetQuantizeNormal;
-	static C(Other: UObject | any): Vector_NetQuantizeNormal;
+declare class BrushComponent extends PrimitiveComponent { 
+	Brush: Model;
+	BrushBodySetup: BodySetup;
+	PrePivot: Vector;
+	static Load(ResourceName: string): BrushComponent;
+	static Find(Outer: UObject, ResourceName: string): BrushComponent;
+	static GetDefaultObject(): BrushComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BrushComponent;
+	static C(Other: UObject | any): BrushComponent;
 }
 
-declare class HitResult { 
-	bBlockingHit: boolean;
-	bStartPenetrating: boolean;
-	FaceIndex: number;
-	Time: number;
-	Distance: number;
-	Location: Vector_NetQuantize;
-	ImpactPoint: Vector_NetQuantize;
-	Normal: Vector_NetQuantizeNormal;
-	ImpactNormal: Vector_NetQuantizeNormal;
-	TraceStart: Vector_NetQuantize;
-	TraceEnd: Vector_NetQuantize;
-	PenetrationDepth: number;
-	Item: number;
-	PhysMaterial: any;
-	Actor: any;
-	Component: any;
-	BoneName: string;
-	MyBoneName: string;
-	clone() : HitResult;
-	static C(Other: UObject | any): HitResult;
-	BreakHitResult(bBlockingHit?: boolean,bInitialOverlap?: boolean,Time?: number,Distance?: number,Location?: Vector,ImpactPoint?: Vector,Normal?: Vector,ImpactNormal?: Vector,PhysMat?: PhysicalMaterial,HitActor?: Actor,HitComponent?: PrimitiveComponent,HitBoneName?: string,HitItem?: number,FaceIndex?: number,TraceStart?: Vector,TraceEnd?: Vector): {bBlockingHit: boolean, bInitialOverlap: boolean, Time: number, Distance: number, Location: Vector, ImpactPoint: Vector, Normal: Vector, ImpactNormal: Vector, PhysMat: PhysicalMaterial, HitActor: Actor, HitComponent: PrimitiveComponent, HitBoneName: string, HitItem: number, FaceIndex: number, TraceStart: Vector, TraceEnd: Vector};
-	FindCollisionUV(UVChannel: number,UV?: Vector2D): {UV: Vector2D, $: boolean};
-	GetSurfaceType(): EPhysicalSurface;
-	static BreakHitResult(Hit: HitResult,bBlockingHit?: boolean,bInitialOverlap?: boolean,Time?: number,Distance?: number,Location?: Vector,ImpactPoint?: Vector,Normal?: Vector,ImpactNormal?: Vector,PhysMat?: PhysicalMaterial,HitActor?: Actor,HitComponent?: PrimitiveComponent,HitBoneName?: string,HitItem?: number,FaceIndex?: number,TraceStart?: Vector,TraceEnd?: Vector): {bBlockingHit: boolean, bInitialOverlap: boolean, Time: number, Distance: number, Location: Vector, ImpactPoint: Vector, Normal: Vector, ImpactNormal: Vector, PhysMat: PhysicalMaterial, HitActor: Actor, HitComponent: PrimitiveComponent, HitBoneName: string, HitItem: number, FaceIndex: number, TraceStart: Vector, TraceEnd: Vector};
-	static FindCollisionUV(Hit: HitResult,UVChannel: number,UV?: Vector2D): {UV: Vector2D, $: boolean};
-	static GetSurfaceType(Hit: HitResult): EPhysicalSurface;
-	static MakeHitResult(bBlockingHit: boolean,bInitialOverlap: boolean,Time: number,Distance: number,Location: Vector,ImpactPoint: Vector,Normal: Vector,ImpactNormal: Vector,PhysMat: PhysicalMaterial,HitActor: Actor,HitComponent: PrimitiveComponent,HitBoneName: string,HitItem: number,FaceIndex: number,TraceStart: Vector,TraceEnd: Vector): HitResult;
+declare class BuilderPoly { 
+	VertexIndices: number[];
+	Direction: number;
+	ItemName: string;
+	PolyFlags: number;
+	clone() : BuilderPoly;
+	static C(Other: UObject | any): BuilderPoly;
 }
 
-declare class Key { 
-	KeyName: string;
-	clone() : Key;
-	static C(Other: UObject | any): Key;
-	EqualEqual_KeyKey(B: Key): boolean;
-	Key_GetDisplayName(): string;
-	Key_IsFloatAxis(): boolean;
-	Key_IsGamepadKey(): boolean;
-	Key_IsKeyboardKey(): boolean;
-	Key_IsModifierKey(): boolean;
-	Key_IsMouseButton(): boolean;
-	Key_IsValid(): boolean;
-	Key_IsVectorAxis(): boolean;
-	static EqualEqual_KeyKey(A: Key,B: Key): boolean;
-	static Key_GetDisplayName(Key: Key): string;
-	static Key_IsFloatAxis(Key: Key): boolean;
-	static Key_IsGamepadKey(Key: Key): boolean;
-	static Key_IsKeyboardKey(Key: Key): boolean;
-	static Key_IsModifierKey(Key: Key): boolean;
-	static Key_IsMouseButton(Key: Key): boolean;
-	static Key_IsValid(Key: Key): boolean;
-	static Key_IsVectorAxis(Key: Key): boolean;
-}
-
-declare type ETouchIndex = 'Touch1' | 'Touch2' | 'Touch3' | 'Touch4' | 'Touch5' | 'Touch6' | 'Touch7' | 'Touch8' | 'Touch9' | 'Touch10' | 'CursorPointerIndex' | 'MAX_TOUCHES' | 'ETouchIndex_MAX';
-declare var ETouchIndex : { Touch1:'Touch1',Touch2:'Touch2',Touch3:'Touch3',Touch4:'Touch4',Touch5:'Touch5',Touch6:'Touch6',Touch7:'Touch7',Touch8:'Touch8',Touch9:'Touch9',Touch10:'Touch10',CursorPointerIndex:'CursorPointerIndex',MAX_TOUCHES:'MAX_TOUCHES',ETouchIndex_MAX:'ETouchIndex_MAX', };
-declare class PrimitiveComponentPostPhysicsTickFunction extends TickFunction { 
-	clone() : PrimitiveComponentPostPhysicsTickFunction;
-	static C(Other: UObject | any): PrimitiveComponentPostPhysicsTickFunction;
-}
-
-declare class SubsurfaceProfileStruct { 
-	ScatterRadius: number;
-	SubsurfaceColor: LinearColor;
-	FalloffColor: LinearColor;
-	BoundaryColorBleed: LinearColor;
-	ExtinctionScale: number;
-	NormalScale: number;
-	ScatteringDistribution: number;
-	IOR: number;
-	Roughness0: number;
-	Roughness1: number;
-	LobeMix: number;
-	clone() : SubsurfaceProfileStruct;
-	static C(Other: UObject | any): SubsurfaceProfileStruct;
-}
-
-declare class SubsurfaceProfile extends UObject { 
-	Settings: SubsurfaceProfileStruct;
-	static Load(ResourceName: string): SubsurfaceProfile;
-	static Find(Outer: UObject, ResourceName: string): SubsurfaceProfile;
-	static GetDefaultObject(): SubsurfaceProfile;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubsurfaceProfile;
-	static C(Other: UObject | any): SubsurfaceProfile;
+declare class BrushBuilder extends UObject { 
+	BitmapFilename: string;
+	Tooltip: string;
+	NotifyBadParams: boolean;
+	Vertices: Vector[];
+	Polys: BuilderPoly[];
+	Layer: string;
+	MergeCoplanars: boolean;
+	static Load(ResourceName: string): BrushBuilder;
+	static Find(Outer: UObject, ResourceName: string): BrushBuilder;
+	static GetDefaultObject(): BrushBuilder;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BrushBuilder;
+	static C(Other: UObject | any): BrushBuilder;
+	Build(InWorld: World,InBrush: Brush): boolean;
+	static Build(Builder: BrushBuilder,InWorld: World,InBrush: Brush): boolean;
 }
 
-declare class LightmassMaterialInterfaceSettings { 
-	bCastShadowAsMasked: boolean;
-	EmissiveBoost: number;
-	DiffuseBoost: number;
-	ExportResolutionScale: number;
-	bOverrideCastShadowAsMasked: boolean;
-	bOverrideEmissiveBoost: boolean;
-	bOverrideDiffuseBoost: boolean;
-	bOverrideExportResolutionScale: boolean;
-	clone() : LightmassMaterialInterfaceSettings;
-	static C(Other: UObject | any): LightmassMaterialInterfaceSettings;
+declare class GeomSelection { 
+	Type: number;
+	index: number;
+	SelectionIndex: number;
+	clone() : GeomSelection;
+	static C(Other: UObject | any): GeomSelection;
 }
 
-declare class SoftObjectPath { 
-	AssetPathName: string;
-	SubPathString: string;
-	clone() : SoftObjectPath;
-	static C(Other: UObject | any): SoftObjectPath;
-	BreakSoftObjectPath(PathString?: string): {PathString: string};
-	static BreakSoftObjectPath(InSoftObjectPath: SoftObjectPath,PathString?: string): {PathString: string};
-	static MakeSoftObjectPath(PathString: string): SoftObjectPath;
+declare class Brush extends Actor { 
+	BrushType: EBrushType;
+	BrushColor: Color;
+	PolyFlags: number;
+	bColored: boolean;
+	bSolidWhenSelected: boolean;
+	bPlaceableFromClassBrowser: boolean;
+	bNotForClientOrServer: boolean;
+	Brush: Model;
+	BrushComponent: BrushComponent;
+	BrushBuilder: BrushBuilder;
+	bInManipulation: boolean;
+	SavedSelections: GeomSelection[];
+	static GetDefaultObject(): Brush;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Brush;
+	static C(Other: UObject | any): Brush;
+	csgAdd(PolyFlags: number,BrushType: EBrushType): Brush;
+	GetSurfaces(Surfaces?: number[]): {Surfaces: number[]};
+	static csgAdd(DefaultBrush: Brush,PolyFlags: number,BrushType: EBrushType): Brush;
+	static GetSurfaces(Brush: Brush,Surfaces?: number[]): {Surfaces: number[]};
 }
 
-declare class MaterialTextureInfo { 
-	SamplingScale: number;
-	UVChannelIndex: number;
-	TextureName: string;
-	TextureReference: SoftObjectPath;
-	TextureIndex: number;
-	clone() : MaterialTextureInfo;
-	static C(Other: UObject | any): MaterialTextureInfo;
+declare class Volume extends Brush { 
+	static GetDefaultObject(): Volume;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Volume;
+	static C(Other: UObject | any): Volume;
+	CreateBrushForVolumeActor(BrushBuilder: BrushBuilder): void;
+	static CreateBrushForVolumeActor(NewActor: Volume,BrushBuilder: BrushBuilder): void;
 }
 
-declare class ThumbnailInfo extends UObject { 
-	static Load(ResourceName: string): ThumbnailInfo;
-	static Find(Outer: UObject, ResourceName: string): ThumbnailInfo;
-	static GetDefaultObject(): ThumbnailInfo;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ThumbnailInfo;
-	static C(Other: UObject | any): ThumbnailInfo;
+declare class PhysicsVolume extends Volume { 
+	TerminalVelocity: number;
+	Priority: number;
+	FluidFriction: number;
+	bWaterVolume: boolean;
+	bPhysicsOnContact: boolean;
+	static GetDefaultObject(): PhysicsVolume;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsVolume;
+	static C(Other: UObject | any): PhysicsVolume;
 }
 
-declare class AssetImportInfo { 
-	clone() : AssetImportInfo;
-	static C(Other: UObject | any): AssetImportInfo;
+declare class Vector_NetQuantize extends Vector { 
+	clone() : Vector_NetQuantize;
+	static C(Other: UObject | any): Vector_NetQuantize;
 }
 
-declare class AssetImportData extends UObject { 
-	SourceFilePath: string;
-	SourceFileTimestamp: string;
-	SourceData: AssetImportInfo;
-	static Load(ResourceName: string): AssetImportData;
-	static Find(Outer: UObject, ResourceName: string): AssetImportData;
-	static GetDefaultObject(): AssetImportData;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetImportData;
-	K2_GetFirstFilename(): string;
-	K2_ExtractFilenames(): string[];
-	static C(Other: UObject | any): AssetImportData;
+declare class Vector_NetQuantizeNormal extends Vector { 
+	clone() : Vector_NetQuantizeNormal;
+	static C(Other: UObject | any): Vector_NetQuantizeNormal;
 }
 
-declare type EEdGraphPinDirection = 'EGPD_Input' | 'EGPD_Output' | 'EGPD_MAX';
-declare var EEdGraphPinDirection : { EGPD_Input:'EGPD_Input',EGPD_Output:'EGPD_Output',EGPD_MAX:'EGPD_MAX', };
-declare class EdGraphTerminalType { 
-	TerminalCategory: string;
-	TerminalSubCategory: string;
-	TerminalSubCategoryObject: any;
-	bTerminalIsConst: boolean;
-	bTerminalIsWeakPointer: boolean;
-	clone() : EdGraphTerminalType;
-	static C(Other: UObject | any): EdGraphTerminalType;
+declare class HitResult { 
+	bBlockingHit: boolean;
+	bStartPenetrating: boolean;
+	FaceIndex: number;
+	Time: number;
+	Distance: number;
+	Location: Vector_NetQuantize;
+	ImpactPoint: Vector_NetQuantize;
+	Normal: Vector_NetQuantizeNormal;
+	ImpactNormal: Vector_NetQuantizeNormal;
+	TraceStart: Vector_NetQuantize;
+	TraceEnd: Vector_NetQuantize;
+	PenetrationDepth: number;
+	Item: number;
+	PhysMaterial: any;
+	Actor: any;
+	Component: any;
+	BoneName: string;
+	MyBoneName: string;
+	clone() : HitResult;
+	static C(Other: UObject | any): HitResult;
+	BreakHitResult(bBlockingHit?: boolean,bInitialOverlap?: boolean,Time?: number,Distance?: number,Location?: Vector,ImpactPoint?: Vector,Normal?: Vector,ImpactNormal?: Vector,PhysMat?: PhysicalMaterial,HitActor?: Actor,HitComponent?: PrimitiveComponent,HitBoneName?: string,HitItem?: number,FaceIndex?: number,TraceStart?: Vector,TraceEnd?: Vector): {bBlockingHit: boolean, bInitialOverlap: boolean, Time: number, Distance: number, Location: Vector, ImpactPoint: Vector, Normal: Vector, ImpactNormal: Vector, PhysMat: PhysicalMaterial, HitActor: Actor, HitComponent: PrimitiveComponent, HitBoneName: string, HitItem: number, FaceIndex: number, TraceStart: Vector, TraceEnd: Vector};
+	FindCollisionUV(UVChannel: number,UV?: Vector2D): {UV: Vector2D, $: boolean};
+	GetSurfaceType(): EPhysicalSurface;
+	static BreakHitResult(Hit: HitResult,bBlockingHit?: boolean,bInitialOverlap?: boolean,Time?: number,Distance?: number,Location?: Vector,ImpactPoint?: Vector,Normal?: Vector,ImpactNormal?: Vector,PhysMat?: PhysicalMaterial,HitActor?: Actor,HitComponent?: PrimitiveComponent,HitBoneName?: string,HitItem?: number,FaceIndex?: number,TraceStart?: Vector,TraceEnd?: Vector): {bBlockingHit: boolean, bInitialOverlap: boolean, Time: number, Distance: number, Location: Vector, ImpactPoint: Vector, Normal: Vector, ImpactNormal: Vector, PhysMat: PhysicalMaterial, HitActor: Actor, HitComponent: PrimitiveComponent, HitBoneName: string, HitItem: number, FaceIndex: number, TraceStart: Vector, TraceEnd: Vector};
+	static FindCollisionUV(Hit: HitResult,UVChannel: number,UV?: Vector2D): {UV: Vector2D, $: boolean};
+	static GetSurfaceType(Hit: HitResult): EPhysicalSurface;
+	static MakeHitResult(bBlockingHit: boolean,bInitialOverlap: boolean,Time: number,Distance: number,Location: Vector,ImpactPoint: Vector,Normal: Vector,ImpactNormal: Vector,PhysMat: PhysicalMaterial,HitActor: Actor,HitComponent: PrimitiveComponent,HitBoneName: string,HitItem: number,FaceIndex: number,TraceStart: Vector,TraceEnd: Vector): HitResult;
 }
 
-declare type EPinContainerType = 'None' | 'Array' | 'Set' | 'Map' | 'EPinContainerType_MAX';
-declare var EPinContainerType : { None:'None',Array:'Array',Set:'Set',Map:'Map',EPinContainerType_MAX:'EPinContainerType_MAX', };
-declare class EdGraphPinType { 
-	PinCategory: string;
-	PinSubCategory: string;
-	PinSubCategoryObject: any;
-	PinSubCategoryMemberReference: SimpleMemberReference;
-	PinValueType: EdGraphTerminalType;
-	ContainerType: EPinContainerType;
-	bIsArray: boolean;
-	bIsReference: boolean;
-	bIsConst: boolean;
-	bIsWeakPointer: boolean;
-	clone() : EdGraphPinType;
-	static C(Other: UObject | any): EdGraphPinType;
+declare type EDetachmentRule = 'KeepRelative' | 'KeepWorld' | 'EDetachmentRule_MAX';
+declare var EDetachmentRule : { KeepRelative:'KeepRelative',KeepWorld:'KeepWorld',EDetachmentRule_MAX:'EDetachmentRule_MAX', };
+declare type EAttachmentRule = 'KeepRelative' | 'KeepWorld' | 'SnapToTarget' | 'EAttachmentRule_MAX';
+declare var EAttachmentRule : { KeepRelative:'KeepRelative',KeepWorld:'KeepWorld',SnapToTarget:'SnapToTarget',EAttachmentRule_MAX:'EAttachmentRule_MAX', };
+declare type EAttachLocation = 'KeepRelativeOffset' | 'KeepWorldPosition' | 'SnapToTarget' | 'SnapToTargetIncludingScale' | 'EAttachLocation_MAX';
+declare var EAttachLocation : { KeepRelativeOffset:'KeepRelativeOffset',KeepWorldPosition:'KeepWorldPosition',SnapToTarget:'SnapToTarget',SnapToTargetIncludingScale:'SnapToTargetIncludingScale',EAttachLocation_MAX:'EAttachLocation_MAX', };
+declare type ERelativeTransformSpace = 'RTS_World' | 'RTS_Actor' | 'RTS_Component' | 'RTS_ParentBoneSpace' | 'RTS_MAX';
+declare var ERelativeTransformSpace : { RTS_World:'RTS_World',RTS_Actor:'RTS_Actor',RTS_Component:'RTS_Component',RTS_ParentBoneSpace:'RTS_ParentBoneSpace',RTS_MAX:'RTS_MAX', };
+declare type EMoveComponentAction = 'Move' | 'Stop' | 'Return' | 'EMoveComponentAction_MAX';
+declare var EMoveComponentAction : { Move:'Move',Stop:'Stop',Return:'Return',EMoveComponentAction_MAX:'EMoveComponentAction_MAX', };
+declare class LatentActionInfo { 
+	Linkage: number;
+	UUID: number;
+	ExecutionFunction: string;
+	CallbackTarget: UObject;
+	clone() : LatentActionInfo;
+	static C(Other: UObject | any): LatentActionInfo;
 }
 
-declare class EdGraphPin_Deprecated extends UObject { 
-	PinName: string;
-	PinFriendlyName: string;
-	PinToolTip: string;
-	Direction: EEdGraphPinDirection;
-	PinType: EdGraphPinType;
-	DefaultValue: string;
-	AutogeneratedDefaultValue: string;
-	DefaultObject: UObject;
-	DefaultTextValue: string;
-	LinkedTo: EdGraphPin_Deprecated[];
-	SubPins: EdGraphPin_Deprecated[];
-	ParentPin: EdGraphPin_Deprecated;
-	ReferencePassThroughConnection: EdGraphPin_Deprecated;
-	bHidden: boolean;
-	bNotConnectable: boolean;
-	bDefaultValueIsReadOnly: boolean;
-	bDefaultValueIsIgnored: boolean;
-	bIsDiffing: boolean;
-	bAdvancedView: boolean;
-	bDisplayAsMutableRef: boolean;
-	PersistentGuid: Guid;
-	static Load(ResourceName: string): EdGraphPin_Deprecated;
-	static Find(Outer: UObject, ResourceName: string): EdGraphPin_Deprecated;
-	static GetDefaultObject(): EdGraphPin_Deprecated;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdGraphPin_Deprecated;
-	static C(Other: UObject | any): EdGraphPin_Deprecated;
+declare class ARPin extends UObject { 
+	TrackedGeometry: ARTrackedGeometry;
+	PinnedComponent: SceneComponent;
+	LocalToTrackingTransform: Transform;
+	LocalToAlignedTrackingTransform: Transform;
+	TrackingState: EARTrackingState;
+	OnARTrackingStateChanged: UnrealEngineMulticastDelegate<(NewTrackingState: EARTrackingState) => void>;
+	OnARTransformUpdated: UnrealEngineMulticastDelegate<(OldToNewTransform: Transform) => void>;
+	static Load(ResourceName: string): ARPin;
+	static Find(Outer: UObject, ResourceName: string): ARPin;
+	static GetDefaultObject(): ARPin;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARPin;
+	GetTrackingState(): EARTrackingState;
+	GetTrackedGeometry(): ARTrackedGeometry;
+	GetPinnedComponent(): SceneComponent;
+	GetLocalToWorldTransform(): Transform;
+	GetLocalToTrackingTransform(): Transform;
+	GetDebugName(): string;
+	DebugDraw(World: World,Color: LinearColor,Scale: number,PersistForSeconds: number): void;
+	static C(Other: UObject | any): ARPin;
+	DebugDrawPin(WorldContextObject: UObject,Color: LinearColor,Scale: number,PersistForSeconds: number): void;
+	RemovePin(): void;
+	static DebugDrawPin(ARPin: ARPin,WorldContextObject: UObject,Color: LinearColor,Scale: number,PersistForSeconds: number): void;
+	static RemovePin(PinToRemove: ARPin): void;
 }
 
-declare type ENodeAdvancedPins = 'NoPins' | 'Shown' | 'Hidden' | 'ENodeAdvancedPins_MAX';
-declare var ENodeAdvancedPins : { NoPins:'NoPins',Shown:'Shown',Hidden:'Hidden',ENodeAdvancedPins_MAX:'ENodeAdvancedPins_MAX', };
-declare type ENodeEnabledState = 'Enabled' | 'Disabled' | 'DevelopmentOnly' | 'ENodeEnabledState_MAX';
-declare var ENodeEnabledState : { Enabled:'Enabled',Disabled:'Disabled',DevelopmentOnly:'DevelopmentOnly',ENodeEnabledState_MAX:'ENodeEnabledState_MAX', };
-declare type EJavascriptPinContainerType = 'None' | 'Array' | 'Set' | 'Map' | 'EJavascriptPinContainerType_MAX';
-declare var EJavascriptPinContainerType : { None:'None',Array:'Array',Set:'Set',Map:'Map',EJavascriptPinContainerType_MAX:'EJavascriptPinContainerType_MAX', };
-declare class JavascriptEdGraphPin { 
-	clone() : JavascriptEdGraphPin;
-	static C(Other: UObject | any): JavascriptEdGraphPin;
-	BreakAllPinLinks(): void;
-	BreakLinkTo(B: JavascriptEdGraphPin): void;
-	GetDirection(): EEdGraphPinDirection;
-	GetLinkedTo(): JavascriptEdGraphPin[];
-	GetOwningNode(): EdGraphNode;
-	GetPinContainerType(): EJavascriptPinContainerType;
-	GetPinGUID(): Guid;
-	GetPinName(): string;
-	GetPinType(): EdGraphPinType;
-	IsValid(): boolean;
-	MakeLinkTo(B: JavascriptEdGraphPin): void;
-	SetPinInfo(InPinName: string,InPinToolTip: string): void;
-	SetPinType(PinType: EdGraphPinType): void;
-	static BreakAllPinLinks(A: JavascriptEdGraphPin): void;
-	static BreakLinkTo(A: JavascriptEdGraphPin,B: JavascriptEdGraphPin): void;
-	static GetDirection(A: JavascriptEdGraphPin): EEdGraphPinDirection;
-	static GetLinkedTo(A: JavascriptEdGraphPin): JavascriptEdGraphPin[];
-	static GetOwningNode(A: JavascriptEdGraphPin): EdGraphNode;
-	static GetPinContainerType(A: JavascriptEdGraphPin): EJavascriptPinContainerType;
-	static GetPinGUID(A: JavascriptEdGraphPin): Guid;
-	static GetPinName(A: JavascriptEdGraphPin): string;
-	static GetPinType(A: JavascriptEdGraphPin): EdGraphPinType;
-	static IsValid(A: JavascriptEdGraphPin): boolean;
-	static MakeLinkTo(A: JavascriptEdGraphPin,B: JavascriptEdGraphPin): void;
-	static SetPinInfo(A: JavascriptEdGraphPin,InPinName: string,InPinToolTip: string): void;
-	static SetPinType(Pin: JavascriptEdGraphPin,PinType: EdGraphPinType): void;
-	static GetDefaultObject(): JavascriptEdGraphPin;
-}
-
-declare class EdGraphNode extends UObject { 
-	DeprecatedPins: EdGraphPin_Deprecated[];
-	NodePosX: number;
-	NodePosY: number;
-	NodeWidth: number;
-	NodeHeight: number;
-	AdvancedPinDisplay: ENodeAdvancedPins;
-	EnabledState: ENodeEnabledState;
-	bDisplayAsDisabled: boolean;
-	bUserSetEnabledState: boolean;
-	bIsNodeEnabled: boolean;
-	bCanResizeNode: boolean;
-	bHasCompilerMessage: boolean;
-	bCommentBubblePinned: boolean;
-	bCommentBubbleVisible: boolean;
-	bCommentBubbleMakeVisible: boolean;
-	bCanRenameNode: boolean;
-	NodeUpgradeMessage: string;
-	NodeComment: string;
-	ErrorType: number;
-	ErrorMsg: string;
-	NodeGuid: Guid;
-	static Load(ResourceName: string): EdGraphNode;
-	static Find(Outer: UObject, ResourceName: string): EdGraphNode;
-	static GetDefaultObject(): EdGraphNode;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdGraphNode;
-	static C(Other: UObject | any): EdGraphNode;
-	AutowireNewNode(FromPin: JavascriptEdGraphPin): void;
-	CanDuplicateNode(): boolean;
-	CanUserDeleteNode(): boolean;
-	DestroyNode(): void;
-	FindPin(PinName: string,Direction: EEdGraphPinDirection): JavascriptEdGraphPin;
-	GetPins(): JavascriptEdGraphPin[];
-	ResizeNode(NewSize: Vector2D): void;
-	static AutowireNewNode(UNode: EdGraphNode,FromPin: JavascriptEdGraphPin): void;
-	static CanDuplicateNode(UNode: EdGraphNode): boolean;
-	static CanUserDeleteNode(UNode: EdGraphNode): boolean;
-	static DestroyNode(UNode: EdGraphNode): void;
-	static FindPin(UNode: EdGraphNode,PinName: string,Direction: EEdGraphPinDirection): JavascriptEdGraphPin;
-	static GetPins(UNode: EdGraphNode): JavascriptEdGraphPin[];
-	static ResizeNode(UNode: EdGraphNode,NewSize: Vector2D): void;
+declare class SceneComponent extends ActorComponent { 
+	PhysicsVolume: any;
+	AttachParent: SceneComponent;
+	AttachSocketName: string;
+	AttachChildren: SceneComponent[];
+	ClientAttachedChildren: SceneComponent[];
+	RelativeLocation: Vector;
+	RelativeRotation: Rotator;
+	RelativeScale3D: Vector;
+	ComponentVelocity: Vector;
+	bComponentToWorldUpdated: boolean;
+	bAbsoluteLocation: boolean;
+	bAbsoluteRotation: boolean;
+	bAbsoluteScale: boolean;
+	bVisible: boolean;
+	bHiddenInGame: boolean;
+	bShouldBeAttached: boolean;
+	bShouldSnapLocationWhenAttached: boolean;
+	bShouldSnapRotationWhenAttached: boolean;
+	bShouldUpdatePhysicsVolume: boolean;
+	bBoundsChangeTriggersStreamingDataRebuild: boolean;
+	bUseAttachParentBound: boolean;
+	bVisualizeComponent: boolean;
+	Mobility: EComponentMobility;
+	DetailMode: EDetailMode;
+	PhysicsVolumeChangedDelegate: UnrealEngineMulticastDelegate<(NewVolume: PhysicsVolume) => void>;
+	static Load(ResourceName: string): SceneComponent;
+	static Find(Outer: UObject, ResourceName: string): SceneComponent;
+	static GetDefaultObject(): SceneComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneComponent;
+	ToggleVisibility(bPropagateToChildren: boolean): void;
+	SnapTo(InParent: SceneComponent,InSocketName: string): boolean;
+	SetWorldScale3D(NewScale: Vector): void;
+	SetVisibility(bNewVisibility: boolean,bPropagateToChildren: boolean): void;
+	SetShouldUpdatePhysicsVolume(bInShouldUpdatePhysicsVolume: boolean): void;
+	SetRelativeScale3D(NewScale3D: Vector): void;
+	SetMobility(NewMobility: EComponentMobility): void;
+	SetHiddenInGame(NewHidden: boolean,bPropagateToChildren: boolean): void;
+	SetAbsolute(bNewAbsoluteLocation: boolean,bNewAbsoluteRotation: boolean,bNewAbsoluteScale: boolean): void;
+	ResetRelativeTransform(): void;
+	OnRep_Visibility(OldValue: boolean): void;
+	OnRep_Transform(): void;
+	OnRep_AttachSocketName(): void;
+	OnRep_AttachParent(): void;
+	OnRep_AttachChildren(): void;
+	K2_SetWorldTransform(NewTransform: Transform,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
+	K2_SetWorldRotation(NewRotation: Rotator,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
+	K2_SetWorldLocationAndRotation(NewLocation: Vector,NewRotation: Rotator,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
+	K2_SetWorldLocation(NewLocation: Vector,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
+	K2_SetRelativeTransform(NewTransform: Transform,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
+	K2_SetRelativeRotation(NewRotation: Rotator,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
+	K2_SetRelativeLocationAndRotation(NewLocation: Vector,NewRotation: Rotator,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
+	K2_SetRelativeLocation(NewLocation: Vector,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
+	K2_GetComponentToWorld(): Transform;
+	K2_GetComponentScale(): Vector;
+	K2_GetComponentRotation(): Rotator;
+	K2_GetComponentLocation(): Vector;
+	K2_DetachFromComponent(LocationRule: EDetachmentRule,RotationRule: EDetachmentRule,ScaleRule: EDetachmentRule,bCallModify: boolean): void;
+	K2_AttachToComponent(Parent: SceneComponent,SocketName: string,LocationRule: EAttachmentRule,RotationRule: EAttachmentRule,ScaleRule: EAttachmentRule,bWeldSimulatedBodies: boolean): boolean;
+	K2_AttachTo(InParent: SceneComponent,InSocketName: string,AttachType: EAttachLocation,bWeldSimulatedBodies: boolean): boolean;
+	K2_AddWorldTransform(DeltaTransform: Transform,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
+	K2_AddWorldRotation(DeltaRotation: Rotator,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
+	K2_AddWorldOffset(DeltaLocation: Vector,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
+	K2_AddRelativeRotation(DeltaRotation: Rotator,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
+	K2_AddRelativeLocation(DeltaLocation: Vector,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
+	K2_AddLocalTransform(DeltaTransform: Transform,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
+	K2_AddLocalRotation(DeltaRotation: Rotator,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
+	K2_AddLocalOffset(DeltaLocation: Vector,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
+	IsVisible(): boolean;
+	IsSimulatingPhysics(BoneName: string): boolean;
+	IsAnySimulatingPhysics(): boolean;
+	GetUpVector(): Vector;
+	GetSocketTransform(InSocketName: string,TransformSpace: ERelativeTransformSpace): Transform;
+	GetSocketRotation(InSocketName: string): Rotator;
+	GetSocketQuaternion(InSocketName: string): Quat;
+	GetSocketLocation(InSocketName: string): Vector;
+	GetShouldUpdatePhysicsVolume(): boolean;
+	GetRightVector(): Vector;
+	GetRelativeTransform(): Transform;
+	GetPhysicsVolume(): PhysicsVolume;
+	GetParentComponents(Parents?: SceneComponent[]): {Parents: SceneComponent[]};
+	GetNumChildrenComponents(): number;
+	GetForwardVector(): Vector;
+	GetComponentVelocity(): Vector;
+	GetChildrenComponents(bIncludeAllDescendants: boolean,Children?: SceneComponent[]): {Children: SceneComponent[]};
+	GetChildComponent(ChildIndex: number): SceneComponent;
+	GetAttachSocketName(): string;
+	GetAttachParent(): SceneComponent;
+	GetAllSocketNames(): string[];
+	DoesSocketExist(InSocketName: string): boolean;
+	DetachFromParent(bMaintainWorldPosition: boolean,bCallModify: boolean): void;
+	static C(Other: UObject | any): SceneComponent;
+	SetMobile(): void;
+	SetMobility(Type: EComponentMobility): void;
+	GetComponentBounds(Origin?: Vector,BoxExtent?: Vector,SphereRadius?: number): {Origin: Vector, BoxExtent: Vector, SphereRadius: number};
+	MoveComponentTo(TargetRelativeLocation: Vector,TargetRelativeRotation: Rotator,bEaseOut: boolean,bEaseIn: boolean,OverTime: number,bForceShortestRotationPath: boolean,MoveAction: EMoveComponentAction,LatentInfo: LatentActionInfo): void;
+	PinComponent(PinToWorldTransform: Transform,TrackedGeometry: ARTrackedGeometry,DebugName: string): ARPin;
+	PinComponentToTraceResult(TraceResult: ARTraceResult,DebugName: string): ARPin;
+	UnpinComponent(): void;
+	static SetMobile(SceneComponent: SceneComponent): void;
+	static SetMobility(SceneComponent: SceneComponent,Type: EComponentMobility): void;
+	static GetComponentBounds(Component: SceneComponent,Origin?: Vector,BoxExtent?: Vector,SphereRadius?: number): {Origin: Vector, BoxExtent: Vector, SphereRadius: number};
+	static MoveComponentTo(Component: SceneComponent,TargetRelativeLocation: Vector,TargetRelativeRotation: Rotator,bEaseOut: boolean,bEaseIn: boolean,OverTime: number,bForceShortestRotationPath: boolean,MoveAction: EMoveComponentAction,LatentInfo: LatentActionInfo): void;
+	static PinComponent(ComponentToPin: SceneComponent,PinToWorldTransform: Transform,TrackedGeometry: ARTrackedGeometry,DebugName: string): ARPin;
+	static PinComponentToTraceResult(ComponentToPin: SceneComponent,TraceResult: ARTraceResult,DebugName: string): ARPin;
+	static UnpinComponent(ComponentToUnpin: SceneComponent): void;
 }
 
-declare type EMaterialFunctionUsage = 'Default' | 'MaterialLayer' | 'MaterialLayerBlend' | 'EMaterialFunctionUsage_MAX';
-declare var EMaterialFunctionUsage : { Default:'Default',MaterialLayer:'MaterialLayer',MaterialLayerBlend:'MaterialLayerBlend',EMaterialFunctionUsage_MAX:'EMaterialFunctionUsage_MAX', };
-declare class MaterialFunctionInterface extends UObject { 
-	StateId: Guid;
-	MaterialFunctionUsage: EMaterialFunctionUsage;
-	CombinedInputTypes: any;
-	CombinedOutputTypes: any;
-	ThumbnailInfo: ThumbnailInfo;
-	static Load(ResourceName: string): MaterialFunctionInterface;
-	static Find(Outer: UObject, ResourceName: string): MaterialFunctionInterface;
-	static GetDefaultObject(): MaterialFunctionInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionInterface;
-	static C(Other: UObject | any): MaterialFunctionInterface;
-	UpdateMaterialFunction(PreviewMaterial: Material): void;
-	static UpdateMaterialFunction(MaterialFunction: MaterialFunctionInterface,PreviewMaterial: Material): void;
+declare type ESceneDepthPriorityGroup = 'SDPG_World' | 'SDPG_Foreground' | 'SDPG_MAX';
+declare var ESceneDepthPriorityGroup : { SDPG_World:'SDPG_World',SDPG_Foreground:'SDPG_Foreground',SDPG_MAX:'SDPG_MAX', };
+declare type EIndirectLightingCacheQuality = 'ILCQ_Off' | 'ILCQ_Point' | 'ILCQ_Volume' | 'ILCQ_MAX';
+declare var EIndirectLightingCacheQuality : { ILCQ_Off:'ILCQ_Off',ILCQ_Point:'ILCQ_Point',ILCQ_Volume:'ILCQ_Volume',ILCQ_MAX:'ILCQ_MAX', };
+declare type ELightmapType = 'Default' | 'ForceSurface' | 'ForceVolumetric' | 'ELightmapType_MAX';
+declare var ELightmapType : { Default:'Default',ForceSurface:'ForceSurface',ForceVolumetric:'ForceVolumetric',ELightmapType_MAX:'ELightmapType_MAX', };
+declare type EHasCustomNavigableGeometry = 'No' | 'Yes' | 'EvenIfNotCollidable' | 'DontExport' | 'EHasCustomNavigableGeometry_MAX';
+declare var EHasCustomNavigableGeometry : { No:'No',Yes:'Yes',EvenIfNotCollidable:'EvenIfNotCollidable',DontExport:'DontExport',EHasCustomNavigableGeometry_MAX:'EHasCustomNavigableGeometry_MAX', };
+declare type ECanBeCharacterBase = 'ECB_No' | 'ECB_Yes' | 'ECB_Owner' | 'ECB_MAX';
+declare var ECanBeCharacterBase : { ECB_No:'ECB_No',ECB_Yes:'ECB_Yes',ECB_Owner:'ECB_Owner',ECB_MAX:'ECB_MAX', };
+declare class LightingChannels { 
+	bChannel0: boolean;
+	bChannel1: boolean;
+	bChannel2: boolean;
+	clone() : LightingChannels;
+	static C(Other: UObject | any): LightingChannels;
 }
 
-declare class MaterialExpressionComment extends MaterialExpression { 
-	SizeX: number;
-	SizeY: number;
-	text: string;
-	CommentColor: LinearColor;
-	FontSize: number;
-	static Load(ResourceName: string): MaterialExpressionComment;
-	static Find(Outer: UObject, ResourceName: string): MaterialExpressionComment;
-	static GetDefaultObject(): MaterialExpressionComment;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionComment;
-	static C(Other: UObject | any): MaterialExpressionComment;
+declare type ERendererStencilMask = 'ERSM_Default' | 'ERSM_255' | 'ERSM_1' | 'ERSM_2' | 'ERSM_4' | 'ERSM_8' | 'ERSM_16' | 'ERSM_32' | 'ERSM_64' | 'ERSM_128' | 'ERSM_MAX';
+declare var ERendererStencilMask : { ERSM_Default:'ERSM_Default',ERSM_255:'ERSM_255',ERSM_1:'ERSM_1',ERSM_2:'ERSM_2',ERSM_4:'ERSM_4',ERSM_8:'ERSM_8',ERSM_16:'ERSM_16',ERSM_32:'ERSM_32',ERSM_64:'ERSM_64',ERSM_128:'ERSM_128',ERSM_MAX:'ERSM_MAX', };
+declare class CustomPrimitiveData { 
+	Data: number[];
+	clone() : CustomPrimitiveData;
+	static C(Other: UObject | any): CustomPrimitiveData;
 }
 
-declare class MaterialFunction extends MaterialFunctionInterface { 
-	ParentFunction: MaterialFunction;
-	Description: string;
-	bExposeToLibrary: boolean;
-	bPrefixParameterNames: boolean;
-	LibraryCategories: string[];
-	LibraryCategoriesText: string[];
-	FunctionExpressions: MaterialExpression[];
-	FunctionEditorComments: MaterialExpressionComment[];
-	PreviewMaterial: Material;
-	bReentrantFlag: boolean;
-	static Load(ResourceName: string): MaterialFunction;
-	static Find(Outer: UObject, ResourceName: string): MaterialFunction;
-	static GetDefaultObject(): MaterialFunction;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunction;
-	static C(Other: UObject | any): MaterialFunction;
-	CreateMaterialExpressionInFunction(ExpressionClass: UnrealEngineClass,NodePosX: number,NodePosY: number): MaterialExpression;
-	DeleteAllMaterialExpressionsInFunction(): void;
-	DeleteMaterialExpressionInFunction(Expression: MaterialExpression): void;
-	GetNumMaterialExpressionsInFunction(): number;
-	static CreateMaterialExpressionInFunction(MaterialFunction: MaterialFunction,ExpressionClass: UnrealEngineClass,NodePosX: number,NodePosY: number): MaterialExpression;
-	static DeleteAllMaterialExpressionsInFunction(MaterialFunction: MaterialFunction): void;
-	static DeleteMaterialExpressionInFunction(MaterialFunction: MaterialFunction,Expression: MaterialExpression): void;
-	static GetNumMaterialExpressionsInFunction(MaterialFunction: MaterialFunction): number;
+declare type ERuntimeVirtualTextureMaterialType = 'BaseColor' | 'BaseColor_Normal' | 'BaseColor_Normal_Specular' | 'Count' | 'ERuntimeVirtualTextureMaterialType_MAX';
+declare var ERuntimeVirtualTextureMaterialType : { BaseColor:'BaseColor',BaseColor_Normal:'BaseColor_Normal',BaseColor_Normal_Specular:'BaseColor_Normal_Specular',Count:'Count',ERuntimeVirtualTextureMaterialType_MAX:'ERuntimeVirtualTextureMaterialType_MAX', };
+declare class RuntimeVirtualTexture extends UObject { 
+	MaterialType: ERuntimeVirtualTextureMaterialType;
+	bCompressTextures: boolean;
+	Size: number;
+	TileSize: number;
+	TileBorderSize: number;
+	RemoveLowMips: number;
+	bEnable: boolean;
+	static Load(ResourceName: string): RuntimeVirtualTexture;
+	static Find(Outer: UObject, ResourceName: string): RuntimeVirtualTexture;
+	static GetDefaultObject(): RuntimeVirtualTexture;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RuntimeVirtualTexture;
+	static C(Other: UObject | any): RuntimeVirtualTexture;
+}
+
+declare type ERuntimeVirtualTextureMainPassType = 'Never' | 'Exclusive' | 'Always' | 'ERuntimeVirtualTextureMainPassType_MAX';
+declare var ERuntimeVirtualTextureMainPassType : { Never:'Never',Exclusive:'Exclusive',Always:'Always',ERuntimeVirtualTextureMainPassType_MAX:'ERuntimeVirtualTextureMainPassType_MAX', };
+declare type EUINavigationAction = 'Accept' | 'Back' | 'Num' | 'Invalid' | 'EUINavigationAction_MAX';
+declare var EUINavigationAction : { Accept:'Accept',Back:'Back',Num:'Num',Invalid:'Invalid',EUINavigationAction_MAX:'EUINavigationAction_MAX', };
+declare class Key { 
+	KeyName: string;
+	clone() : Key;
+	static C(Other: UObject | any): Key;
+	EqualEqual_KeyKey(B: Key): boolean;
+	Key_GetDisplayName(): string;
+	Key_GetNavigationAction(): EUINavigationAction;
+	Key_IsFloatAxis(): boolean;
+	Key_IsGamepadKey(): boolean;
+	Key_IsKeyboardKey(): boolean;
+	Key_IsModifierKey(): boolean;
+	Key_IsMouseButton(): boolean;
+	Key_IsValid(): boolean;
+	Key_IsVectorAxis(): boolean;
+	static EqualEqual_KeyKey(A: Key,B: Key): boolean;
+	static Key_GetDisplayName(Key: Key): string;
+	static Key_GetNavigationAction(InKey: Key): EUINavigationAction;
+	static Key_IsFloatAxis(Key: Key): boolean;
+	static Key_IsGamepadKey(Key: Key): boolean;
+	static Key_IsKeyboardKey(Key: Key): boolean;
+	static Key_IsModifierKey(Key: Key): boolean;
+	static Key_IsMouseButton(Key: Key): boolean;
+	static Key_IsValid(Key: Key): boolean;
+	static Key_IsVectorAxis(Key: Key): boolean;
 }
 
-declare class ExpressionOutput { 
-	OutputName: string;
-	mask: number;
-	MaskR: number;
-	MaskG: number;
-	MaskB: number;
-	MaskA: number;
-	clone() : ExpressionOutput;
-	static C(Other: UObject | any): ExpressionOutput;
-}
-
-declare type EMaterialProperty = 'MP_EmissiveColor' | 'MP_Opacity' | 'MP_OpacityMask' | 'MP_DiffuseColor' | 'MP_SpecularColor' | 'MP_BaseColor' | 'MP_Metallic' | 'MP_Specular' | 'MP_Roughness' | 'MP_Normal' | 'MP_WorldPositionOffset' | 'MP_WorldDisplacement' | 'MP_TessellationMultiplier' | 'MP_SubsurfaceColor' | 'MP_CustomData0' | 'MP_CustomData1' | 'MP_AmbientOcclusion' | 'MP_Refraction' | 'MP_CustomizedUVs0' | 'MP_CustomizedUVs1' | 'MP_CustomizedUVs2' | 'MP_CustomizedUVs3' | 'MP_CustomizedUVs4' | 'MP_CustomizedUVs5' | 'MP_CustomizedUVs6' | 'MP_CustomizedUVs7' | 'MP_PixelDepthOffset' | 'MP_MaterialAttributes' | 'MP_CustomOutput' | 'MP_MAX';
-declare var EMaterialProperty : { MP_EmissiveColor:'MP_EmissiveColor',MP_Opacity:'MP_Opacity',MP_OpacityMask:'MP_OpacityMask',MP_DiffuseColor:'MP_DiffuseColor',MP_SpecularColor:'MP_SpecularColor',MP_BaseColor:'MP_BaseColor',MP_Metallic:'MP_Metallic',MP_Specular:'MP_Specular',MP_Roughness:'MP_Roughness',MP_Normal:'MP_Normal',MP_WorldPositionOffset:'MP_WorldPositionOffset',MP_WorldDisplacement:'MP_WorldDisplacement',MP_TessellationMultiplier:'MP_TessellationMultiplier',MP_SubsurfaceColor:'MP_SubsurfaceColor',MP_CustomData0:'MP_CustomData0',MP_CustomData1:'MP_CustomData1',MP_AmbientOcclusion:'MP_AmbientOcclusion',MP_Refraction:'MP_Refraction',MP_CustomizedUVs0:'MP_CustomizedUVs0',MP_CustomizedUVs1:'MP_CustomizedUVs1',MP_CustomizedUVs2:'MP_CustomizedUVs2',MP_CustomizedUVs3:'MP_CustomizedUVs3',MP_CustomizedUVs4:'MP_CustomizedUVs4',MP_CustomizedUVs5:'MP_CustomizedUVs5',MP_CustomizedUVs6:'MP_CustomizedUVs6',MP_CustomizedUVs7:'MP_CustomizedUVs7',MP_PixelDepthOffset:'MP_PixelDepthOffset',MP_MaterialAttributes:'MP_MaterialAttributes',MP_CustomOutput:'MP_CustomOutput',MP_MAX:'MP_MAX', };
-declare class MaterialExpression extends UObject { 
-	MaterialExpressionEditorX: number;
-	MaterialExpressionEditorY: number;
-	GraphNode: EdGraphNode;
-	MaterialExpressionGuid: Guid;
-	Material: Material;
-	UFunction: MaterialFunction;
-	Desc: string;
-	bRealtimePreview: boolean;
-	bNeedToUpdatePreview: boolean;
-	bIsParameterExpression: boolean;
-	bCommentBubbleVisible: boolean;
-	bShowOutputNameOnPin: boolean;
-	bShowMaskColorsOnPin: boolean;
-	bHidePreviewWindow: boolean;
-	bCollapsed: boolean;
-	bShaderInputData: boolean;
-	bShowInputs: boolean;
-	bShowOutputs: boolean;
-	MenuCategories: string[];
-	Outputs: ExpressionOutput[];
-	static Load(ResourceName: string): MaterialExpression;
-	static Find(Outer: UObject, ResourceName: string): MaterialExpression;
-	static GetDefaultObject(): MaterialExpression;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpression;
-	static C(Other: UObject | any): MaterialExpression;
-	ConnectMaterialExpressions(FromOutputName: string,ToExpression: MaterialExpression,ToInputName: string): boolean;
-	ConnectMaterialProperty(FromOutputName: string,Property: EMaterialProperty): boolean;
-	static ConnectMaterialExpressions(FromExpression: MaterialExpression,FromOutputName: string,ToExpression: MaterialExpression,ToInputName: string): boolean;
-	static ConnectMaterialProperty(FromExpression: MaterialExpression,FromOutputName: string,Property: EMaterialProperty): boolean;
-}
-
-declare class MaterialInput { 
-	Expression: MaterialExpression;
-	OutputIndex: number;
-	InputName: string;
-	mask: number;
-	MaskR: number;
-	MaskG: number;
-	MaskB: number;
-	MaskA: number;
-	ExpressionName: string;
-	clone() : MaterialInput;
-	static C(Other: UObject | any): MaterialInput;
-}
-
-declare class ColorMaterialInput extends MaterialInput { 
-	UseConstant: boolean;
-	Constant: Color;
-	clone() : ColorMaterialInput;
-	static C(Other: UObject | any): ColorMaterialInput;
-}
-
-declare class ScalarMaterialInput extends MaterialInput { 
-	UseConstant: boolean;
-	Constant: number;
-	clone() : ScalarMaterialInput;
-	static C(Other: UObject | any): ScalarMaterialInput;
+declare type ETouchIndex = 'Touch1' | 'Touch2' | 'Touch3' | 'Touch4' | 'Touch5' | 'Touch6' | 'Touch7' | 'Touch8' | 'Touch9' | 'Touch10' | 'CursorPointerIndex' | 'MAX_TOUCHES' | 'ETouchIndex_MAX';
+declare var ETouchIndex : { Touch1:'Touch1',Touch2:'Touch2',Touch3:'Touch3',Touch4:'Touch4',Touch5:'Touch5',Touch6:'Touch6',Touch7:'Touch7',Touch8:'Touch8',Touch9:'Touch9',Touch10:'Touch10',CursorPointerIndex:'CursorPointerIndex',MAX_TOUCHES:'MAX_TOUCHES',ETouchIndex_MAX:'ETouchIndex_MAX', };
+declare class SubsurfaceProfileStruct { 
+	ScatterRadius: number;
+	SubsurfaceColor: LinearColor;
+	FalloffColor: LinearColor;
+	BoundaryColorBleed: LinearColor;
+	ExtinctionScale: number;
+	NormalScale: number;
+	ScatteringDistribution: number;
+	IOR: number;
+	Roughness0: number;
+	Roughness1: number;
+	LobeMix: number;
+	clone() : SubsurfaceProfileStruct;
+	static C(Other: UObject | any): SubsurfaceProfileStruct;
 }
 
-declare class VectorMaterialInput extends MaterialInput { 
-	UseConstant: boolean;
-	Constant: Vector;
-	clone() : VectorMaterialInput;
-	static C(Other: UObject | any): VectorMaterialInput;
+declare class SubsurfaceProfile extends UObject { 
+	Settings: SubsurfaceProfileStruct;
+	static Load(ResourceName: string): SubsurfaceProfile;
+	static Find(Outer: UObject, ResourceName: string): SubsurfaceProfile;
+	static GetDefaultObject(): SubsurfaceProfile;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubsurfaceProfile;
+	static C(Other: UObject | any): SubsurfaceProfile;
 }
 
-declare type EMaterialDomain = 'MD_Surface' | 'MD_DeferredDecal' | 'MD_LightFunction' | 'MD_Volume' | 'MD_PostProcess' | 'MD_UI' | 'MD_MAX';
-declare var EMaterialDomain : { MD_Surface:'MD_Surface',MD_DeferredDecal:'MD_DeferredDecal',MD_LightFunction:'MD_LightFunction',MD_Volume:'MD_Volume',MD_PostProcess:'MD_PostProcess',MD_UI:'MD_UI',MD_MAX:'MD_MAX', };
-declare type EBlendMode = 'BLEND_Opaque' | 'BLEND_Masked' | 'BLEND_Translucent' | 'BLEND_Additive' | 'BLEND_Modulate' | 'BLEND_AlphaComposite' | 'BLEND_MAX';
-declare var EBlendMode : { BLEND_Opaque:'BLEND_Opaque',BLEND_Masked:'BLEND_Masked',BLEND_Translucent:'BLEND_Translucent',BLEND_Additive:'BLEND_Additive',BLEND_Modulate:'BLEND_Modulate',BLEND_AlphaComposite:'BLEND_AlphaComposite',BLEND_MAX:'BLEND_MAX', };
-declare type EDecalBlendMode = 'DBM_Translucent' | 'DBM_Stain' | 'DBM_Normal' | 'DBM_Emissive' | 'DBM_DBuffer_ColorNormalRoughness' | 'DBM_DBuffer_Color' | 'DBM_DBuffer_ColorNormal' | 'DBM_DBuffer_ColorRoughness' | 'DBM_DBuffer_Normal' | 'DBM_DBuffer_NormalRoughness' | 'DBM_DBuffer_Roughness' | 'DBM_DBuffer_Emissive' | 'DBM_DBuffer_AlphaComposite' | 'DBM_DBuffer_EmissiveAlphaComposite' | 'DBM_Volumetric_DistanceFunction' | 'DBM_AlphaComposite' | 'DBM_AmbientOcclusion' | 'DBM_MAX';
-declare var EDecalBlendMode : { DBM_Translucent:'DBM_Translucent',DBM_Stain:'DBM_Stain',DBM_Normal:'DBM_Normal',DBM_Emissive:'DBM_Emissive',DBM_DBuffer_ColorNormalRoughness:'DBM_DBuffer_ColorNormalRoughness',DBM_DBuffer_Color:'DBM_DBuffer_Color',DBM_DBuffer_ColorNormal:'DBM_DBuffer_ColorNormal',DBM_DBuffer_ColorRoughness:'DBM_DBuffer_ColorRoughness',DBM_DBuffer_Normal:'DBM_DBuffer_Normal',DBM_DBuffer_NormalRoughness:'DBM_DBuffer_NormalRoughness',DBM_DBuffer_Roughness:'DBM_DBuffer_Roughness',DBM_DBuffer_Emissive:'DBM_DBuffer_Emissive',DBM_DBuffer_AlphaComposite:'DBM_DBuffer_AlphaComposite',DBM_DBuffer_EmissiveAlphaComposite:'DBM_DBuffer_EmissiveAlphaComposite',DBM_Volumetric_DistanceFunction:'DBM_Volumetric_DistanceFunction',DBM_AlphaComposite:'DBM_AlphaComposite',DBM_AmbientOcclusion:'DBM_AmbientOcclusion',DBM_MAX:'DBM_MAX', };
-declare type EMaterialDecalResponse = 'MDR_None' | 'MDR_ColorNormalRoughness' | 'MDR_Color' | 'MDR_ColorNormal' | 'MDR_ColorRoughness' | 'MDR_Normal' | 'MDR_NormalRoughness' | 'MDR_Roughness' | 'MDR_MAX';
-declare var EMaterialDecalResponse : { MDR_None:'MDR_None',MDR_ColorNormalRoughness:'MDR_ColorNormalRoughness',MDR_Color:'MDR_Color',MDR_ColorNormal:'MDR_ColorNormal',MDR_ColorRoughness:'MDR_ColorRoughness',MDR_Normal:'MDR_Normal',MDR_NormalRoughness:'MDR_NormalRoughness',MDR_Roughness:'MDR_Roughness',MDR_MAX:'MDR_MAX', };
-declare type EMaterialShadingModel = 'MSM_Unlit' | 'MSM_DefaultLit' | 'MSM_Subsurface' | 'MSM_PreintegratedSkin' | 'MSM_ClearCoat' | 'MSM_SubsurfaceProfile' | 'MSM_TwoSidedFoliage' | 'MSM_Hair' | 'MSM_Cloth' | 'MSM_Eye' | 'MSM_MAX';
-declare var EMaterialShadingModel : { MSM_Unlit:'MSM_Unlit',MSM_DefaultLit:'MSM_DefaultLit',MSM_Subsurface:'MSM_Subsurface',MSM_PreintegratedSkin:'MSM_PreintegratedSkin',MSM_ClearCoat:'MSM_ClearCoat',MSM_SubsurfaceProfile:'MSM_SubsurfaceProfile',MSM_TwoSidedFoliage:'MSM_TwoSidedFoliage',MSM_Hair:'MSM_Hair',MSM_Cloth:'MSM_Cloth',MSM_Eye:'MSM_Eye',MSM_MAX:'MSM_MAX', };
-declare class Vector2MaterialInput extends MaterialInput { 
-	UseConstant: boolean;
-	ConstantX: number;
-	ConstantY: number;
-	clone() : Vector2MaterialInput;
-	static C(Other: UObject | any): Vector2MaterialInput;
+declare class LightmassMaterialInterfaceSettings { 
+	bCastShadowAsMasked: boolean;
+	EmissiveBoost: number;
+	DiffuseBoost: number;
+	ExportResolutionScale: number;
+	bOverrideCastShadowAsMasked: boolean;
+	bOverrideEmissiveBoost: boolean;
+	bOverrideDiffuseBoost: boolean;
+	bOverrideExportResolutionScale: boolean;
+	clone() : LightmassMaterialInterfaceSettings;
+	static C(Other: UObject | any): LightmassMaterialInterfaceSettings;
 }
 
-declare class ExpressionInput { 
-	Expression: MaterialExpression;
-	OutputIndex: number;
-	InputName: string;
-	mask: number;
-	MaskR: number;
-	MaskG: number;
-	MaskB: number;
-	MaskA: number;
-	ExpressionName: string;
-	clone() : ExpressionInput;
-	static C(Other: UObject | any): ExpressionInput;
+declare class SoftObjectPath { 
+	AssetPathName: string;
+	SubPathString: string;
+	clone() : SoftObjectPath;
+	static C(Other: UObject | any): SoftObjectPath;
+	BreakSoftObjectPath(PathString?: string): {PathString: string};
+	Conv_SoftObjPathToSoftObjRef(): UObject;
+	static BreakSoftObjectPath(InSoftObjectPath: SoftObjectPath,PathString?: string): {PathString: string};
+	static Conv_SoftObjPathToSoftObjRef(SoftObjectPath: SoftObjectPath): UObject;
+	static MakeSoftObjectPath(PathString: string): SoftObjectPath;
 }
 
-declare class MaterialAttributesInput extends ExpressionInput { 
-	PropertyConnectedBitmask: number;
-	clone() : MaterialAttributesInput;
-	static C(Other: UObject | any): MaterialAttributesInput;
+declare class MaterialTextureInfo { 
+	SamplingScale: number;
+	UVChannelIndex: number;
+	TextureName: string;
+	TextureReference: SoftObjectPath;
+	TextureIndex: number;
+	clone() : MaterialTextureInfo;
+	static C(Other: UObject | any): MaterialTextureInfo;
 }
 
-declare type ETranslucencyLightingMode = 'TLM_VolumetricNonDirectional' | 'TLM_VolumetricDirectional' | 'TLM_VolumetricPerVertexNonDirectional' | 'TLM_VolumetricPerVertexDirectional' | 'TLM_Surface' | 'TLM_SurfacePerPixelLighting' | 'TLM_MAX';
-declare var ETranslucencyLightingMode : { TLM_VolumetricNonDirectional:'TLM_VolumetricNonDirectional',TLM_VolumetricDirectional:'TLM_VolumetricDirectional',TLM_VolumetricPerVertexNonDirectional:'TLM_VolumetricPerVertexNonDirectional',TLM_VolumetricPerVertexDirectional:'TLM_VolumetricPerVertexDirectional',TLM_Surface:'TLM_Surface',TLM_SurfacePerPixelLighting:'TLM_SurfacePerPixelLighting',TLM_MAX:'TLM_MAX', };
-declare type EMaterialTessellationMode = 'MTM_NoTessellation' | 'MTM_FlatTessellation' | 'MTM_PNTriangles' | 'MTM_MAX';
-declare var EMaterialTessellationMode : { MTM_NoTessellation:'MTM_NoTessellation',MTM_FlatTessellation:'MTM_FlatTessellation',MTM_PNTriangles:'MTM_PNTriangles',MTM_MAX:'MTM_MAX', };
-declare class ParameterGroupData { 
-	GroupName: string;
-	GroupSortPriority: number;
-	clone() : ParameterGroupData;
-	static C(Other: UObject | any): ParameterGroupData;
+declare class ThumbnailInfo extends UObject { 
+	static Load(ResourceName: string): ThumbnailInfo;
+	static Find(Outer: UObject, ResourceName: string): ThumbnailInfo;
+	static GetDefaultObject(): ThumbnailInfo;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ThumbnailInfo;
+	static C(Other: UObject | any): ThumbnailInfo;
 }
 
-declare class MaterialFunctionInfo { 
-	StateId: Guid;
-	UFunction: MaterialFunctionInterface;
-	clone() : MaterialFunctionInfo;
-	static C(Other: UObject | any): MaterialFunctionInfo;
+declare class AssetImportInfo { 
+	clone() : AssetImportInfo;
+	static C(Other: UObject | any): AssetImportInfo;
 }
 
-declare class CollectionParameterBase { 
-	ParameterName: string;
-	ID: Guid;
-	clone() : CollectionParameterBase;
-	static C(Other: UObject | any): CollectionParameterBase;
+declare class AssetImportData extends UObject { 
+	SourceFilePath: string;
+	SourceFileTimestamp: string;
+	SourceData: AssetImportInfo;
+	static Load(ResourceName: string): AssetImportData;
+	static Find(Outer: UObject, ResourceName: string): AssetImportData;
+	static GetDefaultObject(): AssetImportData;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetImportData;
+	K2_GetFirstFilename(): string;
+	K2_ExtractFilenames(): string[];
+	static C(Other: UObject | any): AssetImportData;
 }
 
-declare class CollectionScalarParameter extends CollectionParameterBase { 
-	DefaultValue: number;
-	clone() : CollectionScalarParameter;
-	static C(Other: UObject | any): CollectionScalarParameter;
+declare type EEdGraphPinDirection = 'EGPD_Input' | 'EGPD_Output' | 'EGPD_MAX';
+declare var EEdGraphPinDirection : { EGPD_Input:'EGPD_Input',EGPD_Output:'EGPD_Output',EGPD_MAX:'EGPD_MAX', };
+declare class EdGraphTerminalType { 
+	TerminalCategory: string;
+	TerminalSubCategory: string;
+	TerminalSubCategoryObject: any;
+	bTerminalIsConst: boolean;
+	bTerminalIsWeakPointer: boolean;
+	clone() : EdGraphTerminalType;
+	static C(Other: UObject | any): EdGraphTerminalType;
 }
 
-declare class CollectionVectorParameter extends CollectionParameterBase { 
-	DefaultValue: LinearColor;
-	clone() : CollectionVectorParameter;
-	static C(Other: UObject | any): CollectionVectorParameter;
+declare type EPinContainerType = 'None' | 'Array' | 'Set' | 'Map' | 'EPinContainerType_MAX';
+declare var EPinContainerType : { None:'None',Array:'Array',Set:'Set',Map:'Map',EPinContainerType_MAX:'EPinContainerType_MAX', };
+declare class EdGraphPinType { 
+	PinCategory: string;
+	PinSubCategory: string;
+	PinSubCategoryObject: any;
+	PinSubCategoryMemberReference: SimpleMemberReference;
+	PinValueType: EdGraphTerminalType;
+	ContainerType: EPinContainerType;
+	bIsArray: boolean;
+	bIsReference: boolean;
+	bIsConst: boolean;
+	bIsWeakPointer: boolean;
+	clone() : EdGraphPinType;
+	static C(Other: UObject | any): EdGraphPinType;
 }
 
-declare class MaterialParameterCollection extends UObject { 
-	StateId: Guid;
-	ScalarParameters: CollectionScalarParameter[];
-	VectorParameters: CollectionVectorParameter[];
-	static Load(ResourceName: string): MaterialParameterCollection;
-	static Find(Outer: UObject, ResourceName: string): MaterialParameterCollection;
-	static GetDefaultObject(): MaterialParameterCollection;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialParameterCollection;
-	static C(Other: UObject | any): MaterialParameterCollection;
+declare class EdGraphPin_Deprecated extends UObject { 
+	PinName: string;
+	PinFriendlyName: string;
+	PinToolTip: string;
+	Direction: EEdGraphPinDirection;
+	PinType: EdGraphPinType;
+	DefaultValue: string;
+	AutogeneratedDefaultValue: string;
+	DefaultObject: UObject;
+	DefaultTextValue: string;
+	LinkedTo: EdGraphPin_Deprecated[];
+	SubPins: EdGraphPin_Deprecated[];
+	ParentPin: EdGraphPin_Deprecated;
+	ReferencePassThroughConnection: EdGraphPin_Deprecated;
+	bHidden: boolean;
+	bNotConnectable: boolean;
+	bDefaultValueIsReadOnly: boolean;
+	bDefaultValueIsIgnored: boolean;
+	bIsDiffing: boolean;
+	bAdvancedView: boolean;
+	bDisplayAsMutableRef: boolean;
+	PersistentGuid: Guid;
+	static Load(ResourceName: string): EdGraphPin_Deprecated;
+	static Find(Outer: UObject, ResourceName: string): EdGraphPin_Deprecated;
+	static GetDefaultObject(): EdGraphPin_Deprecated;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdGraphPin_Deprecated;
+	static C(Other: UObject | any): EdGraphPin_Deprecated;
 }
 
-declare class MaterialParameterCollectionInfo { 
+declare type ENodeAdvancedPins = 'NoPins' | 'Shown' | 'Hidden' | 'ENodeAdvancedPins_MAX';
+declare var ENodeAdvancedPins : { NoPins:'NoPins',Shown:'Shown',Hidden:'Hidden',ENodeAdvancedPins_MAX:'ENodeAdvancedPins_MAX', };
+declare type ENodeEnabledState = 'Enabled' | 'Disabled' | 'DevelopmentOnly' | 'ENodeEnabledState_MAX';
+declare var ENodeEnabledState : { Enabled:'Enabled',Disabled:'Disabled',DevelopmentOnly:'DevelopmentOnly',ENodeEnabledState_MAX:'ENodeEnabledState_MAX', };
+declare type EJavascriptPinContainerType = 'None' | 'Array' | 'Set' | 'Map' | 'EJavascriptPinContainerType_MAX';
+declare var EJavascriptPinContainerType : { None:'None',Array:'Array',Set:'Set',Map:'Map',EJavascriptPinContainerType_MAX:'EJavascriptPinContainerType_MAX', };
+declare class JavascriptEdGraphPin { 
+	clone() : JavascriptEdGraphPin;
+	static C(Other: UObject | any): JavascriptEdGraphPin;
+	BreakAllPinLinks(): void;
+	BreakLinkTo(B: JavascriptEdGraphPin): void;
+	GetDirection(): EEdGraphPinDirection;
+	GetLinkedPinNum(): number;
+	GetLinkedTo(): JavascriptEdGraphPin[];
+	GetOwningNode(): EdGraphNode;
+	GetParentPin(): JavascriptEdGraphPin;
+	GetPinContainerType(): EJavascriptPinContainerType;
+	GetPinGUID(): Guid;
+	GetPinIndex(): number;
+	GetPinName(): string;
+	GetPinType(): EdGraphPinType;
+	GetSubPins(): JavascriptEdGraphPin[];
+	IsPinHidden(): boolean;
+	IsValid(): boolean;
+	MakeLinkTo(B: JavascriptEdGraphPin): void;
+	SetParentPin(Parent: JavascriptEdGraphPin): void;
+	SetPinHidden(bHidden: boolean): void;
+	SetPinInfo(InPinName: string,InPinToolTip: string): void;
+	SetPinType(PinType: EdGraphPinType): void;
+	static BreakAllPinLinks(A: JavascriptEdGraphPin): void;
+	static BreakLinkTo(A: JavascriptEdGraphPin,B: JavascriptEdGraphPin): void;
+	static GetDirection(A: JavascriptEdGraphPin): EEdGraphPinDirection;
+	static GetLinkedPinNum(A: JavascriptEdGraphPin): number;
+	static GetLinkedTo(A: JavascriptEdGraphPin): JavascriptEdGraphPin[];
+	static GetOwningNode(A: JavascriptEdGraphPin): EdGraphNode;
+	static GetParentPin(A: JavascriptEdGraphPin): JavascriptEdGraphPin;
+	static GetPinContainerType(A: JavascriptEdGraphPin): EJavascriptPinContainerType;
+	static GetPinGUID(A: JavascriptEdGraphPin): Guid;
+	static GetPinIndex(A: JavascriptEdGraphPin): number;
+	static GetPinName(A: JavascriptEdGraphPin): string;
+	static GetPinType(A: JavascriptEdGraphPin): EdGraphPinType;
+	static GetSubPins(A: JavascriptEdGraphPin): JavascriptEdGraphPin[];
+	static IsPinHidden(A: JavascriptEdGraphPin): boolean;
+	static IsValid(A: JavascriptEdGraphPin): boolean;
+	static MakeLinkTo(A: JavascriptEdGraphPin,B: JavascriptEdGraphPin): void;
+	static SetParentPin(A: JavascriptEdGraphPin,Parent: JavascriptEdGraphPin): void;
+	static SetPinHidden(A: JavascriptEdGraphPin,bHidden: boolean): void;
+	static SetPinInfo(A: JavascriptEdGraphPin,InPinName: string,InPinToolTip: string): void;
+	static SetPinType(Pin: JavascriptEdGraphPin,PinType: EdGraphPinType): void;
+	static GetDefaultObject(): JavascriptEdGraphPin;
+}
+
+declare class EdGraphNode extends UObject { 
+	DeprecatedPins: EdGraphPin_Deprecated[];
+	NodePosX: number;
+	NodePosY: number;
+	NodeWidth: number;
+	NodeHeight: number;
+	AdvancedPinDisplay: ENodeAdvancedPins;
+	EnabledState: ENodeEnabledState;
+	bDisplayAsDisabled: boolean;
+	bUserSetEnabledState: boolean;
+	bIsNodeEnabled: boolean;
+	bCanResizeNode: boolean;
+	bHasCompilerMessage: boolean;
+	bCommentBubblePinned: boolean;
+	bCommentBubbleVisible: boolean;
+	bCommentBubbleMakeVisible: boolean;
+	bCanRenameNode: boolean;
+	NodeUpgradeMessage: string;
+	NodeComment: string;
+	ErrorType: number;
+	ErrorMsg: string;
+	NodeGuid: Guid;
+	static Load(ResourceName: string): EdGraphNode;
+	static Find(Outer: UObject, ResourceName: string): EdGraphNode;
+	static GetDefaultObject(): EdGraphNode;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdGraphNode;
+	static C(Other: UObject | any): EdGraphNode;
+	AutowireNewNode(FromPin: JavascriptEdGraphPin): void;
+	CanDuplicateNode(): boolean;
+	CanUserDeleteNode(): boolean;
+	DestroyNode(): void;
+	FindPin(PinName: string,Direction: EEdGraphPinDirection): JavascriptEdGraphPin;
+	GetPins(): JavascriptEdGraphPin[];
+	ResizeNode(NewSize: Vector2D): void;
+	static AutowireNewNode(UNode: EdGraphNode,FromPin: JavascriptEdGraphPin): void;
+	static CanDuplicateNode(UNode: EdGraphNode): boolean;
+	static CanUserDeleteNode(UNode: EdGraphNode): boolean;
+	static DestroyNode(UNode: EdGraphNode): void;
+	static FindPin(UNode: EdGraphNode,PinName: string,Direction: EEdGraphPinDirection): JavascriptEdGraphPin;
+	static GetPins(UNode: EdGraphNode): JavascriptEdGraphPin[];
+	static ResizeNode(UNode: EdGraphNode,NewSize: Vector2D): void;
+}
+
+declare type EMaterialFunctionUsage = 'Default' | 'MaterialLayer' | 'MaterialLayerBlend' | 'EMaterialFunctionUsage_MAX';
+declare var EMaterialFunctionUsage : { Default:'Default',MaterialLayer:'MaterialLayer',MaterialLayerBlend:'MaterialLayerBlend',EMaterialFunctionUsage_MAX:'EMaterialFunctionUsage_MAX', };
+declare class MaterialFunctionInterface extends UObject { 
 	StateId: Guid;
-	ParameterCollection: MaterialParameterCollection;
-	clone() : MaterialParameterCollectionInfo;
-	static C(Other: UObject | any): MaterialParameterCollectionInfo;
+	MaterialFunctionUsage: EMaterialFunctionUsage;
+	CombinedInputTypes: any;
+	CombinedOutputTypes: any;
+	ThumbnailInfo: ThumbnailInfo;
+	static Load(ResourceName: string): MaterialFunctionInterface;
+	static Find(Outer: UObject, ResourceName: string): MaterialFunctionInterface;
+	static GetDefaultObject(): MaterialFunctionInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionInterface;
+	static C(Other: UObject | any): MaterialFunctionInterface;
+	UpdateMaterialFunction(PreviewMaterial: Material): void;
+	static UpdateMaterialFunction(MaterialFunction: MaterialFunctionInterface,PreviewMaterial: Material): void;
 }
 
-declare type EBlendableLocation = 'BL_AfterTonemapping' | 'BL_BeforeTonemapping' | 'BL_BeforeTranslucency' | 'BL_ReplacingTonemapper' | 'BL_SSRInput' | 'BL_MAX';
-declare var EBlendableLocation : { BL_AfterTonemapping:'BL_AfterTonemapping',BL_BeforeTonemapping:'BL_BeforeTonemapping',BL_BeforeTranslucency:'BL_BeforeTranslucency',BL_ReplacingTonemapper:'BL_ReplacingTonemapper',BL_SSRInput:'BL_SSRInput',BL_MAX:'BL_MAX', };
-declare type ERefractionMode = 'RM_IndexOfRefraction' | 'RM_PixelNormalOffset' | 'RM_MAX';
-declare var ERefractionMode : { RM_IndexOfRefraction:'RM_IndexOfRefraction',RM_PixelNormalOffset:'RM_PixelNormalOffset',RM_MAX:'RM_MAX', };
-declare type ETextureSourceFormat = 'TSF_Invalid' | 'TSF_G8' | 'TSF_BGRA8' | 'TSF_BGRE8' | 'TSF_RGBA16' | 'TSF_RGBA16F' | 'TSF_RGBA8' | 'TSF_RGBE8' | 'TSF_MAX';
-declare var ETextureSourceFormat : { TSF_Invalid:'TSF_Invalid',TSF_G8:'TSF_G8',TSF_BGRA8:'TSF_BGRA8',TSF_BGRE8:'TSF_BGRE8',TSF_RGBA16:'TSF_RGBA16',TSF_RGBA16F:'TSF_RGBA16F',TSF_RGBA8:'TSF_RGBA8',TSF_RGBE8:'TSF_RGBE8',TSF_MAX:'TSF_MAX', };
-declare class TextureSource { 
-	ID: Guid;
+declare class MaterialExpressionComment extends MaterialExpression { 
 	SizeX: number;
 	SizeY: number;
-	NumSlices: number;
-	NumMips: number;
-	bPNGCompressed: boolean;
-	bGuidIsHash: boolean;
-	Format: ETextureSourceFormat;
-	clone() : TextureSource;
-	static C(Other: UObject | any): TextureSource;
-}
-
-declare type ETextureCompressionQuality = 'TCQ_Default' | 'TCQ_Lowest' | 'TCQ_Low' | 'TCQ_Medium' | 'TCQ_High' | 'TCQ_Highest' | 'TCQ_MAX';
-declare var ETextureCompressionQuality : { TCQ_Default:'TCQ_Default',TCQ_Lowest:'TCQ_Lowest',TCQ_Low:'TCQ_Low',TCQ_Medium:'TCQ_Medium',TCQ_High:'TCQ_High',TCQ_Highest:'TCQ_Highest',TCQ_MAX:'TCQ_MAX', };
-declare class Vector4 { 
-	X: number;
-	Y: number;
-	Z: number;
-	W: number;
-	clone() : Vector4;
-	static C(Other: UObject | any): Vector4;
+	text: string;
+	CommentColor: LinearColor;
+	FontSize: number;
+	static Load(ResourceName: string): MaterialExpressionComment;
+	static Find(Outer: UObject, ResourceName: string): MaterialExpressionComment;
+	static GetDefaultObject(): MaterialExpressionComment;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionComment;
+	static C(Other: UObject | any): MaterialExpressionComment;
 }
 
-declare type ETexturePowerOfTwoSetting = 'None' | 'PadToPowerOfTwo' | 'PadToSquarePowerOfTwo' | 'ETexturePowerOfTwoSetting_MAX';
-declare var ETexturePowerOfTwoSetting : { None:'None',PadToPowerOfTwo:'PadToPowerOfTwo',PadToSquarePowerOfTwo:'PadToSquarePowerOfTwo',ETexturePowerOfTwoSetting_MAX:'ETexturePowerOfTwoSetting_MAX', };
-declare type TextureMipGenSettings = 'TMGS_FromTextureGroup' | 'TMGS_SimpleAverage' | 'TMGS_Sharpen0' | 'TMGS_Sharpen1' | 'TMGS_Sharpen2' | 'TMGS_Sharpen3' | 'TMGS_Sharpen4' | 'TMGS_Sharpen5' | 'TMGS_Sharpen6' | 'TMGS_Sharpen7' | 'TMGS_Sharpen8' | 'TMGS_Sharpen9' | 'TMGS_Sharpen10' | 'TMGS_NoMipmaps' | 'TMGS_LeaveExistingMips' | 'TMGS_Blur1' | 'TMGS_Blur2' | 'TMGS_Blur3' | 'TMGS_Blur4' | 'TMGS_Blur5' | 'TMGS_MAX';
-declare var TextureMipGenSettings : { TMGS_FromTextureGroup:'TMGS_FromTextureGroup',TMGS_SimpleAverage:'TMGS_SimpleAverage',TMGS_Sharpen0:'TMGS_Sharpen0',TMGS_Sharpen1:'TMGS_Sharpen1',TMGS_Sharpen2:'TMGS_Sharpen2',TMGS_Sharpen3:'TMGS_Sharpen3',TMGS_Sharpen4:'TMGS_Sharpen4',TMGS_Sharpen5:'TMGS_Sharpen5',TMGS_Sharpen6:'TMGS_Sharpen6',TMGS_Sharpen7:'TMGS_Sharpen7',TMGS_Sharpen8:'TMGS_Sharpen8',TMGS_Sharpen9:'TMGS_Sharpen9',TMGS_Sharpen10:'TMGS_Sharpen10',TMGS_NoMipmaps:'TMGS_NoMipmaps',TMGS_LeaveExistingMips:'TMGS_LeaveExistingMips',TMGS_Blur1:'TMGS_Blur1',TMGS_Blur2:'TMGS_Blur2',TMGS_Blur3:'TMGS_Blur3',TMGS_Blur4:'TMGS_Blur4',TMGS_Blur5:'TMGS_Blur5',TMGS_MAX:'TMGS_MAX', };
-declare type ECompositeTextureMode = 'CTM_Disabled' | 'CTM_NormalRoughnessToRed' | 'CTM_NormalRoughnessToGreen' | 'CTM_NormalRoughnessToBlue' | 'CTM_NormalRoughnessToAlpha' | 'CTM_MAX';
-declare var ECompositeTextureMode : { CTM_Disabled:'CTM_Disabled',CTM_NormalRoughnessToRed:'CTM_NormalRoughnessToRed',CTM_NormalRoughnessToGreen:'CTM_NormalRoughnessToGreen',CTM_NormalRoughnessToBlue:'CTM_NormalRoughnessToBlue',CTM_NormalRoughnessToAlpha:'CTM_NormalRoughnessToAlpha',CTM_MAX:'CTM_MAX', };
-declare type TextureCompressionSettings = 'TC_Default' | 'TC_Normalmap' | 'TC_Masks' | 'TC_Grayscale' | 'TC_Displacementmap' | 'TC_VectorDisplacementmap' | 'TC_HDR' | 'TC_EditorIcon' | 'TC_Alpha' | 'TC_DistanceFieldFont' | 'TC_HDR_Compressed' | 'TC_BC7' | 'TC_MAX';
-declare var TextureCompressionSettings : { TC_Default:'TC_Default',TC_Normalmap:'TC_Normalmap',TC_Masks:'TC_Masks',TC_Grayscale:'TC_Grayscale',TC_Displacementmap:'TC_Displacementmap',TC_VectorDisplacementmap:'TC_VectorDisplacementmap',TC_HDR:'TC_HDR',TC_EditorIcon:'TC_EditorIcon',TC_Alpha:'TC_Alpha',TC_DistanceFieldFont:'TC_DistanceFieldFont',TC_HDR_Compressed:'TC_HDR_Compressed',TC_BC7:'TC_BC7',TC_MAX:'TC_MAX', };
-declare type TextureFilter = 'TF_Nearest' | 'TF_Bilinear' | 'TF_Trilinear' | 'TF_Default' | 'TF_MAX';
-declare var TextureFilter : { TF_Nearest:'TF_Nearest',TF_Bilinear:'TF_Bilinear',TF_Trilinear:'TF_Trilinear',TF_Default:'TF_Default',TF_MAX:'TF_MAX', };
-declare type TextureGroup = 'TEXTUREGROUP_World' | 'TEXTUREGROUP_WorldNormalMap' | 'TEXTUREGROUP_WorldSpecular' | 'TEXTUREGROUP_Character' | 'TEXTUREGROUP_CharacterNormalMap' | 'TEXTUREGROUP_CharacterSpecular' | 'TEXTUREGROUP_Weapon' | 'TEXTUREGROUP_WeaponNormalMap' | 'TEXTUREGROUP_WeaponSpecular' | 'TEXTUREGROUP_Vehicle' | 'TEXTUREGROUP_VehicleNormalMap' | 'TEXTUREGROUP_VehicleSpecular' | 'TEXTUREGROUP_Cinematic' | 'TEXTUREGROUP_Effects' | 'TEXTUREGROUP_EffectsNotFiltered' | 'TEXTUREGROUP_Skybox' | 'TEXTUREGROUP_UI' | 'TEXTUREGROUP_Lightmap' | 'TEXTUREGROUP_RenderTarget' | 'TEXTUREGROUP_MobileFlattened' | 'TEXTUREGROUP_ProcBuilding_Face' | 'TEXTUREGROUP_ProcBuilding_LightMap' | 'TEXTUREGROUP_Shadowmap' | 'TEXTUREGROUP_ColorLookupTable' | 'TEXTUREGROUP_Terrain_Heightmap' | 'TEXTUREGROUP_Terrain_Weightmap' | 'TEXTUREGROUP_Bokeh' | 'TEXTUREGROUP_IESLightProfile' | 'TEXTUREGROUP_Pixels2D' | 'TEXTUREGROUP_HierarchicalLOD' | 'TEXTUREGROUP_Impostor' | 'TEXTUREGROUP_ImpostorNormalDepth' | 'TEXTUREGROUP_Project01' | 'TEXTUREGROUP_Project02' | 'TEXTUREGROUP_Project03' | 'TEXTUREGROUP_Project04' | 'TEXTUREGROUP_Project05' | 'TEXTUREGROUP_Project06' | 'TEXTUREGROUP_Project07' | 'TEXTUREGROUP_Project08' | 'TEXTUREGROUP_Project09' | 'TEXTUREGROUP_Project10' | 'TEXTUREGROUP_MAX';
-declare var TextureGroup : { TEXTUREGROUP_World:'TEXTUREGROUP_World',TEXTUREGROUP_WorldNormalMap:'TEXTUREGROUP_WorldNormalMap',TEXTUREGROUP_WorldSpecular:'TEXTUREGROUP_WorldSpecular',TEXTUREGROUP_Character:'TEXTUREGROUP_Character',TEXTUREGROUP_CharacterNormalMap:'TEXTUREGROUP_CharacterNormalMap',TEXTUREGROUP_CharacterSpecular:'TEXTUREGROUP_CharacterSpecular',TEXTUREGROUP_Weapon:'TEXTUREGROUP_Weapon',TEXTUREGROUP_WeaponNormalMap:'TEXTUREGROUP_WeaponNormalMap',TEXTUREGROUP_WeaponSpecular:'TEXTUREGROUP_WeaponSpecular',TEXTUREGROUP_Vehicle:'TEXTUREGROUP_Vehicle',TEXTUREGROUP_VehicleNormalMap:'TEXTUREGROUP_VehicleNormalMap',TEXTUREGROUP_VehicleSpecular:'TEXTUREGROUP_VehicleSpecular',TEXTUREGROUP_Cinematic:'TEXTUREGROUP_Cinematic',TEXTUREGROUP_Effects:'TEXTUREGROUP_Effects',TEXTUREGROUP_EffectsNotFiltered:'TEXTUREGROUP_EffectsNotFiltered',TEXTUREGROUP_Skybox:'TEXTUREGROUP_Skybox',TEXTUREGROUP_UI:'TEXTUREGROUP_UI',TEXTUREGROUP_Lightmap:'TEXTUREGROUP_Lightmap',TEXTUREGROUP_RenderTarget:'TEXTUREGROUP_RenderTarget',TEXTUREGROUP_MobileFlattened:'TEXTUREGROUP_MobileFlattened',TEXTUREGROUP_ProcBuilding_Face:'TEXTUREGROUP_ProcBuilding_Face',TEXTUREGROUP_ProcBuilding_LightMap:'TEXTUREGROUP_ProcBuilding_LightMap',TEXTUREGROUP_Shadowmap:'TEXTUREGROUP_Shadowmap',TEXTUREGROUP_ColorLookupTable:'TEXTUREGROUP_ColorLookupTable',TEXTUREGROUP_Terrain_Heightmap:'TEXTUREGROUP_Terrain_Heightmap',TEXTUREGROUP_Terrain_Weightmap:'TEXTUREGROUP_Terrain_Weightmap',TEXTUREGROUP_Bokeh:'TEXTUREGROUP_Bokeh',TEXTUREGROUP_IESLightProfile:'TEXTUREGROUP_IESLightProfile',TEXTUREGROUP_Pixels2D:'TEXTUREGROUP_Pixels2D',TEXTUREGROUP_HierarchicalLOD:'TEXTUREGROUP_HierarchicalLOD',TEXTUREGROUP_Impostor:'TEXTUREGROUP_Impostor',TEXTUREGROUP_ImpostorNormalDepth:'TEXTUREGROUP_ImpostorNormalDepth',TEXTUREGROUP_Project01:'TEXTUREGROUP_Project01',TEXTUREGROUP_Project02:'TEXTUREGROUP_Project02',TEXTUREGROUP_Project03:'TEXTUREGROUP_Project03',TEXTUREGROUP_Project04:'TEXTUREGROUP_Project04',TEXTUREGROUP_Project05:'TEXTUREGROUP_Project05',TEXTUREGROUP_Project06:'TEXTUREGROUP_Project06',TEXTUREGROUP_Project07:'TEXTUREGROUP_Project07',TEXTUREGROUP_Project08:'TEXTUREGROUP_Project08',TEXTUREGROUP_Project09:'TEXTUREGROUP_Project09',TEXTUREGROUP_Project10:'TEXTUREGROUP_Project10',TEXTUREGROUP_MAX:'TEXTUREGROUP_MAX', };
-declare type EDesiredImageFormat = 'PNG' | 'JPG' | 'BMP' | 'EXR' | 'EDesiredImageFormat_MAX';
-declare var EDesiredImageFormat : { PNG:'PNG',JPG:'JPG',BMP:'BMP',EXR:'EXR',EDesiredImageFormat_MAX:'EDesiredImageFormat_MAX', };
-declare class ImageWriteOptions { 
-	Format: EDesiredImageFormat;
-	OnComplete: UnrealEngineDelegate<(bSuccess: boolean) => void>;
-	CompressionQuality: number;
-	bOverwriteFile: boolean;
-	bAsync: boolean;
-	clone() : ImageWriteOptions;
-	static C(Other: UObject | any): ImageWriteOptions;
+declare class MaterialFunction extends MaterialFunctionInterface { 
+	ParentFunction: MaterialFunction;
+	Description: string;
+	bExposeToLibrary: boolean;
+	bPrefixParameterNames: boolean;
+	LibraryCategories: string[];
+	LibraryCategoriesText: string[];
+	FunctionExpressions: MaterialExpression[];
+	FunctionEditorComments: MaterialExpressionComment[];
+	PreviewMaterial: Material;
+	bReentrantFlag: boolean;
+	static Load(ResourceName: string): MaterialFunction;
+	static Find(Outer: UObject, ResourceName: string): MaterialFunction;
+	static GetDefaultObject(): MaterialFunction;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunction;
+	static C(Other: UObject | any): MaterialFunction;
+	CreateMaterialExpressionInFunction(ExpressionClass: UnrealEngineClass,NodePosX: number,NodePosY: number): MaterialExpression;
+	DeleteAllMaterialExpressionsInFunction(): void;
+	DeleteMaterialExpressionInFunction(Expression: MaterialExpression): void;
+	GetNumMaterialExpressionsInFunction(): number;
+	LayoutMaterialFunctionExpressions(): void;
+	static CreateMaterialExpressionInFunction(MaterialFunction: MaterialFunction,ExpressionClass: UnrealEngineClass,NodePosX: number,NodePosY: number): MaterialExpression;
+	static DeleteAllMaterialExpressionsInFunction(MaterialFunction: MaterialFunction): void;
+	static DeleteMaterialExpressionInFunction(MaterialFunction: MaterialFunction,Expression: MaterialExpression): void;
+	static GetNumMaterialExpressionsInFunction(MaterialFunction: MaterialFunction): number;
+	static LayoutMaterialFunctionExpressions(MaterialFunction: MaterialFunction): void;
 }
 
-declare class Texture extends UObject { 
-	Source: TextureSource;
-	LightingGuid: Guid;
-	SourceFilePath: string;
-	AssetImportData: AssetImportData;
-	AdjustBrightness: number;
-	AdjustBrightnessCurve: number;
-	AdjustVibrance: number;
-	AdjustSaturation: number;
-	AdjustRGBCurve: number;
-	AdjustHue: number;
-	AdjustMinAlpha: number;
-	AdjustMaxAlpha: number;
-	CompressionNoAlpha: boolean;
-	CompressionNone: boolean;
-	DeferCompression: boolean;
-	MaxTextureSize: number;
-	CompressionQuality: ETextureCompressionQuality;
-	bDitherMipMapAlpha: boolean;
-	AlphaCoverageThresholds: Vector4;
-	bPreserveBorder: boolean;
-	bFlipGreenChannel: boolean;
-	bForcePVRTC4: boolean;
-	PowerOfTwoMode: ETexturePowerOfTwoSetting;
-	PaddingColor: Color;
-	bChromaKeyTexture: boolean;
-	ChromaKeyThreshold: number;
-	ChromaKeyColor: Color;
-	MipGenSettings: TextureMipGenSettings;
-	CompositeTexture: Texture;
-	CompositeTextureMode: ECompositeTextureMode;
-	CompositePower: number;
-	LODBias: number;
-	NumCinematicMipLevels: number;
-	CompressionSettings: TextureCompressionSettings;
-	Filter: TextureFilter;
-	LODGroup: TextureGroup;
-	SRGB: boolean;
-	bUseLegacyGamma: boolean;
-	NeverStream: boolean;
-	bNoTiling: boolean;
-	bUseCinematicMipLevels: boolean;
-	bAsyncResourceReleaseHasBeenStarted: boolean;
-	CachedCombinedLODBias: number;
-	AssetUserData: AssetUserData[];
-	static Load(ResourceName: string): Texture;
-	static Find(Outer: UObject, ResourceName: string): Texture;
-	static GetDefaultObject(): Texture;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Texture;
-	static C(Other: UObject | any): Texture;
-	SetSplashScreen(Scale: Vector2D,Offset: Vector2D,bShowLoadingMovie: boolean,bShowOnSet: boolean): void;
-	ExportToDisk(Filename: string,Options: ImageWriteOptions): void;
-	SetSpectatorScreenTexture(): void;
-	static SetSplashScreen(Texture: Texture,Scale: Vector2D,Offset: Vector2D,bShowLoadingMovie: boolean,bShowOnSet: boolean): void;
-	static ExportToDisk(Texture: Texture,Filename: string,Options: ImageWriteOptions): void;
-	static SetSpectatorScreenTexture(InTexture: Texture): void;
+declare class ExpressionOutput { 
+	OutputName: string;
+	mask: number;
+	MaskR: number;
+	MaskG: number;
+	MaskB: number;
+	MaskA: number;
+	clone() : ExpressionOutput;
+	static C(Other: UObject | any): ExpressionOutput;
 }
 
-declare type EMaterialUsage = 'MATUSAGE_SkeletalMesh' | 'MATUSAGE_ParticleSprites' | 'MATUSAGE_BeamTrails' | 'MATUSAGE_MeshParticles' | 'MATUSAGE_StaticLighting' | 'MATUSAGE_MorphTargets' | 'MATUSAGE_SplineMesh' | 'MATUSAGE_InstancedStaticMeshes' | 'MATUSAGE_Clothing' | 'MATUSAGE_NiagaraSprites' | 'MATUSAGE_NiagaraRibbons' | 'MATUSAGE_NiagaraMeshParticles' | 'MATUSAGE_GeometryCache' | 'MATUSAGE_MAX';
-declare var EMaterialUsage : { MATUSAGE_SkeletalMesh:'MATUSAGE_SkeletalMesh',MATUSAGE_ParticleSprites:'MATUSAGE_ParticleSprites',MATUSAGE_BeamTrails:'MATUSAGE_BeamTrails',MATUSAGE_MeshParticles:'MATUSAGE_MeshParticles',MATUSAGE_StaticLighting:'MATUSAGE_StaticLighting',MATUSAGE_MorphTargets:'MATUSAGE_MorphTargets',MATUSAGE_SplineMesh:'MATUSAGE_SplineMesh',MATUSAGE_InstancedStaticMeshes:'MATUSAGE_InstancedStaticMeshes',MATUSAGE_Clothing:'MATUSAGE_Clothing',MATUSAGE_NiagaraSprites:'MATUSAGE_NiagaraSprites',MATUSAGE_NiagaraRibbons:'MATUSAGE_NiagaraRibbons',MATUSAGE_NiagaraMeshParticles:'MATUSAGE_NiagaraMeshParticles',MATUSAGE_GeometryCache:'MATUSAGE_GeometryCache',MATUSAGE_MAX:'MATUSAGE_MAX', };
-declare class Material extends MaterialInterface { 
-	PhysMaterial: PhysicalMaterial;
-	DiffuseColor: ColorMaterialInput;
-	SpecularColor: ColorMaterialInput;
-	BaseColor: ColorMaterialInput;
-	Metallic: ScalarMaterialInput;
-	Specular: ScalarMaterialInput;
-	Roughness: ScalarMaterialInput;
-	Normal: VectorMaterialInput;
-	EmissiveColor: ColorMaterialInput;
-	Opacity: ScalarMaterialInput;
-	OpacityMask: ScalarMaterialInput;
-	MaterialDomain: EMaterialDomain;
-	BlendMode: EBlendMode;
-	DecalBlendMode: EDecalBlendMode;
-	MaterialDecalResponse: EMaterialDecalResponse;
-	ShadingModel: EMaterialShadingModel;
-	OpacityMaskClipValue: number;
-	bCastDynamicShadowAsMasked: boolean;
-	WorldPositionOffset: VectorMaterialInput;
-	WorldDisplacement: VectorMaterialInput;
-	TessellationMultiplier: ScalarMaterialInput;
-	SubsurfaceColor: ColorMaterialInput;
-	Clearcoat: ScalarMaterialInput;
-	ClearCoatRoughness: ScalarMaterialInput;
-	AmbientOcclusion: ScalarMaterialInput;
-	Refraction: ScalarMaterialInput;
-	CustomizedUVs: Vector2MaterialInput;
-	MaterialAttributes: MaterialAttributesInput;
-	PixelDepthOffset: ScalarMaterialInput;
-	bEnableSeparateTranslucency: boolean;
-	bEnableMobileSeparateTranslucency: boolean;
-	bEnableResponsiveAA: boolean;
-	bScreenSpaceReflections: boolean;
-	bContactShadows: boolean;
-	TwoSided: boolean;
-	DitheredLODTransition: boolean;
-	DitherOpacityMask: boolean;
-	bAllowNegativeEmissiveColor: boolean;
-	NumCustomizedUVs: number;
-	TranslucencyLightingMode: ETranslucencyLightingMode;
-	TranslucencyDirectionalLightingIntensity: number;
-	AllowTranslucentCustomDepthWrites: boolean;
-	TranslucentShadowDensityScale: number;
-	TranslucentSelfShadowDensityScale: number;
-	TranslucentSelfShadowSecondDensityScale: number;
-	TranslucentSelfShadowSecondOpacity: number;
-	TranslucentBackscatteringExponent: number;
-	TranslucentMultipleScatteringExtinction: LinearColor;
-	TranslucentShadowStartOffset: number;
-	bDisableDepthTest: boolean;
-	bWriteOnlyAlpha: boolean;
-	bGenerateSphericalParticleNormals: boolean;
-	bTangentSpaceNormal: boolean;
-	bUseEmissiveForDynamicAreaLighting: boolean;
-	bBlockGI: boolean;
-	bUsedAsSpecialEngineMaterial: boolean;
-	bUsedWithSkeletalMesh: boolean;
-	bUsedWithEditorCompositing: boolean;
-	bUsedWithParticleSprites: boolean;
-	bUsedWithBeamTrails: boolean;
-	bUsedWithMeshParticles: boolean;
-	bUsedWithNiagaraSprites: boolean;
-	bUsedWithNiagaraRibbons: boolean;
-	bUsedWithNiagaraMeshParticles: boolean;
-	bUsedWithGeometryCache: boolean;
-	bUsedWithStaticLighting: boolean;
-	bUsedWithMorphTargets: boolean;
-	bUsedWithSplineMeshes: boolean;
-	bUsedWithInstancedStaticMeshes: boolean;
-	bUsesDistortion: boolean;
-	bUsedWithClothing: boolean;
-	bUsedWithUI: boolean;
-	bAutomaticallySetUsageInEditor: boolean;
-	bFullyRough: boolean;
-	bUseFullPrecision: boolean;
-	bUseLightmapDirectionality: boolean;
-	bUseHQForwardReflections: boolean;
-	bUsePlanarForwardReflections: boolean;
-	bNormalCurvatureToRoughness: boolean;
-	D3D11TessellationMode: EMaterialTessellationMode;
-	bEnableCrackFreeDisplacement: boolean;
-	bEnableAdaptiveTessellation: boolean;
-	MaxDisplacement: number;
-	Wireframe: boolean;
-	bOutputVelocityOnBasePass: boolean;
-	EditorX: number;
-	EditorY: number;
-	EditorPitch: number;
-	EditorYaw: number;
-	Expressions: MaterialExpression[];
-	EditorComments: MaterialExpressionComment[];
-	ParameterGroupData: ParameterGroupData[];
-	MaterialFunctionInfos: MaterialFunctionInfo[];
-	MaterialParameterCollectionInfos: MaterialParameterCollectionInfo[];
-	bCanMaskedBeAssumedOpaque: boolean;
-	bIsMasked: boolean;
-	bIsPreviewMaterial: boolean;
-	bIsFunctionPreviewMaterial: boolean;
-	bUseMaterialAttributes: boolean;
-	bUseTranslucencyVertexFog: boolean;
-	bComputeFogPerPixel: boolean;
-	bAllowDevelopmentShaderCompile: boolean;
-	bIsMaterialEditorStatsMaterial: boolean;
-	UsageFlagWarnings: any;
-	BlendableLocation: EBlendableLocation;
-	BlendablePriority: number;
-	BlendableOutputAlpha: boolean;
-	RefractionMode: ERefractionMode;
-	RefractionDepthBias: number;
-	StateId: Guid;
-	CachedQualityLevelsUsed: boolean[];
-	ExpressionTextureReferences: Texture[];
-	ReferencedTextureGuids: Guid[];
-	static Load(ResourceName: string): Material;
-	static Find(Outer: UObject, ResourceName: string): Material;
-	static GetDefaultObject(): Material;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Material;
-	static C(Other: UObject | any): Material;
-	CreateMaterialExpression(ExpressionClass: UnrealEngineClass,NodePosX: number,NodePosY: number): MaterialExpression;
-	DeleteAllMaterialExpressions(): void;
-	DeleteMaterialExpression(Expression: MaterialExpression): void;
-	GetNumMaterialExpressions(): number;
-	RecompileMaterial(): void;
-	SetMaterialUsage(Usage: EMaterialUsage,bNeedsRecompile?: boolean): {bNeedsRecompile: boolean, $: boolean};
-	static CreateMaterialExpression(Material: Material,ExpressionClass: UnrealEngineClass,NodePosX: number,NodePosY: number): MaterialExpression;
-	static DeleteAllMaterialExpressions(Material: Material): void;
-	static DeleteMaterialExpression(Material: Material,Expression: MaterialExpression): void;
-	static GetNumMaterialExpressions(Material: Material): number;
-	static RecompileMaterial(Material: Material): void;
-	static SetMaterialUsage(Material: Material,Usage: EMaterialUsage,bNeedsRecompile?: boolean): {bNeedsRecompile: boolean, $: boolean};
+declare type EMaterialProperty = 'MP_EmissiveColor' | 'MP_Opacity' | 'MP_OpacityMask' | 'MP_DiffuseColor' | 'MP_SpecularColor' | 'MP_BaseColor' | 'MP_Metallic' | 'MP_Specular' | 'MP_Roughness' | 'MP_Normal' | 'MP_WorldPositionOffset' | 'MP_WorldDisplacement' | 'MP_TessellationMultiplier' | 'MP_SubsurfaceColor' | 'MP_CustomData0' | 'MP_CustomData1' | 'MP_AmbientOcclusion' | 'MP_Refraction' | 'MP_CustomizedUVs0' | 'MP_CustomizedUVs1' | 'MP_CustomizedUVs2' | 'MP_CustomizedUVs3' | 'MP_CustomizedUVs4' | 'MP_CustomizedUVs5' | 'MP_CustomizedUVs6' | 'MP_CustomizedUVs7' | 'MP_PixelDepthOffset' | 'MP_ShadingModel' | 'MP_MaterialAttributes' | 'MP_CustomOutput' | 'MP_MAX';
+declare var EMaterialProperty : { MP_EmissiveColor:'MP_EmissiveColor',MP_Opacity:'MP_Opacity',MP_OpacityMask:'MP_OpacityMask',MP_DiffuseColor:'MP_DiffuseColor',MP_SpecularColor:'MP_SpecularColor',MP_BaseColor:'MP_BaseColor',MP_Metallic:'MP_Metallic',MP_Specular:'MP_Specular',MP_Roughness:'MP_Roughness',MP_Normal:'MP_Normal',MP_WorldPositionOffset:'MP_WorldPositionOffset',MP_WorldDisplacement:'MP_WorldDisplacement',MP_TessellationMultiplier:'MP_TessellationMultiplier',MP_SubsurfaceColor:'MP_SubsurfaceColor',MP_CustomData0:'MP_CustomData0',MP_CustomData1:'MP_CustomData1',MP_AmbientOcclusion:'MP_AmbientOcclusion',MP_Refraction:'MP_Refraction',MP_CustomizedUVs0:'MP_CustomizedUVs0',MP_CustomizedUVs1:'MP_CustomizedUVs1',MP_CustomizedUVs2:'MP_CustomizedUVs2',MP_CustomizedUVs3:'MP_CustomizedUVs3',MP_CustomizedUVs4:'MP_CustomizedUVs4',MP_CustomizedUVs5:'MP_CustomizedUVs5',MP_CustomizedUVs6:'MP_CustomizedUVs6',MP_CustomizedUVs7:'MP_CustomizedUVs7',MP_PixelDepthOffset:'MP_PixelDepthOffset',MP_ShadingModel:'MP_ShadingModel',MP_MaterialAttributes:'MP_MaterialAttributes',MP_CustomOutput:'MP_CustomOutput',MP_MAX:'MP_MAX', };
+declare class MaterialExpression extends UObject { 
+	MaterialExpressionEditorX: number;
+	MaterialExpressionEditorY: number;
+	GraphNode: EdGraphNode;
+	MaterialExpressionGuid: Guid;
+	Material: Material;
+	UFunction: MaterialFunction;
+	Desc: string;
+	bRealtimePreview: boolean;
+	bNeedToUpdatePreview: boolean;
+	bIsParameterExpression: boolean;
+	bCommentBubbleVisible: boolean;
+	bShowOutputNameOnPin: boolean;
+	bShowMaskColorsOnPin: boolean;
+	bHidePreviewWindow: boolean;
+	bCollapsed: boolean;
+	bShaderInputData: boolean;
+	bShowInputs: boolean;
+	bShowOutputs: boolean;
+	MenuCategories: string[];
+	Outputs: ExpressionOutput[];
+	static Load(ResourceName: string): MaterialExpression;
+	static Find(Outer: UObject, ResourceName: string): MaterialExpression;
+	static GetDefaultObject(): MaterialExpression;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpression;
+	static C(Other: UObject | any): MaterialExpression;
+	ConnectMaterialExpressions(FromOutputName: string,ToExpression: MaterialExpression,ToInputName: string): boolean;
+	ConnectMaterialProperty(FromOutputName: string,Property: EMaterialProperty): boolean;
+	static ConnectMaterialExpressions(FromExpression: MaterialExpression,FromOutputName: string,ToExpression: MaterialExpression,ToInputName: string): boolean;
+	static ConnectMaterialProperty(FromExpression: MaterialExpression,FromOutputName: string,Property: EMaterialProperty): boolean;
 }
 
-declare type EAttachLocation = 'KeepRelativeOffset' | 'KeepWorldPosition' | 'SnapToTarget' | 'SnapToTargetIncludingScale' | 'EAttachLocation_MAX';
-declare var EAttachLocation : { KeepRelativeOffset:'KeepRelativeOffset',KeepWorldPosition:'KeepWorldPosition',SnapToTarget:'SnapToTarget',SnapToTargetIncludingScale:'SnapToTargetIncludingScale',EAttachLocation_MAX:'EAttachLocation_MAX', };
-declare class CurveBase extends UObject { 
-	AssetImportData: AssetImportData;
-	ImportPath: string;
-	static Load(ResourceName: string): CurveBase;
-	static Find(Outer: UObject, ResourceName: string): CurveBase;
-	static GetDefaultObject(): CurveBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveBase;
-	GetValueRange(MinValue?: number,MaxValue?: number): {MinValue: number, MaxValue: number};
-	GetTimeRange(MinTime?: number,MaxTime?: number): {MinTime: number, MaxTime: number};
-	static C(Other: UObject | any): CurveBase;
+declare class MaterialInput { 
+	Expression: MaterialExpression;
+	OutputIndex: number;
+	InputName: string;
+	mask: number;
+	MaskR: number;
+	MaskG: number;
+	MaskB: number;
+	MaskA: number;
+	ExpressionName: string;
+	clone() : MaterialInput;
+	static C(Other: UObject | any): MaterialInput;
 }
 
-declare class KeyHandleMap { 
-	clone() : KeyHandleMap;
-	static C(Other: UObject | any): KeyHandleMap;
+declare class ColorMaterialInput extends MaterialInput { 
+	UseConstant: boolean;
+	Constant: Color;
+	clone() : ColorMaterialInput;
+	static C(Other: UObject | any): ColorMaterialInput;
 }
 
-declare class IndexedCurve { 
-	KeyHandlesToIndices: KeyHandleMap;
-	clone() : IndexedCurve;
-	static C(Other: UObject | any): IndexedCurve;
+declare class ScalarMaterialInput extends MaterialInput { 
+	UseConstant: boolean;
+	Constant: number;
+	clone() : ScalarMaterialInput;
+	static C(Other: UObject | any): ScalarMaterialInput;
 }
 
-declare type ERichCurveExtrapolation = 'RCCE_Cycle' | 'RCCE_CycleWithOffset' | 'RCCE_Oscillate' | 'RCCE_Linear' | 'RCCE_Constant' | 'RCCE_None' | 'RCCE_MAX';
-declare var ERichCurveExtrapolation : { RCCE_Cycle:'RCCE_Cycle',RCCE_CycleWithOffset:'RCCE_CycleWithOffset',RCCE_Oscillate:'RCCE_Oscillate',RCCE_Linear:'RCCE_Linear',RCCE_Constant:'RCCE_Constant',RCCE_None:'RCCE_None',RCCE_MAX:'RCCE_MAX', };
-declare type ERichCurveInterpMode = 'RCIM_Linear' | 'RCIM_Constant' | 'RCIM_Cubic' | 'RCIM_None' | 'RCIM_MAX';
-declare var ERichCurveInterpMode : { RCIM_Linear:'RCIM_Linear',RCIM_Constant:'RCIM_Constant',RCIM_Cubic:'RCIM_Cubic',RCIM_None:'RCIM_None',RCIM_MAX:'RCIM_MAX', };
-declare type ERichCurveTangentMode = 'RCTM_Auto' | 'RCTM_User' | 'RCTM_Break' | 'RCTM_None' | 'RCTM_MAX';
-declare var ERichCurveTangentMode : { RCTM_Auto:'RCTM_Auto',RCTM_User:'RCTM_User',RCTM_Break:'RCTM_Break',RCTM_None:'RCTM_None',RCTM_MAX:'RCTM_MAX', };
-declare type ERichCurveTangentWeightMode = 'RCTWM_WeightedNone' | 'RCTWM_WeightedArrive' | 'RCTWM_WeightedLeave' | 'RCTWM_WeightedBoth' | 'RCTWM_MAX';
-declare var ERichCurveTangentWeightMode : { RCTWM_WeightedNone:'RCTWM_WeightedNone',RCTWM_WeightedArrive:'RCTWM_WeightedArrive',RCTWM_WeightedLeave:'RCTWM_WeightedLeave',RCTWM_WeightedBoth:'RCTWM_WeightedBoth',RCTWM_MAX:'RCTWM_MAX', };
-declare class RichCurveKey { 
-	InterpMode: ERichCurveInterpMode;
-	TangentMode: ERichCurveTangentMode;
-	TangentWeightMode: ERichCurveTangentWeightMode;
-	Time: number;
-	Value: number;
-	ArriveTangent: number;
-	ArriveTangentWeight: number;
-	LeaveTangent: number;
-	LeaveTangentWeight: number;
-	clone() : RichCurveKey;
-	static C(Other: UObject | any): RichCurveKey;
+declare class VectorMaterialInput extends MaterialInput { 
+	UseConstant: boolean;
+	Constant: Vector;
+	clone() : VectorMaterialInput;
+	static C(Other: UObject | any): VectorMaterialInput;
 }
 
-declare class RichCurve extends IndexedCurve { 
-	PreInfinityExtrap: ERichCurveExtrapolation;
-	PostInfinityExtrap: ERichCurveExtrapolation;
-	DefaultValue: number;
-	Keys: RichCurveKey[];
-	clone() : RichCurve;
-	static C(Other: UObject | any): RichCurve;
+declare type EMaterialDomain = 'MD_Surface' | 'MD_DeferredDecal' | 'MD_LightFunction' | 'MD_Volume' | 'MD_PostProcess' | 'MD_UI' | 'MD_RuntimeVirtualTexture' | 'MD_MAX';
+declare var EMaterialDomain : { MD_Surface:'MD_Surface',MD_DeferredDecal:'MD_DeferredDecal',MD_LightFunction:'MD_LightFunction',MD_Volume:'MD_Volume',MD_PostProcess:'MD_PostProcess',MD_UI:'MD_UI',MD_RuntimeVirtualTexture:'MD_RuntimeVirtualTexture',MD_MAX:'MD_MAX', };
+declare type EBlendMode = 'BLEND_Opaque' | 'BLEND_Masked' | 'BLEND_Translucent' | 'BLEND_Additive' | 'BLEND_Modulate' | 'BLEND_AlphaComposite' | 'BLEND_AlphaHoldout' | 'BLEND_MAX';
+declare var EBlendMode : { BLEND_Opaque:'BLEND_Opaque',BLEND_Masked:'BLEND_Masked',BLEND_Translucent:'BLEND_Translucent',BLEND_Additive:'BLEND_Additive',BLEND_Modulate:'BLEND_Modulate',BLEND_AlphaComposite:'BLEND_AlphaComposite',BLEND_AlphaHoldout:'BLEND_AlphaHoldout',BLEND_MAX:'BLEND_MAX', };
+declare type EDecalBlendMode = 'DBM_Translucent' | 'DBM_Stain' | 'DBM_Normal' | 'DBM_Emissive' | 'DBM_DBuffer_ColorNormalRoughness' | 'DBM_DBuffer_Color' | 'DBM_DBuffer_ColorNormal' | 'DBM_DBuffer_ColorRoughness' | 'DBM_DBuffer_Normal' | 'DBM_DBuffer_NormalRoughness' | 'DBM_DBuffer_Roughness' | 'DBM_DBuffer_Emissive' | 'DBM_DBuffer_AlphaComposite' | 'DBM_DBuffer_EmissiveAlphaComposite' | 'DBM_Volumetric_DistanceFunction' | 'DBM_AlphaComposite' | 'DBM_AmbientOcclusion' | 'DBM_MAX';
+declare var EDecalBlendMode : { DBM_Translucent:'DBM_Translucent',DBM_Stain:'DBM_Stain',DBM_Normal:'DBM_Normal',DBM_Emissive:'DBM_Emissive',DBM_DBuffer_ColorNormalRoughness:'DBM_DBuffer_ColorNormalRoughness',DBM_DBuffer_Color:'DBM_DBuffer_Color',DBM_DBuffer_ColorNormal:'DBM_DBuffer_ColorNormal',DBM_DBuffer_ColorRoughness:'DBM_DBuffer_ColorRoughness',DBM_DBuffer_Normal:'DBM_DBuffer_Normal',DBM_DBuffer_NormalRoughness:'DBM_DBuffer_NormalRoughness',DBM_DBuffer_Roughness:'DBM_DBuffer_Roughness',DBM_DBuffer_Emissive:'DBM_DBuffer_Emissive',DBM_DBuffer_AlphaComposite:'DBM_DBuffer_AlphaComposite',DBM_DBuffer_EmissiveAlphaComposite:'DBM_DBuffer_EmissiveAlphaComposite',DBM_Volumetric_DistanceFunction:'DBM_Volumetric_DistanceFunction',DBM_AlphaComposite:'DBM_AlphaComposite',DBM_AmbientOcclusion:'DBM_AmbientOcclusion',DBM_MAX:'DBM_MAX', };
+declare type EMaterialDecalResponse = 'MDR_None' | 'MDR_ColorNormalRoughness' | 'MDR_Color' | 'MDR_ColorNormal' | 'MDR_ColorRoughness' | 'MDR_Normal' | 'MDR_NormalRoughness' | 'MDR_Roughness' | 'MDR_MAX';
+declare var EMaterialDecalResponse : { MDR_None:'MDR_None',MDR_ColorNormalRoughness:'MDR_ColorNormalRoughness',MDR_Color:'MDR_Color',MDR_ColorNormal:'MDR_ColorNormal',MDR_ColorRoughness:'MDR_ColorRoughness',MDR_Normal:'MDR_Normal',MDR_NormalRoughness:'MDR_NormalRoughness',MDR_Roughness:'MDR_Roughness',MDR_MAX:'MDR_MAX', };
+declare type EMaterialShadingModel = 'MSM_Unlit' | 'MSM_DefaultLit' | 'MSM_Subsurface' | 'MSM_PreintegratedSkin' | 'MSM_ClearCoat' | 'MSM_SubsurfaceProfile' | 'MSM_TwoSidedFoliage' | 'MSM_Hair' | 'MSM_Cloth' | 'MSM_Eye' | 'MSM_NUM' | 'MSM_FromMaterialExpression' | 'MSM_MAX';
+declare var EMaterialShadingModel : { MSM_Unlit:'MSM_Unlit',MSM_DefaultLit:'MSM_DefaultLit',MSM_Subsurface:'MSM_Subsurface',MSM_PreintegratedSkin:'MSM_PreintegratedSkin',MSM_ClearCoat:'MSM_ClearCoat',MSM_SubsurfaceProfile:'MSM_SubsurfaceProfile',MSM_TwoSidedFoliage:'MSM_TwoSidedFoliage',MSM_Hair:'MSM_Hair',MSM_Cloth:'MSM_Cloth',MSM_Eye:'MSM_Eye',MSM_NUM:'MSM_NUM',MSM_FromMaterialExpression:'MSM_FromMaterialExpression',MSM_MAX:'MSM_MAX', };
+declare class MaterialShadingModelField { 
+	ShadingModelField: any;
+	clone() : MaterialShadingModelField;
+	static C(Other: UObject | any): MaterialShadingModelField;
 }
 
-declare class CurveLinearColor extends CurveBase { 
-	FloatCurves: RichCurve;
-	AdjustHue: number;
-	AdjustSaturation: number;
-	AdjustBrightness: number;
-	AdjustBrightnessCurve: number;
-	AdjustVibrance: number;
-	AdjustMinAlpha: number;
-	AdjustMaxAlpha: number;
-	static Load(ResourceName: string): CurveLinearColor;
-	static Find(Outer: UObject, ResourceName: string): CurveLinearColor;
-	static GetDefaultObject(): CurveLinearColor;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveLinearColor;
-	GetLinearColorValue(InTime: number): LinearColor;
-	GetClampedLinearColorValue(InTime: number): LinearColor;
-	static C(Other: UObject | any): CurveLinearColor;
+declare class Vector2MaterialInput extends MaterialInput { 
+	UseConstant: boolean;
+	ConstantX: number;
+	ConstantY: number;
+	clone() : Vector2MaterialInput;
+	static C(Other: UObject | any): Vector2MaterialInput;
 }
 
-declare type TextureAddress = 'TA_Wrap' | 'TA_Clamp' | 'TA_Mirror' | 'TA_MAX';
-declare var TextureAddress : { TA_Wrap:'TA_Wrap',TA_Clamp:'TA_Clamp',TA_Mirror:'TA_Mirror',TA_MAX:'TA_MAX', };
-declare class IntPoint { 
-	X: number;
-	Y: number;
-	clone() : IntPoint;
-	static C(Other: UObject | any): IntPoint;
+declare class ExpressionInput { 
+	Expression: MaterialExpression;
+	OutputIndex: number;
+	InputName: string;
+	mask: number;
+	MaskR: number;
+	MaskG: number;
+	MaskB: number;
+	MaskA: number;
+	ExpressionName: string;
+	clone() : ExpressionInput;
+	static C(Other: UObject | any): ExpressionInput;
 }
 
-declare type EImportanceWeight = 'Luminance' | 'Red' | 'Green' | 'Blue' | 'Alpha' | 'EImportanceWeight_MAX';
-declare var EImportanceWeight : { Luminance:'Luminance',Red:'Red',Green:'Green',Blue:'Blue',Alpha:'Alpha',EImportanceWeight_MAX:'EImportanceWeight_MAX', };
-declare class ImportanceTexture { 
-	Size: IntPoint;
-	NumMips: number;
-	MarginalCDF: number[];
-	ConditionalCDF: number[];
-	TextureData: Color[];
-	Texture: any;
-	Weighting: EImportanceWeight;
-	clone() : ImportanceTexture;
-	static C(Other: UObject | any): ImportanceTexture;
-	BreakImportanceTexture(Texture?: Texture2D,WeightingFunc?: EImportanceWeight): {Texture: Texture2D, WeightingFunc: EImportanceWeight};
-	ImportanceSample(Rand: Vector2D,Samples: number,Intensity: number,SamplePosition?: Vector2D,SampleColor?: LinearColor,SampleIntensity?: number,SampleSize?: number): {SamplePosition: Vector2D, SampleColor: LinearColor, SampleIntensity: number, SampleSize: number};
-	static BreakImportanceTexture(ImportanceTexture: ImportanceTexture,Texture?: Texture2D,WeightingFunc?: EImportanceWeight): {Texture: Texture2D, WeightingFunc: EImportanceWeight};
-	static ImportanceSample(Texture: ImportanceTexture,Rand: Vector2D,Samples: number,Intensity: number,SamplePosition?: Vector2D,SampleColor?: LinearColor,SampleIntensity?: number,SampleSize?: number): {SamplePosition: Vector2D, SampleColor: LinearColor, SampleIntensity: number, SampleSize: number};
+declare class MaterialAttributesInput extends ExpressionInput { 
+	PropertyConnectedBitmask: number;
+	clone() : MaterialAttributesInput;
+	static C(Other: UObject | any): MaterialAttributesInput;
 }
 
-declare class Margin { 
-	Left: number;
-	Top: number;
-	Right: number;
-	Bottom: number;
-	clone() : Margin;
-	static C(Other: UObject | any): Margin;
+declare class ShadingModelMaterialInput extends MaterialInput { 
+	clone() : ShadingModelMaterialInput;
+	static C(Other: UObject | any): ShadingModelMaterialInput;
 }
 
-declare type ESlateColorStylingMode = 'UseColor_Specified' | 'UseColor_Specified_Link' | 'UseColor_Foreground' | 'UseColor_Foreground_Subdued' | 'UseColor_MAX';
-declare var ESlateColorStylingMode : { UseColor_Specified:'UseColor_Specified',UseColor_Specified_Link:'UseColor_Specified_Link',UseColor_Foreground:'UseColor_Foreground',UseColor_Foreground_Subdued:'UseColor_Foreground_Subdued',UseColor_MAX:'UseColor_MAX', };
-declare class SlateColor { 
-	SpecifiedColor: LinearColor;
-	ColorUseRule: ESlateColorStylingMode;
-	clone() : SlateColor;
-	static C(Other: UObject | any): SlateColor;
-	static SlateColor_UseForeground(): SlateColor;
-	static SlateColor_UseSubduedForeground(): SlateColor;
+declare type ETranslucencyLightingMode = 'TLM_VolumetricNonDirectional' | 'TLM_VolumetricDirectional' | 'TLM_VolumetricPerVertexNonDirectional' | 'TLM_VolumetricPerVertexDirectional' | 'TLM_Surface' | 'TLM_SurfacePerPixelLighting' | 'TLM_MAX';
+declare var ETranslucencyLightingMode : { TLM_VolumetricNonDirectional:'TLM_VolumetricNonDirectional',TLM_VolumetricDirectional:'TLM_VolumetricDirectional',TLM_VolumetricPerVertexNonDirectional:'TLM_VolumetricPerVertexNonDirectional',TLM_VolumetricPerVertexDirectional:'TLM_VolumetricPerVertexDirectional',TLM_Surface:'TLM_Surface',TLM_SurfacePerPixelLighting:'TLM_SurfacePerPixelLighting',TLM_MAX:'TLM_MAX', };
+declare type EMaterialTessellationMode = 'MTM_NoTessellation' | 'MTM_FlatTessellation' | 'MTM_PNTriangles' | 'MTM_MAX';
+declare var EMaterialTessellationMode : { MTM_NoTessellation:'MTM_NoTessellation',MTM_FlatTessellation:'MTM_FlatTessellation',MTM_PNTriangles:'MTM_PNTriangles',MTM_MAX:'MTM_MAX', };
+declare class ParameterGroupData { 
+	GroupName: string;
+	GroupSortPriority: number;
+	clone() : ParameterGroupData;
+	static C(Other: UObject | any): ParameterGroupData;
 }
 
-declare type ESlateBrushDrawType = 'NoDrawType' | 'Box' | 'Border' | 'Image' | 'ESlateBrushDrawType_MAX';
-declare var ESlateBrushDrawType : { NoDrawType:'NoDrawType',Box:'Box',Border:'Border',Image:'Image',ESlateBrushDrawType_MAX:'ESlateBrushDrawType_MAX', };
-declare type ESlateBrushTileType = 'NoTile' | 'Horizontal' | 'Vertical' | 'Both' | 'ESlateBrushTileType_MAX';
-declare var ESlateBrushTileType : { NoTile:'NoTile',Horizontal:'Horizontal',Vertical:'Vertical',Both:'Both',ESlateBrushTileType_MAX:'ESlateBrushTileType_MAX', };
-declare type ESlateBrushMirrorType = 'NoMirror' | 'Horizontal' | 'Vertical' | 'Both' | 'ESlateBrushMirrorType_MAX';
-declare var ESlateBrushMirrorType : { NoMirror:'NoMirror',Horizontal:'Horizontal',Vertical:'Vertical',Both:'Both',ESlateBrushMirrorType_MAX:'ESlateBrushMirrorType_MAX', };
-declare type ESlateBrushImageType = 'NoImage' | 'FullColor' | 'Linear' | 'ESlateBrushImageType_MAX';
-declare var ESlateBrushImageType : { NoImage:'NoImage',FullColor:'FullColor',Linear:'Linear',ESlateBrushImageType_MAX:'ESlateBrushImageType_MAX', };
-declare class SlateBrush { 
-	ImageSize: Vector2D;
-	Margin: Margin;
-	Tint: LinearColor;
-	TintColor: SlateColor;
-	ResourceObject: UObject;
-	ResourceName: string;
-	UVRegion: Box2D;
-	DrawAs: ESlateBrushDrawType;
-	Tiling: ESlateBrushTileType;
-	Mirroring: ESlateBrushMirrorType;
-	ImageType: ESlateBrushImageType;
-	bIsDynamicallyLoaded: boolean;
-	bHasUObject: boolean;
-	clone() : SlateBrush;
-	static C(Other: UObject | any): SlateBrush;
-	GetBrushResource(): UObject;
-	GetBrushResourceAsMaterial(): MaterialInterface;
-	GetBrushResourceAsTexture2D(): Texture2D;
-	GetDynamicMaterial(): {Brush: SlateBrush, $: MaterialInstanceDynamic};
-	SetBrushResourceToMaterial(Material?: MaterialInterface): {Brush: SlateBrush};
-	SetBrushResourceToTexture(Texture?: Texture2D): {Brush: SlateBrush};
-	EqualEqual_SlateBrush(B: SlateBrush): boolean;
-	static GetBrushResource(Brush: SlateBrush): UObject;
-	static GetBrushResourceAsMaterial(Brush: SlateBrush): MaterialInterface;
-	static GetBrushResourceAsTexture2D(Brush: SlateBrush): Texture2D;
-	static GetDynamicMaterial(Brush?: SlateBrush): {Brush: SlateBrush, $: MaterialInstanceDynamic};
-	static SetBrushResourceToMaterial(Brush?: SlateBrush,Material?: MaterialInterface): {Brush: SlateBrush};
-	static SetBrushResourceToTexture(Brush?: SlateBrush,Texture?: Texture2D): {Brush: SlateBrush};
-	static EqualEqual_SlateBrush(A: SlateBrush,B: SlateBrush): boolean;
-	static NoResourceBrush(): SlateBrush;
+declare class MaterialFunctionInfo { 
+	StateId: Guid;
+	UFunction: MaterialFunctionInterface;
+	clone() : MaterialFunctionInfo;
+	static C(Other: UObject | any): MaterialFunctionInfo;
 }
 
-declare class Texture2D extends Texture { 
+declare class CollectionParameterBase { 
+	ParameterName: string;
+	ID: Guid;
+	clone() : CollectionParameterBase;
+	static C(Other: UObject | any): CollectionParameterBase;
+}
+
+declare class CollectionScalarParameter extends CollectionParameterBase { 
+	DefaultValue: number;
+	clone() : CollectionScalarParameter;
+	static C(Other: UObject | any): CollectionScalarParameter;
+}
+
+declare class CollectionVectorParameter extends CollectionParameterBase { 
+	DefaultValue: LinearColor;
+	clone() : CollectionVectorParameter;
+	static C(Other: UObject | any): CollectionVectorParameter;
+}
+
+declare class MaterialParameterCollection extends UObject { 
+	StateId: Guid;
+	ScalarParameters: CollectionScalarParameter[];
+	VectorParameters: CollectionVectorParameter[];
+	static Load(ResourceName: string): MaterialParameterCollection;
+	static Find(Outer: UObject, ResourceName: string): MaterialParameterCollection;
+	static GetDefaultObject(): MaterialParameterCollection;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialParameterCollection;
+	static C(Other: UObject | any): MaterialParameterCollection;
+}
+
+declare class MaterialParameterCollectionInfo { 
+	StateId: Guid;
+	ParameterCollection: MaterialParameterCollection;
+	clone() : MaterialParameterCollectionInfo;
+	static C(Other: UObject | any): MaterialParameterCollectionInfo;
+}
+
+declare type EBlendableLocation = 'BL_AfterTonemapping' | 'BL_BeforeTonemapping' | 'BL_BeforeTranslucency' | 'BL_ReplacingTonemapper' | 'BL_SSRInput' | 'BL_MAX';
+declare var EBlendableLocation : { BL_AfterTonemapping:'BL_AfterTonemapping',BL_BeforeTonemapping:'BL_BeforeTonemapping',BL_BeforeTranslucency:'BL_BeforeTranslucency',BL_ReplacingTonemapper:'BL_ReplacingTonemapper',BL_SSRInput:'BL_SSRInput',BL_MAX:'BL_MAX', };
+declare type EMaterialStencilCompare = 'MSC_Less' | 'MSC_LessEqual' | 'MSC_Greater' | 'MSC_GreaterEqual' | 'MSC_Equal' | 'MSC_NotEqual' | 'MSC_Never' | 'MSC_Always' | 'MSC_Count' | 'MSC_MAX';
+declare var EMaterialStencilCompare : { MSC_Less:'MSC_Less',MSC_LessEqual:'MSC_LessEqual',MSC_Greater:'MSC_Greater',MSC_GreaterEqual:'MSC_GreaterEqual',MSC_Equal:'MSC_Equal',MSC_NotEqual:'MSC_NotEqual',MSC_Never:'MSC_Never',MSC_Always:'MSC_Always',MSC_Count:'MSC_Count',MSC_MAX:'MSC_MAX', };
+declare type ERefractionMode = 'RM_IndexOfRefraction' | 'RM_PixelNormalOffset' | 'RM_MAX';
+declare var ERefractionMode : { RM_IndexOfRefraction:'RM_IndexOfRefraction',RM_PixelNormalOffset:'RM_PixelNormalOffset',RM_MAX:'RM_MAX', };
+declare class StreamableRenderAsset extends UObject { 
+	ForceMipLevelsToBeResidentTimestamp: any;
+	NumCinematicMipLevels: number;
 	StreamingIndex: number;
-	LevelIndex: number;
-	FirstResourceMemMip: number;
-	bTemporarilyDisableStreaming: boolean;
+	CachedCombinedLODBias: number;
+	CachedNumResidentLODs: number;
+	bCachedReadyForStreaming: boolean;
+	NeverStream: boolean;
+	bGlobalForceMipLevelsToBeResident: boolean;
 	bIsStreamable: boolean;
 	bHasStreamingUpdatePending: boolean;
 	bForceMiplevelsToBeResident: boolean;
 	bIgnoreStreamingMipBias: boolean;
-	bGlobalForceMipLevelsToBeResident: boolean;
-	bHasBeenPaintedInEditor: boolean;
-	AddressX: TextureAddress;
-	AddressY: TextureAddress;
-	ImportedSize: IntPoint;
-	ForceMipLevelsToBeResidentTimestamp: any;
-	static Load(ResourceName: string): Texture2D;
-	static Find(Outer: UObject, ResourceName: string): Texture2D;
-	static GetDefaultObject(): Texture2D;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Texture2D;
-	Blueprint_GetSizeY(): number;
-	Blueprint_GetSizeX(): number;
-	static C(Other: UObject | any): Texture2D;
-	AddLoadingSplashScreen(TranslationInMeters: Vector,Rotation: Rotator,SizeInMeters: Vector2D,DeltaRotation: Rotator,bClearBeforeAdd: boolean): void;
-	ShowLoadingIcon(): void;
-	MakeImportanceTexture(WeightingFunc: EImportanceWeight): ImportanceTexture;
-	MakeBrushFromTexture(Width: number,Height: number): SlateBrush;
-	static AddLoadingSplashScreen(Texture: Texture2D,TranslationInMeters: Vector,Rotation: Rotator,SizeInMeters: Vector2D,DeltaRotation: Rotator,bClearBeforeAdd: boolean): void;
-	static ShowLoadingIcon(Texture: Texture2D): void;
-	static MakeImportanceTexture(Texture: Texture2D,WeightingFunc: EImportanceWeight): ImportanceTexture;
-	static MakeBrushFromTexture(Texture: Texture2D,Width: number,Height: number): SlateBrush;
+	bUseCinematicMipLevels: boolean;
+	static Load(ResourceName: string): StreamableRenderAsset;
+	static Find(Outer: UObject, ResourceName: string): StreamableRenderAsset;
+	static GetDefaultObject(): StreamableRenderAsset;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StreamableRenderAsset;
+	static C(Other: UObject | any): StreamableRenderAsset;
 }
 
-declare class CurveLinearColorAtlas extends Texture2D { 
-	bIsDirty: boolean;
-	TextureSize: any;
-	GradientPixelSize: any;
-	GradientCurves: CurveLinearColor[];
-	static Load(ResourceName: string): CurveLinearColorAtlas;
-	static Find(Outer: UObject, ResourceName: string): CurveLinearColorAtlas;
-	static GetDefaultObject(): CurveLinearColorAtlas;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveLinearColorAtlas;
-	GetCurvePosition(InCurve: CurveLinearColor,Position?: number): {Position: number, $: boolean};
-	static C(Other: UObject | any): CurveLinearColorAtlas;
+declare type ETextureSourceFormat = 'TSF_Invalid' | 'TSF_G8' | 'TSF_BGRA8' | 'TSF_BGRE8' | 'TSF_RGBA16' | 'TSF_RGBA16F' | 'TSF_RGBA8' | 'TSF_RGBE8' | 'TSF_MAX';
+declare var ETextureSourceFormat : { TSF_Invalid:'TSF_Invalid',TSF_G8:'TSF_G8',TSF_BGRA8:'TSF_BGRA8',TSF_BGRE8:'TSF_BGRE8',TSF_RGBA16:'TSF_RGBA16',TSF_RGBA16F:'TSF_RGBA16F',TSF_RGBA8:'TSF_RGBA8',TSF_RGBE8:'TSF_RGBE8',TSF_MAX:'TSF_MAX', };
+declare class TextureSourceBlock { 
+	BlockX: number;
+	BlockY: number;
+	SizeX: number;
+	SizeY: number;
+	NumSlices: number;
+	NumMips: number;
+	clone() : TextureSourceBlock;
+	static C(Other: UObject | any): TextureSourceBlock;
 }
 
-declare class ScalarParameterAtlasInstanceData { 
-	bIsUsedAsAtlasPosition: boolean;
-	Curve: CurveLinearColor;
-	Atlas: CurveLinearColorAtlas;
-	clone() : ScalarParameterAtlasInstanceData;
-	static C(Other: UObject | any): ScalarParameterAtlasInstanceData;
+declare class TextureSource { 
+	ID: Guid;
+	BaseBlockX: number;
+	BaseBlockY: number;
+	SizeX: number;
+	SizeY: number;
+	NumSlices: number;
+	NumMips: number;
+	NumLayers: number;
+	bPNGCompressed: boolean;
+	bGuidIsHash: boolean;
+	Format: ETextureSourceFormat;
+	LayerFormat: ETextureSourceFormat[];
+	Blocks: TextureSourceBlock[];
+	clone() : TextureSource;
+	static C(Other: UObject | any): TextureSource;
 }
 
-declare type EMaterialParameterAssociation = 'LayerParameter' | 'BlendParameter' | 'GlobalParameter' | 'EMaterialParameterAssociation_MAX';
-declare var EMaterialParameterAssociation : { LayerParameter:'LayerParameter',BlendParameter:'BlendParameter',GlobalParameter:'GlobalParameter',EMaterialParameterAssociation_MAX:'EMaterialParameterAssociation_MAX', };
-declare class MaterialParameterInfo { 
-	Name: string;
-	Association: EMaterialParameterAssociation;
-	index: number;
-	clone() : MaterialParameterInfo;
-	static C(Other: UObject | any): MaterialParameterInfo;
+declare type ETextureLossyCompressionAmount = 'TLCA_Default' | 'TLCA_None' | 'TLCA_Lowest' | 'TLCA_Low' | 'TLCA_Medium' | 'TLCA_High' | 'TLCA_Highest' | 'TLCA_MAX';
+declare var ETextureLossyCompressionAmount : { TLCA_Default:'TLCA_Default',TLCA_None:'TLCA_None',TLCA_Lowest:'TLCA_Lowest',TLCA_Low:'TLCA_Low',TLCA_Medium:'TLCA_Medium',TLCA_High:'TLCA_High',TLCA_Highest:'TLCA_Highest',TLCA_MAX:'TLCA_MAX', };
+declare type ETextureCompressionQuality = 'TCQ_Default' | 'TCQ_Lowest' | 'TCQ_Low' | 'TCQ_Medium' | 'TCQ_High' | 'TCQ_Highest' | 'TCQ_MAX';
+declare var ETextureCompressionQuality : { TCQ_Default:'TCQ_Default',TCQ_Lowest:'TCQ_Lowest',TCQ_Low:'TCQ_Low',TCQ_Medium:'TCQ_Medium',TCQ_High:'TCQ_High',TCQ_Highest:'TCQ_Highest',TCQ_MAX:'TCQ_MAX', };
+declare class Vector4 { 
+	X: number;
+	Y: number;
+	Z: number;
+	W: number;
+	clone() : Vector4;
+	static C(Other: UObject | any): Vector4;
+	Add_Vector4Vector4(B: Vector4): Vector4;
+	BreakVector4(X?: number,Y?: number,Z?: number,W?: number): {X: number, Y: number, Z: number, W: number};
+	Conv_Vector4ToQuaterion(): Quat;
+	Conv_Vector4ToRotator(): Rotator;
+	Conv_Vector4ToVector(): Vector;
+	Divide_Vector4Vector4(B: Vector4): Vector4;
+	EqualEqual_Vector4Vector4(B: Vector4,ErrorTolerance: number): boolean;
+	EqualExactly_Vector4Vector4(B: Vector4): boolean;
+	Multiply_Vector4Vector4(B: Vector4): Vector4;
+	NotEqual_Vector4Vector4(B: Vector4,ErrorTolerance: number): boolean;
+	NotEqualExactly_Vector4Vector4(B: Vector4): boolean;
+	Subtract_Vector4Vector4(B: Vector4): Vector4;
+	Vector4_Assign(InVector?: Vector4): {A: Vector4};
+	Vector4_CrossProduct3(B: Vector4): Vector4;
+	Vector4_DotProduct(B: Vector4): number;
+	Vector4_DotProduct3(B: Vector4): number;
+	Vector4_IsNAN(): boolean;
+	Vector4_IsNearlyZero3(Tolerance: number): boolean;
+	Vector4_IsNormal3(): boolean;
+	Vector4_IsUnit3(SquaredLenthTolerance: number): boolean;
+	Vector4_IsZero(): boolean;
+	Vector4_MirrorByVector3(SurfaceNormal: Vector4): Vector4;
+	Vector4_Negated(): Vector4;
+	Vector4_Normal3(Tolerance: number): Vector4;
+	Vector4_Normalize3(Tolerance?: number): {A: Vector4};
+	Vector4_NormalUnsafe3(): Vector4;
+	Vector4_Set(X?: number,Y?: number,Z?: number,W?: number): {A: Vector4};
+	Vector4_Size(): number;
+	Vector4_Size3(): number;
+	Vector4_SizeSquared(): number;
+	Vector4_SizeSquared3(): number;
+	static Add_Vector4Vector4(A: Vector4,B: Vector4): Vector4;
+	static BreakVector4(InVec: Vector4,X?: number,Y?: number,Z?: number,W?: number): {X: number, Y: number, Z: number, W: number};
+	static Conv_Vector4ToQuaterion(InVec: Vector4): Quat;
+	static Conv_Vector4ToRotator(InVec: Vector4): Rotator;
+	static Conv_Vector4ToVector(InVector4: Vector4): Vector;
+	static Divide_Vector4Vector4(A: Vector4,B: Vector4): Vector4;
+	static EqualEqual_Vector4Vector4(A: Vector4,B: Vector4,ErrorTolerance: number): boolean;
+	static EqualExactly_Vector4Vector4(A: Vector4,B: Vector4): boolean;
+	static Multiply_Vector4Vector4(A: Vector4,B: Vector4): Vector4;
+	static NotEqual_Vector4Vector4(A: Vector4,B: Vector4,ErrorTolerance: number): boolean;
+	static NotEqualExactly_Vector4Vector4(A: Vector4,B: Vector4): boolean;
+	static Subtract_Vector4Vector4(A: Vector4,B: Vector4): Vector4;
+	static Vector4_Assign(A?: Vector4,InVector?: Vector4): {A: Vector4};
+	static Vector4_CrossProduct3(A: Vector4,B: Vector4): Vector4;
+	static Vector4_DotProduct(A: Vector4,B: Vector4): number;
+	static Vector4_DotProduct3(A: Vector4,B: Vector4): number;
+	static Vector4_IsNAN(A: Vector4): boolean;
+	static Vector4_IsNearlyZero3(A: Vector4,Tolerance: number): boolean;
+	static Vector4_IsNormal3(A: Vector4): boolean;
+	static Vector4_IsUnit3(A: Vector4,SquaredLenthTolerance: number): boolean;
+	static Vector4_IsZero(A: Vector4): boolean;
+	static Vector4_MirrorByVector3(Direction: Vector4,SurfaceNormal: Vector4): Vector4;
+	static Vector4_Negated(A: Vector4): Vector4;
+	static Vector4_Normal3(A: Vector4,Tolerance: number): Vector4;
+	static Vector4_Normalize3(A?: Vector4,Tolerance?: number): {A: Vector4};
+	static Vector4_NormalUnsafe3(A: Vector4): Vector4;
+	static Vector4_Set(A?: Vector4,X?: number,Y?: number,Z?: number,W?: number): {A: Vector4};
+	static Vector4_Size(A: Vector4): number;
+	static Vector4_Size3(A: Vector4): number;
+	static Vector4_SizeSquared(A: Vector4): number;
+	static Vector4_SizeSquared3(A: Vector4): number;
+	static MakeVector4(X: number,Y: number,Z: number,W: number): Vector4;
+	static Vector4_Zero(): Vector4;
 }
 
-declare class ScalarParameterValue { 
-	ParameterName: string;
-	AtlasData: ScalarParameterAtlasInstanceData;
-	ParameterInfo: MaterialParameterInfo;
-	ParameterValue: number;
-	ExpressionGUID: Guid;
-	clone() : ScalarParameterValue;
-	static C(Other: UObject | any): ScalarParameterValue;
+declare type ETexturePowerOfTwoSetting = 'None' | 'PadToPowerOfTwo' | 'PadToSquarePowerOfTwo' | 'ETexturePowerOfTwoSetting_MAX';
+declare var ETexturePowerOfTwoSetting : { None:'None',PadToPowerOfTwo:'PadToPowerOfTwo',PadToSquarePowerOfTwo:'PadToSquarePowerOfTwo',ETexturePowerOfTwoSetting_MAX:'ETexturePowerOfTwoSetting_MAX', };
+declare type TextureMipGenSettings = 'TMGS_FromTextureGroup' | 'TMGS_SimpleAverage' | 'TMGS_Sharpen0' | 'TMGS_Sharpen1' | 'TMGS_Sharpen2' | 'TMGS_Sharpen3' | 'TMGS_Sharpen4' | 'TMGS_Sharpen5' | 'TMGS_Sharpen6' | 'TMGS_Sharpen7' | 'TMGS_Sharpen8' | 'TMGS_Sharpen9' | 'TMGS_Sharpen10' | 'TMGS_NoMipmaps' | 'TMGS_LeaveExistingMips' | 'TMGS_Blur1' | 'TMGS_Blur2' | 'TMGS_Blur3' | 'TMGS_Blur4' | 'TMGS_Blur5' | 'TMGS_Unfiltered' | 'TMGS_MAX';
+declare var TextureMipGenSettings : { TMGS_FromTextureGroup:'TMGS_FromTextureGroup',TMGS_SimpleAverage:'TMGS_SimpleAverage',TMGS_Sharpen0:'TMGS_Sharpen0',TMGS_Sharpen1:'TMGS_Sharpen1',TMGS_Sharpen2:'TMGS_Sharpen2',TMGS_Sharpen3:'TMGS_Sharpen3',TMGS_Sharpen4:'TMGS_Sharpen4',TMGS_Sharpen5:'TMGS_Sharpen5',TMGS_Sharpen6:'TMGS_Sharpen6',TMGS_Sharpen7:'TMGS_Sharpen7',TMGS_Sharpen8:'TMGS_Sharpen8',TMGS_Sharpen9:'TMGS_Sharpen9',TMGS_Sharpen10:'TMGS_Sharpen10',TMGS_NoMipmaps:'TMGS_NoMipmaps',TMGS_LeaveExistingMips:'TMGS_LeaveExistingMips',TMGS_Blur1:'TMGS_Blur1',TMGS_Blur2:'TMGS_Blur2',TMGS_Blur3:'TMGS_Blur3',TMGS_Blur4:'TMGS_Blur4',TMGS_Blur5:'TMGS_Blur5',TMGS_Unfiltered:'TMGS_Unfiltered',TMGS_MAX:'TMGS_MAX', };
+declare type ECompositeTextureMode = 'CTM_Disabled' | 'CTM_NormalRoughnessToRed' | 'CTM_NormalRoughnessToGreen' | 'CTM_NormalRoughnessToBlue' | 'CTM_NormalRoughnessToAlpha' | 'CTM_MAX';
+declare var ECompositeTextureMode : { CTM_Disabled:'CTM_Disabled',CTM_NormalRoughnessToRed:'CTM_NormalRoughnessToRed',CTM_NormalRoughnessToGreen:'CTM_NormalRoughnessToGreen',CTM_NormalRoughnessToBlue:'CTM_NormalRoughnessToBlue',CTM_NormalRoughnessToAlpha:'CTM_NormalRoughnessToAlpha',CTM_MAX:'CTM_MAX', };
+declare type TextureCompressionSettings = 'TC_Default' | 'TC_Normalmap' | 'TC_Masks' | 'TC_Grayscale' | 'TC_Displacementmap' | 'TC_VectorDisplacementmap' | 'TC_HDR' | 'TC_EditorIcon' | 'TC_Alpha' | 'TC_DistanceFieldFont' | 'TC_HDR_Compressed' | 'TC_BC7' | 'TC_MAX';
+declare var TextureCompressionSettings : { TC_Default:'TC_Default',TC_Normalmap:'TC_Normalmap',TC_Masks:'TC_Masks',TC_Grayscale:'TC_Grayscale',TC_Displacementmap:'TC_Displacementmap',TC_VectorDisplacementmap:'TC_VectorDisplacementmap',TC_HDR:'TC_HDR',TC_EditorIcon:'TC_EditorIcon',TC_Alpha:'TC_Alpha',TC_DistanceFieldFont:'TC_DistanceFieldFont',TC_HDR_Compressed:'TC_HDR_Compressed',TC_BC7:'TC_BC7',TC_MAX:'TC_MAX', };
+declare class TextureFormatSettings { 
+	CompressionSettings: TextureCompressionSettings;
+	CompressionNoAlpha: boolean;
+	CompressionNone: boolean;
+	sRGB: boolean;
+	clone() : TextureFormatSettings;
+	static C(Other: UObject | any): TextureFormatSettings;
 }
 
-declare class VectorParameterValue { 
-	ParameterName: string;
-	ParameterInfo: MaterialParameterInfo;
-	ParameterValue: LinearColor;
-	ExpressionGUID: Guid;
-	clone() : VectorParameterValue;
-	static C(Other: UObject | any): VectorParameterValue;
+declare type TextureFilter = 'TF_Nearest' | 'TF_Bilinear' | 'TF_Trilinear' | 'TF_Default' | 'TF_MAX';
+declare var TextureFilter : { TF_Nearest:'TF_Nearest',TF_Bilinear:'TF_Bilinear',TF_Trilinear:'TF_Trilinear',TF_Default:'TF_Default',TF_MAX:'TF_MAX', };
+declare type ETextureMipLoadOptions = 'Default' | 'AllMips' | 'OnlyFirstMip' | 'ETextureMipLoadOptions_MAX';
+declare var ETextureMipLoadOptions : { Default:'Default',AllMips:'AllMips',OnlyFirstMip:'OnlyFirstMip',ETextureMipLoadOptions_MAX:'ETextureMipLoadOptions_MAX', };
+declare type TextureGroup = 'TEXTUREGROUP_World' | 'TEXTUREGROUP_WorldNormalMap' | 'TEXTUREGROUP_WorldSpecular' | 'TEXTUREGROUP_Character' | 'TEXTUREGROUP_CharacterNormalMap' | 'TEXTUREGROUP_CharacterSpecular' | 'TEXTUREGROUP_Weapon' | 'TEXTUREGROUP_WeaponNormalMap' | 'TEXTUREGROUP_WeaponSpecular' | 'TEXTUREGROUP_Vehicle' | 'TEXTUREGROUP_VehicleNormalMap' | 'TEXTUREGROUP_VehicleSpecular' | 'TEXTUREGROUP_Cinematic' | 'TEXTUREGROUP_Effects' | 'TEXTUREGROUP_EffectsNotFiltered' | 'TEXTUREGROUP_Skybox' | 'TEXTUREGROUP_UI' | 'TEXTUREGROUP_Lightmap' | 'TEXTUREGROUP_RenderTarget' | 'TEXTUREGROUP_MobileFlattened' | 'TEXTUREGROUP_ProcBuilding_Face' | 'TEXTUREGROUP_ProcBuilding_LightMap' | 'TEXTUREGROUP_Shadowmap' | 'TEXTUREGROUP_ColorLookupTable' | 'TEXTUREGROUP_Terrain_Heightmap' | 'TEXTUREGROUP_Terrain_Weightmap' | 'TEXTUREGROUP_Bokeh' | 'TEXTUREGROUP_IESLightProfile' | 'TEXTUREGROUP_Pixels2D' | 'TEXTUREGROUP_HierarchicalLOD' | 'TEXTUREGROUP_Impostor' | 'TEXTUREGROUP_ImpostorNormalDepth' | 'TEXTUREGROUP_8BitData' | 'TEXTUREGROUP_16BitData' | 'TEXTUREGROUP_Project01' | 'TEXTUREGROUP_Project02' | 'TEXTUREGROUP_Project03' | 'TEXTUREGROUP_Project04' | 'TEXTUREGROUP_Project05' | 'TEXTUREGROUP_Project06' | 'TEXTUREGROUP_Project07' | 'TEXTUREGROUP_Project08' | 'TEXTUREGROUP_Project09' | 'TEXTUREGROUP_Project10' | 'TEXTUREGROUP_MAX';
+declare var TextureGroup : { TEXTUREGROUP_World:'TEXTUREGROUP_World',TEXTUREGROUP_WorldNormalMap:'TEXTUREGROUP_WorldNormalMap',TEXTUREGROUP_WorldSpecular:'TEXTUREGROUP_WorldSpecular',TEXTUREGROUP_Character:'TEXTUREGROUP_Character',TEXTUREGROUP_CharacterNormalMap:'TEXTUREGROUP_CharacterNormalMap',TEXTUREGROUP_CharacterSpecular:'TEXTUREGROUP_CharacterSpecular',TEXTUREGROUP_Weapon:'TEXTUREGROUP_Weapon',TEXTUREGROUP_WeaponNormalMap:'TEXTUREGROUP_WeaponNormalMap',TEXTUREGROUP_WeaponSpecular:'TEXTUREGROUP_WeaponSpecular',TEXTUREGROUP_Vehicle:'TEXTUREGROUP_Vehicle',TEXTUREGROUP_VehicleNormalMap:'TEXTUREGROUP_VehicleNormalMap',TEXTUREGROUP_VehicleSpecular:'TEXTUREGROUP_VehicleSpecular',TEXTUREGROUP_Cinematic:'TEXTUREGROUP_Cinematic',TEXTUREGROUP_Effects:'TEXTUREGROUP_Effects',TEXTUREGROUP_EffectsNotFiltered:'TEXTUREGROUP_EffectsNotFiltered',TEXTUREGROUP_Skybox:'TEXTUREGROUP_Skybox',TEXTUREGROUP_UI:'TEXTUREGROUP_UI',TEXTUREGROUP_Lightmap:'TEXTUREGROUP_Lightmap',TEXTUREGROUP_RenderTarget:'TEXTUREGROUP_RenderTarget',TEXTUREGROUP_MobileFlattened:'TEXTUREGROUP_MobileFlattened',TEXTUREGROUP_ProcBuilding_Face:'TEXTUREGROUP_ProcBuilding_Face',TEXTUREGROUP_ProcBuilding_LightMap:'TEXTUREGROUP_ProcBuilding_LightMap',TEXTUREGROUP_Shadowmap:'TEXTUREGROUP_Shadowmap',TEXTUREGROUP_ColorLookupTable:'TEXTUREGROUP_ColorLookupTable',TEXTUREGROUP_Terrain_Heightmap:'TEXTUREGROUP_Terrain_Heightmap',TEXTUREGROUP_Terrain_Weightmap:'TEXTUREGROUP_Terrain_Weightmap',TEXTUREGROUP_Bokeh:'TEXTUREGROUP_Bokeh',TEXTUREGROUP_IESLightProfile:'TEXTUREGROUP_IESLightProfile',TEXTUREGROUP_Pixels2D:'TEXTUREGROUP_Pixels2D',TEXTUREGROUP_HierarchicalLOD:'TEXTUREGROUP_HierarchicalLOD',TEXTUREGROUP_Impostor:'TEXTUREGROUP_Impostor',TEXTUREGROUP_ImpostorNormalDepth:'TEXTUREGROUP_ImpostorNormalDepth',TEXTUREGROUP_8BitData:'TEXTUREGROUP_8BitData',TEXTUREGROUP_16BitData:'TEXTUREGROUP_16BitData',TEXTUREGROUP_Project01:'TEXTUREGROUP_Project01',TEXTUREGROUP_Project02:'TEXTUREGROUP_Project02',TEXTUREGROUP_Project03:'TEXTUREGROUP_Project03',TEXTUREGROUP_Project04:'TEXTUREGROUP_Project04',TEXTUREGROUP_Project05:'TEXTUREGROUP_Project05',TEXTUREGROUP_Project06:'TEXTUREGROUP_Project06',TEXTUREGROUP_Project07:'TEXTUREGROUP_Project07',TEXTUREGROUP_Project08:'TEXTUREGROUP_Project08',TEXTUREGROUP_Project09:'TEXTUREGROUP_Project09',TEXTUREGROUP_Project10:'TEXTUREGROUP_Project10',TEXTUREGROUP_MAX:'TEXTUREGROUP_MAX', };
+declare type EDesiredImageFormat = 'PNG' | 'JPG' | 'BMP' | 'EXR' | 'EDesiredImageFormat_MAX';
+declare var EDesiredImageFormat : { PNG:'PNG',JPG:'JPG',BMP:'BMP',EXR:'EXR',EDesiredImageFormat_MAX:'EDesiredImageFormat_MAX', };
+declare class ImageWriteOptions { 
+	Format: EDesiredImageFormat;
+	OnComplete: UnrealEngineDelegate<(bSuccess: boolean) => void>;
+	CompressionQuality: number;
+	bOverwriteFile: boolean;
+	bAsync: boolean;
+	clone() : ImageWriteOptions;
+	static C(Other: UObject | any): ImageWriteOptions;
 }
 
-declare class TextureParameterValue { 
-	ParameterName: string;
-	ParameterInfo: MaterialParameterInfo;
-	ParameterValue: Texture;
-	ExpressionGUID: Guid;
-	clone() : TextureParameterValue;
-	static C(Other: UObject | any): TextureParameterValue;
-}
-
-declare type EFontCacheType = 'Offline' | 'Runtime' | 'EFontCacheType_MAX';
-declare var EFontCacheType : { Offline:'Offline',Runtime:'Runtime',EFontCacheType_MAX:'EFontCacheType_MAX', };
-declare class FontCharacter { 
-	StartU: number;
-	StartV: number;
-	USize: number;
-	VSize: number;
-	TextureIndex: number;
-	VerticalOffset: number;
-	clone() : FontCharacter;
-	static C(Other: UObject | any): FontCharacter;
+declare class Texture extends StreamableRenderAsset { 
+	Source: TextureSource;
+	LightingGuid: Guid;
+	SourceFilePath: string;
+	AssetImportData: AssetImportData;
+	AdjustBrightness: number;
+	AdjustBrightnessCurve: number;
+	AdjustVibrance: number;
+	AdjustSaturation: number;
+	AdjustRGBCurve: number;
+	AdjustHue: number;
+	AdjustMinAlpha: number;
+	AdjustMaxAlpha: number;
+	CompressionNoAlpha: boolean;
+	CompressionNone: boolean;
+	DeferCompression: boolean;
+	LossyCompressionAmount: ETextureLossyCompressionAmount;
+	MaxTextureSize: number;
+	CompressionQuality: ETextureCompressionQuality;
+	bDitherMipMapAlpha: boolean;
+	AlphaCoverageThresholds: Vector4;
+	bPreserveBorder: boolean;
+	bFlipGreenChannel: boolean;
+	bForcePVRTC4: boolean;
+	PowerOfTwoMode: ETexturePowerOfTwoSetting;
+	PaddingColor: Color;
+	bChromaKeyTexture: boolean;
+	ChromaKeyThreshold: number;
+	ChromaKeyColor: Color;
+	MipGenSettings: TextureMipGenSettings;
+	CompositeTexture: Texture;
+	CompositeTextureMode: ECompositeTextureMode;
+	CompositePower: number;
+	LayerFormatSettings: TextureFormatSettings[];
+	LODBias: number;
+	CompressionSettings: TextureCompressionSettings;
+	Filter: TextureFilter;
+	MipLoadOptions: ETextureMipLoadOptions;
+	LODGroup: TextureGroup;
+	sRGB: boolean;
+	bUseLegacyGamma: boolean;
+	bNoTiling: boolean;
+	VirtualTextureStreaming: boolean;
+	bAsyncResourceReleaseHasBeenStarted: boolean;
+	AssetUserData: AssetUserData[];
+	static Load(ResourceName: string): Texture;
+	static Find(Outer: UObject, ResourceName: string): Texture;
+	static GetDefaultObject(): Texture;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Texture;
+	static C(Other: UObject | any): Texture;
+	SetSplashScreen(Scale: Vector2D,Offset: Vector,bShowLoadingMovie: boolean,bShowOnSet: boolean): void;
+	ExportToDisk(Filename: string,Options: ImageWriteOptions): void;
+	SetSpectatorScreenTexture(): void;
+	static SetSplashScreen(Texture: Texture,Scale: Vector2D,Offset: Vector,bShowLoadingMovie: boolean,bShowOnSet: boolean): void;
+	static ExportToDisk(Texture: Texture,Filename: string,Options: ImageWriteOptions): void;
+	static SetSpectatorScreenTexture(InTexture: Texture): void;
 }
 
-declare type EFontImportCharacterSet = 'FontICS_Default' | 'FontICS_Ansi' | 'FontICS_Symbol' | 'FontICS_MAX';
-declare var EFontImportCharacterSet : { FontICS_Default:'FontICS_Default',FontICS_Ansi:'FontICS_Ansi',FontICS_Symbol:'FontICS_Symbol',FontICS_MAX:'FontICS_MAX', };
-declare class FontImportOptionsData { 
-	FontName: string;
-	Height: number;
-	bEnableAntialiasing: boolean;
-	bEnableBold: boolean;
-	bEnableItalic: boolean;
-	bEnableUnderline: boolean;
-	bAlphaOnly: boolean;
-	CharacterSet: EFontImportCharacterSet;
-	Chars: string;
-	UnicodeRange: string;
-	CharsFilePath: string;
-	CharsFileWildcard: string;
-	bCreatePrintableOnly: boolean;
-	bIncludeASCIIRange: boolean;
-	ForegroundColor: LinearColor;
-	bEnableDropShadow: boolean;
-	TexturePageWidth: number;
-	TexturePageMaxHeight: number;
-	XPadding: number;
-	YPadding: number;
-	ExtendBoxTop: number;
-	ExtendBoxBottom: number;
-	ExtendBoxRight: number;
-	ExtendBoxLeft: number;
-	bEnableLegacyMode: boolean;
-	Kerning: number;
-	bUseDistanceFieldAlpha: boolean;
-	DistanceFieldScaleFactor: number;
-	DistanceFieldScanRadiusScale: number;
-	clone() : FontImportOptionsData;
-	static C(Other: UObject | any): FontImportOptionsData;
+declare type EMaterialUsage = 'MATUSAGE_SkeletalMesh' | 'MATUSAGE_ParticleSprites' | 'MATUSAGE_BeamTrails' | 'MATUSAGE_MeshParticles' | 'MATUSAGE_StaticLighting' | 'MATUSAGE_MorphTargets' | 'MATUSAGE_SplineMesh' | 'MATUSAGE_InstancedStaticMeshes' | 'MATUSAGE_GeometryCollections' | 'MATUSAGE_Clothing' | 'MATUSAGE_NiagaraSprites' | 'MATUSAGE_NiagaraRibbons' | 'MATUSAGE_NiagaraMeshParticles' | 'MATUSAGE_GeometryCache' | 'MATUSAGE_MAX';
+declare var EMaterialUsage : { MATUSAGE_SkeletalMesh:'MATUSAGE_SkeletalMesh',MATUSAGE_ParticleSprites:'MATUSAGE_ParticleSprites',MATUSAGE_BeamTrails:'MATUSAGE_BeamTrails',MATUSAGE_MeshParticles:'MATUSAGE_MeshParticles',MATUSAGE_StaticLighting:'MATUSAGE_StaticLighting',MATUSAGE_MorphTargets:'MATUSAGE_MorphTargets',MATUSAGE_SplineMesh:'MATUSAGE_SplineMesh',MATUSAGE_InstancedStaticMeshes:'MATUSAGE_InstancedStaticMeshes',MATUSAGE_GeometryCollections:'MATUSAGE_GeometryCollections',MATUSAGE_Clothing:'MATUSAGE_Clothing',MATUSAGE_NiagaraSprites:'MATUSAGE_NiagaraSprites',MATUSAGE_NiagaraRibbons:'MATUSAGE_NiagaraRibbons',MATUSAGE_NiagaraMeshParticles:'MATUSAGE_NiagaraMeshParticles',MATUSAGE_GeometryCache:'MATUSAGE_GeometryCache',MATUSAGE_MAX:'MATUSAGE_MAX', };
+declare class Material extends MaterialInterface { 
+	PhysMaterial: PhysicalMaterial;
+	DiffuseColor: ColorMaterialInput;
+	SpecularColor: ColorMaterialInput;
+	BaseColor: ColorMaterialInput;
+	Metallic: ScalarMaterialInput;
+	Specular: ScalarMaterialInput;
+	Roughness: ScalarMaterialInput;
+	Normal: VectorMaterialInput;
+	EmissiveColor: ColorMaterialInput;
+	Opacity: ScalarMaterialInput;
+	OpacityMask: ScalarMaterialInput;
+	MaterialDomain: EMaterialDomain;
+	BlendMode: EBlendMode;
+	DecalBlendMode: EDecalBlendMode;
+	MaterialDecalResponse: EMaterialDecalResponse;
+	ShadingModel: EMaterialShadingModel;
+	ShadingModels: MaterialShadingModelField;
+	UsedShadingModels: string;
+	OpacityMaskClipValue: number;
+	bCastDynamicShadowAsMasked: boolean;
+	WorldPositionOffset: VectorMaterialInput;
+	WorldDisplacement: VectorMaterialInput;
+	TessellationMultiplier: ScalarMaterialInput;
+	SubsurfaceColor: ColorMaterialInput;
+	ClearCoat: ScalarMaterialInput;
+	ClearCoatRoughness: ScalarMaterialInput;
+	AmbientOcclusion: ScalarMaterialInput;
+	Refraction: ScalarMaterialInput;
+	CustomizedUVs: Vector2MaterialInput;
+	MaterialAttributes: MaterialAttributesInput;
+	PixelDepthOffset: ScalarMaterialInput;
+	ShadingModelFromMaterialExpression: ShadingModelMaterialInput;
+	bEnableSeparateTranslucency: boolean;
+	bEnableMobileSeparateTranslucency: boolean;
+	bEnableResponsiveAA: boolean;
+	bScreenSpaceReflections: boolean;
+	bContactShadows: boolean;
+	TwoSided: boolean;
+	DitheredLODTransition: boolean;
+	DitherOpacityMask: boolean;
+	bAllowNegativeEmissiveColor: boolean;
+	NumCustomizedUVs: number;
+	TranslucencyLightingMode: ETranslucencyLightingMode;
+	TranslucencyDirectionalLightingIntensity: number;
+	AllowTranslucentCustomDepthWrites: boolean;
+	TranslucentShadowDensityScale: number;
+	TranslucentSelfShadowDensityScale: number;
+	TranslucentSelfShadowSecondDensityScale: number;
+	TranslucentSelfShadowSecondOpacity: number;
+	TranslucentBackscatteringExponent: number;
+	TranslucentMultipleScatteringExtinction: LinearColor;
+	TranslucentShadowStartOffset: number;
+	bDisableDepthTest: boolean;
+	bWriteOnlyAlpha: boolean;
+	bGenerateSphericalParticleNormals: boolean;
+	bTangentSpaceNormal: boolean;
+	bUseEmissiveForDynamicAreaLighting: boolean;
+	bBlockGI: boolean;
+	bUsedAsSpecialEngineMaterial: boolean;
+	bUsedWithSkeletalMesh: boolean;
+	bUsedWithEditorCompositing: boolean;
+	bUsedWithParticleSprites: boolean;
+	bUsedWithBeamTrails: boolean;
+	bUsedWithMeshParticles: boolean;
+	bUsedWithNiagaraSprites: boolean;
+	bUsedWithNiagaraRibbons: boolean;
+	bUsedWithNiagaraMeshParticles: boolean;
+	bUsedWithGeometryCache: boolean;
+	bUsedWithStaticLighting: boolean;
+	bUsedWithMorphTargets: boolean;
+	bUsedWithSplineMeshes: boolean;
+	bUsedWithInstancedStaticMeshes: boolean;
+	bUsedWithGeometryCollections: boolean;
+	bUsesDistortion: boolean;
+	bUsedWithClothing: boolean;
+	bUsedWithUI: boolean;
+	bAutomaticallySetUsageInEditor: boolean;
+	bFullyRough: boolean;
+	bUseFullPrecision: boolean;
+	bUseLightmapDirectionality: boolean;
+	bUseHQForwardReflections: boolean;
+	bUsePlanarForwardReflections: boolean;
+	bNormalCurvatureToRoughness: boolean;
+	D3D11TessellationMode: EMaterialTessellationMode;
+	bEnableCrackFreeDisplacement: boolean;
+	bEnableAdaptiveTessellation: boolean;
+	MaxDisplacement: number;
+	Wireframe: boolean;
+	bOutputVelocityOnBasePass: boolean;
+	EditorX: number;
+	EditorY: number;
+	EditorPitch: number;
+	EditorYaw: number;
+	Expressions: MaterialExpression[];
+	EditorComments: MaterialExpressionComment[];
+	ParameterGroupData: ParameterGroupData[];
+	MaterialFunctionInfos: MaterialFunctionInfo[];
+	MaterialParameterCollectionInfos: MaterialParameterCollectionInfo[];
+	bCanMaskedBeAssumedOpaque: boolean;
+	bIsMasked: boolean;
+	bIsPreviewMaterial: boolean;
+	bIsFunctionPreviewMaterial: boolean;
+	bUseMaterialAttributes: boolean;
+	bCastRayTracedShadows: boolean;
+	bUseTranslucencyVertexFog: boolean;
+	bComputeFogPerPixel: boolean;
+	bOutputTranslucentVelocity: boolean;
+	bAllowDevelopmentShaderCompile: boolean;
+	bIsMaterialEditorStatsMaterial: boolean;
+	UsageFlagWarnings: any;
+	BlendableLocation: EBlendableLocation;
+	BlendablePriority: number;
+	BlendableOutputAlpha: boolean;
+	bEnableStencilTest: boolean;
+	StencilCompare: EMaterialStencilCompare;
+	StencilRefValue: number;
+	RefractionMode: ERefractionMode;
+	RefractionDepthBias: number;
+	StateId: Guid;
+	CachedQualityLevelsUsed: boolean[];
+	ExpressionTextureReferences: UObject[];
+	ReferencedTextureGuids: Guid[];
+	static Load(ResourceName: string): Material;
+	static Find(Outer: UObject, ResourceName: string): Material;
+	static GetDefaultObject(): Material;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Material;
+	static C(Other: UObject | any): Material;
+	CreateMaterialExpression(ExpressionClass: UnrealEngineClass,NodePosX: number,NodePosY: number): MaterialExpression;
+	DeleteAllMaterialExpressions(): void;
+	DeleteMaterialExpression(Expression: MaterialExpression): void;
+	GetMaterialDefaultScalarParameterValue(ParameterName: string): number;
+	GetMaterialDefaultStaticSwitchParameterValue(ParameterName: string): boolean;
+	GetMaterialDefaultTextureParameterValue(ParameterName: string): Texture;
+	GetMaterialDefaultVectorParameterValue(ParameterName: string): LinearColor;
+	GetNumMaterialExpressions(): number;
+	HasMaterialUsage(Usage: EMaterialUsage): boolean;
+	LayoutMaterialExpressions(): void;
+	RecompileMaterial(): void;
+	SetMaterialUsage(Usage: EMaterialUsage,bNeedsRecompile?: boolean): {bNeedsRecompile: boolean, $: boolean};
+	static CreateMaterialExpression(Material: Material,ExpressionClass: UnrealEngineClass,NodePosX: number,NodePosY: number): MaterialExpression;
+	static DeleteAllMaterialExpressions(Material: Material): void;
+	static DeleteMaterialExpression(Material: Material,Expression: MaterialExpression): void;
+	static GetMaterialDefaultScalarParameterValue(Material: Material,ParameterName: string): number;
+	static GetMaterialDefaultStaticSwitchParameterValue(Material: Material,ParameterName: string): boolean;
+	static GetMaterialDefaultTextureParameterValue(Material: Material,ParameterName: string): Texture;
+	static GetMaterialDefaultVectorParameterValue(Material: Material,ParameterName: string): LinearColor;
+	static GetNumMaterialExpressions(Material: Material): number;
+	static HasMaterialUsage(Material: Material,Usage: EMaterialUsage): boolean;
+	static LayoutMaterialExpressions(Material: Material): void;
+	static RecompileMaterial(Material: Material): void;
+	static SetMaterialUsage(Material: Material,Usage: EMaterialUsage,bNeedsRecompile?: boolean): {bNeedsRecompile: boolean, $: boolean};
 }
 
-declare type EFontHinting = 'Default' | 'Auto' | 'AutoLight' | 'Monochrome' | 'None' | 'EFontHinting_MAX';
-declare var EFontHinting : { Default:'Default',Auto:'Auto',AutoLight:'AutoLight',Monochrome:'Monochrome',None:'None',EFontHinting_MAX:'EFontHinting_MAX', };
-declare type EFontLoadingPolicy = 'LazyLoad' | 'Stream' | 'Inline' | 'EFontLoadingPolicy_MAX';
-declare var EFontLoadingPolicy : { LazyLoad:'LazyLoad',Stream:'Stream',Inline:'Inline',EFontLoadingPolicy_MAX:'EFontLoadingPolicy_MAX', };
-declare class FontBulkData extends UObject { 
-	static Load(ResourceName: string): FontBulkData;
-	static Find(Outer: UObject, ResourceName: string): FontBulkData;
-	static GetDefaultObject(): FontBulkData;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FontBulkData;
-	static C(Other: UObject | any): FontBulkData;
+declare class CurveBase extends UObject { 
+	AssetImportData: AssetImportData;
+	ImportPath: string;
+	static Load(ResourceName: string): CurveBase;
+	static Find(Outer: UObject, ResourceName: string): CurveBase;
+	static GetDefaultObject(): CurveBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveBase;
+	GetValueRange(MinValue?: number,MaxValue?: number): {MinValue: number, MaxValue: number};
+	GetTimeRange(MinTime?: number,MaxTime?: number): {MinTime: number, MaxTime: number};
+	static C(Other: UObject | any): CurveBase;
 }
 
-declare class FontData { 
-	FontFilename: string;
-	Hinting: EFontHinting;
-	LoadingPolicy: EFontLoadingPolicy;
-	SubFaceIndex: number;
-	FontFaceAsset: UObject;
-	BulkDataPtr: FontBulkData;
-	FontData: number[];
-	clone() : FontData;
-	static C(Other: UObject | any): FontData;
+declare class KeyHandleMap { 
+	clone() : KeyHandleMap;
+	static C(Other: UObject | any): KeyHandleMap;
 }
 
-declare class TypefaceEntry { 
-	Name: string;
-	Font: FontData;
-	clone() : TypefaceEntry;
-	static C(Other: UObject | any): TypefaceEntry;
-}
-
-declare class Typeface { 
-	Fonts: TypefaceEntry[];
-	clone() : Typeface;
-	static C(Other: UObject | any): Typeface;
+declare class IndexedCurve { 
+	KeyHandlesToIndices: KeyHandleMap;
+	clone() : IndexedCurve;
+	static C(Other: UObject | any): IndexedCurve;
 }
 
-declare class CompositeFallbackFont { 
-	Typeface: Typeface;
-	ScalingFactor: number;
-	clone() : CompositeFallbackFont;
-	static C(Other: UObject | any): CompositeFallbackFont;
+declare type ERichCurveExtrapolation = 'RCCE_Cycle' | 'RCCE_CycleWithOffset' | 'RCCE_Oscillate' | 'RCCE_Linear' | 'RCCE_Constant' | 'RCCE_None' | 'RCCE_MAX';
+declare var ERichCurveExtrapolation : { RCCE_Cycle:'RCCE_Cycle',RCCE_CycleWithOffset:'RCCE_CycleWithOffset',RCCE_Oscillate:'RCCE_Oscillate',RCCE_Linear:'RCCE_Linear',RCCE_Constant:'RCCE_Constant',RCCE_None:'RCCE_None',RCCE_MAX:'RCCE_MAX', };
+declare class RealCurve extends IndexedCurve { 
+	PreInfinityExtrap: ERichCurveExtrapolation;
+	PostInfinityExtrap: ERichCurveExtrapolation;
+	DefaultValue: number;
+	clone() : RealCurve;
+	static C(Other: UObject | any): RealCurve;
 }
 
-declare type ERangeBoundTypes = 'Exclusive' | 'Inclusive' | 'Open' | 'ERangeBoundTypes_MAX';
-declare var ERangeBoundTypes : { Exclusive:'Exclusive',Inclusive:'Inclusive',Open:'Open',ERangeBoundTypes_MAX:'ERangeBoundTypes_MAX', };
-declare class Int32RangeBound { 
-	Type: ERangeBoundTypes;
+declare type ERichCurveInterpMode = 'RCIM_Linear' | 'RCIM_Constant' | 'RCIM_Cubic' | 'RCIM_None' | 'RCIM_MAX';
+declare var ERichCurveInterpMode : { RCIM_Linear:'RCIM_Linear',RCIM_Constant:'RCIM_Constant',RCIM_Cubic:'RCIM_Cubic',RCIM_None:'RCIM_None',RCIM_MAX:'RCIM_MAX', };
+declare type ERichCurveTangentMode = 'RCTM_Auto' | 'RCTM_User' | 'RCTM_Break' | 'RCTM_None' | 'RCTM_MAX';
+declare var ERichCurveTangentMode : { RCTM_Auto:'RCTM_Auto',RCTM_User:'RCTM_User',RCTM_Break:'RCTM_Break',RCTM_None:'RCTM_None',RCTM_MAX:'RCTM_MAX', };
+declare type ERichCurveTangentWeightMode = 'RCTWM_WeightedNone' | 'RCTWM_WeightedArrive' | 'RCTWM_WeightedLeave' | 'RCTWM_WeightedBoth' | 'RCTWM_MAX';
+declare var ERichCurveTangentWeightMode : { RCTWM_WeightedNone:'RCTWM_WeightedNone',RCTWM_WeightedArrive:'RCTWM_WeightedArrive',RCTWM_WeightedLeave:'RCTWM_WeightedLeave',RCTWM_WeightedBoth:'RCTWM_WeightedBoth',RCTWM_MAX:'RCTWM_MAX', };
+declare class RichCurveKey { 
+	InterpMode: ERichCurveInterpMode;
+	TangentMode: ERichCurveTangentMode;
+	TangentWeightMode: ERichCurveTangentWeightMode;
+	Time: number;
 	Value: number;
-	clone() : Int32RangeBound;
-	static C(Other: UObject | any): Int32RangeBound;
+	ArriveTangent: number;
+	ArriveTangentWeight: number;
+	LeaveTangent: number;
+	LeaveTangentWeight: number;
+	clone() : RichCurveKey;
+	static C(Other: UObject | any): RichCurveKey;
 }
 
-declare class Int32Range { 
-	LowerBound: Int32RangeBound;
-	UpperBound: Int32RangeBound;
-	clone() : Int32Range;
-	static C(Other: UObject | any): Int32Range;
+declare class RichCurve extends RealCurve { 
+	Keys: RichCurveKey[];
+	clone() : RichCurve;
+	static C(Other: UObject | any): RichCurve;
 }
 
-declare class CompositeSubFont extends CompositeFallbackFont { 
-	CharacterRanges: Int32Range[];
-	Cultures: string;
-	EditorName: string;
-	clone() : CompositeSubFont;
-	static C(Other: UObject | any): CompositeSubFont;
+declare class CurveLinearColor extends CurveBase { 
+	FloatCurves: RichCurve;
+	AdjustHue: number;
+	AdjustSaturation: number;
+	AdjustBrightness: number;
+	AdjustBrightnessCurve: number;
+	AdjustVibrance: number;
+	AdjustMinAlpha: number;
+	AdjustMaxAlpha: number;
+	static Load(ResourceName: string): CurveLinearColor;
+	static Find(Outer: UObject, ResourceName: string): CurveLinearColor;
+	static GetDefaultObject(): CurveLinearColor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveLinearColor;
+	GetLinearColorValue(InTime: number): LinearColor;
+	GetClampedLinearColorValue(InTime: number): LinearColor;
+	static C(Other: UObject | any): CurveLinearColor;
 }
 
-declare class CompositeFont { 
-	DefaultTypeface: Typeface;
-	FallbackTypeface: CompositeFallbackFont;
-	SubTypefaces: CompositeSubFont[];
-	clone() : CompositeFont;
-	static C(Other: UObject | any): CompositeFont;
+declare type TextureAddress = 'TA_Wrap' | 'TA_Clamp' | 'TA_Mirror' | 'TA_MAX';
+declare var TextureAddress : { TA_Wrap:'TA_Wrap',TA_Clamp:'TA_Clamp',TA_Mirror:'TA_Mirror',TA_MAX:'TA_MAX', };
+declare type EImportanceWeight = 'Luminance' | 'Red' | 'Green' | 'Blue' | 'Alpha' | 'EImportanceWeight_MAX';
+declare var EImportanceWeight : { Luminance:'Luminance',Red:'Red',Green:'Green',Blue:'Blue',Alpha:'Alpha',EImportanceWeight_MAX:'EImportanceWeight_MAX', };
+declare class ImportanceTexture { 
+	Size: IntPoint;
+	NumMips: number;
+	MarginalCDF: number[];
+	ConditionalCDF: number[];
+	TextureData: Color[];
+	Texture: any;
+	Weighting: EImportanceWeight;
+	clone() : ImportanceTexture;
+	static C(Other: UObject | any): ImportanceTexture;
+	BreakImportanceTexture(Texture?: Texture2D,WeightingFunc?: EImportanceWeight): {Texture: Texture2D, WeightingFunc: EImportanceWeight};
+	ImportanceSample(Rand: Vector2D,Samples: number,Intensity: number,SamplePosition?: Vector2D,SampleColor?: LinearColor,SampleIntensity?: number,SampleSize?: number): {SamplePosition: Vector2D, SampleColor: LinearColor, SampleIntensity: number, SampleSize: number};
+	static BreakImportanceTexture(ImportanceTexture: ImportanceTexture,Texture?: Texture2D,WeightingFunc?: EImportanceWeight): {Texture: Texture2D, WeightingFunc: EImportanceWeight};
+	static ImportanceSample(Texture: ImportanceTexture,Rand: Vector2D,Samples: number,Intensity: number,SamplePosition?: Vector2D,SampleColor?: LinearColor,SampleIntensity?: number,SampleSize?: number): {SamplePosition: Vector2D, SampleColor: LinearColor, SampleIntensity: number, SampleSize: number};
 }
 
-declare class Font extends UObject { 
-	FontCacheType: EFontCacheType;
-	Characters: FontCharacter[];
-	Textures: Texture2D[];
-	IsRemapped: number;
-	EmScale: number;
-	Ascent: number;
-	Descent: number;
-	Leading: number;
-	Kerning: number;
-	ImportOptions: FontImportOptionsData;
-	NumCharacters: number;
-	MaxCharHeight: number[];
-	ScalingFactor: number;
-	LegacyFontSize: number;
-	LegacyFontName: string;
-	CompositeFont: CompositeFont;
-	static Load(ResourceName: string): Font;
-	static Find(Outer: UObject, ResourceName: string): Font;
-	static GetDefaultObject(): Font;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Font;
-	static C(Other: UObject | any): Font;
+declare class Margin { 
+	Left: number;
+	Top: number;
+	Right: number;
+	Bottom: number;
+	clone() : Margin;
+	static C(Other: UObject | any): Margin;
 }
 
-declare class FontParameterValue { 
-	ParameterName: string;
-	ParameterInfo: MaterialParameterInfo;
-	FontValue: Font;
-	FontPage: number;
-	ExpressionGUID: Guid;
-	clone() : FontParameterValue;
-	static C(Other: UObject | any): FontParameterValue;
+declare type ESlateColorStylingMode = 'UseColor_Specified' | 'UseColor_Specified_Link' | 'UseColor_Foreground' | 'UseColor_Foreground_Subdued' | 'UseColor_MAX';
+declare var ESlateColorStylingMode : { UseColor_Specified:'UseColor_Specified',UseColor_Specified_Link:'UseColor_Specified_Link',UseColor_Foreground:'UseColor_Foreground',UseColor_Foreground_Subdued:'UseColor_Foreground_Subdued',UseColor_MAX:'UseColor_MAX', };
+declare class SlateColor { 
+	SpecifiedColor: LinearColor;
+	ColorUseRule: ESlateColorStylingMode;
+	clone() : SlateColor;
+	static C(Other: UObject | any): SlateColor;
+	static SlateColor_UseForeground(): SlateColor;
+	static SlateColor_UseSubduedForeground(): SlateColor;
 }
 
-declare class MaterialInstanceBasePropertyOverrides { 
-	bOverride_OpacityMaskClipValue: boolean;
-	bOverride_BlendMode: boolean;
-	bOverride_ShadingModel: boolean;
-	bOverride_DitheredLODTransition: boolean;
-	bOverride_CastDynamicShadowAsMasked: boolean;
-	bOverride_TwoSided: boolean;
-	OpacityMaskClipValue: number;
-	BlendMode: EBlendMode;
-	ShadingModel: EMaterialShadingModel;
-	TwoSided: boolean;
-	DitheredLODTransition: boolean;
-	bCastDynamicShadowAsMasked: boolean;
-	clone() : MaterialInstanceBasePropertyOverrides;
-	static C(Other: UObject | any): MaterialInstanceBasePropertyOverrides;
+declare type ESlateBrushDrawType = 'NoDrawType' | 'Box' | 'Border' | 'Image' | 'ESlateBrushDrawType_MAX';
+declare var ESlateBrushDrawType : { NoDrawType:'NoDrawType',Box:'Box',Border:'Border',Image:'Image',ESlateBrushDrawType_MAX:'ESlateBrushDrawType_MAX', };
+declare type ESlateBrushTileType = 'NoTile' | 'Horizontal' | 'Vertical' | 'Both' | 'ESlateBrushTileType_MAX';
+declare var ESlateBrushTileType : { NoTile:'NoTile',Horizontal:'Horizontal',Vertical:'Vertical',Both:'Both',ESlateBrushTileType_MAX:'ESlateBrushTileType_MAX', };
+declare type ESlateBrushMirrorType = 'NoMirror' | 'Horizontal' | 'Vertical' | 'Both' | 'ESlateBrushMirrorType_MAX';
+declare var ESlateBrushMirrorType : { NoMirror:'NoMirror',Horizontal:'Horizontal',Vertical:'Vertical',Both:'Both',ESlateBrushMirrorType_MAX:'ESlateBrushMirrorType_MAX', };
+declare type ESlateBrushImageType = 'NoImage' | 'FullColor' | 'Linear' | 'ESlateBrushImageType_MAX';
+declare var ESlateBrushImageType : { NoImage:'NoImage',FullColor:'FullColor',Linear:'Linear',ESlateBrushImageType_MAX:'ESlateBrushImageType_MAX', };
+declare class SlateBrush { 
+	ImageSize: Vector2D;
+	Margin: Margin;
+	Tint: LinearColor;
+	TintColor: SlateColor;
+	ResourceObject: UObject;
+	ResourceName: string;
+	UVRegion: Box2D;
+	DrawAs: ESlateBrushDrawType;
+	Tiling: ESlateBrushTileType;
+	Mirroring: ESlateBrushMirrorType;
+	ImageType: ESlateBrushImageType;
+	bIsDynamicallyLoaded: boolean;
+	bHasUObject: boolean;
+	clone() : SlateBrush;
+	static C(Other: UObject | any): SlateBrush;
+	GetBrushResource(): UObject;
+	GetBrushResourceAsMaterial(): MaterialInterface;
+	GetBrushResourceAsTexture2D(): Texture2D;
+	GetDynamicMaterial(): {Brush: SlateBrush, $: MaterialInstanceDynamic};
+	SetBrushResourceToMaterial(Material?: MaterialInterface): {Brush: SlateBrush};
+	SetBrushResourceToTexture(Texture?: Texture2D): {Brush: SlateBrush};
+	EqualEqual_SlateBrush(B: SlateBrush): boolean;
+	static GetBrushResource(Brush: SlateBrush): UObject;
+	static GetBrushResourceAsMaterial(Brush: SlateBrush): MaterialInterface;
+	static GetBrushResourceAsTexture2D(Brush: SlateBrush): Texture2D;
+	static GetDynamicMaterial(Brush?: SlateBrush): {Brush: SlateBrush, $: MaterialInstanceDynamic};
+	static SetBrushResourceToMaterial(Brush?: SlateBrush,Material?: MaterialInterface): {Brush: SlateBrush};
+	static SetBrushResourceToTexture(Brush?: SlateBrush,Texture?: Texture2D): {Brush: SlateBrush};
+	static EqualEqual_SlateBrush(A: SlateBrush,B: SlateBrush): boolean;
+	static NoResourceBrush(): SlateBrush;
 }
 
-declare class StaticSwitchParameter { 
-	ParameterInfo: MaterialParameterInfo;
-	Value: boolean;
-	bOverride: boolean;
-	ExpressionGUID: Guid;
-	clone() : StaticSwitchParameter;
-	static C(Other: UObject | any): StaticSwitchParameter;
+declare class Texture2D extends Texture { 
+	LevelIndex: number;
+	FirstResourceMemMip: number;
+	bTemporarilyDisableStreaming: boolean;
+	bHasBeenPaintedInEditor: boolean;
+	AddressX: TextureAddress;
+	AddressY: TextureAddress;
+	ImportedSize: IntPoint;
+	static Load(ResourceName: string): Texture2D;
+	static Find(Outer: UObject, ResourceName: string): Texture2D;
+	static GetDefaultObject(): Texture2D;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Texture2D;
+	Blueprint_GetSizeY(): number;
+	Blueprint_GetSizeX(): number;
+	static C(Other: UObject | any): Texture2D;
+	AddLoadingSplashScreen(TranslationInMeters: Vector,Rotation: Rotator,SizeInMeters: Vector2D,DeltaRotation: Rotator,bClearBeforeAdd: boolean): void;
+	ShowLoadingIcon(): void;
+	MakeImportanceTexture(WeightingFunc: EImportanceWeight): ImportanceTexture;
+	MakeBrushFromTexture(Width: number,Height: number): SlateBrush;
+	static AddLoadingSplashScreen(Texture: Texture2D,TranslationInMeters: Vector,Rotation: Rotator,SizeInMeters: Vector2D,DeltaRotation: Rotator,bClearBeforeAdd: boolean): void;
+	static ShowLoadingIcon(Texture: Texture2D): void;
+	static MakeImportanceTexture(Texture: Texture2D,WeightingFunc: EImportanceWeight): ImportanceTexture;
+	static MakeBrushFromTexture(Texture: Texture2D,Width: number,Height: number): SlateBrush;
 }
 
-declare class StaticComponentMaskParameter { 
-	ParameterInfo: MaterialParameterInfo;
-	R: boolean;
-	G: boolean;
-	B: boolean;
-	A: boolean;
-	bOverride: boolean;
-	ExpressionGUID: Guid;
-	clone() : StaticComponentMaskParameter;
-	static C(Other: UObject | any): StaticComponentMaskParameter;
+declare class CurveLinearColorAtlas extends Texture2D { 
+	bIsDirty: boolean;
+	TextureSize: any;
+	GradientPixelSize: any;
+	GradientCurves: CurveLinearColor[];
+	static Load(ResourceName: string): CurveLinearColorAtlas;
+	static Find(Outer: UObject, ResourceName: string): CurveLinearColorAtlas;
+	static GetDefaultObject(): CurveLinearColorAtlas;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveLinearColorAtlas;
+	GetCurvePosition(InCurve: CurveLinearColor,Position?: number): {Position: number, $: boolean};
+	static C(Other: UObject | any): CurveLinearColorAtlas;
 }
 
-declare class StaticTerrainLayerWeightParameter { 
-	ParameterInfo: MaterialParameterInfo;
-	bOverride: boolean;
+declare class ScalarParameterAtlasInstanceData { 
+	bIsUsedAsAtlasPosition: boolean;
+	Curve: CurveLinearColor;
+	Atlas: CurveLinearColorAtlas;
+	clone() : ScalarParameterAtlasInstanceData;
+	static C(Other: UObject | any): ScalarParameterAtlasInstanceData;
+}
+
+declare type EMaterialParameterAssociation = 'LayerParameter' | 'BlendParameter' | 'GlobalParameter' | 'EMaterialParameterAssociation_MAX';
+declare var EMaterialParameterAssociation : { LayerParameter:'LayerParameter',BlendParameter:'BlendParameter',GlobalParameter:'GlobalParameter',EMaterialParameterAssociation_MAX:'EMaterialParameterAssociation_MAX', };
+declare class MaterialParameterInfo { 
+	Name: string;
+	Association: EMaterialParameterAssociation;
+	index: number;
+	ParameterLocation: SoftObjectPath;
+	clone() : MaterialParameterInfo;
+	static C(Other: UObject | any): MaterialParameterInfo;
+}
+
+declare class ScalarParameterValue { 
+	ParameterName: string;
+	AtlasData: ScalarParameterAtlasInstanceData;
+	ParameterInfo: MaterialParameterInfo;
+	ParameterValue: number;
+	ExpressionGUID: Guid;
+	clone() : ScalarParameterValue;
+	static C(Other: UObject | any): ScalarParameterValue;
+}
+
+declare class VectorParameterValue { 
+	ParameterName: string;
+	ParameterInfo: MaterialParameterInfo;
+	ParameterValue: LinearColor;
+	ExpressionGUID: Guid;
+	clone() : VectorParameterValue;
+	static C(Other: UObject | any): VectorParameterValue;
+}
+
+declare class TextureParameterValue { 
+	ParameterName: string;
+	ParameterInfo: MaterialParameterInfo;
+	ParameterValue: Texture;
+	ExpressionGUID: Guid;
+	clone() : TextureParameterValue;
+	static C(Other: UObject | any): TextureParameterValue;
+}
+
+declare type EFontCacheType = 'Offline' | 'Runtime' | 'EFontCacheType_MAX';
+declare var EFontCacheType : { Offline:'Offline',Runtime:'Runtime',EFontCacheType_MAX:'EFontCacheType_MAX', };
+declare class FontCharacter { 
+	StartU: number;
+	StartV: number;
+	USize: number;
+	VSize: number;
+	TextureIndex: number;
+	VerticalOffset: number;
+	clone() : FontCharacter;
+	static C(Other: UObject | any): FontCharacter;
+}
+
+declare type EFontImportCharacterSet = 'FontICS_Default' | 'FontICS_Ansi' | 'FontICS_Symbol' | 'FontICS_MAX';
+declare var EFontImportCharacterSet : { FontICS_Default:'FontICS_Default',FontICS_Ansi:'FontICS_Ansi',FontICS_Symbol:'FontICS_Symbol',FontICS_MAX:'FontICS_MAX', };
+declare class FontImportOptionsData { 
+	FontName: string;
+	Height: number;
+	bEnableAntialiasing: boolean;
+	bEnableBold: boolean;
+	bEnableItalic: boolean;
+	bEnableUnderline: boolean;
+	bAlphaOnly: boolean;
+	CharacterSet: EFontImportCharacterSet;
+	Chars: string;
+	UnicodeRange: string;
+	CharsFilePath: string;
+	CharsFileWildcard: string;
+	bCreatePrintableOnly: boolean;
+	bIncludeASCIIRange: boolean;
+	ForegroundColor: LinearColor;
+	bEnableDropShadow: boolean;
+	TexturePageWidth: number;
+	TexturePageMaxHeight: number;
+	XPadding: number;
+	YPadding: number;
+	ExtendBoxTop: number;
+	ExtendBoxBottom: number;
+	ExtendBoxRight: number;
+	ExtendBoxLeft: number;
+	bEnableLegacyMode: boolean;
+	Kerning: number;
+	bUseDistanceFieldAlpha: boolean;
+	DistanceFieldScaleFactor: number;
+	DistanceFieldScanRadiusScale: number;
+	clone() : FontImportOptionsData;
+	static C(Other: UObject | any): FontImportOptionsData;
+}
+
+declare type EFontHinting = 'Default' | 'Auto' | 'AutoLight' | 'Monochrome' | 'None' | 'EFontHinting_MAX';
+declare var EFontHinting : { Default:'Default',Auto:'Auto',AutoLight:'AutoLight',Monochrome:'Monochrome',None:'None',EFontHinting_MAX:'EFontHinting_MAX', };
+declare type EFontLoadingPolicy = 'LazyLoad' | 'Stream' | 'Inline' | 'EFontLoadingPolicy_MAX';
+declare var EFontLoadingPolicy : { LazyLoad:'LazyLoad',Stream:'Stream',Inline:'Inline',EFontLoadingPolicy_MAX:'EFontLoadingPolicy_MAX', };
+declare class FontBulkData extends UObject { 
+	static Load(ResourceName: string): FontBulkData;
+	static Find(Outer: UObject, ResourceName: string): FontBulkData;
+	static GetDefaultObject(): FontBulkData;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FontBulkData;
+	static C(Other: UObject | any): FontBulkData;
+}
+
+declare class FontData { 
+	FontFilename: string;
+	Hinting: EFontHinting;
+	LoadingPolicy: EFontLoadingPolicy;
+	SubFaceIndex: number;
+	FontFaceAsset: UObject;
+	BulkDataPtr: FontBulkData;
+	FontData: number[];
+	clone() : FontData;
+	static C(Other: UObject | any): FontData;
+}
+
+declare class TypefaceEntry { 
+	Name: string;
+	Font: FontData;
+	clone() : TypefaceEntry;
+	static C(Other: UObject | any): TypefaceEntry;
+}
+
+declare class Typeface { 
+	Fonts: TypefaceEntry[];
+	clone() : Typeface;
+	static C(Other: UObject | any): Typeface;
+}
+
+declare class CompositeFallbackFont { 
+	Typeface: Typeface;
+	ScalingFactor: number;
+	clone() : CompositeFallbackFont;
+	static C(Other: UObject | any): CompositeFallbackFont;
+}
+
+declare type ERangeBoundTypes = 'Exclusive' | 'Inclusive' | 'Open' | 'ERangeBoundTypes_MAX';
+declare var ERangeBoundTypes : { Exclusive:'Exclusive',Inclusive:'Inclusive',Open:'Open',ERangeBoundTypes_MAX:'ERangeBoundTypes_MAX', };
+declare class Int32RangeBound { 
+	Type: ERangeBoundTypes;
+	Value: number;
+	clone() : Int32RangeBound;
+	static C(Other: UObject | any): Int32RangeBound;
+}
+
+declare class Int32Range { 
+	LowerBound: Int32RangeBound;
+	UpperBound: Int32RangeBound;
+	clone() : Int32Range;
+	static C(Other: UObject | any): Int32Range;
+}
+
+declare class CompositeSubFont extends CompositeFallbackFont { 
+	CharacterRanges: Int32Range[];
+	Cultures: string;
+	EditorName: string;
+	clone() : CompositeSubFont;
+	static C(Other: UObject | any): CompositeSubFont;
+}
+
+declare class CompositeFont { 
+	DefaultTypeface: Typeface;
+	FallbackTypeface: CompositeFallbackFont;
+	SubTypefaces: CompositeSubFont[];
+	clone() : CompositeFont;
+	static C(Other: UObject | any): CompositeFont;
+}
+
+declare class Font extends UObject { 
+	FontCacheType: EFontCacheType;
+	Characters: FontCharacter[];
+	Textures: Texture2D[];
+	IsRemapped: number;
+	EmScale: number;
+	Ascent: number;
+	Descent: number;
+	Leading: number;
+	Kerning: number;
+	ImportOptions: FontImportOptionsData;
+	NumCharacters: number;
+	MaxCharHeight: number[];
+	ScalingFactor: number;
+	LegacyFontSize: number;
+	LegacyFontName: string;
+	CompositeFont: CompositeFont;
+	static Load(ResourceName: string): Font;
+	static Find(Outer: UObject, ResourceName: string): Font;
+	static GetDefaultObject(): Font;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Font;
+	static C(Other: UObject | any): Font;
+}
+
+declare class FontParameterValue { 
+	ParameterName: string;
+	ParameterInfo: MaterialParameterInfo;
+	FontValue: Font;
+	FontPage: number;
+	ExpressionGUID: Guid;
+	clone() : FontParameterValue;
+	static C(Other: UObject | any): FontParameterValue;
+}
+
+declare class MaterialInstanceBasePropertyOverrides { 
+	bOverride_OpacityMaskClipValue: boolean;
+	bOverride_BlendMode: boolean;
+	bOverride_ShadingModel: boolean;
+	bOverride_DitheredLODTransition: boolean;
+	bOverride_CastDynamicShadowAsMasked: boolean;
+	bOverride_TwoSided: boolean;
+	TwoSided: boolean;
+	DitheredLODTransition: boolean;
+	bCastDynamicShadowAsMasked: boolean;
+	BlendMode: EBlendMode;
+	ShadingModel: EMaterialShadingModel;
+	OpacityMaskClipValue: number;
+	clone() : MaterialInstanceBasePropertyOverrides;
+	static C(Other: UObject | any): MaterialInstanceBasePropertyOverrides;
+}
+
+declare class StaticSwitchParameter { 
+	ParameterInfo: MaterialParameterInfo;
+	Value: boolean;
+	bOverride: boolean;
+	ExpressionGUID: Guid;
+	clone() : StaticSwitchParameter;
+	static C(Other: UObject | any): StaticSwitchParameter;
+}
+
+declare class StaticComponentMaskParameter { 
+	ParameterInfo: MaterialParameterInfo;
+	R: boolean;
+	G: boolean;
+	B: boolean;
+	A: boolean;
+	bOverride: boolean;
+	ExpressionGUID: Guid;
+	clone() : StaticComponentMaskParameter;
+	static C(Other: UObject | any): StaticComponentMaskParameter;
+}
+
+declare class StaticTerrainLayerWeightParameter { 
+	ParameterInfo: MaterialParameterInfo;
+	bOverride: boolean;
 	ExpressionGUID: Guid;
 	WeightmapIndex: number;
 	bWeightBasedBlend: boolean;
@@ -2271,7 +2613,7 @@ declare class MaterialInstance extends MaterialInterface {
 	FontParameterValues: FontParameterValue[];
 	bOverrideBaseProperties: boolean;
 	BasePropertyOverrides: MaterialInstanceBasePropertyOverrides;
-	PermutationTextureReferences: Texture[];
+	PermutationTextureReferences: UObject[];
 	ReferencedTextureGuids: Guid[];
 	StaticParameters: StaticParameterSet;
 	static Load(ResourceName: string): MaterialInstance;
@@ -2327,6 +2669,16 @@ declare class DecalComponent extends SceneComponent {
 	static C(Other: UObject | any): DecalComponent;
 }
 
+declare class AssetData { 
+	ObjectPath: string;
+	PackageName: string;
+	PackagePath: string;
+	AssetName: string;
+	AssetClass: string;
+	clone() : AssetData;
+	static C(Other: UObject | any): AssetData;
+}
+
 declare class MaterialInterface extends UObject { 
 	SubsurfaceProfile: SubsurfaceProfile;
 	LightmassSettings: LightmassMaterialInterfaceSettings;
@@ -2334,9 +2686,11 @@ declare class MaterialInterface extends UObject {
 	TextureStreamingDataVersion: number;
 	TextureStreamingData: MaterialTextureInfo[];
 	AssetUserData: AssetUserData[];
+	TextureStreamingDataMissingEntries: MaterialTextureInfo[];
 	PreviewMesh: SoftObjectPath;
 	ThumbnailInfo: ThumbnailInfo;
 	LayerParameterExpansion: any;
+	ParameterOverviewExpansion: any;
 	AssetImportData: AssetImportData;
 	LightingGuid: Guid;
 	static Load(ResourceName: string): MaterialInterface;
@@ -2349,8 +2703,18 @@ declare class MaterialInterface extends UObject {
 	static C(Other: UObject | any): MaterialInterface;
 	SpawnDecalAttached(DecalSize: Vector,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,LifeSpan: number): DecalComponent;
 	MakeBrushFromMaterial(Width: number,Height: number): SlateBrush;
+	GetChildInstances(ChildInstances?: AssetData[]): {ChildInstances: AssetData[]};
+	GetScalarParameterNames(ParameterNames?: string[]): {ParameterNames: string[]};
+	GetStaticSwitchParameterNames(ParameterNames?: string[]): {ParameterNames: string[]};
+	GetTextureParameterNames(ParameterNames?: string[]): {ParameterNames: string[]};
+	GetVectorParameterNames(ParameterNames?: string[]): {ParameterNames: string[]};
 	static SpawnDecalAttached(DecalMaterial: MaterialInterface,DecalSize: Vector,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,LifeSpan: number): DecalComponent;
 	static MakeBrushFromMaterial(Material: MaterialInterface,Width: number,Height: number): SlateBrush;
+	static GetChildInstances(Parent: MaterialInterface,ChildInstances?: AssetData[]): {ChildInstances: AssetData[]};
+	static GetScalarParameterNames(Material: MaterialInterface,ParameterNames?: string[]): {ParameterNames: string[]};
+	static GetStaticSwitchParameterNames(Material: MaterialInterface,ParameterNames?: string[]): {ParameterNames: string[]};
+	static GetTextureParameterNames(Material: MaterialInterface,ParameterNames?: string[]): {ParameterNames: string[]};
+	static GetVectorParameterNames(Material: MaterialInterface,ParameterNames?: string[]): {ParameterNames: string[]};
 }
 
 declare type EAutoReceiveInput = 'Disabled' | 'Player0' | 'Player1' | 'Player2' | 'Player3' | 'Player4' | 'Player5' | 'Player6' | 'Player7' | 'EAutoReceiveInput_MAX';
@@ -2459,6 +2823,7 @@ declare class DamageType extends UObject {
 
 declare class MeshComponent extends PrimitiveComponent { 
 	OverrideMaterials: MaterialInterface[];
+	bEnableMaterialParameterCaching: boolean;
 	static Load(ResourceName: string): MeshComponent;
 	static Find(Outer: UObject, ResourceName: string): MeshComponent;
 	static GetDefaultObject(): MeshComponent;
@@ -2678,6 +3043,8 @@ declare class PerPlatformFloat {
 	static C(Other: UObject | any): PerPlatformFloat;
 }
 
+declare type SkeletalMeshTerminationCriterion = 'SMTC_NumOfTriangles' | 'SMTC_NumOfVerts' | 'SMTC_TriangleOrVert' | 'SMTC_AbsNumOfTriangles' | 'SMTC_AbsNumOfVerts' | 'SMTC_AbsTriangleOrVert' | 'SMTC_MAX';
+declare var SkeletalMeshTerminationCriterion : { SMTC_NumOfTriangles:'SMTC_NumOfTriangles',SMTC_NumOfVerts:'SMTC_NumOfVerts',SMTC_TriangleOrVert:'SMTC_TriangleOrVert',SMTC_AbsNumOfTriangles:'SMTC_AbsNumOfTriangles',SMTC_AbsNumOfVerts:'SMTC_AbsNumOfVerts',SMTC_AbsTriangleOrVert:'SMTC_AbsTriangleOrVert',SMTC_MAX:'SMTC_MAX', };
 declare type SkeletalMeshOptimizationType = 'SMOT_NumOfTriangles' | 'SMOT_MaxDeviation' | 'SMOT_TriangleOrDeviation' | 'SMOT_MAX';
 declare var SkeletalMeshOptimizationType : { SMOT_NumOfTriangles:'SMOT_NumOfTriangles',SMOT_MaxDeviation:'SMOT_MaxDeviation',SMOT_TriangleOrDeviation:'SMOT_TriangleOrDeviation',SMOT_MAX:'SMOT_MAX', };
 declare type SkeletalMeshOptimizationImportance = 'SMOI_Off' | 'SMOI_Lowest' | 'SMOI_Low' | 'SMOI_Normal' | 'SMOI_High' | 'SMOI_Highest' | 'SMOI_MAX';
@@ -2778,8 +3145,6 @@ declare class AnimCompositeBase extends AnimSequenceBase {
 	static C(Other: UObject | any): AnimCompositeBase;
 }
 
-declare type EAlphaBlendOption = 'Linear' | 'Cubic' | 'HermiteCubic' | 'Sinusoidal' | 'QuadraticInOut' | 'CubicInOut' | 'QuarticInOut' | 'QuinticInOut' | 'CircularIn' | 'CircularOut' | 'CircularInOut' | 'ExpIn' | 'ExpOut' | 'ExpInOut' | 'Custom' | 'EAlphaBlendOption_MAX';
-declare var EAlphaBlendOption : { Linear:'Linear',Cubic:'Cubic',HermiteCubic:'HermiteCubic',Sinusoidal:'Sinusoidal',QuadraticInOut:'QuadraticInOut',CubicInOut:'CubicInOut',QuarticInOut:'QuarticInOut',QuinticInOut:'QuinticInOut',CircularIn:'CircularIn',CircularOut:'CircularOut',CircularInOut:'CircularInOut',ExpIn:'ExpIn',ExpOut:'ExpOut',ExpInOut:'ExpInOut',Custom:'Custom',EAlphaBlendOption_MAX:'EAlphaBlendOption_MAX', };
 declare class CurveFloat extends CurveBase { 
 	FloatCurve: RichCurve;
 	bIsEventCurve: boolean;
@@ -2791,10 +3156,12 @@ declare class CurveFloat extends CurveBase {
 	static C(Other: UObject | any): CurveFloat;
 }
 
+declare type EAlphaBlendOption = 'Linear' | 'Cubic' | 'HermiteCubic' | 'Sinusoidal' | 'QuadraticInOut' | 'CubicInOut' | 'QuarticInOut' | 'QuinticInOut' | 'CircularIn' | 'CircularOut' | 'CircularInOut' | 'ExpIn' | 'ExpOut' | 'ExpInOut' | 'Custom' | 'EAlphaBlendOption_MAX';
+declare var EAlphaBlendOption : { Linear:'Linear',Cubic:'Cubic',HermiteCubic:'HermiteCubic',Sinusoidal:'Sinusoidal',QuadraticInOut:'QuadraticInOut',CubicInOut:'CubicInOut',QuarticInOut:'QuarticInOut',QuinticInOut:'QuinticInOut',CircularIn:'CircularIn',CircularOut:'CircularOut',CircularInOut:'CircularInOut',ExpIn:'ExpIn',ExpOut:'ExpOut',ExpInOut:'ExpInOut',Custom:'Custom',EAlphaBlendOption_MAX:'EAlphaBlendOption_MAX', };
 declare class AlphaBlend { 
-	BlendOption: EAlphaBlendOption;
 	CustomCurve: CurveFloat;
 	BlendTime: number;
+	BlendOption: EAlphaBlendOption;
 	clone() : AlphaBlend;
 	static C(Other: UObject | any): AlphaBlend;
 }
@@ -3060,6 +3427,23 @@ declare class AnimCompress extends UObject {
 	static C(Other: UObject | any): AnimCompress;
 }
 
+declare class AnimCurveCompressionCodec extends UObject { 
+	static Load(ResourceName: string): AnimCurveCompressionCodec;
+	static Find(Outer: UObject, ResourceName: string): AnimCurveCompressionCodec;
+	static GetDefaultObject(): AnimCurveCompressionCodec;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCurveCompressionCodec;
+	static C(Other: UObject | any): AnimCurveCompressionCodec;
+}
+
+declare class AnimCurveCompressionSettings extends UObject { 
+	Codec: AnimCurveCompressionCodec;
+	static Load(ResourceName: string): AnimCurveCompressionSettings;
+	static Find(Outer: UObject, ResourceName: string): AnimCurveCompressionSettings;
+	static GetDefaultObject(): AnimCurveCompressionSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCurveCompressionSettings;
+	static C(Other: UObject | any): AnimCurveCompressionSettings;
+}
+
 declare type EAdditiveAnimationType = 'AAT_None' | 'AAT_LocalSpaceBase' | 'AAT_RotationOffsetMeshSpace' | 'AAT_MAX';
 declare var EAdditiveAnimationType : { AAT_None:'AAT_None',AAT_LocalSpaceBase:'AAT_LocalSpaceBase',AAT_RotationOffsetMeshSpace:'AAT_RotationOffsetMeshSpace',AAT_MAX:'AAT_MAX', };
 declare type EAdditiveBasePoseType = 'ABPT_None' | 'ABPT_RefPose' | 'ABPT_AnimScaled' | 'ABPT_AnimFrame' | 'ABPT_MAX';
@@ -3069,18 +3453,19 @@ declare var EAnimInterpolationType : { Linear:'Linear',Step:'Step',EAnimInterpol
 declare type ERawCurveTrackTypes = 'RCT_Float' | 'RCT_Vector' | 'RCT_Transform' | 'RCT_MAX';
 declare var ERawCurveTrackTypes : { RCT_Float:'RCT_Float',RCT_Vector:'RCT_Vector',RCT_Transform:'RCT_Transform',RCT_MAX:'RCT_MAX', };
 declare class AnimSequence extends AnimSequenceBase { 
-	NumFrames: number;
 	ImportFileFramerate: number;
 	ImportResampleFramerate: number;
+	NumFrames: number;
 	TrackToSkeletonMapTable: TrackToSkeletonMap[];
 	RawDataGuid: Guid;
 	AnimationTrackNames: string[];
 	CompressionScheme: AnimCompress;
+	bAllowFrameStripping: boolean;
+	CurveCompressionSettings: AnimCurveCompressionSettings;
 	AdditiveAnimType: EAdditiveAnimationType;
 	RefPoseType: EAdditiveBasePoseType;
 	RefPoseSeq: AnimSequence;
 	RefFrameIndex: number;
-	EncodingPkgVersion: number;
 	RetargetSource: string;
 	Interpolation: EAnimInterpolationType;
 	bEnableRootMotion: boolean;
@@ -3090,7 +3475,6 @@ declare class AnimSequence extends AnimSequenceBase {
 	bRootMotionSettingsCopiedFromMontage: boolean;
 	CompressCommandletVersion: number;
 	bDoNotOverrideCompression: boolean;
-	bWasCompressedWithoutTranslations: boolean;
 	AssetImportData: AssetImportData;
 	SourceFilePath: string;
 	SourceFileTimestamp: string;
@@ -3101,8 +3485,10 @@ declare class AnimSequence extends AnimSequenceBase {
 	static GetDefaultObject(): AnimSequence;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimSequence;
 	static C(Other: UObject | any): AnimSequence;
-	AddAnimationNotifyEvent(NotifyTrackName: string,StartTime: number,Duration: number,NotifyClass: UnrealEngineClass): AnimNotify;
+	AddAnimationNotifyEvent(NotifyTrackName: string,StartTime: number,NotifyClass: UnrealEngineClass): AnimNotify;
 	AddAnimationNotifyEventObject(StartTime: number,Notify: AnimNotify,NotifyTrackName: string): void;
+	AddAnimationNotifyStateEvent(NotifyTrackName: string,StartTime: number,Duration: number,NotifyStateClass: UnrealEngineClass): AnimNotifyState;
+	AddAnimationNotifyStateEventObject(StartTime: number,Duration: number,NotifyState: AnimNotifyState,NotifyTrackName: string): void;
 	AddAnimationNotifyTrack(NotifyTrackName: string,TrackColor: LinearColor): void;
 	AddAnimationSyncMarker(MarkerName: string,Time: number,NotifyTrackName: string): void;
 	AddCurve(CurveName: string,CurveType: ERawCurveTrackTypes,bMetaDataCurve: boolean): void;
@@ -3116,6 +3502,7 @@ declare class AnimSequence extends AnimSequenceBase {
 	AddVectorCurveKeys(CurveName: string,Times: number[],Vectors: Vector[]): void;
 	AddVirtualBone(SourceBoneName: string,TargetBoneName: string,VirtualBoneName?: string): {VirtualBoneName: string};
 	ContainsMetaDataOfClass(MetaDataClass: UnrealEngineClass): boolean;
+	CopyAnimNotifiesFromSequence(DestAnimSequence: AnimSequence): void;
 	DoesBoneNameExist(BoneName: string,bExists?: boolean): {bExists: boolean};
 	DoesCurveExist(CurveName: string,CurveType: ERawCurveTrackTypes): boolean;
 	FinalizeBoneAnimation(): void;
@@ -3182,8 +3569,10 @@ declare class AnimSequence extends AnimSequenceBase {
 	SetRateScale(RateScale: number): void;
 	SetRootMotionEnabled(bEnabled: boolean): void;
 	SetRootMotionLockType(RootMotionLockType: ERootMotionRootLock): void;
-	static AddAnimationNotifyEvent(AnimationSequence: AnimSequence,NotifyTrackName: string,StartTime: number,Duration: number,NotifyClass: UnrealEngineClass): AnimNotify;
+	static AddAnimationNotifyEvent(AnimationSequence: AnimSequence,NotifyTrackName: string,StartTime: number,NotifyClass: UnrealEngineClass): AnimNotify;
 	static AddAnimationNotifyEventObject(AnimationSequence: AnimSequence,StartTime: number,Notify: AnimNotify,NotifyTrackName: string): void;
+	static AddAnimationNotifyStateEvent(AnimationSequence: AnimSequence,NotifyTrackName: string,StartTime: number,Duration: number,NotifyStateClass: UnrealEngineClass): AnimNotifyState;
+	static AddAnimationNotifyStateEventObject(AnimationSequence: AnimSequence,StartTime: number,Duration: number,NotifyState: AnimNotifyState,NotifyTrackName: string): void;
 	static AddAnimationNotifyTrack(AnimationSequence: AnimSequence,NotifyTrackName: string,TrackColor: LinearColor): void;
 	static AddAnimationSyncMarker(AnimationSequence: AnimSequence,MarkerName: string,Time: number,NotifyTrackName: string): void;
 	static AddCurve(AnimationSequence: AnimSequence,CurveName: string,CurveType: ERawCurveTrackTypes,bMetaDataCurve: boolean): void;
@@ -3197,6 +3586,7 @@ declare class AnimSequence extends AnimSequenceBase {
 	static AddVectorCurveKeys(AnimationSequence: AnimSequence,CurveName: string,Times: number[],Vectors: Vector[]): void;
 	static AddVirtualBone(AnimationSequence: AnimSequence,SourceBoneName: string,TargetBoneName: string,VirtualBoneName?: string): {VirtualBoneName: string};
 	static ContainsMetaDataOfClass(AnimationSequence: AnimSequence,MetaDataClass: UnrealEngineClass): boolean;
+	static CopyAnimNotifiesFromSequence(SrcAnimSequence: AnimSequence,DestAnimSequence: AnimSequence): void;
 	static DoesBoneNameExist(AnimationSequence: AnimSequence,BoneName: string,bExists?: boolean): {bExists: boolean};
 	static DoesCurveExist(AnimationSequence: AnimSequence,CurveName: string,CurveType: ERawCurveTrackTypes): boolean;
 	static FinalizeBoneAnimation(AnimationSequence: AnimSequence): void;
@@ -3266,7 +3656,11 @@ declare class AnimSequence extends AnimSequenceBase {
 }
 
 declare class SkeletalMeshOptimizationSettings { 
+	TerminationCriterion: SkeletalMeshTerminationCriterion;
 	NumOfTrianglesPercentage: number;
+	NumOfVertPercentage: number;
+	MaxNumOfTriangles: any;
+	MaxNumOfVerts: any;
 	MaxDeviationPercentage: number;
 	ReductionMethod: SkeletalMeshOptimizationType;
 	SilhouetteImportance: SkeletalMeshOptimizationImportance;
@@ -3278,6 +3672,9 @@ declare class SkeletalMeshOptimizationSettings {
 	WeldingThreshold: number;
 	NormalsThreshold: number;
 	MaxBonesPerVertex: number;
+	bEnforceBoneBoundaries: boolean;
+	VolumeImportance: number;
+	bLockEdges: boolean;
 	BaseLOD: number;
 	BonesToRemove: BoneReference[];
 	BakePose: AnimSequence;
@@ -3293,7 +3690,10 @@ declare class SkeletalMeshLODInfo {
 	RemovedBones: string[];
 	ReductionSettings: SkeletalMeshOptimizationSettings;
 	BonesToRemove: BoneReference[];
+	BonesToPrioritize: BoneReference[];
+	WeightOfPrioritization: number;
 	BakePose: AnimSequence;
+	BakePoseOverride: AnimSequence;
 	SourceImportFilename: string;
 	bHasBeenSimplified: boolean;
 	bHasPerLODVertexColors: boolean;
@@ -3311,6 +3711,13 @@ declare class PerPlatformInt {
 	static C(Other: UObject | any): PerPlatformInt;
 }
 
+declare class PerPlatformBool { 
+	Default: boolean;
+	PerPlatform: any;
+	clone() : PerPlatformBool;
+	static C(Other: UObject | any): PerPlatformBool;
+}
+
 declare type EBoneFilterActionOption = 'Remove' | 'Keep' | 'Invalid' | 'EBoneFilterActionOption_MAX';
 declare var EBoneFilterActionOption : { Remove:'Remove',Keep:'Keep',Invalid:'Invalid',EBoneFilterActionOption_MAX:'EBoneFilterActionOption_MAX', };
 declare class BoneFilter { 
@@ -3325,6 +3732,9 @@ declare class SkeletalMeshLODGroupSettings {
 	LODHysteresis: number;
 	BoneFilterActionOption: EBoneFilterActionOption;
 	BoneList: BoneFilter[];
+	BonesToPrioritize: string[];
+	WeightOfPrioritization: number;
+	BakePose: AnimSequence;
 	ReductionSettings: SkeletalMeshOptimizationSettings;
 	clone() : SkeletalMeshLODGroupSettings;
 	static C(Other: UObject | any): SkeletalMeshLODGroupSettings;
@@ -3332,6 +3742,7 @@ declare class SkeletalMeshLODGroupSettings {
 
 declare class SkeletalMeshLODSettings extends DataAsset { 
 	MinLOD: PerPlatformInt;
+	DisableBelowMinLodStripping: PerPlatformBool;
 	LODGroups: SkeletalMeshLODGroupSettings[];
 	static Load(ResourceName: string): SkeletalMeshLODSettings;
 	static Find(Outer: UObject, ResourceName: string): SkeletalMeshLODSettings;
@@ -3340,119 +3751,6 @@ declare class SkeletalMeshLODSettings extends DataAsset {
 	static C(Other: UObject | any): SkeletalMeshLODSettings;
 }
 
-declare class KShapeElem { 
-	RestOffset: number;
-	Name: string;
-	bContributeToMass: boolean;
-	clone() : KShapeElem;
-	static C(Other: UObject | any): KShapeElem;
-}
-
-declare class Matrix { 
-	XPlane: Plane;
-	YPlane: Plane;
-	ZPlane: Plane;
-	WPlane: Plane;
-	clone() : Matrix;
-	static C(Other: UObject | any): Matrix;
-	Conv_MatrixToRotator(): Rotator;
-	Conv_MatrixToTransform(): Transform;
-	Matrix_GetOrigin(): Vector;
-	static Conv_MatrixToRotator(InMatrix: Matrix): Rotator;
-	static Conv_MatrixToTransform(InMatrix: Matrix): Transform;
-	static Matrix_GetOrigin(InMatrix: Matrix): Vector;
-}
-
-declare class KSphereElem extends KShapeElem { 
-	TM: Matrix;
-	Center: Vector;
-	Radius: number;
-	clone() : KSphereElem;
-	static C(Other: UObject | any): KSphereElem;
-}
-
-declare class KBoxElem extends KShapeElem { 
-	TM: Matrix;
-	Orientation: Quat;
-	Center: Vector;
-	Rotation: Rotator;
-	X: number;
-	Y: number;
-	Z: number;
-	clone() : KBoxElem;
-	static C(Other: UObject | any): KBoxElem;
-}
-
-declare class KSphylElem extends KShapeElem { 
-	TM: Matrix;
-	Orientation: Quat;
-	Center: Vector;
-	Rotation: Rotator;
-	Radius: number;
-	Length: number;
-	clone() : KSphylElem;
-	static C(Other: UObject | any): KSphylElem;
-}
-
-declare class KConvexElem extends KShapeElem { 
-	VertexData: Vector[];
-	ElemBox: Box;
-	Transform: Transform;
-	clone() : KConvexElem;
-	static C(Other: UObject | any): KConvexElem;
-}
-
-declare class KTaperedCapsuleElem extends KShapeElem { 
-	Center: Vector;
-	Rotation: Rotator;
-	Radius0: number;
-	Radius1: number;
-	Length: number;
-	clone() : KTaperedCapsuleElem;
-	static C(Other: UObject | any): KTaperedCapsuleElem;
-}
-
-declare class KAggregateGeom { 
-	SphereElems: KSphereElem[];
-	BoxElems: KBoxElem[];
-	SphylElems: KSphylElem[];
-	ConvexElems: KConvexElem[];
-	TaperedCapsuleElems: KTaperedCapsuleElem[];
-	clone() : KAggregateGeom;
-	static C(Other: UObject | any): KAggregateGeom;
-}
-
-declare type EPhysicsType = 'PhysType_Default' | 'PhysType_Kinematic' | 'PhysType_Simulated' | 'PhysType_MAX';
-declare var EPhysicsType : { PhysType_Default:'PhysType_Default',PhysType_Kinematic:'PhysType_Kinematic',PhysType_Simulated:'PhysType_Simulated',PhysType_MAX:'PhysType_MAX', };
-declare type EBodyCollisionResponse = 'BodyCollision_Enabled' | 'BodyCollision_Disabled' | 'BodyCollision_MAX';
-declare var EBodyCollisionResponse : { BodyCollision_Enabled:'BodyCollision_Enabled',BodyCollision_Disabled:'BodyCollision_Disabled',BodyCollision_MAX:'BodyCollision_MAX', };
-declare type ECollisionTraceFlag = 'CTF_UseDefault' | 'CTF_UseSimpleAndComplex' | 'CTF_UseSimpleAsComplex' | 'CTF_UseComplexAsSimple' | 'CTF_MAX';
-declare var ECollisionTraceFlag : { CTF_UseDefault:'CTF_UseDefault',CTF_UseSimpleAndComplex:'CTF_UseSimpleAndComplex',CTF_UseSimpleAsComplex:'CTF_UseSimpleAsComplex',CTF_UseComplexAsSimple:'CTF_UseComplexAsSimple',CTF_MAX:'CTF_MAX', };
-declare class BodySetup extends UObject { 
-	AggGeom: KAggregateGeom;
-	BoneName: string;
-	PhysicsType: EPhysicsType;
-	bAlwaysFullAnimWeight: boolean;
-	bConsiderForBounds: boolean;
-	bMeshCollideAll: boolean;
-	bDoubleSidedGeometry: boolean;
-	bGenerateNonMirroredCollision: boolean;
-	bSharedCookedData: boolean;
-	bGenerateMirroredCollision: boolean;
-	CollisionReponse: EBodyCollisionResponse;
-	CollisionTraceFlag: ECollisionTraceFlag;
-	PhysMaterial: PhysicalMaterial;
-	WalkableSlopeOverride: WalkableSlopeOverride;
-	BuildScale: number;
-	DefaultInstance: BodyInstance;
-	BuildScale3D: Vector;
-	static Load(ResourceName: string): BodySetup;
-	static Find(Outer: UObject, ResourceName: string): BodySetup;
-	static GetDefaultObject(): BodySetup;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BodySetup;
-	static C(Other: UObject | any): BodySetup;
-}
-
 declare class PhysicalAnimationData { 
 	BodyName: string;
 	bIsLocalSimulation: boolean;
@@ -3712,7 +4010,6 @@ declare class PhysicsAsset extends UObject {
 	BoundsBodies: number[];
 	SkeletalBodySetups: SkeletalBodySetup[];
 	ConstraintSetup: PhysicsConstraintTemplate[];
-	bUseAsyncScene: boolean;
 	bNotForDedicatedServer: boolean;
 	ThumbnailInfo: ThumbnailInfo;
 	BodySetup: BodySetup[];
@@ -3781,16198 +4078,15758 @@ declare class ClothingAssetData_Legacy {
 
 declare type ERootMotionMode = 'NoRootMotionExtraction' | 'IgnoreRootMotion' | 'RootMotionFromEverything' | 'RootMotionFromMontagesOnly' | 'ERootMotionMode_MAX';
 declare var ERootMotionMode : { NoRootMotionExtraction:'NoRootMotionExtraction',IgnoreRootMotion:'IgnoreRootMotion',RootMotionFromEverything:'RootMotionFromEverything',RootMotionFromMontagesOnly:'RootMotionFromMontagesOnly',ERootMotionMode_MAX:'ERootMotionMode_MAX', };
-declare class SoftClassPath extends SoftObjectPath { 
-	clone() : SoftClassPath;
-	static C(Other: UObject | any): SoftClassPath;
-	BreakSoftClassPath(PathString?: string): {PathString: string};
-	static BreakSoftClassPath(InSoftClassPath: SoftClassPath,PathString?: string): {PathString: string};
-	static MakeSoftClassPath(PathString: string): SoftClassPath;
+declare class Struct extends Field { 
+	static Load(ResourceName: string): Struct;
+	static Find(Outer: UObject, ResourceName: string): Struct;
+	static GetDefaultObject(): Struct;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Struct;
+	static C(Other: UObject | any): Struct;
 }
 
-declare class AnimNotifyEventReference { 
-	NotifySource: UObject;
-	clone() : AnimNotifyEventReference;
-	static C(Other: UObject | any): AnimNotifyEventReference;
+declare class DynamicBlueprintBinding extends UObject { 
+	static Load(ResourceName: string): DynamicBlueprintBinding;
+	static Find(Outer: UObject, ResourceName: string): DynamicBlueprintBinding;
+	static GetDefaultObject(): DynamicBlueprintBinding;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DynamicBlueprintBinding;
+	static C(Other: UObject | any): DynamicBlueprintBinding;
 }
 
-declare class AnimNotifyQueue { 
-	AnimNotifies: AnimNotifyEventReference[];
-	UnfilteredMontageAnimNotifies: any;
-	clone() : AnimNotifyQueue;
-	static C(Other: UObject | any): AnimNotifyQueue;
+declare class DatasmithAssetUserData extends AssetUserData { 
+	MetaData: any;
+	ObjectTemplates: any;
+	static Load(ResourceName: string): DatasmithAssetUserData;
+	static Find(Outer: UObject, ResourceName: string): DatasmithAssetUserData;
+	static GetDefaultObject(): DatasmithAssetUserData;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithAssetUserData;
+	static C(Other: UObject | any): DatasmithAssetUserData;
 }
 
-declare class PoseSnapshot { 
-	LocalTransforms: Transform[];
-	BoneNames: string[];
-	SkeletalMeshName: string;
-	SnapshotName: string;
-	bIsValid: boolean;
-	clone() : PoseSnapshot;
-	static C(Other: UObject | any): PoseSnapshot;
+declare class Subsystem extends UObject { 
+	static Load(ResourceName: string): Subsystem;
+	static Find(Outer: UObject, ResourceName: string): Subsystem;
+	static GetDefaultObject(): Subsystem;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Subsystem;
+	static C(Other: UObject | any): Subsystem;
 }
 
-declare type ETeleportType = 'None' | 'TeleportPhysics' | 'ResetPhysics' | 'ETeleportType_MAX';
-declare var ETeleportType : { None:'None',TeleportPhysics:'TeleportPhysics',ResetPhysics:'ResetPhysics',ETeleportType_MAX:'ETeleportType_MAX', };
-declare type EMontagePlayReturnType = 'MontageLength' | 'Duration' | 'EMontagePlayReturnType_MAX';
-declare var EMontagePlayReturnType : { MontageLength:'MontageLength',Duration:'Duration',EMontagePlayReturnType_MAX:'EMontagePlayReturnType_MAX', };
-declare class MarkerSyncAnimPosition { 
-	PreviousMarkerName: string;
-	NextMarkerName: string;
-	PositionBetweenMarkers: number;
-	clone() : MarkerSyncAnimPosition;
-	static C(Other: UObject | any): MarkerSyncAnimPosition;
+declare class DynamicSubsystem extends Subsystem { 
+	static Load(ResourceName: string): DynamicSubsystem;
+	static Find(Outer: UObject, ResourceName: string): DynamicSubsystem;
+	static GetDefaultObject(): DynamicSubsystem;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DynamicSubsystem;
+	static C(Other: UObject | any): DynamicSubsystem;
 }
 
-declare type EAnimCurveType = 'AttributeCurve' | 'MaterialCurve' | 'MorphTargetCurve' | 'MaxAnimCurveType' | 'EAnimCurveType_MAX';
-declare var EAnimCurveType : { AttributeCurve:'AttributeCurve',MaterialCurve:'MaterialCurve',MorphTargetCurve:'MorphTargetCurve',MaxAnimCurveType:'MaxAnimCurveType',EAnimCurveType_MAX:'EAnimCurveType_MAX', };
-declare class AnimInstance extends UObject { 
-	CurrentSkeleton: Skeleton;
-	RootMotionMode: ERootMotionMode;
-	DeltaTime: number;
-	bRunUpdatesInWorkerThreads: boolean;
-	bCanUseParallelUpdateAnimation: boolean;
-	bWarnAboutBlueprintUsage: boolean;
-	bUseMultiThreadedAnimationUpdate: boolean;
-	bUsingCopyPoseFromMesh: boolean;
-	bQueueMontageEvents: boolean;
-	OnMontageBlendingOut: UnrealEngineMulticastDelegate<(Montage: AnimMontage, bInterrupted: boolean) => void>;
-	OnMontageStarted: UnrealEngineMulticastDelegate<(Montage: AnimMontage) => void>;
-	OnMontageEnded: UnrealEngineMulticastDelegate<(Montage: AnimMontage, bInterrupted: boolean) => void>;
-	OnAllMontageInstancesEnded: UnrealEngineMulticastDelegate<() => void>;
-	PostCompileValidationClassName: SoftClassPath;
-	NotifyQueue: AnimNotifyQueue;
-	ActiveAnimNotifyState: AnimNotifyEvent[];
-	static Load(ResourceName: string): AnimInstance;
-	static Find(Outer: UObject, ResourceName: string): AnimInstance;
-	static GetDefaultObject(): AnimInstance;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimInstance;
-	UnlockAIResources(bUnlockMovement: boolean,UnlockAILogic: boolean): void;
-	TryGetPawnOwner(): Pawn;
-	StopSlotAnimation(InBlendOutTime: number,SlotNodeName: string): void;
-	SnapshotPose(Snapshot?: PoseSnapshot): {Snapshot: PoseSnapshot};
-	SetRootMotionMode(Value: ERootMotionMode): void;
-	SetMorphTarget(MorphTargetName: string,Value: number): void;
-	SavePoseSnapshot(SnapshotName: string): void;
-	ResetDynamics(InTeleportType: ETeleportType): void;
-	PlaySlotAnimationAsDynamicMontage(Asset: AnimSequenceBase,SlotNodeName: string,BlendInTime: number,BlendOutTime: number,InPlayRate: number,LoopCount: number,BlendOutTriggerTime: number,InTimeToStartMontageAt: number): AnimMontage;
-	PlaySlotAnimation(Asset: AnimSequenceBase,SlotNodeName: string,BlendInTime: number,BlendOutTime: number,InPlayRate: number,LoopCount: number): number;
-	Montage_Stop(InBlendOutTime: number,Montage: AnimMontage): void;
-	Montage_SetPosition(Montage: AnimMontage,NewPosition: number): void;
-	Montage_SetPlayRate(Montage: AnimMontage,NewPlayRate: number): void;
-	Montage_SetNextSection(SectionNameToChange: string,NextSection: string,Montage: AnimMontage): void;
-	Montage_Resume(Montage: AnimMontage): void;
-	Montage_Play(MontageToPlay: AnimMontage,InPlayRate: number,ReturnValueType: EMontagePlayReturnType,InTimeToStartMontageAt: number,bStopAllMontages: boolean): number;
-	Montage_Pause(Montage: AnimMontage): void;
-	Montage_JumpToSectionsEnd(SectionName: string,Montage: AnimMontage): void;
-	Montage_JumpToSection(SectionName: string,Montage: AnimMontage): void;
-	Montage_IsPlaying(Montage: AnimMontage): boolean;
-	Montage_IsActive(Montage: AnimMontage): boolean;
-	Montage_GetPosition(Montage: AnimMontage): number;
-	Montage_GetPlayRate(Montage: AnimMontage): number;
-	Montage_GetIsStopped(Montage: AnimMontage): boolean;
-	Montage_GetCurrentSection(Montage: AnimMontage): string;
-	Montage_GetBlendTime(Montage: AnimMontage): number;
-	LockAIResources(bLockMovement: boolean,LockAILogic: boolean): void;
-	IsSyncGroupBetweenMarkers(InSyncGroupName: string,PreviousMarker: string,NextMarker: string,bRespectMarkerOrder: boolean): boolean;
-	IsPlayingSlotAnimation(Asset: AnimSequenceBase,SlotNodeName: string): boolean;
-	IsAnyMontagePlaying(): boolean;
-	HasMarkerBeenHitThisFrame(SyncGroup: string,MarkerName: string): boolean;
-	GetTimeToClosestMarker(SyncGroup: string,MarkerName: string,OutMarkerTime?: number): {OutMarkerTime: number, $: boolean};
-	GetSyncGroupPosition(InSyncGroupName: string): MarkerSyncAnimPosition;
-	GetRelevantAnimTimeRemainingFraction(MachineIndex: number,StateIndex: number): number;
-	GetRelevantAnimTimeRemaining(MachineIndex: number,StateIndex: number): number;
-	GetRelevantAnimTimeFraction(MachineIndex: number,StateIndex: number): number;
-	GetRelevantAnimTime(MachineIndex: number,StateIndex: number): number;
-	GetRelevantAnimLength(MachineIndex: number,StateIndex: number): number;
-	GetOwningComponent(): SkeletalMeshComponent;
-	GetOwningActor(): Actor;
-	GetInstanceTransitionTimeElapsedFraction(MachineIndex: number,TransitionIndex: number): number;
-	GetInstanceTransitionTimeElapsed(MachineIndex: number,TransitionIndex: number): number;
-	GetInstanceTransitionCrossfadeDuration(MachineIndex: number,TransitionIndex: number): number;
-	GetInstanceStateWeight(MachineIndex: number,StateIndex: number): number;
-	GetInstanceMachineWeight(MachineIndex: number): number;
-	GetInstanceCurrentStateElapsedTime(MachineIndex: number): number;
-	GetInstanceAssetPlayerTimeFromEndFraction(AssetPlayerIndex: number): number;
-	GetInstanceAssetPlayerTimeFromEnd(AssetPlayerIndex: number): number;
-	GetInstanceAssetPlayerTimeFraction(AssetPlayerIndex: number): number;
-	GetInstanceAssetPlayerTime(AssetPlayerIndex: number): number;
-	GetInstanceAssetPlayerLength(AssetPlayerIndex: number): number;
-	GetCurveValue(CurveName: string): number;
-	GetCurrentStateName(MachineIndex: number): string;
-	GetCurrentActiveMontage(): AnimMontage;
-	GetAllCurveNames(OutNames?: string[]): {OutNames: string[]};
-	GetActiveCurveNames(CurveType: EAnimCurveType,OutNames?: string[]): {OutNames: string[]};
-	ClearMorphTargets(): void;
-	CalculateDirection(Velocity: Vector,BaseRotation: Rotator): number;
-	BlueprintUpdateAnimation(DeltaTimeX: number): void;
-	BlueprintPostEvaluateAnimation(): void;
-	BlueprintInitializeAnimation(): void;
-	BlueprintBeginPlay(): void;
-	static C(Other: UObject | any): AnimInstance;
-	LockAIResourcesWithAnimation(bLockMovement: boolean,LockAILogic: boolean): void;
-	UnlockAIResourcesWithAnimation(bUnlockMovement: boolean,UnlockAILogic: boolean): void;
-	static LockAIResourcesWithAnimation(AnimInstance: AnimInstance,bLockMovement: boolean,LockAILogic: boolean): void;
-	static UnlockAIResourcesWithAnimation(AnimInstance: AnimInstance,bUnlockMovement: boolean,UnlockAILogic: boolean): void;
+declare class EngineSubsystem extends DynamicSubsystem { 
+	static Load(ResourceName: string): EngineSubsystem;
+	static Find(Outer: UObject, ResourceName: string): EngineSubsystem;
+	static GetDefaultObject(): EngineSubsystem;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EngineSubsystem;
+	static C(Other: UObject | any): EngineSubsystem;
 }
 
-declare class ClothingAssetBase extends UObject { 
-	ImportedFilePath: string;
-	AssetGuid: Guid;
-	static Load(ResourceName: string): ClothingAssetBase;
-	static Find(Outer: UObject, ResourceName: string): ClothingAssetBase;
-	static GetDefaultObject(): ClothingAssetBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingAssetBase;
-	static C(Other: UObject | any): ClothingAssetBase;
+declare class PrimaryAssetType { 
+	Name: string;
+	clone() : PrimaryAssetType;
+	static C(Other: UObject | any): PrimaryAssetType;
+	Conv_PrimaryAssetTypeToString(): string;
+	EqualEqual_PrimaryAssetType(B: PrimaryAssetType): boolean;
+	GetPrimaryAssetIdList(OutPrimaryAssetIdList?: PrimaryAssetId[]): {OutPrimaryAssetIdList: PrimaryAssetId[]};
+	IsValidPrimaryAssetType(): boolean;
+	NotEqual_PrimaryAssetType(B: PrimaryAssetType): boolean;
+	static Conv_PrimaryAssetTypeToString(PrimaryAssetType: PrimaryAssetType): string;
+	static EqualEqual_PrimaryAssetType(A: PrimaryAssetType,B: PrimaryAssetType): boolean;
+	static GetPrimaryAssetIdList(PrimaryAssetType: PrimaryAssetType,OutPrimaryAssetIdList?: PrimaryAssetId[]): {OutPrimaryAssetIdList: PrimaryAssetId[]};
+	static IsValidPrimaryAssetType(PrimaryAssetType: PrimaryAssetType): boolean;
+	static NotEqual_PrimaryAssetType(A: PrimaryAssetType,B: PrimaryAssetType): boolean;
 }
 
-declare class SkeletalMeshSamplingRegionMaterialFilter { 
-	MaterialName: string;
-	clone() : SkeletalMeshSamplingRegionMaterialFilter;
-	static C(Other: UObject | any): SkeletalMeshSamplingRegionMaterialFilter;
+declare class PrimaryAssetId { 
+	PrimaryAssetType: PrimaryAssetType;
+	PrimaryAssetName: string;
+	clone() : PrimaryAssetId;
+	static C(Other: UObject | any): PrimaryAssetId;
+	Conv_PrimaryAssetIdToString(): string;
+	EqualEqual_PrimaryAssetId(B: PrimaryAssetId): boolean;
+	GetClassFromPrimaryAssetId(): UnrealEngineClass;
+	GetCurrentBundleState(bForceCurrentState: boolean,OutBundles?: string[]): {OutBundles: string[], $: boolean};
+	GetObjectFromPrimaryAssetId(): UObject;
+	GetSoftClassReferenceFromPrimaryAssetId(): Class;
+	GetSoftObjectReferenceFromPrimaryAssetId(): UObject;
+	IsValidPrimaryAssetId(): boolean;
+	NotEqual_PrimaryAssetId(B: PrimaryAssetId): boolean;
+	UnloadPrimaryAsset(): void;
+	static Conv_PrimaryAssetIdToString(PrimaryAssetId: PrimaryAssetId): string;
+	static EqualEqual_PrimaryAssetId(A: PrimaryAssetId,B: PrimaryAssetId): boolean;
+	static GetClassFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): UnrealEngineClass;
+	static GetCurrentBundleState(PrimaryAssetId: PrimaryAssetId,bForceCurrentState: boolean,OutBundles?: string[]): {OutBundles: string[], $: boolean};
+	static GetObjectFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): UObject;
+	static GetSoftClassReferenceFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): Class;
+	static GetSoftObjectReferenceFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): UObject;
+	static IsValidPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): boolean;
+	static NotEqual_PrimaryAssetId(A: PrimaryAssetId,B: PrimaryAssetId): boolean;
+	static UnloadPrimaryAsset(PrimaryAssetId: PrimaryAssetId): void;
 }
 
-declare class SkeletalMeshSamplingRegionBoneFilter { 
-	BoneName: string;
-	bIncludeOrExclude: boolean;
-	bApplyToChildren: boolean;
-	clone() : SkeletalMeshSamplingRegionBoneFilter;
-	static C(Other: UObject | any): SkeletalMeshSamplingRegionBoneFilter;
+declare class SaveGame extends UObject { 
+	static Load(ResourceName: string): SaveGame;
+	static Find(Outer: UObject, ResourceName: string): SaveGame;
+	static GetDefaultObject(): SaveGame;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SaveGame;
+	static C(Other: UObject | any): SaveGame;
+	SaveGameToSlot(SlotName: string,UserIndex: number): boolean;
+	static SaveGameToSlot(SaveGameObject: SaveGame,SlotName: string,UserIndex: number): boolean;
 }
 
-declare class SkeletalMeshSamplingRegion { 
-	Name: string;
-	LODIndex: number;
-	bSupportUniformlyDistributedSampling: boolean;
-	MaterialFilters: SkeletalMeshSamplingRegionMaterialFilter[];
-	BoneFilters: SkeletalMeshSamplingRegionBoneFilter[];
-	clone() : SkeletalMeshSamplingRegion;
-	static C(Other: UObject | any): SkeletalMeshSamplingRegion;
+declare class EditorSubsystem extends DynamicSubsystem { 
+	static Load(ResourceName: string): EditorSubsystem;
+	static Find(Outer: UObject, ResourceName: string): EditorSubsystem;
+	static GetDefaultObject(): EditorSubsystem;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorSubsystem;
+	static C(Other: UObject | any): EditorSubsystem;
 }
 
-declare class SkeletalMeshSamplingLODBuiltData { 
-	clone() : SkeletalMeshSamplingLODBuiltData;
-	static C(Other: UObject | any): SkeletalMeshSamplingLODBuiltData;
+declare class Visual extends UObject { 
+	static Load(ResourceName: string): Visual;
+	static Find(Outer: UObject, ResourceName: string): Visual;
+	static GetDefaultObject(): Visual;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Visual;
+	static C(Other: UObject | any): Visual;
 }
 
-declare class SkeletalMeshSamplingRegionBuiltData { 
-	clone() : SkeletalMeshSamplingRegionBuiltData;
-	static C(Other: UObject | any): SkeletalMeshSamplingRegionBuiltData;
+declare class PanelWidget extends Widget { 
+	Slots: PanelSlot[];
+	static Load(ResourceName: string): PanelWidget;
+	static Find(Outer: UObject, ResourceName: string): PanelWidget;
+	static GetDefaultObject(): PanelWidget;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PanelWidget;
+	RemoveChildAt(index: number): boolean;
+	RemoveChild(Content: Widget): boolean;
+	HasChild(Content: Widget): boolean;
+	HasAnyChildren(): boolean;
+	GetChildrenCount(): number;
+	GetChildIndex(Content: Widget): number;
+	GetChildAt(index: number): Widget;
+	GetAllChildren(): Widget[];
+	ClearChildren(): void;
+	AddChild(Content: Widget): PanelSlot;
+	static C(Other: UObject | any): PanelWidget;
 }
 
-declare class SkeletalMeshSamplingBuiltData { 
-	WholeMeshBuiltData: SkeletalMeshSamplingLODBuiltData[];
-	RegionBuiltData: SkeletalMeshSamplingRegionBuiltData[];
-	clone() : SkeletalMeshSamplingBuiltData;
-	static C(Other: UObject | any): SkeletalMeshSamplingBuiltData;
+declare class PanelSlot extends Visual { 
+	Parent: PanelWidget;
+	Content: Widget;
+	static Load(ResourceName: string): PanelSlot;
+	static Find(Outer: UObject, ResourceName: string): PanelSlot;
+	static GetDefaultObject(): PanelSlot;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PanelSlot;
+	static C(Other: UObject | any): PanelSlot;
 }
 
-declare class SkeletalMeshSamplingInfo { 
-	Regions: SkeletalMeshSamplingRegion[];
-	BuiltData: SkeletalMeshSamplingBuiltData;
-	clone() : SkeletalMeshSamplingInfo;
-	static C(Other: UObject | any): SkeletalMeshSamplingInfo;
+declare type ESlateVisibility = 'Visible' | 'Collapsed' | 'Hidden' | 'HitTestInvisible' | 'SelfHitTestInvisible' | 'ESlateVisibility_MAX';
+declare var ESlateVisibility : { Visible:'Visible',Collapsed:'Collapsed',Hidden:'Hidden',HitTestInvisible:'HitTestInvisible',SelfHitTestInvisible:'SelfHitTestInvisible',ESlateVisibility_MAX:'ESlateVisibility_MAX', };
+declare class WidgetTransform { 
+	Translation: Vector2D;
+	Scale: Vector2D;
+	Shear: Vector2D;
+	Angle: number;
+	clone() : WidgetTransform;
+	static C(Other: UObject | any): WidgetTransform;
 }
 
-declare class BlueprintCore extends UObject { 
-	SkeletonGeneratedClass: UnrealEngineClass;
-	GeneratedClass: UnrealEngineClass;
-	bLegacyNeedToPurgeSkelRefs: boolean;
-	bLegacyGeneratedClassIsAuthoritative: boolean;
-	BlueprintGuid: Guid;
-	static Load(ResourceName: string): BlueprintCore;
-	static Find(Outer: UObject, ResourceName: string): BlueprintCore;
-	static GetDefaultObject(): BlueprintCore;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintCore;
-	static C(Other: UObject | any): BlueprintCore;
+declare type ESlateAccessibleBehavior = 'NotAccessible' | 'Auto' | 'Summary' | 'Custom' | 'ToolTip' | 'ESlateAccessibleBehavior_MAX';
+declare var ESlateAccessibleBehavior : { NotAccessible:'NotAccessible',Auto:'Auto',Summary:'Summary',Custom:'Custom',ToolTip:'ToolTip',ESlateAccessibleBehavior_MAX:'ESlateAccessibleBehavior_MAX', };
+declare class SlateAccessibleWidgetData extends UObject { 
+	bCanChildrenBeAccessible: boolean;
+	AccessibleBehavior: ESlateAccessibleBehavior;
+	AccessibleSummaryBehavior: ESlateAccessibleBehavior;
+	AccessibleText: string;
+	AccessibleTextDelegate: UnrealEngineDelegate<() => string>;
+	AccessibleSummaryText: string;
+	AccessibleSummaryTextDelegate: UnrealEngineDelegate<() => string>;
+	static Load(ResourceName: string): SlateAccessibleWidgetData;
+	static Find(Outer: UObject, ResourceName: string): SlateAccessibleWidgetData;
+	static GetDefaultObject(): SlateAccessibleWidgetData;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateAccessibleWidgetData;
+	static C(Other: UObject | any): SlateAccessibleWidgetData;
 }
 
-declare type EBlueprintNativizationFlag = 'Disabled' | 'Dependency' | 'ExplicitlyEnabled' | 'EBlueprintNativizationFlag_MAX';
-declare var EBlueprintNativizationFlag : { Disabled:'Disabled',Dependency:'Dependency',ExplicitlyEnabled:'ExplicitlyEnabled',EBlueprintNativizationFlag_MAX:'EBlueprintNativizationFlag_MAX', };
-declare type EBlueprintCompileMode = 'Default' | 'Development' | 'FinalRelease' | 'EBlueprintCompileMode_MAX';
-declare var EBlueprintCompileMode : { Default:'Default',Development:'Development',FinalRelease:'FinalRelease',EBlueprintCompileMode_MAX:'EBlueprintCompileMode_MAX', };
-declare class Struct extends Field { 
-	static Load(ResourceName: string): Struct;
-	static Find(Outer: UObject, ResourceName: string): Struct;
-	static GetDefaultObject(): Struct;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Struct;
-	static C(Other: UObject | any): Struct;
+declare type EMouseCursor = 'None' | 'Default' | 'TextEditBeam' | 'ResizeLeftRight' | 'ResizeUpDown' | 'ResizeSouthEast' | 'ResizeSouthWest' | 'CardinalCross' | 'Crosshairs' | 'Hand' | 'GrabHand' | 'GrabHandClosed' | 'SlashedCircle' | 'EyeDropper' | 'EMouseCursor_MAX';
+declare var EMouseCursor : { None:'None',Default:'Default',TextEditBeam:'TextEditBeam',ResizeLeftRight:'ResizeLeftRight',ResizeUpDown:'ResizeUpDown',ResizeSouthEast:'ResizeSouthEast',ResizeSouthWest:'ResizeSouthWest',CardinalCross:'CardinalCross',Crosshairs:'Crosshairs',Hand:'Hand',GrabHand:'GrabHand',GrabHandClosed:'GrabHandClosed',SlashedCircle:'SlashedCircle',EyeDropper:'EyeDropper',EMouseCursor_MAX:'EMouseCursor_MAX', };
+declare type EWidgetClipping = 'Inherit' | 'ClipToBounds' | 'ClipToBoundsWithoutIntersecting' | 'ClipToBoundsAlways' | 'OnDemand' | 'EWidgetClipping_MAX';
+declare var EWidgetClipping : { Inherit:'Inherit',ClipToBounds:'ClipToBounds',ClipToBoundsWithoutIntersecting:'ClipToBoundsWithoutIntersecting',ClipToBoundsAlways:'ClipToBoundsAlways',OnDemand:'OnDemand',EWidgetClipping_MAX:'EWidgetClipping_MAX', };
+declare type EUINavigationRule = 'Escape' | 'Explicit' | 'Wrap' | 'Stop' | 'Custom' | 'CustomBoundary' | 'Invalid' | 'EUINavigationRule_MAX';
+declare var EUINavigationRule : { Escape:'Escape',Explicit:'Explicit',Wrap:'Wrap',Stop:'Stop',Custom:'Custom',CustomBoundary:'CustomBoundary',Invalid:'Invalid',EUINavigationRule_MAX:'EUINavigationRule_MAX', };
+declare type EUINavigation = 'Left' | 'Right' | 'Up' | 'Down' | 'Next' | 'Previous' | 'Num' | 'Invalid' | 'EUINavigation_MAX';
+declare var EUINavigation : { Left:'Left',Right:'Right',Up:'Up',Down:'Down',Next:'Next',Previous:'Previous',Num:'Num',Invalid:'Invalid',EUINavigation_MAX:'EUINavigation_MAX', };
+declare class WidgetNavigationData { 
+	Rule: EUINavigationRule;
+	WidgetToFocus: string;
+	Widget: any;
+	CustomDelegate: UnrealEngineDelegate<(Navigation: EUINavigation) => Widget>;
+	clone() : WidgetNavigationData;
+	static C(Other: UObject | any): WidgetNavigationData;
 }
 
-declare class BlueprintComponentChangedPropertyInfo { 
-	PropertyName: string;
+declare class WidgetNavigation extends UObject { 
+	Up: WidgetNavigationData;
+	Down: WidgetNavigationData;
+	Left: WidgetNavigationData;
+	Right: WidgetNavigationData;
+	Next: WidgetNavigationData;
+	Previous: WidgetNavigationData;
+	static Load(ResourceName: string): WidgetNavigation;
+	static Find(Outer: UObject, ResourceName: string): WidgetNavigation;
+	static GetDefaultObject(): WidgetNavigation;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetNavigation;
+	static C(Other: UObject | any): WidgetNavigation;
+}
+
+declare type EFlowDirectionPreference = 'Inherit' | 'Culture' | 'LeftToRight' | 'RightToLeft' | 'EFlowDirectionPreference_MAX';
+declare var EFlowDirectionPreference : { Inherit:'Inherit',Culture:'Culture',LeftToRight:'LeftToRight',RightToLeft:'RightToLeft',EFlowDirectionPreference_MAX:'EFlowDirectionPreference_MAX', };
+declare class PropertyPathSegment { 
+	Name: string;
 	ArrayIndex: number;
-	PropertyScope: Struct;
-	clone() : BlueprintComponentChangedPropertyInfo;
-	static C(Other: UObject | any): BlueprintComponentChangedPropertyInfo;
+	struct: Struct;
+	Field: Field;
+	clone() : PropertyPathSegment;
+	static C(Other: UObject | any): PropertyPathSegment;
 }
 
-declare class BlueprintCookedComponentInstancingData { 
-	bIsValid: boolean;
-	ChangedPropertyList: BlueprintComponentChangedPropertyInfo[];
-	clone() : BlueprintCookedComponentInstancingData;
-	static C(Other: UObject | any): BlueprintCookedComponentInstancingData;
+declare class UFunction extends Struct { 
+	static Load(ResourceName: string): UFunction;
+	static Find(Outer: UObject, ResourceName: string): UFunction;
+	static GetDefaultObject(): UFunction;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UFunction;
+	static C(Other: UObject | any): UFunction;
+	GetFunctionParmsSize(): number;
+	static GetFunctionParmsSize(UFunction: UFunction): number;
 }
 
-declare class BPVariableMetaDataEntry { 
-	DataKey: string;
-	DataValue: string;
-	clone() : BPVariableMetaDataEntry;
-	static C(Other: UObject | any): BPVariableMetaDataEntry;
+declare class CachedPropertyPath { 
+	Segments: PropertyPathSegment[];
+	CachedFunction: UFunction;
+	clone() : CachedPropertyPath;
+	static C(Other: UObject | any): CachedPropertyPath;
 }
 
-declare class SCS_Node extends UObject { 
-	ComponentClass: UnrealEngineClass;
-	ComponentTemplate: ActorComponent;
-	CookedComponentInstancingData: BlueprintCookedComponentInstancingData;
-	CategoryName: string;
-	AttachToName: string;
-	ParentComponentOrVariableName: string;
-	ParentComponentOwnerClassName: string;
-	bIsParentComponentNative: boolean;
-	ChildNodes: SCS_Node[];
-	MetaDataArray: BPVariableMetaDataEntry[];
-	VariableGuid: Guid;
-	bIsFalseRoot: boolean;
-	bIsNative: boolean;
-	NativeComponentName: string;
-	bVariableNameAutoGenerated: boolean;
-	InternalVariableName: string;
-	static Load(ResourceName: string): SCS_Node;
-	static Find(Outer: UObject, ResourceName: string): SCS_Node;
-	static GetDefaultObject(): SCS_Node;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SCS_Node;
-	static C(Other: UObject | any): SCS_Node;
+declare class DynamicPropertyPath extends CachedPropertyPath { 
+	clone() : DynamicPropertyPath;
+	static C(Other: UObject | any): DynamicPropertyPath;
 }
 
-declare class SimpleConstructionScript extends UObject { 
-	RootNodes: SCS_Node[];
-	AllNodes: SCS_Node[];
-	DefaultSceneRootNode: SCS_Node;
-	RootNode: SCS_Node;
-	ActorComponentNodes: SCS_Node[];
-	static Load(ResourceName: string): SimpleConstructionScript;
-	static Find(Outer: UObject, ResourceName: string): SimpleConstructionScript;
-	static GetDefaultObject(): SimpleConstructionScript;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SimpleConstructionScript;
-	static C(Other: UObject | any): SimpleConstructionScript;
+declare class PropertyBinding extends UObject { 
+	SourceObject: any;
+	SourcePath: DynamicPropertyPath;
+	DestinationProperty: string;
+	static Load(ResourceName: string): PropertyBinding;
+	static Find(Outer: UObject, ResourceName: string): PropertyBinding;
+	static GetDefaultObject(): PropertyBinding;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyBinding;
+	static C(Other: UObject | any): PropertyBinding;
 }
 
-declare class EdGraphSchema extends UObject { 
-	static Load(ResourceName: string): EdGraphSchema;
-	static Find(Outer: UObject, ResourceName: string): EdGraphSchema;
-	static GetDefaultObject(): EdGraphSchema;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdGraphSchema;
-	static C(Other: UObject | any): EdGraphSchema;
-	SetNodeMetaData(UNode: EdGraphNode,KeyValue: string): boolean;
-	TryConnection(A: JavascriptEdGraphPin,B: JavascriptEdGraphPin): void;
-	static SetNodeMetaData(Schema: EdGraphSchema,UNode: EdGraphNode,KeyValue: string): boolean;
-	static TryConnection(Schema: EdGraphSchema,A: JavascriptEdGraphPin,B: JavascriptEdGraphPin): void;
+declare type EWidgetDesignFlags = 'None' | 'Designing' | 'ShowOutline' | 'ExecutePreConstruct' | 'EWidgetDesignFlags_MAX';
+declare var EWidgetDesignFlags : { None:'None',Designing:'Designing',ShowOutline:'ShowOutline',ExecutePreConstruct:'ExecutePreConstruct',EWidgetDesignFlags_MAX:'EWidgetDesignFlags_MAX', };
+declare class Player extends UObject { 
+	PlayerController: PlayerController;
+	CurrentNetSpeed: number;
+	ConfiguredInternetSpeed: number;
+	ConfiguredLanSpeed: number;
+	static Load(ResourceName: string): Player;
+	static Find(Outer: UObject, ResourceName: string): Player;
+	static GetDefaultObject(): Player;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Player;
+	static C(Other: UObject | any): Player;
 }
 
-declare class EdGraph extends UObject { 
-	Schema: UnrealEngineClass;
-	Nodes: EdGraphNode[];
-	bEditable: boolean;
-	bAllowDeletion: boolean;
-	bAllowRenaming: boolean;
-	SubGraphs: EdGraph[];
-	GraphGuid: Guid;
-	InterfaceGuid: Guid;
-	static Load(ResourceName: string): EdGraph;
-	static Find(Outer: UObject, ResourceName: string): EdGraph;
-	static GetDefaultObject(): EdGraph;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdGraph;
-	static C(Other: UObject | any): EdGraph;
+declare class InterpTrackInst extends UObject { 
+	static Load(ResourceName: string): InterpTrackInst;
+	static Find(Outer: UObject, ResourceName: string): InterpTrackInst;
+	static GetDefaultObject(): InterpTrackInst;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInst;
+	static C(Other: UObject | any): InterpTrackInst;
 }
 
-declare type ETimelineLengthMode = 'TL_TimelineLength' | 'TL_LastKeyFrame' | 'TL_MAX';
-declare var ETimelineLengthMode : { TL_TimelineLength:'TL_TimelineLength',TL_LastKeyFrame:'TL_LastKeyFrame',TL_MAX:'TL_MAX', };
-declare class TTTrackBase { 
-	TrackName: string;
-	bIsExternalCurve: boolean;
-	clone() : TTTrackBase;
-	static C(Other: UObject | any): TTTrackBase;
+declare class InterpTrackInstDirector extends InterpTrackInst { 
+	OldViewTarget: Actor;
+	static Load(ResourceName: string): InterpTrackInstDirector;
+	static Find(Outer: UObject, ResourceName: string): InterpTrackInstDirector;
+	static GetDefaultObject(): InterpTrackInstDirector;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstDirector;
+	static C(Other: UObject | any): InterpTrackInstDirector;
 }
 
-declare class TTEventTrack extends TTTrackBase { 
-	CurveKeys: CurveFloat;
-	clone() : TTEventTrack;
-	static C(Other: UObject | any): TTEventTrack;
+declare class ReporterBase extends UObject { 
+	static Load(ResourceName: string): ReporterBase;
+	static Find(Outer: UObject, ResourceName: string): ReporterBase;
+	static GetDefaultObject(): ReporterBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReporterBase;
+	static C(Other: UObject | any): ReporterBase;
 }
 
-declare class TTFloatTrack extends TTTrackBase { 
-	CurveFloat: CurveFloat;
-	clone() : TTFloatTrack;
-	static C(Other: UObject | any): TTFloatTrack;
+declare class ReporterGraph extends ReporterBase { 
+	static Load(ResourceName: string): ReporterGraph;
+	static Find(Outer: UObject, ResourceName: string): ReporterGraph;
+	static GetDefaultObject(): ReporterGraph;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReporterGraph;
+	static C(Other: UObject | any): ReporterGraph;
 }
 
-declare class CurveVector extends CurveBase { 
-	FloatCurves: RichCurve;
-	static Load(ResourceName: string): CurveVector;
-	static Find(Outer: UObject, ResourceName: string): CurveVector;
-	static GetDefaultObject(): CurveVector;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveVector;
-	GetVectorValue(InTime: number): Vector;
-	static C(Other: UObject | any): CurveVector;
+declare class CanvasUVTri { 
+	V0_Pos: Vector2D;
+	V0_UV: Vector2D;
+	V0_Color: LinearColor;
+	V1_Pos: Vector2D;
+	V1_UV: Vector2D;
+	V1_Color: LinearColor;
+	V2_Pos: Vector2D;
+	V2_UV: Vector2D;
+	V2_Color: LinearColor;
+	clone() : CanvasUVTri;
+	static C(Other: UObject | any): CanvasUVTri;
 }
 
-declare class TTVectorTrack extends TTTrackBase { 
-	CurveVector: CurveVector;
-	clone() : TTVectorTrack;
-	static C(Other: UObject | any): TTVectorTrack;
+declare class Canvas extends UObject { 
+	OrgX: number;
+	OrgY: number;
+	ClipX: number;
+	ClipY: number;
+	DrawColor: Color;
+	bCenterX: boolean;
+	bCenterY: boolean;
+	bNoSmooth: boolean;
+	SizeX: number;
+	SizeY: number;
+	ColorModulate: Plane;
+	DefaultTexture: Texture2D;
+	GradientTexture0: Texture2D;
+	ReporterGraph: ReporterGraph;
+	static Load(ResourceName: string): Canvas;
+	static Find(Outer: UObject, ResourceName: string): Canvas;
+	static GetDefaultObject(): Canvas;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Canvas;
+	K2_TextSize(RenderFont: Font,RenderText: string,Scale: Vector2D): Vector2D;
+	K2_StrLen(RenderFont: Font,RenderText: string): Vector2D;
+	K2_Project(WorldLocation: Vector): Vector;
+	K2_DrawTriangle(RenderTexture: Texture,Triangles: CanvasUVTri[]): void;
+	K2_DrawTexture(RenderTexture: Texture,ScreenPosition: Vector2D,ScreenSize: Vector2D,CoordinatePosition: Vector2D,CoordinateSize: Vector2D,RenderColor: LinearColor,BlendMode: EBlendMode,Rotation: number,PivotPoint: Vector2D): void;
+	K2_DrawText(RenderFont: Font,RenderText: string,ScreenPosition: Vector2D,Scale: Vector2D,RenderColor: LinearColor,Kerning: number,ShadowColor: LinearColor,ShadowOffset: Vector2D,bCentreX: boolean,bCentreY: boolean,bOutlined: boolean,OutlineColor: LinearColor): void;
+	K2_DrawPolygon(RenderTexture: Texture,ScreenPosition: Vector2D,Radius: Vector2D,NumberOfSides: number,RenderColor: LinearColor): void;
+	K2_DrawMaterialTriangle(RenderMaterial: MaterialInterface,Triangles: CanvasUVTri[]): void;
+	K2_DrawMaterial(RenderMaterial: MaterialInterface,ScreenPosition: Vector2D,ScreenSize: Vector2D,CoordinatePosition: Vector2D,CoordinateSize: Vector2D,Rotation: number,PivotPoint: Vector2D): void;
+	K2_DrawLine(ScreenPositionA: Vector2D,ScreenPositionB: Vector2D,Thickness: number,RenderColor: LinearColor): void;
+	K2_DrawBox(ScreenPosition: Vector2D,ScreenSize: Vector2D,Thickness: number,RenderColor: LinearColor): void;
+	K2_DrawBorder(BorderTexture: Texture,BackgroundTexture: Texture,LeftBorderTexture: Texture,RightBorderTexture: Texture,TopBorderTexture: Texture,BottomBorderTexture: Texture,ScreenPosition: Vector2D,ScreenSize: Vector2D,CoordinatePosition: Vector2D,CoordinateSize: Vector2D,RenderColor: LinearColor,BorderScale: Vector2D,BackgroundScale: Vector2D,Rotation: number,PivotPoint: Vector2D,CornerSize: Vector2D): void;
+	K2_Deproject(ScreenPosition: Vector2D,WorldOrigin?: Vector,WorldDirection?: Vector): {WorldOrigin: Vector, WorldDirection: Vector};
+	static C(Other: UObject | any): Canvas;
 }
 
-declare class TTLinearColorTrack extends TTTrackBase { 
-	CurveLinearColor: CurveLinearColor;
-	clone() : TTLinearColorTrack;
-	static C(Other: UObject | any): TTLinearColorTrack;
+declare class DebugTextInfo { 
+	SrcActor: Actor;
+	SrcActorOffset: Vector;
+	SrcActorDesiredOffset: Vector;
+	DebugText: string;
+	TimeRemaining: number;
+	Duration: number;
+	TextColor: Color;
+	bAbsoluteLocation: boolean;
+	bKeepAttachedToActor: boolean;
+	bDrawShadow: boolean;
+	OrigActorLocation: Vector;
+	Font: Font;
+	FontScale: number;
+	clone() : DebugTextInfo;
+	static C(Other: UObject | any): DebugTextInfo;
 }
 
-declare class TimelineTemplate extends UObject { 
-	TimelineLength: number;
-	LengthMode: ETimelineLengthMode;
-	bAutoPlay: boolean;
-	bLoop: boolean;
-	bReplicated: boolean;
-	bValidatedAsWired: boolean;
-	bIgnoreTimeDilation: boolean;
-	EventTracks: TTEventTrack[];
-	FloatTracks: TTFloatTrack[];
-	VectorTracks: TTVectorTrack[];
-	LinearColorTracks: TTLinearColorTrack[];
-	MetaDataArray: BPVariableMetaDataEntry[];
-	TimelineGuid: Guid;
-	static Load(ResourceName: string): TimelineTemplate;
-	static Find(Outer: UObject, ResourceName: string): TimelineTemplate;
-	static GetDefaultObject(): TimelineTemplate;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TimelineTemplate;
-	static C(Other: UObject | any): TimelineTemplate;
+declare class HUD extends Actor { 
+	PlayerOwner: PlayerController;
+	bLostFocusPaused: boolean;
+	bShowHUD: boolean;
+	bShowDebugInfo: boolean;
+	CurrentTargetIndex: number;
+	bShowHitBoxDebugInfo: boolean;
+	bShowOverlays: boolean;
+	bEnableDebugTextShadow: boolean;
+	PostRenderedActors: Actor[];
+	DebugDisplay: string[];
+	ToggledDebugCategories: string[];
+	Canvas: Canvas;
+	DebugCanvas: Canvas;
+	DebugTextList: DebugTextInfo[];
+	ShowDebugTargetDesiredClass: UnrealEngineClass;
+	ShowDebugTargetActor: Actor;
+	static GetDefaultObject(): HUD;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HUD;
+	ShowHUD(): void;
+	ShowDebugToggleSubCategory(Category: string): void;
+	ShowDebugForReticleTargetToggle(DesiredClass: UnrealEngineClass): void;
+	ShowDebug(DebugType: string): void;
+	RemoveDebugText(SrcActor: Actor,bLeaveDurationText: boolean): void;
+	RemoveAllDebugStrings(): void;
+	ReceiveHitBoxRelease(BoxName: string): void;
+	ReceiveHitBoxEndCursorOver(BoxName: string): void;
+	ReceiveHitBoxClick(BoxName: string): void;
+	ReceiveHitBoxBeginCursorOver(BoxName: string): void;
+	ReceiveDrawHUD(SizeX: number,SizeY: number): void;
+	Project(Location: Vector): Vector;
+	PreviousDebugTarget(): void;
+	NextDebugTarget(): void;
+	GetTextSize(text: string,OutWidth?: number,OutHeight?: number,Font?: Font,Scale?: number): {OutWidth: number, OutHeight: number};
+	GetOwningPlayerController(): PlayerController;
+	GetOwningPawn(): Pawn;
+	GetActorsInSelectionRectangle(ClassFilter: UnrealEngineClass,FirstPoint: Vector2D,SecondPoint: Vector2D,OutActors?: Actor[],bIncludeNonCollidingComponents?: boolean,bActorMustBeFullyEnclosed?: boolean): {OutActors: Actor[]};
+	DrawTextureSimple(Texture: Texture,ScreenX: number,ScreenY: number,Scale: number,bScalePosition: boolean): void;
+	DrawTexture(Texture: Texture,ScreenX: number,ScreenY: number,ScreenW: number,ScreenH: number,TextureU: number,TextureV: number,TextureUWidth: number,TextureVHeight: number,TintColor: LinearColor,BlendMode: EBlendMode,Scale: number,bScalePosition: boolean,Rotation: number,RotPivot: Vector2D): void;
+	DrawText(text: string,TextColor: LinearColor,ScreenX: number,ScreenY: number,Font: Font,Scale: number,bScalePosition: boolean): void;
+	DrawRect(RectColor: LinearColor,ScreenX: number,ScreenY: number,ScreenW: number,ScreenH: number): void;
+	DrawMaterialTriangle(Material: MaterialInterface,V0_Pos: Vector2D,V1_Pos: Vector2D,V2_Pos: Vector2D,V0_UV: Vector2D,V1_UV: Vector2D,V2_UV: Vector2D,V0_Color: LinearColor,V1_Color: LinearColor,V2_Color: LinearColor): void;
+	DrawMaterialSimple(Material: MaterialInterface,ScreenX: number,ScreenY: number,ScreenW: number,ScreenH: number,Scale: number,bScalePosition: boolean): void;
+	DrawMaterial(Material: MaterialInterface,ScreenX: number,ScreenY: number,ScreenW: number,ScreenH: number,MaterialU: number,MaterialV: number,MaterialUWidth: number,MaterialVHeight: number,Scale: number,bScalePosition: boolean,Rotation: number,RotPivot: Vector2D): void;
+	DrawLine(StartScreenX: number,StartScreenY: number,EndScreenX: number,EndScreenY: number,LineColor: LinearColor,LineThickness: number): void;
+	Deproject(ScreenX: number,ScreenY: number,WorldPosition?: Vector,WorldDirection?: Vector): {WorldPosition: Vector, WorldDirection: Vector};
+	AddHitBox(Position: Vector2D,Size: Vector2D,InName: string,bConsumesInput: boolean,Priority: number): void;
+	AddDebugText(DebugText: string,SrcActor: Actor,Duration: number,Offset: Vector,DesiredOffset: Vector,TextColor: Color,bSkipOverwriteCheck: boolean,bAbsoluteLocation: boolean,bKeepAttachedToActor: boolean,InFont: Font,FontScale: number,bDrawShadow: boolean): void;
+	static C(Other: UObject | any): HUD;
 }
 
-declare class ComponentKey { 
-	OwnerClass: UnrealEngineClass;
-	SCSVariableName: string;
-	AssociatedGuid: Guid;
-	clone() : ComponentKey;
-	static C(Other: UObject | any): ComponentKey;
+declare type ECameraProjectionMode = 'Perspective' | 'Orthographic' | 'ECameraProjectionMode_MAX';
+declare var ECameraProjectionMode : { Perspective:'Perspective',Orthographic:'Orthographic',ECameraProjectionMode_MAX:'ECameraProjectionMode_MAX', };
+declare type EBloomMethod = 'BM_SOG' | 'BM_FFT' | 'BM_MAX';
+declare var EBloomMethod : { BM_SOG:'BM_SOG',BM_FFT:'BM_FFT',BM_MAX:'BM_MAX', };
+declare type EAutoExposureMethod = 'AEM_Histogram' | 'AEM_Basic' | 'AEM_Manual' | 'AEM_MAX';
+declare var EAutoExposureMethod : { AEM_Histogram:'AEM_Histogram',AEM_Basic:'AEM_Basic',AEM_Manual:'AEM_Manual',AEM_MAX:'AEM_MAX', };
+declare type EDepthOfFieldMethod = 'DOFM_BokehDOF' | 'DOFM_Gaussian' | 'DOFM_CircleDOF' | 'DOFM_MAX';
+declare var EDepthOfFieldMethod : { DOFM_BokehDOF:'DOFM_BokehDOF',DOFM_Gaussian:'DOFM_Gaussian',DOFM_CircleDOF:'DOFM_CircleDOF',DOFM_MAX:'DOFM_MAX', };
+declare class TextureCube extends Texture { 
+	static Load(ResourceName: string): TextureCube;
+	static Find(Outer: UObject, ResourceName: string): TextureCube;
+	static GetDefaultObject(): TextureCube;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureCube;
+	static C(Other: UObject | any): TextureCube;
 }
 
-declare class ComponentOverrideRecord { 
-	ComponentClass: UnrealEngineClass;
-	ComponentTemplate: ActorComponent;
-	ComponentKey: ComponentKey;
-	CookedComponentInstancingData: BlueprintCookedComponentInstancingData;
-	clone() : ComponentOverrideRecord;
-	static C(Other: UObject | any): ComponentOverrideRecord;
-}
-
-declare class InheritableComponentHandler extends UObject { 
-	Records: ComponentOverrideRecord[];
-	UnnecessaryComponents: ActorComponent[];
-	static Load(ResourceName: string): InheritableComponentHandler;
-	static Find(Outer: UObject, ResourceName: string): InheritableComponentHandler;
-	static GetDefaultObject(): InheritableComponentHandler;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InheritableComponentHandler;
-	static C(Other: UObject | any): InheritableComponentHandler;
-}
-
-declare type EBlueprintType = 'BPTYPE_Normal' | 'BPTYPE_Const' | 'BPTYPE_MacroLibrary' | 'BPTYPE_Interface' | 'BPTYPE_LevelScript' | 'BPTYPE_FunctionLibrary' | 'BPTYPE_MAX';
-declare var EBlueprintType : { BPTYPE_Normal:'BPTYPE_Normal',BPTYPE_Const:'BPTYPE_Const',BPTYPE_MacroLibrary:'BPTYPE_MacroLibrary',BPTYPE_Interface:'BPTYPE_Interface',BPTYPE_LevelScript:'BPTYPE_LevelScript',BPTYPE_FunctionLibrary:'BPTYPE_FunctionLibrary',BPTYPE_MAX:'BPTYPE_MAX', };
-declare type EBlueprintStatus = 'BS_Unknown' | 'BS_Dirty' | 'BS_Error' | 'BS_UpToDate' | 'BS_BeingCreated' | 'BS_UpToDateWithWarnings' | 'BS_MAX';
-declare var EBlueprintStatus : { BS_Unknown:'BS_Unknown',BS_Dirty:'BS_Dirty',BS_Error:'BS_Error',BS_UpToDate:'BS_UpToDate',BS_BeingCreated:'BS_BeingCreated',BS_UpToDateWithWarnings:'BS_UpToDateWithWarnings',BS_MAX:'BS_MAX', };
-declare type ELifetimeCondition = 'COND_None' | 'COND_InitialOnly' | 'COND_OwnerOnly' | 'COND_SkipOwner' | 'COND_SimulatedOnly' | 'COND_AutonomousOnly' | 'COND_SimulatedOrPhysics' | 'COND_InitialOrOwner' | 'COND_Custom' | 'COND_ReplayOrOwner' | 'COND_ReplayOnly' | 'COND_SimulatedOnlyNoReplay' | 'COND_SimulatedOrPhysicsNoReplay' | 'COND_SkipReplay' | 'COND_Max';
-declare var ELifetimeCondition : { COND_None:'COND_None',COND_InitialOnly:'COND_InitialOnly',COND_OwnerOnly:'COND_OwnerOnly',COND_SkipOwner:'COND_SkipOwner',COND_SimulatedOnly:'COND_SimulatedOnly',COND_AutonomousOnly:'COND_AutonomousOnly',COND_SimulatedOrPhysics:'COND_SimulatedOrPhysics',COND_InitialOrOwner:'COND_InitialOrOwner',COND_Custom:'COND_Custom',COND_ReplayOrOwner:'COND_ReplayOrOwner',COND_ReplayOnly:'COND_ReplayOnly',COND_SimulatedOnlyNoReplay:'COND_SimulatedOnlyNoReplay',COND_SimulatedOrPhysicsNoReplay:'COND_SimulatedOrPhysicsNoReplay',COND_SkipReplay:'COND_SkipReplay',COND_Max:'COND_Max', };
-declare class BPVariableDescription { 
-	VarName: string;
-	VarGuid: Guid;
-	VarType: EdGraphPinType;
-	FriendlyName: string;
-	Category: string;
-	PropertyFlags: any;
-	RepNotifyFunc: string;
-	ReplicationCondition: ELifetimeCondition;
-	MetaDataArray: BPVariableMetaDataEntry[];
-	DefaultValue: string;
-	clone() : BPVariableDescription;
-	static C(Other: UObject | any): BPVariableDescription;
-}
-
-declare class Interface extends UObject { 
-	static Load(ResourceName: string): Interface;
-	static Find(Outer: UObject, ResourceName: string): Interface;
-	static GetDefaultObject(): Interface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Interface;
-	static C(Other: UObject | any): Interface;
-}
-
-declare class BPInterfaceDescription { 
-	Interface: UnrealEngineClass;
-	Graphs: EdGraph[];
-	clone() : BPInterfaceDescription;
-	static C(Other: UObject | any): BPInterfaceDescription;
-}
-
-declare class EditedDocumentInfo { 
-	EditedObjectPath: SoftObjectPath;
-	SavedViewOffset: Vector2D;
-	SavedZoomAmount: number;
-	EditedObject: UObject;
-	clone() : EditedDocumentInfo;
-	static C(Other: UObject | any): EditedDocumentInfo;
-}
-
-declare class BPEditorBookmarkNode { 
-	NodeGuid: Guid;
-	ParentGuid: Guid;
-	DisplayName: string;
-	clone() : BPEditorBookmarkNode;
-	static C(Other: UObject | any): BPEditorBookmarkNode;
-}
-
-declare class Breakpoint extends UObject { 
-	bEnabled: boolean;
-	UNode: EdGraphNode;
-	bStepOnce: boolean;
-	bStepOnce_WasPreviouslyDisabled: boolean;
-	bStepOnce_RemoveAfterHit: boolean;
-	static Load(ResourceName: string): Breakpoint;
-	static Find(Outer: UObject, ResourceName: string): Breakpoint;
-	static GetDefaultObject(): Breakpoint;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Breakpoint;
-	static C(Other: UObject | any): Breakpoint;
-}
-
-declare class EdGraphPinReference { 
-	OwningNode: any;
-	PinID: Guid;
-	clone() : EdGraphPinReference;
-	static C(Other: UObject | any): EdGraphPinReference;
-}
-
-declare class SaveGame extends UObject { 
-	static Load(ResourceName: string): SaveGame;
-	static Find(Outer: UObject, ResourceName: string): SaveGame;
-	static GetDefaultObject(): SaveGame;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SaveGame;
-	static C(Other: UObject | any): SaveGame;
-	SaveGameToSlot(SlotName: string,UserIndex: number): boolean;
-	static SaveGameToSlot(SaveGameObject: SaveGame,SlotName: string,UserIndex: number): boolean;
-}
-
-declare class Blueprint extends BlueprintCore { 
-	bRecompileOnLoad: boolean;
-	ParentClass: UnrealEngineClass;
-	PRIVATE_InnermostPreviousCDO: UObject;
-	bHasBeenRegenerated: boolean;
-	bIsRegeneratingOnLoad: boolean;
-	bIsNewlyCreated: boolean;
-	bForceFullEditor: boolean;
-	bQueuedForCompilation: boolean;
-	bRunConstructionScriptOnDrag: boolean;
-	bRunConstructionScriptInSequencer: boolean;
-	bGenerateConstClass: boolean;
-	bGenerateAbstractClass: boolean;
-	BlueprintDescription: string;
-	BlueprintCategory: string;
-	HideCategories: string[];
-	NativizationFlag: EBlueprintNativizationFlag;
-	bDisplayCompilePIEWarning: boolean;
-	SearchGuid: Guid;
-	bDeprecate: boolean;
-	CompileMode: EBlueprintCompileMode;
-	SimpleConstructionScript: SimpleConstructionScript;
-	UbergraphPages: EdGraph[];
-	FunctionGraphs: EdGraph[];
-	DelegateSignatureGraphs: EdGraph[];
-	MacroGraphs: EdGraph[];
-	IntermediateGeneratedGraphs: EdGraph[];
-	EventGraphs: EdGraph[];
-	PRIVATE_CachedMacroInfo: any;
-	bDuplicatingReadOnly: boolean;
-	ComponentTemplates: ActorComponent[];
-	Timelines: TimelineTemplate[];
-	InheritableComponentHandler: InheritableComponentHandler;
-	BlueprintType: EBlueprintType;
-	Status: EBlueprintStatus;
-	NewVariables: BPVariableDescription[];
-	CategorySorting: string[];
-	ImplementedInterfaces: BPInterfaceDescription[];
-	BlueprintSystemVersion: number;
-	LastEditedDocuments: EditedDocumentInfo[];
-	Bookmarks: any;
-	BookmarkNodes: BPEditorBookmarkNode[];
-	Breakpoints: Breakpoint[];
-	WatchedPins: EdGraphPinReference[];
-	DeprecatedPinWatches: EdGraphPin_Deprecated[];
-	ComponentTemplateNameIndex: any;
-	OldToNewComponentTemplateNames: any;
-	ThumbnailInfo: ThumbnailInfo;
-	bBeingCompiled: boolean;
-	CrcLastCompiledCDO: any;
-	CrcLastCompiledSignature: any;
-	OriginalClass: UnrealEngineClass;
-	bNativize: boolean;
-	static Load(ResourceName: string): Blueprint;
-	static Find(Outer: UObject, ResourceName: string): Blueprint;
-	static GetDefaultObject(): Blueprint;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Blueprint;
-	static C(Other: UObject | any): Blueprint;
-	AddComponentsToBlueprint(Components: ActorComponent[],bHarvesting: boolean,OptionalNewRootComponent: ActorComponent,bKeepMobility: boolean): void;
-	CompileBlueprint(): void;
-	GetParentClassOfBlueprint(): UnrealEngineClass;
-	RemoveComponentFromBlueprint(RemoveComponent: ActorComponent,bPromoteChildren: boolean): void;
-	GetBlueprintGeneratedClass(): UnrealEngineClass;
-	CreateSaveGameObjectFromBlueprint(): SaveGame;
-	static AddComponentsToBlueprint(Blueprint: Blueprint,Components: ActorComponent[],bHarvesting: boolean,OptionalNewRootComponent: ActorComponent,bKeepMobility: boolean): void;
-	static CompileBlueprint(Blueprint: Blueprint): void;
-	static GetParentClassOfBlueprint(Blueprint: Blueprint): UnrealEngineClass;
-	static RemoveComponentFromBlueprint(Blueprint: Blueprint,RemoveComponent: ActorComponent,bPromoteChildren: boolean): void;
-	static GetBlueprintGeneratedClass(Blueprint: Blueprint): UnrealEngineClass;
-	static CreateSaveGameObjectFromBlueprint(SaveGameBlueprint: Blueprint): SaveGame;
-}
-
-declare class SkeletalMesh extends UObject { 
-	Skeleton: Skeleton;
-	ImportedBounds: BoxSphereBounds;
-	ExtendedBounds: BoxSphereBounds;
-	PositiveBoundsExtension: Vector;
-	NegativeBoundsExtension: Vector;
-	Materials: SkeletalMaterial[];
-	SkelMirrorTable: BoneMirrorInfo[];
-	LODInfo: SkeletalMeshLODInfo[];
-	MinLOD: PerPlatformInt;
-	LODSettings: SkeletalMeshLODSettings;
-	SkelMirrorAxis: EAxis;
-	SkelMirrorFlipAxis: EAxis;
-	bUseFullPrecisionUVs: boolean;
-	bUseHighPrecisionTangentBasis: boolean;
-	bHasBeenSimplified: boolean;
-	bHasVertexColors: boolean;
-	bEnablePerPolyCollision: boolean;
-	VertexColorGuid: Guid;
-	BodySetup: BodySetup;
-	PhysicsAsset: PhysicsAsset;
-	ShadowPhysicsAsset: PhysicsAsset;
-	NodeMappingData: NodeMappingContainer[];
-	AssetImportData: AssetImportData;
-	SourceFilePath: string;
-	SourceFileTimestamp: string;
-	ThumbnailInfo: ThumbnailInfo;
-	bHasCustomDefaultEditorCamera: boolean;
-	DefaultEditorCameraLocation: Vector;
-	DefaultEditorCameraRotation: Rotator;
-	DefaultEditorCameraLookAt: Vector;
-	DefaultEditorCameraOrthoZoom: number;
-	PreviewAttachedAssetContainer: PreviewAssetAttachContainer;
-	MorphTargets: MorphTarget[];
-	FloorOffset: number;
-	RetargetBasePose: Transform[];
-	ClothingAssets: ClothingAssetData_Legacy[];
-	PostProcessAnimBlueprint: UnrealEngineClass;
-	MeshClothingAssets: ClothingAssetBase[];
-	SamplingInfo: SkeletalMeshSamplingInfo;
-	AssetUserData: AssetUserData[];
-	Sockets: SkeletalMeshSocket[];
-	static Load(ResourceName: string): SkeletalMesh;
-	static Find(Outer: UObject, ResourceName: string): SkeletalMesh;
-	static GetDefaultObject(): SkeletalMesh;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMesh;
-	SetLODSettings(InLODSettings: SkeletalMeshLODSettings): void;
-	NumSockets(): number;
-	IsSectionUsingCloth(InSectionIndex: number,bCheckCorrespondingSections: boolean): boolean;
-	GetSocketByIndex(index: number): SkeletalMeshSocket;
-	GetNodeMappingContainer(SourceAsset: Blueprint): NodeMappingContainer;
-	GetImportedBounds(): BoxSphereBounds;
-	GetBounds(): BoxSphereBounds;
-	FindSocketAndIndex(InSocketName: string,OutIndex?: number): {OutIndex: number, $: SkeletalMeshSocket};
-	FindSocket(InSocketName: string): SkeletalMeshSocket;
-	static C(Other: UObject | any): SkeletalMesh;
-}
-
-declare class SkelMeshComponentLODInfo { 
-	HiddenMaterials: boolean[];
-	clone() : SkelMeshComponentLODInfo;
-	static C(Other: UObject | any): SkelMeshComponentLODInfo;
+declare type EReflectionsType = 'ScreenSpace' | 'RayTracing' | 'EReflectionsType_MAX';
+declare var EReflectionsType : { ScreenSpace:'ScreenSpace',RayTracing:'RayTracing',EReflectionsType_MAX:'EReflectionsType_MAX', };
+declare type EReflectedAndRefractedRayTracedShadows = 'Disabled' | 'Hard_shadows' | 'Area_shadows' | 'EReflectedAndRefractedRayTracedShadows_MAX';
+declare var EReflectedAndRefractedRayTracedShadows : { Disabled:'Disabled',Hard_shadows:'Hard_shadows',Area_shadows:'Area_shadows',EReflectedAndRefractedRayTracedShadows_MAX:'EReflectedAndRefractedRayTracedShadows_MAX', };
+declare type ETranslucencyType = 'Raster' | 'RayTracing' | 'ETranslucencyType_MAX';
+declare var ETranslucencyType : { Raster:'Raster',RayTracing:'RayTracing',ETranslucencyType_MAX:'ETranslucencyType_MAX', };
+declare class WeightedBlendable { 
+	Weight: number;
+	UObject: UObject;
+	clone() : WeightedBlendable;
+	static C(Other: UObject | any): WeightedBlendable;
 }
 
-declare type EVisibilityBasedAnimTickOption = 'AlwaysTickPoseAndRefreshBones' | 'AlwaysTickPose' | 'OnlyTickMontagesWhenNotRendered' | 'OnlyTickPoseWhenRendered' | 'EVisibilityBasedAnimTickOption_MAX';
-declare var EVisibilityBasedAnimTickOption : { AlwaysTickPoseAndRefreshBones:'AlwaysTickPoseAndRefreshBones',AlwaysTickPose:'AlwaysTickPose',OnlyTickMontagesWhenNotRendered:'OnlyTickMontagesWhenNotRendered',OnlyTickPoseWhenRendered:'OnlyTickPoseWhenRendered',EVisibilityBasedAnimTickOption_MAX:'EVisibilityBasedAnimTickOption_MAX', };
-declare class SkelMeshSkinWeightInfo { 
-	Bones: number;
-	Weights: number;
-	clone() : SkelMeshSkinWeightInfo;
-	static C(Other: UObject | any): SkelMeshSkinWeightInfo;
-	BreakSkinWeightInfo(Bone0?: number,Weight0?: number,Bone1?: number,Weight1?: number,Bone2?: number,Weight2?: number,Bone3?: number,Weight3?: number): {Bone0: number, Weight0: number, Bone1: number, Weight1: number, Bone2: number, Weight2: number, Bone3: number, Weight3: number};
-	static BreakSkinWeightInfo(InWeight: SkelMeshSkinWeightInfo,Bone0?: number,Weight0?: number,Bone1?: number,Weight1?: number,Bone2?: number,Weight2?: number,Bone3?: number,Weight3?: number): {Bone0: number, Weight0: number, Bone1: number, Weight1: number, Bone2: number, Weight2: number, Bone3: number, Weight3: number};
-	static MakeSkinWeightInfo(Bone0: number,Weight0: number,Bone1: number,Weight1: number,Bone2: number,Weight2: number,Bone3: number,Weight3: number): SkelMeshSkinWeightInfo;
+declare class WeightedBlendables { 
+	Array: WeightedBlendable[];
+	clone() : WeightedBlendables;
+	static C(Other: UObject | any): WeightedBlendables;
 }
 
-declare type EPhysBodyOp = 'PBO_None' | 'PBO_Term' | 'PBO_MAX';
-declare var EPhysBodyOp : { PBO_None:'PBO_None',PBO_Term:'PBO_Term',PBO_MAX:'PBO_MAX', };
-declare class SkinnedMeshComponent extends MeshComponent { 
-	SkeletalMesh: SkeletalMesh;
-	MasterPoseComponent: any;
-	WireframeColor: Color;
-	PhysicsAssetOverride: PhysicsAsset;
-	ForcedLodModel: number;
-	MinLodModel: number;
-	StreamingDistanceMultiplier: number;
-	LODInfo: SkelMeshComponentLODInfo[];
-	VisibilityBasedAnimTickOption: EVisibilityBasedAnimTickOption;
-	bOverrideMinLOD: boolean;
-	bUseBoundsFromMasterPoseComponent: boolean;
-	bForceWireframe: boolean;
-	bDisplayBones: boolean;
-	bDisableMorphTarget: boolean;
-	bHideSkin: boolean;
-	bPerBoneMotionBlur: boolean;
-	bComponentUseFixedSkelBounds: boolean;
-	bConsiderAllBodiesForBounds: boolean;
-	bSyncAttachParentLOD: boolean;
-	bCanHighlightSelectedSections: boolean;
-	bRecentlyRendered: boolean;
-	bCastCapsuleDirectShadow: boolean;
-	bCastCapsuleIndirectShadow: boolean;
-	bCPUSkinning: boolean;
-	bEnableUpdateRateOptimizations: boolean;
-	bDisplayDebugUpdateRateOptimizations: boolean;
-	bRenderStatic: boolean;
-	bCachedLocalBoundsUpToDate: boolean;
-	bForceMeshObjectUpdate: boolean;
-	CapsuleIndirectShadowMinVisibility: number;
-	CachedLocalBounds: BoxSphereBounds;
-	static Load(ResourceName: string): SkinnedMeshComponent;
-	static Find(Outer: UObject, ResourceName: string): SkinnedMeshComponent;
-	static GetDefaultObject(): SkinnedMeshComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkinnedMeshComponent;
-	UnHideBoneByName(BoneName: string): void;
-	TransformToBoneSpace(BoneName: string,InPosition: Vector,InRotation: Rotator,OutPosition?: Vector,OutRotation?: Rotator): {OutPosition: Vector, OutRotation: Rotator};
-	TransformFromBoneSpace(BoneName: string,InPosition: Vector,InRotation: Rotator,OutPosition?: Vector,OutRotation?: Rotator): {OutPosition: Vector, OutRotation: Rotator};
-	ShowMaterialSection(MaterialID: number,bShow: boolean,LODIndex: number): void;
-	ShowAllMaterialSections(LODIndex: number): void;
-	SetVertexColorOverride_LinearColor(LODIndex: number,VertexColors: LinearColor[]): void;
-	SetSkinWeightOverride(LODIndex: number,SkinWeights: SkelMeshSkinWeightInfo[]): void;
-	SetSkeletalMesh(NewMesh: SkeletalMesh,bReinitPose: boolean): void;
-	SetRenderStatic(bNewValue: boolean): void;
-	SetPhysicsAsset(NewPhysicsAsset: PhysicsAsset,bForceReInit: boolean): void;
-	SetMinLOD(InNewMinLOD: number): void;
-	SetMasterPoseComponent(NewMasterBoneComponent: SkinnedMeshComponent,bForceUpdate: boolean): void;
-	SetForcedLOD(InNewForcedLOD: number): void;
-	SetCastCapsuleIndirectShadow(bNewValue: boolean): void;
-	SetCastCapsuleDirectShadow(bNewValue: boolean): void;
-	SetCapsuleIndirectShadowMinVisibility(NewValue: number): void;
-	IsMaterialSectionShown(MaterialID: number,LODIndex: number): boolean;
-	IsBoneHiddenByName(BoneName: string): boolean;
-	HideBoneByName(BoneName: string,PhysBodyOption: EPhysBodyOp): void;
-	GetSocketBoneName(InSocketName: string): string;
-	GetRefPosePosition(BoneIndex: number): Vector;
-	GetParentBone(BoneName: string): string;
-	GetNumLODs(): number;
-	GetNumBones(): number;
-	GetDeltaTransformFromRefPose(BoneName: string,BaseName: string): Transform;
-	GetBoneName(BoneIndex: number): string;
-	GetBoneIndex(BoneName: string): number;
-	FindClosestBone_K2(TestLocation: Vector,BoneLocation?: Vector,IgnoreScale?: number,bRequirePhysicsAsset?: boolean): {BoneLocation: Vector, $: string};
-	ClearVertexColorOverride(LODIndex: number): void;
-	ClearSkinWeightOverride(LODIndex: number): void;
-	BoneIsChildOf(BoneName: string,ParentBoneName: string): boolean;
-	static C(Other: UObject | any): SkinnedMeshComponent;
-}
-
-declare class AnimGroupInfo { 
-	Name: string;
-	Color: LinearColor;
-	clone() : AnimGroupInfo;
-	static C(Other: UObject | any): AnimGroupInfo;
-}
-
-declare class AnimParentNodeAssetOverride { 
-	NewAsset: AnimationAsset;
-	ParentNodeGuid: Guid;
-	clone() : AnimParentNodeAssetOverride;
-	static C(Other: UObject | any): AnimParentNodeAssetOverride;
-}
-
-declare class PoseWatch extends UObject { 
-	UNode: EdGraphNode;
-	PoseWatchColour: Color;
-	static Load(ResourceName: string): PoseWatch;
-	static Find(Outer: UObject, ResourceName: string): PoseWatch;
-	static GetDefaultObject(): PoseWatch;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PoseWatch;
-	static C(Other: UObject | any): PoseWatch;
-}
-
-declare class AnimBlueprint extends Blueprint { 
-	TargetSkeleton: Skeleton;
-	Groups: AnimGroupInfo[];
-	bUseMultiThreadedAnimationUpdate: boolean;
-	bWarnAboutBlueprintUsage: boolean;
-	ParentAssetOverrides: AnimParentNodeAssetOverride[];
-	PoseWatches: PoseWatch[];
-	PreviewSkeletalMesh: SkeletalMesh;
-	static Load(ResourceName: string): AnimBlueprint;
-	static Find(Outer: UObject, ResourceName: string): AnimBlueprint;
-	static GetDefaultObject(): AnimBlueprint;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimBlueprint;
-	static C(Other: UObject | any): AnimBlueprint;
-}
-
-declare class SingleAnimationPlayData { 
-	AnimToPlay: AnimationAsset;
-	bSavedLooping: boolean;
-	bSavedPlaying: boolean;
-	SavedPosition: number;
-	SavedPlayRate: number;
-	clone() : SingleAnimationPlayData;
-	static C(Other: UObject | any): SingleAnimationPlayData;
-}
-
-declare type EDynamicActorScene = 'Default' | 'UseSyncScene' | 'UseAsyncScene' | 'EDynamicActorScene_MAX';
-declare var EDynamicActorScene : { Default:'Default',UseSyncScene:'UseSyncScene',UseAsyncScene:'UseAsyncScene',EDynamicActorScene_MAX:'EDynamicActorScene_MAX', };
-declare type EKinematicBonesUpdateToPhysics = 'SkipSimulatingBones' | 'SkipAllBones' | 'EKinematicBonesUpdateToPhysics_MAX';
-declare var EKinematicBonesUpdateToPhysics : { SkipSimulatingBones:'SkipSimulatingBones',SkipAllBones:'SkipAllBones',EKinematicBonesUpdateToPhysics_MAX:'EKinematicBonesUpdateToPhysics_MAX', };
-declare type EPhysicsTransformUpdateMode = 'SimulationUpatesComponentTransform' | 'ComponentTransformIsKinematic' | 'EPhysicsTransformUpdateMode_MAX';
-declare var EPhysicsTransformUpdateMode : { SimulationUpatesComponentTransform:'SimulationUpatesComponentTransform',ComponentTransformIsKinematic:'ComponentTransformIsKinematic',EPhysicsTransformUpdateMode_MAX:'EPhysicsTransformUpdateMode_MAX', };
-declare type EAnimationMode = 'AnimationBlueprint' | 'AnimationSingleNode' | 'AnimationCustomMode' | 'EAnimationMode_MAX';
-declare var EAnimationMode : { AnimationBlueprint:'AnimationBlueprint',AnimationSingleNode:'AnimationSingleNode',AnimationCustomMode:'AnimationCustomMode',EAnimationMode_MAX:'EAnimationMode_MAX', };
-declare class ClothingSimulationFactory extends UObject { 
-	static Load(ResourceName: string): ClothingSimulationFactory;
-	static Find(Outer: UObject, ResourceName: string): ClothingSimulationFactory;
-	static GetDefaultObject(): ClothingSimulationFactory;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingSimulationFactory;
-	static C(Other: UObject | any): ClothingSimulationFactory;
-}
-
-declare class ClothingSimulationInteractor extends UObject { 
-	static Load(ResourceName: string): ClothingSimulationInteractor;
-	static Find(Outer: UObject, ResourceName: string): ClothingSimulationInteractor;
-	static GetDefaultObject(): ClothingSimulationInteractor;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingSimulationInteractor;
-	PhysicsAssetUpdated(): void;
-	ClothConfigUpdated(): void;
-	static C(Other: UObject | any): ClothingSimulationInteractor;
-}
-
-declare type ERelativeTransformSpace = 'RTS_World' | 'RTS_Actor' | 'RTS_Component' | 'RTS_ParentBoneSpace' | 'RTS_MAX';
-declare var ERelativeTransformSpace : { RTS_World:'RTS_World',RTS_Actor:'RTS_Actor',RTS_Component:'RTS_Component',RTS_ParentBoneSpace:'RTS_ParentBoneSpace',RTS_MAX:'RTS_MAX', };
-declare class SkeletalMeshComponent extends SkinnedMeshComponent { 
-	AnimationBlueprint: AnimBlueprint;
-	AnimBlueprintGeneratedClass: UnrealEngineClass;
-	AnimClass: UnrealEngineClass;
-	AnimScriptInstance: AnimInstance;
-	SubInstances: AnimInstance[];
-	PostProcessAnimInstance: AnimInstance;
-	AnimationData: SingleAnimationPlayData;
-	RootBoneTranslation: Vector;
-	LineCheckBoundsScale: Vector;
-	CachedBoneSpaceTransforms: Transform[];
-	CachedComponentSpaceTransforms: Transform[];
-	GlobalAnimRateScale: number;
-	UseAsyncScene: EDynamicActorScene;
-	KinematicBonesUpdateType: EKinematicBonesUpdateToPhysics;
-	PhysicsTransformUpdateMode: EPhysicsTransformUpdateMode;
-	AnimationMode: EAnimationMode;
-	bDisablePostProcessBlueprint: boolean;
-	bUpdateOverlapsOnAnimationFinalize: boolean;
-	bHasValidBodies: boolean;
-	bBlendPhysics: boolean;
-	bEnablePhysicsOnDedicatedServer: boolean;
-	bUpdateJointsFromAnimation: boolean;
-	bDisableClothSimulation: boolean;
-	bAllowAnimCurveEvaluation: boolean;
-	bDisableAnimCurves: boolean;
-	bCollideWithEnvironment: boolean;
-	bCollideWithAttachedChildren: boolean;
-	bLocalSpaceSimulation: boolean;
-	bResetAfterTeleport: boolean;
-	bNoSkeletonUpdate: boolean;
-	bPauseAnims: boolean;
-	bUseRefPoseOnInitAnim: boolean;
-	bEnablePerPolyCollision: boolean;
-	bForceRefpose: boolean;
-	bOnlyAllowAutonomousTickPose: boolean;
-	bIsAutonomousTickPose: boolean;
-	bOldForceRefPose: boolean;
-	bShowPrePhysBones: boolean;
-	bRequiredBonesUpToDate: boolean;
-	bAnimTreeInitialised: boolean;
-	bIncludeComponentLocationIntoBounds: boolean;
-	bEnableLineCheckWithBounds: boolean;
-	bUseBendingElements: boolean;
-	bUseTetrahedralConstraints: boolean;
-	bUseThinShellVolumeConstraints: boolean;
-	bUseSelfCollisions: boolean;
-	bUseContinuousCollisionDetection: boolean;
-	bUpdateAnimationInEditor: boolean;
-	bNeedsQueuedAnimEventsDispatched: boolean;
-	CachedAnimCurveUidVersion: any;
-	ClothBlendWeight: number;
-	EdgeStiffness: number;
-	BendingStiffness: number;
-	AreaStiffness: number;
-	VolumeStiffness: number;
-	StrainLimitingStiffness: number;
-	ShapeTargetStiffness: number;
-	DisallowedAnimCurves: string[];
-	BodySetup: BodySetup;
-	OnConstraintBroken: UnrealEngineMulticastDelegate<(ConstraintIndex: number) => void>;
-	ClothingSimulationFactory: UnrealEngineClass;
-	TeleportDistanceThreshold: number;
-	TeleportRotationThreshold: number;
-	LastPoseTickFrame: any;
-	ClothingInteractor: ClothingSimulationInteractor;
-	OnAnimInitialized: UnrealEngineMulticastDelegate<() => void>;
-	SequenceToPlay: AnimSequence;
-	AnimToPlay: AnimationAsset;
-	bDefaultLooping: boolean;
-	bDefaultPlaying: boolean;
-	DefaultPosition: number;
-	DefaultPlayRate: number;
-	static Load(ResourceName: string): SkeletalMeshComponent;
-	static Find(Outer: UObject, ResourceName: string): SkeletalMeshComponent;
-	static GetDefaultObject(): SkeletalMeshComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMeshComponent;
-	UnbindClothFromMasterPoseComponent(bRestoreSimulationSpace: boolean): void;
-	ToggleDisablePostProcessBlueprint(): void;
-	TermBodiesBelow(ParentBoneName: string): void;
-	SuspendClothingSimulation(): void;
-	Stop(): void;
-	SnapshotPose(Snapshot?: PoseSnapshot): {Snapshot: PoseSnapshot};
-	SetUpdateAnimationInEditor(NewUpdateState: boolean): void;
-	SetTeleportRotationThreshold(Threshold: number): void;
-	SetTeleportDistanceThreshold(Threshold: number): void;
-	SetPosition(InPos: number,bFireNotifies: boolean): void;
-	SetPlayRate(Rate: number): void;
-	SetPhysicsBlendWeight(PhysicsBlendWeight: number): void;
-	SetNotifyRigidBodyCollisionBelow(bNewNotifyRigidBodyCollision: boolean,BoneName: string,bIncludeSelf: boolean): void;
-	SetMorphTarget(MorphTargetName: string,Value: number,bRemoveZeroWeight: boolean): void;
-	SetEnablePhysicsBlending(bNewBlendPhysics: boolean): void;
-	SetEnableGravityOnAllBodiesBelow(bEnableGravity: boolean,BoneName: string,bIncludeSelf: boolean): void;
-	SetEnableBodyGravity(bEnableGravity: boolean,BoneName: string): void;
-	SetDisablePostProcessBlueprint(bInDisablePostProcess: boolean): void;
-	SetDisableAnimCurves(bInDisableAnimCurves: boolean): void;
-	SetConstraintProfileForAll(ProfileName: string,bDefaultIfNotFound: boolean): void;
-	SetConstraintProfile(JointName: string,ProfileName: string,bDefaultIfNotFound: boolean): void;
-	SetClothMaxDistanceScale(Scale: number): void;
-	SetBodyNotifyRigidBodyCollision(bNewNotifyRigidBodyCollision: boolean,BoneName: string): void;
-	SetAnimationMode(InAnimationMode: EAnimationMode): void;
-	SetAnimation(NewAnimToPlay: AnimationAsset): void;
-	SetAngularLimits(InBoneName: string,Swing1LimitAngle: number,TwistLimitAngle: number,Swing2LimitAngle: number): void;
-	SetAllowedAnimCurvesEvaluation(List: string[],bAllow: boolean): void;
-	SetAllowAnimCurveEvaluation(bInAllow: boolean): void;
-	SetAllMotorsAngularVelocityDrive(bEnableSwingDrive: boolean,bEnableTwistDrive: boolean,bSkipCustomPhysicsType: boolean): void;
-	SetAllMotorsAngularPositionDrive(bEnableSwingDrive: boolean,bEnableTwistDrive: boolean,bSkipCustomPhysicsType: boolean): void;
-	SetAllMotorsAngularDriveParams(InSpring: number,InDamping: number,InForceLimit: number,bSkipCustomPhysicsType: boolean): void;
-	SetAllBodiesSimulatePhysics(bNewSimulate: boolean): void;
-	SetAllBodiesPhysicsBlendWeight(PhysicsBlendWeight: number,bSkipCustomPhysicsType: boolean): void;
-	SetAllBodiesBelowSimulatePhysics(InBoneName: string,bNewSimulate: boolean,bIncludeSelf: boolean): void;
-	SetAllBodiesBelowPhysicsBlendWeight(InBoneName: string,PhysicsBlendWeight: number,bSkipCustomPhysicsType: boolean,bIncludeSelf: boolean): void;
-	ResumeClothingSimulation(): void;
-	ResetClothTeleportMode(): void;
-	ResetAnimInstanceDynamics(InTeleportType: ETeleportType): void;
-	ResetAllowedAnimCurveEvaluation(): void;
-	ResetAllBodiesSimulatePhysics(): void;
-	PlayAnimation(NewAnimToPlay: AnimationAsset,bLooping: boolean): void;
-	Play(bLooping: boolean): void;
-	OverrideAnimationData(InAnimToPlay: AnimationAsset,bIsLooping: boolean,bIsPlaying: boolean,Position: number,PlayRate: number): void;
-	K2_SetAnimInstanceClass(NewClass: UnrealEngineClass): void;
-	K2_GetClosestPointOnPhysicsAsset(WorldPosition: Vector,ClosestWorldPosition?: Vector,Normal?: Vector,BoneName?: string,Distance?: number): {ClosestWorldPosition: Vector, Normal: Vector, BoneName: string, Distance: number, $: boolean};
-	IsPlaying(): boolean;
-	IsClothingSimulationSuspended(): boolean;
-	IsBodyGravityEnabled(BoneName: string): boolean;
-	HasValidAnimationInstance(): boolean;
-	GetTeleportRotationThreshold(): number;
-	GetTeleportDistanceThreshold(): number;
-	GetSubInstanceByName(InName: string): AnimInstance;
-	GetSkeletalCenterOfMass(): Vector;
-	GetPostProcessInstance(): AnimInstance;
-	GetPosition(): number;
-	GetPlayRate(): number;
-	GetMorphTarget(MorphTargetName: string): number;
-	GetDisablePostProcessBlueprint(): boolean;
-	GetDisableAnimCurves(): boolean;
-	GetCurrentJointAngles(InBoneName: string,Swing1Angle?: number,TwistAngle?: number,Swing2Angle?: number): {Swing1Angle: number, TwistAngle: number, Swing2Angle: number};
-	GetClothMaxDistanceScale(): number;
-	GetClothingSimulationInteractor(): ClothingSimulationInteractor;
-	GetBoneMass(BoneName: string,bScaleMass: boolean): number;
-	GetAnimInstance(): AnimInstance;
-	GetAnimationMode(): EAnimationMode;
-	GetAllowedAnimCurveEvaluate(): boolean;
-	ForceClothNextUpdateTeleportAndReset(): void;
-	ForceClothNextUpdateTeleport(): void;
-	FindConstraintBoneName(ConstraintIndex: number): string;
-	ClearMorphTargets(): void;
-	BreakConstraint(Impulse: Vector,HitLocation: Vector,InBoneName: string): void;
-	BindClothToMasterPoseComponent(): void;
-	AllowAnimCurveEvaluation(NameOfCurve: string,bAllow: boolean): void;
-	AddImpulseToAllBodiesBelow(Impulse: Vector,BoneName: string,bVelChange: boolean,bIncludeSelf: boolean): void;
-	AddForceToAllBodiesBelow(Force: Vector,BoneName: string,bAccelChange: boolean,bIncludeSelf: boolean): void;
-	AccumulateAllBodiesBelowPhysicsBlendWeight(InBoneName: string,AddPhysicsBlendWeight: number,bSkipCustomPhysicsType: boolean): void;
-	static C(Other: UObject | any): SkeletalMeshComponent;
-	K2_DirectionBetweenSockets(SocketOrBoneNameFrom: string,SocketOrBoneNameTo: string): Vector;
-	K2_DistanceBetweenTwoSocketsAndMapRange(SocketOrBoneNameA: string,SocketSpaceA: ERelativeTransformSpace,SocketOrBoneNameB: string,SocketSpaceB: ERelativeTransformSpace,bRemapRange: boolean,InRangeMin: number,InRangeMax: number,OutRangeMin: number,OutRangeMax: number): number;
-	static K2_DirectionBetweenSockets(Component: SkeletalMeshComponent,SocketOrBoneNameFrom: string,SocketOrBoneNameTo: string): Vector;
-	static K2_DistanceBetweenTwoSocketsAndMapRange(Component: SkeletalMeshComponent,SocketOrBoneNameA: string,SocketSpaceA: ERelativeTransformSpace,SocketOrBoneNameB: string,SocketSpaceB: ERelativeTransformSpace,bRemapRange: boolean,InRangeMin: number,InRangeMax: number,OutRangeMin: number,OutRangeMax: number): number;
-}
-
-declare type EPlaneConstraintAxisSetting = 'Custom' | 'X' | 'Y' | 'Z' | 'UseGlobalPhysicsSetting' | 'EPlaneConstraintAxisSetting_MAX';
-declare var EPlaneConstraintAxisSetting : { Custom:'Custom',X:'X',Y:'Y',Z:'Z',UseGlobalPhysicsSetting:'UseGlobalPhysicsSetting',EPlaneConstraintAxisSetting_MAX:'EPlaneConstraintAxisSetting_MAX', };
-declare class MovementComponent extends ActorComponent { 
-	UpdatedComponent: SceneComponent;
-	UpdatedPrimitive: PrimitiveComponent;
-	Velocity: Vector;
-	PlaneConstraintNormal: Vector;
-	PlaneConstraintOrigin: Vector;
-	bUpdateOnlyIfRendered: boolean;
-	bAutoUpdateTickRegistration: boolean;
-	bTickBeforeOwner: boolean;
-	bAutoRegisterUpdatedComponent: boolean;
-	bConstrainToPlane: boolean;
-	bSnapToPlaneAtStart: boolean;
-	bAutoRegisterPhysicsVolumeUpdates: boolean;
-	bComponentShouldUpdatePhysicsVolume: boolean;
-	PlaneConstraintAxisSetting: EPlaneConstraintAxisSetting;
-	static Load(ResourceName: string): MovementComponent;
-	static Find(Outer: UObject, ResourceName: string): MovementComponent;
-	static GetDefaultObject(): MovementComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovementComponent;
-	StopMovementImmediately(): void;
-	SnapUpdatedComponentToPlane(): void;
-	SetUpdatedComponent(NewUpdatedComponent: SceneComponent): void;
-	SetPlaneConstraintOrigin(PlaneOrigin: Vector): void;
-	SetPlaneConstraintNormal(PlaneNormal: Vector): void;
-	SetPlaneConstraintFromVectors(Forward: Vector,Up: Vector): void;
-	SetPlaneConstraintEnabled(bEnabled: boolean): void;
-	SetPlaneConstraintAxisSetting(NewAxisSetting: EPlaneConstraintAxisSetting): void;
-	PhysicsVolumeChanged(NewVolume: PhysicsVolume): void;
-	K2_MoveUpdatedComponent(Delta: Vector,NewRotation: Rotator,OutHit?: HitResult,bSweep?: boolean,bTeleport?: boolean): {OutHit: HitResult, $: boolean};
-	K2_GetModifiedMaxSpeed(): number;
-	K2_GetMaxSpeedModifier(): number;
-	IsExceedingMaxSpeed(MaxSpeed: number): boolean;
-	GetPlaneConstraintOrigin(): Vector;
-	GetPlaneConstraintNormal(): Vector;
-	GetPlaneConstraintAxisSetting(): EPlaneConstraintAxisSetting;
-	GetPhysicsVolume(): PhysicsVolume;
-	GetMaxSpeed(): number;
-	GetGravityZ(): number;
-	ConstrainNormalToPlane(Normal: Vector): Vector;
-	ConstrainLocationToPlane(Location: Vector): Vector;
-	ConstrainDirectionToPlane(Direction: Vector): Vector;
-	static C(Other: UObject | any): MovementComponent;
-}
-
-declare class MovementProperties { 
-	bCanCrouch: boolean;
-	bCanJump: boolean;
-	bCanWalk: boolean;
-	bCanSwim: boolean;
-	bCanFly: boolean;
-	clone() : MovementProperties;
-	static C(Other: UObject | any): MovementProperties;
-}
-
-declare class NavAgentProperties extends MovementProperties { 
-	AgentRadius: number;
-	AgentHeight: number;
-	AgentStepHeight: number;
-	NavWalkingSearchHeightScale: number;
-	PreferredNavData: SoftClassPath;
-	clone() : NavAgentProperties;
-	static C(Other: UObject | any): NavAgentProperties;
-}
-
-declare class NavMovementComponent extends MovementComponent { 
-	NavAgentProps: NavAgentProperties;
-	FixedPathBrakingDistance: number;
-	bUpdateNavAgentWithOwnersCollision: boolean;
-	bUseAccelerationForPaths: boolean;
-	bUseFixedBrakingDistanceForPaths: boolean;
-	MovementState: MovementProperties;
-	PathFollowingComp: UObject;
-	static Load(ResourceName: string): NavMovementComponent;
-	static Find(Outer: UObject, ResourceName: string): NavMovementComponent;
-	static GetDefaultObject(): NavMovementComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavMovementComponent;
-	StopMovementKeepPathing(): void;
-	StopActiveMovement(): void;
-	IsSwimming(): boolean;
-	IsMovingOnGround(): boolean;
-	IsFlying(): boolean;
-	IsFalling(): boolean;
-	IsCrouching(): boolean;
-	static C(Other: UObject | any): NavMovementComponent;
-}
-
-declare class PawnMovementComponent extends NavMovementComponent { 
-	PawnOwner: Pawn;
-	static Load(ResourceName: string): PawnMovementComponent;
-	static Find(Outer: UObject, ResourceName: string): PawnMovementComponent;
-	static GetDefaultObject(): PawnMovementComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnMovementComponent;
-	K2_GetInputVector(): Vector;
-	IsMoveInputIgnored(): boolean;
-	GetPendingInputVector(): Vector;
-	GetPawnOwner(): Pawn;
-	GetLastInputVector(): Vector;
-	ConsumeInputVector(): Vector;
-	AddInputVector(WorldVector: Vector,bForce: boolean): void;
-	static C(Other: UObject | any): PawnMovementComponent;
-}
-
-declare type EMovementMode = 'MOVE_None' | 'MOVE_Walking' | 'MOVE_NavWalking' | 'MOVE_Falling' | 'MOVE_Swimming' | 'MOVE_Flying' | 'MOVE_Custom' | 'MOVE_MAX';
-declare var EMovementMode : { MOVE_None:'MOVE_None',MOVE_Walking:'MOVE_Walking',MOVE_NavWalking:'MOVE_NavWalking',MOVE_Falling:'MOVE_Falling',MOVE_Swimming:'MOVE_Swimming',MOVE_Flying:'MOVE_Flying',MOVE_Custom:'MOVE_Custom',MOVE_MAX:'MOVE_MAX', };
-declare type ENetworkSmoothingMode = 'Disabled' | 'Linear' | 'Exponential' | 'Replay' | 'ENetworkSmoothingMode_MAX';
-declare var ENetworkSmoothingMode : { Disabled:'Disabled',Linear:'Linear',Exponential:'Exponential',Replay:'Replay',ENetworkSmoothingMode_MAX:'ENetworkSmoothingMode_MAX', };
-declare class FindFloorResult { 
-	bBlockingHit: boolean;
-	bWalkableFloor: boolean;
-	bLineTrace: boolean;
-	FloorDist: number;
-	LineDist: number;
-	HitResult: HitResult;
-	clone() : FindFloorResult;
-	static C(Other: UObject | any): FindFloorResult;
-}
-
-declare class NavAvoidanceMask { 
-	bGroup0: boolean;
-	bGroup1: boolean;
-	bGroup2: boolean;
-	bGroup3: boolean;
-	bGroup4: boolean;
-	bGroup5: boolean;
-	bGroup6: boolean;
-	bGroup7: boolean;
-	bGroup8: boolean;
-	bGroup9: boolean;
-	bGroup10: boolean;
-	bGroup11: boolean;
-	bGroup12: boolean;
-	bGroup13: boolean;
-	bGroup14: boolean;
-	bGroup15: boolean;
-	bGroup16: boolean;
-	bGroup17: boolean;
-	bGroup18: boolean;
-	bGroup19: boolean;
-	bGroup20: boolean;
-	bGroup21: boolean;
-	bGroup22: boolean;
-	bGroup23: boolean;
-	bGroup24: boolean;
-	bGroup25: boolean;
-	bGroup26: boolean;
-	bGroup27: boolean;
-	bGroup28: boolean;
-	bGroup29: boolean;
-	bGroup30: boolean;
-	bGroup31: boolean;
-	clone() : NavAvoidanceMask;
-	static C(Other: UObject | any): NavAvoidanceMask;
-}
-
-declare class CharacterMovementComponentPostPhysicsTickFunction extends TickFunction { 
-	clone() : CharacterMovementComponentPostPhysicsTickFunction;
-	static C(Other: UObject | any): CharacterMovementComponentPostPhysicsTickFunction;
-}
-
-declare class RootMotionSourceSettings { 
-	Flags: number;
-	clone() : RootMotionSourceSettings;
-	static C(Other: UObject | any): RootMotionSourceSettings;
-}
-
-declare class Vector_NetQuantize10 extends Vector { 
-	clone() : Vector_NetQuantize10;
-	static C(Other: UObject | any): Vector_NetQuantize10;
-}
-
-declare class RootMotionSourceGroup { 
-	bHasAdditiveSources: boolean;
-	bHasOverrideSources: boolean;
-	bIsAdditiveVelocityApplied: boolean;
-	LastAccumulatedSettings: RootMotionSourceSettings;
-	LastPreAdditiveVelocity: Vector_NetQuantize10;
-	clone() : RootMotionSourceGroup;
-	static C(Other: UObject | any): RootMotionSourceGroup;
-}
-
-declare class RootMotionMovementParams { 
-	bHasRootMotion: boolean;
-	BlendWeight: number;
-	RootMotionTransform: Transform;
-	clone() : RootMotionMovementParams;
-	static C(Other: UObject | any): RootMotionMovementParams;
-}
-
-declare class CharacterMovementComponent extends PawnMovementComponent { 
-	CharacterOwner: Character;
-	GravityScale: number;
-	MaxStepHeight: number;
-	JumpZVelocity: number;
-	JumpOffJumpZFactor: number;
-	WalkableFloorAngle: number;
-	WalkableFloorZ: number;
-	MovementMode: EMovementMode;
-	CustomMovementMode: number;
-	NetworkSmoothingMode: ENetworkSmoothingMode;
-	GroundFriction: number;
-	MaxWalkSpeed: number;
-	MaxWalkSpeedCrouched: number;
-	MaxSwimSpeed: number;
-	MaxFlySpeed: number;
-	MaxCustomMovementSpeed: number;
-	MaxAcceleration: number;
-	MinAnalogWalkSpeed: number;
-	BrakingFrictionFactor: number;
-	BrakingFriction: number;
-	BrakingDecelerationWalking: number;
-	BrakingDecelerationFalling: number;
-	BrakingDecelerationSwimming: number;
-	BrakingDecelerationFlying: number;
-	AirControl: number;
-	AirControlBoostMultiplier: number;
-	AirControlBoostVelocityThreshold: number;
-	FallingLateralFriction: number;
-	CrouchedHalfHeight: number;
-	Buoyancy: number;
-	PerchRadiusThreshold: number;
-	PerchAdditionalHeight: number;
-	RotationRate: Rotator;
-	bUseSeparateBrakingFriction: boolean;
-	bApplyGravityWhileJumping: boolean;
-	bUseControllerDesiredRotation: boolean;
-	bOrientRotationToMovement: boolean;
-	bSweepWhileNavWalking: boolean;
-	bMovementInProgress: boolean;
-	bEnableScopedMovementUpdates: boolean;
-	bForceMaxAccel: boolean;
-	bRunPhysicsWithNoController: boolean;
-	bForceNextFloorCheck: boolean;
-	bShrinkProxyCapsule: boolean;
-	bCanWalkOffLedges: boolean;
-	bCanWalkOffLedgesWhenCrouching: boolean;
-	bNetworkSkipProxyPredictionOnNetUpdate: boolean;
-	bNetworkAlwaysReplicateTransformUpdateTimestamp: boolean;
-	bDeferUpdateMoveComponent: boolean;
-	bEnablePhysicsInteraction: boolean;
-	bTouchForceScaledToMass: boolean;
-	bPushForceScaledToMass: boolean;
-	bPushForceUsingZOffset: boolean;
-	bScalePushForceToVelocity: boolean;
-	DeferredUpdatedMoveComponent: SceneComponent;
-	MaxOutOfWaterStepHeight: number;
-	OutofWaterZ: number;
-	Mass: number;
-	StandingDownwardForceScale: number;
-	InitialPushForceFactor: number;
-	PushForceFactor: number;
-	PushForcePointZOffsetFactor: number;
-	TouchForceFactor: number;
-	MinTouchForce: number;
-	MaxTouchForce: number;
-	RepulsionForce: number;
-	bForceBraking: boolean;
-	CrouchedSpeedMultiplier: number;
-	UpperImpactNormalScale: number;
-	Acceleration: Vector;
-	LastUpdateRotation: Quat;
-	LastUpdateLocation: Vector;
-	LastUpdateVelocity: Vector;
-	ServerLastTransformUpdateTimeStamp: number;
-	ServerLastClientGoodMoveAckTime: number;
-	ServerLastClientAdjustmentTime: number;
-	PendingImpulseToApply: Vector;
-	PendingForceToApply: Vector;
-	AnalogInputModifier: number;
-	MaxSimulationTimeStep: number;
-	MaxSimulationIterations: number;
-	MaxDepenetrationWithGeometry: number;
-	MaxDepenetrationWithGeometryAsProxy: number;
-	MaxDepenetrationWithPawn: number;
-	MaxDepenetrationWithPawnAsProxy: number;
-	NetworkSimulatedSmoothLocationTime: number;
-	NetworkSimulatedSmoothRotationTime: number;
-	ListenServerNetworkSimulatedSmoothLocationTime: number;
-	ListenServerNetworkSimulatedSmoothRotationTime: number;
-	NetProxyShrinkRadius: number;
-	NetProxyShrinkHalfHeight: number;
-	NetworkMaxSmoothUpdateDistance: number;
-	NetworkNoSmoothUpdateDistance: number;
-	NetworkMinTimeBetweenClientAckGoodMoves: number;
-	NetworkMinTimeBetweenClientAdjustments: number;
-	NetworkMinTimeBetweenClientAdjustmentsLargeCorrection: number;
-	NetworkLargeClientCorrectionDistance: number;
-	LedgeCheckThreshold: number;
-	JumpOutOfWaterPitch: number;
-	CurrentFloor: FindFloorResult;
-	DefaultLandMovementMode: EMovementMode;
-	DefaultWaterMovementMode: EMovementMode;
-	GroundMovementMode: EMovementMode;
-	bMaintainHorizontalGroundVelocity: boolean;
-	bImpartBaseVelocityX: boolean;
-	bImpartBaseVelocityY: boolean;
-	bImpartBaseVelocityZ: boolean;
-	bImpartBaseAngularVelocity: boolean;
-	bJustTeleported: boolean;
-	bNetworkUpdateReceived: boolean;
-	bNetworkMovementModeChanged: boolean;
-	bIgnoreClientMovementErrorChecksAndCorrection: boolean;
-	bNotifyApex: boolean;
-	bCheatFlying: boolean;
-	bWantsToCrouch: boolean;
-	bCrouchMaintainsBaseLocation: boolean;
-	bIgnoreBaseRotation: boolean;
-	bFastAttachedMove: boolean;
-	bAlwaysCheckFloor: boolean;
-	bUseFlatBaseForFloorChecks: boolean;
-	bPerformingJumpOff: boolean;
-	bWantsToLeaveNavWalking: boolean;
-	bUseRVOAvoidance: boolean;
-	bRequestedMoveUseAcceleration: boolean;
-	bWasSimulatingRootMotion: boolean;
-	bAllowPhysicsRotationDuringAnimRootMotion: boolean;
-	bHasRequestedVelocity: boolean;
-	bRequestedMoveWithMaxSpeed: boolean;
-	bWasAvoidanceUpdated: boolean;
-	bProjectNavMeshWalking: boolean;
-	bProjectNavMeshOnBothWorldChannels: boolean;
-	AvoidanceConsiderationRadius: number;
-	RequestedVelocity: Vector;
-	AvoidanceUID: number;
-	AvoidanceGroup: NavAvoidanceMask;
-	GroupsToAvoid: NavAvoidanceMask;
-	GroupsToIgnore: NavAvoidanceMask;
-	AvoidanceWeight: number;
-	PendingLaunchVelocity: Vector;
-	NavMeshProjectionInterval: number;
-	NavMeshProjectionTimer: number;
-	NavMeshProjectionInterpSpeed: number;
-	NavMeshProjectionHeightScaleUp: number;
-	NavMeshProjectionHeightScaleDown: number;
-	NavWalkingFloorDistTolerance: number;
-	PostPhysicsTickFunction: CharacterMovementComponentPostPhysicsTickFunction;
-	MinTimeBetweenTimeStampResets: number;
-	CurrentRootMotion: RootMotionSourceGroup;
-	RootMotionParams: RootMotionMovementParams;
-	AnimRootMotionVelocity: Vector;
-	static Load(ResourceName: string): CharacterMovementComponent;
-	static Find(Outer: UObject, ResourceName: string): CharacterMovementComponent;
-	static GetDefaultObject(): CharacterMovementComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CharacterMovementComponent;
-	SetWalkableFloorZ(InWalkableFloorZ: number): void;
-	SetWalkableFloorAngle(InWalkableFloorAngle: number): void;
-	SetMovementMode(NewMovementMode: EMovementMode,NewCustomMode: number): void;
-	SetGroupsToIgnoreMask(GroupMask: NavAvoidanceMask): void;
-	SetGroupsToIgnore(GroupFlags: number): void;
-	SetGroupsToAvoidMask(GroupMask: NavAvoidanceMask): void;
-	SetGroupsToAvoid(GroupFlags: number): void;
-	SetAvoidanceGroupMask(GroupMask: NavAvoidanceMask): void;
-	SetAvoidanceGroup(GroupFlags: number): void;
-	SetAvoidanceEnabled(bEnable: boolean): void;
-	K2_GetWalkableFloorZ(): number;
-	K2_GetWalkableFloorAngle(): number;
-	K2_GetModifiedMaxAcceleration(): number;
-	K2_FindFloor(CapsuleLocation: Vector,FloorResult?: FindFloorResult): {FloorResult: FindFloorResult};
-	K2_ComputeFloorDist(CapsuleLocation: Vector,LineDistance: number,SweepDistance: number,SweepRadius: number,FloorResult?: FindFloorResult): {FloorResult: FindFloorResult};
-	IsWalking(): boolean;
-	IsWalkable(Hit: HitResult): boolean;
-	GetValidPerchRadius(): number;
-	GetPerchRadiusThreshold(): number;
-	GetMovementBase(): PrimitiveComponent;
-	GetMinAnalogSpeed(): number;
-	GetMaxJumpHeightWithJumpTime(): number;
-	GetMaxJumpHeight(): number;
-	GetMaxBrakingDeceleration(): number;
-	GetMaxAcceleration(): number;
-	GetLastUpdateVelocity(): Vector;
-	GetLastUpdateRotation(): Rotator;
-	GetLastUpdateLocation(): Vector;
-	GetImpartedMovementBaseVelocity(): Vector;
-	GetCurrentAcceleration(): Vector;
-	GetCharacterOwner(): Character;
-	GetAnalogInputModifier(): number;
-	DisableMovement(): void;
-	ClearAccumulatedForces(): void;
-	CapsuleTouched(OverlappedComp: PrimitiveComponent,Other: Actor,OtherComp: PrimitiveComponent,OtherBodyIndex: number,bFromSweep: boolean,SweepResult: HitResult): void;
-	CalcVelocity(DeltaTime: number,Friction: number,bFluid: boolean,BrakingDeceleration: number): void;
-	AddImpulse(Impulse: Vector,bVelocityChange: boolean): void;
-	AddForce(Force: Vector): void;
-	static C(Other: UObject | any): CharacterMovementComponent;
-}
-
-declare class NavAreaBase extends UObject { 
-	static Load(ResourceName: string): NavAreaBase;
-	static Find(Outer: UObject, ResourceName: string): NavAreaBase;
-	static GetDefaultObject(): NavAreaBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavAreaBase;
-	static C(Other: UObject | any): NavAreaBase;
-}
-
-declare class ShapeComponent extends PrimitiveComponent { 
-	ShapeBodySetup: BodySetup;
-	ShapeColor: Color;
-	bDrawOnlyIfSelected: boolean;
-	bShouldCollideWhenPlacing: boolean;
-	bDynamicObstacle: boolean;
-	AreaClass: UnrealEngineClass;
-	static Load(ResourceName: string): ShapeComponent;
-	static Find(Outer: UObject, ResourceName: string): ShapeComponent;
-	static GetDefaultObject(): ShapeComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ShapeComponent;
-	static C(Other: UObject | any): ShapeComponent;
-}
-
-declare class CapsuleComponent extends ShapeComponent { 
-	CapsuleHalfHeight: number;
-	CapsuleRadius: number;
-	CapsuleHeight: number;
-	static Load(ResourceName: string): CapsuleComponent;
-	static Find(Outer: UObject, ResourceName: string): CapsuleComponent;
-	static GetDefaultObject(): CapsuleComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CapsuleComponent;
-	SetCapsuleSize(InRadius: number,InHalfHeight: number,bUpdateOverlaps: boolean): void;
-	SetCapsuleRadius(Radius: number,bUpdateOverlaps: boolean): void;
-	SetCapsuleHalfHeight(HalfHeight: number,bUpdateOverlaps: boolean): void;
-	GetUnscaledCapsuleSize_WithoutHemisphere(OutRadius?: number,OutHalfHeightWithoutHemisphere?: number): {OutRadius: number, OutHalfHeightWithoutHemisphere: number};
-	GetUnscaledCapsuleSize(OutRadius?: number,OutHalfHeight?: number): {OutRadius: number, OutHalfHeight: number};
-	GetUnscaledCapsuleRadius(): number;
-	GetUnscaledCapsuleHalfHeight_WithoutHemisphere(): number;
-	GetUnscaledCapsuleHalfHeight(): number;
-	GetShapeScale(): number;
-	GetScaledCapsuleSize_WithoutHemisphere(OutRadius?: number,OutHalfHeightWithoutHemisphere?: number): {OutRadius: number, OutHalfHeightWithoutHemisphere: number};
-	GetScaledCapsuleSize(OutRadius?: number,OutHalfHeight?: number): {OutRadius: number, OutHalfHeight: number};
-	GetScaledCapsuleRadius(): number;
-	GetScaledCapsuleHalfHeight_WithoutHemisphere(): number;
-	GetScaledCapsuleHalfHeight(): number;
-	static C(Other: UObject | any): CapsuleComponent;
-}
-
-declare class ArrowComponent extends PrimitiveComponent { 
-	ArrowColor: Color;
-	ArrowSize: number;
-	bIsScreenSizeScaled: boolean;
-	ScreenSize: number;
-	bTreatAsASprite: boolean;
-	SpriteCategoryName: string;
-	SpriteInfo: SpriteCategoryInfo;
-	bLightAttachment: boolean;
-	bUseInEditorScaling: boolean;
-	static Load(ResourceName: string): ArrowComponent;
-	static Find(Outer: UObject, ResourceName: string): ArrowComponent;
-	static GetDefaultObject(): ArrowComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ArrowComponent;
-	SetArrowColor(NewColor: LinearColor): void;
-	static C(Other: UObject | any): ArrowComponent;
-}
-
-declare class BasedMovementInfo { 
-	MovementBase: PrimitiveComponent;
-	BoneName: string;
-	Location: Vector_NetQuantize100;
-	Rotation: Rotator;
-	bServerHasBaseComponent: boolean;
-	bRelativeRotation: boolean;
-	bServerHasVelocity: boolean;
-	clone() : BasedMovementInfo;
-	static C(Other: UObject | any): BasedMovementInfo;
-}
-
-declare class RepRootMotionMontage { 
-	bIsActive: boolean;
-	AnimMontage: AnimMontage;
-	Position: number;
-	Location: Vector_NetQuantize100;
-	Rotation: Rotator;
-	MovementBase: PrimitiveComponent;
-	MovementBaseBoneName: string;
-	bRelativePosition: boolean;
-	bRelativeRotation: boolean;
-	AuthoritativeRootMotion: RootMotionSourceGroup;
-	Acceleration: Vector_NetQuantize10;
-	LinearVelocity: Vector_NetQuantize10;
-	clone() : RepRootMotionMontage;
-	static C(Other: UObject | any): RepRootMotionMontage;
-}
-
-declare class SimulatedRootMotionReplicatedMove { 
-	Time: number;
-	RootMotion: RepRootMotionMontage;
-	clone() : SimulatedRootMotionReplicatedMove;
-	static C(Other: UObject | any): SimulatedRootMotionReplicatedMove;
-}
-
-declare class Character extends Pawn { 
-	Mesh: SkeletalMeshComponent;
-	CharacterMovement: CharacterMovementComponent;
-	CapsuleComponent: CapsuleComponent;
-	ArrowComponent: ArrowComponent;
-	BasedMovement: BasedMovementInfo;
-	ReplicatedBasedMovement: BasedMovementInfo;
-	AnimRootMotionTranslationScale: number;
-	BaseTranslationOffset: Vector;
-	BaseRotationOffset: Quat;
-	ReplicatedServerLastTransformUpdateTimeStamp: number;
-	ReplayLastTransformUpdateTimeStamp: number;
-	ReplicatedMovementMode: number;
-	bInBaseReplication: boolean;
-	CrouchedEyeHeight: number;
-	bIsCrouched: boolean;
-	bProxyIsJumpForceApplied: boolean;
-	bPressedJump: boolean;
-	bClientUpdating: boolean;
-	bClientWasFalling: boolean;
-	bClientResimulateRootMotion: boolean;
-	bClientResimulateRootMotionSources: boolean;
-	bSimGravityDisabled: boolean;
-	bClientCheckEncroachmentOnNetUpdate: boolean;
-	bServerMoveIgnoreRootMotion: boolean;
-	bWasJumping: boolean;
-	JumpKeyHoldTime: number;
-	JumpForceTimeRemaining: number;
-	ProxyJumpForceStartedTime: number;
-	JumpMaxHoldTime: number;
-	JumpMaxCount: number;
-	JumpCurrentCount: number;
-	OnReachedJumpApex: UnrealEngineMulticastDelegate<() => void>;
-	MovementModeChangedDelegate: UnrealEngineMulticastDelegate<(Character: Character, PrevMovementMode: EMovementMode, PreviousCustomMode: number) => void>;
-	OnCharacterMovementUpdated: UnrealEngineMulticastDelegate<(DeltaSeconds: number, OldLocation: Vector, OldVelocity: Vector) => void>;
-	SavedRootMotion: RootMotionSourceGroup;
-	ClientRootMotionParams: RootMotionMovementParams;
-	RootMotionRepMoves: SimulatedRootMotionReplicatedMove[];
-	RepRootMotion: RepRootMotionMontage;
-	static GetDefaultObject(): Character;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Character;
-	UnCrouch(bClientSimulation: boolean): void;
-	StopJumping(): void;
-	StopAnimMontage(AnimMontage: AnimMontage): void;
-	ServerMoveOld(OldTimeStamp: number,OldAccel: Vector_NetQuantize10,OldMoveFlags: number): void;
-	ServerMoveNoBase(Timestamp: number,InAccel: Vector_NetQuantize10,ClientLoc: Vector_NetQuantize100,CompressedMoveFlags: number,ClientRoll: number,View: any,ClientMovementMode: number): void;
-	ServerMoveDualNoBase(TimeStamp0: number,InAccel0: Vector_NetQuantize10,PendingFlags: number,View0: any,Timestamp: number,InAccel: Vector_NetQuantize10,ClientLoc: Vector_NetQuantize100,NewFlags: number,ClientRoll: number,View: any,ClientMovementMode: number): void;
-	ServerMoveDualHybridRootMotion(TimeStamp0: number,InAccel0: Vector_NetQuantize10,PendingFlags: number,View0: any,Timestamp: number,InAccel: Vector_NetQuantize10,ClientLoc: Vector_NetQuantize100,NewFlags: number,ClientRoll: number,View: any,ClientMovementBase: PrimitiveComponent,ClientBaseBoneName: string,ClientMovementMode: number): void;
-	ServerMoveDual(TimeStamp0: number,InAccel0: Vector_NetQuantize10,PendingFlags: number,View0: any,Timestamp: number,InAccel: Vector_NetQuantize10,ClientLoc: Vector_NetQuantize100,NewFlags: number,ClientRoll: number,View: any,ClientMovementBase: PrimitiveComponent,ClientBaseBoneName: string,ClientMovementMode: number): void;
-	ServerMove(Timestamp: number,InAccel: Vector_NetQuantize10,ClientLoc: Vector_NetQuantize100,CompressedMoveFlags: number,ClientRoll: number,View: any,ClientMovementBase: PrimitiveComponent,ClientBaseBoneName: string,ClientMovementMode: number): void;
-	RootMotionDebugClientPrintOnScreen(inString: string): void;
-	PlayAnimMontage(AnimMontage: AnimMontage,InPlayRate: number,StartSectionName: string): number;
-	OnWalkingOffLedge(PreviousFloorImpactNormal: Vector,PreviousFloorContactNormal: Vector,PreviousLocation: Vector,TimeDelta: number): void;
-	OnRep_RootMotion(): void;
-	OnRep_ReplicatedBasedMovement(): void;
-	OnRep_ReplayLastTransformUpdateTimeStamp(): void;
-	OnRep_IsCrouched(): void;
-	OnLaunched(LaunchVelocity: Vector,bXYOverride: boolean,bZOverride: boolean): void;
-	OnLanded(Hit: HitResult): void;
-	OnJumped(): void;
-	LaunchCharacter(LaunchVelocity: Vector,bXYOverride: boolean,bZOverride: boolean): void;
-	K2_UpdateCustomMovement(DeltaTime: number): void;
-	K2_OnStartCrouch(HalfHeightAdjust: number,ScaledHalfHeightAdjust: number): void;
-	K2_OnMovementModeChanged(PrevMovementMode: EMovementMode,NewMovementMode: EMovementMode,PrevCustomMode: number,NewCustomMode: number): void;
-	K2_OnEndCrouch(HalfHeightAdjust: number,ScaledHalfHeightAdjust: number): void;
-	Jump(): void;
-	IsPlayingRootMotion(): boolean;
-	IsPlayingNetworkedRootMotionMontage(): boolean;
-	IsJumpProvidingForce(): boolean;
-	GetCurrentMontage(): AnimMontage;
-	GetBaseTranslationOffset(): Vector;
-	GetBaseRotationOffsetRotator(): Rotator;
-	GetAnimRootMotionTranslationScale(): number;
-	Crouch(bClientSimulation: boolean): void;
-	ClientVeryShortAdjustPosition(Timestamp: number,NewLoc: Vector,NewBase: PrimitiveComponent,NewBaseBoneName: string,bHasBase: boolean,bBaseRelativePosition: boolean,ServerMovementMode: number): void;
-	ClientCheatWalk(): void;
-	ClientCheatGhost(): void;
-	ClientCheatFly(): void;
-	ClientAdjustRootMotionSourcePosition(Timestamp: number,ServerRootMotion: RootMotionSourceGroup,bHasAnimRootMotion: boolean,ServerMontageTrackPosition: number,ServerLoc: Vector,ServerRotation: Vector_NetQuantizeNormal,ServerVelZ: number,ServerBase: PrimitiveComponent,ServerBoneName: string,bHasBase: boolean,bBaseRelativePosition: boolean,ServerMovementMode: number): void;
-	ClientAdjustRootMotionPosition(Timestamp: number,ServerMontageTrackPosition: number,ServerLoc: Vector,ServerRotation: Vector_NetQuantizeNormal,ServerVelZ: number,ServerBase: PrimitiveComponent,ServerBoneName: string,bHasBase: boolean,bBaseRelativePosition: boolean,ServerMovementMode: number): void;
-	ClientAdjustPosition(Timestamp: number,NewLoc: Vector,NewVel: Vector,NewBase: PrimitiveComponent,NewBaseBoneName: string,bHasBase: boolean,bBaseRelativePosition: boolean,ServerMovementMode: number): void;
-	ClientAckGoodMove(Timestamp: number): void;
-	CanJumpInternal(): boolean;
-	CanJump(): boolean;
-	CacheInitialMeshOffset(MeshRelativeLocation: Vector,MeshRelativeRotation: Rotator): void;
-	static C(Other: UObject | any): Character;
-}
-
-declare class Player extends UObject { 
-	PlayerController: PlayerController;
-	CurrentNetSpeed: number;
-	ConfiguredInternetSpeed: number;
-	ConfiguredLanSpeed: number;
-	static Load(ResourceName: string): Player;
-	static Find(Outer: UObject, ResourceName: string): Player;
-	static GetDefaultObject(): Player;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Player;
-	static C(Other: UObject | any): Player;
-}
-
-declare class InterpTrackInst extends UObject { 
-	static Load(ResourceName: string): InterpTrackInst;
-	static Find(Outer: UObject, ResourceName: string): InterpTrackInst;
-	static GetDefaultObject(): InterpTrackInst;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInst;
-	static C(Other: UObject | any): InterpTrackInst;
-}
-
-declare class InterpTrackInstDirector extends InterpTrackInst { 
-	OldViewTarget: Actor;
-	static Load(ResourceName: string): InterpTrackInstDirector;
-	static Find(Outer: UObject, ResourceName: string): InterpTrackInstDirector;
-	static GetDefaultObject(): InterpTrackInstDirector;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstDirector;
-	static C(Other: UObject | any): InterpTrackInstDirector;
-}
-
-declare class ReporterBase extends UObject { 
-	static Load(ResourceName: string): ReporterBase;
-	static Find(Outer: UObject, ResourceName: string): ReporterBase;
-	static GetDefaultObject(): ReporterBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReporterBase;
-	static C(Other: UObject | any): ReporterBase;
-}
-
-declare class ReporterGraph extends ReporterBase { 
-	static Load(ResourceName: string): ReporterGraph;
-	static Find(Outer: UObject, ResourceName: string): ReporterGraph;
-	static GetDefaultObject(): ReporterGraph;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReporterGraph;
-	static C(Other: UObject | any): ReporterGraph;
-}
-
-declare class CanvasUVTri { 
-	V0_Pos: Vector2D;
-	V0_UV: Vector2D;
-	V0_Color: LinearColor;
-	V1_Pos: Vector2D;
-	V1_UV: Vector2D;
-	V1_Color: LinearColor;
-	V2_Pos: Vector2D;
-	V2_UV: Vector2D;
-	V2_Color: LinearColor;
-	clone() : CanvasUVTri;
-	static C(Other: UObject | any): CanvasUVTri;
-}
-
-declare class Canvas extends UObject { 
-	OrgX: number;
-	OrgY: number;
-	ClipX: number;
-	ClipY: number;
-	DrawColor: Color;
-	bCenterX: boolean;
-	bCenterY: boolean;
-	bNoSmooth: boolean;
-	SizeX: number;
-	SizeY: number;
-	ColorModulate: Plane;
-	DefaultTexture: Texture2D;
-	GradientTexture0: Texture2D;
-	ReporterGraph: ReporterGraph;
-	static Load(ResourceName: string): Canvas;
-	static Find(Outer: UObject, ResourceName: string): Canvas;
-	static GetDefaultObject(): Canvas;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Canvas;
-	K2_TextSize(RenderFont: Font,RenderText: string,Scale: Vector2D): Vector2D;
-	K2_StrLen(RenderFont: Font,RenderText: string): Vector2D;
-	K2_Project(WorldLocation: Vector): Vector;
-	K2_DrawTriangle(RenderTexture: Texture,Triangles: CanvasUVTri[]): void;
-	K2_DrawTexture(RenderTexture: Texture,ScreenPosition: Vector2D,ScreenSize: Vector2D,CoordinatePosition: Vector2D,CoordinateSize: Vector2D,RenderColor: LinearColor,BlendMode: EBlendMode,Rotation: number,PivotPoint: Vector2D): void;
-	K2_DrawText(RenderFont: Font,RenderText: string,ScreenPosition: Vector2D,Scale: Vector2D,RenderColor: LinearColor,Kerning: number,ShadowColor: LinearColor,ShadowOffset: Vector2D,bCentreX: boolean,bCentreY: boolean,bOutlined: boolean,OutlineColor: LinearColor): void;
-	K2_DrawPolygon(RenderTexture: Texture,ScreenPosition: Vector2D,Radius: Vector2D,NumberOfSides: number,RenderColor: LinearColor): void;
-	K2_DrawMaterialTriangle(RenderMaterial: MaterialInterface,Triangles: CanvasUVTri[]): void;
-	K2_DrawMaterial(RenderMaterial: MaterialInterface,ScreenPosition: Vector2D,ScreenSize: Vector2D,CoordinatePosition: Vector2D,CoordinateSize: Vector2D,Rotation: number,PivotPoint: Vector2D): void;
-	K2_DrawLine(ScreenPositionA: Vector2D,ScreenPositionB: Vector2D,Thickness: number,RenderColor: LinearColor): void;
-	K2_DrawBox(ScreenPosition: Vector2D,ScreenSize: Vector2D,Thickness: number,RenderColor: LinearColor): void;
-	K2_DrawBorder(BorderTexture: Texture,BackgroundTexture: Texture,LeftBorderTexture: Texture,RightBorderTexture: Texture,TopBorderTexture: Texture,BottomBorderTexture: Texture,ScreenPosition: Vector2D,ScreenSize: Vector2D,CoordinatePosition: Vector2D,CoordinateSize: Vector2D,RenderColor: LinearColor,BorderScale: Vector2D,BackgroundScale: Vector2D,Rotation: number,PivotPoint: Vector2D,CornerSize: Vector2D): void;
-	K2_Deproject(ScreenPosition: Vector2D,WorldOrigin?: Vector,WorldDirection?: Vector): {WorldOrigin: Vector, WorldDirection: Vector};
-	static C(Other: UObject | any): Canvas;
-}
-
-declare class DebugTextInfo { 
-	SrcActor: Actor;
-	SrcActorOffset: Vector;
-	SrcActorDesiredOffset: Vector;
-	DebugText: string;
-	TimeRemaining: number;
-	Duration: number;
-	TextColor: Color;
-	bAbsoluteLocation: boolean;
-	bKeepAttachedToActor: boolean;
-	bDrawShadow: boolean;
-	OrigActorLocation: Vector;
-	Font: Font;
-	FontScale: number;
-	clone() : DebugTextInfo;
-	static C(Other: UObject | any): DebugTextInfo;
-}
-
-declare class HUD extends Actor { 
-	PlayerOwner: PlayerController;
-	bLostFocusPaused: boolean;
-	bShowHUD: boolean;
-	bShowDebugInfo: boolean;
-	CurrentTargetIndex: number;
-	bShowHitBoxDebugInfo: boolean;
-	bShowOverlays: boolean;
-	bEnableDebugTextShadow: boolean;
-	PostRenderedActors: Actor[];
-	DebugDisplay: string[];
-	ToggledDebugCategories: string[];
-	Canvas: Canvas;
-	DebugCanvas: Canvas;
-	DebugTextList: DebugTextInfo[];
-	ShowDebugTargetDesiredClass: UnrealEngineClass;
-	ShowDebugTargetActor: Actor;
-	static GetDefaultObject(): HUD;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HUD;
-	ShowHUD(): void;
-	ShowDebugToggleSubCategory(Category: string): void;
-	ShowDebugForReticleTargetToggle(DesiredClass: UnrealEngineClass): void;
-	ShowDebug(DebugType: string): void;
-	RemoveDebugText(SrcActor: Actor,bLeaveDurationText: boolean): void;
-	RemoveAllDebugStrings(): void;
-	ReceiveHitBoxRelease(BoxName: string): void;
-	ReceiveHitBoxEndCursorOver(BoxName: string): void;
-	ReceiveHitBoxClick(BoxName: string): void;
-	ReceiveHitBoxBeginCursorOver(BoxName: string): void;
-	ReceiveDrawHUD(SizeX: number,SizeY: number): void;
-	Project(Location: Vector): Vector;
-	PreviousDebugTarget(): void;
-	NextDebugTarget(): void;
-	GetTextSize(text: string,OutWidth?: number,OutHeight?: number,Font?: Font,Scale?: number): {OutWidth: number, OutHeight: number};
-	GetOwningPlayerController(): PlayerController;
-	GetOwningPawn(): Pawn;
-	GetActorsInSelectionRectangle(ClassFilter: UnrealEngineClass,FirstPoint: Vector2D,SecondPoint: Vector2D,OutActors?: Actor[],bIncludeNonCollidingComponents?: boolean,bActorMustBeFullyEnclosed?: boolean): {OutActors: Actor[]};
-	DrawTextureSimple(Texture: Texture,ScreenX: number,ScreenY: number,Scale: number,bScalePosition: boolean): void;
-	DrawTexture(Texture: Texture,ScreenX: number,ScreenY: number,ScreenW: number,ScreenH: number,TextureU: number,TextureV: number,TextureUWidth: number,TextureVHeight: number,TintColor: LinearColor,BlendMode: EBlendMode,Scale: number,bScalePosition: boolean,Rotation: number,RotPivot: Vector2D): void;
-	DrawText(text: string,TextColor: LinearColor,ScreenX: number,ScreenY: number,Font: Font,Scale: number,bScalePosition: boolean): void;
-	DrawRect(RectColor: LinearColor,ScreenX: number,ScreenY: number,ScreenW: number,ScreenH: number): void;
-	DrawMaterialTriangle(Material: MaterialInterface,V0_Pos: Vector2D,V1_Pos: Vector2D,V2_Pos: Vector2D,V0_UV: Vector2D,V1_UV: Vector2D,V2_UV: Vector2D,V0_Color: LinearColor,V1_Color: LinearColor,V2_Color: LinearColor): void;
-	DrawMaterialSimple(Material: MaterialInterface,ScreenX: number,ScreenY: number,ScreenW: number,ScreenH: number,Scale: number,bScalePosition: boolean): void;
-	DrawMaterial(Material: MaterialInterface,ScreenX: number,ScreenY: number,ScreenW: number,ScreenH: number,MaterialU: number,MaterialV: number,MaterialUWidth: number,MaterialVHeight: number,Scale: number,bScalePosition: boolean,Rotation: number,RotPivot: Vector2D): void;
-	DrawLine(StartScreenX: number,StartScreenY: number,EndScreenX: number,EndScreenY: number,LineColor: LinearColor,LineThickness: number): void;
-	Deproject(ScreenX: number,ScreenY: number,WorldPosition?: Vector,WorldDirection?: Vector): {WorldPosition: Vector, WorldDirection: Vector};
-	AddHitBox(Position: Vector2D,Size: Vector2D,InName: string,bConsumesInput: boolean,Priority: number): void;
-	AddDebugText(DebugText: string,SrcActor: Actor,Duration: number,Offset: Vector,DesiredOffset: Vector,TextColor: Color,bSkipOverwriteCheck: boolean,bAbsoluteLocation: boolean,bKeepAttachedToActor: boolean,InFont: Font,FontScale: number,bDrawShadow: boolean): void;
-	static C(Other: UObject | any): HUD;
-}
-
-declare type ECameraProjectionMode = 'Perspective' | 'Orthographic' | 'ECameraProjectionMode_MAX';
-declare var ECameraProjectionMode : { Perspective:'Perspective',Orthographic:'Orthographic',ECameraProjectionMode_MAX:'ECameraProjectionMode_MAX', };
-declare type EBloomMethod = 'BM_SOG' | 'BM_FFT' | 'BM_MAX';
-declare var EBloomMethod : { BM_SOG:'BM_SOG',BM_FFT:'BM_FFT',BM_MAX:'BM_MAX', };
-declare type EAutoExposureMethod = 'AEM_Histogram' | 'AEM_Basic' | 'AEM_Manual' | 'AEM_MAX';
-declare var EAutoExposureMethod : { AEM_Histogram:'AEM_Histogram',AEM_Basic:'AEM_Basic',AEM_Manual:'AEM_Manual',AEM_MAX:'AEM_MAX', };
-declare type EDepthOfFieldMethod = 'DOFM_BokehDOF' | 'DOFM_Gaussian' | 'DOFM_CircleDOF' | 'DOFM_MAX';
-declare var EDepthOfFieldMethod : { DOFM_BokehDOF:'DOFM_BokehDOF',DOFM_Gaussian:'DOFM_Gaussian',DOFM_CircleDOF:'DOFM_CircleDOF',DOFM_MAX:'DOFM_MAX', };
-declare class TextureCube extends Texture { 
-	static Load(ResourceName: string): TextureCube;
-	static Find(Outer: UObject, ResourceName: string): TextureCube;
-	static GetDefaultObject(): TextureCube;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureCube;
-	static C(Other: UObject | any): TextureCube;
-}
-
-declare class WeightedBlendable { 
-	Weight: number;
-	UObject: UObject;
-	clone() : WeightedBlendable;
-	static C(Other: UObject | any): WeightedBlendable;
-}
-
-declare class WeightedBlendables { 
-	Array: WeightedBlendable[];
-	clone() : WeightedBlendables;
-	static C(Other: UObject | any): WeightedBlendables;
-}
-
-declare class PostProcessSettings { 
-	bOverride_WhiteTemp: boolean;
-	bOverride_WhiteTint: boolean;
-	bOverride_ColorSaturation: boolean;
-	bOverride_ColorContrast: boolean;
-	bOverride_ColorGamma: boolean;
-	bOverride_ColorGain: boolean;
-	bOverride_ColorOffset: boolean;
-	bOverride_ColorSaturationShadows: boolean;
-	bOverride_ColorContrastShadows: boolean;
-	bOverride_ColorGammaShadows: boolean;
-	bOverride_ColorGainShadows: boolean;
-	bOverride_ColorOffsetShadows: boolean;
-	bOverride_ColorSaturationMidtones: boolean;
-	bOverride_ColorContrastMidtones: boolean;
-	bOverride_ColorGammaMidtones: boolean;
-	bOverride_ColorGainMidtones: boolean;
-	bOverride_ColorOffsetMidtones: boolean;
-	bOverride_ColorSaturationHighlights: boolean;
-	bOverride_ColorContrastHighlights: boolean;
-	bOverride_ColorGammaHighlights: boolean;
-	bOverride_ColorGainHighlights: boolean;
-	bOverride_ColorOffsetHighlights: boolean;
-	bOverride_ColorCorrectionShadowsMax: boolean;
-	bOverride_ColorCorrectionHighlightsMin: boolean;
-	bOverride_BlueCorrection: boolean;
-	bOverride_ExpandGamut: boolean;
-	bOverride_FilmWhitePoint: boolean;
-	bOverride_FilmSaturation: boolean;
-	bOverride_FilmChannelMixerRed: boolean;
-	bOverride_FilmChannelMixerGreen: boolean;
-	bOverride_FilmChannelMixerBlue: boolean;
-	bOverride_FilmContrast: boolean;
-	bOverride_FilmDynamicRange: boolean;
-	bOverride_FilmHealAmount: boolean;
-	bOverride_FilmToeAmount: boolean;
-	bOverride_FilmShadowTint: boolean;
-	bOverride_FilmShadowTintBlend: boolean;
-	bOverride_FilmShadowTintAmount: boolean;
-	bOverride_FilmSlope: boolean;
-	bOverride_FilmToe: boolean;
-	bOverride_FilmShoulder: boolean;
-	bOverride_FilmBlackClip: boolean;
-	bOverride_FilmWhiteClip: boolean;
-	bOverride_SceneColorTint: boolean;
-	bOverride_SceneFringeIntensity: boolean;
-	bOverride_ChromaticAberrationStartOffset: boolean;
-	bOverride_AmbientCubemapTint: boolean;
-	bOverride_AmbientCubemapIntensity: boolean;
-	bOverride_BloomMethod: boolean;
-	bOverride_BloomIntensity: boolean;
-	bOverride_BloomThreshold: boolean;
-	bOverride_Bloom1Tint: boolean;
-	bOverride_Bloom1Size: boolean;
-	bOverride_Bloom2Size: boolean;
-	bOverride_Bloom2Tint: boolean;
-	bOverride_Bloom3Tint: boolean;
-	bOverride_Bloom3Size: boolean;
-	bOverride_Bloom4Tint: boolean;
-	bOverride_Bloom4Size: boolean;
-	bOverride_Bloom5Tint: boolean;
-	bOverride_Bloom5Size: boolean;
-	bOverride_Bloom6Tint: boolean;
-	bOverride_Bloom6Size: boolean;
-	bOverride_BloomSizeScale: boolean;
-	bOverride_BloomConvolutionTexture: boolean;
-	bOverride_BloomConvolutionSize: boolean;
-	bOverride_BloomConvolutionCenterUV: boolean;
-	bOverride_BloomConvolutionPreFilter: boolean;
-	bOverride_BloomConvolutionPreFilterMin: boolean;
-	bOverride_BloomConvolutionPreFilterMax: boolean;
-	bOverride_BloomConvolutionPreFilterMult: boolean;
-	bOverride_BloomConvolutionBufferScale: boolean;
-	bOverride_BloomDirtMaskIntensity: boolean;
-	bOverride_BloomDirtMaskTint: boolean;
-	bOverride_BloomDirtMask: boolean;
-	bOverride_CameraShutterSpeed: boolean;
-	bOverride_CameraISO: boolean;
-	bOverride_AutoExposureMethod: boolean;
-	bOverride_AutoExposureLowPercent: boolean;
-	bOverride_AutoExposureHighPercent: boolean;
-	bOverride_AutoExposureMinBrightness: boolean;
-	bOverride_AutoExposureMaxBrightness: boolean;
-	bOverride_AutoExposureCalibrationConstant: boolean;
-	bOverride_AutoExposureSpeedUp: boolean;
-	bOverride_AutoExposureSpeedDown: boolean;
-	bOverride_AutoExposureBias: boolean;
-	bOverride_HistogramLogMin: boolean;
-	bOverride_HistogramLogMax: boolean;
-	bOverride_LensFlareIntensity: boolean;
-	bOverride_LensFlareTint: boolean;
-	bOverride_LensFlareTints: boolean;
-	bOverride_LensFlareBokehSize: boolean;
-	bOverride_LensFlareBokehShape: boolean;
-	bOverride_LensFlareThreshold: boolean;
-	bOverride_VignetteIntensity: boolean;
-	bOverride_GrainIntensity: boolean;
-	bOverride_GrainJitter: boolean;
-	bOverride_AmbientOcclusionIntensity: boolean;
-	bOverride_AmbientOcclusionStaticFraction: boolean;
-	bOverride_AmbientOcclusionRadius: boolean;
-	bOverride_AmbientOcclusionFadeDistance: boolean;
-	bOverride_AmbientOcclusionFadeRadius: boolean;
-	bOverride_AmbientOcclusionDistance: boolean;
-	bOverride_AmbientOcclusionRadiusInWS: boolean;
-	bOverride_AmbientOcclusionPower: boolean;
-	bOverride_AmbientOcclusionBias: boolean;
-	bOverride_AmbientOcclusionQuality: boolean;
-	bOverride_AmbientOcclusionMipBlend: boolean;
-	bOverride_AmbientOcclusionMipScale: boolean;
-	bOverride_AmbientOcclusionMipThreshold: boolean;
-	bOverride_LPVIntensity: boolean;
-	bOverride_LPVDirectionalOcclusionIntensity: boolean;
-	bOverride_LPVDirectionalOcclusionRadius: boolean;
-	bOverride_LPVDiffuseOcclusionExponent: boolean;
-	bOverride_LPVSpecularOcclusionExponent: boolean;
-	bOverride_LPVDiffuseOcclusionIntensity: boolean;
-	bOverride_LPVSpecularOcclusionIntensity: boolean;
-	bOverride_LPVSize: boolean;
-	bOverride_LPVSecondaryOcclusionIntensity: boolean;
-	bOverride_LPVSecondaryBounceIntensity: boolean;
-	bOverride_LPVGeometryVolumeBias: boolean;
-	bOverride_LPVVplInjectionBias: boolean;
-	bOverride_LPVEmissiveInjectionIntensity: boolean;
-	bOverride_LPVFadeRange: boolean;
-	bOverride_LPVDirectionalOcclusionFadeRange: boolean;
-	bOverride_IndirectLightingColor: boolean;
-	bOverride_IndirectLightingIntensity: boolean;
-	bOverride_ColorGradingIntensity: boolean;
-	bOverride_ColorGradingLUT: boolean;
-	bOverride_DepthOfFieldFocalDistance: boolean;
-	bOverride_DepthOfFieldFstop: boolean;
-	bOverride_DepthOfFieldMinFstop: boolean;
-	bOverride_DepthOfFieldBladeCount: boolean;
-	bOverride_DepthOfFieldSensorWidth: boolean;
-	bOverride_DepthOfFieldDepthBlurRadius: boolean;
-	bOverride_DepthOfFieldDepthBlurAmount: boolean;
-	bOverride_DepthOfFieldFocalRegion: boolean;
-	bOverride_DepthOfFieldNearTransitionRegion: boolean;
-	bOverride_DepthOfFieldFarTransitionRegion: boolean;
-	bOverride_DepthOfFieldScale: boolean;
-	bOverride_DepthOfFieldMaxBokehSize: boolean;
-	bOverride_DepthOfFieldNearBlurSize: boolean;
-	bOverride_DepthOfFieldFarBlurSize: boolean;
-	bOverride_DepthOfFieldMethod: boolean;
-	bOverride_MobileHQGaussian: boolean;
-	bOverride_DepthOfFieldBokehShape: boolean;
-	bOverride_DepthOfFieldOcclusion: boolean;
-	bOverride_DepthOfFieldColorThreshold: boolean;
-	bOverride_DepthOfFieldSizeThreshold: boolean;
-	bOverride_DepthOfFieldSkyFocusDistance: boolean;
-	bOverride_DepthOfFieldVignetteSize: boolean;
-	bOverride_MotionBlurAmount: boolean;
-	bOverride_MotionBlurMax: boolean;
-	bOverride_MotionBlurPerObjectSize: boolean;
-	bOverride_ScreenPercentage: boolean;
-	bOverride_ScreenSpaceReflectionIntensity: boolean;
-	bOverride_ScreenSpaceReflectionQuality: boolean;
-	bOverride_ScreenSpaceReflectionMaxRoughness: boolean;
-	bOverride_ScreenSpaceReflectionRoughnessScale: boolean;
-	bMobileHQGaussian: boolean;
-	BloomMethod: EBloomMethod;
-	AutoExposureMethod: EAutoExposureMethod;
-	DepthOfFieldMethod: EDepthOfFieldMethod;
-	WhiteTemp: number;
-	WhiteTint: number;
-	ColorSaturation: Vector4;
-	ColorContrast: Vector4;
-	ColorGamma: Vector4;
-	ColorGain: Vector4;
-	ColorOffset: Vector4;
-	ColorSaturationShadows: Vector4;
-	ColorContrastShadows: Vector4;
-	ColorGammaShadows: Vector4;
-	ColorGainShadows: Vector4;
-	ColorOffsetShadows: Vector4;
-	ColorSaturationMidtones: Vector4;
-	ColorContrastMidtones: Vector4;
-	ColorGammaMidtones: Vector4;
-	ColorGainMidtones: Vector4;
-	ColorOffsetMidtones: Vector4;
-	ColorSaturationHighlights: Vector4;
-	ColorContrastHighlights: Vector4;
-	ColorGammaHighlights: Vector4;
-	ColorGainHighlights: Vector4;
-	ColorOffsetHighlights: Vector4;
-	ColorCorrectionHighlightsMin: number;
-	ColorCorrectionShadowsMax: number;
-	BlueCorrection: number;
-	ExpandGamut: number;
-	FilmSlope: number;
-	FilmToe: number;
-	FilmShoulder: number;
-	FilmBlackClip: number;
-	FilmWhiteClip: number;
-	FilmWhitePoint: LinearColor;
-	FilmShadowTint: LinearColor;
-	FilmShadowTintBlend: number;
-	FilmShadowTintAmount: number;
-	FilmSaturation: number;
-	FilmChannelMixerRed: LinearColor;
-	FilmChannelMixerGreen: LinearColor;
-	FilmChannelMixerBlue: LinearColor;
-	FilmContrast: number;
-	FilmToeAmount: number;
-	FilmHealAmount: number;
-	FilmDynamicRange: number;
-	SceneColorTint: LinearColor;
-	SceneFringeIntensity: number;
-	ChromaticAberrationStartOffset: number;
-	BloomIntensity: number;
-	BloomThreshold: number;
-	BloomSizeScale: number;
-	Bloom1Size: number;
-	Bloom2Size: number;
-	Bloom3Size: number;
-	Bloom4Size: number;
-	Bloom5Size: number;
-	Bloom6Size: number;
-	Bloom1Tint: LinearColor;
-	Bloom2Tint: LinearColor;
-	Bloom3Tint: LinearColor;
-	Bloom4Tint: LinearColor;
-	Bloom5Tint: LinearColor;
-	Bloom6Tint: LinearColor;
-	BloomConvolutionSize: number;
-	BloomConvolutionTexture: Texture2D;
-	BloomConvolutionCenterUV: Vector2D;
-	BloomConvolutionPreFilter: Vector;
-	BloomConvolutionPreFilterMin: number;
-	BloomConvolutionPreFilterMax: number;
-	BloomConvolutionPreFilterMult: number;
-	BloomConvolutionBufferScale: number;
-	BloomDirtMask: Texture;
-	BloomDirtMaskIntensity: number;
-	BloomDirtMaskTint: LinearColor;
-	AmbientCubemapTint: LinearColor;
-	AmbientCubemapIntensity: number;
-	AmbientCubemap: TextureCube;
-	CameraShutterSpeed: number;
-	CameraISO: number;
-	DepthOfFieldFstop: number;
-	DepthOfFieldMinFstop: number;
-	DepthOfFieldBladeCount: number;
-	AutoExposureBias: number;
-	AutoExposureLowPercent: number;
-	AutoExposureHighPercent: number;
-	AutoExposureMinBrightness: number;
-	AutoExposureMaxBrightness: number;
-	AutoExposureSpeedUp: number;
-	AutoExposureSpeedDown: number;
-	HistogramLogMin: number;
-	HistogramLogMax: number;
-	AutoExposureCalibrationConstant: number;
-	LensFlareIntensity: number;
-	LensFlareTint: LinearColor;
-	LensFlareBokehSize: number;
-	LensFlareThreshold: number;
-	LensFlareBokehShape: Texture;
-	LensFlareTints: LinearColor;
-	VignetteIntensity: number;
-	GrainJitter: number;
-	GrainIntensity: number;
-	AmbientOcclusionIntensity: number;
-	AmbientOcclusionStaticFraction: number;
-	AmbientOcclusionRadius: number;
-	AmbientOcclusionRadiusInWS: boolean;
-	AmbientOcclusionFadeDistance: number;
-	AmbientOcclusionFadeRadius: number;
-	AmbientOcclusionDistance: number;
-	AmbientOcclusionPower: number;
-	AmbientOcclusionBias: number;
-	AmbientOcclusionQuality: number;
-	AmbientOcclusionMipBlend: number;
-	AmbientOcclusionMipScale: number;
-	AmbientOcclusionMipThreshold: number;
-	IndirectLightingColor: LinearColor;
-	IndirectLightingIntensity: number;
-	ColorGradingIntensity: number;
-	ColorGradingLUT: Texture;
-	DepthOfFieldSensorWidth: number;
-	DepthOfFieldFocalDistance: number;
-	DepthOfFieldDepthBlurAmount: number;
-	DepthOfFieldDepthBlurRadius: number;
-	DepthOfFieldFocalRegion: number;
-	DepthOfFieldNearTransitionRegion: number;
-	DepthOfFieldFarTransitionRegion: number;
-	DepthOfFieldScale: number;
-	DepthOfFieldMaxBokehSize: number;
-	DepthOfFieldNearBlurSize: number;
-	DepthOfFieldFarBlurSize: number;
-	DepthOfFieldOcclusion: number;
-	DepthOfFieldBokehShape: Texture;
-	DepthOfFieldColorThreshold: number;
-	DepthOfFieldSizeThreshold: number;
-	DepthOfFieldSkyFocusDistance: number;
-	DepthOfFieldVignetteSize: number;
-	MotionBlurAmount: number;
-	MotionBlurMax: number;
-	MotionBlurPerObjectSize: number;
-	LPVIntensity: number;
-	LPVVplInjectionBias: number;
-	LPVSize: number;
-	LPVSecondaryOcclusionIntensity: number;
-	LPVSecondaryBounceIntensity: number;
-	LPVGeometryVolumeBias: number;
-	LPVEmissiveInjectionIntensity: number;
-	LPVDirectionalOcclusionIntensity: number;
-	LPVDirectionalOcclusionRadius: number;
-	LPVDiffuseOcclusionExponent: number;
-	LPVSpecularOcclusionExponent: number;
-	LPVDiffuseOcclusionIntensity: number;
-	LPVSpecularOcclusionIntensity: number;
-	ScreenSpaceReflectionIntensity: number;
-	ScreenSpaceReflectionQuality: number;
-	ScreenSpaceReflectionMaxRoughness: number;
-	LPVFadeRange: number;
-	LPVDirectionalOcclusionFadeRange: number;
-	ScreenPercentage: number;
-	WeightedBlendables: WeightedBlendables;
-	Blendables: UObject[];
-	clone() : PostProcessSettings;
-	static C(Other: UObject | any): PostProcessSettings;
-}
-
-declare class MinimalViewInfo { 
-	Location: Vector;
-	Rotation: Rotator;
-	FOV: number;
-	DesiredFOV: number;
-	OrthoWidth: number;
-	OrthoNearClipPlane: number;
-	OrthoFarClipPlane: number;
-	AspectRatio: number;
-	bConstrainAspectRatio: boolean;
-	bUseFieldOfViewForLOD: boolean;
-	ProjectionMode: ECameraProjectionMode;
-	PostProcessBlendWeight: number;
-	PostProcessSettings: PostProcessSettings;
-	OffCenterProjectionOffset: Vector2D;
-	clone() : MinimalViewInfo;
-	static C(Other: UObject | any): MinimalViewInfo;
-}
-
-declare class CameraCacheEntry { 
-	Timestamp: number;
-	POV: MinimalViewInfo;
-	clone() : CameraCacheEntry;
-	static C(Other: UObject | any): CameraCacheEntry;
-}
-
-declare class TViewTarget { 
-	Target: Actor;
-	POV: MinimalViewInfo;
-	PlayerState: PlayerState;
-	clone() : TViewTarget;
-	static C(Other: UObject | any): TViewTarget;
-}
-
-declare class CameraModifier extends UObject { 
-	bDebug: boolean;
-	bExclusive: boolean;
-	Priority: number;
-	CameraOwner: PlayerCameraManager;
-	AlphaInTime: number;
-	AlphaOutTime: number;
-	Alpha: number;
-	static Load(ResourceName: string): CameraModifier;
-	static Find(Outer: UObject, ResourceName: string): CameraModifier;
-	static GetDefaultObject(): CameraModifier;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraModifier;
-	IsDisabled(): boolean;
-	GetViewTarget(): Actor;
-	EnableModifier(): void;
-	DisableModifier(bImmediate: boolean): void;
-	BlueprintModifyPostProcess(DeltaTime: number,PostProcessBlendWeight?: number,PostProcessSettings?: PostProcessSettings): {PostProcessBlendWeight: number, PostProcessSettings: PostProcessSettings};
-	BlueprintModifyCamera(DeltaTime: number,ViewLocation: Vector,ViewRotation: Rotator,FOV: number,NewViewLocation?: Vector,NewViewRotation?: Rotator,NewFOV?: number): {NewViewLocation: Vector, NewViewRotation: Rotator, NewFOV: number};
-	static C(Other: UObject | any): CameraModifier;
-}
-
-declare type EParticleSystemUpdateMode = 'EPSUM_RealTime' | 'EPSUM_FixedTime' | 'EPSUM_MAX';
-declare var EParticleSystemUpdateMode : { EPSUM_RealTime:'EPSUM_RealTime',EPSUM_FixedTime:'EPSUM_FixedTime',EPSUM_MAX:'EPSUM_MAX', };
-declare type EEmitterRenderMode = 'ERM_Normal' | 'ERM_Point' | 'ERM_Cross' | 'ERM_LightsOnly' | 'ERM_None' | 'ERM_MAX';
-declare var EEmitterRenderMode : { ERM_Normal:'ERM_Normal',ERM_Point:'ERM_Point',ERM_Cross:'ERM_Cross',ERM_LightsOnly:'ERM_LightsOnly',ERM_None:'ERM_None',ERM_MAX:'ERM_MAX', };
-declare type EParticleSignificanceLevel = 'Low' | 'Medium' | 'High' | 'Critical' | 'Num' | 'EParticleSignificanceLevel_MAX';
-declare var EParticleSignificanceLevel : { Low:'Low',Medium:'Medium',High:'High',Critical:'Critical',Num:'Num',EParticleSignificanceLevel_MAX:'EParticleSignificanceLevel_MAX', };
-declare class ParticleModule extends UObject { 
-	bSpawnModule: boolean;
-	bUpdateModule: boolean;
-	bFinalUpdateModule: boolean;
-	bUpdateForGPUEmitter: boolean;
-	bCurvesAsColor: boolean;
-	b3DDrawMode: boolean;
-	bSupported3DDrawMode: boolean;
-	bEnabled: boolean;
-	bEditable: boolean;
-	LODDuplicate: boolean;
-	bSupportsRandomSeed: boolean;
-	bRequiresLoopingNotification: boolean;
-	LODValidity: number;
-	ModuleEditorColor: Color;
-	static Load(ResourceName: string): ParticleModule;
-	static Find(Outer: UObject, ResourceName: string): ParticleModule;
-	static GetDefaultObject(): ParticleModule;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModule;
-	static C(Other: UObject | any): ParticleModule;
-}
-
-declare type EParticleScreenAlignment = 'PSA_FacingCameraPosition' | 'PSA_Square' | 'PSA_Rectangle' | 'PSA_Velocity' | 'PSA_AwayFromCenter' | 'PSA_TypeSpecific' | 'PSA_FacingCameraDistanceBlend' | 'PSA_MAX';
-declare var EParticleScreenAlignment : { PSA_FacingCameraPosition:'PSA_FacingCameraPosition',PSA_Square:'PSA_Square',PSA_Rectangle:'PSA_Rectangle',PSA_Velocity:'PSA_Velocity',PSA_AwayFromCenter:'PSA_AwayFromCenter',PSA_TypeSpecific:'PSA_TypeSpecific',PSA_FacingCameraDistanceBlend:'PSA_FacingCameraDistanceBlend',PSA_MAX:'PSA_MAX', };
-declare type EParticleSortMode = 'PSORTMODE_None' | 'PSORTMODE_ViewProjDepth' | 'PSORTMODE_DistanceToView' | 'PSORTMODE_Age_OldestFirst' | 'PSORTMODE_Age_NewestFirst' | 'PSORTMODE_MAX';
-declare var EParticleSortMode : { PSORTMODE_None:'PSORTMODE_None',PSORTMODE_ViewProjDepth:'PSORTMODE_ViewProjDepth',PSORTMODE_DistanceToView:'PSORTMODE_DistanceToView',PSORTMODE_Age_OldestFirst:'PSORTMODE_Age_OldestFirst',PSORTMODE_Age_NewestFirst:'PSORTMODE_Age_NewestFirst',PSORTMODE_MAX:'PSORTMODE_MAX', };
-declare class DistributionLookupTable { 
-	Op: number;
-	EntryCount: number;
-	EntryStride: number;
-	SubEntryStride: number;
-	TimeScale: number;
-	TimeBias: number;
-	Values: number[];
-	LockFlag: number;
-	clone() : DistributionLookupTable;
-	static C(Other: UObject | any): DistributionLookupTable;
-}
-
-declare class RawDistribution { 
-	Table: DistributionLookupTable;
-	clone() : RawDistribution;
-	static C(Other: UObject | any): RawDistribution;
-}
-
-declare class Distribution extends UObject { 
-	static Load(ResourceName: string): Distribution;
-	static Find(Outer: UObject, ResourceName: string): Distribution;
-	static GetDefaultObject(): Distribution;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Distribution;
-	static C(Other: UObject | any): Distribution;
-}
-
-declare class DistributionFloat extends Distribution { 
-	bCanBeBaked: boolean;
-	bBakedDataSuccesfully: boolean;
-	static Load(ResourceName: string): DistributionFloat;
-	static Find(Outer: UObject, ResourceName: string): DistributionFloat;
-	static GetDefaultObject(): DistributionFloat;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionFloat;
-	static C(Other: UObject | any): DistributionFloat;
-}
-
-declare class RawDistributionFloat extends RawDistribution { 
-	MinValue: number;
-	MaxValue: number;
-	Distribution: DistributionFloat;
-	clone() : RawDistributionFloat;
-	static C(Other: UObject | any): RawDistributionFloat;
-}
-
-declare type EParticleBurstMethod = 'EPBM_Instant' | 'EPBM_Interpolated' | 'EPBM_MAX';
-declare var EParticleBurstMethod : { EPBM_Instant:'EPBM_Instant',EPBM_Interpolated:'EPBM_Interpolated',EPBM_MAX:'EPBM_MAX', };
-declare class ParticleBurst { 
-	Count: number;
-	CountLow: number;
-	Time: number;
-	clone() : ParticleBurst;
-	static C(Other: UObject | any): ParticleBurst;
-}
-
-declare type EParticleSubUVInterpMethod = 'PSUVIM_None' | 'PSUVIM_Linear' | 'PSUVIM_Linear_Blend' | 'PSUVIM_Random' | 'PSUVIM_Random_Blend' | 'PSUVIM_MAX';
-declare var EParticleSubUVInterpMethod : { PSUVIM_None:'PSUVIM_None',PSUVIM_Linear:'PSUVIM_Linear',PSUVIM_Linear_Blend:'PSUVIM_Linear_Blend',PSUVIM_Random:'PSUVIM_Random',PSUVIM_Random_Blend:'PSUVIM_Random_Blend',PSUVIM_MAX:'PSUVIM_MAX', };
-declare type EParticleUVFlipMode = 'None' | 'FlipUV' | 'FlipUOnly' | 'FlipVOnly' | 'RandomFlipUV' | 'RandomFlipUOnly' | 'RandomFlipVOnly' | 'RandomFlipUVIndependent' | 'EParticleUVFlipMode_MAX';
-declare var EParticleUVFlipMode : { None:'None',FlipUV:'FlipUV',FlipUOnly:'FlipUOnly',FlipVOnly:'FlipVOnly',RandomFlipUV:'RandomFlipUV',RandomFlipUOnly:'RandomFlipUOnly',RandomFlipVOnly:'RandomFlipVOnly',RandomFlipUVIndependent:'RandomFlipUVIndependent',EParticleUVFlipMode_MAX:'EParticleUVFlipMode_MAX', };
-declare type ESubUVBoundingVertexCount = 'BVC_FourVertices' | 'BVC_EightVertices' | 'BVC_MAX';
-declare var ESubUVBoundingVertexCount : { BVC_FourVertices:'BVC_FourVertices',BVC_EightVertices:'BVC_EightVertices',BVC_MAX:'BVC_MAX', };
-declare type EOpacitySourceMode = 'OSM_Alpha' | 'OSM_ColorBrightness' | 'OSM_RedChannel' | 'OSM_GreenChannel' | 'OSM_BlueChannel' | 'OSM_MAX';
-declare var EOpacitySourceMode : { OSM_Alpha:'OSM_Alpha',OSM_ColorBrightness:'OSM_ColorBrightness',OSM_RedChannel:'OSM_RedChannel',OSM_GreenChannel:'OSM_GreenChannel',OSM_BlueChannel:'OSM_BlueChannel',OSM_MAX:'OSM_MAX', };
-declare type EEmitterNormalsMode = 'ENM_CameraFacing' | 'ENM_Spherical' | 'ENM_Cylindrical' | 'ENM_MAX';
-declare var EEmitterNormalsMode : { ENM_CameraFacing:'ENM_CameraFacing',ENM_Spherical:'ENM_Spherical',ENM_Cylindrical:'ENM_Cylindrical',ENM_MAX:'ENM_MAX', };
-declare class ParticleModuleRequired extends ParticleModule { 
-	Material: MaterialInterface;
-	EmitterOrigin: Vector;
-	EmitterRotation: Rotator;
-	ScreenAlignment: EParticleScreenAlignment;
-	MinFacingCameraBlendDistance: number;
-	MaxFacingCameraBlendDistance: number;
-	bUseLocalSpace: boolean;
-	bKillOnDeactivate: boolean;
-	bKillOnCompleted: boolean;
-	SortMode: EParticleSortMode;
-	bUseLegacyEmitterTime: boolean;
-	bRemoveHMDRoll: boolean;
-	EmitterDuration: number;
-	EmitterDurationLow: number;
-	bEmitterDurationUseRange: boolean;
-	bDurationRecalcEachLoop: boolean;
-	EmitterLoops: number;
-	SpawnRate: RawDistributionFloat;
-	ParticleBurstMethod: EParticleBurstMethod;
-	BurstList: ParticleBurst[];
-	EmitterDelay: number;
-	EmitterDelayLow: number;
-	bEmitterDelayUseRange: boolean;
-	bDelayFirstLoopOnly: boolean;
-	InterpolationMethod: EParticleSubUVInterpMethod;
-	SubImages_Horizontal: number;
-	SubImages_Vertical: number;
-	bScaleUV: boolean;
-	RandomImageTime: number;
-	RandomImageChanges: number;
-	bOverrideSystemMacroUV: boolean;
-	MacroUVPosition: Vector;
-	MacroUVRadius: number;
-	bUseMaxDrawCount: boolean;
-	MaxDrawCount: number;
-	UVFlippingMode: EParticleUVFlipMode;
-	CutoutTexture: Texture2D;
-	BoundingMode: ESubUVBoundingVertexCount;
-	OpacitySourceMode: EOpacitySourceMode;
-	AlphaThreshold: number;
-	EmitterNormalsMode: EEmitterNormalsMode;
-	NormalsSphereCenter: Vector;
-	NormalsCylinderDirection: Vector;
-	bOrbitModuleAffectsVelocityAlignment: boolean;
-	NamedMaterialOverrides: string[];
-	static Load(ResourceName: string): ParticleModuleRequired;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleRequired;
-	static GetDefaultObject(): ParticleModuleRequired;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRequired;
-	static C(Other: UObject | any): ParticleModuleRequired;
-}
-
-declare class ParticleModuleTypeDataBase extends ParticleModule { 
-	static Load(ResourceName: string): ParticleModuleTypeDataBase;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleTypeDataBase;
-	static GetDefaultObject(): ParticleModuleTypeDataBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleTypeDataBase;
-	static C(Other: UObject | any): ParticleModuleTypeDataBase;
-}
-
-declare class ParticleModuleSpawnBase extends ParticleModule { 
-	bProcessSpawnRate: boolean;
-	bProcessBurstList: boolean;
-	static Load(ResourceName: string): ParticleModuleSpawnBase;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleSpawnBase;
-	static GetDefaultObject(): ParticleModuleSpawnBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSpawnBase;
-	static C(Other: UObject | any): ParticleModuleSpawnBase;
-}
-
-declare class ParticleModuleSpawn extends ParticleModuleSpawnBase { 
-	Rate: RawDistributionFloat;
-	RateScale: RawDistributionFloat;
-	ParticleBurstMethod: EParticleBurstMethod;
-	BurstList: ParticleBurst[];
-	BurstScale: RawDistributionFloat;
-	bApplyGlobalSpawnRateScale: boolean;
-	static Load(ResourceName: string): ParticleModuleSpawn;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleSpawn;
-	static GetDefaultObject(): ParticleModuleSpawn;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSpawn;
-	static C(Other: UObject | any): ParticleModuleSpawn;
-}
-
-declare class ParticleModuleEventBase extends ParticleModule { 
-	static Load(ResourceName: string): ParticleModuleEventBase;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleEventBase;
-	static GetDefaultObject(): ParticleModuleEventBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleEventBase;
-	static C(Other: UObject | any): ParticleModuleEventBase;
-}
-
-declare type EParticleEventType = 'EPET_Any' | 'EPET_Spawn' | 'EPET_Death' | 'EPET_Collision' | 'EPET_Burst' | 'EPET_Blueprint' | 'EPET_MAX';
-declare var EParticleEventType : { EPET_Any:'EPET_Any',EPET_Spawn:'EPET_Spawn',EPET_Death:'EPET_Death',EPET_Collision:'EPET_Collision',EPET_Burst:'EPET_Burst',EPET_Blueprint:'EPET_Blueprint',EPET_MAX:'EPET_MAX', };
-declare class ParticleModuleEventSendToGame extends UObject { 
-	static Load(ResourceName: string): ParticleModuleEventSendToGame;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleEventSendToGame;
-	static GetDefaultObject(): ParticleModuleEventSendToGame;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleEventSendToGame;
-	static C(Other: UObject | any): ParticleModuleEventSendToGame;
-}
-
-declare class ParticleEvent_GenerateInfo { 
-	Type: EParticleEventType;
-	Frequency: number;
-	ParticleFrequency: number;
-	FirstTimeOnly: boolean;
-	LastTimeOnly: boolean;
-	UseReflectedImpactVector: boolean;
-	bUseOrbitOffset: boolean;
-	CustomName: string;
-	ParticleModuleEventsToSendToGame: ParticleModuleEventSendToGame[];
-	clone() : ParticleEvent_GenerateInfo;
-	static C(Other: UObject | any): ParticleEvent_GenerateInfo;
-}
-
-declare class ParticleModuleEventGenerator extends ParticleModuleEventBase { 
-	Events: ParticleEvent_GenerateInfo[];
-	static Load(ResourceName: string): ParticleModuleEventGenerator;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleEventGenerator;
-	static GetDefaultObject(): ParticleModuleEventGenerator;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleEventGenerator;
-	static C(Other: UObject | any): ParticleModuleEventGenerator;
-}
-
-declare class ParticleModuleOrbitBase extends ParticleModule { 
-	bUseEmitterTime: boolean;
-	static Load(ResourceName: string): ParticleModuleOrbitBase;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleOrbitBase;
-	static GetDefaultObject(): ParticleModuleOrbitBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleOrbitBase;
-	static C(Other: UObject | any): ParticleModuleOrbitBase;
-}
-
-declare type EOrbitChainMode = 'EOChainMode_Add' | 'EOChainMode_Scale' | 'EOChainMode_Link' | 'EOChainMode_MAX';
-declare var EOrbitChainMode : { EOChainMode_Add:'EOChainMode_Add',EOChainMode_Scale:'EOChainMode_Scale',EOChainMode_Link:'EOChainMode_Link',EOChainMode_MAX:'EOChainMode_MAX', };
-declare class DistributionVector extends Distribution { 
-	bCanBeBaked: boolean;
-	bIsDirty: boolean;
-	bBakedDataSuccesfully: boolean;
-	static Load(ResourceName: string): DistributionVector;
-	static Find(Outer: UObject, ResourceName: string): DistributionVector;
-	static GetDefaultObject(): DistributionVector;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionVector;
-	static C(Other: UObject | any): DistributionVector;
-}
-
-declare class RawDistributionVector extends RawDistribution { 
-	MinValue: number;
-	MaxValue: number;
-	MinValueVec: Vector;
-	MaxValueVec: Vector;
-	Distribution: DistributionVector;
-	clone() : RawDistributionVector;
-	static C(Other: UObject | any): RawDistributionVector;
-}
-
-declare class OrbitOptions { 
-	bProcessDuringSpawn: boolean;
-	bProcessDuringUpdate: boolean;
-	bUseEmitterTime: boolean;
-	clone() : OrbitOptions;
-	static C(Other: UObject | any): OrbitOptions;
-}
-
-declare class ParticleModuleOrbit extends ParticleModuleOrbitBase { 
-	ChainMode: EOrbitChainMode;
-	OffsetAmount: RawDistributionVector;
-	OffsetOptions: OrbitOptions;
-	RotationAmount: RawDistributionVector;
-	RotationOptions: OrbitOptions;
-	RotationRateAmount: RawDistributionVector;
-	RotationRateOptions: OrbitOptions;
-	static Load(ResourceName: string): ParticleModuleOrbit;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleOrbit;
-	static GetDefaultObject(): ParticleModuleOrbit;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleOrbit;
-	static C(Other: UObject | any): ParticleModuleOrbit;
-}
-
-declare class ParticleModuleEventReceiverBase extends ParticleModuleEventBase { 
-	EventGeneratorType: EParticleEventType;
-	EventName: string;
-	static Load(ResourceName: string): ParticleModuleEventReceiverBase;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleEventReceiverBase;
-	static GetDefaultObject(): ParticleModuleEventReceiverBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleEventReceiverBase;
-	static C(Other: UObject | any): ParticleModuleEventReceiverBase;
-}
-
-declare class ParticleLODLevel extends UObject { 
-	Level: number;
-	bEnabled: boolean;
-	RequiredModule: ParticleModuleRequired;
-	Modules: ParticleModule[];
-	TypeDataModule: ParticleModuleTypeDataBase;
-	SpawnModule: ParticleModuleSpawn;
-	EventGenerator: ParticleModuleEventGenerator;
-	SpawningModules: ParticleModuleSpawnBase[];
-	SpawnModules: ParticleModule[];
-	UpdateModules: ParticleModule[];
-	OrbitModules: ParticleModuleOrbit[];
-	EventReceiverModules: ParticleModuleEventReceiverBase[];
-	ConvertedModules: boolean;
-	PeakActiveParticles: number;
-	static Load(ResourceName: string): ParticleLODLevel;
-	static Find(Outer: UObject, ResourceName: string): ParticleLODLevel;
-	static GetDefaultObject(): ParticleLODLevel;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleLODLevel;
-	static C(Other: UObject | any): ParticleLODLevel;
-}
-
-declare class ParticleEmitter extends UObject { 
-	EmitterName: string;
-	SubUVDataOffset: number;
-	EmitterRenderMode: EEmitterRenderMode;
-	SignificanceLevel: EParticleSignificanceLevel;
-	bUseLegacySpawningBehavior: boolean;
-	ConvertedModules: boolean;
-	bIsSoloing: boolean;
-	bCookedOut: boolean;
-	bDisabledLODsKeepEmitterAlive: boolean;
-	bDisableWhenInsignficant: boolean;
-	bCollapsed: boolean;
-	DetailMode: EDetailMode;
-	EmitterEditorColor: Color;
-	LODLevels: ParticleLODLevel[];
-	PeakActiveParticles: number;
-	InitialAllocationCount: number;
-	QualityLevelSpawnRateScale: number;
-	DetailModeBitmask: any;
-	DetailModeDisplay: string;
-	static Load(ResourceName: string): ParticleEmitter;
-	static Find(Outer: UObject, ResourceName: string): ParticleEmitter;
-	static GetDefaultObject(): ParticleEmitter;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleEmitter;
-	static C(Other: UObject | any): ParticleEmitter;
-}
-
-declare class CurveEdEntry { 
-	CurveObject: UObject;
-	CurveColor: Color;
-	CurveName: string;
-	bHideCurve: number;
-	bColorCurve: number;
-	bFloatingPointColorCurve: number;
-	bClamp: number;
-	ClampLow: number;
-	ClampHigh: number;
-	clone() : CurveEdEntry;
-	static C(Other: UObject | any): CurveEdEntry;
-}
-
-declare class CurveEdTab { 
-	TabName: string;
-	Curves: CurveEdEntry[];
-	ViewStartInput: number;
-	ViewEndInput: number;
-	ViewStartOutput: number;
-	ViewEndOutput: number;
-	clone() : CurveEdTab;
-	static C(Other: UObject | any): CurveEdTab;
-}
-
-declare class InterpCurveEdSetup extends UObject { 
-	Tabs: CurveEdTab[];
-	ActiveTab: number;
-	static Load(ResourceName: string): InterpCurveEdSetup;
-	static Find(Outer: UObject, ResourceName: string): InterpCurveEdSetup;
-	static GetDefaultObject(): InterpCurveEdSetup;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpCurveEdSetup;
-	static C(Other: UObject | any): InterpCurveEdSetup;
-}
-
-declare type ParticleSystemLODMethod = 'PARTICLESYSTEMLODMETHOD_Automatic' | 'PARTICLESYSTEMLODMETHOD_DirectSet' | 'PARTICLESYSTEMLODMETHOD_ActivateAutomatic' | 'PARTICLESYSTEMLODMETHOD_MAX';
-declare var ParticleSystemLODMethod : { PARTICLESYSTEMLODMETHOD_Automatic:'PARTICLESYSTEMLODMETHOD_Automatic',PARTICLESYSTEMLODMETHOD_DirectSet:'PARTICLESYSTEMLODMETHOD_DirectSet',PARTICLESYSTEMLODMETHOD_ActivateAutomatic:'PARTICLESYSTEMLODMETHOD_ActivateAutomatic',PARTICLESYSTEMLODMETHOD_MAX:'PARTICLESYSTEMLODMETHOD_MAX', };
-declare class ParticleSystemLOD { 
-	clone() : ParticleSystemLOD;
-	static C(Other: UObject | any): ParticleSystemLOD;
-}
-
-declare type EParticleSystemInsignificanceReaction = 'Auto' | 'Complete' | 'DisableTick' | 'DisableTickAndKill' | 'Num' | 'EParticleSystemInsignificanceReaction_MAX';
-declare var EParticleSystemInsignificanceReaction : { Auto:'Auto',Complete:'Complete',DisableTick:'DisableTick',DisableTickAndKill:'DisableTickAndKill',Num:'Num',EParticleSystemInsignificanceReaction_MAX:'EParticleSystemInsignificanceReaction_MAX', };
-declare type EParticleSystemOcclusionBoundsMethod = 'EPSOBM_None' | 'EPSOBM_ParticleBounds' | 'EPSOBM_CustomBounds' | 'EPSOBM_MAX';
-declare var EParticleSystemOcclusionBoundsMethod : { EPSOBM_None:'EPSOBM_None',EPSOBM_ParticleBounds:'EPSOBM_ParticleBounds',EPSOBM_CustomBounds:'EPSOBM_CustomBounds',EPSOBM_MAX:'EPSOBM_MAX', };
-declare class LODSoloTrack { 
-	SoloEnableSetting: number[];
-	clone() : LODSoloTrack;
-	static C(Other: UObject | any): LODSoloTrack;
-}
-
-declare class NamedEmitterMaterial { 
-	Name: string;
-	Material: MaterialInterface;
-	clone() : NamedEmitterMaterial;
-	static C(Other: UObject | any): NamedEmitterMaterial;
-}
-
-declare type EPSCPoolMethod = 'None' | 'AutoRelease' | 'ManualRelease' | 'ManualRelease_OnComplete' | 'EPSCPoolMethod_MAX';
-declare var EPSCPoolMethod : { None:'None',AutoRelease:'AutoRelease',ManualRelease:'ManualRelease',ManualRelease_OnComplete:'ManualRelease_OnComplete',EPSCPoolMethod_MAX:'EPSCPoolMethod_MAX', };
-declare class ParticleSystem extends UObject { 
-	SystemUpdateMode: EParticleSystemUpdateMode;
-	UpdateTime_FPS: number;
-	UpdateTime_Delta: number;
-	WarmupTime: number;
-	WarmupTickRate: number;
-	Emitters: ParticleEmitter[];
-	PreviewComponent: ParticleSystemComponent;
-	ThumbnailAngle: Rotator;
-	ThumbnailDistance: number;
-	ThumbnailWarmup: number;
-	CurveEdSetup: InterpCurveEdSetup;
-	bOrientZAxisTowardCamera: boolean;
-	LODDistanceCheckTime: number;
-	LODMethod: ParticleSystemLODMethod;
-	LODDistances: number[];
-	EditorLODSetting: number;
-	bRegenerateLODDuplicate: boolean;
-	LODSettings: ParticleSystemLOD[];
-	bUseFixedRelativeBoundingBox: boolean;
-	FixedRelativeBoundingBox: Box;
-	SecondsBeforeInactive: number;
-	FloorMesh: string;
-	FloorPosition: Vector;
-	FloorRotation: Rotator;
-	FloorScale: number;
-	FloorScale3D: Vector;
-	BackgroundColor: Color;
-	bShouldResetPeakCounts: boolean;
-	bHasPhysics: boolean;
-	bUseRealtimeThumbnail: boolean;
-	ThumbnailImageOutOfDate: boolean;
-	ThumbnailImage: Texture2D;
-	Delay: number;
-	DelayLow: number;
-	bUseDelayRange: boolean;
-	bAutoDeactivate: boolean;
-	MinTimeBetweenTicks: any;
-	InsignificantReaction: EParticleSystemInsignificanceReaction;
-	InsignificanceDelay: number;
-	MaxSignificanceLevel: EParticleSignificanceLevel;
-	MaxPoolSize: any;
-	MacroUVPosition: Vector;
-	MacroUVRadius: number;
-	OcclusionBoundsMethod: EParticleSystemOcclusionBoundsMethod;
-	CustomOcclusionBounds: Box;
-	SoloTracking: LODSoloTrack[];
-	NamedMaterialSlots: NamedEmitterMaterial[];
-	static Load(ResourceName: string): ParticleSystem;
-	static Find(Outer: UObject, ResourceName: string): ParticleSystem;
-	static GetDefaultObject(): ParticleSystem;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleSystem;
-	ContainsEmitterType(TypeData: UnrealEngineClass): boolean;
-	static C(Other: UObject | any): ParticleSystem;
-	SpawnEmitterAttached(AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,Scale: Vector,LocationType: EAttachLocation,bAutoDestroy: boolean,PoolingMethod: EPSCPoolMethod): ParticleSystemComponent;
-	static SpawnEmitterAttached(EmitterTemplate: ParticleSystem,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,Scale: Vector,LocationType: EAttachLocation,bAutoDestroy: boolean,PoolingMethod: EPSCPoolMethod): ParticleSystemComponent;
-}
-
-declare type EParticleSysParamType = 'PSPT_None' | 'PSPT_Scalar' | 'PSPT_ScalarRand' | 'PSPT_Vector' | 'PSPT_VectorRand' | 'PSPT_Color' | 'PSPT_Actor' | 'PSPT_Material' | 'PSPT_MAX';
-declare var EParticleSysParamType : { PSPT_None:'PSPT_None',PSPT_Scalar:'PSPT_Scalar',PSPT_ScalarRand:'PSPT_ScalarRand',PSPT_Vector:'PSPT_Vector',PSPT_VectorRand:'PSPT_VectorRand',PSPT_Color:'PSPT_Color',PSPT_Actor:'PSPT_Actor',PSPT_Material:'PSPT_Material',PSPT_MAX:'PSPT_MAX', };
-declare class ParticleSysParam { 
-	Name: string;
-	ParamType: EParticleSysParamType;
-	Scalar: number;
-	Scalar_Low: number;
-	Vector: Vector;
-	Vector_Low: Vector;
-	Color: Color;
-	Actor: Actor;
-	Material: MaterialInterface;
-	clone() : ParticleSysParam;
-	static C(Other: UObject | any): ParticleSysParam;
-}
-
-declare class ParticleSystemReplay extends UObject { 
-	ClipIDNumber: number;
-	static Load(ResourceName: string): ParticleSystemReplay;
-	static Find(Outer: UObject, ResourceName: string): ParticleSystemReplay;
-	static GetDefaultObject(): ParticleSystemReplay;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleSystemReplay;
-	static C(Other: UObject | any): ParticleSystemReplay;
-}
-
-declare type EAttachmentRule = 'KeepRelative' | 'KeepWorld' | 'SnapToTarget' | 'EAttachmentRule_MAX';
-declare var EAttachmentRule : { KeepRelative:'KeepRelative',KeepWorld:'KeepWorld',SnapToTarget:'SnapToTarget',EAttachmentRule_MAX:'EAttachmentRule_MAX', };
-declare type ETrailWidthMode = 'ETrailWidthMode_FromCentre' | 'ETrailWidthMode_FromFirst' | 'ETrailWidthMode_FromSecond' | 'ETrailWidthMode_MAX';
-declare var ETrailWidthMode : { ETrailWidthMode_FromCentre:'ETrailWidthMode_FromCentre',ETrailWidthMode_FromFirst:'ETrailWidthMode_FromFirst',ETrailWidthMode_FromSecond:'ETrailWidthMode_FromSecond',ETrailWidthMode_MAX:'ETrailWidthMode_MAX', };
-declare class ParticleSystemComponent extends PrimitiveComponent { 
-	Template: ParticleSystem;
-	EmitterMaterials: MaterialInterface[];
-	SkelMeshComponents: SkeletalMeshComponent[];
-	bResetOnDetach: boolean;
-	bUpdateOnDedicatedServer: boolean;
-	bAllowRecycling: boolean;
-	bAutoManageAttachment: boolean;
-	bWarmingUp: boolean;
-	bOverrideLODMethod: boolean;
-	bSkipUpdateDynamicDataDuringTick: boolean;
-	LODMethod: ParticleSystemLODMethod;
-	RequiredSignificance: EParticleSignificanceLevel;
-	InstanceParameters: ParticleSysParam[];
-	OnParticleSpawn: UnrealEngineMulticastDelegate<(EventName: string, EmitterTime: number, Location: Vector, Velocity: Vector) => void>;
-	OnParticleBurst: UnrealEngineMulticastDelegate<(EventName: string, EmitterTime: number, ParticleCount: number) => void>;
-	OnParticleDeath: UnrealEngineMulticastDelegate<(EventName: string, EmitterTime: number, ParticleTime: number, Location: Vector, Velocity: Vector, Direction: Vector) => void>;
-	OnParticleCollide: UnrealEngineMulticastDelegate<(EventName: string, EmitterTime: number, ParticleTime: number, Location: Vector, Velocity: Vector, Direction: Vector, Normal: Vector, BoneName: string, PhysMat: PhysicalMaterial) => void>;
-	OldPosition: Vector;
-	PartSysVelocity: Vector;
-	WarmupTime: number;
-	WarmupTickRate: number;
-	SecondsBeforeInactive: number;
-	MaxTimeBeforeForceUpdateTransform: number;
-	EditorLODLevel: number;
-	EditorDetailMode: number;
-	ReplayClips: ParticleSystemReplay[];
-	CustomTimeDilation: number;
-	AutoAttachParent: any;
-	AutoAttachSocketName: string;
-	AutoAttachLocationType: EAttachLocation;
-	AutoAttachLocationRule: EAttachmentRule;
-	AutoAttachRotationRule: EAttachmentRule;
-	AutoAttachScaleRule: EAttachmentRule;
-	OnSystemFinished: UnrealEngineMulticastDelegate<(PSystem: ParticleSystemComponent) => void>;
-	static Load(ResourceName: string): ParticleSystemComponent;
-	static Find(Outer: UObject, ResourceName: string): ParticleSystemComponent;
-	static GetDefaultObject(): ParticleSystemComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleSystemComponent;
-	SetVectorParameter(ParameterName: string,Param: Vector): void;
-	SetTrailSourceData(InFirstSocketName: string,InSecondSocketName: string,InWidthMode: ETrailWidthMode,InWidth: number): void;
-	SetTemplate(NewTemplate: ParticleSystem): void;
-	SetMaterialParameter(ParameterName: string,Param: MaterialInterface): void;
-	SetFloatParameter(ParameterName: string,Param: number): void;
-	SetEmitterEnable(EmitterName: string,bNewEnableState: boolean): void;
-	SetColorParameter(ParameterName: string,Param: LinearColor): void;
-	SetBeamTargetTangent(EmitterIndex: number,NewTangentPoint: Vector,TargetIndex: number): void;
-	SetBeamTargetStrength(EmitterIndex: number,NewTargetStrength: number,TargetIndex: number): void;
-	SetBeamTargetPoint(EmitterIndex: number,NewTargetPoint: Vector,TargetIndex: number): void;
-	SetBeamSourceTangent(EmitterIndex: number,NewTangentPoint: Vector,SourceIndex: number): void;
-	SetBeamSourceStrength(EmitterIndex: number,NewSourceStrength: number,SourceIndex: number): void;
-	SetBeamSourcePoint(EmitterIndex: number,NewSourcePoint: Vector,SourceIndex: number): void;
-	SetBeamEndPoint(EmitterIndex: number,NewEndPoint: Vector): void;
-	SetAutoAttachParams(Parent: SceneComponent,SocketName: string,LocationType: EAttachLocation): void;
-	SetAutoAttachmentParameters(Parent: SceneComponent,SocketName: string,LocationRule: EAttachmentRule,RotationRule: EAttachmentRule,ScaleRule: EAttachmentRule): void;
-	SetActorParameter(ParameterName: string,Param: Actor): void;
-	ReleaseToPool(): void;
-	GetNumActiveParticles(): number;
-	GetNamedMaterial(InName: string): MaterialInterface;
-	GetBeamTargetTangent(EmitterIndex: number,TargetIndex: number,OutTangentPoint?: Vector): {OutTangentPoint: Vector, $: boolean};
-	GetBeamTargetStrength(EmitterIndex: number,TargetIndex: number,OutTargetStrength?: number): {OutTargetStrength: number, $: boolean};
-	GetBeamTargetPoint(EmitterIndex: number,TargetIndex: number,OutTargetPoint?: Vector): {OutTargetPoint: Vector, $: boolean};
-	GetBeamSourceTangent(EmitterIndex: number,SourceIndex: number,OutTangentPoint?: Vector): {OutTangentPoint: Vector, $: boolean};
-	GetBeamSourceStrength(EmitterIndex: number,SourceIndex: number,OutSourceStrength?: number): {OutSourceStrength: number, $: boolean};
-	GetBeamSourcePoint(EmitterIndex: number,SourceIndex: number,OutSourcePoint?: Vector): {OutSourcePoint: Vector, $: boolean};
-	GetBeamEndPoint(EmitterIndex: number,OutEndPoint?: Vector): {OutEndPoint: Vector, $: boolean};
-	GenerateParticleEvent(InEventName: string,InEmitterTime: number,InLocation: Vector,InDirection: Vector,InVelocity: Vector): void;
-	EndTrails(): void;
-	CreateNamedDynamicMaterialInstance(InName: string,SourceMaterial: MaterialInterface): MaterialInstanceDynamic;
-	BeginTrails(InFirstSocketName: string,InSecondSocketName: string,InWidthMode: ETrailWidthMode,InWidth: number): void;
-	static C(Other: UObject | any): ParticleSystemComponent;
-}
-
-declare class Emitter extends Actor { 
-	ParticleSystemComponent: ParticleSystemComponent;
-	bDestroyOnSystemFinish: boolean;
-	bPostUpdateTickGroup: boolean;
-	bCurrentlyActive: boolean;
-	OnParticleSpawn: UnrealEngineMulticastDelegate<(EventName: string, EmitterTime: number, Location: Vector, Velocity: Vector) => void>;
-	OnParticleBurst: UnrealEngineMulticastDelegate<(EventName: string, EmitterTime: number, ParticleCount: number) => void>;
-	OnParticleDeath: UnrealEngineMulticastDelegate<(EventName: string, EmitterTime: number, ParticleTime: number, Location: Vector, Velocity: Vector, Direction: Vector) => void>;
-	OnParticleCollide: UnrealEngineMulticastDelegate<(EventName: string, EmitterTime: number, ParticleTime: number, Location: Vector, Velocity: Vector, Direction: Vector, Normal: Vector, BoneName: string, PhysMat: PhysicalMaterial) => void>;
-	SpriteComponent: BillboardComponent;
-	ArrowComponent: ArrowComponent;
-	static GetDefaultObject(): Emitter;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Emitter;
-	ToggleActive(): void;
-	SetVectorParameter(ParameterName: string,Param: Vector): void;
-	SetTemplate(NewTemplate: ParticleSystem): void;
-	SetMaterialParameter(ParameterName: string,Param: MaterialInterface): void;
-	SetFloatParameter(ParameterName: string,Param: number): void;
-	SetColorParameter(ParameterName: string,Param: LinearColor): void;
-	SetActorParameter(ParameterName: string,Param: Actor): void;
-	OnRep_bCurrentlyActive(): void;
-	OnParticleSystemFinished(FinishedComponent: ParticleSystemComponent): void;
-	IsActive(): boolean;
-	Deactivate(): void;
-	Activate(): void;
-	static C(Other: UObject | any): Emitter;
-}
-
-declare class EmitterCameraLensEffectBase extends Emitter { 
-	PS_CameraEffect: ParticleSystem;
-	PS_CameraEffectNonExtremeContent: ParticleSystem;
-	BaseCamera: PlayerCameraManager;
-	RelativeTransform: Transform;
-	BaseFOV: number;
-	bAllowMultipleInstances: boolean;
-	bResetWhenRetriggered: boolean;
-	EmittersToTreatAsSame: UnrealEngineClass[];
-	DistFromCamera: number;
-	static GetDefaultObject(): EmitterCameraLensEffectBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EmitterCameraLensEffectBase;
-	static C(Other: UObject | any): EmitterCameraLensEffectBase;
-}
-
-declare type EInitialOscillatorOffset = 'EOO_OffsetRandom' | 'EOO_OffsetZero' | 'EOO_MAX';
-declare var EInitialOscillatorOffset : { EOO_OffsetRandom:'EOO_OffsetRandom',EOO_OffsetZero:'EOO_OffsetZero',EOO_MAX:'EOO_MAX', };
-declare type EOscillatorWaveform = 'SineWave' | 'PerlinNoise' | 'EOscillatorWaveform_MAX';
-declare var EOscillatorWaveform : { SineWave:'SineWave',PerlinNoise:'PerlinNoise',EOscillatorWaveform_MAX:'EOscillatorWaveform_MAX', };
-declare class FOscillator { 
-	Amplitude: number;
-	Frequency: number;
-	InitialOffset: EInitialOscillatorOffset;
-	Waveform: EOscillatorWaveform;
-	clone() : FOscillator;
-	static C(Other: UObject | any): FOscillator;
-}
-
-declare class ROscillator { 
-	Pitch: FOscillator;
-	Yaw: FOscillator;
-	Roll: FOscillator;
-	clone() : ROscillator;
-	static C(Other: UObject | any): ROscillator;
-}
-
-declare class VOscillator { 
-	X: FOscillator;
-	Y: FOscillator;
-	Z: FOscillator;
-	clone() : VOscillator;
-	static C(Other: UObject | any): VOscillator;
-}
-
-declare class SubTrackGroup { 
-	GroupName: string;
-	TrackIndices: number[];
-	bIsCollapsed: boolean;
-	bIsSelected: boolean;
-	clone() : SubTrackGroup;
-	static C(Other: UObject | any): SubTrackGroup;
-}
-
-declare class SupportedSubTrackInfo { 
-	SupportedClass: UnrealEngineClass;
-	SubTrackName: string;
-	GroupIndex: number;
-	clone() : SupportedSubTrackInfo;
-	static C(Other: UObject | any): SupportedSubTrackInfo;
-}
-
-declare type ETrackActiveCondition = 'ETAC_Always' | 'ETAC_GoreEnabled' | 'ETAC_GoreDisabled' | 'ETAC_MAX';
-declare var ETrackActiveCondition : { ETAC_Always:'ETAC_Always',ETAC_GoreEnabled:'ETAC_GoreEnabled',ETAC_GoreDisabled:'ETAC_GoreDisabled',ETAC_MAX:'ETAC_MAX', };
-declare class InterpTrack extends UObject { 
-	SubTracks: InterpTrack[];
-	SubTrackGroups: SubTrackGroup[];
-	SupportedSubTracks: SupportedSubTrackInfo[];
-	TrackInstClass: UnrealEngineClass;
-	ActiveCondition: ETrackActiveCondition;
-	TrackTitle: string;
-	bOnePerGroup: boolean;
-	bDirGroupOnly: boolean;
-	bDisableTrack: boolean;
-	bIsSelected: boolean;
-	TrackIcon: Texture2D;
-	bIsAnimControlTrack: boolean;
-	bSubTrackOnly: boolean;
-	bVisible: boolean;
-	bIsRecording: boolean;
-	bIsCollapsed: boolean;
-	static Load(ResourceName: string): InterpTrack;
-	static Find(Outer: UObject, ResourceName: string): InterpTrack;
-	static GetDefaultObject(): InterpTrack;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrack;
-	static C(Other: UObject | any): InterpTrack;
-}
-
-declare class InterpGroup extends UObject { 
-	InterpTracks: InterpTrack[];
-	GroupName: string;
-	GroupColor: Color;
-	bCollapsed: boolean;
-	bVisible: boolean;
-	bIsFolder: boolean;
-	bIsParented: boolean;
-	bIsSelected: boolean;
-	static Load(ResourceName: string): InterpGroup;
-	static Find(Outer: UObject, ResourceName: string): InterpGroup;
-	static GetDefaultObject(): InterpGroup;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpGroup;
-	static C(Other: UObject | any): InterpGroup;
-}
-
-declare class CameraAnim extends UObject { 
-	CameraInterpGroup: InterpGroup;
-	PreviewInterpGroup: InterpGroup;
-	AnimLength: number;
-	BoundingBox: Box;
-	bRelativeToInitialTransform: boolean;
-	bRelativeToInitialFOV: boolean;
-	BaseFOV: number;
-	BasePostProcessSettings: PostProcessSettings;
-	BasePostProcessBlendWeight: number;
-	static Load(ResourceName: string): CameraAnim;
-	static Find(Outer: UObject, ResourceName: string): CameraAnim;
-	static GetDefaultObject(): CameraAnim;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraAnim;
-	static C(Other: UObject | any): CameraAnim;
-}
-
-declare class InterpGroupInst extends UObject { 
-	Group: InterpGroup;
-	GroupActor: Actor;
-	TrackInst: InterpTrackInst[];
-	static Load(ResourceName: string): InterpGroupInst;
-	static Find(Outer: UObject, ResourceName: string): InterpGroupInst;
-	static GetDefaultObject(): InterpGroupInst;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpGroupInst;
-	static C(Other: UObject | any): InterpGroupInst;
-}
-
-declare type EInterpCurveMode = 'CIM_Linear' | 'CIM_CurveAuto' | 'CIM_Constant' | 'CIM_CurveUser' | 'CIM_CurveBreak' | 'CIM_CurveAutoClamped' | 'CIM_MAX';
-declare var EInterpCurveMode : { CIM_Linear:'CIM_Linear',CIM_CurveAuto:'CIM_CurveAuto',CIM_Constant:'CIM_Constant',CIM_CurveUser:'CIM_CurveUser',CIM_CurveBreak:'CIM_CurveBreak',CIM_CurveAutoClamped:'CIM_CurveAutoClamped',CIM_MAX:'CIM_MAX', };
-declare class InterpCurvePointVector { 
-	InVal: number;
-	OutVal: Vector;
-	ArriveTangent: Vector;
-	LeaveTangent: Vector;
-	InterpMode: EInterpCurveMode;
-	clone() : InterpCurvePointVector;
-	static C(Other: UObject | any): InterpCurvePointVector;
-}
-
-declare class InterpCurveVector { 
-	Points: InterpCurvePointVector[];
-	bIsLooped: boolean;
-	LoopKeyOffset: number;
-	clone() : InterpCurveVector;
-	static C(Other: UObject | any): InterpCurveVector;
-}
-
-declare class InterpLookupPoint { 
-	GroupName: string;
-	Time: number;
-	clone() : InterpLookupPoint;
-	static C(Other: UObject | any): InterpLookupPoint;
-}
-
-declare class InterpLookupTrack { 
-	Points: InterpLookupPoint[];
-	clone() : InterpLookupTrack;
-	static C(Other: UObject | any): InterpLookupTrack;
-}
-
-declare type EInterpTrackMoveRotMode = 'IMR_Keyframed' | 'IMR_LookAtGroup' | 'IMR_Ignore' | 'IMR_MAX';
-declare var EInterpTrackMoveRotMode : { IMR_Keyframed:'IMR_Keyframed',IMR_LookAtGroup:'IMR_LookAtGroup',IMR_Ignore:'IMR_Ignore',IMR_MAX:'IMR_MAX', };
-declare class InterpTrackMove extends InterpTrack { 
-	PosTrack: InterpCurveVector;
-	EulerTrack: InterpCurveVector;
-	LookupTrack: InterpLookupTrack;
-	LookAtGroupName: string;
-	LinCurveTension: number;
-	AngCurveTension: number;
-	bUseQuatInterpolation: boolean;
-	bShowArrowAtKeys: boolean;
-	bDisableMovement: boolean;
-	bShowTranslationOnCurveEd: boolean;
-	bShowRotationOnCurveEd: boolean;
-	bHide3DTrack: boolean;
-	RotMode: EInterpTrackMoveRotMode;
-	static Load(ResourceName: string): InterpTrackMove;
-	static Find(Outer: UObject, ResourceName: string): InterpTrackMove;
-	static GetDefaultObject(): InterpTrackMove;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackMove;
-	static C(Other: UObject | any): InterpTrackMove;
-}
-
-declare class InterpTrackInstMove extends InterpTrackInst { 
-	ResetLocation: Vector;
-	ResetRotation: Rotator;
-	static Load(ResourceName: string): InterpTrackInstMove;
-	static Find(Outer: UObject, ResourceName: string): InterpTrackInstMove;
-	static GetDefaultObject(): InterpTrackInstMove;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstMove;
-	static C(Other: UObject | any): InterpTrackInstMove;
-}
-
-declare type ECameraAnimPlaySpace = 'CameraLocal' | 'World' | 'UserDefined' | 'ECameraAnimPlaySpace_MAX';
-declare var ECameraAnimPlaySpace : { CameraLocal:'CameraLocal',World:'World',UserDefined:'UserDefined',ECameraAnimPlaySpace_MAX:'ECameraAnimPlaySpace_MAX', };
-declare class CameraAnimInst extends UObject { 
-	CamAnim: CameraAnim;
-	InterpGroupInst: InterpGroupInst;
-	PlayRate: number;
-	MoveTrack: InterpTrackMove;
-	MoveInst: InterpTrackInstMove;
-	PlaySpace: ECameraAnimPlaySpace;
-	static Load(ResourceName: string): CameraAnimInst;
-	static Find(Outer: UObject, ResourceName: string): CameraAnimInst;
-	static GetDefaultObject(): CameraAnimInst;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraAnimInst;
-	Stop(bImmediate: boolean): void;
-	SetScale(NewDuration: number): void;
-	SetDuration(NewDuration: number): void;
-	static C(Other: UObject | any): CameraAnimInst;
-}
-
-declare class CameraShake extends UObject { 
-	bSingleInstance: boolean;
-	OscillationDuration: number;
-	OscillationBlendInTime: number;
-	OscillationBlendOutTime: number;
-	RotOscillation: ROscillator;
-	LocOscillation: VOscillator;
-	FOVOscillation: FOscillator;
-	AnimPlayRate: number;
-	AnimScale: number;
-	AnimBlendInTime: number;
-	AnimBlendOutTime: number;
-	RandomAnimSegmentDuration: number;
-	Anim: CameraAnim;
-	bRandomAnimSegment: boolean;
-	CameraOwner: PlayerCameraManager;
-	ShakeScale: number;
-	OscillatorTimeRemaining: number;
-	AnimInst: CameraAnimInst;
-	static Load(ResourceName: string): CameraShake;
-	static Find(Outer: UObject, ResourceName: string): CameraShake;
-	static GetDefaultObject(): CameraShake;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraShake;
-	ReceiveStopShake(bImmediately: boolean): void;
-	ReceivePlayShake(Scale: number): void;
-	ReceiveIsFinished(): boolean;
-	BlueprintUpdateCameraShake(DeltaTime: number,Alpha: number,POV: MinimalViewInfo,ModifiedPOV?: MinimalViewInfo): {ModifiedPOV: MinimalViewInfo};
-	static C(Other: UObject | any): CameraShake;
-}
-
-declare class CameraModifier_CameraShake extends CameraModifier { 
-	ActiveShakes: CameraShake[];
-	SplitScreenShakeScale: number;
-	static Load(ResourceName: string): CameraModifier_CameraShake;
-	static Find(Outer: UObject, ResourceName: string): CameraModifier_CameraShake;
-	static GetDefaultObject(): CameraModifier_CameraShake;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraModifier_CameraShake;
-	static C(Other: UObject | any): CameraModifier_CameraShake;
-}
-
-declare class MeshBuildSettings { 
-	bUseMikkTSpace: boolean;
-	bRecomputeNormals: boolean;
-	bRecomputeTangents: boolean;
-	bRemoveDegenerates: boolean;
-	bBuildAdjacencyBuffer: boolean;
-	bBuildReversedIndexBuffer: boolean;
-	bUseHighPrecisionTangentBasis: boolean;
-	bUseFullPrecisionUVs: boolean;
-	bGenerateLightmapUVs: boolean;
-	bGenerateDistanceFieldAsIfTwoSided: boolean;
-	MinLightmapResolution: number;
-	SrcLightmapIndex: number;
-	DstLightmapIndex: number;
-	BuildScale: number;
-	BuildScale3D: Vector;
-	DistanceFieldResolutionScale: number;
-	DistanceFieldBias: number;
-	DistanceFieldReplacementMesh: StaticMesh;
-	clone() : MeshBuildSettings;
-	static C(Other: UObject | any): MeshBuildSettings;
-}
-
-declare type EMeshFeatureImportance = 'Off' | 'Lowest' | 'Low' | 'Normal' | 'High' | 'Highest' | 'EMeshFeatureImportance_MAX';
-declare var EMeshFeatureImportance : { Off:'Off',Lowest:'Lowest',Low:'Low',Normal:'Normal',High:'High',Highest:'Highest',EMeshFeatureImportance_MAX:'EMeshFeatureImportance_MAX', };
-declare class MeshReductionSettings { 
-	PercentTriangles: number;
-	MaxDeviation: number;
-	PixelError: number;
-	WeldingThreshold: number;
-	HardAngleThreshold: number;
-	SilhouetteImportance: EMeshFeatureImportance;
-	TextureImportance: EMeshFeatureImportance;
-	ShadingImportance: EMeshFeatureImportance;
-	bRecalculateNormals: boolean;
-	BaseLODModel: number;
-	bGenerateUniqueLightmapUVs: boolean;
-	bKeepSymmetry: boolean;
-	bVisibilityAided: boolean;
-	bCullOccluded: boolean;
-	VisibilityAggressiveness: EMeshFeatureImportance;
-	VertexColorImportance: EMeshFeatureImportance;
-	clone() : MeshReductionSettings;
-	static C(Other: UObject | any): MeshReductionSettings;
-}
-
-declare class StaticMeshSourceModel { 
-	BuildSettings: MeshBuildSettings;
-	ReductionSettings: MeshReductionSettings;
-	LODDistance: number;
-	ScreenSize: PerPlatformFloat;
-	SourceImportFilename: string;
-	bImportWithBaseMesh: boolean;
-	clone() : StaticMeshSourceModel;
-	static C(Other: UObject | any): StaticMeshSourceModel;
-}
-
-declare class StaticMeshDescriptions extends UObject { 
-	static Load(ResourceName: string): StaticMeshDescriptions;
-	static Find(Outer: UObject, ResourceName: string): StaticMeshDescriptions;
-	static GetDefaultObject(): StaticMeshDescriptions;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshDescriptions;
-	static C(Other: UObject | any): StaticMeshDescriptions;
-}
-
-declare class MeshSectionInfoMap { 
-	Map: any;
-	clone() : MeshSectionInfoMap;
-	static C(Other: UObject | any): MeshSectionInfoMap;
-}
-
-declare class MaterialRemapIndex { 
-	ImportVersionKey: any;
-	MaterialRemap: number[];
-	clone() : MaterialRemapIndex;
-	static C(Other: UObject | any): MaterialRemapIndex;
-}
-
-declare class StaticMaterial { 
-	MaterialInterface: MaterialInterface;
-	MaterialSlotName: string;
-	ImportedMaterialSlotName: string;
-	UVChannelData: MeshUVChannelInfo;
-	clone() : StaticMaterial;
-	static C(Other: UObject | any): StaticMaterial;
-}
-
-declare class AssetEditorOrbitCameraPosition { 
-	bIsSet: boolean;
-	CamOrbitPoint: Vector;
-	CamOrbitZoom: Vector;
-	CamOrbitRotation: Rotator;
-	clone() : AssetEditorOrbitCameraPosition;
-	static C(Other: UObject | any): AssetEditorOrbitCameraPosition;
-}
-
-declare class StaticMeshSocket extends UObject { 
-	SocketName: string;
-	RelativeLocation: Vector;
-	RelativeRotation: Rotator;
-	RelativeScale: Vector;
-	Tag: string;
-	PreviewStaticMesh: StaticMesh;
-	bSocketCreatedAtImport: boolean;
-	static Load(ResourceName: string): StaticMeshSocket;
-	static Find(Outer: UObject, ResourceName: string): StaticMeshSocket;
-	static GetDefaultObject(): StaticMeshSocket;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshSocket;
-	static C(Other: UObject | any): StaticMeshSocket;
-}
-
-declare class NavCollisionBase extends UObject { 
-	bIsDynamicObstacle: boolean;
-	static Load(ResourceName: string): NavCollisionBase;
-	static Find(Outer: UObject, ResourceName: string): NavCollisionBase;
-	static GetDefaultObject(): NavCollisionBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavCollisionBase;
-	static C(Other: UObject | any): NavCollisionBase;
-}
-
-declare class MeshSectionInfo { 
-	MaterialIndex: number;
-	bEnableCollision: boolean;
-	bCastShadow: boolean;
-	clone() : MeshSectionInfo;
-	static C(Other: UObject | any): MeshSectionInfo;
-}
-
-declare class JavascriptRawMesh { 
-	FaceMaterialIndices: number[];
-	FaceSmoothingMasks: any[];
-	VertexPositions: Vector[];
-	WedgeIndices: any[];
-	WedgeTangentX: Vector[];
-	WedgeTangentY: Vector[];
-	WedgeTangentZ: Vector[];
-	WedgeTexCoords_0: Vector2D[];
-	WedgeTexCoords_1: Vector2D[];
-	WedgeTexCoords_2: Vector2D[];
-	WedgeTexCoords_3: Vector2D[];
-	WedgeTexCoords_4: Vector2D[];
-	WedgeTexCoords_5: Vector2D[];
-	WedgeTexCoords_6: Vector2D[];
-	WedgeTexCoords_7: Vector2D[];
-	WedgeColors: Color[];
-	MaterialIndexToImportIndex: number[];
-	clone() : JavascriptRawMesh;
-	static C(Other: UObject | any): JavascriptRawMesh;
-	CompactMaterialIndices(): {RawMesh: JavascriptRawMesh};
-	Empty(): {RawMesh: JavascriptRawMesh};
-	GetWedgePosition(WedgeIndex: number): Vector;
-	IsValid(): boolean;
-	IsValidOrFixable(): boolean;
-	static CompactMaterialIndices(RawMesh?: JavascriptRawMesh): {RawMesh: JavascriptRawMesh};
-	static Empty(RawMesh?: JavascriptRawMesh): {RawMesh: JavascriptRawMesh};
-	static GetWedgePosition(RawMesh: JavascriptRawMesh,WedgeIndex: number): Vector;
-	static IsValid(RawMesh: JavascriptRawMesh): boolean;
-	static IsValidOrFixable(RawMesh: JavascriptRawMesh): boolean;
-}
-
-declare class StaticMesh extends UObject { 
-	SourceModels: StaticMeshSourceModel[];
-	MeshDescriptions: StaticMeshDescriptions;
-	SectionInfoMap: MeshSectionInfoMap;
-	OriginalSectionInfoMap: MeshSectionInfoMap;
-	LODGroup: string;
-	ImportVersion: number;
-	MaterialRemapIndexPerImportVersion: MaterialRemapIndex[];
-	LightmapUVVersion: number;
-	bAutoComputeLODScreenSize: boolean;
-	Materials: MaterialInterface[];
-	MinLOD: PerPlatformInt;
-	LpvBiasMultiplier: number;
-	StaticMaterials: StaticMaterial[];
-	LightmapUVDensity: number;
-	LightMapResolution: number;
-	LightMapCoordinateIndex: number;
-	DistanceFieldSelfShadowBias: number;
-	BodySetup: BodySetup;
-	LODForCollision: number;
-	bGenerateMeshDistanceField: boolean;
-	bStripComplexCollisionForConsole: boolean;
-	bHasNavigationData: boolean;
-	bSupportUniformlyDistributedSampling: boolean;
-	bAllowCPUAccess: boolean;
-	AssetImportData: AssetImportData;
-	SourceFilePath: string;
-	SourceFileTimestamp: string;
-	ThumbnailInfo: ThumbnailInfo;
-	EditorCameraPosition: AssetEditorOrbitCameraPosition;
-	bCustomizedCollision: boolean;
-	LODForOccluderMesh: number;
-	Sockets: StaticMeshSocket[];
-	PositiveBoundsExtension: Vector;
-	NegativeBoundsExtension: Vector;
-	ExtendedBounds: BoxSphereBounds;
-	ElementToIgnoreForTexFactor: number;
-	AssetUserData: AssetUserData[];
-	EditableMesh: UObject;
-	NavCollision: NavCollisionBase;
-	static Load(ResourceName: string): StaticMesh;
-	static Find(Outer: UObject, ResourceName: string): StaticMesh;
-	static GetDefaultObject(): StaticMesh;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMesh;
-	SetMaterial(MaterialIndex: number,NewMaterial: MaterialInterface): void;
-	GetNumSections(InLOD: number): number;
-	GetNumLODs(): number;
-	GetMaterialIndex(MaterialSlotName: string): number;
-	GetMaterial(MaterialIndex: number): MaterialInterface;
-	GetBounds(): BoxSphereBounds;
-	GetBoundingBox(): Box;
-	static C(Other: UObject | any): StaticMesh;
-	Build(): void;
-	GetSectionInfo(LODIndex: number,SectionIndex: number): MeshSectionInfo;
-	LoadRawMesh(SourceModelIndex: number,OutMesh?: JavascriptRawMesh): {OutMesh: JavascriptRawMesh};
-	SaveRawMesh(SourceModelIndex: number,InMesh?: JavascriptRawMesh): {InMesh: JavascriptRawMesh};
-	SetSectionInfo(LODIndex: number,SectionIndex: number,Info: MeshSectionInfo): void;
-	GetSectionFromStaticMesh(LODIndex: number,SectionIndex: number,Vertices?: Vector[],Triangles?: number[],Normals?: Vector[],UVs?: Vector2D[],Tangents?: ProcMeshTangent[]): {Vertices: Vector[], Triangles: number[], Normals: Vector[], UVs: Vector2D[], Tangents: ProcMeshTangent[]};
-	static Build(StaticMesh: StaticMesh): void;
-	static GetSectionInfo(StaticMesh: StaticMesh,LODIndex: number,SectionIndex: number): MeshSectionInfo;
-	static LoadRawMesh(StaticMesh: StaticMesh,SourceModelIndex: number,OutMesh?: JavascriptRawMesh): {OutMesh: JavascriptRawMesh};
-	static SaveRawMesh(StaticMesh: StaticMesh,SourceModelIndex: number,InMesh?: JavascriptRawMesh): {InMesh: JavascriptRawMesh};
-	static SetSectionInfo(StaticMesh: StaticMesh,LODIndex: number,SectionIndex: number,Info: MeshSectionInfo): void;
-	static GetSectionFromStaticMesh(InMesh: StaticMesh,LODIndex: number,SectionIndex: number,Vertices?: Vector[],Triangles?: number[],Normals?: Vector[],UVs?: Vector2D[],Tangents?: ProcMeshTangent[]): {Vertices: Vector[], Triangles: number[], Normals: Vector[], UVs: Vector2D[], Tangents: ProcMeshTangent[]};
-}
-
-declare class CameraComponent extends SceneComponent { 
-	FieldOfView: number;
-	OrthoWidth: number;
-	OrthoNearClipPlane: number;
-	OrthoFarClipPlane: number;
-	AspectRatio: number;
-	bConstrainAspectRatio: boolean;
-	bUseFieldOfViewForLOD: boolean;
-	bLockToHmd: boolean;
-	bUsePawnControlRotation: boolean;
-	ProjectionMode: ECameraProjectionMode;
-	CameraMesh: StaticMesh;
-	PostProcessBlendWeight: number;
-	PostProcessSettings: PostProcessSettings;
-	bUseControllerViewRotation: boolean;
-	static Load(ResourceName: string): CameraComponent;
-	static Find(Outer: UObject, ResourceName: string): CameraComponent;
-	static GetDefaultObject(): CameraComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraComponent;
-	SetUseFieldOfViewForLOD(bInUseFieldOfViewForLOD: boolean): void;
-	SetProjectionMode(InProjectionMode: ECameraProjectionMode): void;
-	SetPostProcessBlendWeight(InPostProcessBlendWeight: number): void;
-	SetOrthoWidth(InOrthoWidth: number): void;
-	SetOrthoNearClipPlane(InOrthoNearClipPlane: number): void;
-	SetOrthoFarClipPlane(InOrthoFarClipPlane: number): void;
-	SetFieldOfView(InFieldOfView: number): void;
-	SetConstraintAspectRatio(bInConstrainAspectRatio: boolean): void;
-	SetAspectRatio(InAspectRatio: number): void;
-	GetFilmbackText(): string;
-	GetCameraView(DeltaTime: number,DesiredView?: MinimalViewInfo): {DesiredView: MinimalViewInfo};
-	static C(Other: UObject | any): CameraComponent;
-}
-
-declare class CameraActor extends Actor { 
-	AutoActivateForPlayer: EAutoReceiveInput;
-	CameraComponent: CameraComponent;
-	SceneComponent: SceneComponent;
-	bConstrainAspectRatio: boolean;
-	AspectRatio: number;
-	FOVAngle: number;
-	PostProcessBlendWeight: number;
-	PostProcessSettings: PostProcessSettings;
-	static GetDefaultObject(): CameraActor;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraActor;
-	GetAutoActivatePlayerIndex(): number;
-	static C(Other: UObject | any): CameraActor;
-	DrawDebugCamera(CameraColor: LinearColor,Duration: number): void;
-	static DrawDebugCamera(CameraActor: CameraActor,CameraColor: LinearColor,Duration: number): void;
-}
-
-declare class PlayerCameraManager extends Actor { 
-	PCOwner: PlayerController;
-	TransformComponent: SceneComponent;
-	DefaultFOV: number;
-	DefaultOrthoWidth: number;
-	DefaultAspectRatio: number;
-	CameraCache: CameraCacheEntry;
-	LastFrameCameraCache: CameraCacheEntry;
-	ViewTarget: TViewTarget;
-	PendingViewTarget: TViewTarget;
-	CameraCachePrivate: CameraCacheEntry;
-	LastFrameCameraCachePrivate: CameraCacheEntry;
-	ModifierList: CameraModifier[];
-	DefaultModifiers: UnrealEngineClass[];
-	FreeCamDistance: number;
-	FreeCamOffset: Vector;
-	ViewTargetOffset: Vector;
-	CameraLensEffects: EmitterCameraLensEffectBase[];
-	CachedCameraShakeMod: CameraModifier_CameraShake;
-	AnimInstPool: CameraAnimInst;
-	PostProcessBlendCache: PostProcessSettings[];
-	ActiveAnims: CameraAnimInst[];
-	FreeAnims: CameraAnimInst[];
-	AnimCameraActor: CameraActor;
-	bIsOrthographic: boolean;
-	bDefaultConstrainAspectRatio: boolean;
-	bClientSimulatingViewTarget: boolean;
-	bUseClientSideCameraUpdates: boolean;
-	bGameCameraCutThisFrame: boolean;
-	ViewPitchMin: number;
-	ViewPitchMax: number;
-	ViewYawMin: number;
-	ViewYawMax: number;
-	ViewRollMin: number;
-	ViewRollMax: number;
-	static GetDefaultObject(): PlayerCameraManager;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayerCameraManager;
-	StopCameraShake(ShakeInstance: CameraShake,bImmediately: boolean): void;
-	StopCameraFade(): void;
-	StopCameraAnimInst(AnimInst: CameraAnimInst,bImmediate: boolean): void;
-	StopAllInstancesOfCameraShake(Shake: UnrealEngineClass,bImmediately: boolean): void;
-	StopAllInstancesOfCameraAnim(Anim: CameraAnim,bImmediate: boolean): void;
-	StopAllCameraShakes(bImmediately: boolean): void;
-	StopAllCameraAnims(bImmediate: boolean): void;
-	StartCameraFade(FromAlpha: number,ToAlpha: number,Duration: number,Color: LinearColor,bShouldFadeAudio: boolean,bHoldWhenFinished: boolean): void;
-	SetManualCameraFade(InFadeAmount: number,Color: LinearColor,bInFadeAudio: boolean): void;
-	RemoveCameraModifier(ModifierToRemove: CameraModifier): boolean;
-	RemoveCameraLensEffect(Emitter: EmitterCameraLensEffectBase): void;
-	PlayCameraShake(ShakeClass: UnrealEngineClass,Scale: number,PlaySpace: ECameraAnimPlaySpace,UserPlaySpaceRot: Rotator): CameraShake;
-	PlayCameraAnim(Anim: CameraAnim,Rate: number,Scale: number,BlendInTime: number,BlendOutTime: number,bLoop: boolean,bRandomStartTime: boolean,Duration: number,PlaySpace: ECameraAnimPlaySpace,UserPlaySpaceRot: Rotator): CameraAnimInst;
-	PhotographyCameraModify(NewCameraLocation: Vector,PreviousCameraLocation: Vector,OriginalCameraLocation: Vector,ResultCameraLocation?: Vector): {ResultCameraLocation: Vector};
-	OnPhotographySessionStart(): void;
-	OnPhotographySessionEnd(): void;
-	OnPhotographyMultiPartCaptureStart(): void;
-	OnPhotographyMultiPartCaptureEnd(): void;
-	GetOwningPlayerController(): PlayerController;
-	GetFOVAngle(): number;
-	GetCameraRotation(): Rotator;
-	GetCameraLocation(): Vector;
-	FindCameraModifierByClass(ModifierClass: UnrealEngineClass): CameraModifier;
-	ClearCameraLensEffects(): void;
-	BlueprintUpdateCamera(CameraTarget: Actor,NewCameraLocation?: Vector,NewCameraRotation?: Rotator,NewCameraFOV?: number): {NewCameraLocation: Vector, NewCameraRotation: Rotator, NewCameraFOV: number, $: boolean};
-	AddNewCameraModifier(ModifierClass: UnrealEngineClass): CameraModifier;
-	AddCameraLensEffect(LensEffectEmitterClass: UnrealEngineClass): EmitterCameraLensEffectBase;
-	static C(Other: UObject | any): PlayerCameraManager;
-}
-
-declare class DrawFrustumComponent extends PrimitiveComponent { 
-	FrustumColor: Color;
-	FrustumAngle: number;
-	FrustumAspectRatio: number;
-	FrustumStartDist: number;
-	FrustumEndDist: number;
-	Texture: Texture;
-	static Load(ResourceName: string): DrawFrustumComponent;
-	static Find(Outer: UObject, ResourceName: string): DrawFrustumComponent;
-	static GetDefaultObject(): DrawFrustumComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DrawFrustumComponent;
-	static C(Other: UObject | any): DrawFrustumComponent;
-}
-
-declare class DebugCameraController extends PlayerController { 
-	bShowSelectedInfo: boolean;
-	bIsFrozenRendering: boolean;
-	DrawFrustum: DrawFrustumComponent;
-	SpeedScale: number;
-	InitialMaxSpeed: number;
-	InitialAccel: number;
-	InitialDecel: number;
-	static GetDefaultObject(): DebugCameraController;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DebugCameraController;
-	ToggleDisplay(): void;
-	ShowDebugSelectedInfo(): void;
-	SetPawnMovementSpeedScale(NewSpeedScale: number): void;
-	ReceiveOnDeactivate(RestoredPC: PlayerController): void;
-	ReceiveOnActorSelected(NewSelectedActor: Actor,SelectHitLocation: Vector,SelectHitNormal: Vector,Hit: HitResult): void;
-	ReceiveOnActivate(OriginalPC: PlayerController): void;
-	GetSelectedActor(): Actor;
-	static C(Other: UObject | any): DebugCameraController;
-}
-
-declare class CheatManager extends UObject { 
-	DebugCameraControllerRef: DebugCameraController;
-	DebugCameraControllerClass: UnrealEngineClass;
-	static Load(ResourceName: string): CheatManager;
-	static Find(Outer: UObject, ResourceName: string): CheatManager;
-	static GetDefaultObject(): CheatManager;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CheatManager;
-	Walk(): void;
-	ViewSelf(): void;
-	ViewPlayer(S: string): void;
-	ViewClass(DesiredClass: UnrealEngineClass): void;
-	ViewActor(ActorName: string): void;
-	UpdateSafeArea(): void;
-	ToggleServerStatReplicatorUpdateStatNet(): void;
-	ToggleServerStatReplicatorClientOverwrite(): void;
-	ToggleDebugCamera(): void;
-	ToggleAILogging(): void;
-	TestCollisionDistance(): void;
-	Teleport(): void;
-	Summon(ClassName: string): void;
-	StreamLevelOut(PackageName: string): void;
-	StreamLevelIn(PackageName: string): void;
-	SpawnServerStatReplicator(): void;
-	Slomo(NewTimeDilation: number): void;
-	SetWorldOrigin(): void;
-	SetMouseSensitivityToDefault(): void;
-	ServerToggleAILogging(): void;
-	ReceiveInitCheatManager(): void;
-	ReceiveEndPlay(): void;
-	PlayersOnly(): void;
-	OnlyLoadLevel(PackageName: string): void;
-	LogLoc(): void;
-	InvertMouse(): void;
-	God(): void;
-	Ghost(): void;
-	FreezeFrame(Delay: number): void;
-	Fly(): void;
-	FlushLog(): void;
-	EnableDebugCamera(): void;
-	DumpVoiceMutingState(): void;
-	DumpPartyState(): void;
-	DumpOnlineSessionState(): void;
-	DumpChatState(): void;
-	DisableDebugCamera(): void;
-	DestroyTarget(): void;
-	DestroyServerStatReplicator(): void;
-	DestroyPawns(aClass: UnrealEngineClass): void;
-	DestroyAllPawnsExceptTarget(): void;
-	DestroyAll(aClass: UnrealEngineClass): void;
-	DebugCapsuleSweepSize(HalfHeight: number,Radius: number): void;
-	DebugCapsuleSweepPawn(): void;
-	DebugCapsuleSweepComplex(bTraceComplex: boolean): void;
-	DebugCapsuleSweepClear(): void;
-	DebugCapsuleSweepChannel(Channel: ECollisionChannel): void;
-	DebugCapsuleSweepCapture(): void;
-	DebugCapsuleSweep(): void;
-	DamageTarget(DamageAmount: number): void;
-	CheatScript(ScriptName: string): void;
-	ChangeSize(F: number): void;
-	BugItStringCreator(ViewLocation: Vector,ViewRotation: Rotator,GoString?: string,LocString?: string): {GoString: string, LocString: string};
-	BugItGo(X: number,Y: number,Z: number,Pitch: number,Yaw: number,Roll: number): void;
-	BugIt(ScreenShotDescription: string): void;
-	static C(Other: UObject | any): CheatManager;
-}
-
-declare class KeyBind { 
-	Key: Key;
-	Command: string;
-	Control: boolean;
-	Shift: boolean;
-	Alt: boolean;
-	Cmd: boolean;
-	bIgnoreCtrl: boolean;
-	bIgnoreShift: boolean;
-	bIgnoreAlt: boolean;
-	bIgnoreCmd: boolean;
-	bDisabled: boolean;
-	clone() : KeyBind;
-	static C(Other: UObject | any): KeyBind;
-}
-
-declare class PlayerInput extends UObject { 
-	DebugExecBindings: KeyBind[];
-	InvertedAxis: string[];
-	static Load(ResourceName: string): PlayerInput;
-	static Find(Outer: UObject, ResourceName: string): PlayerInput;
-	static GetDefaultObject(): PlayerInput;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayerInput;
-	SetMouseSensitivity(SensitivityX: number,SensitivityY: number): void;
-	SetBind(BindName: string,Command: string): void;
-	InvertAxisKey(AxisKey: Key): void;
-	InvertAxis(AxisName: string): void;
-	ClearSmoothing(): void;
-	static C(Other: UObject | any): PlayerInput;
-}
-
-declare class RuntimeFloatCurve { 
-	EditorCurveData: RichCurve;
-	ExternalCurve: CurveFloat;
-	clone() : RuntimeFloatCurve;
-	static C(Other: UObject | any): RuntimeFloatCurve;
-}
-
-declare class ForceFeedbackChannelDetails { 
-	bAffectsLeftLarge: boolean;
-	bAffectsLeftSmall: boolean;
-	bAffectsRightLarge: boolean;
-	bAffectsRightSmall: boolean;
-	Curve: RuntimeFloatCurve;
-	clone() : ForceFeedbackChannelDetails;
-	static C(Other: UObject | any): ForceFeedbackChannelDetails;
-}
-
-declare type EAttenuationDistanceModel = 'Linear' | 'Logarithmic' | 'Inverse' | 'LogReverse' | 'NaturalSound' | 'Custom' | 'EAttenuationDistanceModel_MAX';
-declare var EAttenuationDistanceModel : { Linear:'Linear',Logarithmic:'Logarithmic',Inverse:'Inverse',LogReverse:'LogReverse',NaturalSound:'NaturalSound',Custom:'Custom',EAttenuationDistanceModel_MAX:'EAttenuationDistanceModel_MAX', };
-declare type EAttenuationShape = 'Sphere' | 'Capsule' | 'Box' | 'Cone' | 'EAttenuationShape_MAX';
-declare var EAttenuationShape : { Sphere:'Sphere',Capsule:'Capsule',Box:'Box',Cone:'Cone',EAttenuationShape_MAX:'EAttenuationShape_MAX', };
-declare class BaseAttenuationSettings { 
-	DistanceAlgorithm: EAttenuationDistanceModel;
-	AttenuationShape: EAttenuationShape;
-	dBAttenuationAtMax: number;
-	AttenuationShapeExtents: Vector;
-	ConeOffset: number;
-	FalloffDistance: number;
-	CustomAttenuationCurve: RuntimeFloatCurve;
-	clone() : BaseAttenuationSettings;
-	static C(Other: UObject | any): BaseAttenuationSettings;
-}
-
-declare class ForceFeedbackAttenuationSettings extends BaseAttenuationSettings { 
-	clone() : ForceFeedbackAttenuationSettings;
-	static C(Other: UObject | any): ForceFeedbackAttenuationSettings;
-}
-
-declare class ForceFeedbackAttenuation extends UObject { 
-	Attenuation: ForceFeedbackAttenuationSettings;
-	static Load(ResourceName: string): ForceFeedbackAttenuation;
-	static Find(Outer: UObject, ResourceName: string): ForceFeedbackAttenuation;
-	static GetDefaultObject(): ForceFeedbackAttenuation;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ForceFeedbackAttenuation;
-	static C(Other: UObject | any): ForceFeedbackAttenuation;
-}
-
-declare class ForceFeedbackComponent extends SceneComponent { 
-	ForceFeedbackEffect: ForceFeedbackEffect;
-	bAutoDestroy: boolean;
-	bStopWhenOwnerDestroyed: boolean;
-	bLooping: boolean;
-	bIgnoreTimeDilation: boolean;
-	bOverrideAttenuation: boolean;
-	IntensityMultiplier: number;
-	AttenuationSettings: ForceFeedbackAttenuation;
-	AttenuationOverrides: ForceFeedbackAttenuationSettings;
-	OnForceFeedbackFinished: UnrealEngineMulticastDelegate<(ForceFeedbackComponent: ForceFeedbackComponent) => void>;
-	static Load(ResourceName: string): ForceFeedbackComponent;
-	static Find(Outer: UObject, ResourceName: string): ForceFeedbackComponent;
-	static GetDefaultObject(): ForceFeedbackComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ForceFeedbackComponent;
-	Stop(): void;
-	SetIntensityMultiplier(NewIntensityMultiplier: number): void;
-	SetForceFeedbackEffect(NewForceFeedbackEffect: ForceFeedbackEffect): void;
-	Play(StartTime: number): void;
-	BP_GetAttenuationSettingsToApply(OutAttenuationSettings?: ForceFeedbackAttenuationSettings): {OutAttenuationSettings: ForceFeedbackAttenuationSettings, $: boolean};
-	AdjustAttenuation(InAttenuationSettings: ForceFeedbackAttenuationSettings): void;
-	static C(Other: UObject | any): ForceFeedbackComponent;
-}
-
-declare class ForceFeedbackEffect extends UObject { 
-	ChannelDetails: ForceFeedbackChannelDetails[];
-	Duration: number;
-	static Load(ResourceName: string): ForceFeedbackEffect;
-	static Find(Outer: UObject, ResourceName: string): ForceFeedbackEffect;
-	static GetDefaultObject(): ForceFeedbackEffect;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ForceFeedbackEffect;
-	static C(Other: UObject | any): ForceFeedbackEffect;
-	SpawnForceFeedbackAttached(AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,bStopWhenAttachedToDestroyed: boolean,bLooping: boolean,IntensityMultiplier: number,StartTime: number,AttenuationSettings: ForceFeedbackAttenuation,bAutoDestroy: boolean): ForceFeedbackComponent;
-	static SpawnForceFeedbackAttached(ForceFeedbackEffect: ForceFeedbackEffect,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,bStopWhenAttachedToDestroyed: boolean,bLooping: boolean,IntensityMultiplier: number,StartTime: number,AttenuationSettings: ForceFeedbackAttenuation,bAutoDestroy: boolean): ForceFeedbackComponent;
-}
-
-declare class ActiveForceFeedbackEffect { 
-	ForceFeedbackEffect: ForceFeedbackEffect;
-	clone() : ActiveForceFeedbackEffect;
-	static C(Other: UObject | any): ActiveForceFeedbackEffect;
-}
-
-declare class ChildConnection extends NetConnection { 
-	Parent: NetConnection;
-	static Load(ResourceName: string): ChildConnection;
-	static Find(Outer: UObject, ResourceName: string): ChildConnection;
-	static GetDefaultObject(): ChildConnection;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ChildConnection;
-	static C(Other: UObject | any): ChildConnection;
-}
-
-declare class Property extends Field { 
-	static Load(ResourceName: string): Property;
-	static Find(Outer: UObject, ResourceName: string): Property;
-	static GetDefaultObject(): Property;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Property;
-	static C(Other: UObject | any): Property;
-}
-
-declare class Channel extends UObject { 
-	Connection: NetConnection;
-	static Load(ResourceName: string): Channel;
-	static Find(Outer: UObject, ResourceName: string): Channel;
-	static GetDefaultObject(): Channel;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Channel;
-	static C(Other: UObject | any): Channel;
-}
-
-declare class ReplicationDriver extends UObject { 
-	static Load(ResourceName: string): ReplicationDriver;
-	static Find(Outer: UObject, ResourceName: string): ReplicationDriver;
-	static GetDefaultObject(): ReplicationDriver;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReplicationDriver;
-	static C(Other: UObject | any): ReplicationDriver;
-}
-
-declare class NetDriver extends UObject { 
-	NetConnectionClassName: string;
-	ReplicationDriverClassName: string;
-	MaxDownloadSize: number;
-	bClampListenServerTickRate: boolean;
-	NetServerMaxTickRate: number;
-	MaxInternetClientRate: number;
-	MaxClientRate: number;
-	ServerTravelPause: number;
-	SpawnPrioritySeconds: number;
-	RelevantTimeout: number;
-	KeepAliveTime: number;
-	InitialConnectTimeout: number;
-	ConnectionTimeout: number;
-	TimeoutMultiplierForUnoptimizedBuilds: number;
-	bNoTimeouts: boolean;
-	ServerConnection: NetConnection;
-	ClientConnections: NetConnection[];
-	World: World;
-	WorldPackage: Package;
-	NetConnectionClass: UnrealEngineClass;
-	ReplicationDriverClass: UnrealEngineClass;
-	RoleProperty: Property;
-	RemoteRoleProperty: Property;
-	NetDriverName: string;
-	ActorChannelPool: Channel[];
-	Time: number;
-	ReplicationDriver: ReplicationDriver;
-	static Load(ResourceName: string): NetDriver;
-	static Find(Outer: UObject, ResourceName: string): NetDriver;
-	static GetDefaultObject(): NetDriver;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NetDriver;
-	static C(Other: UObject | any): NetDriver;
-}
-
-declare class PackageMap extends UObject { 
-	static Load(ResourceName: string): PackageMap;
-	static Find(Outer: UObject, ResourceName: string): PackageMap;
-	static GetDefaultObject(): PackageMap;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PackageMap;
-	static C(Other: UObject | any): PackageMap;
-}
-
-declare class NetConnection extends Player { 
-	Children: ChildConnection[];
-	Driver: NetDriver;
-	PackageMapClass: UnrealEngineClass;
-	PackageMap: PackageMap;
-	OpenChannels: Channel[];
-	SentTemporaries: Actor[];
-	ViewTarget: Actor;
-	OwningActor: Actor;
-	MaxPacket: number;
-	InternalAck: boolean;
-	PlayerId: UniqueNetIdRepl;
-	LastReceiveTime: any;
-	ChannelsToTick: Channel[];
-	static Load(ResourceName: string): NetConnection;
-	static Find(Outer: UObject, ResourceName: string): NetConnection;
-	static GetDefaultObject(): NetConnection;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NetConnection;
-	static C(Other: UObject | any): NetConnection;
-}
-
-declare type EMouseCursor = 'None' | 'Default' | 'TextEditBeam' | 'ResizeLeftRight' | 'ResizeUpDown' | 'ResizeSouthEast' | 'ResizeSouthWest' | 'CardinalCross' | 'Crosshairs' | 'Hand' | 'GrabHand' | 'GrabHandClosed' | 'SlashedCircle' | 'EyeDropper' | 'EMouseCursor_MAX';
-declare var EMouseCursor : { None:'None',Default:'Default',TextEditBeam:'TextEditBeam',ResizeLeftRight:'ResizeLeftRight',ResizeUpDown:'ResizeUpDown',ResizeSouthEast:'ResizeSouthEast',ResizeSouthWest:'ResizeSouthWest',CardinalCross:'CardinalCross',Crosshairs:'Crosshairs',Hand:'Hand',GrabHand:'GrabHand',GrabHandClosed:'GrabHandClosed',SlashedCircle:'SlashedCircle',EyeDropper:'EyeDropper',EMouseCursor_MAX:'EMouseCursor_MAX', };
-declare class CachedKeyToActionInfo { 
-	PlayerInput: PlayerInput;
-	clone() : CachedKeyToActionInfo;
-	static C(Other: UObject | any): CachedKeyToActionInfo;
-}
-
-declare type EControllerAnalogStick = 'CAS_LeftStick' | 'CAS_RightStick' | 'CAS_MAX';
-declare var EControllerAnalogStick : { CAS_LeftStick:'CAS_LeftStick',CAS_RightStick:'CAS_RightStick',CAS_MAX:'CAS_MAX', };
-declare class InputComponent extends ActorComponent { 
-	CachedKeyToActionInfo: CachedKeyToActionInfo[];
-	static Load(ResourceName: string): InputComponent;
-	static Find(Outer: UObject, ResourceName: string): InputComponent;
-	static GetDefaultObject(): InputComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputComponent;
-	WasControllerKeyJustReleased(Key: Key): boolean;
-	WasControllerKeyJustPressed(Key: Key): boolean;
-	IsControllerKeyDown(Key: Key): boolean;
-	GetTouchState(FingerIndex: number,LocationX?: number,LocationY?: number,bIsCurrentlyPressed?: boolean): {LocationX: number, LocationY: number, bIsCurrentlyPressed: boolean};
-	GetControllerVectorKeyState(Key: Key): Vector;
-	GetControllerMouseDelta(DeltaX?: number,DeltaY?: number): {DeltaX: number, DeltaY: number};
-	GetControllerKeyTimeDown(Key: Key): number;
-	GetControllerAnalogStickState(WhichStick: EControllerAnalogStick,StickX?: number,StickY?: number): {StickX: number, StickY: number};
-	GetControllerAnalogKeyState(Key: Key): number;
-	static C(Other: UObject | any): InputComponent;
-}
-
-declare class TouchInputControl { 
-	Image1: Texture2D;
-	Image2: Texture2D;
-	Center: Vector2D;
-	VisualSize: Vector2D;
-	ThumbSize: Vector2D;
-	InteractionSize: Vector2D;
-	InputScale: Vector2D;
-	MainInputKey: Key;
-	AltInputKey: Key;
-	clone() : TouchInputControl;
-	static C(Other: UObject | any): TouchInputControl;
-}
-
-declare class TouchInterface extends UObject { 
-	Controls: TouchInputControl[];
-	ActiveOpacity: number;
-	InactiveOpacity: number;
-	TimeUntilDeactive: number;
-	TimeUntilReset: number;
-	ActivationDelay: number;
-	bPreventRecenter: boolean;
-	StartupDelay: number;
-	static Load(ResourceName: string): TouchInterface;
-	static Find(Outer: UObject, ResourceName: string): TouchInterface;
-	static GetDefaultObject(): TouchInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TouchInterface;
-	static C(Other: UObject | any): TouchInterface;
-}
-
-declare class SphereComponent extends ShapeComponent { 
-	SphereRadius: number;
-	static Load(ResourceName: string): SphereComponent;
-	static Find(Outer: UObject, ResourceName: string): SphereComponent;
-	static GetDefaultObject(): SphereComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SphereComponent;
-	SetSphereRadius(InSphereRadius: number,bUpdateOverlaps: boolean): void;
-	GetUnscaledSphereRadius(): number;
-	GetShapeScale(): number;
-	GetScaledSphereRadius(): number;
-	static C(Other: UObject | any): SphereComponent;
-}
-
-declare class PaintedVertex { 
-	Position: Vector;
-	Normal: Vector4;
-	Color: Color;
-	clone() : PaintedVertex;
-	static C(Other: UObject | any): PaintedVertex;
-}
-
-declare class StaticMeshComponentLODInfo { 
-	PaintedVertices: PaintedVertex[];
-	clone() : StaticMeshComponentLODInfo;
-	static C(Other: UObject | any): StaticMeshComponentLODInfo;
-}
-
-declare class StreamingTextureBuildInfo { 
-	PackedRelativeBox: any;
-	TextureLevelIndex: number;
-	TexelFactor: number;
-	clone() : StreamingTextureBuildInfo;
-	static C(Other: UObject | any): StreamingTextureBuildInfo;
-}
-
-declare class LightmassPrimitiveSettings { 
-	bUseTwoSidedLighting: boolean;
-	bShadowIndirectOnly: boolean;
-	bUseEmissiveForStaticLighting: boolean;
-	bUseVertexNormalForHemisphereGather: boolean;
-	EmissiveLightFalloffExponent: number;
-	EmissiveLightExplicitInfluenceRadius: number;
-	EmissiveBoost: number;
-	DiffuseBoost: number;
-	FullyOccludedSamplesFraction: number;
-	clone() : LightmassPrimitiveSettings;
-	static C(Other: UObject | any): LightmassPrimitiveSettings;
-}
-
-declare class ProcMeshVertex { 
-	Position: Vector;
-	Normal: Vector;
-	Tangent: ProcMeshTangent;
-	Color: Color;
-	UV0: Vector2D;
-	UV1: Vector2D;
-	UV2: Vector2D;
-	UV3: Vector2D;
-	clone() : ProcMeshVertex;
-	static C(Other: UObject | any): ProcMeshVertex;
-}
-
-declare class ProcMeshSection { 
-	ProcVertexBuffer: ProcMeshVertex[];
-	ProcIndexBuffer: any[];
-	SectionLocalBox: Box;
-	bEnableCollision: boolean;
-	bSectionVisible: boolean;
-	clone() : ProcMeshSection;
-	static C(Other: UObject | any): ProcMeshSection;
-}
-
-declare type EProcMeshSliceCapOption = 'NoCap' | 'CreateNewSectionForCap' | 'UseLastSectionForCap' | 'EProcMeshSliceCapOption_MAX';
-declare var EProcMeshSliceCapOption : { NoCap:'NoCap',CreateNewSectionForCap:'CreateNewSectionForCap',UseLastSectionForCap:'UseLastSectionForCap',EProcMeshSliceCapOption_MAX:'EProcMeshSliceCapOption_MAX', };
-declare class ProceduralMeshComponent extends MeshComponent { 
-	bUseComplexAsSimpleCollision: boolean;
-	bUseAsyncCooking: boolean;
-	ProcMeshBodySetup: BodySetup;
-	ProcMeshSections: ProcMeshSection[];
-	CollisionConvexElems: KConvexElem[];
-	LocalBounds: BoxSphereBounds;
-	AsyncBodySetupQueue: BodySetup[];
-	static Load(ResourceName: string): ProceduralMeshComponent;
-	static Find(Outer: UObject, ResourceName: string): ProceduralMeshComponent;
-	static GetDefaultObject(): ProceduralMeshComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ProceduralMeshComponent;
-	UpdateMeshSection_LinearColor(SectionIndex: number,Vertices: Vector[],Normals: Vector[],UV0: Vector2D[],UV1: Vector2D[],UV2: Vector2D[],UV3: Vector2D[],VertexColors: LinearColor[],Tangents: ProcMeshTangent[]): void;
-	UpdateMeshSection(SectionIndex: number,Vertices: Vector[],Normals: Vector[],UV0: Vector2D[],VertexColors: Color[],Tangents: ProcMeshTangent[]): void;
-	SetMeshSectionVisible(SectionIndex: number,bNewVisibility: boolean): void;
-	IsMeshSectionVisible(SectionIndex: number): boolean;
-	GetNumSections(): number;
-	CreateMeshSection_LinearColor(SectionIndex: number,Vertices: Vector[],Triangles: number[],Normals: Vector[],UV0: Vector2D[],UV1: Vector2D[],UV2: Vector2D[],UV3: Vector2D[],VertexColors: LinearColor[],Tangents: ProcMeshTangent[],bCreateCollision: boolean): void;
-	CreateMeshSection(SectionIndex: number,Vertices: Vector[],Triangles: number[],Normals: Vector[],UV0: Vector2D[],VertexColors: Color[],Tangents: ProcMeshTangent[],bCreateCollision: boolean): void;
-	ClearMeshSection(SectionIndex: number): void;
-	ClearCollisionConvexMeshes(): void;
-	ClearAllMeshSections(): void;
-	AddCollisionConvexMesh(ConvexVerts: Vector[]): void;
-	static C(Other: UObject | any): ProceduralMeshComponent;
-	GetSectionFromProceduralMesh(SectionIndex: number,Vertices?: Vector[],Triangles?: number[],Normals?: Vector[],UVs?: Vector2D[],Tangents?: ProcMeshTangent[]): {Vertices: Vector[], Triangles: number[], Normals: Vector[], UVs: Vector2D[], Tangents: ProcMeshTangent[]};
-	SliceProceduralMesh(PlanePosition: Vector,PlaneNormal: Vector,bCreateOtherHalf: boolean,OutOtherHalfProcMesh?: ProceduralMeshComponent,CapOption?: EProcMeshSliceCapOption,CapMaterial?: MaterialInterface): {OutOtherHalfProcMesh: ProceduralMeshComponent};
-	static GetSectionFromProceduralMesh(InProcMesh: ProceduralMeshComponent,SectionIndex: number,Vertices?: Vector[],Triangles?: number[],Normals?: Vector[],UVs?: Vector2D[],Tangents?: ProcMeshTangent[]): {Vertices: Vector[], Triangles: number[], Normals: Vector[], UVs: Vector2D[], Tangents: ProcMeshTangent[]};
-	static SliceProceduralMesh(InProcMesh: ProceduralMeshComponent,PlanePosition: Vector,PlaneNormal: Vector,bCreateOtherHalf: boolean,OutOtherHalfProcMesh?: ProceduralMeshComponent,CapOption?: EProcMeshSliceCapOption,CapMaterial?: MaterialInterface): {OutOtherHalfProcMesh: ProceduralMeshComponent};
-}
-
-declare type EVertexPaintAxis = 'X' | 'Y' | 'Z' | 'EVertexPaintAxis_MAX';
-declare var EVertexPaintAxis : { X:'X',Y:'Y',Z:'Z',EVertexPaintAxis_MAX:'EVertexPaintAxis_MAX', };
-declare class StaticMeshComponent extends MeshComponent { 
-	ForcedLodModel: number;
-	PreviousLODLevel: number;
-	MinLOD: number;
-	SubDivisionStepSize: number;
-	StaticMesh: StaticMesh;
-	WireframeColorOverride: Color;
-	SelectedEditorSection: number;
-	SelectedEditorMaterial: number;
-	SectionIndexPreview: number;
-	MaterialIndexPreview: number;
-	StaticMeshImportVersion: number;
-	bOverrideWireframeColor: boolean;
-	bOverrideMinLOD: boolean;
-	bOverrideNavigationExport: boolean;
-	bForceNavigationObstacle: boolean;
-	bDisallowMeshPaintPerInstance: boolean;
-	bIgnoreInstanceForTextureStreaming: boolean;
-	bOverrideLightMapRes: boolean;
-	bCastDistanceFieldIndirectShadow: boolean;
-	bOverrideDistanceFieldSelfShadowBias: boolean;
-	bUseSubDivisions: boolean;
-	bUseDefaultCollision: boolean;
-	bCustomOverrideVertexColorPerLOD: boolean;
-	bDisplayVertexColors: boolean;
-	bReverseCulling: boolean;
-	OverriddenLightMapRes: number;
-	DistanceFieldIndirectShadowMinVisibility: number;
-	DistanceFieldSelfShadowBias: number;
-	StreamingDistanceMultiplier: number;
-	IrrelevantLights: Guid[];
-	LodData: StaticMeshComponentLODInfo[];
-	StreamingTextureData: StreamingTextureBuildInfo[];
-	StaticMeshDerivedDataKey: string;
-	MaterialStreamingRelativeBoxes: any[];
-	LightmassSettings: LightmassPrimitiveSettings;
-	static Load(ResourceName: string): StaticMeshComponent;
-	static Find(Outer: UObject, ResourceName: string): StaticMeshComponent;
-	static GetDefaultObject(): StaticMeshComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshComponent;
-	SetStaticMesh(NewMesh: StaticMesh): boolean;
-	SetReverseCulling(ReverseCulling: boolean): void;
-	SetForcedLodModel(NewForcedLodModel: number): void;
-	SetDistanceFieldSelfShadowBias(NewValue: number): void;
-	OnRep_StaticMesh(OldStaticMesh: StaticMesh): void;
-	GetLocalBounds(Min?: Vector,Max?: Vector): {Min: Vector, Max: Vector};
-	static C(Other: UObject | any): StaticMeshComponent;
-	CopyProceduralMeshFromStaticMeshComponent(LODIndex: number,ProcMeshComponent: ProceduralMeshComponent,bCreateCollision: boolean): void;
-	PaintVerticesLerpAlongAxis(StartColor: LinearColor,EndColor: LinearColor,Axis: EVertexPaintAxis,bConvertToSRGB: boolean): void;
-	PaintVerticesSingleColor(FillColor: LinearColor,bConvertToSRGB: boolean): void;
-	RemovePaintedVertices(): void;
-	static CopyProceduralMeshFromStaticMeshComponent(StaticMeshComponent: StaticMeshComponent,LODIndex: number,ProcMeshComponent: ProceduralMeshComponent,bCreateCollision: boolean): void;
-	static PaintVerticesLerpAlongAxis(StaticMeshComponent: StaticMeshComponent,StartColor: LinearColor,EndColor: LinearColor,Axis: EVertexPaintAxis,bConvertToSRGB: boolean): void;
-	static PaintVerticesSingleColor(StaticMeshComponent: StaticMeshComponent,FillColor: LinearColor,bConvertToSRGB: boolean): void;
-	static RemovePaintedVertices(StaticMeshComponent: StaticMeshComponent): void;
-}
-
-declare class DefaultPawn extends Pawn { 
-	BaseTurnRate: number;
-	BaseLookUpRate: number;
-	MovementComponent: PawnMovementComponent;
-	CollisionComponent: SphereComponent;
-	MeshComponent: StaticMeshComponent;
-	bAddDefaultMovementBindings: boolean;
-	static GetDefaultObject(): DefaultPawn;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DefaultPawn;
-	TurnAtRate(Rate: number): void;
-	MoveUp_World(Val: number): void;
-	MoveRight(Val: number): void;
-	MoveForward(Val: number): void;
-	LookUpAtRate(Rate: number): void;
-	static C(Other: UObject | any): DefaultPawn;
-}
-
-declare class SpectatorPawn extends DefaultPawn { 
-	static GetDefaultObject(): SpectatorPawn;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpectatorPawn;
-	static C(Other: UObject | any): SpectatorPawn;
-}
-
-declare type EControllerHand = 'Left' | 'Right' | 'AnyHand' | 'Pad' | 'ExternalCamera' | 'Gun' | 'Special_1' | 'Special_2' | 'Special_3' | 'Special_4' | 'Special_5' | 'Special_6' | 'Special_7' | 'Special_8' | 'Special_9' | 'Special_10' | 'Special_11' | 'ControllerHand_Count' | 'EControllerHand_MAX';
-declare var EControllerHand : { Left:'Left',Right:'Right',AnyHand:'AnyHand',Pad:'Pad',ExternalCamera:'ExternalCamera',Gun:'Gun',Special_1:'Special_1',Special_2:'Special_2',Special_3:'Special_3',Special_4:'Special_4',Special_5:'Special_5',Special_6:'Special_6',Special_7:'Special_7',Special_8:'Special_8',Special_9:'Special_9',Special_10:'Special_10',Special_11:'Special_11',ControllerHand_Count:'ControllerHand_Count',EControllerHand_MAX:'EControllerHand_MAX', };
-declare type EViewTargetBlendFunction = 'VTBlend_Linear' | 'VTBlend_Cubic' | 'VTBlend_EaseIn' | 'VTBlend_EaseOut' | 'VTBlend_EaseInOut' | 'VTBlend_MAX';
-declare var EViewTargetBlendFunction : { VTBlend_Linear:'VTBlend_Linear',VTBlend_Cubic:'VTBlend_Cubic',VTBlend_EaseIn:'VTBlend_EaseIn',VTBlend_EaseOut:'VTBlend_EaseOut',VTBlend_EaseInOut:'VTBlend_EaseInOut',VTBlend_MAX:'VTBlend_MAX', };
-declare class Visual extends UObject { 
-	static Load(ResourceName: string): Visual;
-	static Find(Outer: UObject, ResourceName: string): Visual;
-	static GetDefaultObject(): Visual;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Visual;
-	static C(Other: UObject | any): Visual;
-}
-
-declare class PanelWidget extends Widget { 
-	Slots: PanelSlot[];
-	static Load(ResourceName: string): PanelWidget;
-	static Find(Outer: UObject, ResourceName: string): PanelWidget;
-	static GetDefaultObject(): PanelWidget;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PanelWidget;
-	RemoveChildAt(index: number): boolean;
-	RemoveChild(Content: Widget): boolean;
-	HasChild(Content: Widget): boolean;
-	HasAnyChildren(): boolean;
-	GetChildrenCount(): number;
-	GetChildIndex(Content: Widget): number;
-	GetChildAt(index: number): Widget;
-	ClearChildren(): void;
-	AddChild(Content: Widget): PanelSlot;
-	static C(Other: UObject | any): PanelWidget;
-}
-
-declare class PanelSlot extends Visual { 
-	Parent: PanelWidget;
-	Content: Widget;
-	static Load(ResourceName: string): PanelSlot;
-	static Find(Outer: UObject, ResourceName: string): PanelSlot;
-	static GetDefaultObject(): PanelSlot;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PanelSlot;
-	static C(Other: UObject | any): PanelSlot;
-}
-
-declare type ESlateVisibility = 'Visible' | 'Collapsed' | 'Hidden' | 'HitTestInvisible' | 'SelfHitTestInvisible' | 'ESlateVisibility_MAX';
-declare var ESlateVisibility : { Visible:'Visible',Collapsed:'Collapsed',Hidden:'Hidden',HitTestInvisible:'HitTestInvisible',SelfHitTestInvisible:'SelfHitTestInvisible',ESlateVisibility_MAX:'ESlateVisibility_MAX', };
-declare class WidgetTransform { 
-	Translation: Vector2D;
-	Scale: Vector2D;
-	Shear: Vector2D;
-	Angle: number;
-	clone() : WidgetTransform;
-	static C(Other: UObject | any): WidgetTransform;
-}
-
-declare type EWidgetClipping = 'Inherit' | 'ClipToBounds' | 'ClipToBoundsWithoutIntersecting' | 'ClipToBoundsAlways' | 'OnDemand' | 'EWidgetClipping_MAX';
-declare var EWidgetClipping : { Inherit:'Inherit',ClipToBounds:'ClipToBounds',ClipToBoundsWithoutIntersecting:'ClipToBoundsWithoutIntersecting',ClipToBoundsAlways:'ClipToBoundsAlways',OnDemand:'OnDemand',EWidgetClipping_MAX:'EWidgetClipping_MAX', };
-declare type EUINavigationRule = 'Escape' | 'Explicit' | 'Wrap' | 'Stop' | 'Custom' | 'CustomBoundary' | 'Invalid' | 'EUINavigationRule_MAX';
-declare var EUINavigationRule : { Escape:'Escape',Explicit:'Explicit',Wrap:'Wrap',Stop:'Stop',Custom:'Custom',CustomBoundary:'CustomBoundary',Invalid:'Invalid',EUINavigationRule_MAX:'EUINavigationRule_MAX', };
-declare type EUINavigation = 'Left' | 'Right' | 'Up' | 'Down' | 'Next' | 'Previous' | 'Num' | 'Invalid' | 'EUINavigation_MAX';
-declare var EUINavigation : { Left:'Left',Right:'Right',Up:'Up',Down:'Down',Next:'Next',Previous:'Previous',Num:'Num',Invalid:'Invalid',EUINavigation_MAX:'EUINavigation_MAX', };
-declare class WidgetNavigationData { 
-	Rule: EUINavigationRule;
-	WidgetToFocus: string;
-	Widget: any;
-	CustomDelegate: UnrealEngineDelegate<(Navigation: EUINavigation) => Widget>;
-	clone() : WidgetNavigationData;
-	static C(Other: UObject | any): WidgetNavigationData;
-}
-
-declare class WidgetNavigation extends UObject { 
-	Up: WidgetNavigationData;
-	Down: WidgetNavigationData;
-	Left: WidgetNavigationData;
-	Right: WidgetNavigationData;
-	Next: WidgetNavigationData;
-	Previous: WidgetNavigationData;
-	static Load(ResourceName: string): WidgetNavigation;
-	static Find(Outer: UObject, ResourceName: string): WidgetNavigation;
-	static GetDefaultObject(): WidgetNavigation;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetNavigation;
-	static C(Other: UObject | any): WidgetNavigation;
-}
-
-declare class PropertyPathSegment { 
-	Name: string;
-	ArrayIndex: number;
-	struct: Struct;
-	Field: Field;
-	clone() : PropertyPathSegment;
-	static C(Other: UObject | any): PropertyPathSegment;
-}
-
-declare class UFunction extends Struct { 
-	static Load(ResourceName: string): UFunction;
-	static Find(Outer: UObject, ResourceName: string): UFunction;
-	static GetDefaultObject(): UFunction;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UFunction;
-	static C(Other: UObject | any): UFunction;
-	GetFunctionParmsSize(): number;
-	static GetFunctionParmsSize(UFunction: UFunction): number;
-}
-
-declare class CachedPropertyPath { 
-	Segments: PropertyPathSegment[];
-	CachedFunction: UFunction;
-	clone() : CachedPropertyPath;
-	static C(Other: UObject | any): CachedPropertyPath;
-}
-
-declare class DynamicPropertyPath extends CachedPropertyPath { 
-	clone() : DynamicPropertyPath;
-	static C(Other: UObject | any): DynamicPropertyPath;
-}
-
-declare class PropertyBinding extends UObject { 
-	SourceObject: any;
-	SourcePath: DynamicPropertyPath;
-	DestinationProperty: string;
-	static Load(ResourceName: string): PropertyBinding;
-	static Find(Outer: UObject, ResourceName: string): PropertyBinding;
-	static GetDefaultObject(): PropertyBinding;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyBinding;
-	static C(Other: UObject | any): PropertyBinding;
-}
-
-declare type EWidgetDesignFlags = 'None' | 'Designing' | 'ShowOutline' | 'ExecutePreConstruct' | 'EWidgetDesignFlags_MAX';
-declare var EWidgetDesignFlags : { None:'None',Designing:'Designing',ShowOutline:'ShowOutline',ExecutePreConstruct:'ExecutePreConstruct',EWidgetDesignFlags_MAX:'EWidgetDesignFlags_MAX', };
-declare class ScriptViewportClient extends UObject { 
-	static Load(ResourceName: string): ScriptViewportClient;
-	static Find(Outer: UObject, ResourceName: string): ScriptViewportClient;
-	static GetDefaultObject(): ScriptViewportClient;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ScriptViewportClient;
-	static C(Other: UObject | any): ScriptViewportClient;
-}
-
-declare class Console extends UObject { 
-	ConsoleTargetPlayer: LocalPlayer;
-	DefaultTexture_Black: Texture2D;
-	DefaultTexture_White: Texture2D;
-	HistoryBuffer: string[];
-	static Load(ResourceName: string): Console;
-	static Find(Outer: UObject, ResourceName: string): Console;
-	static GetDefaultObject(): Console;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Console;
-	static C(Other: UObject | any): Console;
-}
-
-declare class DebugDisplayProperty { 
-	Obj: UObject;
-	WithinClass: UnrealEngineClass;
-	clone() : DebugDisplayProperty;
-	static C(Other: UObject | any): DebugDisplayProperty;
-}
-
-declare class OnlineSession extends UObject { 
-	static Load(ResourceName: string): OnlineSession;
-	static Find(Outer: UObject, ResourceName: string): OnlineSession;
-	static GetDefaultObject(): OnlineSession;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineSession;
-	static C(Other: UObject | any): OnlineSession;
-}
-
-declare type ETravelFailure = 'NoLevel' | 'LoadMapFailure' | 'InvalidURL' | 'PackageMissing' | 'PackageVersion' | 'NoDownload' | 'TravelFailure' | 'CheatCommands' | 'PendingNetGameCreateFailure' | 'CloudSaveFailure' | 'ServerTravelFailure' | 'ClientTravelFailure' | 'ETravelFailure_MAX';
-declare var ETravelFailure : { NoLevel:'NoLevel',LoadMapFailure:'LoadMapFailure',InvalidURL:'InvalidURL',PackageMissing:'PackageMissing',PackageVersion:'PackageVersion',NoDownload:'NoDownload',TravelFailure:'TravelFailure',CheatCommands:'CheatCommands',PendingNetGameCreateFailure:'PendingNetGameCreateFailure',CloudSaveFailure:'CloudSaveFailure',ServerTravelFailure:'ServerTravelFailure',ClientTravelFailure:'ClientTravelFailure',ETravelFailure_MAX:'ETravelFailure_MAX', };
-declare type ENetworkFailure = 'NetDriverAlreadyExists' | 'NetDriverCreateFailure' | 'NetDriverListenFailure' | 'ConnectionLost' | 'ConnectionTimeout' | 'FailureReceived' | 'OutdatedClient' | 'OutdatedServer' | 'PendingConnectionFailure' | 'NetGuidMismatch' | 'NetChecksumMismatch' | 'ENetworkFailure_MAX';
-declare var ENetworkFailure : { NetDriverAlreadyExists:'NetDriverAlreadyExists',NetDriverCreateFailure:'NetDriverCreateFailure',NetDriverListenFailure:'NetDriverListenFailure',ConnectionLost:'ConnectionLost',ConnectionTimeout:'ConnectionTimeout',FailureReceived:'FailureReceived',OutdatedClient:'OutdatedClient',OutdatedServer:'OutdatedServer',PendingConnectionFailure:'PendingConnectionFailure',NetGuidMismatch:'NetGuidMismatch',NetChecksumMismatch:'NetChecksumMismatch',ENetworkFailure_MAX:'ENetworkFailure_MAX', };
-declare class GameInstance extends UObject { 
-	LocalPlayers: LocalPlayer[];
-	OnlineSession: OnlineSession;
-	ReferencedObjects: UObject[];
-	static Load(ResourceName: string): GameInstance;
-	static Find(Outer: UObject, ResourceName: string): GameInstance;
-	static GetDefaultObject(): GameInstance;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameInstance;
-	ReceiveShutdown(): void;
-	ReceiveInit(): void;
-	HandleTravelError(FailureType: ETravelFailure): void;
-	HandleNetworkError(FailureType: ENetworkFailure,bIsServer: boolean): void;
-	DebugRemovePlayer(ControllerId: number): void;
-	DebugCreatePlayer(ControllerId: number): void;
-	static C(Other: UObject | any): GameInstance;
-}
-
-declare class GameViewportClient extends ScriptViewportClient { 
-	ViewportConsole: Console;
-	DebugProperties: DebugDisplayProperty[];
-	World: World;
-	GameInstance: GameInstance;
-	static Load(ResourceName: string): GameViewportClient;
-	static Find(Outer: UObject, ResourceName: string): GameViewportClient;
-	static GetDefaultObject(): GameViewportClient;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameViewportClient;
-	SSSwapControllers(): void;
-	ShowTitleSafeArea(): void;
-	SetConsoleTarget(PlayerIndex: number): void;
-	static C(Other: UObject | any): GameViewportClient;
-}
-
-declare type EAspectRatioAxisConstraint = 'AspectRatio_MaintainYFOV' | 'AspectRatio_MaintainXFOV' | 'AspectRatio_MajorAxisFOV' | 'AspectRatio_MAX';
-declare var EAspectRatioAxisConstraint : { AspectRatio_MaintainYFOV:'AspectRatio_MaintainYFOV',AspectRatio_MaintainXFOV:'AspectRatio_MaintainXFOV',AspectRatio_MajorAxisFOV:'AspectRatio_MajorAxisFOV',AspectRatio_MAX:'AspectRatio_MAX', };
-declare class LocalPlayer extends Player { 
-	ViewportClient: GameViewportClient;
-	AspectRatioAxisConstraint: EAspectRatioAxisConstraint;
-	PendingLevelPlayerControllerClass: UnrealEngineClass;
-	bSentSplitJoin: boolean;
-	ControllerId: number;
-	static Load(ResourceName: string): LocalPlayer;
-	static Find(Outer: UObject, ResourceName: string): LocalPlayer;
-	static GetDefaultObject(): LocalPlayer;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocalPlayer;
-	static C(Other: UObject | any): LocalPlayer;
-}
-
-declare class Geometry { 
-	clone() : Geometry;
-	static C(Other: UObject | any): Geometry;
-	CenterOf(): Vector2D;
-	FindClosestPointOnGeom(TestPoint: Vector2D): Vector2D;
-	AbsoluteToLocal(AbsoluteCoordinate: Vector2D): Vector2D;
-	GetAbsoluteSize(): Vector2D;
-	GetLocalSize(): Vector2D;
-	IsUnderLocation(AbsoluteCoordinate: Vector2D): boolean;
-	LocalToAbsolute(LocalCoordinate: Vector2D): Vector2D;
-	static CenterOf(Geom: Geometry): Vector2D;
-	static FindClosestPointOnGeom(Geom: Geometry,TestPoint: Vector2D): Vector2D;
-	static AbsoluteToLocal(Geometry: Geometry,AbsoluteCoordinate: Vector2D): Vector2D;
-	static GetAbsoluteSize(Geometry: Geometry): Vector2D;
-	static GetLocalSize(Geometry: Geometry): Vector2D;
-	static IsUnderLocation(Geometry: Geometry,AbsoluteCoordinate: Vector2D): boolean;
-	static LocalToAbsolute(Geometry: Geometry,LocalCoordinate: Vector2D): Vector2D;
-}
-
-declare class JavascriptSlateWidget { 
-	clone() : JavascriptSlateWidget;
-	static C(Other: UObject | any): JavascriptSlateWidget;
-	EditorAddModalWindow(): void;
-	AddWindow(bShowImmediately: boolean): void;
-	AddWindowAsNativeChild(RootWindow: JavascriptSlateWidget): void;
-	ShowWindow(): void;
-	static EditorAddModalWindow(Widget: JavascriptSlateWidget): void;
-	static AddWindow(NewWindow: JavascriptSlateWidget,bShowImmediately: boolean): void;
-	static AddWindowAsNativeChild(NewWindow: JavascriptSlateWidget,RootWindow: JavascriptSlateWidget): void;
-	static ShowWindow(NewWindow: JavascriptSlateWidget): void;
-	static CreateLogListingWidget(InLogName: string): JavascriptSlateWidget;
-	static GetRootWindow(): JavascriptSlateWidget;
-}
-
-declare type EHorizontalAlignment = 'HAlign_Fill' | 'HAlign_Left' | 'HAlign_Center' | 'HAlign_Right' | 'HAlign_MAX';
-declare var EHorizontalAlignment : { HAlign_Fill:'HAlign_Fill',HAlign_Left:'HAlign_Left',HAlign_Center:'HAlign_Center',HAlign_Right:'HAlign_Right',HAlign_MAX:'HAlign_MAX', };
-declare type EVerticalAlignment = 'VAlign_Fill' | 'VAlign_Top' | 'VAlign_Center' | 'VAlign_Bottom' | 'VAlign_MAX';
-declare var EVerticalAlignment : { VAlign_Fill:'VAlign_Fill',VAlign_Top:'VAlign_Top',VAlign_Center:'VAlign_Center',VAlign_Bottom:'VAlign_Bottom',VAlign_MAX:'VAlign_MAX', };
-declare class BorderSlot extends PanelSlot { 
-	Padding: Margin;
-	HorizontalAlignment: EHorizontalAlignment;
-	VerticalAlignment: EVerticalAlignment;
-	static Load(ResourceName: string): BorderSlot;
-	static Find(Outer: UObject, ResourceName: string): BorderSlot;
-	static GetDefaultObject(): BorderSlot;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BorderSlot;
-	SetVerticalAlignment(InVerticalAlignment: EVerticalAlignment): void;
-	SetPadding(InPadding: Margin): void;
-	SetHorizontalAlignment(InHorizontalAlignment: EHorizontalAlignment): void;
-	static C(Other: UObject | any): BorderSlot;
-}
-
-declare class Anchors { 
-	Minimum: Vector2D;
-	Maximum: Vector2D;
-	clone() : Anchors;
-	static C(Other: UObject | any): Anchors;
-}
-
-declare class AnchorData { 
-	Offsets: Margin;
-	Anchors: Anchors;
-	Alignment: Vector2D;
-	clone() : AnchorData;
-	static C(Other: UObject | any): AnchorData;
-}
-
-declare class CanvasPanelSlot extends PanelSlot { 
-	LayoutData: AnchorData;
-	bAutoSize: boolean;
-	ZOrder: number;
-	static Load(ResourceName: string): CanvasPanelSlot;
-	static Find(Outer: UObject, ResourceName: string): CanvasPanelSlot;
-	static GetDefaultObject(): CanvasPanelSlot;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CanvasPanelSlot;
-	SetZOrder(InZOrder: number): void;
-	SetSize(InSize: Vector2D): void;
-	SetPosition(InPosition: Vector2D): void;
-	SetOffsets(InOffset: Margin): void;
-	SetMinimum(InMinimumAnchors: Vector2D): void;
-	SetMaximum(InMaximumAnchors: Vector2D): void;
-	SetLayout(InLayoutData: AnchorData): void;
-	SetAutoSize(InbAutoSize: boolean): void;
-	SetAnchors(InAnchors: Anchors): void;
-	SetAlignment(InAlignment: Vector2D): void;
-	GetZOrder(): number;
-	GetSize(): Vector2D;
-	GetPosition(): Vector2D;
-	GetOffsets(): Margin;
-	GetLayout(): AnchorData;
-	GetAutoSize(): boolean;
-	GetAnchors(): Anchors;
-	GetAlignment(): Vector2D;
-	static C(Other: UObject | any): CanvasPanelSlot;
-}
-
-declare class GridSlot extends PanelSlot { 
-	Padding: Margin;
-	HorizontalAlignment: EHorizontalAlignment;
-	VerticalAlignment: EVerticalAlignment;
-	Row: number;
-	RowSpan: number;
-	Column: number;
-	ColumnSpan: number;
-	Layer: number;
-	Nudge: Vector2D;
-	static Load(ResourceName: string): GridSlot;
-	static Find(Outer: UObject, ResourceName: string): GridSlot;
-	static GetDefaultObject(): GridSlot;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GridSlot;
-	SetVerticalAlignment(InVerticalAlignment: EVerticalAlignment): void;
-	SetRowSpan(InRowSpan: number): void;
-	SetRow(InRow: number): void;
-	SetPadding(InPadding: Margin): void;
-	SetLayer(InLayer: number): void;
-	SetHorizontalAlignment(InHorizontalAlignment: EHorizontalAlignment): void;
-	SetColumnSpan(InColumnSpan: number): void;
-	SetColumn(InColumn: number): void;
-	static C(Other: UObject | any): GridSlot;
-}
-
-declare type ESlateSizeRule = 'Automatic' | 'Fill' | 'ESlateSizeRule_MAX';
-declare var ESlateSizeRule : { Automatic:'Automatic',Fill:'Fill',ESlateSizeRule_MAX:'ESlateSizeRule_MAX', };
-declare class SlateChildSize { 
-	Value: number;
-	SizeRule: ESlateSizeRule;
-	clone() : SlateChildSize;
-	static C(Other: UObject | any): SlateChildSize;
-}
-
-declare class HorizontalBoxSlot extends PanelSlot { 
-	Padding: Margin;
-	Size: SlateChildSize;
-	HorizontalAlignment: EHorizontalAlignment;
-	VerticalAlignment: EVerticalAlignment;
-	static Load(ResourceName: string): HorizontalBoxSlot;
-	static Find(Outer: UObject, ResourceName: string): HorizontalBoxSlot;
-	static GetDefaultObject(): HorizontalBoxSlot;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HorizontalBoxSlot;
-	SetVerticalAlignment(InVerticalAlignment: EVerticalAlignment): void;
-	SetSize(InSize: SlateChildSize): void;
-	SetPadding(InPadding: Margin): void;
-	SetHorizontalAlignment(InHorizontalAlignment: EHorizontalAlignment): void;
-	static C(Other: UObject | any): HorizontalBoxSlot;
-}
-
-declare class OverlaySlot extends PanelSlot { 
-	Padding: Margin;
-	HorizontalAlignment: EHorizontalAlignment;
-	VerticalAlignment: EVerticalAlignment;
-	static Load(ResourceName: string): OverlaySlot;
-	static Find(Outer: UObject, ResourceName: string): OverlaySlot;
-	static GetDefaultObject(): OverlaySlot;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OverlaySlot;
-	SetVerticalAlignment(InVerticalAlignment: EVerticalAlignment): void;
-	SetPadding(InPadding: Margin): void;
-	SetHorizontalAlignment(InHorizontalAlignment: EHorizontalAlignment): void;
-	static C(Other: UObject | any): OverlaySlot;
-}
-
-declare class UniformGridSlot extends PanelSlot { 
-	HorizontalAlignment: EHorizontalAlignment;
-	VerticalAlignment: EVerticalAlignment;
-	Row: number;
-	Column: number;
-	static Load(ResourceName: string): UniformGridSlot;
-	static Find(Outer: UObject, ResourceName: string): UniformGridSlot;
-	static GetDefaultObject(): UniformGridSlot;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UniformGridSlot;
-	SetVerticalAlignment(InVerticalAlignment: EVerticalAlignment): void;
-	SetRow(InRow: number): void;
-	SetHorizontalAlignment(InHorizontalAlignment: EHorizontalAlignment): void;
-	SetColumn(InColumn: number): void;
-	static C(Other: UObject | any): UniformGridSlot;
-}
-
-declare class VerticalBoxSlot extends PanelSlot { 
-	Padding: Margin;
-	Size: SlateChildSize;
-	HorizontalAlignment: EHorizontalAlignment;
-	VerticalAlignment: EVerticalAlignment;
-	static Load(ResourceName: string): VerticalBoxSlot;
-	static Find(Outer: UObject, ResourceName: string): VerticalBoxSlot;
-	static GetDefaultObject(): VerticalBoxSlot;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VerticalBoxSlot;
-	SetVerticalAlignment(InVerticalAlignment: EVerticalAlignment): void;
-	SetSize(InSize: SlateChildSize): void;
-	SetPadding(InPadding: Margin): void;
-	SetHorizontalAlignment(InHorizontalAlignment: EHorizontalAlignment): void;
-	static C(Other: UObject | any): VerticalBoxSlot;
-}
-
-declare type EWindowTitleBarMode = 'Overlay' | 'VerticalBox' | 'EWindowTitleBarMode_MAX';
-declare var EWindowTitleBarMode : { Overlay:'Overlay',VerticalBox:'VerticalBox',EWindowTitleBarMode_MAX:'EWindowTitleBarMode_MAX', };
-declare class Widget extends Visual { 
-	Slot: PanelSlot;
-	bIsEnabledDelegate: UnrealEngineDelegate<() => boolean>;
-	ToolTipText: string;
-	ToolTipTextDelegate: UnrealEngineDelegate<() => string>;
-	ToolTipWidget: Widget;
-	ToolTipWidgetDelegate: UnrealEngineDelegate<() => Widget>;
-	VisibilityDelegate: UnrealEngineDelegate<() => ESlateVisibility>;
-	RenderTransform: WidgetTransform;
-	RenderTransformPivot: Vector2D;
-	bIsVariable: boolean;
-	bCreatedByConstructionScript: boolean;
-	bIsEnabled: boolean;
-	bOverride_Cursor: boolean;
-	bIsVolatile: boolean;
-	bHiddenInDesigner: boolean;
-	bExpandedInDesigner: boolean;
-	bLockedInDesigner: boolean;
-	Cursor: EMouseCursor;
-	Clipping: EWidgetClipping;
-	Visibility: ESlateVisibility;
-	RenderOpacity: number;
-	Navigation: WidgetNavigation;
-	NativeBindings: PropertyBinding[];
-	DesignerFlags: EWidgetDesignFlags;
-	DisplayLabel: string;
-	CategoryName: string;
-	static Load(ResourceName: string): Widget;
-	static Find(Outer: UObject, ResourceName: string): Widget;
-	static GetDefaultObject(): Widget;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Widget;
-	SetVisibility(InVisibility: ESlateVisibility): void;
-	SetUserFocus(PlayerController: PlayerController): void;
-	SetToolTipText(InToolTipText: string): void;
-	SetToolTip(Widget: Widget): void;
-	SetRenderTranslation(Translation: Vector2D): void;
-	SetRenderTransformPivot(Pivot: Vector2D): void;
-	SetRenderTransform(InTransform: WidgetTransform): void;
-	SetRenderShear(Shear: Vector2D): void;
-	SetRenderScale(Scale: Vector2D): void;
-	SetRenderOpacity(InOpacity: number): void;
-	SetRenderAngle(Angle: number): void;
-	SetNavigationRule(Direction: EUINavigation,Rule: EUINavigationRule,WidgetToFocus: string): void;
-	SetKeyboardFocus(): void;
-	SetIsEnabled(bInIsEnabled: boolean): void;
-	SetCursor(InCursor: EMouseCursor): void;
-	SetClipping(InClipping: EWidgetClipping): void;
-	SetAllNavigationRules(Rule: EUINavigationRule,WidgetToFocus: string): void;
-	ResetCursor(): void;
-	RemoveFromParent(): void;
-	IsVisible(): boolean;
-	IsHovered(): boolean;
-	InvalidateLayoutAndVolatility(): void;
-	HasUserFocusedDescendants(PlayerController: PlayerController): boolean;
-	HasUserFocus(PlayerController: PlayerController): boolean;
-	HasMouseCaptureByUser(UserIndex: number,PointerIndex: number): boolean;
-	HasMouseCapture(): boolean;
-	HasKeyboardFocus(): boolean;
-	HasFocusedDescendants(): boolean;
-	HasAnyUserFocus(): boolean;
-	GetVisibility(): ESlateVisibility;
-	GetRenderOpacity(): number;
-	GetParent(): PanelWidget;
-	GetOwningPlayer(): PlayerController;
-	GetOwningLocalPlayer(): LocalPlayer;
-	GetIsEnabled(): boolean;
-	GetDesiredSize(): Vector2D;
-	GetClipping(): EWidgetClipping;
-	GetCachedGeometry(): Geometry;
-	ForceVolatile(bForce: boolean): void;
-	ForceLayoutPrepass(): void;
-	static C(Other: UObject | any): Widget;
-	OpenPopupWindow(PopupDesiredSize: Vector2D,HeadingText: string): void;
-	TakeWidget(): JavascriptSlateWidget;
-	SlotAsBorderSlot(): BorderSlot;
-	SlotAsCanvasSlot(): CanvasPanelSlot;
-	SlotAsGridSlot(): GridSlot;
-	SlotAsHorizontalBoxSlot(): HorizontalBoxSlot;
-	SlotAsOverlaySlot(): OverlaySlot;
-	SlotAsUniformGridSlot(): UniformGridSlot;
-	SlotAsVerticalBoxSlot(): VerticalBoxSlot;
-	SetWindowTitleBarState(Mode: EWindowTitleBarMode,bTitleBarDragEnabled: boolean,bWindowButtonsVisible: boolean,bTitleBarVisible: boolean): void;
-	static OpenPopupWindow(Widget: Widget,PopupDesiredSize: Vector2D,HeadingText: string): void;
-	static TakeWidget(Widget: Widget): JavascriptSlateWidget;
-	static SlotAsBorderSlot(Widget: Widget): BorderSlot;
-	static SlotAsCanvasSlot(Widget: Widget): CanvasPanelSlot;
-	static SlotAsGridSlot(Widget: Widget): GridSlot;
-	static SlotAsHorizontalBoxSlot(Widget: Widget): HorizontalBoxSlot;
-	static SlotAsOverlaySlot(Widget: Widget): OverlaySlot;
-	static SlotAsUniformGridSlot(Widget: Widget): UniformGridSlot;
-	static SlotAsVerticalBoxSlot(Widget: Widget): VerticalBoxSlot;
-	static SetWindowTitleBarState(TitleBarContent: Widget,Mode: EWindowTitleBarMode,bTitleBarDragEnabled: boolean,bWindowButtonsVisible: boolean,bTitleBarVisible: boolean): void;
-}
-
-declare class MovieSceneSignedObject extends UObject { 
-	Signature: Guid;
-	static Load(ResourceName: string): MovieSceneSignedObject;
-	static Find(Outer: UObject, ResourceName: string): MovieSceneSignedObject;
-	static GetDefaultObject(): MovieSceneSignedObject;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneSignedObject;
-	static C(Other: UObject | any): MovieSceneSignedObject;
-}
-
-declare class MovieSceneFrameRange { 
-	clone() : MovieSceneFrameRange;
-	static C(Other: UObject | any): MovieSceneFrameRange;
-}
-
-declare class MovieSceneEvaluationGroupLUTIndex { 
-	LUTOffset: number;
-	NumInitPtrs: number;
-	NumEvalPtrs: number;
-	clone() : MovieSceneEvaluationGroupLUTIndex;
-	static C(Other: UObject | any): MovieSceneEvaluationGroupLUTIndex;
-}
-
-declare class MovieSceneSequenceID { 
-	Value: any;
-	clone() : MovieSceneSequenceID;
-	static C(Other: UObject | any): MovieSceneSequenceID;
-}
-
-declare class MovieSceneTrackIdentifier { 
-	Value: any;
-	clone() : MovieSceneTrackIdentifier;
-	static C(Other: UObject | any): MovieSceneTrackIdentifier;
-}
-
-declare class MovieSceneEvaluationFieldTrackPtr { 
-	SequenceID: MovieSceneSequenceID;
-	TrackIdentifier: MovieSceneTrackIdentifier;
-	clone() : MovieSceneEvaluationFieldTrackPtr;
-	static C(Other: UObject | any): MovieSceneEvaluationFieldTrackPtr;
-}
-
-declare class MovieSceneSegmentIdentifier { 
-	IdentifierIndex: number;
-	clone() : MovieSceneSegmentIdentifier;
-	static C(Other: UObject | any): MovieSceneSegmentIdentifier;
-}
-
-declare class MovieSceneEvaluationFieldSegmentPtr extends MovieSceneEvaluationFieldTrackPtr { 
-	SegmentID: MovieSceneSegmentIdentifier;
-	clone() : MovieSceneEvaluationFieldSegmentPtr;
-	static C(Other: UObject | any): MovieSceneEvaluationFieldSegmentPtr;
-}
-
-declare class MovieSceneEvaluationGroup { 
-	LUTIndices: MovieSceneEvaluationGroupLUTIndex[];
-	SegmentPtrLUT: MovieSceneEvaluationFieldSegmentPtr[];
-	clone() : MovieSceneEvaluationGroup;
-	static C(Other: UObject | any): MovieSceneEvaluationGroup;
-}
-
-declare class MovieSceneEvaluationKey { 
-	SequenceID: MovieSceneSequenceID;
-	TrackIdentifier: MovieSceneTrackIdentifier;
-	SectionIndex: any;
-	clone() : MovieSceneEvaluationKey;
-	static C(Other: UObject | any): MovieSceneEvaluationKey;
-}
-
-declare class MovieSceneOrderedEvaluationKey { 
-	Key: MovieSceneEvaluationKey;
-	EvaluationIndex: any;
-	clone() : MovieSceneOrderedEvaluationKey;
-	static C(Other: UObject | any): MovieSceneOrderedEvaluationKey;
-}
-
-declare class MovieSceneEvaluationMetaData { 
-	ActiveSequences: MovieSceneSequenceID[];
-	ActiveEntities: MovieSceneOrderedEvaluationKey[];
-	SubTemplateSerialNumbers: any;
-	clone() : MovieSceneEvaluationMetaData;
-	static C(Other: UObject | any): MovieSceneEvaluationMetaData;
-}
-
-declare class MovieSceneEvaluationField { 
-	Signature: Guid;
-	Ranges: MovieSceneFrameRange[];
-	Groups: MovieSceneEvaluationGroup[];
-	MetaData: MovieSceneEvaluationMetaData[];
-	clone() : MovieSceneEvaluationField;
-	static C(Other: UObject | any): MovieSceneEvaluationField;
-}
-
-declare class MovieSceneSequenceHierarchy { 
-	SubSequences: any;
-	Hierarchy: any;
-	clone() : MovieSceneSequenceHierarchy;
-	static C(Other: UObject | any): MovieSceneSequenceHierarchy;
-}
-
-declare class MovieSceneEvaluationTemplateSerialNumber { 
-	Value: any;
-	clone() : MovieSceneEvaluationTemplateSerialNumber;
-	static C(Other: UObject | any): MovieSceneEvaluationTemplateSerialNumber;
-}
-
-declare class MovieSceneTemplateGenerationLedger { 
-	LastTrackIdentifier: MovieSceneTrackIdentifier;
-	TrackSignatureToTrackIdentifier: any;
-	SubSectionRanges: any;
-	clone() : MovieSceneTemplateGenerationLedger;
-	static C(Other: UObject | any): MovieSceneTemplateGenerationLedger;
-}
-
-declare class MovieSceneTrackFieldData { 
-	clone() : MovieSceneTrackFieldData;
-	static C(Other: UObject | any): MovieSceneTrackFieldData;
-}
-
-declare class MovieSceneSubSectionFieldData { 
-	clone() : MovieSceneSubSectionFieldData;
-	static C(Other: UObject | any): MovieSceneSubSectionFieldData;
-}
-
-declare class MovieSceneEvaluationTemplate { 
-	Tracks: any;
-	EvaluationField: MovieSceneEvaluationField;
-	Hierarchy: MovieSceneSequenceHierarchy;
-	SequenceSignature: Guid;
-	TemplateSerialNumber: MovieSceneEvaluationTemplateSerialNumber;
-	TemplateLedger: MovieSceneTemplateGenerationLedger;
-	TrackFieldData: MovieSceneTrackFieldData;
-	SubSectionFieldData: MovieSceneSubSectionFieldData;
-	clone() : MovieSceneEvaluationTemplate;
-	static C(Other: UObject | any): MovieSceneEvaluationTemplate;
-}
-
-declare type EMovieSceneCompletionMode = 'KeepState' | 'RestoreState' | 'ProjectDefault' | 'EMovieSceneCompletionMode_MAX';
-declare var EMovieSceneCompletionMode : { KeepState:'KeepState',RestoreState:'RestoreState',ProjectDefault:'ProjectDefault',EMovieSceneCompletionMode_MAX:'EMovieSceneCompletionMode_MAX', };
-declare class MovieSceneSequence extends MovieSceneSignedObject { 
-	PrecompiledEvaluationTemplate: MovieSceneEvaluationTemplate;
-	DefaultCompletionMode: EMovieSceneCompletionMode;
-	bParentContextsAreSignificant: boolean;
-	static Load(ResourceName: string): MovieSceneSequence;
-	static Find(Outer: UObject, ResourceName: string): MovieSceneSequence;
-	static GetDefaultObject(): MovieSceneSequence;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneSequence;
-	static C(Other: UObject | any): MovieSceneSequence;
-}
-
-declare class Timecode { 
-	Hours: number;
-	Minutes: number;
-	Seconds: number;
-	Frames: number;
-	bDropFrameFormat: boolean;
-	clone() : Timecode;
-	static C(Other: UObject | any): Timecode;
-	Conv_TimecodeToString(bForceSignDisplay: boolean): string;
-	static Conv_TimecodeToString(InTimecode: Timecode,bForceSignDisplay: boolean): string;
-	static GetTimecode(): Timecode;
-}
-
-declare class FrameRate { 
-	Numerator: number;
-	Denominator: number;
-	clone() : FrameRate;
-	static C(Other: UObject | any): FrameRate;
-	BreakFrameRate(Numerator?: number,Denominator?: number): {Numerator: number, Denominator: number};
-	Conv_FrameRateToSeconds(): number;
-	IsValid_Framerate(): boolean;
-	IsValid_MultipleOf(OtherFramerate: FrameRate): boolean;
-	static BreakFrameRate(InFrameRate: FrameRate,Numerator?: number,Denominator?: number): {Numerator: number, Denominator: number};
-	static Conv_FrameRateToSeconds(InFrameRate: FrameRate): number;
-	static IsValid_Framerate(InFrameRate: FrameRate): boolean;
-	static IsValid_MultipleOf(InFrameRate: FrameRate,OtherFramerate: FrameRate): boolean;
-	static MakeFrameRate(Numerator: number,Denominator: number): FrameRate;
-}
-
-declare class FrameTime { 
-	FrameNumber: FrameNumber;
-	SubFrame: number;
-	clone() : FrameTime;
-	static C(Other: UObject | any): FrameTime;
-	SnapFrameTimeToRate(SourceRate: FrameRate,SnapToRate: FrameRate): FrameTime;
-	TransformTime(SourceRate: FrameRate,DestinationRate: FrameRate): FrameTime;
-	static SnapFrameTimeToRate(SourceTime: FrameTime,SourceRate: FrameRate,SnapToRate: FrameRate): FrameTime;
-	static TransformTime(SourceTime: FrameTime,SourceRate: FrameRate,DestinationRate: FrameRate): FrameTime;
-	static Multiply_SecondsFrameRate(TimeInSeconds: number,FrameRate: FrameRate): FrameTime;
-}
-
-declare class QualifiedFrameTime { 
-	Time: FrameTime;
-	Rate: FrameRate;
-	clone() : QualifiedFrameTime;
-	static C(Other: UObject | any): QualifiedFrameTime;
-	BreakQualifiedFrameTime(Frame?: FrameNumber,FrameRate?: FrameRate,SubFrame?: number): {Frame: FrameNumber, FrameRate: FrameRate, SubFrame: number};
-	Conv_QualifiedFrameTimeToSeconds(): number;
-	static BreakQualifiedFrameTime(InFrameTime: QualifiedFrameTime,Frame?: FrameNumber,FrameRate?: FrameRate,SubFrame?: number): {Frame: FrameNumber, FrameRate: FrameRate, SubFrame: number};
-	static Conv_QualifiedFrameTimeToSeconds(InFrameTime: QualifiedFrameTime): number;
-}
-
-declare class FrameNumber { 
-	Value: number;
-	clone() : FrameNumber;
-	static C(Other: UObject | any): FrameNumber;
-	MakeQualifiedFrameTime(FrameRate: FrameRate,SubFrame: number): QualifiedFrameTime;
-	Add_FrameNumberFrameNumber(B: FrameNumber): FrameNumber;
-	Add_FrameNumberInteger(B: number): FrameNumber;
-	Conv_FrameNumberToInteger(): number;
-	Divide_FrameNumberInteger(B: number): FrameNumber;
-	Multiply_FrameNumberInteger(B: number): FrameNumber;
-	Subtract_FrameNumberFrameNumber(B: FrameNumber): FrameNumber;
-	Subtract_FrameNumberInteger(B: number): FrameNumber;
-	static MakeQualifiedFrameTime(Frame: FrameNumber,FrameRate: FrameRate,SubFrame: number): QualifiedFrameTime;
-	static Add_FrameNumberFrameNumber(A: FrameNumber,B: FrameNumber): FrameNumber;
-	static Add_FrameNumberInteger(A: FrameNumber,B: number): FrameNumber;
-	static Conv_FrameNumberToInteger(InFrameNumber: FrameNumber): number;
-	static Divide_FrameNumberInteger(A: FrameNumber,B: number): FrameNumber;
-	static Multiply_FrameNumberInteger(A: FrameNumber,B: number): FrameNumber;
-	static Subtract_FrameNumberFrameNumber(A: FrameNumber,B: FrameNumber): FrameNumber;
-	static Subtract_FrameNumberInteger(A: FrameNumber,B: number): FrameNumber;
-}
-
-declare class MovieSceneTimecodeSource { 
-	Timecode: Timecode;
-	DeltaFrame: FrameNumber;
-	clone() : MovieSceneTimecodeSource;
-	static C(Other: UObject | any): MovieSceneTimecodeSource;
-}
-
-declare type ESpawnOwnership = 'InnerSequence' | 'MasterSequence' | 'External' | 'ESpawnOwnership_MAX';
-declare var ESpawnOwnership : { InnerSequence:'InnerSequence',MasterSequence:'MasterSequence',External:'External',ESpawnOwnership_MAX:'ESpawnOwnership_MAX', };
-declare class MovieSceneSpawnable { 
-	SpawnTransform: Transform;
-	Tags: string[];
-	Guid: Guid;
-	Name: string;
-	ObjectTemplate: UObject;
-	ChildPossessables: Guid[];
-	Ownership: ESpawnOwnership;
-	GeneratedClass: UnrealEngineClass;
-	LevelName: string;
-	clone() : MovieSceneSpawnable;
-	static C(Other: UObject | any): MovieSceneSpawnable;
-}
-
-declare class MovieScenePossessable { 
-	Tags: string[];
-	Guid: Guid;
-	Name: string;
-	PossessedObjectClass: UnrealEngineClass;
-	ParentGuid: Guid;
-	clone() : MovieScenePossessable;
-	static C(Other: UObject | any): MovieScenePossessable;
-}
-
-declare class MovieSceneTrackEvalOptions { 
-	bCanEvaluateNearestSection: boolean;
-	bEvalNearestSection: boolean;
-	bEvaluateInPreroll: boolean;
-	bEvaluateInPostroll: boolean;
-	bEvaluateNearestSection: boolean;
-	clone() : MovieSceneTrackEvalOptions;
-	static C(Other: UObject | any): MovieSceneTrackEvalOptions;
-}
-
-declare class MovieSceneTrack extends MovieSceneSignedObject { 
-	EvalOptions: MovieSceneTrackEvalOptions;
-	TrackTint: Color;
-	SortingOrder: number;
-	bSupportsDefaultSections: boolean;
-	static Load(ResourceName: string): MovieSceneTrack;
-	static Find(Outer: UObject, ResourceName: string): MovieSceneTrack;
-	static GetDefaultObject(): MovieSceneTrack;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneTrack;
-	static C(Other: UObject | any): MovieSceneTrack;
-}
-
-declare class MovieSceneBinding { 
-	ObjectGuid: Guid;
-	BindingName: string;
-	Tracks: MovieSceneTrack[];
-	SortingOrder: number;
-	clone() : MovieSceneBinding;
-	static C(Other: UObject | any): MovieSceneBinding;
-}
-
-declare type EMovieSceneEvaluationType = 'FrameLocked' | 'WithSubFrames' | 'EMovieSceneEvaluationType_MAX';
-declare var EMovieSceneEvaluationType : { FrameLocked:'FrameLocked',WithSubFrames:'WithSubFrames',EMovieSceneEvaluationType_MAX:'EMovieSceneEvaluationType_MAX', };
-declare type EUpdateClockSource = 'Tick' | 'Platform' | 'Audio' | 'EUpdateClockSource_MAX';
-declare var EUpdateClockSource : { Tick:'Tick',Platform:'Platform',Audio:'Audio',EUpdateClockSource_MAX:'EUpdateClockSource_MAX', };
-declare class FloatRangeBound { 
-	Type: ERangeBoundTypes;
-	Value: number;
-	clone() : FloatRangeBound;
-	static C(Other: UObject | any): FloatRangeBound;
-}
-
-declare class FloatRange { 
-	LowerBound: FloatRangeBound;
-	UpperBound: FloatRangeBound;
-	clone() : FloatRange;
-	static C(Other: UObject | any): FloatRange;
-}
-
-declare class MovieSceneEditorData { 
-	ExpansionStates: any;
-	ViewStart: any;
-	ViewEnd: any;
-	WorkStart: any;
-	WorkEnd: any;
-	MarkedFrames: any;
-	WorkingRange: FloatRange;
-	ViewRange: FloatRange;
-	clone() : MovieSceneEditorData;
-	static C(Other: UObject | any): MovieSceneEditorData;
-}
-
-declare class MovieSceneFolder extends UObject { 
-	FolderName: string;
-	ChildFolders: MovieSceneFolder[];
-	ChildMasterTracks: MovieSceneTrack[];
-	ChildObjectBindingStrings: string[];
-	FolderColor: Color;
-	SortingOrder: number;
-	static Load(ResourceName: string): MovieSceneFolder;
-	static Find(Outer: UObject, ResourceName: string): MovieSceneFolder;
-	static GetDefaultObject(): MovieSceneFolder;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneFolder;
-	static C(Other: UObject | any): MovieSceneFolder;
-}
-
-declare class MovieScene extends MovieSceneSignedObject { 
-	TimecodeSource: MovieSceneTimecodeSource;
-	Spawnables: MovieSceneSpawnable[];
-	Possessables: MovieScenePossessable[];
-	ObjectBindings: MovieSceneBinding[];
-	MasterTracks: MovieSceneTrack[];
-	CameraCutTrack: MovieSceneTrack;
-	SelectionRange: MovieSceneFrameRange;
-	PlaybackRange: MovieSceneFrameRange;
-	TickResolution: FrameRate;
-	DisplayRate: FrameRate;
-	EvaluationType: EMovieSceneEvaluationType;
-	ClockSource: EUpdateClockSource;
-	bReadOnly: boolean;
-	bPlaybackRangeLocked: boolean;
-	ObjectsToDisplayNames: any;
-	ObjectsToLabels: any;
-	EditorData: MovieSceneEditorData;
-	RootFolders: MovieSceneFolder[];
-	InTime: number;
-	OutTime: number;
-	StartTime: number;
-	EndTime: number;
-	bForceFixedFrameIntervalPlayback: boolean;
-	FixedFrameInterval: number;
-	static Load(ResourceName: string): MovieScene;
-	static Find(Outer: UObject, ResourceName: string): MovieScene;
-	static GetDefaultObject(): MovieScene;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScene;
-	static C(Other: UObject | any): MovieScene;
-}
-
-declare class WidgetAnimationBinding { 
-	WidgetName: string;
-	SlotWidgetName: string;
-	AnimationGuid: Guid;
-	bIsRootWidget: boolean;
-	clone() : WidgetAnimationBinding;
-	static C(Other: UObject | any): WidgetAnimationBinding;
-}
-
-declare class WidgetAnimation extends MovieSceneSequence { 
-	OnAnimationStarted: UnrealEngineMulticastDelegate<() => void>;
-	OnAnimationFinished: UnrealEngineMulticastDelegate<() => void>;
-	MovieScene: MovieScene;
-	AnimationBindings: WidgetAnimationBinding[];
-	bLegacyFinishOnStop: boolean;
-	DisplayLabel: string;
-	static Load(ResourceName: string): WidgetAnimation;
-	static Find(Outer: UObject, ResourceName: string): WidgetAnimation;
-	static GetDefaultObject(): WidgetAnimation;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetAnimation;
-	GetStartTime(): number;
-	GetEndTime(): number;
-	static C(Other: UObject | any): WidgetAnimation;
-}
-
-declare class UMGSequencePlayer extends UObject { 
-	Animation: WidgetAnimation;
-	static Load(ResourceName: string): UMGSequencePlayer;
-	static Find(Outer: UObject, ResourceName: string): UMGSequencePlayer;
-	static GetDefaultObject(): UMGSequencePlayer;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UMGSequencePlayer;
-	static C(Other: UObject | any): UMGSequencePlayer;
-}
-
-declare class NamedSlotBinding { 
-	Name: string;
-	Content: Widget;
-	clone() : NamedSlotBinding;
-	static C(Other: UObject | any): NamedSlotBinding;
-}
-
-declare class WidgetTree extends UObject { 
-	RootWidget: Widget;
-	AllWidgets: Widget[];
-	static Load(ResourceName: string): WidgetTree;
-	static Find(Outer: UObject, ResourceName: string): WidgetTree;
-	static GetDefaultObject(): WidgetTree;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetTree;
-	static C(Other: UObject | any): WidgetTree;
-}
-
-declare type EDesignPreviewSizeMode = 'FillScreen' | 'Custom' | 'CustomOnScreen' | 'Desired' | 'DesiredOnScreen' | 'EDesignPreviewSizeMode_MAX';
-declare var EDesignPreviewSizeMode : { FillScreen:'FillScreen',Custom:'Custom',CustomOnScreen:'CustomOnScreen',Desired:'Desired',DesiredOnScreen:'DesiredOnScreen',EDesignPreviewSizeMode_MAX:'EDesignPreviewSizeMode_MAX', };
-declare type EWidgetTickFrequency = 'Never' | 'Auto' | 'EWidgetTickFrequency_MAX';
-declare var EWidgetTickFrequency : { Never:'Never',Auto:'Auto',EWidgetTickFrequency_MAX:'EWidgetTickFrequency_MAX', };
-declare type EInputEvent = 'IE_Pressed' | 'IE_Released' | 'IE_Repeat' | 'IE_DoubleClick' | 'IE_Axis' | 'IE_MAX';
-declare var EInputEvent : { IE_Pressed:'IE_Pressed',IE_Released:'IE_Released',IE_Repeat:'IE_Repeat',IE_DoubleClick:'IE_DoubleClick',IE_Axis:'IE_Axis',IE_MAX:'IE_MAX', };
-declare type EAudioOutputTarget = 'Speaker' | 'Controller' | 'ControllerFallbackToSpeaker' | 'EAudioOutputTarget_MAX';
-declare var EAudioOutputTarget : { Speaker:'Speaker',Controller:'Controller',ControllerFallbackToSpeaker:'ControllerFallbackToSpeaker',EAudioOutputTarget_MAX:'EAudioOutputTarget_MAX', };
-declare class SoundClassProperties { 
-	Volume: number;
-	Pitch: number;
-	StereoBleed: number;
-	LFEBleed: number;
-	VoiceCenterChannelVolume: number;
-	RadioFilterVolume: number;
-	RadioFilterVolumeThreshold: number;
-	bApplyEffects: boolean;
-	bAlwaysPlay: boolean;
-	bIsUISound: boolean;
-	bIsMusic: boolean;
-	bReverb: boolean;
-	Default2DReverbSendAmount: number;
-	bCenterChannelOnly: boolean;
-	bApplyAmbientVolumes: boolean;
-	OutputTarget: EAudioOutputTarget;
-	clone() : SoundClassProperties;
-	static C(Other: UObject | any): SoundClassProperties;
-}
-
-declare class AudioEQEffect { 
-	FrequencyCenter0: number;
-	Gain0: number;
-	Bandwidth0: number;
-	FrequencyCenter1: number;
-	Gain1: number;
-	Bandwidth1: number;
-	FrequencyCenter2: number;
-	Gain2: number;
-	Bandwidth2: number;
-	FrequencyCenter3: number;
-	Gain3: number;
-	Bandwidth3: number;
-	clone() : AudioEQEffect;
-	static C(Other: UObject | any): AudioEQEffect;
-}
-
-declare class SoundClassAdjuster { 
-	SoundClassObject: SoundClass;
-	VolumeAdjuster: number;
-	PitchAdjuster: number;
-	bApplyToChildren: boolean;
-	VoiceCenterChannelVolumeAdjuster: number;
-	clone() : SoundClassAdjuster;
-	static C(Other: UObject | any): SoundClassAdjuster;
-}
-
-declare class SoundMix extends UObject { 
-	bApplyEQ: boolean;
-	EQPriority: number;
-	EQSettings: AudioEQEffect;
-	SoundClassEffects: SoundClassAdjuster[];
-	InitialDelay: number;
-	FadeInTime: number;
-	Duration: number;
-	FadeOutTime: number;
-	bChanged: boolean;
-	static Load(ResourceName: string): SoundMix;
-	static Find(Outer: UObject, ResourceName: string): SoundMix;
-	static GetDefaultObject(): SoundMix;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundMix;
-	static C(Other: UObject | any): SoundMix;
-}
-
-declare class PassiveSoundMixModifier { 
-	SoundMix: SoundMix;
-	MinVolumeThreshold: number;
-	MaxVolumeThreshold: number;
-	clone() : PassiveSoundMixModifier;
-	static C(Other: UObject | any): PassiveSoundMixModifier;
-}
-
-declare class SoundClass extends UObject { 
-	Properties: SoundClassProperties;
-	ChildClasses: SoundClass[];
-	PassiveSoundMixModifiers: PassiveSoundMixModifier[];
-	ParentClass: SoundClass;
-	static Load(ResourceName: string): SoundClass;
-	static Find(Outer: UObject, ResourceName: string): SoundClass;
-	static GetDefaultObject(): SoundClass;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundClass;
-	static C(Other: UObject | any): SoundClass;
-}
-
-declare type EMaxConcurrentResolutionRule = 'PreventNew' | 'StopOldest' | 'StopFarthestThenPreventNew' | 'StopFarthestThenOldest' | 'StopLowestPriority' | 'StopQuietest' | 'StopLowestPriorityThenPreventNew' | 'EMaxConcurrentResolutionRule_MAX';
-declare var EMaxConcurrentResolutionRule : { PreventNew:'PreventNew',StopOldest:'StopOldest',StopFarthestThenPreventNew:'StopFarthestThenPreventNew',StopFarthestThenOldest:'StopFarthestThenOldest',StopLowestPriority:'StopLowestPriority',StopQuietest:'StopQuietest',StopLowestPriorityThenPreventNew:'StopLowestPriorityThenPreventNew',EMaxConcurrentResolutionRule_MAX:'EMaxConcurrentResolutionRule_MAX', };
-declare class SoundConcurrencySettings { 
-	MaxCount: number;
-	bLimitToOwner: boolean;
-	ResolutionRule: EMaxConcurrentResolutionRule;
-	VolumeScale: number;
-	clone() : SoundConcurrencySettings;
-	static C(Other: UObject | any): SoundConcurrencySettings;
-}
-
-declare class SoundConcurrency extends UObject { 
-	Concurrency: SoundConcurrencySettings;
-	static Load(ResourceName: string): SoundConcurrency;
-	static Find(Outer: UObject, ResourceName: string): SoundConcurrency;
-	static GetDefaultObject(): SoundConcurrency;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundConcurrency;
-	static C(Other: UObject | any): SoundConcurrency;
-}
-
-declare type ESoundSpatializationAlgorithm = 'SPATIALIZATION_Default' | 'SPATIALIZATION_HRTF' | 'SPATIALIZATION_MAX';
-declare var ESoundSpatializationAlgorithm : { SPATIALIZATION_Default:'SPATIALIZATION_Default',SPATIALIZATION_HRTF:'SPATIALIZATION_HRTF',SPATIALIZATION_MAX:'SPATIALIZATION_MAX', };
-declare type EAirAbsorptionMethod = 'Linear' | 'CustomCurve' | 'EAirAbsorptionMethod_MAX';
-declare var EAirAbsorptionMethod : { Linear:'Linear',CustomCurve:'CustomCurve',EAirAbsorptionMethod_MAX:'EAirAbsorptionMethod_MAX', };
-declare type EReverbSendMethod = 'Linear' | 'CustomCurve' | 'Manual' | 'EReverbSendMethod_MAX';
-declare var EReverbSendMethod : { Linear:'Linear',CustomCurve:'CustomCurve',Manual:'Manual',EReverbSendMethod_MAX:'EReverbSendMethod_MAX', };
-declare type ESoundDistanceCalc = 'SOUNDDISTANCE_Normal' | 'SOUNDDISTANCE_InfiniteXYPlane' | 'SOUNDDISTANCE_InfiniteXZPlane' | 'SOUNDDISTANCE_InfiniteYZPlane' | 'SOUNDDISTANCE_MAX';
-declare var ESoundDistanceCalc : { SOUNDDISTANCE_Normal:'SOUNDDISTANCE_Normal',SOUNDDISTANCE_InfiniteXYPlane:'SOUNDDISTANCE_InfiniteXYPlane',SOUNDDISTANCE_InfiniteXZPlane:'SOUNDDISTANCE_InfiniteXZPlane',SOUNDDISTANCE_InfiniteYZPlane:'SOUNDDISTANCE_InfiniteYZPlane',SOUNDDISTANCE_MAX:'SOUNDDISTANCE_MAX', };
-declare class SpatializationPluginSourceSettingsBase extends UObject { 
-	static Load(ResourceName: string): SpatializationPluginSourceSettingsBase;
-	static Find(Outer: UObject, ResourceName: string): SpatializationPluginSourceSettingsBase;
-	static GetDefaultObject(): SpatializationPluginSourceSettingsBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpatializationPluginSourceSettingsBase;
-	static C(Other: UObject | any): SpatializationPluginSourceSettingsBase;
-}
-
-declare class OcclusionPluginSourceSettingsBase extends UObject { 
-	static Load(ResourceName: string): OcclusionPluginSourceSettingsBase;
-	static Find(Outer: UObject, ResourceName: string): OcclusionPluginSourceSettingsBase;
-	static GetDefaultObject(): OcclusionPluginSourceSettingsBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OcclusionPluginSourceSettingsBase;
-	static C(Other: UObject | any): OcclusionPluginSourceSettingsBase;
-}
-
-declare class ReverbPluginSourceSettingsBase extends UObject { 
-	static Load(ResourceName: string): ReverbPluginSourceSettingsBase;
-	static Find(Outer: UObject, ResourceName: string): ReverbPluginSourceSettingsBase;
-	static GetDefaultObject(): ReverbPluginSourceSettingsBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReverbPluginSourceSettingsBase;
-	static C(Other: UObject | any): ReverbPluginSourceSettingsBase;
-}
-
-declare class SoundAttenuationPluginSettings { 
-	SpatializationPluginSettingsArray: SpatializationPluginSourceSettingsBase[];
-	OcclusionPluginSettingsArray: OcclusionPluginSourceSettingsBase[];
-	ReverbPluginSettingsArray: ReverbPluginSourceSettingsBase[];
-	clone() : SoundAttenuationPluginSettings;
-	static C(Other: UObject | any): SoundAttenuationPluginSettings;
-}
-
-declare class SoundAttenuationSettings extends BaseAttenuationSettings { 
-	bAttenuate: boolean;
-	bSpatialize: boolean;
-	bAttenuateWithLPF: boolean;
-	bEnableListenerFocus: boolean;
-	bEnableFocusInterpolation: boolean;
-	bEnableOcclusion: boolean;
-	bUseComplexCollisionForOcclusion: boolean;
-	bEnableReverbSend: boolean;
-	bApplyNormalizationToStereoSounds: boolean;
-	bEnableLogFrequencyScaling: boolean;
-	SpatializationAlgorithm: ESoundSpatializationAlgorithm;
-	AbsorptionMethod: EAirAbsorptionMethod;
-	OcclusionTraceChannel: ECollisionChannel;
-	ReverbSendMethod: EReverbSendMethod;
-	DistanceType: ESoundDistanceCalc;
-	OmniRadius: number;
-	StereoSpread: number;
-	SpatializationPluginSettings: SpatializationPluginSourceSettingsBase;
-	RadiusMin: number;
-	RadiusMax: number;
-	LPFRadiusMin: number;
-	LPFRadiusMax: number;
-	CustomLowpassAirAbsorptionCurve: RuntimeFloatCurve;
-	CustomHighpassAirAbsorptionCurve: RuntimeFloatCurve;
-	LPFFrequencyAtMin: number;
-	LPFFrequencyAtMax: number;
-	HPFFrequencyAtMin: number;
-	HPFFrequencyAtMax: number;
-	FocusAzimuth: number;
-	NonFocusAzimuth: number;
-	FocusDistanceScale: number;
-	NonFocusDistanceScale: number;
-	FocusPriorityScale: number;
-	NonFocusPriorityScale: number;
-	FocusVolumeAttenuation: number;
-	NonFocusVolumeAttenuation: number;
-	FocusAttackInterpSpeed: number;
-	FocusReleaseInterpSpeed: number;
-	OcclusionLowPassFilterFrequency: number;
-	OcclusionVolumeAttenuation: number;
-	OcclusionInterpolationTime: number;
-	OcclusionPluginSettings: OcclusionPluginSourceSettingsBase;
-	ReverbPluginSettings: ReverbPluginSourceSettingsBase;
-	ReverbWetLevelMin: number;
-	ReverbWetLevelMax: number;
-	ReverbDistanceMin: number;
-	ReverbDistanceMax: number;
-	ManualReverbSendLevel: number;
-	CustomReverbSendCurve: RuntimeFloatCurve;
-	PluginSettings: SoundAttenuationPluginSettings;
-	clone() : SoundAttenuationSettings;
-	static C(Other: UObject | any): SoundAttenuationSettings;
-}
-
-declare class SoundAttenuation extends UObject { 
-	Attenuation: SoundAttenuationSettings;
-	static Load(ResourceName: string): SoundAttenuation;
-	static Find(Outer: UObject, ResourceName: string): SoundAttenuation;
-	static GetDefaultObject(): SoundAttenuation;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundAttenuation;
-	static C(Other: UObject | any): SoundAttenuation;
-}
-
-declare type ESubmixChannelFormat = 'Device' | 'Stereo' | 'Quad' | 'FiveDotOne' | 'SevenDotOne' | 'Ambisonics' | 'Count' | 'ESubmixChannelFormat_MAX';
-declare var ESubmixChannelFormat : { Device:'Device',Stereo:'Stereo',Quad:'Quad',FiveDotOne:'FiveDotOne',SevenDotOne:'SevenDotOne',Ambisonics:'Ambisonics',Count:'Count',ESubmixChannelFormat_MAX:'ESubmixChannelFormat_MAX', };
-declare class SoundEffectPreset extends UObject { 
-	static Load(ResourceName: string): SoundEffectPreset;
-	static Find(Outer: UObject, ResourceName: string): SoundEffectPreset;
-	static GetDefaultObject(): SoundEffectPreset;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundEffectPreset;
-	static C(Other: UObject | any): SoundEffectPreset;
-}
-
-declare class SoundEffectSubmixPreset extends SoundEffectPreset { 
-	static Load(ResourceName: string): SoundEffectSubmixPreset;
-	static Find(Outer: UObject, ResourceName: string): SoundEffectSubmixPreset;
-	static GetDefaultObject(): SoundEffectSubmixPreset;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundEffectSubmixPreset;
-	static C(Other: UObject | any): SoundEffectSubmixPreset;
-}
-
-declare class AmbisonicsSubmixSettingsBase extends UObject { 
-	static Load(ResourceName: string): AmbisonicsSubmixSettingsBase;
-	static Find(Outer: UObject, ResourceName: string): AmbisonicsSubmixSettingsBase;
-	static GetDefaultObject(): AmbisonicsSubmixSettingsBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AmbisonicsSubmixSettingsBase;
-	static C(Other: UObject | any): AmbisonicsSubmixSettingsBase;
-}
-
-declare type ESoundwaveSampleRateSettings = 'Max' | 'High' | 'Medium' | 'Low' | 'Min' | 'MatchDevice' | 'ESoundwaveSampleRateSettings_MAX';
-declare var ESoundwaveSampleRateSettings : { Max:'Max',High:'High',Medium:'Medium',Low:'Low',Min:'Min',MatchDevice:'MatchDevice',ESoundwaveSampleRateSettings_MAX:'ESoundwaveSampleRateSettings_MAX', };
-declare type ESoundGroup = 'SOUNDGROUP_Default' | 'SOUNDGROUP_Effects' | 'SOUNDGROUP_UI' | 'SOUNDGROUP_Music' | 'SOUNDGROUP_Voice' | 'SOUNDGROUP_GameSoundGroup1' | 'SOUNDGROUP_GameSoundGroup2' | 'SOUNDGROUP_GameSoundGroup3' | 'SOUNDGROUP_GameSoundGroup4' | 'SOUNDGROUP_GameSoundGroup5' | 'SOUNDGROUP_GameSoundGroup6' | 'SOUNDGROUP_GameSoundGroup7' | 'SOUNDGROUP_GameSoundGroup8' | 'SOUNDGROUP_GameSoundGroup9' | 'SOUNDGROUP_GameSoundGroup10' | 'SOUNDGROUP_GameSoundGroup11' | 'SOUNDGROUP_GameSoundGroup12' | 'SOUNDGROUP_GameSoundGroup13' | 'SOUNDGROUP_GameSoundGroup14' | 'SOUNDGROUP_GameSoundGroup15' | 'SOUNDGROUP_GameSoundGroup16' | 'SOUNDGROUP_GameSoundGroup17' | 'SOUNDGROUP_GameSoundGroup18' | 'SOUNDGROUP_GameSoundGroup19' | 'SOUNDGROUP_GameSoundGroup20' | 'SOUNDGROUP_MAX';
-declare var ESoundGroup : { SOUNDGROUP_Default:'SOUNDGROUP_Default',SOUNDGROUP_Effects:'SOUNDGROUP_Effects',SOUNDGROUP_UI:'SOUNDGROUP_UI',SOUNDGROUP_Music:'SOUNDGROUP_Music',SOUNDGROUP_Voice:'SOUNDGROUP_Voice',SOUNDGROUP_GameSoundGroup1:'SOUNDGROUP_GameSoundGroup1',SOUNDGROUP_GameSoundGroup2:'SOUNDGROUP_GameSoundGroup2',SOUNDGROUP_GameSoundGroup3:'SOUNDGROUP_GameSoundGroup3',SOUNDGROUP_GameSoundGroup4:'SOUNDGROUP_GameSoundGroup4',SOUNDGROUP_GameSoundGroup5:'SOUNDGROUP_GameSoundGroup5',SOUNDGROUP_GameSoundGroup6:'SOUNDGROUP_GameSoundGroup6',SOUNDGROUP_GameSoundGroup7:'SOUNDGROUP_GameSoundGroup7',SOUNDGROUP_GameSoundGroup8:'SOUNDGROUP_GameSoundGroup8',SOUNDGROUP_GameSoundGroup9:'SOUNDGROUP_GameSoundGroup9',SOUNDGROUP_GameSoundGroup10:'SOUNDGROUP_GameSoundGroup10',SOUNDGROUP_GameSoundGroup11:'SOUNDGROUP_GameSoundGroup11',SOUNDGROUP_GameSoundGroup12:'SOUNDGROUP_GameSoundGroup12',SOUNDGROUP_GameSoundGroup13:'SOUNDGROUP_GameSoundGroup13',SOUNDGROUP_GameSoundGroup14:'SOUNDGROUP_GameSoundGroup14',SOUNDGROUP_GameSoundGroup15:'SOUNDGROUP_GameSoundGroup15',SOUNDGROUP_GameSoundGroup16:'SOUNDGROUP_GameSoundGroup16',SOUNDGROUP_GameSoundGroup17:'SOUNDGROUP_GameSoundGroup17',SOUNDGROUP_GameSoundGroup18:'SOUNDGROUP_GameSoundGroup18',SOUNDGROUP_GameSoundGroup19:'SOUNDGROUP_GameSoundGroup19',SOUNDGROUP_GameSoundGroup20:'SOUNDGROUP_GameSoundGroup20',SOUNDGROUP_MAX:'SOUNDGROUP_MAX', };
-declare class SubtitleCue { 
-	text: string;
-	Time: number;
-	clone() : SubtitleCue;
-	static C(Other: UObject | any): SubtitleCue;
-}
-
-declare class LocalizedSubtitle { 
-	LanguageExt: string;
-	Subtitles: SubtitleCue[];
-	bMature: boolean;
-	bManualWordWrap: boolean;
-	bSingleLine: boolean;
-	clone() : LocalizedSubtitle;
-	static C(Other: UObject | any): LocalizedSubtitle;
-}
-
-declare type EEvaluateCurveTableResult = 'RowFound' | 'RowNotFound' | 'EEvaluateCurveTableResult_MAX';
-declare var EEvaluateCurveTableResult : { RowFound:'RowFound',RowNotFound:'RowNotFound',EEvaluateCurveTableResult_MAX:'EEvaluateCurveTableResult_MAX', };
-declare class CurveTable extends UObject { 
-	AssetImportData: AssetImportData;
-	ImportPath: string;
-	static Load(ResourceName: string): CurveTable;
-	static Find(Outer: UObject, ResourceName: string): CurveTable;
-	static GetDefaultObject(): CurveTable;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveTable;
-	static C(Other: UObject | any): CurveTable;
-	EvaluateCurveTableRow(RowName: string,InXY: number,OutResult?: EEvaluateCurveTableResult,OutXY?: number,ContextString?: string): {OutResult: EEvaluateCurveTableResult, OutXY: number};
-	static EvaluateCurveTableRow(CurveTable: CurveTable,RowName: string,InXY: number,OutResult?: EEvaluateCurveTableResult,OutXY?: number,ContextString?: string): {OutResult: EEvaluateCurveTableResult, OutXY: number};
-}
-
-declare class SoundWave extends SoundBase { 
-	CompressionQuality: number;
-	StreamingPriority: number;
-	SampleRateQuality: ESoundwaveSampleRateSettings;
-	SoundGroup: ESoundGroup;
-	bLooping: boolean;
-	bStreaming: boolean;
-	bMature: boolean;
-	bManualWordWrap: boolean;
-	bSingleLine: boolean;
-	bVirtualizeWhenSilent: boolean;
-	bIsAmbisonics: boolean;
-	SpokenText: string;
-	SubtitlePriority: number;
-	Volume: number;
-	Pitch: number;
-	NumChannels: number;
-	ChannelOffsets: number[];
-	ChannelSizes: number[];
-	SampleRate: number;
-	Subtitles: SubtitleCue[];
-	Comment: string;
-	LocalizedSubtitles: LocalizedSubtitle[];
-	SourceFilePath: string;
-	SourceFileTimestamp: string;
-	AssetImportData: AssetImportData;
-	Curves: CurveTable;
-	InternalCurves: CurveTable;
-	static Load(ResourceName: string): SoundWave;
-	static Find(Outer: UObject, ResourceName: string): SoundWave;
-	static GetDefaultObject(): SoundWave;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundWave;
-	static C(Other: UObject | any): SoundWave;
-}
-
-declare type EAudioRecordingExportType = 'SoundWave' | 'WavFile' | 'EAudioRecordingExportType_MAX';
-declare var EAudioRecordingExportType : { SoundWave:'SoundWave',WavFile:'WavFile',EAudioRecordingExportType_MAX:'EAudioRecordingExportType_MAX', };
-declare class SoundSubmix extends UObject { 
-	ChildSubmixes: SoundSubmix[];
-	ParentSubmix: SoundSubmix;
-	ChannelFormat: ESubmixChannelFormat;
-	SubmixEffectChain: SoundEffectSubmixPreset[];
-	AmbisonicsPluginSettings: AmbisonicsSubmixSettingsBase;
-	EnvelopeFollowerAttackTime: number;
-	EnvelopeFollowerReleaseTime: number;
-	OnSubmixRecordedFileDone: UnrealEngineMulticastDelegate<(ResultingSoundWave: SoundWave) => void>;
-	static Load(ResourceName: string): SoundSubmix;
-	static Find(Outer: UObject, ResourceName: string): SoundSubmix;
-	static GetDefaultObject(): SoundSubmix;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSubmix;
-	StopRecordingOutput(WorldContextObject: UObject,ExportType: EAudioRecordingExportType,Name: string,Path: string,ExistingSoundWaveToOverwrite: SoundWave): void;
-	StopEnvelopeFollowing(WorldContextObject: UObject): void;
-	StartRecordingOutput(WorldContextObject: UObject,ExpectedDuration: number): void;
-	StartEnvelopeFollowing(WorldContextObject: UObject): void;
-	static C(Other: UObject | any): SoundSubmix;
-}
-
-declare class SoundSubmixSendInfo { 
-	SendLevel: number;
-	SoundSubmix: SoundSubmix;
-	clone() : SoundSubmixSendInfo;
-	static C(Other: UObject | any): SoundSubmixSendInfo;
-}
-
-declare class SoundEffectSourcePreset extends SoundEffectPreset { 
-	static Load(ResourceName: string): SoundEffectSourcePreset;
-	static Find(Outer: UObject, ResourceName: string): SoundEffectSourcePreset;
-	static GetDefaultObject(): SoundEffectSourcePreset;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundEffectSourcePreset;
-	static C(Other: UObject | any): SoundEffectSourcePreset;
-}
-
-declare class SourceEffectChainEntry { 
-	Preset: SoundEffectSourcePreset;
-	bBypass: boolean;
-	clone() : SourceEffectChainEntry;
-	static C(Other: UObject | any): SourceEffectChainEntry;
-}
-
-declare class SoundEffectSourcePresetChain extends UObject { 
-	Chain: SourceEffectChainEntry[];
-	bPlayEffectChainTails: boolean;
-	static Load(ResourceName: string): SoundEffectSourcePresetChain;
-	static Find(Outer: UObject, ResourceName: string): SoundEffectSourcePresetChain;
-	static GetDefaultObject(): SoundEffectSourcePresetChain;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundEffectSourcePresetChain;
-	static C(Other: UObject | any): SoundEffectSourcePresetChain;
-}
-
-declare type ESourceBusChannels = 'Mono' | 'Stereo' | 'ESourceBusChannels_MAX';
-declare var ESourceBusChannels : { Mono:'Mono',Stereo:'Stereo',ESourceBusChannels_MAX:'ESourceBusChannels_MAX', };
-declare class SoundSourceBus extends SoundWave { 
-	SourceBusChannels: ESourceBusChannels;
-	SourceBusDuration: number;
-	bAutoDeactivateWhenSilent: boolean;
-	static Load(ResourceName: string): SoundSourceBus;
-	static Find(Outer: UObject, ResourceName: string): SoundSourceBus;
-	static GetDefaultObject(): SoundSourceBus;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSourceBus;
-	static C(Other: UObject | any): SoundSourceBus;
-}
-
-declare class SoundSourceBusSendInfo { 
-	SendLevel: number;
-	SoundSourceBus: SoundSourceBus;
-	clone() : SoundSourceBusSendInfo;
-	static C(Other: UObject | any): SoundSourceBusSendInfo;
-}
-
-declare class AudioComponentParam { 
-	ParamName: string;
-	FloatParam: number;
-	BoolParam: boolean;
-	IntParam: number;
-	SoundWaveParam: SoundWave;
-	clone() : AudioComponentParam;
-	static C(Other: UObject | any): AudioComponentParam;
-}
-
-declare class AudioComponent extends SceneComponent { 
-	Sound: SoundBase;
-	InstanceParameters: AudioComponentParam[];
-	SoundClassOverride: SoundClass;
-	bAutoDestroy: boolean;
-	bStopWhenOwnerDestroyed: boolean;
-	bShouldRemainActiveIfDropped: boolean;
-	bAllowSpatialization: boolean;
-	bOverrideAttenuation: boolean;
-	bOverrideSubtitlePriority: boolean;
-	bIsUISound: boolean;
-	bEnableLowPassFilter: boolean;
-	bOverridePriority: boolean;
-	bSuppressSubtitles: boolean;
-	bAutoManageAttachment: boolean;
-	AudioComponentUserID: string;
-	PitchModulationMin: number;
-	PitchModulationMax: number;
-	VolumeModulationMin: number;
-	VolumeModulationMax: number;
-	VolumeMultiplier: number;
-	EnvelopeFollowerAttackTime: number;
-	EnvelopeFollowerReleaseTime: number;
-	Priority: number;
-	SubtitlePriority: number;
-	VolumeWeightedPriorityScale: number;
-	HighFrequencyGainMultiplier: number;
-	PitchMultiplier: number;
-	LowPassFilterFrequency: number;
-	AttenuationSettings: SoundAttenuation;
-	AttenuationOverrides: SoundAttenuationSettings;
-	ConcurrencySettings: SoundConcurrency;
-	AutoAttachLocationRule: EAttachmentRule;
-	AutoAttachRotationRule: EAttachmentRule;
-	AutoAttachScaleRule: EAttachmentRule;
-	OnAudioFinished: UnrealEngineMulticastDelegate<() => void>;
-	OnAudioPlaybackPercent: UnrealEngineMulticastDelegate<(PlayingSoundWave: SoundWave, PlaybackPercent: number) => void>;
-	OnAudioSingleEnvelopeValue: UnrealEngineMulticastDelegate<(PlayingSoundWave: SoundWave, EnvelopeValue: number) => void>;
-	OnAudioMultiEnvelopeValue: UnrealEngineMulticastDelegate<(AverageEnvelopeValue: number, MaxEnvelope: number, NumWaveInstances: number) => void>;
-	OnQueueSubtitles: UnrealEngineDelegate<(Subtitles: SubtitleCue[], CueDuration: number) => void>;
-	AutoAttachParent: any;
-	AutoAttachSocketName: string;
-	static Load(ResourceName: string): AudioComponent;
-	static Find(Outer: UObject, ResourceName: string): AudioComponent;
-	static GetDefaultObject(): AudioComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioComponent;
-	Stop(): void;
-	SetWaveParameter(InName: string,InWave: SoundWave): void;
-	SetVolumeMultiplier(NewVolumeMultiplier: number): void;
-	SetUISound(bInUISound: boolean): void;
-	SetSubmixSend(Submix: SoundSubmix,SendLevel: number): void;
-	SetSound(NewSound: SoundBase): void;
-	SetPitchMultiplier(NewPitchMultiplier: number): void;
-	SetPaused(bPause: boolean): void;
-	SetLowPassFilterFrequency(InLowPassFilterFrequency: number): void;
-	SetLowPassFilterEnabled(InLowPassFilterEnabled: boolean): void;
-	SetIntParameter(InName: string,inInt: number): void;
-	SetFloatParameter(InName: string,InFloat: number): void;
-	SetBoolParameter(InName: string,InBool: boolean): void;
-	Play(StartTime: number): void;
-	IsPlaying(): boolean;
-	FadeOut(FadeOutDuration: number,FadeVolumeLevel: number): void;
-	FadeIn(FadeInDuration: number,FadeVolumeLevel: number,StartTime: number): void;
-	BP_GetAttenuationSettingsToApply(OutAttenuationSettings?: SoundAttenuationSettings): {OutAttenuationSettings: SoundAttenuationSettings, $: boolean};
-	AdjustVolume(AdjustVolumeDuration: number,AdjustVolumeLevel: number): void;
-	AdjustAttenuation(InAttenuationSettings: SoundAttenuationSettings): void;
-	static C(Other: UObject | any): AudioComponent;
-}
-
-declare class SoundBase extends UObject { 
-	SoundClassObject: SoundClass;
-	bDebug: boolean;
-	bOverrideConcurrency: boolean;
-	bOutputToBusOnly: boolean;
-	bIgnoreFocus: boolean;
-	bHasDelayNode: boolean;
-	bHasConcatenatorNode: boolean;
-	bHasVirtualizeWhenSilent: boolean;
-	bBypassVolumeScaleForPriority: boolean;
-	MaxConcurrentResolutionRule: EMaxConcurrentResolutionRule;
-	SoundConcurrencySettings: SoundConcurrency;
-	ConcurrencyOverrides: SoundConcurrencySettings;
-	MaxConcurrentPlayCount: number;
-	Duration: number;
-	MaxDistance: number;
-	TotalSamples: number;
-	Priority: number;
-	AttenuationSettings: SoundAttenuation;
-	SoundSubmixObject: SoundSubmix;
-	SoundSubmixSends: SoundSubmixSendInfo[];
-	SourceEffectChain: SoundEffectSourcePresetChain;
-	BusSends: SoundSourceBusSendInfo[];
-	PreEffectBusSends: SoundSourceBusSendInfo[];
-	static Load(ResourceName: string): SoundBase;
-	static Find(Outer: UObject, ResourceName: string): SoundBase;
-	static GetDefaultObject(): SoundBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundBase;
-	static C(Other: UObject | any): SoundBase;
-	SpawnSoundAttached(AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,bStopWhenAttachedToDestroyed: boolean,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,ConcurrencySettings: SoundConcurrency,bAutoDestroy: boolean): AudioComponent;
-	static SpawnSoundAttached(Sound: SoundBase,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,bStopWhenAttachedToDestroyed: boolean,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,ConcurrencySettings: SoundConcurrency,bAutoDestroy: boolean): AudioComponent;
-}
-
-declare type EUMGSequencePlayMode = 'Forward' | 'Reverse' | 'PingPong' | 'EUMGSequencePlayMode_MAX';
-declare var EUMGSequencePlayMode : { Forward:'Forward',Reverse:'Reverse',PingPong:'PingPong',EUMGSequencePlayMode_MAX:'EUMGSequencePlayMode_MAX', };
-declare class InputEvent { 
-	clone() : InputEvent;
-	static C(Other: UObject | any): InputEvent;
-	InputEvent_IsAltDown(): boolean;
-	InputEvent_IsCommandDown(): boolean;
-	InputEvent_IsControlDown(): boolean;
-	InputEvent_IsLeftAltDown(): boolean;
-	InputEvent_IsLeftCommandDown(): boolean;
-	InputEvent_IsLeftControlDown(): boolean;
-	InputEvent_IsLeftShiftDown(): boolean;
-	InputEvent_IsRepeat(): boolean;
-	InputEvent_IsRightAltDown(): boolean;
-	InputEvent_IsRightCommandDown(): boolean;
-	InputEvent_IsRightControlDown(): boolean;
-	InputEvent_IsRightShiftDown(): boolean;
-	InputEvent_IsShiftDown(): boolean;
-	static InputEvent_IsAltDown(Input: InputEvent): boolean;
-	static InputEvent_IsCommandDown(Input: InputEvent): boolean;
-	static InputEvent_IsControlDown(Input: InputEvent): boolean;
-	static InputEvent_IsLeftAltDown(Input: InputEvent): boolean;
-	static InputEvent_IsLeftCommandDown(Input: InputEvent): boolean;
-	static InputEvent_IsLeftControlDown(Input: InputEvent): boolean;
-	static InputEvent_IsLeftShiftDown(Input: InputEvent): boolean;
-	static InputEvent_IsRepeat(Input: InputEvent): boolean;
-	static InputEvent_IsRightAltDown(Input: InputEvent): boolean;
-	static InputEvent_IsRightCommandDown(Input: InputEvent): boolean;
-	static InputEvent_IsRightControlDown(Input: InputEvent): boolean;
-	static InputEvent_IsRightShiftDown(Input: InputEvent): boolean;
-	static InputEvent_IsShiftDown(Input: InputEvent): boolean;
-}
-
-declare type ESlateGesture = 'None' | 'Scroll' | 'Magnify' | 'Swipe' | 'Rotate' | 'LongPress' | 'ESlateGesture_MAX';
-declare var ESlateGesture : { None:'None',Scroll:'Scroll',Magnify:'Magnify',Swipe:'Swipe',Rotate:'Rotate',LongPress:'LongPress',ESlateGesture_MAX:'ESlateGesture_MAX', };
-declare class EventReply { 
-	clone() : EventReply;
-	static C(Other: UObject | any): EventReply;
-	CaptureJoystick(CapturingWidget?: Widget,bInAllJoysticks?: boolean): {Reply: EventReply, $: EventReply};
-	CaptureMouse(CapturingWidget?: Widget): {Reply: EventReply, $: EventReply};
-	ClearUserFocus(bInAllUsers?: boolean): {Reply: EventReply, $: EventReply};
-	DetectDrag(WidgetDetectingDrag?: Widget,DragKey?: Key): {Reply: EventReply, $: EventReply};
-	EndDragDrop(): {Reply: EventReply, $: EventReply};
-	LockMouse(CapturingWidget?: Widget): {Reply: EventReply, $: EventReply};
-	ReleaseJoystickCapture(bInAllJoysticks?: boolean): {Reply: EventReply, $: EventReply};
-	ReleaseMouseCapture(): {Reply: EventReply, $: EventReply};
-	SetMousePosition(NewMousePosition?: Vector2D): {Reply: EventReply, $: EventReply};
-	SetUserFocus(FocusWidget?: Widget,bInAllUsers?: boolean): {Reply: EventReply, $: EventReply};
-	UnlockMouse(): {Reply: EventReply, $: EventReply};
-	static CaptureJoystick(Reply?: EventReply,CapturingWidget?: Widget,bInAllJoysticks?: boolean): {Reply: EventReply, $: EventReply};
-	static CaptureMouse(Reply?: EventReply,CapturingWidget?: Widget): {Reply: EventReply, $: EventReply};
-	static ClearUserFocus(Reply?: EventReply,bInAllUsers?: boolean): {Reply: EventReply, $: EventReply};
-	static DetectDrag(Reply?: EventReply,WidgetDetectingDrag?: Widget,DragKey?: Key): {Reply: EventReply, $: EventReply};
-	static EndDragDrop(Reply?: EventReply): {Reply: EventReply, $: EventReply};
-	static LockMouse(Reply?: EventReply,CapturingWidget?: Widget): {Reply: EventReply, $: EventReply};
-	static ReleaseJoystickCapture(Reply?: EventReply,bInAllJoysticks?: boolean): {Reply: EventReply, $: EventReply};
-	static ReleaseMouseCapture(Reply?: EventReply): {Reply: EventReply, $: EventReply};
-	static SetMousePosition(Reply?: EventReply,NewMousePosition?: Vector2D): {Reply: EventReply, $: EventReply};
-	static SetUserFocus(Reply?: EventReply,FocusWidget?: Widget,bInAllUsers?: boolean): {Reply: EventReply, $: EventReply};
-	static UnlockMouse(Reply?: EventReply): {Reply: EventReply, $: EventReply};
-	static Handled(): EventReply;
-	static Unhandled(): EventReply;
-}
-
-declare class UPointerEvent extends InputEvent { 
-	clone() : UPointerEvent;
-	static C(Other: UObject | any): UPointerEvent;
-	PointerEvent_GetCursorDelta(): Vector2D;
-	PointerEvent_GetEffectingButton(): Key;
-	PointerEvent_GetGestureDelta(): Vector2D;
-	PointerEvent_GetGestureType(): ESlateGesture;
-	PointerEvent_GetLastScreenSpacePosition(): Vector2D;
-	PointerEvent_GetPointerIndex(): number;
-	PointerEvent_GetScreenSpacePosition(): Vector2D;
-	PointerEvent_GetTouchpadIndex(): number;
-	PointerEvent_GetUserIndex(): number;
-	PointerEvent_GetWheelDelta(): number;
-	PointerEvent_IsMouseButtonDown(MouseButton: Key): boolean;
-	PointerEvent_IsTouchEvent(): boolean;
-	DetectDragIfPressed(WidgetDetectingDrag: Widget,DragKey: Key): EventReply;
-	GetInputEventFromPointerEvent(): InputEvent;
-	static PointerEvent_GetCursorDelta(Input: UPointerEvent): Vector2D;
-	static PointerEvent_GetEffectingButton(Input: UPointerEvent): Key;
-	static PointerEvent_GetGestureDelta(Input: UPointerEvent): Vector2D;
-	static PointerEvent_GetGestureType(Input: UPointerEvent): ESlateGesture;
-	static PointerEvent_GetLastScreenSpacePosition(Input: UPointerEvent): Vector2D;
-	static PointerEvent_GetPointerIndex(Input: UPointerEvent): number;
-	static PointerEvent_GetScreenSpacePosition(Input: UPointerEvent): Vector2D;
-	static PointerEvent_GetTouchpadIndex(Input: UPointerEvent): number;
-	static PointerEvent_GetUserIndex(Input: UPointerEvent): number;
-	static PointerEvent_GetWheelDelta(Input: UPointerEvent): number;
-	static PointerEvent_IsMouseButtonDown(Input: UPointerEvent,MouseButton: Key): boolean;
-	static PointerEvent_IsTouchEvent(Input: UPointerEvent): boolean;
-	static DetectDragIfPressed(UPointerEvent: UPointerEvent,WidgetDetectingDrag: Widget,DragKey: Key): EventReply;
-	static GetInputEventFromPointerEvent(Event: UPointerEvent): InputEvent;
-}
-
-declare class UFocusEvent { 
-	clone() : UFocusEvent;
-	static C(Other: UObject | any): UFocusEvent;
-}
-
-declare class KeyEvent extends InputEvent { 
-	clone() : KeyEvent;
-	static C(Other: UObject | any): KeyEvent;
-	GetKey(): Key;
-	GetUserIndex(): number;
-	GetInputEventFromKeyEvent(): InputEvent;
-	static GetKey(Input: KeyEvent): Key;
-	static GetUserIndex(Input: KeyEvent): number;
-	static GetInputEventFromKeyEvent(Event: KeyEvent): InputEvent;
-}
-
-declare class SlateBrushAsset extends UObject { 
-	Brush: SlateBrush;
-	static Load(ResourceName: string): SlateBrushAsset;
-	static Find(Outer: UObject, ResourceName: string): SlateBrushAsset;
-	static GetDefaultObject(): SlateBrushAsset;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateBrushAsset;
-	static C(Other: UObject | any): SlateBrushAsset;
-	MakeBrushFromAsset(): SlateBrush;
-	static MakeBrushFromAsset(BrushAsset: SlateBrushAsset): SlateBrush;
-}
-
-declare class PaintContext { 
-	clone() : PaintContext;
-	static C(Other: UObject | any): PaintContext;
-	DrawSpaceSpline(InStart?: Vector2D,InStartDir?: Vector2D,InEnd?: Vector2D,InEndDir?: Vector2D,InThickness?: number,InTint?: LinearColor): {Context: PaintContext};
-	DrawBox(Position?: Vector2D,Size?: Vector2D,Brush?: SlateBrushAsset,Tint?: LinearColor): {Context: PaintContext};
-	DrawLine(PositionA?: Vector2D,PositionB?: Vector2D,Tint?: LinearColor,bAntiAlias?: boolean): {Context: PaintContext};
-	DrawLines(Points?: Vector2D[],Tint?: LinearColor,bAntiAlias?: boolean): {Context: PaintContext};
-	DrawText(inString?: string,Position?: Vector2D,Tint?: LinearColor): {Context: PaintContext};
-	DrawTextFormatted(text?: string,Position?: Vector2D,Font?: Font,FontSize?: number,FontTypeFace?: string,Tint?: LinearColor): {Context: PaintContext};
-	static DrawSpaceSpline(Context?: PaintContext,InStart?: Vector2D,InStartDir?: Vector2D,InEnd?: Vector2D,InEndDir?: Vector2D,InThickness?: number,InTint?: LinearColor): {Context: PaintContext};
-	static DrawBox(Context?: PaintContext,Position?: Vector2D,Size?: Vector2D,Brush?: SlateBrushAsset,Tint?: LinearColor): {Context: PaintContext};
-	static DrawLine(Context?: PaintContext,PositionA?: Vector2D,PositionB?: Vector2D,Tint?: LinearColor,bAntiAlias?: boolean): {Context: PaintContext};
-	static DrawLines(Context?: PaintContext,Points?: Vector2D[],Tint?: LinearColor,bAntiAlias?: boolean): {Context: PaintContext};
-	static DrawText(Context?: PaintContext,inString?: string,Position?: Vector2D,Tint?: LinearColor): {Context: PaintContext};
-	static DrawTextFormatted(Context?: PaintContext,text?: string,Position?: Vector2D,Font?: Font,FontSize?: number,FontTypeFace?: string,Tint?: LinearColor): {Context: PaintContext};
-}
-
-declare class MotionEvent extends InputEvent { 
-	clone() : MotionEvent;
-	static C(Other: UObject | any): MotionEvent;
-}
-
-declare class CharacterEvent extends InputEvent { 
-	clone() : CharacterEvent;
-	static C(Other: UObject | any): CharacterEvent;
-	GetInputEventFromCharacterEvent(): InputEvent;
-	static GetInputEventFromCharacterEvent(Event: CharacterEvent): InputEvent;
-}
-
-declare type EDragPivot = 'MouseDown' | 'TopLeft' | 'TopCenter' | 'TopRight' | 'CenterLeft' | 'CenterCenter' | 'CenterRight' | 'BottomLeft' | 'BottomCenter' | 'BottomRight' | 'EDragPivot_MAX';
-declare var EDragPivot : { MouseDown:'MouseDown',TopLeft:'TopLeft',TopCenter:'TopCenter',TopRight:'TopRight',CenterLeft:'CenterLeft',CenterCenter:'CenterCenter',CenterRight:'CenterRight',BottomLeft:'BottomLeft',BottomCenter:'BottomCenter',BottomRight:'BottomRight',EDragPivot_MAX:'EDragPivot_MAX', };
-declare class DragDropOperation extends UObject { 
-	Tag: string;
-	Payload: UObject;
-	DefaultDragVisual: Widget;
-	Pivot: EDragPivot;
-	Offset: Vector2D;
-	OnDrop: UnrealEngineMulticastDelegate<(Operation: DragDropOperation) => void>;
-	OnDragCancelled: UnrealEngineMulticastDelegate<(Operation: DragDropOperation) => void>;
-	OnDragged: UnrealEngineMulticastDelegate<(Operation: DragDropOperation) => void>;
-	static Load(ResourceName: string): DragDropOperation;
-	static Find(Outer: UObject, ResourceName: string): DragDropOperation;
-	static GetDefaultObject(): DragDropOperation;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DragDropOperation;
-	Drop(UPointerEvent: UPointerEvent): void;
-	Dragged(UPointerEvent: UPointerEvent): void;
-	DragCancelled(UPointerEvent: UPointerEvent): void;
-	static C(Other: UObject | any): DragDropOperation;
-}
-
-declare class AnalogInputEvent extends KeyEvent { 
-	clone() : AnalogInputEvent;
-	static C(Other: UObject | any): AnalogInputEvent;
-	GetAnalogValue(): number;
-	GetKeyEventFromAnalogInputEvent(): KeyEvent;
-	static GetAnalogValue(Input: AnalogInputEvent): number;
-	static GetKeyEventFromAnalogInputEvent(Event: AnalogInputEvent): KeyEvent;
-}
-
-declare class UserWidget extends Widget { 
-	ColorAndOpacity: LinearColor;
-	ColorAndOpacityDelegate: UnrealEngineDelegate<() => LinearColor>;
-	ForegroundColor: SlateColor;
-	ForegroundColorDelegate: UnrealEngineDelegate<() => SlateColor>;
-	Padding: Margin;
-	ActiveSequencePlayers: UMGSequencePlayer[];
-	StoppedSequencePlayers: UMGSequencePlayer[];
-	NamedSlotBindings: NamedSlotBinding[];
-	WidgetTree: WidgetTree;
-	DesignTimeSize: Vector2D;
-	DesignSizeMode: EDesignPreviewSizeMode;
-	PaletteCategory: string;
-	PreviewBackground: Texture2D;
-	Priority: number;
-	bSupportsKeyboardFocus: boolean;
-	bIsFocusable: boolean;
-	bStopAction: boolean;
-	bHasScriptImplementedTick: boolean;
-	bHasScriptImplementedPaint: boolean;
-	bCookedWidgetTree: boolean;
-	TickFrequency: EWidgetTickFrequency;
-	InputComponent: InputComponent;
-	static Load(ResourceName: string): UserWidget;
-	static Find(Outer: UObject, ResourceName: string): UserWidget;
-	static GetDefaultObject(): UserWidget;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserWidget;
-	UnregisterInputComponent(): void;
-	Tick(MyGeometry: Geometry,InDeltaTime: number): void;
-	StopListeningForInputAction(ActionName: string,EventType: EInputEvent): void;
-	StopListeningForAllInputActions(): void;
-	StopAnimationsAndLatentActions(): void;
-	StopAnimation(InAnimation: WidgetAnimation): void;
-	StopAllAnimations(): void;
-	SetPositionInViewport(Position: Vector2D,bRemoveDPIScale: boolean): void;
-	SetPlaybackSpeed(InAnimation: WidgetAnimation,PlaybackSpeed: number): void;
-	SetPadding(InPadding: Margin): void;
-	SetOwningPlayer(LocalPlayerController: PlayerController): void;
-	SetNumLoopsToPlay(InAnimation: WidgetAnimation,NumLoopsToPlay: number): void;
-	SetInputActionPriority(NewPriority: number): void;
-	SetInputActionBlocking(bShouldBlock: boolean): void;
-	SetForegroundColor(InForegroundColor: SlateColor): void;
-	SetDesiredSizeInViewport(Size: Vector2D): void;
-	SetColorAndOpacity(InColorAndOpacity: LinearColor): void;
-	SetAnchorsInViewport(Anchors: Anchors): void;
-	SetAlignmentInViewport(Alignment: Vector2D): void;
-	ReverseAnimation(InAnimation: WidgetAnimation): void;
-	RemoveFromViewport(): void;
-	RegisterInputComponent(): void;
-	PreConstruct(IsDesignTime: boolean): void;
-	PlaySound(SoundToPlay: SoundBase): void;
-	PlayAnimationTo(InAnimation: WidgetAnimation,StartAtTime: number,EndAtTime: number,NumLoopsToPlay: number,PlayMode: EUMGSequencePlayMode,PlaybackSpeed: number): void;
-	PlayAnimation(InAnimation: WidgetAnimation,StartAtTime: number,NumLoopsToPlay: number,PlayMode: EUMGSequencePlayMode,PlaybackSpeed: number): void;
-	PauseAnimation(InAnimation: WidgetAnimation): number;
-	OnTouchStarted(MyGeometry: Geometry,InTouchEvent: UPointerEvent): EventReply;
-	OnTouchMoved(MyGeometry: Geometry,InTouchEvent: UPointerEvent): EventReply;
-	OnTouchGesture(MyGeometry: Geometry,GestureEvent: UPointerEvent): EventReply;
-	OnTouchForceChanged(MyGeometry: Geometry,InTouchEvent: UPointerEvent): EventReply;
-	OnTouchEnded(MyGeometry: Geometry,InTouchEvent: UPointerEvent): EventReply;
-	OnRemovedFromFocusPath(InFocusEvent: UFocusEvent): void;
-	OnPreviewMouseButtonDown(MyGeometry: Geometry,MouseEvent: UPointerEvent): EventReply;
-	OnPreviewKeyDown(MyGeometry: Geometry,InKeyEvent: KeyEvent): EventReply;
-	OnPaint(Context?: PaintContext): {Context: PaintContext};
-	OnMouseWheel(MyGeometry: Geometry,MouseEvent: UPointerEvent): EventReply;
-	OnMouseMove(MyGeometry: Geometry,MouseEvent: UPointerEvent): EventReply;
-	OnMouseLeave(MouseEvent: UPointerEvent): void;
-	OnMouseEnter(MyGeometry: Geometry,MouseEvent: UPointerEvent): void;
-	OnMouseCaptureLost(): void;
-	OnMouseButtonUp(MyGeometry: Geometry,MouseEvent: UPointerEvent): EventReply;
-	OnMouseButtonDown(MyGeometry: Geometry,MouseEvent: UPointerEvent): EventReply;
-	OnMouseButtonDoubleClick(InMyGeometry: Geometry,InMouseEvent: UPointerEvent): EventReply;
-	OnMotionDetected(MyGeometry: Geometry,InMotionEvent: MotionEvent): EventReply;
-	OnKeyUp(MyGeometry: Geometry,InKeyEvent: KeyEvent): EventReply;
-	OnKeyDown(MyGeometry: Geometry,InKeyEvent: KeyEvent): EventReply;
-	OnKeyChar(MyGeometry: Geometry,InCharacterEvent: CharacterEvent): EventReply;
-	OnInitialized(): void;
-	OnFocusReceived(MyGeometry: Geometry,InFocusEvent: UFocusEvent): EventReply;
-	OnFocusLost(InFocusEvent: UFocusEvent): void;
-	OnDrop(MyGeometry: Geometry,UPointerEvent: UPointerEvent,Operation: DragDropOperation): boolean;
-	OnDragOver(MyGeometry: Geometry,UPointerEvent: UPointerEvent,Operation: DragDropOperation): boolean;
-	OnDragLeave(UPointerEvent: UPointerEvent,Operation: DragDropOperation): void;
-	OnDragEnter(MyGeometry: Geometry,UPointerEvent: UPointerEvent,Operation: DragDropOperation): void;
-	OnDragDetected(MyGeometry: Geometry,UPointerEvent: UPointerEvent,Operation?: DragDropOperation): {Operation: DragDropOperation};
-	OnDragCancelled(UPointerEvent: UPointerEvent,Operation: DragDropOperation): void;
-	OnAnimationStarted(Animation: WidgetAnimation): void;
-	OnAnimationFinished(Animation: WidgetAnimation): void;
-	OnAnalogValueChanged(MyGeometry: Geometry,InAnalogInputEvent: AnalogInputEvent): EventReply;
-	OnAddedToFocusPath(InFocusEvent: UFocusEvent): void;
-	IsPlayingAnimation(): boolean;
-	IsListeningForInputAction(ActionName: string): boolean;
-	IsInViewport(): boolean;
-	IsInteractable(): boolean;
-	IsAnyAnimationPlaying(): boolean;
-	IsAnimationPlayingForward(InAnimation: WidgetAnimation): boolean;
-	IsAnimationPlaying(InAnimation: WidgetAnimation): boolean;
-	GetOwningPlayerPawn(): Pawn;
-	GetIsVisible(): boolean;
-	GetAnimationCurrentTime(InAnimation: WidgetAnimation): number;
-	GetAnchorsInViewport(): Anchors;
-	GetAlignmentInViewport(): Vector2D;
-	Destruct(): void;
-	Construct(): void;
-	CancelLatentActions(): void;
-	AddToViewport(ZOrder: number): void;
-	AddToPlayerScreen(ZOrder: number): boolean;
-	static C(Other: UObject | any): UserWidget;
-}
-
-declare class ViewTargetTransitionParams { 
-	BlendTime: number;
-	BlendFunction: EViewTargetBlendFunction;
-	BlendExp: number;
-	bLockOutgoing: boolean;
-	clone() : ViewTargetTransitionParams;
-	static C(Other: UObject | any): ViewTargetTransitionParams;
-}
-
-declare class UpdateLevelVisibilityLevelInfo { 
-	PackageName: string;
-	bIsVisible: boolean;
-	clone() : UpdateLevelVisibilityLevelInfo;
-	static C(Other: UObject | any): UpdateLevelVisibilityLevelInfo;
-}
-
-declare class HapticFeedbackEffect_Base extends UObject { 
-	static Load(ResourceName: string): HapticFeedbackEffect_Base;
-	static Find(Outer: UObject, ResourceName: string): HapticFeedbackEffect_Base;
-	static GetDefaultObject(): HapticFeedbackEffect_Base;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HapticFeedbackEffect_Base;
-	static C(Other: UObject | any): HapticFeedbackEffect_Base;
-}
-
-declare type EDynamicForceFeedbackAction = 'Start' | 'Update' | 'Stop' | 'EDynamicForceFeedbackAction_MAX';
-declare var EDynamicForceFeedbackAction : { Start:'Start',Update:'Update',Stop:'Stop',EDynamicForceFeedbackAction_MAX:'EDynamicForceFeedbackAction_MAX', };
-declare class LatentActionInfo { 
-	Linkage: number;
-	UUID: number;
-	ExecutionFunction: string;
-	CallbackTarget: UObject;
-	clone() : LatentActionInfo;
-	static C(Other: UObject | any): LatentActionInfo;
-}
-
-declare type EObjectTypeQuery = 'ObjectTypeQuery1' | 'ObjectTypeQuery2' | 'ObjectTypeQuery3' | 'ObjectTypeQuery4' | 'ObjectTypeQuery5' | 'ObjectTypeQuery6' | 'ObjectTypeQuery7' | 'ObjectTypeQuery8' | 'ObjectTypeQuery9' | 'ObjectTypeQuery10' | 'ObjectTypeQuery11' | 'ObjectTypeQuery12' | 'ObjectTypeQuery13' | 'ObjectTypeQuery14' | 'ObjectTypeQuery15' | 'ObjectTypeQuery16' | 'ObjectTypeQuery17' | 'ObjectTypeQuery18' | 'ObjectTypeQuery19' | 'ObjectTypeQuery20' | 'ObjectTypeQuery21' | 'ObjectTypeQuery22' | 'ObjectTypeQuery23' | 'ObjectTypeQuery24' | 'ObjectTypeQuery25' | 'ObjectTypeQuery26' | 'ObjectTypeQuery27' | 'ObjectTypeQuery28' | 'ObjectTypeQuery29' | 'ObjectTypeQuery30' | 'ObjectTypeQuery31' | 'ObjectTypeQuery32' | 'ObjectTypeQuery_MAX' | 'EObjectTypeQuery_MAX';
-declare var EObjectTypeQuery : { ObjectTypeQuery1:'ObjectTypeQuery1',ObjectTypeQuery2:'ObjectTypeQuery2',ObjectTypeQuery3:'ObjectTypeQuery3',ObjectTypeQuery4:'ObjectTypeQuery4',ObjectTypeQuery5:'ObjectTypeQuery5',ObjectTypeQuery6:'ObjectTypeQuery6',ObjectTypeQuery7:'ObjectTypeQuery7',ObjectTypeQuery8:'ObjectTypeQuery8',ObjectTypeQuery9:'ObjectTypeQuery9',ObjectTypeQuery10:'ObjectTypeQuery10',ObjectTypeQuery11:'ObjectTypeQuery11',ObjectTypeQuery12:'ObjectTypeQuery12',ObjectTypeQuery13:'ObjectTypeQuery13',ObjectTypeQuery14:'ObjectTypeQuery14',ObjectTypeQuery15:'ObjectTypeQuery15',ObjectTypeQuery16:'ObjectTypeQuery16',ObjectTypeQuery17:'ObjectTypeQuery17',ObjectTypeQuery18:'ObjectTypeQuery18',ObjectTypeQuery19:'ObjectTypeQuery19',ObjectTypeQuery20:'ObjectTypeQuery20',ObjectTypeQuery21:'ObjectTypeQuery21',ObjectTypeQuery22:'ObjectTypeQuery22',ObjectTypeQuery23:'ObjectTypeQuery23',ObjectTypeQuery24:'ObjectTypeQuery24',ObjectTypeQuery25:'ObjectTypeQuery25',ObjectTypeQuery26:'ObjectTypeQuery26',ObjectTypeQuery27:'ObjectTypeQuery27',ObjectTypeQuery28:'ObjectTypeQuery28',ObjectTypeQuery29:'ObjectTypeQuery29',ObjectTypeQuery30:'ObjectTypeQuery30',ObjectTypeQuery31:'ObjectTypeQuery31',ObjectTypeQuery32:'ObjectTypeQuery32',ObjectTypeQuery_MAX:'ObjectTypeQuery_MAX',EObjectTypeQuery_MAX:'EObjectTypeQuery_MAX', };
-declare type ETraceTypeQuery = 'TraceTypeQuery1' | 'TraceTypeQuery2' | 'TraceTypeQuery3' | 'TraceTypeQuery4' | 'TraceTypeQuery5' | 'TraceTypeQuery6' | 'TraceTypeQuery7' | 'TraceTypeQuery8' | 'TraceTypeQuery9' | 'TraceTypeQuery10' | 'TraceTypeQuery11' | 'TraceTypeQuery12' | 'TraceTypeQuery13' | 'TraceTypeQuery14' | 'TraceTypeQuery15' | 'TraceTypeQuery16' | 'TraceTypeQuery17' | 'TraceTypeQuery18' | 'TraceTypeQuery19' | 'TraceTypeQuery20' | 'TraceTypeQuery21' | 'TraceTypeQuery22' | 'TraceTypeQuery23' | 'TraceTypeQuery24' | 'TraceTypeQuery25' | 'TraceTypeQuery26' | 'TraceTypeQuery27' | 'TraceTypeQuery28' | 'TraceTypeQuery29' | 'TraceTypeQuery30' | 'TraceTypeQuery31' | 'TraceTypeQuery32' | 'TraceTypeQuery_MAX' | 'ETraceTypeQuery_MAX';
-declare var ETraceTypeQuery : { TraceTypeQuery1:'TraceTypeQuery1',TraceTypeQuery2:'TraceTypeQuery2',TraceTypeQuery3:'TraceTypeQuery3',TraceTypeQuery4:'TraceTypeQuery4',TraceTypeQuery5:'TraceTypeQuery5',TraceTypeQuery6:'TraceTypeQuery6',TraceTypeQuery7:'TraceTypeQuery7',TraceTypeQuery8:'TraceTypeQuery8',TraceTypeQuery9:'TraceTypeQuery9',TraceTypeQuery10:'TraceTypeQuery10',TraceTypeQuery11:'TraceTypeQuery11',TraceTypeQuery12:'TraceTypeQuery12',TraceTypeQuery13:'TraceTypeQuery13',TraceTypeQuery14:'TraceTypeQuery14',TraceTypeQuery15:'TraceTypeQuery15',TraceTypeQuery16:'TraceTypeQuery16',TraceTypeQuery17:'TraceTypeQuery17',TraceTypeQuery18:'TraceTypeQuery18',TraceTypeQuery19:'TraceTypeQuery19',TraceTypeQuery20:'TraceTypeQuery20',TraceTypeQuery21:'TraceTypeQuery21',TraceTypeQuery22:'TraceTypeQuery22',TraceTypeQuery23:'TraceTypeQuery23',TraceTypeQuery24:'TraceTypeQuery24',TraceTypeQuery25:'TraceTypeQuery25',TraceTypeQuery26:'TraceTypeQuery26',TraceTypeQuery27:'TraceTypeQuery27',TraceTypeQuery28:'TraceTypeQuery28',TraceTypeQuery29:'TraceTypeQuery29',TraceTypeQuery30:'TraceTypeQuery30',TraceTypeQuery31:'TraceTypeQuery31',TraceTypeQuery32:'TraceTypeQuery32',TraceTypeQuery_MAX:'TraceTypeQuery_MAX',ETraceTypeQuery_MAX:'ETraceTypeQuery_MAX', };
-declare class UpdateLevelStreamingLevelStatus { 
-	PackageName: string;
-	LODIndex: number;
-	bNewShouldBeLoaded: boolean;
-	bNewShouldBeVisible: boolean;
-	bNewShouldBlockOnLoad: boolean;
-	clone() : UpdateLevelStreamingLevelStatus;
-	static C(Other: UObject | any): UpdateLevelStreamingLevelStatus;
-}
-
-declare type ETravelType = 'TRAVEL_Absolute' | 'TRAVEL_Partial' | 'TRAVEL_Relative' | 'TRAVEL_MAX';
-declare var ETravelType : { TRAVEL_Absolute:'TRAVEL_Absolute',TRAVEL_Partial:'TRAVEL_Partial',TRAVEL_Relative:'TRAVEL_Relative',TRAVEL_MAX:'TRAVEL_MAX', };
-declare type EMouseLockMode = 'DoNotLock' | 'LockOnCapture' | 'LockAlways' | 'LockInFullscreen' | 'EMouseLockMode_MAX';
-declare var EMouseLockMode : { DoNotLock:'DoNotLock',LockOnCapture:'LockOnCapture',LockAlways:'LockAlways',LockInFullscreen:'LockInFullscreen',EMouseLockMode_MAX:'EMouseLockMode_MAX', };
-declare class PlayerController extends Controller { 
-	Player: Player;
-	AcknowledgedPawn: Pawn;
-	ControllingDirTrackInst: InterpTrackInstDirector;
-	MyHUD: HUD;
-	PlayerCameraManager: PlayerCameraManager;
-	PlayerCameraManagerClass: UnrealEngineClass;
-	bAutoManageActiveCameraTarget: boolean;
-	TargetViewRotation: Rotator;
-	SmoothTargetViewRotationSpeed: number;
-	HiddenActors: Actor[];
-	HiddenPrimitiveComponents: any[];
-	LastSpectatorStateSynchTime: number;
-	LastSpectatorSyncLocation: Vector;
-	LastSpectatorSyncRotation: Rotator;
-	ClientCap: number;
-	CheatManager: CheatManager;
-	CheatClass: UnrealEngineClass;
-	PlayerInput: PlayerInput;
-	ActiveForceFeedbackEffects: ActiveForceFeedbackEffect[];
-	bPlayerIsWaiting: boolean;
-	NetPlayerIndex: number;
-	PendingSwapConnection: NetConnection;
-	NetConnection: NetConnection;
-	InputYawScale: number;
-	InputPitchScale: number;
-	InputRollScale: number;
-	bShowMouseCursor: boolean;
-	bEnableClickEvents: boolean;
-	bEnableTouchEvents: boolean;
-	bEnableMouseOverEvents: boolean;
-	bEnableTouchOverEvents: boolean;
-	bForceFeedbackEnabled: boolean;
-	ForceFeedbackScale: number;
-	ClickEventKeys: Key[];
-	DefaultMouseCursor: EMouseCursor;
-	CurrentMouseCursor: EMouseCursor;
-	DefaultClickTraceChannel: ECollisionChannel;
-	CurrentClickTraceChannel: ECollisionChannel;
-	HitResultTraceDistance: number;
-	SeamlessTravelCount: any;
-	LastCompletedSeamlessTravelCount: any;
-	InactiveStateInputComponent: InputComponent;
-	bShouldPerformFullTickWhenPaused: boolean;
-	CurrentTouchInterface: TouchInterface;
-	SpectatorPawn: SpectatorPawn;
-	bIsLocalPlayerController: boolean;
-	SpawnLocation: Vector;
-	static GetDefaultObject(): PlayerController;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayerController;
-	WasInputKeyJustReleased(Key: Key): boolean;
-	WasInputKeyJustPressed(Key: Key): boolean;
-	ToggleSpeaking(bInSpeaking: boolean): void;
-	SwitchLevel(URL: string): void;
-	StopHapticEffect(Hand: EControllerHand): void;
-	StartFire(FireModeNum: number): void;
-	SetVirtualJoystickVisibility(bVisible: boolean): void;
-	SetViewTargetWithBlend(NewViewTarget: Actor,BlendTime: number,BlendFunc: EViewTargetBlendFunction,BlendExp: number,bLockOutgoing: boolean): void;
-	SetName(S: string): void;
-	SetMouseLocation(X: number,Y: number): void;
-	SetMouseCursorWidget(Cursor: EMouseCursor,CursorWidget: UserWidget): void;
-	SetHapticsByValue(Frequency: number,Amplitude: number,Hand: EControllerHand): void;
-	SetDisableHaptics(bNewDisabled: boolean): void;
-	SetControllerLightColor(Color: Color): void;
-	SetCinematicMode(bInCinematicMode: boolean,bHidePlayer: boolean,bAffectsHUD: boolean,bAffectsMovement: boolean,bAffectsTurning: boolean): void;
-	SetAudioListenerOverride(AttachToComponent: SceneComponent,Location: Vector,Rotation: Rotator): void;
-	SetAudioListenerAttenuationOverride(AttachToComponent: SceneComponent,AttenuationLocationOVerride: Vector): void;
-	ServerViewSelf(TransitionParams: ViewTargetTransitionParams): void;
-	ServerViewPrevPlayer(): void;
-	ServerViewNextPlayer(): void;
-	ServerVerifyViewTarget(): void;
-	ServerUpdateMultipleLevelsVisibility(LevelVisibilities: UpdateLevelVisibilityLevelInfo[]): void;
-	ServerUpdateLevelVisibility(PackageName: string,bIsVisible: boolean): void;
-	ServerUpdateCamera(CamLoc: Vector_NetQuantize,CamPitchAndYaw: number): void;
-	ServerUnmutePlayer(PlayerId: UniqueNetIdRepl): void;
-	ServerToggleAILogging(): void;
-	ServerShortTimeout(): void;
-	ServerSetSpectatorWaiting(bWaiting: boolean): void;
-	ServerSetSpectatorLocation(NewLoc: Vector,NewRot: Rotator): void;
-	ServerRestartPlayer(): void;
-	ServerPause(): void;
-	ServerNotifyLoadedWorld(WorldPackageName: string): void;
-	ServerMutePlayer(PlayerId: UniqueNetIdRepl): void;
-	ServerCheckClientPossessionReliable(): void;
-	ServerCheckClientPossession(): void;
-	ServerChangeName(S: string): void;
-	ServerCamera(NewMode: string): void;
-	ServerAcknowledgePossession(P: Pawn): void;
-	SendToConsole(Command: string): void;
-	RestartLevel(): void;
-	ProjectWorldLocationToScreen(WorldLocation: Vector,ScreenLocation?: Vector2D,bPlayerViewportRelative?: boolean): {ScreenLocation: Vector2D, $: boolean};
-	PlayHapticEffect(HapticEffect: HapticFeedbackEffect_Base,Hand: EControllerHand,Scale: number,bLoop: boolean): void;
-	PlayDynamicForceFeedback(Intensity: number,Duration: number,bAffectsLeftLarge: boolean,bAffectsLeftSmall: boolean,bAffectsRightLarge: boolean,bAffectsRightSmall: boolean,Action: EDynamicForceFeedbackAction,LatentInfo: LatentActionInfo): void;
-	Pause(): void;
-	OnServerStartedVisualLogger(bIsLogging: boolean): void;
-	LocalTravel(URL: string): void;
-	IsInputKeyDown(Key: Key): boolean;
-	GetViewportSize(SizeX?: number,SizeY?: number): {SizeX: number, SizeY: number};
-	GetSpectatorPawn(): SpectatorPawn;
-	GetMousePosition(LocationX?: number,LocationY?: number): {LocationX: number, LocationY: number, $: boolean};
-	GetInputVectorKeyState(Key: Key): Vector;
-	GetInputTouchState(FingerIndex: ETouchIndex,LocationX?: number,LocationY?: number,bIsCurrentlyPressed?: boolean): {LocationX: number, LocationY: number, bIsCurrentlyPressed: boolean};
-	GetInputMouseDelta(DeltaX?: number,DeltaY?: number): {DeltaX: number, DeltaY: number};
-	GetInputMotionState(Tilt?: Vector,RotationRate?: Vector,Gravity?: Vector,Acceleration?: Vector): {Tilt: Vector, RotationRate: Vector, Gravity: Vector, Acceleration: Vector};
-	GetInputKeyTimeDown(Key: Key): number;
-	GetInputAnalogStickState(WhichStick: EControllerAnalogStick,StickX?: number,StickY?: number): {StickX: number, StickY: number};
-	GetInputAnalogKeyState(Key: Key): number;
-	GetHUD(): HUD;
-	GetHitResultUnderFingerForObjects(FingerIndex: ETouchIndex,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,HitResult?: HitResult): {HitResult: HitResult, $: boolean};
-	GetHitResultUnderFingerByChannel(FingerIndex: ETouchIndex,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,HitResult?: HitResult): {HitResult: HitResult, $: boolean};
-	GetHitResultUnderFinger(FingerIndex: ETouchIndex,TraceChannel: ECollisionChannel,bTraceComplex: boolean,HitResult?: HitResult): {HitResult: HitResult, $: boolean};
-	GetHitResultUnderCursorForObjects(ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,HitResult?: HitResult): {HitResult: HitResult, $: boolean};
-	GetHitResultUnderCursorByChannel(TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,HitResult?: HitResult): {HitResult: HitResult, $: boolean};
-	GetHitResultUnderCursor(TraceChannel: ECollisionChannel,bTraceComplex: boolean,HitResult?: HitResult): {HitResult: HitResult, $: boolean};
-	GetFocalLocation(): Vector;
-	FOV(NewFOV: number): void;
-	EnableCheats(): void;
-	DeprojectScreenPositionToWorld(ScreenX: number,ScreenY: number,WorldLocation?: Vector,WorldDirection?: Vector): {WorldLocation: Vector, WorldDirection: Vector, $: boolean};
-	DeprojectMousePositionToWorld(WorldLocation?: Vector,WorldDirection?: Vector): {WorldLocation: Vector, WorldDirection: Vector, $: boolean};
-	ConsoleKey(Key: Key): void;
-	ClientWasKicked(KickReason: string): void;
-	ClientVoiceHandshakeComplete(): void;
-	ClientUpdateMultipleLevelsStreamingStatus(LevelStatuses: UpdateLevelStreamingLevelStatus[]): void;
-	ClientUpdateLevelStreamingStatus(PackageName: string,bNewShouldBeLoaded: boolean,bNewShouldBeVisible: boolean,bNewShouldBlockOnLoad: boolean,LODIndex: number): void;
-	ClientUnmutePlayer(PlayerId: UniqueNetIdRepl): void;
-	ClientTravelInternal(URL: string,TravelType: ETravelType,bSeamless: boolean,MapPackageGuid: Guid): void;
-	ClientTravel(URL: string,TravelType: ETravelType,bSeamless: boolean,MapPackageGuid: Guid): void;
-	ClientTeamMessage(SenderPlayerState: PlayerState,S: string,Type: string,MsgLifeTime: number): void;
-	ClientStopForceFeedback(ForceFeedbackEffect: ForceFeedbackEffect,Tag: string): void;
-	ClientStopCameraShake(Shake: UnrealEngineClass,bImmediately: boolean): void;
-	ClientStopCameraAnim(AnimToStop: CameraAnim): void;
-	ClientStartOnlineSession(): void;
-	ClientSpawnCameraLensEffect(LensEffectEmitterClass: UnrealEngineClass): void;
-	ClientSetViewTarget(A: Actor,TransitionParams: ViewTargetTransitionParams): void;
-	ClientSetSpectatorWaiting(bWaiting: boolean): void;
-	ClientSetHUD(NewHUDClass: UnrealEngineClass): void;
-	ClientSetForceMipLevelsToBeResident(Material: MaterialInterface,ForceDuration: number,CinematicTextureGroups: number): void;
-	ClientSetCinematicMode(bInCinematicMode: boolean,bAffectsMovement: boolean,bAffectsTurning: boolean,bAffectsHUD: boolean): void;
-	ClientSetCameraMode(NewCamMode: string): void;
-	ClientSetCameraFade(bEnableFading: boolean,FadeColor: Color,FadeAlpha: Vector2D,FadeTime: number,bFadeAudio: boolean): void;
-	ClientSetBlockOnAsyncLoading(): void;
-	ClientReturnToMainMenuWithTextReason(ReturnReason: string): void;
-	ClientReturnToMainMenu(ReturnReason: string): void;
-	ClientRetryClientRestart(NewPawn: Pawn): void;
-	ClientRestart(NewPawn: Pawn): void;
-	ClientReset(): void;
-	ClientRepObjRef(UObject: UObject): void;
-	ClientReceiveLocalizedMessage(Message: UnrealEngineClass,Switch: number,RelatedPlayerState_1: PlayerState,RelatedPlayerState_2: PlayerState,OptionalObject: UObject): void;
-	ClientPrestreamTextures(ForcedActor: Actor,ForceDuration: number,bEnableStreaming: boolean,CinematicTextureGroups: number): void;
-	ClientPrepareMapChange(LevelName: string,bFirst: boolean,bLast: boolean): void;
-	ClientPlaySoundAtLocation(Sound: SoundBase,Location: Vector,VolumeMultiplier: number,PitchMultiplier: number): void;
-	ClientPlaySound(Sound: SoundBase,VolumeMultiplier: number,PitchMultiplier: number): void;
-	ClientPlayForceFeedback(ForceFeedbackEffect: ForceFeedbackEffect,bLooping: boolean,bIgnoreTimeDilation: boolean,Tag: string): void;
-	ClientPlayCameraShake(Shake: UnrealEngineClass,Scale: number,PlaySpace: ECameraAnimPlaySpace,UserPlaySpaceRot: Rotator): void;
-	ClientPlayCameraAnim(AnimToPlay: CameraAnim,Scale: number,Rate: number,BlendInTime: number,BlendOutTime: number,bLoop: boolean,bRandomStartTime: boolean,Space: ECameraAnimPlaySpace,CustomPlaySpace: Rotator): void;
-	ClientMutePlayer(PlayerId: UniqueNetIdRepl): void;
-	ClientMessage(S: string,Type: string,MsgLifeTime: number): void;
-	ClientIgnoreMoveInput(bIgnore: boolean): void;
-	ClientIgnoreLookInput(bIgnore: boolean): void;
-	ClientGotoState(NewState: string): void;
-	ClientGameEnded(EndGameFocus: Actor,bIsWinner: boolean): void;
-	ClientForceGarbageCollection(): void;
-	ClientFlushLevelStreaming(): void;
-	ClientEndOnlineSession(): void;
-	ClientEnableNetworkVoice(bEnable: boolean): void;
-	ClientCommitMapChange(): void;
-	ClientClearCameraLensEffects(): void;
-	ClientCapBandwidth(Cap: number): void;
-	ClientCancelPendingMapChange(): void;
-	ClientAddTextureStreamingLoc(InLoc: Vector,Duration: number,bOverrideLocation: boolean): void;
-	ClearAudioListenerOverride(): void;
-	ClearAudioListenerAttenuationOverride(): void;
-	CanRestartPlayer(): boolean;
-	Camera(NewMode: string): void;
-	AddYawInput(Val: number): void;
-	AddRollInput(Val: number): void;
-	AddPitchInput(Val: number): void;
-	ActivateTouchInterface(NewTouchInterface: TouchInterface): void;
-	static C(Other: UObject | any): PlayerController;
-	WriteLeaderboardInteger(StatName: string,StatValue: number): boolean;
-	SetEyeTrackedPlayer(): void;
-	IsLoggedIn(): boolean;
-	ShowPlatformSpecificAchievementsScreen(): void;
-	DeprojectScreenToWorld(ScreenPosition: Vector2D,WorldPosition?: Vector,WorldDirection?: Vector): {WorldPosition: Vector, WorldDirection: Vector, $: boolean};
-	GetPlayerControllerID(): number;
-	ProjectWorldToScreen(WorldPosition: Vector,ScreenPosition?: Vector2D,bPlayerViewportRelative?: boolean): {ScreenPosition: Vector2D, $: boolean};
-	RemovePlayer(bDestroyPawn: boolean): void;
-	SetPlayerControllerID(ControllerId: number): void;
-	GetMousePositionScaledByDPI(LocationX?: number,LocationY?: number): {LocationX: number, LocationY: number, $: boolean};
-	GetPlayerScreenWidgetGeometry(): Geometry;
-	ProjectWorldLocationToWidgetPosition(WorldLocation: Vector,ScreenPosition?: Vector2D): {ScreenPosition: Vector2D, $: boolean};
-	SetInputMode_GameAndUI(InWidgetToFocus: Widget,bLockMouseToViewport: boolean,bHideCursorDuringCapture: boolean): void;
-	SetInputMode_GameAndUIEx(InWidgetToFocus: Widget,InMouseLockMode: EMouseLockMode,bHideCursorDuringCapture: boolean): void;
-	SetInputMode_GameOnly(): void;
-	SetInputMode_UIOnly(InWidgetToFocus: Widget,bLockMouseToViewport: boolean): void;
-	SetInputMode_UIOnlyEx(InWidgetToFocus: Widget,InMouseLockMode: EMouseLockMode): void;
-	static WriteLeaderboardInteger(PlayerController: PlayerController,StatName: string,StatValue: number): boolean;
-	static SetEyeTrackedPlayer(PlayerController: PlayerController): void;
-	static IsLoggedIn(SpecificPlayer: PlayerController): boolean;
-	static ShowPlatformSpecificAchievementsScreen(SpecificPlayer: PlayerController): void;
-	static DeprojectScreenToWorld(Player: PlayerController,ScreenPosition: Vector2D,WorldPosition?: Vector,WorldDirection?: Vector): {WorldPosition: Vector, WorldDirection: Vector, $: boolean};
-	static GetPlayerControllerID(Player: PlayerController): number;
-	static ProjectWorldToScreen(Player: PlayerController,WorldPosition: Vector,ScreenPosition?: Vector2D,bPlayerViewportRelative?: boolean): {ScreenPosition: Vector2D, $: boolean};
-	static RemovePlayer(Player: PlayerController,bDestroyPawn: boolean): void;
-	static SetPlayerControllerID(Player: PlayerController,ControllerId: number): void;
-	static GetMousePositionScaledByDPI(Player: PlayerController,LocationX?: number,LocationY?: number): {LocationX: number, LocationY: number, $: boolean};
-	static GetPlayerScreenWidgetGeometry(PlayerController: PlayerController): Geometry;
-	static ProjectWorldLocationToWidgetPosition(PlayerController: PlayerController,WorldLocation: Vector,ScreenPosition?: Vector2D): {ScreenPosition: Vector2D, $: boolean};
-	static SetInputMode_GameAndUI(Target: PlayerController,InWidgetToFocus: Widget,bLockMouseToViewport: boolean,bHideCursorDuringCapture: boolean): void;
-	static SetInputMode_GameAndUIEx(PlayerController: PlayerController,InWidgetToFocus: Widget,InMouseLockMode: EMouseLockMode,bHideCursorDuringCapture: boolean): void;
-	static SetInputMode_GameOnly(PlayerController: PlayerController): void;
-	static SetInputMode_UIOnly(Target: PlayerController,InWidgetToFocus: Widget,bLockMouseToViewport: boolean): void;
-	static SetInputMode_UIOnlyEx(PlayerController: PlayerController,InWidgetToFocus: Widget,InMouseLockMode: EMouseLockMode): void;
-}
-
-declare type ENavPathEvent = 'Cleared' | 'NewPath' | 'UpdatedDueToGoalMoved' | 'UpdatedDueToNavigationChanged' | 'Invalidated' | 'RePathFailed' | 'MetaPathUpdate' | 'Custom' | 'ENavPathEvent_MAX';
-declare var ENavPathEvent : { Cleared:'Cleared',NewPath:'NewPath',UpdatedDueToGoalMoved:'UpdatedDueToGoalMoved',UpdatedDueToNavigationChanged:'UpdatedDueToNavigationChanged',Invalidated:'Invalidated',RePathFailed:'RePathFailed',MetaPathUpdate:'MetaPathUpdate',Custom:'Custom',ENavPathEvent_MAX:'ENavPathEvent_MAX', };
-declare type ENavigationOptionFlag = 'Default' | 'Enable' | 'Disable' | 'MAX';
-declare var ENavigationOptionFlag : { Default:'Default',Enable:'Enable',Disable:'Disable',MAX:'MAX', };
-declare class NavigationPath extends UObject { 
-	PathUpdatedNotifier: UnrealEngineMulticastDelegate<(AffectedPath: NavigationPath, PathEvent: ENavPathEvent) => void>;
-	PathPoints: Vector[];
-	RecalculateOnInvalidation: ENavigationOptionFlag;
-	static Load(ResourceName: string): NavigationPath;
-	static Find(Outer: UObject, ResourceName: string): NavigationPath;
-	static GetDefaultObject(): NavigationPath;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationPath;
-	IsValid(): boolean;
-	IsStringPulled(): boolean;
-	IsPartial(): boolean;
-	GetPathLength(): number;
-	GetPathCost(): number;
-	GetDebugString(): string;
-	EnableRecalculationOnInvalidation(DoRecalculation: ENavigationOptionFlag): void;
-	EnableDebugDrawing(bShouldDrawDebugData: boolean,PathColor: LinearColor): void;
-	static C(Other: UObject | any): NavigationPath;
-}
-
-declare class Controller extends Actor { 
-	PlayerState: PlayerState;
-	OnInstigatedAnyDamage: UnrealEngineMulticastDelegate<(Damage: number, DamageType: DamageType, DamagedActor: Actor, DamageCauser: Actor) => void>;
-	StateName: string;
-	Pawn: Pawn;
-	Character: Character;
-	TransformComponent: SceneComponent;
-	ControlRotation: Rotator;
-	bAttachToPawn: boolean;
-	bIsPlayerController: boolean;
-	static GetDefaultObject(): Controller;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Controller;
-	UnPossess(): void;
-	StopMovement(): void;
-	SetInitialLocationAndRotation(NewLocation: Vector,NewRotation: Rotator): void;
-	SetIgnoreMoveInput(bNewMoveInput: boolean): void;
-	SetIgnoreLookInput(bNewLookInput: boolean): void;
-	SetControlRotation(NewRotation: Rotator): void;
-	ResetIgnoreMoveInput(): void;
-	ResetIgnoreLookInput(): void;
-	ResetIgnoreInputFlags(): void;
-	ReceiveInstigatedAnyDamage(Damage: number,DamageType: DamageType,DamagedActor: Actor,DamageCauser: Actor): void;
-	Possess(InPawn: Pawn): void;
-	OnRep_PlayerState(): void;
-	OnRep_Pawn(): void;
-	LineOfSightTo(Other: Actor,ViewPoint: Vector,bAlternateChecks: boolean): boolean;
-	K2_GetPawn(): Pawn;
-	IsPlayerController(): boolean;
-	IsMoveInputIgnored(): boolean;
-	IsLookInputIgnored(): boolean;
-	IsLocalPlayerController(): boolean;
-	IsLocalController(): boolean;
-	GetViewTarget(): Actor;
-	GetDesiredRotation(): Rotator;
-	GetControlRotation(): Rotator;
-	ClientSetRotation(NewRotation: Rotator,bResetCamera: boolean): void;
-	ClientSetLocation(NewLocation: Vector,NewRotation: Rotator): void;
-	CastToPlayerController(): PlayerController;
-	static C(Other: UObject | any): Controller;
-	GetCurrentPath(): NavigationPath;
-	SimpleMoveToActor(Goal: Actor): void;
-	SimpleMoveToLocation(Goal: Vector): void;
-	static GetCurrentPath(Controller: Controller): NavigationPath;
-	static SimpleMoveToActor(Controller: Controller,Goal: Actor): void;
-	static SimpleMoveToLocation(Controller: Controller,Goal: Vector): void;
-}
-
-declare class Pawn extends Actor { 
-	bUseControllerRotationPitch: boolean;
-	bUseControllerRotationYaw: boolean;
-	bUseControllerRotationRoll: boolean;
-	bCanAffectNavigationGeneration: boolean;
-	BaseEyeHeight: number;
-	AutoPossessPlayer: EAutoReceiveInput;
-	AutoPossessAI: EAutoPossessAI;
-	RemoteViewPitch: number;
-	AIControllerClass: UnrealEngineClass;
-	PlayerState: PlayerState;
-	LastHitBy: Controller;
-	Controller: Controller;
-	ControlInputVector: Vector;
-	LastControlInputVector: Vector;
-	static GetDefaultObject(): Pawn;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Pawn;
-	SpawnDefaultController(): void;
-	SetCanAffectNavigationGeneration(bNewValue: boolean,bForceUpdate: boolean): void;
-	ReceiveUnpossessed(OldController: Controller): void;
-	ReceivePossessed(NewController: Controller): void;
-	PawnMakeNoise(Loudness: number,NoiseLocation: Vector,bUseNoiseMakerLocation: boolean,NoiseMaker: Actor): void;
-	OnRep_PlayerState(): void;
-	OnRep_Controller(): void;
-	LaunchPawn(LaunchVelocity: Vector,bXYOverride: boolean,bZOverride: boolean): void;
-	K2_GetMovementInputVector(): Vector;
-	IsPlayerControlled(): boolean;
-	IsMoveInputIgnored(): boolean;
-	IsLocallyControlled(): boolean;
-	IsControlled(): boolean;
-	GetPendingMovementInputVector(): Vector;
-	GetNavAgentLocation(): Vector;
-	GetMovementComponent(): PawnMovementComponent;
-	static GetMovementBaseActor(Pawn: Pawn): Actor;
-	GetLastMovementInputVector(): Vector;
-	GetControlRotation(): Rotator;
-	GetController(): Controller;
-	GetBaseAimRotation(): Rotator;
-	DetachFromControllerPendingDestroy(): void;
-	ConsumeMovementInputVector(): Vector;
-	AddMovementInput(WorldDirection: Vector,ScaleValue: number,bForce: boolean): void;
-	AddControllerYawInput(Val: number): void;
-	AddControllerRollInput(Val: number): void;
-	AddControllerPitchInput(Val: number): void;
-	static C(Other: UObject | any): Pawn;
-	SendAIMessage(Message: string,MessageSource: UObject,bSuccess: boolean): void;
-	static SendAIMessage(Target: Pawn,Message: string,MessageSource: UObject,bSuccess: boolean): void;
-}
-
-declare type ERadialImpulseFalloff = 'RIF_Constant' | 'RIF_Linear' | 'RIF_MAX';
-declare var ERadialImpulseFalloff : { RIF_Constant:'RIF_Constant',RIF_Linear:'RIF_Linear',RIF_MAX:'RIF_MAX', };
-declare class PrimitiveComponent extends SceneComponent { 
-	MinDrawDistance: number;
-	LDMaxDrawDistance: number;
-	CachedMaxDrawDistance: number;
-	DepthPriorityGroup: ESceneDepthPriorityGroup;
-	ViewOwnerDepthPriorityGroup: ESceneDepthPriorityGroup;
-	IndirectLightingCacheQuality: EIndirectLightingCacheQuality;
-	LightmapType: ELightmapType;
-	bEnableAutoLODGeneration: boolean;
-	bUseMaxLODAsImposter: boolean;
-	ExcludeForSpecificHLODLevels: number[];
-	bNeverDistanceCull: boolean;
-	bAlwaysCreatePhysicsState: boolean;
-	bGenerateOverlapEvents: boolean;
-	bMultiBodyOverlap: boolean;
-	bCheckAsyncSceneOnMove: boolean;
-	bTraceComplexOnMove: boolean;
-	bReturnMaterialOnMove: boolean;
-	bUseViewOwnerDepthPriorityGroup: boolean;
-	bAllowCullDistanceVolume: boolean;
-	bHasMotionBlurVelocityMeshes: boolean;
-	bVisibleInReflectionCaptures: boolean;
-	bRenderInMainPass: boolean;
-	bRenderInMono: boolean;
-	bReceivesDecals: boolean;
-	bOwnerNoSee: boolean;
-	bOnlyOwnerSee: boolean;
-	bTreatAsBackgroundForOcclusion: boolean;
-	bUseAsOccluder: boolean;
-	bSelectable: boolean;
-	bForceMipStreaming: boolean;
-	bHasPerInstanceHitProxies: boolean;
-	CastShadow: boolean;
-	bAffectDynamicIndirectLighting: boolean;
-	bAffectDistanceFieldLighting: boolean;
-	bCastDynamicShadow: boolean;
-	bCastStaticShadow: boolean;
-	bCastVolumetricTranslucentShadow: boolean;
-	bSelfShadowOnly: boolean;
-	bCastFarShadow: boolean;
-	bCastInsetShadow: boolean;
-	bCastCinematicShadow: boolean;
-	bCastHiddenShadow: boolean;
-	bCastShadowAsTwoSided: boolean;
-	bLightAsIfStatic: boolean;
-	bLightAttachmentsAsGroup: boolean;
-	bReceiveMobileCSMShadows: boolean;
-	bSingleSampleShadowFromStationaryLights: boolean;
-	bIgnoreRadialImpulse: boolean;
-	bIgnoreRadialForce: boolean;
-	bApplyImpulseOnDamage: boolean;
-	bReplicatePhysicsToAutonomousProxy: boolean;
-	AlwaysLoadOnClient: boolean;
-	AlwaysLoadOnServer: boolean;
-	bUseEditorCompositing: boolean;
-	bRenderCustomDepth: boolean;
-	bHasCustomNavigableGeometry: EHasCustomNavigableGeometry;
-	CanBeCharacterBase: ECanBeCharacterBase;
-	CanCharacterStepUpOn: ECanBeCharacterBase;
-	LightingChannels: LightingChannels;
-	CustomDepthStencilWriteMask: ERendererStencilMask;
-	CustomDepthStencilValue: number;
-	TranslucencySortPriority: number;
-	VisibilityId: number;
-	LpvBiasMultiplier: number;
-	BoundsScale: number;
-	LastSubmitTime: number;
-	LastRenderTime: number;
-	LastRenderTimeOnScreen: number;
-	MoveIgnoreActors: Actor[];
-	MoveIgnoreComponents: PrimitiveComponent[];
-	BodyInstance: BodyInstance;
-	OnComponentHit: UnrealEngineMulticastDelegate<(HitComponent: PrimitiveComponent, OtherActor: Actor, OtherComp: PrimitiveComponent, NormalImpulse: Vector, Hit: HitResult) => void>;
-	OnComponentBeginOverlap: UnrealEngineMulticastDelegate<(OverlappedComponent: PrimitiveComponent, OtherActor: Actor, OtherComp: PrimitiveComponent, OtherBodyIndex: number, bFromSweep: boolean, SweepResult: HitResult) => void>;
-	OnComponentEndOverlap: UnrealEngineMulticastDelegate<(OverlappedComponent: PrimitiveComponent, OtherActor: Actor, OtherComp: PrimitiveComponent, OtherBodyIndex: number) => void>;
-	OnComponentWake: UnrealEngineMulticastDelegate<(WakingComponent: PrimitiveComponent, BoneName: string) => void>;
-	OnComponentSleep: UnrealEngineMulticastDelegate<(SleepingComponent: PrimitiveComponent, BoneName: string) => void>;
-	OnBeginCursorOver: UnrealEngineMulticastDelegate<(TouchedComponent: PrimitiveComponent) => void>;
-	OnEndCursorOver: UnrealEngineMulticastDelegate<(TouchedComponent: PrimitiveComponent) => void>;
-	OnClicked: UnrealEngineMulticastDelegate<(TouchedComponent: PrimitiveComponent, ButtonPressed: Key) => void>;
-	OnReleased: UnrealEngineMulticastDelegate<(TouchedComponent: PrimitiveComponent, ButtonReleased: Key) => void>;
-	OnInputTouchBegin: UnrealEngineMulticastDelegate<(FingerIndex: ETouchIndex, TouchedComponent: PrimitiveComponent) => void>;
-	OnInputTouchEnd: UnrealEngineMulticastDelegate<(FingerIndex: ETouchIndex, TouchedComponent: PrimitiveComponent) => void>;
-	OnInputTouchEnter: UnrealEngineMulticastDelegate<(FingerIndex: ETouchIndex, TouchedComponent: PrimitiveComponent) => void>;
-	OnInputTouchLeave: UnrealEngineMulticastDelegate<(FingerIndex: ETouchIndex, TouchedComponent: PrimitiveComponent) => void>;
-	LODParentPrimitive: PrimitiveComponent;
-	PostPhysicsComponentTick: PrimitiveComponentPostPhysicsTickFunction;
-	static Load(ResourceName: string): PrimitiveComponent;
-	static Find(Outer: UObject, ResourceName: string): PrimitiveComponent;
-	static GetDefaultObject(): PrimitiveComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PrimitiveComponent;
-	WakeRigidBody(BoneName: string): void;
-	WakeAllRigidBodies(): void;
-	SetWalkableSlopeOverride(NewOverride: WalkableSlopeOverride): void;
-	SetUseCCD(InUseCCD: boolean,BoneName: string): void;
-	SetTranslucentSortPriority(NewTranslucentSortPriority: number): void;
-	SetSingleSampleShadowFromStationaryLights(bNewSingleSampleShadowFromStationaryLights: boolean): void;
-	SetSimulatePhysics(bSimulate: boolean): void;
-	SetRenderInMono(bValue: boolean): void;
-	SetRenderInMainPass(bValue: boolean): void;
-	SetRenderCustomDepth(bValue: boolean): void;
-	SetReceivesDecals(bNewReceivesDecals: boolean): void;
-	SetPhysMaterialOverride(NewPhysMaterial: PhysicalMaterial): void;
-	SetPhysicsMaxAngularVelocityInRadians(NewMaxAngVel: number,bAddToCurrent: boolean,BoneName: string): void;
-	SetPhysicsMaxAngularVelocityInDegrees(NewMaxAngVel: number,bAddToCurrent: boolean,BoneName: string): void;
-	SetPhysicsMaxAngularVelocity(NewMaxAngVel: number,bAddToCurrent: boolean,BoneName: string): void;
-	SetPhysicsLinearVelocity(NewVel: Vector,bAddToCurrent: boolean,BoneName: string): void;
-	SetPhysicsAngularVelocityInRadians(NewAngVel: Vector,bAddToCurrent: boolean,BoneName: string): void;
-	SetPhysicsAngularVelocityInDegrees(NewAngVel: Vector,bAddToCurrent: boolean,BoneName: string): void;
-	SetPhysicsAngularVelocity(NewAngVel: Vector,bAddToCurrent: boolean,BoneName: string): void;
-	SetOwnerNoSee(bNewOwnerNoSee: boolean): void;
-	SetOnlyOwnerSee(bNewOnlyOwnerSee: boolean): void;
-	SetNotifyRigidBodyCollision(bNewNotifyRigidBodyCollision: boolean): void;
-	SetMaterialByName(MaterialSlotName: string,Material: MaterialInterface): void;
-	SetMaterial(ElementIndex: number,Material: MaterialInterface): void;
-	SetMassScale(BoneName: string,InMassScale: number): void;
-	SetMassOverrideInKg(BoneName: string,MassInKg: number,bOverrideMass: boolean): void;
-	SetLockedAxis(LockedAxis: EDOFMode): void;
-	SetLinearDamping(InDamping: number): void;
-	SetGenerateOverlapEvents(bInGenerateOverlapEvents: boolean): void;
-	SetEnableGravity(bGravityEnabled: boolean): void;
-	SetCustomDepthStencilWriteMask(WriteMaskBit: ERendererStencilMask): void;
-	SetCustomDepthStencilValue(Value: number): void;
-	SetCullDistance(NewCullDistance: number): void;
-	SetConstraintMode(ConstraintMode: EDOFMode): void;
-	SetCollisionResponseToChannel(Channel: ECollisionChannel,NewResponse: ECollisionResponse): void;
-	SetCollisionResponseToAllChannels(NewResponse: ECollisionResponse): void;
-	SetCollisionProfileName(InCollisionProfileName: string): void;
-	SetCollisionObjectType(Channel: ECollisionChannel): void;
-	SetCollisionEnabled(NewType: ECollisionEnabled): void;
-	SetCenterOfMass(CenterOfMassOffset: Vector,BoneName: string): void;
-	SetCastShadow(NewCastShadow: boolean): void;
-	SetBoundsScale(NewBoundsScale: number): void;
-	SetAngularDamping(InDamping: number): void;
-	SetAllUseCCD(InUseCCD: boolean): void;
-	SetAllPhysicsLinearVelocity(NewVel: Vector,bAddToCurrent: boolean): void;
-	SetAllPhysicsAngularVelocityInRadians(NewAngVel: Vector,bAddToCurrent: boolean): void;
-	SetAllPhysicsAngularVelocityInDegrees(NewAngVel: Vector,bAddToCurrent: boolean): void;
-	SetAllPhysicsAngularVelocity(NewAngVel: Vector,bAddToCurrent: boolean): void;
-	SetAllMassScale(InMassScale: number): void;
-	ScaleByMomentOfInertia(InputVector: Vector,BoneName: string): Vector;
-	PutRigidBodyToSleep(BoneName: string): void;
-	K2_SphereTraceComponent(TraceStart: Vector,TraceEnd: Vector,SphereRadius: number,bTraceComplex: boolean,bShowTrace: boolean,bPersistentShowTrace: boolean,HitLocation?: Vector,HitNormal?: Vector,BoneName?: string,OutHit?: HitResult): {HitLocation: Vector, HitNormal: Vector, BoneName: string, OutHit: HitResult, $: boolean};
-	K2_SphereOverlapComponent(InSphereCentre: Vector,InSphereRadius: number,bTraceComplex: boolean,bShowTrace: boolean,bPersistentShowTrace: boolean,HitLocation?: Vector,HitNormal?: Vector,BoneName?: string,OutHit?: HitResult): {HitLocation: Vector, HitNormal: Vector, BoneName: string, OutHit: HitResult, $: boolean};
-	K2_LineTraceComponent(TraceStart: Vector,TraceEnd: Vector,bTraceComplex: boolean,bShowTrace: boolean,bPersistentShowTrace: boolean,HitLocation?: Vector,HitNormal?: Vector,BoneName?: string,OutHit?: HitResult): {HitLocation: Vector, HitNormal: Vector, BoneName: string, OutHit: HitResult, $: boolean};
-	K2_IsQueryCollisionEnabled(): boolean;
-	K2_IsPhysicsCollisionEnabled(): boolean;
-	K2_IsCollisionEnabled(): boolean;
-	K2_BoxOverlapComponent(InBoxCentre: Vector,InBox: Box,bTraceComplex: boolean,bShowTrace: boolean,bPersistentShowTrace: boolean,HitLocation?: Vector,HitNormal?: Vector,BoneName?: string,OutHit?: HitResult): {HitLocation: Vector, HitNormal: Vector, BoneName: string, OutHit: HitResult, $: boolean};
-	IsOverlappingComponent(OtherComp: PrimitiveComponent): boolean;
-	IsOverlappingActor(Other: Actor): boolean;
-	IsGravityEnabled(): boolean;
-	IsAnyRigidBodyAwake(): boolean;
-	IgnoreComponentWhenMoving(Component: PrimitiveComponent,bShouldIgnore: boolean): void;
-	IgnoreActorWhenMoving(Actor: Actor,bShouldIgnore: boolean): void;
-	GetWalkableSlopeOverride(): WalkableSlopeOverride;
-	GetPhysicsLinearVelocityAtPoint(Point: Vector,BoneName: string): Vector;
-	GetPhysicsLinearVelocity(BoneName: string): Vector;
-	GetPhysicsAngularVelocityInRadians(BoneName: string): Vector;
-	GetPhysicsAngularVelocityInDegrees(BoneName: string): Vector;
-	GetPhysicsAngularVelocity(BoneName: string): Vector;
-	GetOverlappingComponents(OutOverlappingComponents?: PrimitiveComponent[]): {OutOverlappingComponents: PrimitiveComponent[]};
-	GetOverlappingActors(OverlappingActors?: Actor[],ClassFilter?: UnrealEngineClass): {OverlappingActors: Actor[]};
-	GetNumMaterials(): number;
-	GetMaterialFromCollisionFaceIndex(FaceIndex: number,SectionIndex?: number): {SectionIndex: number, $: MaterialInterface};
-	GetMaterial(ElementIndex: number): MaterialInterface;
-	GetMassScale(BoneName: string): number;
-	GetMass(): number;
-	GetLinearDamping(): number;
-	GetInertiaTensor(BoneName: string): Vector;
-	GetGenerateOverlapEvents(): boolean;
-	GetCollisionResponseToChannel(Channel: ECollisionChannel): ECollisionResponse;
-	GetCollisionProfileName(): string;
-	GetCollisionObjectType(): ECollisionChannel;
-	GetCollisionEnabled(): ECollisionEnabled;
-	GetClosestPointOnCollision(Point: Vector,OutPointOnBody?: Vector,BoneName?: string): {OutPointOnBody: Vector, $: number};
-	GetCenterOfMass(BoneName: string): Vector;
-	GetAngularDamping(): number;
-	CreateDynamicMaterialInstance(ElementIndex: number,SourceMaterial: MaterialInterface,OptionalName: string): MaterialInstanceDynamic;
-	CreateAndSetMaterialInstanceDynamicFromMaterial(ElementIndex: number,Parent: MaterialInterface): MaterialInstanceDynamic;
-	CreateAndSetMaterialInstanceDynamic(ElementIndex: number): MaterialInstanceDynamic;
-	CopyArrayOfMoveIgnoreComponents(): PrimitiveComponent[];
-	CopyArrayOfMoveIgnoreActors(): Actor[];
-	ClearMoveIgnoreComponents(): void;
-	ClearMoveIgnoreActors(): void;
-	CanCharacterStepUp(Pawn: Pawn): boolean;
-	AddTorqueInRadians(Torque: Vector,BoneName: string,bAccelChange: boolean): void;
-	AddTorqueInDegrees(Torque: Vector,BoneName: string,bAccelChange: boolean): void;
-	AddTorque(Torque: Vector,BoneName: string,bAccelChange: boolean): void;
-	AddRadialImpulse(Origin: Vector,Radius: number,Strength: number,Falloff: ERadialImpulseFalloff,bVelChange: boolean): void;
-	AddRadialForce(Origin: Vector,Radius: number,Strength: number,Falloff: ERadialImpulseFalloff,bAccelChange: boolean): void;
-	AddImpulseAtLocation(Impulse: Vector,Location: Vector,BoneName: string): void;
-	AddImpulse(Impulse: Vector,BoneName: string,bVelChange: boolean): void;
-	AddForceAtLocationLocal(Force: Vector,Location: Vector,BoneName: string): void;
-	AddForceAtLocation(Force: Vector,Location: Vector,BoneName: string): void;
-	AddForce(Force: Vector,BoneName: string,bAccelChange: boolean): void;
-	AddAngularImpulseInRadians(Impulse: Vector,BoneName: string,bVelChange: boolean): void;
-	AddAngularImpulseInDegrees(Impulse: Vector,BoneName: string,bVelChange: boolean): void;
-	AddAngularImpulse(Impulse: Vector,BoneName: string,bVelChange: boolean): void;
-	static C(Other: UObject | any): PrimitiveComponent;
-	ComponentOverlapActors(ComponentTransform: Transform,ObjectTypes: EObjectTypeQuery[],ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
-	ComponentOverlapComponents(ComponentTransform: Transform,ObjectTypes: EObjectTypeQuery[],ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
-	static ComponentOverlapActors(Component: PrimitiveComponent,ComponentTransform: Transform,ObjectTypes: EObjectTypeQuery[],ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
-	static ComponentOverlapComponents(Component: PrimitiveComponent,ComponentTransform: Transform,ObjectTypes: EObjectTypeQuery[],ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
-}
-
-declare class BrushComponent extends PrimitiveComponent { 
-	Brush: Model;
-	BrushBodySetup: BodySetup;
-	PrePivot: Vector;
-	static Load(ResourceName: string): BrushComponent;
-	static Find(Outer: UObject, ResourceName: string): BrushComponent;
-	static GetDefaultObject(): BrushComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BrushComponent;
-	static C(Other: UObject | any): BrushComponent;
-}
-
-declare class BuilderPoly { 
-	VertexIndices: number[];
-	Direction: number;
-	ItemName: string;
-	PolyFlags: number;
-	clone() : BuilderPoly;
-	static C(Other: UObject | any): BuilderPoly;
-}
-
-declare class BrushBuilder extends UObject { 
-	BitmapFilename: string;
-	Tooltip: string;
-	NotifyBadParams: boolean;
-	Vertices: Vector[];
-	Polys: BuilderPoly[];
-	Layer: string;
-	MergeCoplanars: boolean;
-	static Load(ResourceName: string): BrushBuilder;
-	static Find(Outer: UObject, ResourceName: string): BrushBuilder;
-	static GetDefaultObject(): BrushBuilder;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BrushBuilder;
-	static C(Other: UObject | any): BrushBuilder;
-	Build(InWorld: World,InBrush: Brush): boolean;
-	static Build(Builder: BrushBuilder,InWorld: World,InBrush: Brush): boolean;
-}
-
-declare class GeomSelection { 
-	Type: number;
-	index: number;
-	SelectionIndex: number;
-	clone() : GeomSelection;
-	static C(Other: UObject | any): GeomSelection;
-}
-
-declare class Brush extends Actor { 
-	BrushType: EBrushType;
-	BrushColor: Color;
-	PolyFlags: number;
-	bColored: boolean;
-	bSolidWhenSelected: boolean;
-	bPlaceableFromClassBrowser: boolean;
-	bNotForClientOrServer: boolean;
-	Brush: Model;
-	BrushComponent: BrushComponent;
-	BrushBuilder: BrushBuilder;
-	bInManipulation: boolean;
-	SavedSelections: GeomSelection[];
-	static GetDefaultObject(): Brush;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Brush;
-	static C(Other: UObject | any): Brush;
-	csgAdd(PolyFlags: number,BrushType: EBrushType): Brush;
-	GetSurfaces(Surfaces?: number[]): {Surfaces: number[]};
-	static csgAdd(DefaultBrush: Brush,PolyFlags: number,BrushType: EBrushType): Brush;
-	static GetSurfaces(Brush: Brush,Surfaces?: number[]): {Surfaces: number[]};
-}
-
-declare class Volume extends Brush { 
-	static GetDefaultObject(): Volume;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Volume;
-	static C(Other: UObject | any): Volume;
-	CreateBrushForVolumeActor(BrushBuilder: BrushBuilder): void;
-	static CreateBrushForVolumeActor(NewActor: Volume,BrushBuilder: BrushBuilder): void;
-}
-
-declare class PhysicsVolume extends Volume { 
-	TerminalVelocity: number;
-	Priority: number;
-	FluidFriction: number;
-	bWaterVolume: boolean;
-	bPhysicsOnContact: boolean;
-	static GetDefaultObject(): PhysicsVolume;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsVolume;
-	static C(Other: UObject | any): PhysicsVolume;
-}
-
-declare type EDetachmentRule = 'KeepRelative' | 'KeepWorld' | 'EDetachmentRule_MAX';
-declare var EDetachmentRule : { KeepRelative:'KeepRelative',KeepWorld:'KeepWorld',EDetachmentRule_MAX:'EDetachmentRule_MAX', };
-declare type EMoveComponentAction = 'Move' | 'Stop' | 'Return' | 'EMoveComponentAction_MAX';
-declare var EMoveComponentAction : { Move:'Move',Stop:'Stop',Return:'Return',EMoveComponentAction_MAX:'EMoveComponentAction_MAX', };
-declare class SceneComponent extends ActorComponent { 
-	PhysicsVolume: any;
-	AttachParent: SceneComponent;
-	AttachSocketName: string;
-	AttachChildren: SceneComponent[];
-	ClientAttachedChildren: SceneComponent[];
-	RelativeLocation: Vector;
-	RelativeRotation: Rotator;
-	RelativeScale3D: Vector;
-	ComponentVelocity: Vector;
-	bComponentToWorldUpdated: boolean;
-	bAbsoluteLocation: boolean;
-	bAbsoluteRotation: boolean;
-	bAbsoluteScale: boolean;
-	bVisible: boolean;
-	bHiddenInGame: boolean;
-	bShouldUpdatePhysicsVolume: boolean;
-	bBoundsChangeTriggersStreamingDataRebuild: boolean;
-	bUseAttachParentBound: boolean;
-	bAbsoluteTranslation: boolean;
-	bVisualizeComponent: boolean;
-	Mobility: EComponentMobility;
-	DetailMode: EDetailMode;
-	PhysicsVolumeChangedDelegate: UnrealEngineMulticastDelegate<(NewVolume: PhysicsVolume) => void>;
-	RelativeTranslation: Vector;
-	static Load(ResourceName: string): SceneComponent;
-	static Find(Outer: UObject, ResourceName: string): SceneComponent;
-	static GetDefaultObject(): SceneComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneComponent;
-	ToggleVisibility(bPropagateToChildren: boolean): void;
-	SnapTo(InParent: SceneComponent,InSocketName: string): boolean;
-	SetWorldScale3D(NewScale: Vector): void;
-	SetVisibility(bNewVisibility: boolean,bPropagateToChildren: boolean): void;
-	SetShouldUpdatePhysicsVolume(bInShouldUpdatePhysicsVolume: boolean): void;
-	SetRelativeScale3D(NewScale3D: Vector): void;
-	SetMobility(NewMobility: EComponentMobility): void;
-	SetHiddenInGame(NewHidden: boolean,bPropagateToChildren: boolean): void;
-	SetAbsolute(bNewAbsoluteLocation: boolean,bNewAbsoluteRotation: boolean,bNewAbsoluteScale: boolean): void;
-	ResetRelativeTransform(): void;
-	OnRep_Visibility(OldValue: boolean): void;
-	OnRep_Transform(): void;
-	OnRep_AttachSocketName(): void;
-	OnRep_AttachParent(): void;
-	OnRep_AttachChildren(): void;
-	K2_SetWorldTransform(NewTransform: Transform,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
-	K2_SetWorldRotation(NewRotation: Rotator,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
-	K2_SetWorldLocationAndRotation(NewLocation: Vector,NewRotation: Rotator,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
-	K2_SetWorldLocation(NewLocation: Vector,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
-	K2_SetRelativeTransform(NewTransform: Transform,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
-	K2_SetRelativeRotation(NewRotation: Rotator,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
-	K2_SetRelativeLocationAndRotation(NewLocation: Vector,NewRotation: Rotator,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
-	K2_SetRelativeLocation(NewLocation: Vector,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
-	K2_GetComponentToWorld(): Transform;
-	K2_GetComponentScale(): Vector;
-	K2_GetComponentRotation(): Rotator;
-	K2_GetComponentLocation(): Vector;
-	K2_DetachFromComponent(LocationRule: EDetachmentRule,RotationRule: EDetachmentRule,ScaleRule: EDetachmentRule,bCallModify: boolean): void;
-	K2_AttachToComponent(Parent: SceneComponent,SocketName: string,LocationRule: EAttachmentRule,RotationRule: EAttachmentRule,ScaleRule: EAttachmentRule,bWeldSimulatedBodies: boolean): boolean;
-	K2_AttachTo(InParent: SceneComponent,InSocketName: string,AttachType: EAttachLocation,bWeldSimulatedBodies: boolean): boolean;
-	K2_AddWorldTransform(DeltaTransform: Transform,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
-	K2_AddWorldRotation(DeltaRotation: Rotator,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
-	K2_AddWorldOffset(DeltaLocation: Vector,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
-	K2_AddRelativeRotation(DeltaRotation: Rotator,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
-	K2_AddRelativeLocation(DeltaLocation: Vector,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
-	K2_AddLocalTransform(DeltaTransform: Transform,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
-	K2_AddLocalRotation(DeltaRotation: Rotator,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
-	K2_AddLocalOffset(DeltaLocation: Vector,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
-	IsVisible(): boolean;
-	IsSimulatingPhysics(BoneName: string): boolean;
-	IsAnySimulatingPhysics(): boolean;
-	GetUpVector(): Vector;
-	GetSocketTransform(InSocketName: string,TransformSpace: ERelativeTransformSpace): Transform;
-	GetSocketRotation(InSocketName: string): Rotator;
-	GetSocketQuaternion(InSocketName: string): Quat;
-	GetSocketLocation(InSocketName: string): Vector;
-	GetShouldUpdatePhysicsVolume(): boolean;
-	GetRightVector(): Vector;
-	GetRelativeTransform(): Transform;
-	GetPhysicsVolume(): PhysicsVolume;
-	GetParentComponents(Parents?: SceneComponent[]): {Parents: SceneComponent[]};
-	GetNumChildrenComponents(): number;
-	GetForwardVector(): Vector;
-	GetComponentVelocity(): Vector;
-	GetChildrenComponents(bIncludeAllDescendants: boolean,Children?: SceneComponent[]): {Children: SceneComponent[]};
-	GetChildComponent(ChildIndex: number): SceneComponent;
-	GetAttachSocketName(): string;
-	GetAttachParent(): SceneComponent;
-	GetAllSocketNames(): string[];
-	DoesSocketExist(InSocketName: string): boolean;
-	DetachFromParent(bMaintainWorldPosition: boolean,bCallModify: boolean): void;
-	static C(Other: UObject | any): SceneComponent;
-	SetMobile(): void;
-	SetMobility(Type: EComponentMobility): void;
-	GetComponentBounds(Origin?: Vector,BoxExtent?: Vector,SphereRadius?: number): {Origin: Vector, BoxExtent: Vector, SphereRadius: number};
-	MoveComponentTo(TargetRelativeLocation: Vector,TargetRelativeRotation: Rotator,bEaseOut: boolean,bEaseIn: boolean,OverTime: number,bForceShortestRotationPath: boolean,MoveAction: EMoveComponentAction,LatentInfo: LatentActionInfo): void;
-	static SetMobile(SceneComponent: SceneComponent): void;
-	static SetMobility(SceneComponent: SceneComponent,Type: EComponentMobility): void;
-	static GetComponentBounds(Component: SceneComponent,Origin?: Vector,BoxExtent?: Vector,SphereRadius?: number): {Origin: Vector, BoxExtent: Vector, SphereRadius: number};
-	static MoveComponentTo(Component: SceneComponent,TargetRelativeLocation: Vector,TargetRelativeRotation: Rotator,bEaseOut: boolean,bEaseIn: boolean,OverTime: number,bForceShortestRotationPath: boolean,MoveAction: EMoveComponentAction,LatentInfo: LatentActionInfo): void;
-}
-
-declare class RepAttachment { 
-	AttachParent: Actor;
-	LocationOffset: Vector_NetQuantize100;
-	RelativeScale3D: Vector_NetQuantize100;
-	RotationOffset: Rotator;
-	AttachSocket: string;
-	AttachComponent: SceneComponent;
-	clone() : RepAttachment;
-	static C(Other: UObject | any): RepAttachment;
-}
-
-declare type ENetDormancy = 'DORM_Never' | 'DORM_Awake' | 'DORM_DormantAll' | 'DORM_DormantPartial' | 'DORM_Initial' | 'DORM_MAX';
-declare var ENetDormancy : { DORM_Never:'DORM_Never',DORM_Awake:'DORM_Awake',DORM_DormantAll:'DORM_DormantAll',DORM_DormantPartial:'DORM_DormantPartial',DORM_Initial:'DORM_Initial',DORM_MAX:'DORM_MAX', };
-declare type ESpawnActorCollisionHandlingMethod = 'Undefined' | 'AlwaysSpawn' | 'AdjustIfPossibleButAlwaysSpawn' | 'AdjustIfPossibleButDontSpawnIfColliding' | 'DontSpawnIfColliding' | 'ESpawnActorCollisionHandlingMethod_MAX';
-declare var ESpawnActorCollisionHandlingMethod : { Undefined:'Undefined',AlwaysSpawn:'AlwaysSpawn',AdjustIfPossibleButAlwaysSpawn:'AdjustIfPossibleButAlwaysSpawn',AdjustIfPossibleButDontSpawnIfColliding:'AdjustIfPossibleButDontSpawnIfColliding',DontSpawnIfColliding:'DontSpawnIfColliding',ESpawnActorCollisionHandlingMethod_MAX:'ESpawnActorCollisionHandlingMethod_MAX', };
-declare type EInputConsumeOptions = 'ICO_ConsumeAll' | 'ICO_ConsumeBoundKeys' | 'ICO_ConsumeNone' | 'ICO_MAX';
-declare var EInputConsumeOptions : { ICO_ConsumeAll:'ICO_ConsumeAll',ICO_ConsumeBoundKeys:'ICO_ConsumeBoundKeys',ICO_ConsumeNone:'ICO_ConsumeNone',ICO_MAX:'ICO_MAX', };
-declare class InterpFilter extends UObject { 
-	Caption: string;
-	static Load(ResourceName: string): InterpFilter;
-	static Find(Outer: UObject, ResourceName: string): InterpFilter;
-	static GetDefaultObject(): InterpFilter;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpFilter;
-	static C(Other: UObject | any): InterpFilter;
-}
-
-declare class InterpGroupDirector extends InterpGroup { 
-	static Load(ResourceName: string): InterpGroupDirector;
-	static Find(Outer: UObject, ResourceName: string): InterpGroupDirector;
-	static GetDefaultObject(): InterpGroupDirector;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpGroupDirector;
-	static C(Other: UObject | any): InterpGroupDirector;
-}
-
-declare class InterpData extends UObject { 
-	InterpLength: number;
-	PathBuildTime: number;
-	InterpGroups: InterpGroup[];
-	CurveEdSetup: InterpCurveEdSetup;
-	InterpFilters: InterpFilter[];
-	SelectedFilter: InterpFilter;
-	DefaultFilters: InterpFilter[];
-	EdSectionStart: number;
-	EdSectionEnd: number;
-	bShouldBakeAndPrune: boolean;
-	CachedDirectorGroup: InterpGroupDirector;
-	AllEventNames: string[];
-	static Load(ResourceName: string): InterpData;
-	static Find(Outer: UObject, ResourceName: string): InterpData;
-	static GetDefaultObject(): InterpData;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpData;
-	static C(Other: UObject | any): InterpData;
-}
-
-declare class InterpGroupActorInfo { 
-	ObjectName: string;
-	Actors: Actor[];
-	clone() : InterpGroupActorInfo;
-	static C(Other: UObject | any): InterpGroupActorInfo;
-}
-
-declare class CameraCutInfo { 
-	Location: Vector;
-	Timestamp: number;
-	clone() : CameraCutInfo;
-	static C(Other: UObject | any): CameraCutInfo;
-}
-
-declare class MatineeActor extends Actor { 
-	MatineeData: InterpData;
-	MatineeControllerName: string;
-	PlayRate: number;
-	bPlayOnLevelLoad: boolean;
-	bForceStartPos: boolean;
-	ForceStartPosition: number;
-	bLooping: boolean;
-	bRewindOnPlay: boolean;
-	bNoResetOnRewind: boolean;
-	bRewindIfAlreadyPlaying: boolean;
-	bDisableRadioFilter: boolean;
-	bClientSideOnly: boolean;
-	bSkipUpdateIfNotVisible: boolean;
-	bIsSkippable: boolean;
-	PreferredSplitScreenNum: number;
-	bDisableMovementInput: boolean;
-	bDisableLookAtInput: boolean;
-	bHidePlayer: boolean;
-	bHideHud: boolean;
-	GroupActorInfos: InterpGroupActorInfo[];
-	bShouldShowGore: boolean;
-	GroupInst: InterpGroupInst[];
-	CameraCuts: CameraCutInfo[];
-	SpriteComponent: BillboardComponent;
-	bIsBeingEdited: boolean;
-	bIsScrubbing: boolean;
-	bIsPlaying: boolean;
-	bReversePlayback: boolean;
-	bPaused: boolean;
-	bPendingStop: boolean;
-	InterpPosition: number;
-	ReplicationForceIsPlaying: number;
-	OnPlay: UnrealEngineMulticastDelegate<() => void>;
-	OnStop: UnrealEngineMulticastDelegate<() => void>;
-	OnPause: UnrealEngineMulticastDelegate<() => void>;
-	static GetDefaultObject(): MatineeActor;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MatineeActor;
-	Stop(): void;
-	SetPosition(NewPosition: number,bJump: boolean): void;
-	SetLoopingState(bNewLooping: boolean): void;
-	Reverse(): void;
-	Play(): void;
-	Pause(): void;
-	EnableGroupByName(GroupName: string,bEnable: boolean): void;
-	ChangePlaybackDirection(): void;
-	static C(Other: UObject | any): MatineeActor;
-}
-
-declare class ChildActorComponent extends SceneComponent { 
-	ChildActorClass: UnrealEngineClass;
-	ChildActor: Actor;
-	ChildActorTemplate: Actor;
-	static Load(ResourceName: string): ChildActorComponent;
-	static Find(Outer: UObject, ResourceName: string): ChildActorComponent;
-	static GetDefaultObject(): ChildActorComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ChildActorComponent;
-	SetChildActorClass(InClass: UnrealEngineClass): void;
-	static C(Other: UObject | any): ChildActorComponent;
-}
-
-declare class ModelComponent extends PrimitiveComponent { 
-	ModelBodySetup: BodySetup;
-	static Load(ResourceName: string): ModelComponent;
-	static Find(Outer: UObject, ResourceName: string): ModelComponent;
-	static GetDefaultObject(): ModelComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ModelComponent;
-	static C(Other: UObject | any): ModelComponent;
-}
-
-declare class LevelActorContainer extends UObject { 
-	Actors: Actor[];
-	static Load(ResourceName: string): LevelActorContainer;
-	static Find(Outer: UObject, ResourceName: string): LevelActorContainer;
-	static GetDefaultObject(): LevelActorContainer;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelActorContainer;
-	static C(Other: UObject | any): LevelActorContainer;
-}
-
-declare class LevelScriptBlueprint extends Blueprint { 
-	FriendlyName: string;
-	static Load(ResourceName: string): LevelScriptBlueprint;
-	static Find(Outer: UObject, ResourceName: string): LevelScriptBlueprint;
-	static GetDefaultObject(): LevelScriptBlueprint;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelScriptBlueprint;
-	static C(Other: UObject | any): LevelScriptBlueprint;
-}
-
-declare class LevelScriptActor extends Actor { 
-	bInputEnabled: boolean;
-	static GetDefaultObject(): LevelScriptActor;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelScriptActor;
-	WorldOriginLocationChanged(OldOriginLocation: IntVector,NewOriginLocation: IntVector): void;
-	SetCinematicMode(bCinematicMode: boolean,bHidePlayer: boolean,bAffectsHUD: boolean,bAffectsMovement: boolean,bAffectsTurning: boolean): void;
-	RemoteEvent(EventName: string): boolean;
-	LevelReset(): void;
-	static C(Other: UObject | any): LevelScriptActor;
-}
-
-declare class NavigationObjectBase extends Actor { 
-	CapsuleComponent: CapsuleComponent;
-	GoodSprite: BillboardComponent;
-	BadSprite: BillboardComponent;
-	bIsPIEPlayerStart: boolean;
-	static GetDefaultObject(): NavigationObjectBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationObjectBase;
-	static C(Other: UObject | any): NavigationObjectBase;
-}
-
-declare class NavigationDataChunk extends UObject { 
-	NavigationDataName: string;
-	static Load(ResourceName: string): NavigationDataChunk;
-	static Find(Outer: UObject, ResourceName: string): NavigationDataChunk;
-	static GetDefaultObject(): NavigationDataChunk;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationDataChunk;
-	static C(Other: UObject | any): NavigationDataChunk;
-}
-
-declare type ELightingBuildQuality = 'Quality_Preview' | 'Quality_Medium' | 'Quality_High' | 'Quality_Production' | 'Quality_MAX';
-declare var ELightingBuildQuality : { Quality_Preview:'Quality_Preview',Quality_Medium:'Quality_Medium',Quality_High:'Quality_High',Quality_Production:'Quality_Production',Quality_MAX:'Quality_MAX', };
-declare class MapBuildDataRegistry extends UObject { 
-	LevelLightingQuality: ELightingBuildQuality;
-	static Load(ResourceName: string): MapBuildDataRegistry;
-	static Find(Outer: UObject, ResourceName: string): MapBuildDataRegistry;
-	static GetDefaultObject(): MapBuildDataRegistry;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MapBuildDataRegistry;
-	static C(Other: UObject | any): MapBuildDataRegistry;
-}
-
-declare type ETextureSizingType = 'TextureSizingType_UseSingleTextureSize' | 'TextureSizingType_UseAutomaticBiasedSizes' | 'TextureSizingType_UseManualOverrideTextureSize' | 'TextureSizingType_UseSimplygonAutomaticSizing' | 'TextureSizingType_MAX';
-declare var ETextureSizingType : { TextureSizingType_UseSingleTextureSize:'TextureSizingType_UseSingleTextureSize',TextureSizingType_UseAutomaticBiasedSizes:'TextureSizingType_UseAutomaticBiasedSizes',TextureSizingType_UseManualOverrideTextureSize:'TextureSizingType_UseManualOverrideTextureSize',TextureSizingType_UseSimplygonAutomaticSizing:'TextureSizingType_UseSimplygonAutomaticSizing',TextureSizingType_MAX:'TextureSizingType_MAX', };
-declare type EMaterialMergeType = 'MaterialMergeType_Default' | 'MaterialMergeType_Simplygon' | 'MaterialMergeType_MAX';
-declare var EMaterialMergeType : { MaterialMergeType_Default:'MaterialMergeType_Default',MaterialMergeType_Simplygon:'MaterialMergeType_Simplygon',MaterialMergeType_MAX:'MaterialMergeType_MAX', };
-declare class MaterialProxySettings { 
-	TextureSize: IntPoint;
-	TextureSizingType: ETextureSizingType;
-	GutterSpace: number;
-	bNormalMap: boolean;
-	bMetallicMap: boolean;
-	MetallicConstant: number;
-	bRoughnessMap: boolean;
-	RoughnessConstant: number;
-	bSpecularMap: boolean;
-	SpecularConstant: number;
-	bEmissiveMap: boolean;
-	bOpacityMap: boolean;
-	OpacityConstant: number;
-	bOpacityMaskMap: boolean;
-	OpacityMaskConstant: number;
-	bAmbientOcclusionMap: boolean;
-	AmbientOcclusionConstant: number;
-	DiffuseTextureSize: IntPoint;
-	NormalTextureSize: IntPoint;
-	MetallicTextureSize: IntPoint;
-	RoughnessTextureSize: IntPoint;
-	SpecularTextureSize: IntPoint;
-	EmissiveTextureSize: IntPoint;
-	OpacityTextureSize: IntPoint;
-	OpacityMaskTextureSize: IntPoint;
-	AmbientOcclusionTextureSize: IntPoint;
-	MaterialMergeType: EMaterialMergeType;
-	BlendMode: EBlendMode;
-	clone() : MaterialProxySettings;
-	static C(Other: UObject | any): MaterialProxySettings;
-}
-
-declare class LevelSimplificationDetails { 
-	bCreatePackagePerAsset: boolean;
-	DetailsPercentage: number;
-	StaticMeshMaterialSettings: MaterialProxySettings;
-	bOverrideLandscapeExportLOD: boolean;
-	LandscapeExportLOD: number;
-	LandscapeMaterialSettings: MaterialProxySettings;
-	bBakeFoliageToLandscape: boolean;
-	bBakeGrassToLandscape: boolean;
-	bGenerateMeshNormalMap: boolean;
-	bGenerateMeshMetallicMap: boolean;
-	bGenerateMeshRoughnessMap: boolean;
-	bGenerateMeshSpecularMap: boolean;
-	bGenerateLandscapeNormalMap: boolean;
-	bGenerateLandscapeMetallicMap: boolean;
-	bGenerateLandscapeRoughnessMap: boolean;
-	bGenerateLandscapeSpecularMap: boolean;
-	clone() : LevelSimplificationDetails;
-	static C(Other: UObject | any): LevelSimplificationDetails;
-}
-
-declare class NavigationSystemConfig extends UObject { 
-	NavigationSystemClass: SoftClassPath;
-	bIsOverriden: boolean;
-	static Load(ResourceName: string): NavigationSystemConfig;
-	static Find(Outer: UObject, ResourceName: string): NavigationSystemConfig;
-	static GetDefaultObject(): NavigationSystemConfig;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationSystemConfig;
-	static C(Other: UObject | any): NavigationSystemConfig;
-}
-
-declare class DefaultPhysicsVolume extends PhysicsVolume { 
-	static GetDefaultObject(): DefaultPhysicsVolume;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DefaultPhysicsVolume;
-	static C(Other: UObject | any): DefaultPhysicsVolume;
-}
-
-declare class PhysicsCollisionHandler extends UObject { 
-	ImpactThreshold: number;
-	ImpactReFireDelay: number;
-	DefaultImpactSound: SoundBase;
-	LastImpactSoundTime: number;
-	static Load(ResourceName: string): PhysicsCollisionHandler;
-	static Find(Outer: UObject, ResourceName: string): PhysicsCollisionHandler;
-	static GetDefaultObject(): PhysicsCollisionHandler;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsCollisionHandler;
-	static C(Other: UObject | any): PhysicsCollisionHandler;
-}
-
-declare class GameSession extends Info { 
-	MaxSpectators: number;
-	MaxPlayers: number;
-	MaxPartySize: number;
-	MaxSplitscreensPerConnection: number;
-	bRequiresPushToTalk: boolean;
-	SessionName: string;
-	static GetDefaultObject(): GameSession;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameSession;
-	static C(Other: UObject | any): GameSession;
-}
-
-declare class GameStateBase extends Info { 
-	GameModeClass: UnrealEngineClass;
-	AuthorityGameMode: GameModeBase;
-	SpectatorClass: UnrealEngineClass;
-	PlayerArray: PlayerState[];
-	bReplicatedHasBegunPlay: boolean;
-	ReplicatedWorldTimeSeconds: number;
-	ServerWorldTimeSecondsDelta: number;
-	ServerWorldTimeSecondsUpdateFrequency: number;
-	static GetDefaultObject(): GameStateBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameStateBase;
-	OnRep_SpectatorClass(): void;
-	OnRep_ReplicatedWorldTimeSeconds(): void;
-	OnRep_ReplicatedHasBegunPlay(): void;
-	OnRep_GameModeClass(): void;
-	HasMatchStarted(): boolean;
-	HasBegunPlay(): boolean;
-	GetServerWorldTimeSeconds(): number;
-	GetPlayerStartTime(Controller: Controller): number;
-	GetPlayerRespawnDelay(Controller: Controller): number;
-	static C(Other: UObject | any): GameStateBase;
-}
-
-declare class ServerStatReplicator extends Info { 
-	bUpdateStatNet: boolean;
-	bOverwriteClientStats: boolean;
-	Channels: any;
-	InRate: any;
-	OutRate: any;
-	OutSaturation: any;
-	MaxPacketOverhead: any;
-	InRateClientMax: any;
-	InRateClientMin: any;
-	InRateClientAvg: any;
-	InPacketsClientMax: any;
-	InPacketsClientMin: any;
-	InPacketsClientAvg: any;
-	OutRateClientMax: any;
-	OutRateClientMin: any;
-	OutRateClientAvg: any;
-	OutPacketsClientMax: any;
-	OutPacketsClientMin: any;
-	OutPacketsClientAvg: any;
-	NetNumClients: any;
-	InPackets: any;
-	OutPackets: any;
-	InBunches: any;
-	OutBunches: any;
-	OutLoss: any;
-	InLoss: any;
-	VoiceBytesSent: any;
-	VoiceBytesRecv: any;
-	VoicePacketsSent: any;
-	VoicePacketsRecv: any;
-	PercentInVoice: any;
-	PercentOutVoice: any;
-	NumActorChannels: any;
-	NumConsideredActors: any;
-	PrioritizedActors: any;
-	NumRelevantActors: any;
-	NumRelevantDeletedActors: any;
-	NumReplicatedActorAttempts: any;
-	NumReplicatedActors: any;
-	NumActors: any;
-	NumNetActors: any;
-	NumDormantActors: any;
-	NumInitiallyDormantActors: any;
-	NumNetGUIDsAckd: any;
-	NumNetGUIDsPending: any;
-	NumNetGUIDsUnAckd: any;
-	ObjPathBytes: any;
-	NetGUIDOutRate: any;
-	NetGUIDInRate: any;
-	NetSaturated: any;
-	static GetDefaultObject(): ServerStatReplicator;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ServerStatReplicator;
-	static C(Other: UObject | any): ServerStatReplicator;
-}
-
-declare class GameModeBase extends Info { 
-	OptionsString: string;
-	GameSessionClass: UnrealEngineClass;
-	GameStateClass: UnrealEngineClass;
-	PlayerControllerClass: UnrealEngineClass;
-	PlayerStateClass: UnrealEngineClass;
-	HUDClass: UnrealEngineClass;
-	DefaultPawnClass: UnrealEngineClass;
-	SpectatorClass: UnrealEngineClass;
-	ReplaySpectatorPlayerControllerClass: UnrealEngineClass;
-	ServerStatReplicatorClass: UnrealEngineClass;
-	GameSession: GameSession;
-	GameState: GameStateBase;
-	ServerStatReplicator: ServerStatReplicator;
-	DefaultPlayerName: string;
-	bUseSeamlessTravel: boolean;
-	bStartPlayersAsSpectators: boolean;
-	bPauseable: boolean;
-	static GetDefaultObject(): GameModeBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameModeBase;
-	StartPlay(): void;
-	SpawnDefaultPawnFor(NewPlayer: Controller,StartSpot: Actor): Pawn;
-	SpawnDefaultPawnAtTransform(NewPlayer: Controller,SpawnTransform: Transform): Pawn;
-	ShouldReset(ActorToReset: Actor): boolean;
-	ReturnToMainMenuHost(): void;
-	RestartPlayerAtTransform(NewPlayer: Controller,SpawnTransform: Transform): void;
-	RestartPlayerAtPlayerStart(NewPlayer: Controller,StartSpot: Actor): void;
-	RestartPlayer(NewPlayer: Controller): void;
-	ResetLevel(): void;
-	PlayerCanRestart(Player: PlayerController): boolean;
-	MustSpectate(NewPlayerController: PlayerController): boolean;
-	K2_PostLogin(NewPlayer: PlayerController): void;
-	K2_OnSwapPlayerControllers(OldPC: PlayerController,NewPC: PlayerController): void;
-	K2_OnRestartPlayer(NewPlayer: Controller): void;
-	K2_OnLogout(ExitingController: Controller): void;
-	K2_OnChangeName(Other: Controller,NewName: string,bNameChange: boolean): void;
-	K2_FindPlayerStart(Player: Controller,IncomingName: string): Actor;
-	InitStartSpot(StartSpot: Actor,NewPlayer: Controller): void;
-	InitializeHUDForPlayer(NewPlayer: PlayerController): void;
-	HasMatchStarted(): boolean;
-	HandleStartingNewPlayer(NewPlayer: PlayerController): void;
-	GetNumSpectators(): number;
-	GetNumPlayers(): number;
-	GetDefaultPawnClassForController(InController: Controller): UnrealEngineClass;
-	FindPlayerStart(Player: Controller,IncomingName: string): Actor;
-	ChoosePlayerStart(Player: Controller): Actor;
-	ChangeName(Controller: Controller,NewName: string,bNameChange: boolean): void;
-	CanSpectate(Viewer: PlayerController,ViewTarget: PlayerState): boolean;
-	static C(Other: UObject | any): GameModeBase;
-	HandleSeamlessTravelPlayer(C?: Controller): {C: Controller};
-	static HandleSeamlessTravelPlayer(GameMode: GameModeBase,C?: Controller): {C: Controller};
-}
-
-declare class GameNetworkManager extends Info { 
-	AdjustedNetSpeed: number;
-	LastNetSpeedUpdateTime: number;
-	TotalNetBandwidth: number;
-	MinDynamicBandwidth: number;
-	MaxDynamicBandwidth: number;
-	bIsStandbyCheckingEnabled: boolean;
-	bHasStandbyCheatTriggered: boolean;
-	StandbyRxCheatTime: number;
-	StandbyTxCheatTime: number;
-	BadPingThreshold: number;
-	PercentMissingForRxStandby: number;
-	PercentMissingForTxStandby: number;
-	PercentForBadPing: number;
-	JoinInProgressStandbyWaitTime: number;
-	MoveRepSize: number;
-	MAXPOSITIONERRORSQUARED: number;
-	MAXNEARZEROVELOCITYSQUARED: number;
-	CLIENTADJUSTUPDATECOST: number;
-	MAXCLIENTUPDATEINTERVAL: number;
-	MaxClientForcedUpdateDuration: number;
-	MaxMoveDeltaTime: number;
-	ClientNetSendMoveDeltaTime: number;
-	ClientNetSendMoveDeltaTimeThrottled: number;
-	ClientNetSendMoveDeltaTimeStationary: number;
-	ClientNetSendMoveThrottleAtNetSpeed: number;
-	ClientNetSendMoveThrottleOverPlayerCount: number;
-	ClientAuthorativePosition: boolean;
-	ClientErrorUpdateRateLimit: number;
-	bMovementTimeDiscrepancyDetection: boolean;
-	bMovementTimeDiscrepancyResolution: boolean;
-	MovementTimeDiscrepancyMaxTimeMargin: number;
-	MovementTimeDiscrepancyMinTimeMargin: number;
-	MovementTimeDiscrepancyResolutionRate: number;
-	MovementTimeDiscrepancyDriftAllowance: number;
-	bMovementTimeDiscrepancyForceCorrectionsDuringResolution: boolean;
-	bUseDistanceBasedRelevancy: boolean;
-	static GetDefaultObject(): GameNetworkManager;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameNetworkManager;
-	static C(Other: UObject | any): GameNetworkManager;
-}
-
-declare type EVisibilityAggressiveness = 'VIS_LeastAggressive' | 'VIS_ModeratelyAggressive' | 'VIS_MostAggressive' | 'VIS_Max';
-declare var EVisibilityAggressiveness : { VIS_LeastAggressive:'VIS_LeastAggressive',VIS_ModeratelyAggressive:'VIS_ModeratelyAggressive',VIS_MostAggressive:'VIS_MostAggressive',VIS_Max:'VIS_Max', };
-declare type EVolumeLightingMethod = 'VLM_VolumetricLightmap' | 'VLM_SparseVolumeLightingSamples' | 'VLM_MAX';
-declare var EVolumeLightingMethod : { VLM_VolumetricLightmap:'VLM_VolumetricLightmap',VLM_SparseVolumeLightingSamples:'VLM_SparseVolumeLightingSamples',VLM_MAX:'VLM_MAX', };
-declare class LightmassWorldInfoSettings { 
-	StaticLightingLevelScale: number;
-	NumIndirectLightingBounces: number;
-	NumSkyLightingBounces: number;
-	IndirectLightingQuality: number;
-	IndirectLightingSmoothness: number;
-	EnvironmentColor: Color;
-	EnvironmentIntensity: number;
-	EmissiveBoost: number;
-	DiffuseBoost: number;
-	VolumeLightingMethod: EVolumeLightingMethod;
-	VolumetricLightmapDetailCellSize: number;
-	VolumetricLightmapMaximumBrickMemoryMb: number;
-	VolumetricLightmapSphericalHarmonicSmoothing: number;
-	VolumeLightSamplePlacementScale: number;
-	bUseAmbientOcclusion: boolean;
-	bGenerateAmbientOcclusionMaterialMask: boolean;
-	DirectIlluminationOcclusionFraction: number;
-	IndirectIlluminationOcclusionFraction: number;
-	OcclusionExponent: number;
-	FullyOccludedSamplesFraction: number;
-	MaxOcclusionDistance: number;
-	bVisualizeMaterialDiffuse: boolean;
-	bVisualizeAmbientOcclusion: boolean;
-	bCompressLightmaps: boolean;
-	clone() : LightmassWorldInfoSettings;
-	static C(Other: UObject | any): LightmassWorldInfoSettings;
-}
-
-declare type ReverbPreset = 'REVERB_Default' | 'REVERB_Bathroom' | 'REVERB_StoneRoom' | 'REVERB_Auditorium' | 'REVERB_ConcertHall' | 'REVERB_Cave' | 'REVERB_Hallway' | 'REVERB_StoneCorridor' | 'REVERB_Alley' | 'REVERB_Forest' | 'REVERB_City' | 'REVERB_Mountains' | 'REVERB_Quarry' | 'REVERB_Plain' | 'REVERB_ParkingLot' | 'REVERB_SewerPipe' | 'REVERB_Underwater' | 'REVERB_SmallRoom' | 'REVERB_MediumRoom' | 'REVERB_LargeRoom' | 'REVERB_MediumHall' | 'REVERB_LargeHall' | 'REVERB_Plate' | 'REVERB_MAX';
-declare var ReverbPreset : { REVERB_Default:'REVERB_Default',REVERB_Bathroom:'REVERB_Bathroom',REVERB_StoneRoom:'REVERB_StoneRoom',REVERB_Auditorium:'REVERB_Auditorium',REVERB_ConcertHall:'REVERB_ConcertHall',REVERB_Cave:'REVERB_Cave',REVERB_Hallway:'REVERB_Hallway',REVERB_StoneCorridor:'REVERB_StoneCorridor',REVERB_Alley:'REVERB_Alley',REVERB_Forest:'REVERB_Forest',REVERB_City:'REVERB_City',REVERB_Mountains:'REVERB_Mountains',REVERB_Quarry:'REVERB_Quarry',REVERB_Plain:'REVERB_Plain',REVERB_ParkingLot:'REVERB_ParkingLot',REVERB_SewerPipe:'REVERB_SewerPipe',REVERB_Underwater:'REVERB_Underwater',REVERB_SmallRoom:'REVERB_SmallRoom',REVERB_MediumRoom:'REVERB_MediumRoom',REVERB_LargeRoom:'REVERB_LargeRoom',REVERB_MediumHall:'REVERB_MediumHall',REVERB_LargeHall:'REVERB_LargeHall',REVERB_Plate:'REVERB_Plate',REVERB_MAX:'REVERB_MAX', };
-declare class ReverbEffect extends UObject { 
-	Density: number;
-	Diffusion: number;
-	Gain: number;
-	GainHF: number;
-	DecayTime: number;
-	DecayHFRatio: number;
-	ReflectionsGain: number;
-	ReflectionsDelay: number;
-	LateGain: number;
-	LateDelay: number;
-	AirAbsorptionGainHF: number;
-	RoomRolloffFactor: number;
-	bChanged: boolean;
-	static Load(ResourceName: string): ReverbEffect;
-	static Find(Outer: UObject, ResourceName: string): ReverbEffect;
-	static GetDefaultObject(): ReverbEffect;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReverbEffect;
-	static C(Other: UObject | any): ReverbEffect;
-}
-
-declare class ReverbSettings { 
-	bApplyReverb: boolean;
-	ReverbType: ReverbPreset;
-	ReverbEffect: ReverbEffect;
-	ReverbPluginEffect: SoundEffectSubmixPreset;
-	Volume: number;
-	FadeTime: number;
-	clone() : ReverbSettings;
-	static C(Other: UObject | any): ReverbSettings;
-}
-
-declare class InteriorSettings { 
-	bIsWorldSettings: boolean;
-	ExteriorVolume: number;
-	ExteriorTime: number;
-	ExteriorLPF: number;
-	ExteriorLPFTime: number;
-	InteriorVolume: number;
-	InteriorTime: number;
-	InteriorLPF: number;
-	InteriorLPFTime: number;
-	clone() : InteriorSettings;
-	static C(Other: UObject | any): InteriorSettings;
-}
-
-declare class DynamicBlueprintBinding extends UObject { 
-	static Load(ResourceName: string): DynamicBlueprintBinding;
-	static Find(Outer: UObject, ResourceName: string): DynamicBlueprintBinding;
-	static GetDefaultObject(): DynamicBlueprintBinding;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DynamicBlueprintBinding;
-	static C(Other: UObject | any): DynamicBlueprintBinding;
-}
-
-declare class DatasmithAssetUserData extends AssetUserData { 
-	MetaData: any;
-	ObjectTemplates: any;
-	static Load(ResourceName: string): DatasmithAssetUserData;
-	static Find(Outer: UObject, ResourceName: string): DatasmithAssetUserData;
-	static GetDefaultObject(): DatasmithAssetUserData;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithAssetUserData;
-	static C(Other: UObject | any): DatasmithAssetUserData;
-}
-
-declare class PrimaryAssetType { 
-	Name: string;
-	clone() : PrimaryAssetType;
-	static C(Other: UObject | any): PrimaryAssetType;
-	Conv_PrimaryAssetTypeToString(): string;
-	EqualEqual_PrimaryAssetType(B: PrimaryAssetType): boolean;
-	GetPrimaryAssetIdList(OutPrimaryAssetIdList?: PrimaryAssetId[]): {OutPrimaryAssetIdList: PrimaryAssetId[]};
-	IsValidPrimaryAssetType(): boolean;
-	NotEqual_PrimaryAssetType(B: PrimaryAssetType): boolean;
-	static Conv_PrimaryAssetTypeToString(PrimaryAssetType: PrimaryAssetType): string;
-	static EqualEqual_PrimaryAssetType(A: PrimaryAssetType,B: PrimaryAssetType): boolean;
-	static GetPrimaryAssetIdList(PrimaryAssetType: PrimaryAssetType,OutPrimaryAssetIdList?: PrimaryAssetId[]): {OutPrimaryAssetIdList: PrimaryAssetId[]};
-	static IsValidPrimaryAssetType(PrimaryAssetType: PrimaryAssetType): boolean;
-	static NotEqual_PrimaryAssetType(A: PrimaryAssetType,B: PrimaryAssetType): boolean;
-}
-
-declare class PrimaryAssetId { 
-	PrimaryAssetType: PrimaryAssetType;
-	PrimaryAssetName: string;
-	clone() : PrimaryAssetId;
-	static C(Other: UObject | any): PrimaryAssetId;
-	Conv_PrimaryAssetIdToString(): string;
-	EqualEqual_PrimaryAssetId(B: PrimaryAssetId): boolean;
-	GetClassFromPrimaryAssetId(): UnrealEngineClass;
-	GetCurrentBundleState(bForceCurrentState: boolean,OutBundles?: string[]): {OutBundles: string[], $: boolean};
-	GetObjectFromPrimaryAssetId(): UObject;
-	GetSoftClassReferenceFromPrimaryAssetId(): Class;
-	GetSoftObjectReferenceFromPrimaryAssetId(): UObject;
-	IsValidPrimaryAssetId(): boolean;
-	NotEqual_PrimaryAssetId(B: PrimaryAssetId): boolean;
-	UnloadPrimaryAsset(): void;
-	static Conv_PrimaryAssetIdToString(PrimaryAssetId: PrimaryAssetId): string;
-	static EqualEqual_PrimaryAssetId(A: PrimaryAssetId,B: PrimaryAssetId): boolean;
-	static GetClassFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): UnrealEngineClass;
-	static GetCurrentBundleState(PrimaryAssetId: PrimaryAssetId,bForceCurrentState: boolean,OutBundles?: string[]): {OutBundles: string[], $: boolean};
-	static GetObjectFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): UObject;
-	static GetSoftClassReferenceFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): Class;
-	static GetSoftObjectReferenceFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): UObject;
-	static IsValidPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): boolean;
-	static NotEqual_PrimaryAssetId(A: PrimaryAssetId,B: PrimaryAssetId): boolean;
-	static UnloadPrimaryAsset(PrimaryAssetId: PrimaryAssetId): void;
-}
-
-declare class Class extends Struct { 
-	static Load(ResourceName: string): Class;
-	static Find(Outer: UObject, ResourceName: string): Class;
-	static GetDefaultObject(): Class;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Class;
-	static C(Other: UObject | any): Class;
-	AddDynamicBinding(BindingObject: DynamicBlueprintBinding): void;
-	GetClassPathName(): string;
-	GetDerivedClasses(Results?: UnrealEngineClass[],bRecursive?: boolean): {Results: UnrealEngineClass[]};
-	GetDynamicBinding(BindingObjectClass: UnrealEngineClass): DynamicBlueprintBinding;
-	GetObjectsOfClass(Results?: UObject[],bIncludeDerivedClasses?: boolean,ExcludeFlags?: number,ExclusionInternalFlags?: number): {Results: UObject[]};
-	GetSuperClasses(): UnrealEngineClass[];
-	IsGeneratedByBlueprint(): boolean;
-	GetAllDatasmithUserData(OutUserData?: DatasmithAssetUserData[]): {OutUserData: DatasmithAssetUserData[]};
-	Conv_ClassToSoftClassReference(): Class;
-	Conv_SoftClassReferenceToClass(): UnrealEngineClass;
-	Conv_SoftClassReferenceToString(): string;
-	EqualEqual_SoftClassReference(B: Class): boolean;
-	GetClassDisplayName(): string;
-	GetPrimaryAssetIdFromClass(): PrimaryAssetId;
-	GetPrimaryAssetIdFromSoftClassReference(): PrimaryAssetId;
-	IsValidClass(): boolean;
-	IsValidSoftClassReference(): boolean;
-	NotEqual_SoftClassReference(B: Class): boolean;
-	ClassIsChildOf(ParentClass: UnrealEngineClass): boolean;
-	EqualEqual_ClassClass(B: UnrealEngineClass): boolean;
-	NotEqual_ClassClass(B: UnrealEngineClass): boolean;
-	SelectClass(B: UnrealEngineClass,bSelectA: boolean): UnrealEngineClass;
-	CreateSaveGameObject(): SaveGame;
-	SpawnObject(Outer: UObject): UObject;
-	CreateDragDropOperation(): DragDropOperation;
-	static AddDynamicBinding(Outer: UnrealEngineClass,BindingObject: DynamicBlueprintBinding): void;
-	static GetClassPathName(Class: UnrealEngineClass): string;
-	static GetDerivedClasses(ClassToLookFor: UnrealEngineClass,Results?: UnrealEngineClass[],bRecursive?: boolean): {Results: UnrealEngineClass[]};
-	static GetDynamicBinding(Outer: UnrealEngineClass,BindingObjectClass: UnrealEngineClass): DynamicBlueprintBinding;
-	static GetObjectsOfClass(ClassToLookFor: UnrealEngineClass,Results?: UObject[],bIncludeDerivedClasses?: boolean,ExcludeFlags?: number,ExclusionInternalFlags?: number): {Results: UObject[]};
-	static GetSuperClasses(InClass: UnrealEngineClass): UnrealEngineClass[];
-	static IsGeneratedByBlueprint(InClass: UnrealEngineClass): boolean;
-	static GetAllDatasmithUserData(ObjectClass: UnrealEngineClass,OutUserData?: DatasmithAssetUserData[]): {OutUserData: DatasmithAssetUserData[]};
-	static Conv_ClassToSoftClassReference(Class: UnrealEngineClass): Class;
-	static Conv_SoftClassReferenceToClass(softclass: Class): UnrealEngineClass;
-	static Conv_SoftClassReferenceToString(SoftClassReference: Class): string;
-	static EqualEqual_SoftClassReference(A: Class,B: Class): boolean;
-	static GetClassDisplayName(Class: UnrealEngineClass): string;
-	static GetPrimaryAssetIdFromClass(Class: UnrealEngineClass): PrimaryAssetId;
-	static GetPrimaryAssetIdFromSoftClassReference(SoftClassReference: Class): PrimaryAssetId;
-	static IsValidClass(Class: UnrealEngineClass): boolean;
-	static IsValidSoftClassReference(SoftClassReference: Class): boolean;
-	static NotEqual_SoftClassReference(A: Class,B: Class): boolean;
-	static ClassIsChildOf(TestClass: UnrealEngineClass,ParentClass: UnrealEngineClass): boolean;
-	static EqualEqual_ClassClass(A: UnrealEngineClass,B: UnrealEngineClass): boolean;
-	static NotEqual_ClassClass(A: UnrealEngineClass,B: UnrealEngineClass): boolean;
-	static SelectClass(A: UnrealEngineClass,B: UnrealEngineClass,bSelectA: boolean): UnrealEngineClass;
-	static CreateSaveGameObject(SaveGameClass: UnrealEngineClass): SaveGame;
-	static SpawnObject(ObjectClass: UnrealEngineClass,Outer: UObject): UObject;
-	static CreateDragDropOperation(OperationClass: UnrealEngineClass): DragDropOperation;
-}
-
-declare type EProxyNormalComputationMethod = 'AngleWeighted' | 'AreaWeighted' | 'EqualWeighted' | 'EProxyNormalComputationMethod_MAX';
-declare var EProxyNormalComputationMethod : { AngleWeighted:'AngleWeighted',AreaWeighted:'AreaWeighted',EqualWeighted:'EqualWeighted',EProxyNormalComputationMethod_MAX:'EProxyNormalComputationMethod_MAX', };
-declare type ELandscapeCullingPrecision = 'High' | 'Medium' | 'Low' | 'ELandscapeCullingPrecision_MAX';
-declare var ELandscapeCullingPrecision : { High:'High',Medium:'Medium',Low:'Low',ELandscapeCullingPrecision_MAX:'ELandscapeCullingPrecision_MAX', };
-declare class MeshProxySettings { 
-	ScreenSize: number;
-	bOverrideVoxelSize: boolean;
-	VoxelSize: number;
-	MaterialSettings: MaterialProxySettings;
-	TextureWidth: number;
-	TextureHeight: number;
-	bExportNormalMap: boolean;
-	bExportMetallicMap: boolean;
-	bExportRoughnessMap: boolean;
-	bExportSpecularMap: boolean;
-	bCalculateCorrectLODModel: boolean;
-	MergeDistance: number;
-	UnresolvedGeometryColor: Color;
-	bOverrideTransferDistance: boolean;
-	MaxRayCastDist: number;
-	bUseHardAngleThreshold: boolean;
-	HardAngleThreshold: number;
-	NormalCalculationMethod: EProxyNormalComputationMethod;
-	LightMapResolution: number;
-	bComputeLightMapResolution: boolean;
-	bRecalculateNormals: boolean;
-	bBakeVertexData: boolean;
-	bUseLandscapeCulling: boolean;
-	LandscapeCullingPrecision: ELandscapeCullingPrecision;
-	bAllowAdjacency: boolean;
-	bAllowDistanceField: boolean;
-	bReuseMeshLightmapUVs: boolean;
-	bCreateCollision: boolean;
-	bAllowVertexColors: boolean;
-	bGenerateLightmapUVs: boolean;
-	clone() : MeshProxySettings;
-	static C(Other: UObject | any): MeshProxySettings;
-}
-
-declare type EUVOutput = 'DoNotOutputChannel' | 'OutputChannel' | 'EUVOutput_MAX';
-declare var EUVOutput : { DoNotOutputChannel:'DoNotOutputChannel',OutputChannel:'OutputChannel',EUVOutput_MAX:'EUVOutput_MAX', };
-declare type EMeshLODSelectionType = 'AllLODs' | 'SpecificLOD' | 'CalculateLOD' | 'LowestDetailLOD' | 'EMeshLODSelectionType_MAX';
-declare var EMeshLODSelectionType : { AllLODs:'AllLODs',SpecificLOD:'SpecificLOD',CalculateLOD:'CalculateLOD',LowestDetailLOD:'LowestDetailLOD',EMeshLODSelectionType_MAX:'EMeshLODSelectionType_MAX', };
-declare class MeshMergingSettings { 
-	bGenerateLightMapUV: boolean;
-	TargetLightMapResolution: number;
-	bComputedLightMapResolution: boolean;
-	bImportVertexColors: boolean;
-	bPivotPointAtZero: boolean;
-	bMergePhysicsData: boolean;
-	bMergeMaterials: boolean;
-	MaterialSettings: MaterialProxySettings;
-	bBakeVertexDataToMesh: boolean;
-	bUseVertexDataForBakingMaterial: boolean;
-	bUseTextureBinning: boolean;
-	bReuseMeshLightmapUVs: boolean;
-	bMergeEquivalentMaterials: boolean;
-	OutputUVs: EUVOutput;
-	GutterSize: number;
-	bCalculateCorrectLODModel: boolean;
-	LODSelectionType: EMeshLODSelectionType;
-	ExportSpecificLOD: number;
-	SpecificLOD: number;
-	bUseLandscapeCulling: boolean;
-	bIncludeImposters: boolean;
-	bAllowDistanceField: boolean;
-	bExportNormalMap: boolean;
-	bExportMetallicMap: boolean;
-	bExportRoughnessMap: boolean;
-	bExportSpecularMap: boolean;
-	MergedMaterialAtlasResolution: number;
-	clone() : MeshMergingSettings;
-	static C(Other: UObject | any): MeshMergingSettings;
-}
-
-declare class HierarchicalSimplification { 
-	TransitionScreenSize: number;
-	OverrideDrawDistance: number;
-	bUseOverrideDrawDistance: boolean;
-	bAllowSpecificExclusion: boolean;
-	bSimplifyMesh: boolean;
-	ProxySetting: MeshProxySettings;
-	MergeSetting: MeshMergingSettings;
-	DesiredBoundRadius: number;
-	DesiredFillingPercentage: number;
-	MinNumberOfActorsToBuild: number;
-	bOnlyGenerateClustersForVolumes: boolean;
-	bReusePreviousLevelClusters: boolean;
-	clone() : HierarchicalSimplification;
-	static C(Other: UObject | any): HierarchicalSimplification;
-}
-
-declare class BookmarkBase extends UObject { 
-	static Load(ResourceName: string): BookmarkBase;
-	static Find(Outer: UObject, ResourceName: string): BookmarkBase;
-	static GetDefaultObject(): BookmarkBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BookmarkBase;
-	static C(Other: UObject | any): BookmarkBase;
-}
-
-declare class BookMark extends BookmarkBase { 
-	Location: Vector;
-	Rotation: Rotator;
-	HiddenLevels: string[];
-	static Load(ResourceName: string): BookMark;
-	static Find(Outer: UObject, ResourceName: string): BookMark;
-	static GetDefaultObject(): BookMark;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BookMark;
-	static C(Other: UObject | any): BookMark;
-}
-
-declare class NetViewer { 
-	Connection: NetConnection;
-	InViewer: Actor;
-	ViewTarget: Actor;
-	ViewLocation: Vector;
-	ViewDir: Vector;
-	clone() : NetViewer;
-	static C(Other: UObject | any): NetViewer;
-}
-
-declare class BroadphaseSettings { 
-	bUseMBPOnClient: boolean;
-	bUseMBPOnServer: boolean;
-	MBPBounds: Box;
-	MBPNumSubdivs: any;
-	clone() : BroadphaseSettings;
-	static C(Other: UObject | any): BroadphaseSettings;
-}
-
-declare class WorldSettings extends Info { 
-	bEnableWorldBoundsChecks: boolean;
-	bEnableNavigationSystem: boolean;
-	bEnableAISystem: boolean;
-	bEnableWorldComposition: boolean;
-	bUseClientSideLevelStreamingVolumes: boolean;
-	bEnableWorldOriginRebasing: boolean;
-	bWorldGravitySet: boolean;
-	bGlobalGravitySet: boolean;
-	NavigationSystemConfig: NavigationSystemConfig;
-	NavigationSystemConfigOverride: NavigationSystemConfig;
-	KillZ: number;
-	KillZDamageType: UnrealEngineClass;
-	WorldGravityZ: number;
-	GlobalGravityZ: number;
-	DefaultPhysicsVolumeClass: UnrealEngineClass;
-	PhysicsCollisionHandlerClass: UnrealEngineClass;
-	DefaultGameMode: UnrealEngineClass;
-	GameNetworkManagerClass: UnrealEngineClass;
-	PackedLightAndShadowMapTextureSize: number;
-	bMinimizeBSPSections: boolean;
-	DefaultColorScale: Vector;
-	DefaultMaxDistanceFieldOcclusionDistance: number;
-	GlobalDistanceFieldViewDistance: number;
-	DynamicIndirectShadowsSelfShadowingIntensity: number;
-	bPrecomputeVisibility: boolean;
-	bPlaceCellsOnlyAlongCameraTracks: boolean;
-	VisibilityCellSize: number;
-	VisibilityAggressiveness: EVisibilityAggressiveness;
-	bForceNoPrecomputedLighting: boolean;
-	LightmassSettings: LightmassWorldInfoSettings;
-	DefaultReverbSettings: ReverbSettings;
-	DefaultAmbientZoneSettings: InteriorSettings;
-	DefaultBaseSoundMix: SoundMix;
-	bEnableHierarchicalLODSystem: boolean;
-	HLODSetupAsset: Class;
-	OverrideBaseMaterial: MaterialInterface;
-	HierarchicalLODSetup: HierarchicalSimplification[];
-	NumHLODLevels: number;
-	bGenerateSingleClusterForLevel: boolean;
-	WorldToMeters: number;
-	MonoCullingDistance: number;
-	Bookmarks: BookMark;
-	TimeDilation: number;
-	MatineeTimeDilation: number;
-	DemoPlayTimeDilation: number;
-	MinGlobalTimeDilation: number;
-	MaxGlobalTimeDilation: number;
-	MinUndilatedFrameTime: number;
-	MaxUndilatedFrameTime: number;
-	Pauser: PlayerState;
-	bHighPriorityLoading: boolean;
-	bHighPriorityLoadingLocal: boolean;
-	ReplicationViewers: NetViewer[];
-	bOverrideDefaultBroadphaseSettings: boolean;
-	BroadphaseSettings: BroadphaseSettings;
-	AssetUserData: AssetUserData[];
-	MaxNumberOfBookmarks: number;
-	DefaultBookmarkClass: UnrealEngineClass;
-	BookmarkArray: BookmarkBase[];
-	LastBookmarkClass: UnrealEngineClass;
-	static GetDefaultObject(): WorldSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldSettings;
-	OnRep_WorldGravityZ(): void;
-	static C(Other: UObject | any): WorldSettings;
-}
-
-declare class ReplicatedStaticActorDestructionInfo { 
-	ObjClass: UnrealEngineClass;
-	clone() : ReplicatedStaticActorDestructionInfo;
-	static C(Other: UObject | any): ReplicatedStaticActorDestructionInfo;
-}
-
-declare class Level extends UObject { 
-	OwningWorld: World;
-	Model: Model;
-	ModelComponents: ModelComponent[];
-	ActorCluster: LevelActorContainer;
-	LevelScriptBlueprint: LevelScriptBlueprint;
-	TextureStreamingResourceGuids: Guid[];
-	NumTextureStreamingUnbuiltComponents: number;
-	NumTextureStreamingDirtyResources: number;
-	LevelScriptActor: LevelScriptActor;
-	NavListStart: NavigationObjectBase;
-	NavListEnd: NavigationObjectBase;
-	NavDataChunks: NavigationDataChunk[];
-	LightmapTotalSize: number;
-	ShadowmapTotalSize: number;
-	StaticNavigableGeometry: Vector[];
-	StreamingTextureGuids: Guid[];
-	bIsLightingScenario: boolean;
-	LevelBuildDataId: Guid;
-	MapBuildData: MapBuildDataRegistry;
-	LightBuildLevelOffset: IntVector;
-	bTextureStreamingRotationChanged: boolean;
-	bStaticComponentsRegisteredInStreamingManager: boolean;
-	bIsVisible: boolean;
-	bLocked: boolean;
-	LevelSimplification: LevelSimplificationDetails;
-	LevelColor: LinearColor;
-	WorldSettings: WorldSettings;
-	AssetUserData: AssetUserData[];
-	DestroyedReplicatedStaticActors: ReplicatedStaticActorDestructionInfo[];
-	static Load(ResourceName: string): Level;
-	static Find(Outer: UObject, ResourceName: string): Level;
-	static GetDefaultObject(): Level;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Level;
-	static C(Other: UObject | any): Level;
-	UpdateModelComponents(): void;
-	static UpdateModelComponents(Level: Level): void;
-}
-
-declare class NavDataConfig extends NavAgentProperties { 
-	Name: string;
-	Color: Color;
-	DefaultQueryExtent: Vector;
-	NavigationDataClass: UnrealEngineClass;
-	NavigationDataClassName: SoftClassPath;
-	clone() : NavDataConfig;
-	static C(Other: UObject | any): NavDataConfig;
-}
-
-declare type ERuntimeGenerationType = 'Static' | 'DynamicModifiersOnly' | 'Dynamic' | 'LegacyGeneration' | 'ERuntimeGenerationType_MAX';
-declare var ERuntimeGenerationType : { Static:'Static',DynamicModifiersOnly:'DynamicModifiersOnly',Dynamic:'Dynamic',LegacyGeneration:'LegacyGeneration',ERuntimeGenerationType_MAX:'ERuntimeGenerationType_MAX', };
-declare class SupportedAreaData { 
-	AreaClassName: string;
-	AreaID: number;
-	AreaClass: UnrealEngineClass;
-	clone() : SupportedAreaData;
-	static C(Other: UObject | any): SupportedAreaData;
-}
-
-declare class NavigationData extends Actor { 
-	RenderingComp: PrimitiveComponent;
-	NavDataConfig: NavDataConfig;
-	bEnableDrawing: boolean;
-	bForceRebuildOnLoad: boolean;
-	bCanBeMainNavData: boolean;
-	bCanSpawnOnRebuild: boolean;
-	bRebuildAtRuntime: boolean;
-	RuntimeGeneration: ERuntimeGenerationType;
-	ObservedPathsTickInterval: number;
-	DataVersion: any;
-	SupportedAreas: SupportedAreaData[];
-	static GetDefaultObject(): NavigationData;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationData;
-	static C(Other: UObject | any): NavigationData;
-}
-
-declare type EPathFollowingAction = 'Error' | 'NoMove' | 'DirectMove' | 'PartialPath' | 'PathToGoal' | 'EPathFollowingAction_MAX';
-declare var EPathFollowingAction : { Error:'Error',NoMove:'NoMove',DirectMove:'DirectMove',PartialPath:'PartialPath',PathToGoal:'PathToGoal',EPathFollowingAction_MAX:'EPathFollowingAction_MAX', };
-declare class PathFollowingComponent extends ActorComponent { 
-	MovementComp: NavMovementComponent;
-	MyNavData: NavigationData;
-	static Load(ResourceName: string): PathFollowingComponent;
-	static Find(Outer: UObject, ResourceName: string): PathFollowingComponent;
-	static GetDefaultObject(): PathFollowingComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PathFollowingComponent;
-	OnNavDataRegistered(NavData: NavigationData): void;
-	OnActorBump(SelfActor: Actor,OtherActor: Actor,NormalImpulse: Vector,Hit: HitResult): void;
-	GetPathDestination(): Vector;
-	GetPathActionType(): EPathFollowingAction;
-	static C(Other: UObject | any): PathFollowingComponent;
-}
-
-declare class BlackboardKeyType extends UObject { 
-	static Load(ResourceName: string): BlackboardKeyType;
-	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType;
-	static GetDefaultObject(): BlackboardKeyType;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType;
-	static C(Other: UObject | any): BlackboardKeyType;
-}
-
-declare class BlackboardEntry { 
-	EntryName: string;
-	EntryDescription: string;
-	KeyType: BlackboardKeyType;
-	bInstanceSynced: boolean;
-	clone() : BlackboardEntry;
-	static C(Other: UObject | any): BlackboardEntry;
-}
-
-declare class BlackboardData extends DataAsset { 
-	Parent: BlackboardData;
-	ParentKeys: BlackboardEntry[];
-	Keys: BlackboardEntry[];
-	bHasSynchronizedKeys: boolean;
-	static Load(ResourceName: string): BlackboardData;
-	static Find(Outer: UObject, ResourceName: string): BlackboardData;
-	static GetDefaultObject(): BlackboardData;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardData;
-	static C(Other: UObject | any): BlackboardData;
-}
-
-declare class BlackboardComponent extends ActorComponent { 
-	BrainComp: BrainComponent;
-	BlackboardAsset: BlackboardData;
-	KeyInstances: BlackboardKeyType[];
-	static Load(ResourceName: string): BlackboardComponent;
-	static Find(Outer: UObject, ResourceName: string): BlackboardComponent;
-	static GetDefaultObject(): BlackboardComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardComponent;
-	SetValueAsVector(KeyName: string,VectorValue: Vector): void;
-	SetValueAsString(KeyName: string,StringValue: string): void;
-	SetValueAsRotator(KeyName: string,VectorValue: Rotator): void;
-	SetValueAsObject(KeyName: string,ObjectValue: UObject): void;
-	SetValueAsName(KeyName: string,NameValue: string): void;
-	SetValueAsInt(KeyName: string,IntValue: number): void;
-	SetValueAsFloat(KeyName: string,FloatValue: number): void;
-	SetValueAsEnum(KeyName: string,EnumValue: number): void;
-	SetValueAsClass(KeyName: string,ClassValue: UnrealEngineClass): void;
-	SetValueAsBool(KeyName: string,BoolValue: boolean): void;
-	IsVectorValueSet(KeyName: string): boolean;
-	GetValueAsVector(KeyName: string): Vector;
-	GetValueAsString(KeyName: string): string;
-	GetValueAsRotator(KeyName: string): Rotator;
-	GetValueAsObject(KeyName: string): UObject;
-	GetValueAsName(KeyName: string): string;
-	GetValueAsInt(KeyName: string): number;
-	GetValueAsFloat(KeyName: string): number;
-	GetValueAsEnum(KeyName: string): number;
-	GetValueAsClass(KeyName: string): UnrealEngineClass;
-	GetValueAsBool(KeyName: string): boolean;
-	GetRotationFromEntry(KeyName: string,ResultRotation?: Rotator): {ResultRotation: Rotator, $: boolean};
-	GetLocationFromEntry(KeyName: string,ResultLocation?: Vector): {ResultLocation: Vector, $: boolean};
-	ClearValue(KeyName: string): void;
-	static C(Other: UObject | any): BlackboardComponent;
-}
-
-declare class BrainComponent extends ActorComponent { 
-	BlackboardComp: BlackboardComponent;
-	AIOwner: AIController;
-	static Load(ResourceName: string): BrainComponent;
-	static Find(Outer: UObject, ResourceName: string): BrainComponent;
-	static GetDefaultObject(): BrainComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BrainComponent;
-	StopLogic(Reason: string): void;
-	RestartLogic(): void;
-	IsRunning(): boolean;
-	IsPaused(): boolean;
-	static C(Other: UObject | any): BrainComponent;
-}
-
-declare class AISenseConfig extends UObject { 
-	DebugColor: Color;
-	MaxAge: number;
-	bStartsEnabled: boolean;
-	static Load(ResourceName: string): AISenseConfig;
-	static Find(Outer: UObject, ResourceName: string): AISenseConfig;
-	static GetDefaultObject(): AISenseConfig;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig;
-	static C(Other: UObject | any): AISenseConfig;
-}
-
-declare type EAISenseNotifyType = 'OnEveryPerception' | 'OnPerceptionChange' | 'EAISenseNotifyType_MAX';
-declare var EAISenseNotifyType : { OnEveryPerception:'OnEveryPerception',OnPerceptionChange:'OnPerceptionChange',EAISenseNotifyType_MAX:'EAISenseNotifyType_MAX', };
-declare class AISenseEvent extends UObject { 
-	static Load(ResourceName: string): AISenseEvent;
-	static Find(Outer: UObject, ResourceName: string): AISenseEvent;
-	static GetDefaultObject(): AISenseEvent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseEvent;
-	static C(Other: UObject | any): AISenseEvent;
-}
-
-declare class AIStimulus { 
-	Age: number;
-	ExpirationAge: number;
-	Strength: number;
-	StimulusLocation: Vector;
-	ReceiverLocation: Vector;
-	Tag: string;
-	bSuccessfullySensed: boolean;
-	clone() : AIStimulus;
-	static C(Other: UObject | any): AIStimulus;
-}
-
-declare class AIPerceptionSystem extends UObject { 
-	Senses: AISense[];
-	PerceptionAgingRate: number;
-	static Load(ResourceName: string): AIPerceptionSystem;
-	static Find(Outer: UObject, ResourceName: string): AIPerceptionSystem;
-	static GetDefaultObject(): AIPerceptionSystem;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIPerceptionSystem;
-	static ReportPerceptionEvent(WorldContextObject: UObject,PerceptionEvent: AISenseEvent): void;
-	ReportEvent(PerceptionEvent: AISenseEvent): void;
-	static RegisterPerceptionStimuliSource(WorldContextObject: UObject,Sense: UnrealEngineClass,Target: Actor): boolean;
-	OnPerceptionStimuliSourceEndPlay(Actor: Actor,EndPlayReason: EEndPlayReason): void;
-	static GetSenseClassForStimulus(WorldContextObject: UObject,Stimulus: AIStimulus): UnrealEngineClass;
-	static C(Other: UObject | any): AIPerceptionSystem;
-}
-
-declare class AISense extends UObject { 
-	DefaultExpirationAge: number;
-	NotifyType: EAISenseNotifyType;
-	bWantsNewPawnNotification: boolean;
-	bAutoRegisterAllPawnsAsSources: boolean;
-	PerceptionSystemInstance: AIPerceptionSystem;
-	static Load(ResourceName: string): AISense;
-	static Find(Outer: UObject, ResourceName: string): AISense;
-	static GetDefaultObject(): AISense;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense;
-	static C(Other: UObject | any): AISense;
-}
-
-declare class ActorPerceptionBlueprintInfo { 
-	Target: Actor;
-	LastSensedStimuli: AIStimulus[];
-	bIsHostile: boolean;
-	clone() : ActorPerceptionBlueprintInfo;
-	static C(Other: UObject | any): ActorPerceptionBlueprintInfo;
-}
-
-declare class AIPerceptionComponent extends ActorComponent { 
-	SensesConfig: AISenseConfig[];
-	DominantSense: UnrealEngineClass;
-	AIOwner: AIController;
-	OnPerceptionUpdated: UnrealEngineMulticastDelegate<(UpdatedActors: Actor[]) => void>;
-	OnTargetPerceptionUpdated: UnrealEngineMulticastDelegate<(Actor: Actor, Stimulus: AIStimulus) => void>;
-	static Load(ResourceName: string): AIPerceptionComponent;
-	static Find(Outer: UObject, ResourceName: string): AIPerceptionComponent;
-	static GetDefaultObject(): AIPerceptionComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIPerceptionComponent;
-	SetSenseEnabled(SenseClass: UnrealEngineClass,bEnable: boolean): void;
-	RequestStimuliListenerUpdate(): void;
-	OnOwnerEndPlay(Actor: Actor,EndPlayReason: EEndPlayReason): void;
-	GetPerceivedHostileActors(OutActors?: Actor[]): {OutActors: Actor[]};
-	GetPerceivedActors(SenseToUse: UnrealEngineClass,OutActors?: Actor[]): {OutActors: Actor[]};
-	GetKnownPerceivedActors(SenseToUse: UnrealEngineClass,OutActors?: Actor[]): {OutActors: Actor[]};
-	GetCurrentlyPerceivedActors(SenseToUse: UnrealEngineClass,OutActors?: Actor[]): {OutActors: Actor[]};
-	GetActorsPerception(Actor: Actor,Info?: ActorPerceptionBlueprintInfo): {Info: ActorPerceptionBlueprintInfo, $: boolean};
-	static C(Other: UObject | any): AIPerceptionComponent;
-}
-
-declare type EAIRequestPriority = 'SoftScript' | 'Logic' | 'HardScript' | 'Reaction' | 'Ultimate' | 'MAX';
-declare var EAIRequestPriority : { SoftScript:'SoftScript',Logic:'Logic',HardScript:'HardScript',Reaction:'Reaction',Ultimate:'Ultimate',MAX:'MAX', };
-declare type EPawnActionResult = 'NotStarted' | 'InProgress' | 'Success' | 'Failed' | 'Aborted' | 'EPawnActionResult_MAX';
-declare var EPawnActionResult : { NotStarted:'NotStarted',InProgress:'InProgress',Success:'Success',Failed:'Failed',Aborted:'Aborted',EPawnActionResult_MAX:'EPawnActionResult_MAX', };
-declare class PawnAction extends UObject { 
-	ChildAction: PawnAction;
-	ParentAction: PawnAction;
-	OwnerComponent: PawnActionsComponent;
-	Instigator: UObject;
-	BrainComp: BrainComponent;
-	bAllowNewSameClassInstance: boolean;
-	bReplaceActiveSameClassInstance: boolean;
-	bShouldPauseMovement: boolean;
-	bAlwaysNotifyOnFinished: boolean;
-	static Load(ResourceName: string): PawnAction;
-	static Find(Outer: UObject, ResourceName: string): PawnAction;
-	static GetDefaultObject(): PawnAction;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnAction;
-	GetActionPriority(): EAIRequestPriority;
-	Finish(WithResult: EPawnActionResult): void;
-	static CreateActionInstance(WorldContextObject: UObject,ActionClass: UnrealEngineClass): PawnAction;
-	static C(Other: UObject | any): PawnAction;
-}
-
-declare class PawnActionStack { 
-	TopAction: PawnAction;
-	clone() : PawnActionStack;
-	static C(Other: UObject | any): PawnActionStack;
-}
-
-declare class PawnActionEvent { 
-	Action: PawnAction;
-	clone() : PawnActionEvent;
-	static C(Other: UObject | any): PawnActionEvent;
-}
-
-declare type EPawnActionAbortState = 'NeverStarted' | 'NotBeingAborted' | 'MarkPendingAbort' | 'LatentAbortInProgress' | 'AbortDone' | 'MAX';
-declare var EPawnActionAbortState : { NeverStarted:'NeverStarted',NotBeingAborted:'NotBeingAborted',MarkPendingAbort:'MarkPendingAbort',LatentAbortInProgress:'LatentAbortInProgress',AbortDone:'AbortDone',MAX:'MAX', };
-declare class PawnActionsComponent extends ActorComponent { 
-	ControlledPawn: Pawn;
-	ActionStacks: PawnActionStack[];
-	ActionEvents: PawnActionEvent[];
-	CurrentAction: PawnAction;
-	static Load(ResourceName: string): PawnActionsComponent;
-	static Find(Outer: UObject, ResourceName: string): PawnActionsComponent;
-	static GetDefaultObject(): PawnActionsComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnActionsComponent;
-	K2_PushAction(NewAction: PawnAction,Priority: EAIRequestPriority,Instigator: UObject): boolean;
-	static K2_PerformAction(Pawn: Pawn,Action: PawnAction,Priority: EAIRequestPriority): boolean;
-	K2_ForceAbortAction(ActionToAbort: PawnAction): EPawnActionAbortState;
-	K2_AbortAction(ActionToAbort: PawnAction): EPawnActionAbortState;
-	static C(Other: UObject | any): PawnActionsComponent;
-}
-
-declare type ETaskResourceOverlapPolicy = 'StartOnTop' | 'StartAtEnd' | 'ETaskResourceOverlapPolicy_MAX';
-declare var ETaskResourceOverlapPolicy : { StartOnTop:'StartOnTop',StartAtEnd:'StartAtEnd',ETaskResourceOverlapPolicy_MAX:'ETaskResourceOverlapPolicy_MAX', };
-declare class GameplayTask extends UObject { 
-	InstanceName: string;
-	ResourceOverlapPolicy: ETaskResourceOverlapPolicy;
-	ChildTask: GameplayTask;
-	static Load(ResourceName: string): GameplayTask;
-	static Find(Outer: UObject, ResourceName: string): GameplayTask;
-	static GetDefaultObject(): GameplayTask;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTask;
-	ReadyForActivation(): void;
-	EndTask(): void;
-	static C(Other: UObject | any): GameplayTask;
-}
-
-declare class GameplayResourceSet { 
-	clone() : GameplayResourceSet;
-	static C(Other: UObject | any): GameplayResourceSet;
-}
-
-declare class GameplayTasksComponent extends ActorComponent { 
-	bIsNetDirty: boolean;
-	SimulatedTasks: GameplayTask[];
-	TaskPriorityQueue: GameplayTask[];
-	TickingTasks: GameplayTask[];
-	KnownTasks: GameplayTask[];
-	OnClaimedResourcesChange: UnrealEngineMulticastDelegate<(NewlyClaimed: GameplayResourceSet, FreshlyReleased: GameplayResourceSet) => void>;
-	static Load(ResourceName: string): GameplayTasksComponent;
-	static Find(Outer: UObject, ResourceName: string): GameplayTasksComponent;
-	static GetDefaultObject(): GameplayTasksComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTasksComponent;
-	OnRep_SimulatedTasks(): void;
-	static C(Other: UObject | any): GameplayTasksComponent;
-}
-
-declare class NavAgentSelector { 
-	bSupportsAgent0: boolean;
-	bSupportsAgent1: boolean;
-	bSupportsAgent2: boolean;
-	bSupportsAgent3: boolean;
-	bSupportsAgent4: boolean;
-	bSupportsAgent5: boolean;
-	bSupportsAgent6: boolean;
-	bSupportsAgent7: boolean;
-	bSupportsAgent8: boolean;
-	bSupportsAgent9: boolean;
-	bSupportsAgent10: boolean;
-	bSupportsAgent11: boolean;
-	bSupportsAgent12: boolean;
-	bSupportsAgent13: boolean;
-	bSupportsAgent14: boolean;
-	bSupportsAgent15: boolean;
-	clone() : NavAgentSelector;
-	static C(Other: UObject | any): NavAgentSelector;
-}
-
-declare class NavArea extends NavAreaBase { 
-	DefaultCost: number;
-	FixedAreaEnteringCost: number;
-	DrawColor: Color;
-	SupportedAgents: NavAgentSelector;
-	bSupportsAgent0: boolean;
-	bSupportsAgent1: boolean;
-	bSupportsAgent2: boolean;
-	bSupportsAgent3: boolean;
-	bSupportsAgent4: boolean;
-	bSupportsAgent5: boolean;
-	bSupportsAgent6: boolean;
-	bSupportsAgent7: boolean;
-	bSupportsAgent8: boolean;
-	bSupportsAgent9: boolean;
-	bSupportsAgent10: boolean;
-	bSupportsAgent11: boolean;
-	bSupportsAgent12: boolean;
-	bSupportsAgent13: boolean;
-	bSupportsAgent14: boolean;
-	bSupportsAgent15: boolean;
-	static Load(ResourceName: string): NavArea;
-	static Find(Outer: UObject, ResourceName: string): NavArea;
-	static GetDefaultObject(): NavArea;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavArea;
-	static C(Other: UObject | any): NavArea;
-}
-
-declare class NavigationFilterArea { 
-	AreaClass: UnrealEngineClass;
-	TravelCostOverride: number;
-	EnteringCostOverride: number;
-	bIsExcluded: boolean;
-	bOverrideTravelCost: boolean;
-	bOverrideEnteringCost: boolean;
-	clone() : NavigationFilterArea;
-	static C(Other: UObject | any): NavigationFilterArea;
-}
-
-declare class NavigationFilterFlags { 
-	bNavFlag0: boolean;
-	bNavFlag1: boolean;
-	bNavFlag2: boolean;
-	bNavFlag3: boolean;
-	bNavFlag4: boolean;
-	bNavFlag5: boolean;
-	bNavFlag6: boolean;
-	bNavFlag7: boolean;
-	bNavFlag8: boolean;
-	bNavFlag9: boolean;
-	bNavFlag10: boolean;
-	bNavFlag11: boolean;
-	bNavFlag12: boolean;
-	bNavFlag13: boolean;
-	bNavFlag14: boolean;
-	bNavFlag15: boolean;
-	clone() : NavigationFilterFlags;
-	static C(Other: UObject | any): NavigationFilterFlags;
-}
-
-declare class NavigationQueryFilter extends UObject { 
-	Areas: NavigationFilterArea[];
-	IncludeFlags: NavigationFilterFlags;
-	ExcludeFlags: NavigationFilterFlags;
-	static Load(ResourceName: string): NavigationQueryFilter;
-	static Find(Outer: UObject, ResourceName: string): NavigationQueryFilter;
-	static GetDefaultObject(): NavigationQueryFilter;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationQueryFilter;
-	static C(Other: UObject | any): NavigationQueryFilter;
-}
-
-declare class AIRequestID { 
-	RequestID: any;
-	clone() : AIRequestID;
-	static C(Other: UObject | any): AIRequestID;
-}
-
-declare type EPathFollowingResult = 'Success' | 'Blocked' | 'OffPath' | 'Aborted' | 'Skipped_DEPRECATED' | 'Invalid' | 'EPathFollowingResult_MAX';
-declare var EPathFollowingResult : { Success:'Success',Blocked:'Blocked',OffPath:'OffPath',Aborted:'Aborted',Skipped_DEPRECATED:'Skipped_DEPRECATED',Invalid:'Invalid',EPathFollowingResult_MAX:'EPathFollowingResult_MAX', };
-declare class GameplayTaskResource extends UObject { 
-	ManualResourceID: number;
-	AutoResourceID: any;
-	bManuallySetID: boolean;
-	static Load(ResourceName: string): GameplayTaskResource;
-	static Find(Outer: UObject, ResourceName: string): GameplayTaskResource;
-	static GetDefaultObject(): GameplayTaskResource;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTaskResource;
-	static C(Other: UObject | any): GameplayTaskResource;
-}
-
-declare class BlackboardKeySelector { 
-	AllowedTypes: BlackboardKeyType[];
-	SelectedKeyName: string;
-	SelectedKeyType: UnrealEngineClass;
-	SelectedKeyID: number;
-	bNoneIsAllowedValue: boolean;
-	clone() : BlackboardKeySelector;
-	static C(Other: UObject | any): BlackboardKeySelector;
-}
-
-declare class GameplayTagQuery { 
-	TokenStreamVersion: number;
-	TagDictionary: GameplayTag[];
-	QueryTokenStream: number[];
-	UserDescription: string;
-	AutoDescription: string;
-	clone() : GameplayTagQuery;
-	static C(Other: UObject | any): GameplayTagQuery;
-	MakeGameplayTagQuery(): GameplayTagQuery;
-	static MakeGameplayTagQuery(TagQuery: GameplayTagQuery): GameplayTagQuery;
-}
-
-declare class GameplayTagContainer { 
-	GameplayTags: GameplayTag[];
-	ParentTags: GameplayTag[];
-	clone() : GameplayTagContainer;
-	static C(Other: UObject | any): GameplayTagContainer;
-	AddGameplayTag(Tag?: GameplayTag): {TagContainer: GameplayTagContainer};
-	AppendGameplayTagContainers(InTagContainer?: GameplayTagContainer): {InOutTagContainer: GameplayTagContainer};
-	BreakGameplayTagContainer(GameplayTags?: GameplayTag[]): {GameplayTags: GameplayTag[]};
-	DoesContainerMatchTagQuery(TagQuery: GameplayTagQuery): boolean;
-	EqualEqual_GameplayTagContainer(B: GameplayTagContainer): boolean;
-	GetDebugStringFromGameplayTagContainer(): string;
-	GetNumGameplayTagsInContainer(): number;
-	HasAllTags(OtherContainer: GameplayTagContainer,bExactMatch: boolean): boolean;
-	HasAnyTags(OtherContainer: GameplayTagContainer,bExactMatch: boolean): boolean;
-	HasTag(Tag: GameplayTag,bExactMatch: boolean): boolean;
-	MakeLiteralGameplayTagContainer(): GameplayTagContainer;
-	NotEqual_GameplayTagContainer(B: GameplayTagContainer): boolean;
-	NotEqual_TagContainerTagContainer(B: string): boolean;
-	RemoveGameplayTag(Tag?: GameplayTag): {TagContainer: GameplayTagContainer, $: boolean};
-	static AddGameplayTag(TagContainer?: GameplayTagContainer,Tag?: GameplayTag): {TagContainer: GameplayTagContainer};
-	static AppendGameplayTagContainers(InOutTagContainer?: GameplayTagContainer,InTagContainer?: GameplayTagContainer): {InOutTagContainer: GameplayTagContainer};
-	static BreakGameplayTagContainer(GameplayTagContainer: GameplayTagContainer,GameplayTags?: GameplayTag[]): {GameplayTags: GameplayTag[]};
-	static DoesContainerMatchTagQuery(TagContainer: GameplayTagContainer,TagQuery: GameplayTagQuery): boolean;
-	static EqualEqual_GameplayTagContainer(A: GameplayTagContainer,B: GameplayTagContainer): boolean;
-	static GetDebugStringFromGameplayTagContainer(TagContainer: GameplayTagContainer): string;
-	static GetNumGameplayTagsInContainer(TagContainer: GameplayTagContainer): number;
-	static HasAllTags(TagContainer: GameplayTagContainer,OtherContainer: GameplayTagContainer,bExactMatch: boolean): boolean;
-	static HasAnyTags(TagContainer: GameplayTagContainer,OtherContainer: GameplayTagContainer,bExactMatch: boolean): boolean;
-	static HasTag(TagContainer: GameplayTagContainer,Tag: GameplayTag,bExactMatch: boolean): boolean;
-	static MakeLiteralGameplayTagContainer(Value: GameplayTagContainer): GameplayTagContainer;
-	static NotEqual_GameplayTagContainer(A: GameplayTagContainer,B: GameplayTagContainer): boolean;
-	static NotEqual_TagContainerTagContainer(A: GameplayTagContainer,B: string): boolean;
-	static RemoveGameplayTag(TagContainer?: GameplayTagContainer,Tag?: GameplayTag): {TagContainer: GameplayTagContainer, $: boolean};
-	static MakeGameplayTagContainerFromArray(GameplayTags: GameplayTag[]): GameplayTagContainer;
-}
-
-declare class GameplayTag { 
-	TagName: string;
-	clone() : GameplayTag;
-	static C(Other: UObject | any): GameplayTag;
-	EqualEqual_GameplayTag(B: GameplayTag): boolean;
-	GetDebugStringFromGameplayTag(): string;
-	GetTagName(): string;
-	IsGameplayTagValid(): boolean;
-	MakeGameplayTagContainerFromTag(): GameplayTagContainer;
-	MakeLiteralGameplayTag(): GameplayTag;
-	MatchesAnyTags(OtherContainer: GameplayTagContainer,bExactMatch: boolean): boolean;
-	MatchesTag(TagTwo: GameplayTag,bExactMatch: boolean): boolean;
-	NotEqual_GameplayTag(B: GameplayTag): boolean;
-	NotEqual_TagTag(B: string): boolean;
-	static EqualEqual_GameplayTag(A: GameplayTag,B: GameplayTag): boolean;
-	static GetDebugStringFromGameplayTag(GameplayTag: GameplayTag): string;
-	static GetTagName(GameplayTag: GameplayTag): string;
-	static IsGameplayTagValid(GameplayTag: GameplayTag): boolean;
-	static MakeGameplayTagContainerFromTag(SingleTag: GameplayTag): GameplayTagContainer;
-	static MakeLiteralGameplayTag(Value: GameplayTag): GameplayTag;
-	static MatchesAnyTags(TagOne: GameplayTag,OtherContainer: GameplayTagContainer,bExactMatch: boolean): boolean;
-	static MatchesTag(TagOne: GameplayTag,TagTwo: GameplayTag,bExactMatch: boolean): boolean;
-	static NotEqual_GameplayTag(A: GameplayTag,B: GameplayTag): boolean;
-	static NotEqual_TagTag(A: GameplayTag,B: string): boolean;
-}
-
-declare class BehaviorTreeComponent extends BrainComponent { 
-	NodeInstances: BTNode[];
-	static Load(ResourceName: string): BehaviorTreeComponent;
-	static Find(Outer: UObject, ResourceName: string): BehaviorTreeComponent;
-	static GetDefaultObject(): BehaviorTreeComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeComponent;
-	SetDynamicSubtree(InjectTag: GameplayTag,BehaviorAsset: BehaviorTree): void;
-	GetTagCooldownEndTime(CooldownTag: GameplayTag): number;
-	AddCooldownTagDuration(CooldownTag: GameplayTag,CooldownDuration: number,bAddToExistingDuration: boolean): void;
-	static C(Other: UObject | any): BehaviorTreeComponent;
-}
-
-declare class BTNode extends UObject { 
-	NodeName: string;
-	TreeAsset: BehaviorTree;
-	ParentNode: BTCompositeNode;
-	static Load(ResourceName: string): BTNode;
-	static Find(Outer: UObject, ResourceName: string): BTNode;
-	static GetDefaultObject(): BTNode;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTNode;
-	static C(Other: UObject | any): BTNode;
-	ClearBlackboardValue(Key: BlackboardKeySelector): void;
-	ClearBlackboardValueAsVector(Key: BlackboardKeySelector): void;
-	GetBlackboardValueAsActor(Key: BlackboardKeySelector): Actor;
-	GetBlackboardValueAsBool(Key: BlackboardKeySelector): boolean;
-	GetBlackboardValueAsClass(Key: BlackboardKeySelector): UnrealEngineClass;
-	GetBlackboardValueAsEnum(Key: BlackboardKeySelector): number;
-	GetBlackboardValueAsFloat(Key: BlackboardKeySelector): number;
-	GetBlackboardValueAsInt(Key: BlackboardKeySelector): number;
-	GetBlackboardValueAsName(Key: BlackboardKeySelector): string;
-	GetBlackboardValueAsObject(Key: BlackboardKeySelector): UObject;
-	GetBlackboardValueAsRotator(Key: BlackboardKeySelector): Rotator;
-	GetBlackboardValueAsString(Key: BlackboardKeySelector): string;
-	GetBlackboardValueAsVector(Key: BlackboardKeySelector): Vector;
-	GetOwnerComponent(): BehaviorTreeComponent;
-	GetOwnersBlackboard(): BlackboardComponent;
-	SetBlackboardValueAsBool(Key: BlackboardKeySelector,Value: boolean): void;
-	SetBlackboardValueAsClass(Key: BlackboardKeySelector,Value: UnrealEngineClass): void;
-	SetBlackboardValueAsEnum(Key: BlackboardKeySelector,Value: number): void;
-	SetBlackboardValueAsFloat(Key: BlackboardKeySelector,Value: number): void;
-	SetBlackboardValueAsInt(Key: BlackboardKeySelector,Value: number): void;
-	SetBlackboardValueAsName(Key: BlackboardKeySelector,Value: string): void;
-	SetBlackboardValueAsObject(Key: BlackboardKeySelector,Value: UObject): void;
-	SetBlackboardValueAsRotator(Key: BlackboardKeySelector,Value: Rotator): void;
-	SetBlackboardValueAsString(Key: BlackboardKeySelector,Value: string): void;
-	SetBlackboardValueAsVector(Key: BlackboardKeySelector,Value: Vector): void;
-	StartUsingExternalEvent(OwningActor: Actor): void;
-	StopUsingExternalEvent(): void;
-	static ClearBlackboardValue(NodeOwner: BTNode,Key: BlackboardKeySelector): void;
-	static ClearBlackboardValueAsVector(NodeOwner: BTNode,Key: BlackboardKeySelector): void;
-	static GetBlackboardValueAsActor(NodeOwner: BTNode,Key: BlackboardKeySelector): Actor;
-	static GetBlackboardValueAsBool(NodeOwner: BTNode,Key: BlackboardKeySelector): boolean;
-	static GetBlackboardValueAsClass(NodeOwner: BTNode,Key: BlackboardKeySelector): UnrealEngineClass;
-	static GetBlackboardValueAsEnum(NodeOwner: BTNode,Key: BlackboardKeySelector): number;
-	static GetBlackboardValueAsFloat(NodeOwner: BTNode,Key: BlackboardKeySelector): number;
-	static GetBlackboardValueAsInt(NodeOwner: BTNode,Key: BlackboardKeySelector): number;
-	static GetBlackboardValueAsName(NodeOwner: BTNode,Key: BlackboardKeySelector): string;
-	static GetBlackboardValueAsObject(NodeOwner: BTNode,Key: BlackboardKeySelector): UObject;
-	static GetBlackboardValueAsRotator(NodeOwner: BTNode,Key: BlackboardKeySelector): Rotator;
-	static GetBlackboardValueAsString(NodeOwner: BTNode,Key: BlackboardKeySelector): string;
-	static GetBlackboardValueAsVector(NodeOwner: BTNode,Key: BlackboardKeySelector): Vector;
-	static GetOwnerComponent(NodeOwner: BTNode): BehaviorTreeComponent;
-	static GetOwnersBlackboard(NodeOwner: BTNode): BlackboardComponent;
-	static SetBlackboardValueAsBool(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: boolean): void;
-	static SetBlackboardValueAsClass(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: UnrealEngineClass): void;
-	static SetBlackboardValueAsEnum(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: number): void;
-	static SetBlackboardValueAsFloat(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: number): void;
-	static SetBlackboardValueAsInt(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: number): void;
-	static SetBlackboardValueAsName(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: string): void;
-	static SetBlackboardValueAsObject(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: UObject): void;
-	static SetBlackboardValueAsRotator(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: Rotator): void;
-	static SetBlackboardValueAsString(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: string): void;
-	static SetBlackboardValueAsVector(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: Vector): void;
-	static StartUsingExternalEvent(NodeOwner: BTNode,OwningActor: Actor): void;
-	static StopUsingExternalEvent(NodeOwner: BTNode): void;
-}
-
-declare class BTAuxiliaryNode extends BTNode { 
-	static Load(ResourceName: string): BTAuxiliaryNode;
-	static Find(Outer: UObject, ResourceName: string): BTAuxiliaryNode;
-	static GetDefaultObject(): BTAuxiliaryNode;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTAuxiliaryNode;
-	static C(Other: UObject | any): BTAuxiliaryNode;
-}
-
-declare class BTService extends BTAuxiliaryNode { 
-	Interval: number;
-	RandomDeviation: number;
-	bCallTickOnSearchStart: boolean;
-	bRestartTimerOnEachActivation: boolean;
-	static Load(ResourceName: string): BTService;
-	static Find(Outer: UObject, ResourceName: string): BTService;
-	static GetDefaultObject(): BTService;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTService;
-	static C(Other: UObject | any): BTService;
-}
-
-declare class BTTaskNode extends BTNode { 
-	Services: BTService[];
-	bIgnoreRestartSelf: boolean;
-	static Load(ResourceName: string): BTTaskNode;
-	static Find(Outer: UObject, ResourceName: string): BTTaskNode;
-	static GetDefaultObject(): BTTaskNode;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTaskNode;
-	static C(Other: UObject | any): BTTaskNode;
-}
-
-declare type EBTFlowAbortMode = 'None' | 'LowerPriority' | 'Self' | 'Both' | 'EBTFlowAbortMode_MAX';
-declare var EBTFlowAbortMode : { None:'None',LowerPriority:'LowerPriority',Self:'Self',Both:'Both',EBTFlowAbortMode_MAX:'EBTFlowAbortMode_MAX', };
-declare class BTDecorator extends BTAuxiliaryNode { 
-	bInverseCondition: boolean;
-	FlowAbortMode: EBTFlowAbortMode;
-	static Load(ResourceName: string): BTDecorator;
-	static Find(Outer: UObject, ResourceName: string): BTDecorator;
-	static GetDefaultObject(): BTDecorator;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator;
-	static C(Other: UObject | any): BTDecorator;
-}
-
-declare type EBTDecoratorLogic = 'Invalid' | 'Test' | 'And' | 'Or' | 'Not' | 'EBTDecoratorLogic_MAX';
-declare var EBTDecoratorLogic : { Invalid:'Invalid',Test:'Test',And:'And',Or:'Or',Not:'Not',EBTDecoratorLogic_MAX:'EBTDecoratorLogic_MAX', };
-declare class BTDecoratorLogic { 
-	Operation: EBTDecoratorLogic;
-	Number: any;
-	clone() : BTDecoratorLogic;
-	static C(Other: UObject | any): BTDecoratorLogic;
-}
-
-declare class BTCompositeChild { 
-	ChildComposite: BTCompositeNode;
-	ChildTask: BTTaskNode;
-	Decorators: BTDecorator[];
-	DecoratorOps: BTDecoratorLogic[];
-	clone() : BTCompositeChild;
-	static C(Other: UObject | any): BTCompositeChild;
-}
-
-declare class BTCompositeNode extends BTNode { 
-	Children: BTCompositeChild[];
-	Services: BTService[];
-	bApplyDecoratorScope: boolean;
-	static Load(ResourceName: string): BTCompositeNode;
-	static Find(Outer: UObject, ResourceName: string): BTCompositeNode;
-	static GetDefaultObject(): BTCompositeNode;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTCompositeNode;
-	static C(Other: UObject | any): BTCompositeNode;
-}
-
-declare class BehaviorTree extends UObject { 
-	RootNode: BTCompositeNode;
-	BTGraph: EdGraph;
-	LastEditedDocuments: EditedDocumentInfo[];
-	BlackboardAsset: BlackboardData;
-	RootDecorators: BTDecorator[];
-	RootDecoratorOps: BTDecoratorLogic[];
-	static Load(ResourceName: string): BehaviorTree;
-	static Find(Outer: UObject, ResourceName: string): BehaviorTree;
-	static GetDefaultObject(): BehaviorTree;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTree;
-	static C(Other: UObject | any): BehaviorTree;
-}
-
-declare type EPathFollowingRequestResult = 'Failed' | 'AlreadyAtGoal' | 'RequestSuccessful' | 'EPathFollowingRequestResult_MAX';
-declare var EPathFollowingRequestResult : { Failed:'Failed',AlreadyAtGoal:'AlreadyAtGoal',RequestSuccessful:'RequestSuccessful',EPathFollowingRequestResult_MAX:'EPathFollowingRequestResult_MAX', };
-declare type EPathFollowingStatus = 'Idle' | 'Waiting' | 'Paused' | 'Moving' | 'EPathFollowingStatus_MAX';
-declare var EPathFollowingStatus : { Idle:'Idle',Waiting:'Waiting',Paused:'Paused',Moving:'Moving',EPathFollowingStatus_MAX:'EPathFollowingStatus_MAX', };
-declare class AIController extends Controller { 
-	bStopAILogicOnUnposses: boolean;
-	bLOSflag: boolean;
-	bSkipExtraLOSChecks: boolean;
-	bAllowStrafe: boolean;
-	bWantsPlayerState: boolean;
-	bSetControlRotationFromPawnOrientation: boolean;
-	PathFollowingComponent: PathFollowingComponent;
-	BrainComponent: BrainComponent;
-	PerceptionComponent: AIPerceptionComponent;
-	ActionsComp: PawnActionsComponent;
-	Blackboard: BlackboardComponent;
-	CachedGameplayTasksComponent: GameplayTasksComponent;
-	DefaultNavigationFilterClass: UnrealEngineClass;
-	ReceiveMoveCompleted: UnrealEngineMulticastDelegate<(RequestID: AIRequestID, Result: EPathFollowingResult) => void>;
-	static GetDefaultObject(): AIController;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIController;
-	UseBlackboard(BlackboardAsset: BlackboardData,BlackboardComponent?: BlackboardComponent): {BlackboardComponent: BlackboardComponent, $: boolean};
-	UnclaimTaskResource(ResourceClass: UnrealEngineClass): void;
-	SetPathFollowingComponent(NewPFComponent: PathFollowingComponent): void;
-	SetMoveBlockDetection(bEnable: boolean): void;
-	RunBehaviorTree(BTAsset: BehaviorTree): boolean;
-	OnUsingBlackBoard(BlackboardComp: BlackboardComponent,BlackboardAsset: BlackboardData): void;
-	OnUnpossess(UnpossessedPawn: Pawn): void;
-	OnPossess(PossessedPawn: Pawn): void;
-	OnGameplayTaskResourcesClaimed(NewlyClaimed: GameplayResourceSet,FreshlyReleased: GameplayResourceSet): void;
-	MoveToLocation(Dest: Vector,AcceptanceRadius: number,bStopOnOverlap: boolean,bUsePathfinding: boolean,bProjectDestinationToNavigation: boolean,bCanStrafe: boolean,FilterClass: UnrealEngineClass,bAllowPartialPath: boolean): EPathFollowingRequestResult;
-	MoveToActor(Goal: Actor,AcceptanceRadius: number,bStopOnOverlap: boolean,bUsePathfinding: boolean,bCanStrafe: boolean,FilterClass: UnrealEngineClass,bAllowPartialPath: boolean): EPathFollowingRequestResult;
-	K2_SetFocus(NewFocus: Actor): void;
-	K2_SetFocalPoint(FP: Vector): void;
-	K2_ClearFocus(): void;
-	HasPartialPath(): boolean;
-	GetPathFollowingComponent(): PathFollowingComponent;
-	GetMoveStatus(): EPathFollowingStatus;
-	GetImmediateMoveDestination(): Vector;
-	GetFocusActor(): Actor;
-	GetFocalPointOnActor(Actor: Actor): Vector;
-	GetFocalPoint(): Vector;
-	GetAIPerceptionComponent(): AIPerceptionComponent;
-	ClaimTaskResource(ResourceClass: UnrealEngineClass): void;
-	static C(Other: UObject | any): AIController;
-}
-
-declare class XRDeviceId { 
-	SystemName: string;
-	DeviceID: number;
-	clone() : XRDeviceId;
-	static C(Other: UObject | any): XRDeviceId;
-	GetDevicePose(bIsTracked?: boolean,Orientation?: Rotator,bHasPositionalTracking?: boolean,Position?: Vector): {bIsTracked: boolean, Orientation: Rotator, bHasPositionalTracking: boolean, Position: Vector};
-	IsDeviceTracking(): boolean;
-	static GetDevicePose(XRDeviceId: XRDeviceId,bIsTracked?: boolean,Orientation?: Rotator,bHasPositionalTracking?: boolean,Position?: Vector): {bIsTracked: boolean, Orientation: Rotator, bHasPositionalTracking: boolean, Position: Vector};
-	static IsDeviceTracking(XRDeviceId: XRDeviceId): boolean;
-}
-
-declare class Actor extends UObject { 
-	PrimaryActorTick: ActorTickFunction;
-	bHidden: boolean;
-	bNetTemporary: boolean;
-	bNetStartup: boolean;
-	bOnlyRelevantToOwner: boolean;
-	bAlwaysRelevant: boolean;
-	bReplicateMovement: boolean;
-	bTearOff: boolean;
-	bExchangedRoles: boolean;
-	bNetLoadOnClient: boolean;
-	bNetUseOwnerRelevancy: boolean;
-	bRelevantForNetworkReplays: boolean;
-	bReplayRewindable: boolean;
-	bAllowTickBeforeBeginPlay: boolean;
-	bAutoDestroyWhenFinished: boolean;
-	bBlockInput: boolean;
-	bCanBeDamaged: boolean;
-	bCollideWhenPlacing: boolean;
-	bFindCameraComponentWhenViewTarget: boolean;
-	bGenerateOverlapEventsDuringLevelStreaming: boolean;
-	bIgnoresOriginShifting: boolean;
-	bEnableAutoLODGeneration: boolean;
-	bIsEditorOnlyActor: boolean;
-	bActorSeamlessTraveled: boolean;
-	bReplicates: boolean;
-	bCanBeInCluster: boolean;
-	bAllowReceiveTickEventOnDedicatedServer: boolean;
-	bActorEnableCollision: boolean;
-	bActorIsBeingDestroyed: boolean;
-	RemoteRole: ENetRole;
-	ReplicatedMovement: RepMovement;
-	InitialLifeSpan: number;
-	CustomTimeDilation: number;
-	AttachmentReplication: RepAttachment;
-	Owner: Actor;
-	NetDriverName: string;
-	Role: ENetRole;
-	NetDormancy: ENetDormancy;
-	SpawnCollisionHandlingMethod: ESpawnActorCollisionHandlingMethod;
-	AutoReceiveInput: EAutoReceiveInput;
-	InputConsumeOption: EInputConsumeOptions;
-	InputPriority: number;
-	InputComponent: InputComponent;
-	NetCullDistanceSquared: number;
-	NetTag: number;
-	NetUpdateFrequency: number;
-	MinNetUpdateFrequency: number;
-	NetPriority: number;
-	Instigator: Pawn;
-	Children: Actor[];
-	RootComponent: SceneComponent;
-	PivotOffset: Vector;
-	ControllingMatineeActors: MatineeActor[];
-	Layers: string[];
-	ParentComponentActor: any;
-	ParentComponent: any;
-	GroupActor: Actor;
-	SpriteScale: number;
-	HiddenEditorViews: any;
-	ActorLabel: string;
-	FolderPath: string;
-	bHiddenEd: boolean;
-	bIsEditorPreviewActor: boolean;
-	bHiddenEdLayer: boolean;
-	bHiddenEdLevel: boolean;
-	bLockLocation: boolean;
-	bActorLabelEditable: boolean;
-	bEditable: boolean;
-	bListedInSceneOutliner: boolean;
-	bHiddenEdTemporary: boolean;
-	Tags: string[];
-	OnTakeAnyDamage: UnrealEngineMulticastDelegate<(DamagedActor: Actor, Damage: number, DamageType: DamageType, InstigatedBy: Controller, DamageCauser: Actor) => void>;
-	OnTakePointDamage: UnrealEngineMulticastDelegate<(DamagedActor: Actor, Damage: number, InstigatedBy: Controller, HitLocation: Vector, FHitComponent: PrimitiveComponent, BoneName: string, ShotFromDirection: Vector, DamageType: DamageType, DamageCauser: Actor) => void>;
-	OnTakeRadialDamage: UnrealEngineMulticastDelegate<(DamagedActor: Actor, Damage: number, DamageType: DamageType, Origin: Vector, HitInfo: HitResult, InstigatedBy: Controller, DamageCauser: Actor) => void>;
-	OnActorBeginOverlap: UnrealEngineMulticastDelegate<(OverlappedActor: Actor, OtherActor: Actor) => void>;
-	OnActorEndOverlap: UnrealEngineMulticastDelegate<(OverlappedActor: Actor, OtherActor: Actor) => void>;
-	OnBeginCursorOver: UnrealEngineMulticastDelegate<(TouchedActor: Actor) => void>;
-	OnEndCursorOver: UnrealEngineMulticastDelegate<(TouchedActor: Actor) => void>;
-	OnClicked: UnrealEngineMulticastDelegate<(TouchedActor: Actor, ButtonPressed: Key) => void>;
-	OnReleased: UnrealEngineMulticastDelegate<(TouchedActor: Actor, ButtonReleased: Key) => void>;
-	OnInputTouchBegin: UnrealEngineMulticastDelegate<(FingerIndex: ETouchIndex, TouchedActor: Actor) => void>;
-	OnInputTouchEnd: UnrealEngineMulticastDelegate<(FingerIndex: ETouchIndex, TouchedActor: Actor) => void>;
-	OnInputTouchEnter: UnrealEngineMulticastDelegate<(FingerIndex: ETouchIndex, TouchedActor: Actor) => void>;
-	OnInputTouchLeave: UnrealEngineMulticastDelegate<(FingerIndex: ETouchIndex, TouchedActor: Actor) => void>;
-	OnActorHit: UnrealEngineMulticastDelegate<(SelfActor: Actor, OtherActor: Actor, NormalImpulse: Vector, Hit: HitResult) => void>;
-	OnDestroyed: UnrealEngineMulticastDelegate<(DestroyedActor: Actor) => void>;
-	OnEndPlay: UnrealEngineMulticastDelegate<(Actor: Actor, EndPlayReason: EEndPlayReason) => void>;
-	InstanceComponents: ActorComponent[];
-	BlueprintCreatedComponents: ActorComponent[];
-	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
-	static GetDefaultObject(): Actor;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Actor;
-	WasRecentlyRendered(Tolerance: number): boolean;
-	UserConstructionScript(): void;
-	TearOff(): void;
-	SnapRootComponentTo(InParentActor: Actor,InSocketName: string): void;
-	SetTickGroup(NewTickGroup: ETickingGroup): void;
-	SetTickableWhenPaused(bTickableWhenPaused: boolean): void;
-	SetReplicates(bInReplicates: boolean): void;
-	SetReplicateMovement(bInReplicateMovement: boolean): void;
-	SetOwner(NewOwner: Actor): void;
-	SetNetDormancy(NewDormancy: ENetDormancy): void;
-	SetLifeSpan(InLifespan: number): void;
-	SetIsTemporarilyHiddenInEditor(bIsHidden: boolean): void;
-	SetFolderPath(NewFolderPath: string): void;
-	SetActorTickInterval(TickInterval: number): void;
-	SetActorTickEnabled(bEnabled: boolean): void;
-	SetActorScale3D(NewScale3D: Vector): void;
-	SetActorRelativeScale3D(NewRelativeScale: Vector): void;
-	SetActorLabel(NewActorLabel: string,bMarkDirty: boolean): void;
-	SetActorHiddenInGame(bNewHidden: boolean): void;
-	SetActorEnableCollision(bNewActorEnableCollision: boolean): void;
-	RemoveTickPrerequisiteComponent(PrerequisiteComponent: ActorComponent): void;
-	RemoveTickPrerequisiteActor(PrerequisiteActor: Actor): void;
-	ReceiveTick(DeltaSeconds: number): void;
-	ReceiveRadialDamage(DamageReceived: number,DamageType: DamageType,Origin: Vector,HitInfo: HitResult,InstigatedBy: Controller,DamageCauser: Actor): void;
-	ReceivePointDamage(Damage: number,DamageType: DamageType,HitLocation: Vector,HitNormal: Vector,HitComponent: PrimitiveComponent,BoneName: string,ShotFromDirection: Vector,InstigatedBy: Controller,DamageCauser: Actor,HitInfo: HitResult): void;
-	ReceiveHit(MyComp: PrimitiveComponent,Other: Actor,OtherComp: PrimitiveComponent,bSelfMoved: boolean,HitLocation: Vector,HitNormal: Vector,NormalImpulse: Vector,Hit: HitResult): void;
-	ReceiveEndPlay(EndPlayReason: EEndPlayReason): void;
-	ReceiveDestroyed(): void;
-	ReceiveBeginPlay(): void;
-	ReceiveAnyDamage(Damage: number,DamageType: DamageType,InstigatedBy: Controller,DamageCauser: Actor): void;
-	ReceiveActorOnReleased(ButtonReleased: Key): void;
-	ReceiveActorOnInputTouchLeave(FingerIndex: ETouchIndex): void;
-	ReceiveActorOnInputTouchEnter(FingerIndex: ETouchIndex): void;
-	ReceiveActorOnInputTouchEnd(FingerIndex: ETouchIndex): void;
-	ReceiveActorOnInputTouchBegin(FingerIndex: ETouchIndex): void;
-	ReceiveActorOnClicked(ButtonPressed: Key): void;
-	ReceiveActorEndOverlap(OtherActor: Actor): void;
-	ReceiveActorEndCursorOver(): void;
-	ReceiveActorBeginOverlap(OtherActor: Actor): void;
-	ReceiveActorBeginCursorOver(): void;
-	PrestreamTextures(Seconds: number,bEnableStreaming: boolean,CinematicTextureGroups: number): void;
-	OnRep_ReplicateMovement(): void;
-	OnRep_ReplicatedMovement(): void;
-	OnRep_Owner(): void;
-	OnRep_Instigator(): void;
-	OnRep_AttachmentReplication(): void;
-	MakeNoise(Loudness: number,NoiseInstigator: Pawn,NoiseLocation: Vector,MaxRange: number,Tag: string): void;
-	MakeMIDForMaterial(Parent: MaterialInterface): MaterialInstanceDynamic;
-	K2_TeleportTo(DestLocation: Vector,DestRotation: Rotator): boolean;
-	K2_SetActorTransform(NewTransform: Transform,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult, $: boolean};
-	K2_SetActorRotation(NewRotation: Rotator,bTeleportPhysics: boolean): boolean;
-	K2_SetActorRelativeTransform(NewRelativeTransform: Transform,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
-	K2_SetActorRelativeRotation(NewRelativeRotation: Rotator,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
-	K2_SetActorRelativeLocation(NewRelativeLocation: Vector,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
-	K2_SetActorLocationAndRotation(NewLocation: Vector,NewRotation: Rotator,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult, $: boolean};
-	K2_SetActorLocation(NewLocation: Vector,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult, $: boolean};
-	K2_OnReset(): void;
-	K2_OnEndViewTarget(PC: PlayerController): void;
-	K2_OnBecomeViewTarget(PC: PlayerController): void;
-	K2_GetRootComponent(): SceneComponent;
-	K2_GetActorRotation(): Rotator;
-	K2_GetActorLocation(): Vector;
-	K2_DetachFromActor(LocationRule: EDetachmentRule,RotationRule: EDetachmentRule,ScaleRule: EDetachmentRule): void;
-	K2_DestroyComponent(Component: ActorComponent): void;
-	K2_DestroyActor(): void;
-	K2_AttachToComponent(Parent: SceneComponent,SocketName: string,LocationRule: EAttachmentRule,RotationRule: EAttachmentRule,ScaleRule: EAttachmentRule,bWeldSimulatedBodies: boolean): void;
-	K2_AttachToActor(ParentActor: Actor,SocketName: string,LocationRule: EAttachmentRule,RotationRule: EAttachmentRule,ScaleRule: EAttachmentRule,bWeldSimulatedBodies: boolean): void;
-	K2_AttachRootComponentToActor(InParentActor: Actor,InSocketName: string,AttachLocationType: EAttachLocation,bWeldSimulatedBodies: boolean): void;
-	K2_AttachRootComponentTo(InParent: SceneComponent,InSocketName: string,AttachLocationType: EAttachLocation,bWeldSimulatedBodies: boolean): void;
-	K2_AddActorWorldTransform(DeltaTransform: Transform,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
-	K2_AddActorWorldRotation(DeltaRotation: Rotator,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
-	K2_AddActorWorldOffset(DeltaLocation: Vector,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
-	K2_AddActorLocalTransform(NewTransform: Transform,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
-	K2_AddActorLocalRotation(DeltaRotation: Rotator,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
-	K2_AddActorLocalOffset(DeltaLocation: Vector,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
-	IsTemporarilyHiddenInEditor(bIncludeParent: boolean): boolean;
-	IsSelectable(): boolean;
-	IsOverlappingActor(Other: Actor): boolean;
-	IsHiddenEdAtStartup(): boolean;
-	IsHiddenEd(): boolean;
-	IsEditable(): boolean;
-	IsChildActor(): boolean;
-	IsActorTickEnabled(): boolean;
-	IsActorBeingDestroyed(): boolean;
-	HasAuthority(): boolean;
-	GetVerticalDistanceTo(OtherActor: Actor): number;
-	GetVelocity(): Vector;
-	GetTransform(): Transform;
-	GetTickableWhenPaused(): boolean;
-	GetSquaredDistanceTo(OtherActor: Actor): number;
-	GetRemoteRole(): ENetRole;
-	GetParentComponent(): ChildActorComponent;
-	GetParentActor(): Actor;
-	GetOwner(): Actor;
-	GetOverlappingComponents(OverlappingComponents?: PrimitiveComponent[]): {OverlappingComponents: PrimitiveComponent[]};
-	GetOverlappingActors(OverlappingActors?: Actor[],ClassFilter?: UnrealEngineClass): {OverlappingActors: Actor[]};
-	GetLocalRole(): ENetRole;
-	GetLifeSpan(): number;
-	GetInstigatorController(): Controller;
-	GetInstigator(): Pawn;
-	GetInputVectorAxisValue(InputAxisKey: Key): Vector;
-	GetInputAxisValue(InputAxisName: string): number;
-	GetInputAxisKeyValue(InputAxisKey: Key): number;
-	GetHorizontalDotProductTo(OtherActor: Actor): number;
-	GetHorizontalDistanceTo(OtherActor: Actor): number;
-	GetGameTimeSinceCreation(): number;
-	GetFolderPath(): string;
-	GetDotProductTo(OtherActor: Actor): number;
-	GetDistanceTo(OtherActor: Actor): number;
-	GetComponentsByTag(ComponentClass: UnrealEngineClass,Tag: string): ActorComponent[];
-	GetComponentsByClass(ComponentClass: UnrealEngineClass): ActorComponent[];
-	GetComponentByClass(ComponentClass: UnrealEngineClass): ActorComponent;
-	GetAttachParentSocketName(): string;
-	GetAttachParentActor(): Actor;
-	GetAttachedActors(OutActors?: Actor[]): {OutActors: Actor[]};
-	GetAllChildActors(ChildActors?: Actor[],bIncludeDescendants?: boolean): {ChildActors: Actor[]};
-	GetActorUpVector(): Vector;
-	GetActorTimeDilation(): number;
-	GetActorTickInterval(): number;
-	GetActorScale3D(): Vector;
-	GetActorRightVector(): Vector;
-	GetActorRelativeScale3D(): Vector;
-	GetActorLabel(): string;
-	GetActorForwardVector(): Vector;
-	GetActorEyesViewPoint(OutLocation?: Vector,OutRotation?: Rotator): {OutLocation: Vector, OutRotation: Rotator};
-	GetActorEnableCollision(): boolean;
-	GetActorBounds(bOnlyCollidingComponents: boolean,Origin?: Vector,BoxExtent?: Vector): {Origin: Vector, BoxExtent: Vector};
-	ForceNetUpdate(): void;
-	FlushNetDormancy(): void;
-	EnableInput(PlayerController: PlayerController): void;
-	DisableInput(PlayerController: PlayerController): void;
-	DetachRootComponentFromParent(bMaintainWorldPosition: boolean): void;
-	AddTickPrerequisiteComponent(PrerequisiteComponent: ActorComponent): void;
-	AddTickPrerequisiteActor(PrerequisiteActor: Actor): void;
-	AddComponent(TemplateName: string,bManualAttachment: boolean,RelativeTransform: Transform,ComponentTemplateContext: UObject): ActorComponent;
-	ActorHasTag(Tag: string): boolean;
-	static C(Other: UObject | any): Actor;
-	ClearActorLabel(): void;
-	GetActorLabel(): string;
-	GetFolderPath(): string;
-	IsActorLabelEditable(): boolean;
-	SetActorLabel(NewActorLabel: string,bMarkDirty: boolean): void;
-	SetFolderPath(NewFolderPath: string): void;
-	SetFolderPath_Recursively(NewFolderPath: string): void;
-	SetIsTemporarilyHiddenInEditor(bIsHidden: boolean): void;
-	Actor_GetWorld(): World;
-	GetLastRenderTime(): number;
-	GetLevel(): Level;
-	IsPendingKill(): boolean;
-	ReregisterAllComponents(): void;
-	SetActorFlags(Flags: number): void;
-	SetRootComponent(Component: SceneComponent): void;
-	SetFocusActor(): void;
-	GetActorBounds(Origin?: Vector,BoxExtent?: Vector): {Origin: Vector, BoxExtent: Vector};
-	ApplyDamage(BaseDamage: number,EventInstigator: Controller,DamageCauser: Actor,DamageTypeClass: UnrealEngineClass): number;
-	ApplyPointDamage(BaseDamage: number,HitFromDirection: Vector,HitInfo: HitResult,EventInstigator: Controller,DamageCauser: Actor,DamageTypeClass: UnrealEngineClass): number;
-	FinishSpawningActor(SpawnTransform: Transform): Actor;
-	GetAIController(): AIController;
-	GetBlackboard(): BlackboardComponent;
-	AddDeviceVisualizationComponentBlocking(XRDeviceId: XRDeviceId,bManualAttachment: boolean,RelativeTransform: Transform): PrimitiveComponent;
-	AddNamedDeviceVisualizationComponentBlocking(SystemName: string,DeviceName: string,bManualAttachment: boolean,RelativeTransform: Transform,XRDeviceId?: XRDeviceId): {XRDeviceId: XRDeviceId, $: PrimitiveComponent};
-	static ClearActorLabel(Actor: Actor): void;
-	static GetActorLabel(Actor: Actor): string;
-	static GetFolderPath(Actor: Actor): string;
-	static IsActorLabelEditable(Actor: Actor): boolean;
-	static SetActorLabel(Actor: Actor,NewActorLabel: string,bMarkDirty: boolean): void;
-	static SetFolderPath(Actor: Actor,NewFolderPath: string): void;
-	static SetFolderPath_Recursively(Actor: Actor,NewFolderPath: string): void;
-	static SetIsTemporarilyHiddenInEditor(Actor: Actor,bIsHidden: boolean): void;
-	static Actor_GetWorld(Actor: Actor): World;
-	static GetLastRenderTime(Actor: Actor): number;
-	static GetLevel(Actor: Actor): Level;
-	static IsPendingKill(InActor: Actor): boolean;
-	static ReregisterAllComponents(Actor: Actor): void;
-	static SetActorFlags(Actor: Actor,Flags: number): void;
-	static SetRootComponent(Actor: Actor,Component: SceneComponent): void;
-	static SetFocusActor(InFocusActor: Actor): void;
-	static GetActorBounds(Actor: Actor,Origin?: Vector,BoxExtent?: Vector): {Origin: Vector, BoxExtent: Vector};
-	static ApplyDamage(DamagedActor: Actor,BaseDamage: number,EventInstigator: Controller,DamageCauser: Actor,DamageTypeClass: UnrealEngineClass): number;
-	static ApplyPointDamage(DamagedActor: Actor,BaseDamage: number,HitFromDirection: Vector,HitInfo: HitResult,EventInstigator: Controller,DamageCauser: Actor,DamageTypeClass: UnrealEngineClass): number;
-	static FinishSpawningActor(Actor: Actor,SpawnTransform: Transform): Actor;
-	static GetAIController(ControlledActor: Actor): AIController;
-	static GetBlackboard(Target: Actor): BlackboardComponent;
-	static AddDeviceVisualizationComponentBlocking(Target: Actor,XRDeviceId: XRDeviceId,bManualAttachment: boolean,RelativeTransform: Transform): PrimitiveComponent;
-	static AddNamedDeviceVisualizationComponentBlocking(Target: Actor,SystemName: string,DeviceName: string,bManualAttachment: boolean,RelativeTransform: Transform,XRDeviceId?: XRDeviceId): {XRDeviceId: XRDeviceId, $: PrimitiveComponent};
-}
-
-declare class LineBatchComponent extends PrimitiveComponent { 
-	static Load(ResourceName: string): LineBatchComponent;
-	static Find(Outer: UObject, ResourceName: string): LineBatchComponent;
-	static GetDefaultObject(): LineBatchComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LineBatchComponent;
-	static C(Other: UObject | any): LineBatchComponent;
-}
-
-declare type EStreamingVolumeUsage = 'SVB_Loading' | 'SVB_LoadingAndVisibility' | 'SVB_VisibilityBlockingOnLoad' | 'SVB_BlockingOnLoad' | 'SVB_LoadingNotVisible' | 'SVB_MAX';
-declare var EStreamingVolumeUsage : { SVB_Loading:'SVB_Loading',SVB_LoadingAndVisibility:'SVB_LoadingAndVisibility',SVB_VisibilityBlockingOnLoad:'SVB_VisibilityBlockingOnLoad',SVB_BlockingOnLoad:'SVB_BlockingOnLoad',SVB_LoadingNotVisible:'SVB_LoadingNotVisible',SVB_MAX:'SVB_MAX', };
-declare class LevelStreamingVolume extends Volume { 
-	StreamingLevelNames: string[];
-	bEditorPreVisOnly: boolean;
-	bDisabled: boolean;
-	StreamingUsage: EStreamingVolumeUsage;
-	static GetDefaultObject(): LevelStreamingVolume;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelStreamingVolume;
-	static C(Other: UObject | any): LevelStreamingVolume;
-}
-
-declare class LevelStreaming extends UObject { 
-	PackageName: string;
-	WorldAsset: World;
-	PackageNameToLoad: string;
-	LODPackageNames: string[];
-	LevelTransform: Transform;
-	LevelLODIndex: number;
-	bShouldBeVisibleInEditor: boolean;
-	bShouldBeVisible: boolean;
-	bShouldBeLoaded: boolean;
-	bLocked: boolean;
-	bIsStatic: boolean;
-	bShouldBlockOnLoad: boolean;
-	bShouldBlockOnUnload: boolean;
-	bDisableDistanceStreaming: boolean;
-	bDrawOnLevelStatusMap: boolean;
-	DrawColor: Color;
-	LevelColor: LinearColor;
-	EditorStreamingVolumes: LevelStreamingVolume[];
-	MinTimeBetweenVolumeUnloadRequests: number;
-	Keywords: string[];
-	OnLevelLoaded: UnrealEngineMulticastDelegate<() => void>;
-	OnLevelUnloaded: UnrealEngineMulticastDelegate<() => void>;
-	OnLevelShown: UnrealEngineMulticastDelegate<() => void>;
-	OnLevelHidden: UnrealEngineMulticastDelegate<() => void>;
-	LoadedLevel: Level;
-	PendingUnloadLevel: Level;
-	FolderPath: string;
-	static Load(ResourceName: string): LevelStreaming;
-	static Find(Outer: UObject, ResourceName: string): LevelStreaming;
-	static GetDefaultObject(): LevelStreaming;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelStreaming;
-	ShouldBeLoaded(): boolean;
-	SetShouldBeVisible(bInShouldBeVisible: boolean): void;
-	SetShouldBeLoaded(bInShouldBeLoaded: boolean): void;
-	SetLevelLODIndex(LODIndex: number): void;
-	IsStreamingStatePending(): boolean;
-	IsLevelVisible(): boolean;
-	IsLevelLoaded(): boolean;
-	GetWorldAssetPackageFName(): string;
-	GetLevelScriptActor(): LevelScriptActor;
-	CreateInstance(UniqueInstanceName: string): LevelStreaming;
-	static C(Other: UObject | any): LevelStreaming;
-}
-
-declare class DemoNetDriver extends NetDriver { 
-	RollbackNetStartupActors: any;
-	CheckpointSaveMaxMSPerFrame: number;
-	bIsLocalReplay: boolean;
-	static Load(ResourceName: string): DemoNetDriver;
-	static Find(Outer: UObject, ResourceName: string): DemoNetDriver;
-	static GetDefaultObject(): DemoNetDriver;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DemoNetDriver;
-	static C(Other: UObject | any): DemoNetDriver;
-}
-
-declare class ParticleEventManager extends Actor { 
-	static GetDefaultObject(): ParticleEventManager;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleEventManager;
-	static C(Other: UObject | any): ParticleEventManager;
-}
-
-declare class NavigationSystemBase extends UObject { 
-	static Load(ResourceName: string): NavigationSystemBase;
-	static Find(Outer: UObject, ResourceName: string): NavigationSystemBase;
-	static GetDefaultObject(): NavigationSystemBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationSystemBase;
-	static C(Other: UObject | any): NavigationSystemBase;
-}
-
-declare class AISystemBase extends UObject { 
-	AISystemClassName: SoftClassPath;
-	AISystemModuleName: string;
-	bInstantiateAISystemOnClient: boolean;
-	static Load(ResourceName: string): AISystemBase;
-	static Find(Outer: UObject, ResourceName: string): AISystemBase;
-	static GetDefaultObject(): AISystemBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISystemBase;
-	static C(Other: UObject | any): AISystemBase;
-}
-
-declare class AvoidanceManager extends UObject { 
-	DefaultTimeToLive: number;
-	LockTimeAfterAvoid: number;
-	LockTimeAfterClean: number;
-	DeltaTimeToPredict: number;
-	ArtificialRadiusExpansion: number;
-	TestHeightDifference: number;
-	HeightCheckMargin: number;
-	static Load(ResourceName: string): AvoidanceManager;
-	static Find(Outer: UObject, ResourceName: string): AvoidanceManager;
-	static GetDefaultObject(): AvoidanceManager;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AvoidanceManager;
-	RegisterMovementComponent(MovementComp: MovementComponent,AvoidanceWeight: number): boolean;
-	GetObjectCount(): number;
-	GetNewAvoidanceUID(): number;
-	GetAvoidanceVelocityForComponent(MovementComp: MovementComponent): Vector;
-	static C(Other: UObject | any): AvoidanceManager;
-}
-
-declare class LevelCollection { 
-	GameState: GameStateBase;
-	NetDriver: NetDriver;
-	DemoNetDriver: DemoNetDriver;
-	PersistentLevel: Level;
-	Levels: any;
-	clone() : LevelCollection;
-	static C(Other: UObject | any): LevelCollection;
-}
-
-declare class MaterialParameterCollectionInstance extends UObject { 
-	Collection: MaterialParameterCollection;
-	static Load(ResourceName: string): MaterialParameterCollectionInstance;
-	static Find(Outer: UObject, ResourceName: string): MaterialParameterCollectionInstance;
-	static GetDefaultObject(): MaterialParameterCollectionInstance;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialParameterCollectionInstance;
-	static C(Other: UObject | any): MaterialParameterCollectionInstance;
-}
-
-declare class LevelViewportInfo { 
-	CamPosition: Vector;
-	CamRotation: Rotator;
-	CamOrthoZoom: number;
-	CamUpdated: boolean;
-	clone() : LevelViewportInfo;
-	static C(Other: UObject | any): LevelViewportInfo;
-}
-
-declare class WorldComposition extends UObject { 
-	TilesStreaming: LevelStreaming[];
-	TilesStreamingTimeThreshold: any;
-	bLoadAllTilesDuringCinematic: boolean;
-	bRebaseOriginIn3DSpace: boolean;
-	bLockTilesLocation: boolean;
-	RebaseOriginDistance: number;
-	static Load(ResourceName: string): WorldComposition;
-	static Find(Outer: UObject, ResourceName: string): WorldComposition;
-	static GetDefaultObject(): WorldComposition;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldComposition;
-	static C(Other: UObject | any): WorldComposition;
-}
-
-declare class WorldPSCPool { 
-	WorldParticleSystemPools: any;
-	clone() : WorldPSCPool;
-	static C(Other: UObject | any): WorldPSCPool;
-}
-
-declare class ActorLayer { 
-	Name: string;
-	clone() : ActorLayer;
-	static C(Other: UObject | any): ActorLayer;
-}
-
-declare class URL { 
-	Protocol: string;
-	Host: string;
-	Port: number;
-	Map: string;
-	RedirectURL: string;
-	Op: string[];
-	Portal: string;
-	Valid: number;
-	clone() : URL;
-	static C(Other: UObject | any): URL;
-}
-
-declare type ERecastPartitioning = 'Monotone' | 'Watershed' | 'ChunkyMonotone' | 'ERecastPartitioning_MAX';
-declare var ERecastPartitioning : { Monotone:'Monotone',Watershed:'Watershed',ChunkyMonotone:'ChunkyMonotone',ERecastPartitioning_MAX:'ERecastPartitioning_MAX', };
-declare class RecastNavMesh extends NavigationData { 
-	bDrawTriangleEdges: boolean;
-	bDrawPolyEdges: boolean;
-	bDrawFilledPolys: boolean;
-	bDrawNavMeshEdges: boolean;
-	bDrawTileBounds: boolean;
-	bDrawPathCollidingGeometry: boolean;
-	bDrawTileLabels: boolean;
-	bDrawPolygonLabels: boolean;
-	bDrawDefaultPolygonCost: boolean;
-	bDrawLabelsOnPathNodes: boolean;
-	bDrawNavLinks: boolean;
-	bDrawFailedNavLinks: boolean;
-	bDrawClusters: boolean;
-	bDrawOctree: boolean;
-	bDrawOctreeDetails: boolean;
-	bDistinctlyDrawTilesBeingBuilt: boolean;
-	bDrawNavMesh: boolean;
-	DrawOffset: number;
-	bFixedTilePoolSize: boolean;
-	TilePoolSize: number;
-	TileSizeUU: number;
-	CellSize: number;
-	CellHeight: number;
-	AgentRadius: number;
-	AgentHeight: number;
-	AgentMaxHeight: number;
-	AgentMaxSlope: number;
-	AgentMaxStepHeight: number;
-	MinRegionArea: number;
-	MergeRegionSize: number;
-	MaxSimplificationError: number;
-	MaxSimultaneousTileGenerationJobsCount: number;
-	TileNumberHardLimit: number;
-	PolyRefTileBits: number;
-	PolyRefNavPolyBits: number;
-	PolyRefSaltBits: number;
-	NavMeshOriginOffset: Vector;
-	DefaultDrawDistance: number;
-	DefaultMaxSearchNodes: number;
-	DefaultMaxHierarchicalSearchNodes: number;
-	RegionPartitioning: ERecastPartitioning;
-	LayerPartitioning: ERecastPartitioning;
-	RegionChunkSplits: number;
-	LayerChunkSplits: number;
-	bSortNavigationAreasByCost: boolean;
-	bPerformVoxelFiltering: boolean;
-	bMarkLowHeightAreas: boolean;
-	bFilterLowSpanSequences: boolean;
-	bFilterLowSpanFromTileCache: boolean;
-	bDoFullyAsyncNavDataGathering: boolean;
-	bUseBetterOffsetsFromCorners: boolean;
-	bStoreEmptyTileLayers: boolean;
-	bUseVirtualFilters: boolean;
-	bAllowNavLinkAsPathEnd: boolean;
-	bUseVoxelCache: boolean;
-	TileSetUpdateInterval: number;
-	HeuristicScale: number;
-	VerticalDeviationFromGroundCompensation: number;
-	static GetDefaultObject(): RecastNavMesh;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RecastNavMesh;
-	static C(Other: UObject | any): RecastNavMesh;
-}
-
-declare class TraceChannelTestBatchOptions { 
-	bLineTrace: boolean;
-	bSphereTrace: boolean;
-	bCapsuleTrace: boolean;
-	bBoxTrace: boolean;
-	bChannelTrace: boolean;
-	bObjectsTrace: boolean;
-	bProfileTrace: boolean;
-	clone() : TraceChannelTestBatchOptions;
-	static C(Other: UObject | any): TraceChannelTestBatchOptions;
-}
-
-declare type EDrawDebugTrace = 'None' | 'ForOneFrame' | 'ForDuration' | 'Persistent' | 'EDrawDebugTrace_MAX';
-declare var EDrawDebugTrace : { None:'None',ForOneFrame:'ForOneFrame',ForDuration:'ForDuration',Persistent:'Persistent',EDrawDebugTrace_MAX:'EDrawDebugTrace_MAX', };
-declare class TraceQueryTestNames { 
-	ComponentName: string;
-	PhysicalMaterialName: string;
-	ActorName: string;
-	clone() : TraceQueryTestNames;
-	static C(Other: UObject | any): TraceQueryTestNames;
-}
-
-declare class TraceQueryTestResultsInnerMost { 
-	SingleHit: HitResult;
-	SingleNames: TraceQueryTestNames;
-	bSingleResult: boolean;
-	MultiHits: HitResult[];
-	MultiNames: TraceQueryTestNames[];
-	bMultiResult: boolean;
-	clone() : TraceQueryTestResultsInnerMost;
-	static C(Other: UObject | any): TraceQueryTestResultsInnerMost;
-}
-
-declare class TraceQueryTestResultsInner { 
-	LineResults: TraceQueryTestResultsInnerMost;
-	SphereResults: TraceQueryTestResultsInnerMost;
-	CapsuleResults: TraceQueryTestResultsInnerMost;
-	BoxResults: TraceQueryTestResultsInnerMost;
-	clone() : TraceQueryTestResultsInner;
-	static C(Other: UObject | any): TraceQueryTestResultsInner;
-}
-
-declare class TraceQueryTestResults extends UObject { 
-	ChannelResults: TraceQueryTestResultsInner;
-	ObjectResults: TraceQueryTestResultsInner;
-	ProfileResults: TraceQueryTestResultsInner;
-	BatchOptions: TraceChannelTestBatchOptions;
-	static Load(ResourceName: string): TraceQueryTestResults;
-	static Find(Outer: UObject, ResourceName: string): TraceQueryTestResults;
-	static GetDefaultObject(): TraceQueryTestResults;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TraceQueryTestResults;
-	ToString(): string;
-	static C(Other: UObject | any): TraceQueryTestResults;
-}
-
-declare class AutomationViewSettings extends DataAsset { 
-	AntiAliasing: boolean;
-	MotionBlur: boolean;
-	TemporalAA: boolean;
-	ScreenSpaceReflections: boolean;
-	ScreenSpaceAO: boolean;
-	DistanceFieldAO: boolean;
-	ContactShadows: boolean;
-	EyeAdaptation: boolean;
-	Bloom: boolean;
-	static Load(ResourceName: string): AutomationViewSettings;
-	static Find(Outer: UObject, ResourceName: string): AutomationViewSettings;
-	static GetDefaultObject(): AutomationViewSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomationViewSettings;
-	static C(Other: UObject | any): AutomationViewSettings;
-}
-
-declare type EComparisonTolerance = 'Zero' | 'Low' | 'Medium' | 'High' | 'Custom' | 'EComparisonTolerance_MAX';
-declare var EComparisonTolerance : { Zero:'Zero',Low:'Low',Medium:'Medium',High:'High',Custom:'Custom',EComparisonTolerance_MAX:'EComparisonTolerance_MAX', };
-declare class ComparisonToleranceAmount { 
-	red: number;
-	green: number;
-	blue: number;
-	Alpha: number;
-	MinBrightness: number;
-	MaxBrightness: number;
-	clone() : ComparisonToleranceAmount;
-	static C(Other: UObject | any): ComparisonToleranceAmount;
-}
-
-declare class AutomationScreenshotOptions { 
-	Resolution: Vector2D;
-	Delay: number;
-	bOverride_OverrideTimeTo: boolean;
-	OverrideTimeTo: number;
-	bDisableNoisyRenderingFeatures: boolean;
-	bDisableTonemapping: boolean;
-	ViewSettings: AutomationViewSettings;
-	VisualizeBuffer: string;
-	Tolerance: EComparisonTolerance;
-	ToleranceAmount: ComparisonToleranceAmount;
-	MaximumLocalError: number;
-	MaximumGlobalError: number;
-	bIgnoreAntiAliasing: boolean;
-	bIgnoreColors: boolean;
-	clone() : AutomationScreenshotOptions;
-	static C(Other: UObject | any): AutomationScreenshotOptions;
-	static GetDefaultScreenshotOptionsForGameplay(Tolerance: EComparisonTolerance,Delay: number): AutomationScreenshotOptions;
-	static GetDefaultScreenshotOptionsForRendering(Tolerance: EComparisonTolerance,Delay: number): AutomationScreenshotOptions;
-}
-
-declare class DebugFloatHistory { 
-	Samples: number[];
-	MaxSamples: number;
-	MinValue: number;
-	MaxValue: number;
-	bAutoAdjustMinMax: boolean;
-	clone() : DebugFloatHistory;
-	static C(Other: UObject | any): DebugFloatHistory;
-	static AddFloatHistorySample(Value: number,FloatHistory: DebugFloatHistory): DebugFloatHistory;
-}
-
-declare class TimerHandle { 
-	Handle: any;
-	clone() : TimerHandle;
-	static C(Other: UObject | any): TimerHandle;
-	K2_InvalidateTimerHandle(): {Handle: TimerHandle, $: TimerHandle};
-	K2_IsValidTimerHandle(): boolean;
-	static K2_InvalidateTimerHandle(Handle?: TimerHandle): {Handle: TimerHandle, $: TimerHandle};
-	static K2_IsValidTimerHandle(Handle: TimerHandle): boolean;
-	static K2_SetTimerDelegate(delegate: UnrealEngineDelegate<() => void>,Time: number,bLooping: boolean): TimerHandle;
-}
-
-declare type EQuitPreference = 'Quit' | 'Background' | 'EQuitPreference_MAX';
-declare var EQuitPreference : { Quit:'Quit',Background:'Background',EQuitPreference_MAX:'EQuitPreference_MAX', };
-declare class TextureRenderTarget extends Texture { 
-	TargetGamma: number;
-	static Load(ResourceName: string): TextureRenderTarget;
-	static Find(Outer: UObject, ResourceName: string): TextureRenderTarget;
-	static GetDefaultObject(): TextureRenderTarget;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureRenderTarget;
-	static C(Other: UObject | any): TextureRenderTarget;
-}
-
-declare type ETextureRenderTargetFormat = 'RTF_R8' | 'RTF_RG8' | 'RTF_RGBA8' | 'RTF_R16f' | 'RTF_RG16f' | 'RTF_RGBA16f' | 'RTF_R32f' | 'RTF_RG32f' | 'RTF_RGBA32f' | 'RTF_RGB10A2' | 'RTF_MAX';
-declare var ETextureRenderTargetFormat : { RTF_R8:'RTF_R8',RTF_RG8:'RTF_RG8',RTF_RGBA8:'RTF_RGBA8',RTF_R16f:'RTF_R16f',RTF_RG16f:'RTF_RG16f',RTF_RGBA16f:'RTF_RGBA16f',RTF_R32f:'RTF_R32f',RTF_RG32f:'RTF_RG32f',RTF_RGBA32f:'RTF_RGBA32f',RTF_RGB10A2:'RTF_RGB10A2',RTF_MAX:'RTF_MAX', };
-declare type EPixelFormat = 'PF_Unknown' | 'PF_A32B32G32R32F' | 'PF_B8G8R8A8' | 'PF_G8' | 'PF_G16' | 'PF_DXT1' | 'PF_DXT3' | 'PF_DXT5' | 'PF_UYVY' | 'PF_FloatRGB' | 'PF_FloatRGBA' | 'PF_DepthStencil' | 'PF_ShadowDepth' | 'PF_R32_FLOAT' | 'PF_G16R16' | 'PF_G16R16F' | 'PF_G16R16F_FILTER' | 'PF_G32R32F' | 'PF_A2B10G10R10' | 'PF_A16B16G16R16' | 'PF_D24' | 'PF_R16F' | 'PF_R16F_FILTER' | 'PF_BC5' | 'PF_V8U8' | 'PF_A1' | 'PF_FloatR11G11B10' | 'PF_A8' | 'PF_R32_UINT' | 'PF_R32_SINT' | 'PF_PVRTC2' | 'PF_PVRTC4' | 'PF_R16_UINT' | 'PF_R16_SINT' | 'PF_R16G16B16A16_UINT' | 'PF_R16G16B16A16_SINT' | 'PF_R5G6B5_UNORM' | 'PF_R8G8B8A8' | 'PF_A8R8G8B8' | 'PF_BC4' | 'PF_R8G8' | 'PF_ATC_RGB' | 'PF_ATC_RGBA_E' | 'PF_ATC_RGBA_I' | 'PF_X24_G8' | 'PF_ETC1' | 'PF_ETC2_RGB' | 'PF_ETC2_RGBA' | 'PF_R32G32B32A32_UINT' | 'PF_R16G16_UINT' | 'PF_ASTC_4x4' | 'PF_ASTC_6x6' | 'PF_ASTC_8x8' | 'PF_ASTC_10x10' | 'PF_ASTC_12x12' | 'PF_BC6H' | 'PF_BC7' | 'PF_R8_UINT' | 'PF_L8' | 'PF_XGXR8' | 'PF_R8G8B8A8_UINT' | 'PF_R8G8B8A8_SNORM' | 'PF_R16G16B16A16_UNORM' | 'PF_R16G16B16A16_SNORM' | 'PF_MAX';
-declare var EPixelFormat : { PF_Unknown:'PF_Unknown',PF_A32B32G32R32F:'PF_A32B32G32R32F',PF_B8G8R8A8:'PF_B8G8R8A8',PF_G8:'PF_G8',PF_G16:'PF_G16',PF_DXT1:'PF_DXT1',PF_DXT3:'PF_DXT3',PF_DXT5:'PF_DXT5',PF_UYVY:'PF_UYVY',PF_FloatRGB:'PF_FloatRGB',PF_FloatRGBA:'PF_FloatRGBA',PF_DepthStencil:'PF_DepthStencil',PF_ShadowDepth:'PF_ShadowDepth',PF_R32_FLOAT:'PF_R32_FLOAT',PF_G16R16:'PF_G16R16',PF_G16R16F:'PF_G16R16F',PF_G16R16F_FILTER:'PF_G16R16F_FILTER',PF_G32R32F:'PF_G32R32F',PF_A2B10G10R10:'PF_A2B10G10R10',PF_A16B16G16R16:'PF_A16B16G16R16',PF_D24:'PF_D24',PF_R16F:'PF_R16F',PF_R16F_FILTER:'PF_R16F_FILTER',PF_BC5:'PF_BC5',PF_V8U8:'PF_V8U8',PF_A1:'PF_A1',PF_FloatR11G11B10:'PF_FloatR11G11B10',PF_A8:'PF_A8',PF_R32_UINT:'PF_R32_UINT',PF_R32_SINT:'PF_R32_SINT',PF_PVRTC2:'PF_PVRTC2',PF_PVRTC4:'PF_PVRTC4',PF_R16_UINT:'PF_R16_UINT',PF_R16_SINT:'PF_R16_SINT',PF_R16G16B16A16_UINT:'PF_R16G16B16A16_UINT',PF_R16G16B16A16_SINT:'PF_R16G16B16A16_SINT',PF_R5G6B5_UNORM:'PF_R5G6B5_UNORM',PF_R8G8B8A8:'PF_R8G8B8A8',PF_A8R8G8B8:'PF_A8R8G8B8',PF_BC4:'PF_BC4',PF_R8G8:'PF_R8G8',PF_ATC_RGB:'PF_ATC_RGB',PF_ATC_RGBA_E:'PF_ATC_RGBA_E',PF_ATC_RGBA_I:'PF_ATC_RGBA_I',PF_X24_G8:'PF_X24_G8',PF_ETC1:'PF_ETC1',PF_ETC2_RGB:'PF_ETC2_RGB',PF_ETC2_RGBA:'PF_ETC2_RGBA',PF_R32G32B32A32_UINT:'PF_R32G32B32A32_UINT',PF_R16G16_UINT:'PF_R16G16_UINT',PF_ASTC_4x4:'PF_ASTC_4x4',PF_ASTC_6x6:'PF_ASTC_6x6',PF_ASTC_8x8:'PF_ASTC_8x8',PF_ASTC_10x10:'PF_ASTC_10x10',PF_ASTC_12x12:'PF_ASTC_12x12',PF_BC6H:'PF_BC6H',PF_BC7:'PF_BC7',PF_R8_UINT:'PF_R8_UINT',PF_L8:'PF_L8',PF_XGXR8:'PF_XGXR8',PF_R8G8B8A8_UINT:'PF_R8G8B8A8_UINT',PF_R8G8B8A8_SNORM:'PF_R8G8B8A8_SNORM',PF_R16G16B16A16_UNORM:'PF_R16G16B16A16_UNORM',PF_R16G16B16A16_SNORM:'PF_R16G16B16A16_SNORM',PF_MAX:'PF_MAX', };
-declare class TextureRenderTarget2D extends TextureRenderTarget { 
-	SizeX: number;
-	SizeY: number;
-	ClearColor: LinearColor;
-	AddressX: TextureAddress;
-	AddressY: TextureAddress;
-	bForceLinearGamma: boolean;
-	bHDR: boolean;
-	bGPUSharedFlag: boolean;
-	bAutoGenerateMips: boolean;
-	RenderTargetFormat: ETextureRenderTargetFormat;
-	OverrideFormat: EPixelFormat;
-	static Load(ResourceName: string): TextureRenderTarget2D;
-	static Find(Outer: UObject, ResourceName: string): TextureRenderTarget2D;
-	static GetDefaultObject(): TextureRenderTarget2D;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureRenderTarget2D;
-	static C(Other: UObject | any): TextureRenderTarget2D;
-	ReleaseRenderTarget2D(): void;
-	RenderTargetCreateStaticTexture2DEditorOnly(Name: string,CompressionSettings: TextureCompressionSettings,MipSettings: TextureMipGenSettings): Texture2D;
-	static ReleaseRenderTarget2D(TextureRenderTarget: TextureRenderTarget2D): void;
-	static RenderTargetCreateStaticTexture2DEditorOnly(RenderTarget: TextureRenderTarget2D,Name: string,CompressionSettings: TextureCompressionSettings,MipSettings: TextureMipGenSettings): Texture2D;
-}
-
-declare class DrawToRenderTargetContext { 
-	RenderTarget: TextureRenderTarget2D;
-	clone() : DrawToRenderTargetContext;
-	static C(Other: UObject | any): DrawToRenderTargetContext;
-}
-
-declare class PredictProjectilePathParams { 
-	StartLocation: Vector;
-	LaunchVelocity: Vector;
-	bTraceWithCollision: boolean;
-	ProjectileRadius: number;
-	MaxSimTime: number;
-	bTraceWithChannel: boolean;
-	TraceChannel: ECollisionChannel;
-	ObjectTypes: EObjectTypeQuery[];
-	ActorsToIgnore: Actor[];
-	SimFrequency: number;
-	OverrideGravityZ: number;
-	DrawDebugType: EDrawDebugTrace;
-	DrawDebugTime: number;
-	bTraceComplex: boolean;
-	clone() : PredictProjectilePathParams;
-	static C(Other: UObject | any): PredictProjectilePathParams;
-}
-
-declare class PredictProjectilePathPointData { 
-	Location: Vector;
-	Velocity: Vector;
-	Time: number;
-	clone() : PredictProjectilePathPointData;
-	static C(Other: UObject | any): PredictProjectilePathPointData;
-}
-
-declare class PredictProjectilePathResult { 
-	PathData: PredictProjectilePathPointData[];
-	LastTraceDestination: PredictProjectilePathPointData;
-	HitResult: HitResult;
-	clone() : PredictProjectilePathResult;
-	static C(Other: UObject | any): PredictProjectilePathResult;
-}
-
-declare type ESuggestProjVelocityTraceOption = 'DoNotTrace' | 'TraceFullPath' | 'OnlyTraceWhileAscending' | 'ESuggestProjVelocityTraceOption_MAX';
-declare var ESuggestProjVelocityTraceOption : { DoNotTrace:'DoNotTrace',TraceFullPath:'TraceFullPath',OnlyTraceWhileAscending:'OnlyTraceWhileAscending',ESuggestProjVelocityTraceOption_MAX:'ESuggestProjVelocityTraceOption_MAX', };
-declare type EGrammaticalGender = 'Neuter' | 'Masculine' | 'Feminine' | 'Mixed' | 'EGrammaticalGender_MAX';
-declare var EGrammaticalGender : { Neuter:'Neuter',Masculine:'Masculine',Feminine:'Feminine',Mixed:'Mixed',EGrammaticalGender_MAX:'EGrammaticalGender_MAX', };
-declare type EGrammaticalNumber = 'Singular' | 'Plural' | 'EGrammaticalNumber_MAX';
-declare var EGrammaticalNumber : { Singular:'Singular',Plural:'Plural',EGrammaticalNumber_MAX:'EGrammaticalNumber_MAX', };
-declare class DialogueVoice extends UObject { 
-	Gender: EGrammaticalGender;
-	Plurality: EGrammaticalNumber;
-	LocalizationGUID: Guid;
-	static Load(ResourceName: string): DialogueVoice;
-	static Find(Outer: UObject, ResourceName: string): DialogueVoice;
-	static GetDefaultObject(): DialogueVoice;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DialogueVoice;
-	static C(Other: UObject | any): DialogueVoice;
-}
-
-declare class DialogueContext { 
-	Speaker: DialogueVoice;
-	Targets: DialogueVoice[];
-	clone() : DialogueContext;
-	static C(Other: UObject | any): DialogueContext;
-}
-
-declare class DialogueSoundWaveProxy extends SoundBase { 
-	static Load(ResourceName: string): DialogueSoundWaveProxy;
-	static Find(Outer: UObject, ResourceName: string): DialogueSoundWaveProxy;
-	static GetDefaultObject(): DialogueSoundWaveProxy;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DialogueSoundWaveProxy;
-	static C(Other: UObject | any): DialogueSoundWaveProxy;
-}
-
-declare class DialogueContextMapping { 
-	Context: DialogueContext;
-	SoundWave: SoundWave;
-	LocalizationKeyFormat: string;
-	Proxy: DialogueSoundWaveProxy;
-	clone() : DialogueContextMapping;
-	static C(Other: UObject | any): DialogueContextMapping;
-}
-
-declare class DialogueWave extends UObject { 
-	bMature: boolean;
-	bOverride_SubtitleOverride: boolean;
-	SpokenText: string;
-	SubtitleOverride: string;
-	VoiceActorDirection: string;
-	ContextMappings: DialogueContextMapping[];
-	LocalizationGUID: Guid;
-	static Load(ResourceName: string): DialogueWave;
-	static Find(Outer: UObject, ResourceName: string): DialogueWave;
-	static GetDefaultObject(): DialogueWave;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DialogueWave;
-	static C(Other: UObject | any): DialogueWave;
-	SpawnDialogueAttached(Context: DialogueContext,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,bStopWhenAttachedToDestroyed: boolean,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,bAutoDestroy: boolean): AudioComponent;
-	static SpawnDialogueAttached(Dialogue: DialogueWave,Context: DialogueContext,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,bStopWhenAttachedToDestroyed: boolean,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,bAutoDestroy: boolean): AudioComponent;
-}
-
-declare class AIAsyncTaskBlueprintProxy extends UObject { 
-	OnSuccess: UnrealEngineMulticastDelegate<(MovementResult: EPathFollowingResult) => void>;
-	OnFail: UnrealEngineMulticastDelegate<(MovementResult: EPathFollowingResult) => void>;
-	static Load(ResourceName: string): AIAsyncTaskBlueprintProxy;
-	static Find(Outer: UObject, ResourceName: string): AIAsyncTaskBlueprintProxy;
-	static GetDefaultObject(): AIAsyncTaskBlueprintProxy;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIAsyncTaskBlueprintProxy;
-	OnMoveCompleted(RequestID: AIRequestID,MovementResult: EPathFollowingResult): void;
-	static C(Other: UObject | any): AIAsyncTaskBlueprintProxy;
-}
-
-declare class World extends UObject { 
-	Layers: Layer[];
-	ActiveGroupActors: Actor[];
-	ThumbnailInfo: ThumbnailInfo;
-	PersistentLevel: Level;
-	NetDriver: NetDriver;
-	LineBatcher: LineBatchComponent;
-	PersistentLineBatcher: LineBatchComponent;
-	ForegroundLineBatcher: LineBatchComponent;
-	NetworkManager: GameNetworkManager;
-	PhysicsCollisionHandler: PhysicsCollisionHandler;
-	ExtraReferencedObjects: UObject[];
-	PerModuleDataObjects: UObject[];
-	StreamingLevels: LevelStreaming[];
-	StreamingLevelsToConsider: any;
-	StreamingLevelsPrefix: string;
-	CurrentLevelPendingVisibility: Level;
-	CurrentLevelPendingInvisibility: Level;
-	DemoNetDriver: DemoNetDriver;
-	MyParticleEventManager: ParticleEventManager;
-	DefaultPhysicsVolume: PhysicsVolume;
-	NavigationSystem: NavigationSystemBase;
-	AuthorityGameMode: GameModeBase;
-	GameState: GameStateBase;
-	AISystem: AISystemBase;
-	AvoidanceManager: AvoidanceManager;
-	Levels: Level[];
-	LevelCollections: LevelCollection[];
-	CurrentLevel: Level;
-	OwningGameInstance: GameInstance;
-	ParameterCollectionInstances: MaterialParameterCollectionInstance[];
-	CanvasForRenderingToTarget: Canvas;
-	CanvasForDrawMaterialToRenderTarget: Canvas;
-	EditorViews: LevelViewportInfo[];
-	SelectedLevels: Level[];
-	WorldComposition: WorldComposition;
-	bAreConstraintsDirty: boolean;
-	PSCPool: WorldPSCPool;
-	static Load(ResourceName: string): World;
-	static Find(Outer: UObject, ResourceName: string): World;
-	static GetDefaultObject(): World;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): World;
-	HandleTimelineScrubbed(): void;
-	static C(Other: UObject | any): World;
-	EditorDestroyActor(Actor: Actor,bShouldModifyLevel: boolean): boolean;
-	ExportNavigation(Path: string): string;
-	GetDefaultBrush(): Brush;
-	InvalidateModelGeometry(InLevel: Level): void;
-	RemoveLevelInstance(): void;
-	GetActors(ActorLayer: ActorLayer): Actor[];
-	BeginPlay(): void;
-	DestroyWorld(): void;
-	InitializeActorsForPlay(URL: URL): void;
-	GenerateNavigation(NavData: RecastNavMesh): void;
-	GetAllActorsOfClassAndTags(ActorClass: UnrealEngineClass,Tags_Accept: string[],Tags_Deny: string[],OutActors?: Actor[]): {OutActors: Actor[]};
-	GetLevels(): Level[];
-	GetModel(): Model;
-	GetWorldBounds(): Box;
-	IsGameWorld(): boolean;
-	IsPlayInEditor(): boolean;
-	IsPlayInPreview(): boolean;
-	TraceChannelTestUtil(BatchOptions: TraceChannelTestBatchOptions,Start: Vector,End: Vector,SphereCapsuleRadius: number,CapsuleHalfHeight: number,BoxHalfSize: Vector,Orientation: Rotator,TraceChannel: ETraceTypeQuery,ObjectTypes: EObjectTypeQuery[],ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],bIgnoreSelf: boolean,DrawDebugType: EDrawDebugTrace,TraceColor: LinearColor,TraceHitColor: LinearColor,DrawTime: number): TraceQueryTestResults;
-	RunAllFunctionalTests(bNewLog: boolean,bRunLooped: boolean,FailedTestsReproString: string): boolean;
-	DisableStatGroup(GroupName: string): void;
-	EnableStatGroup(GroupName: string): void;
-	SetScalabilityQualityLevelRelativeToMax(Value: number): void;
-	SetScalabilityQualityToEpic(): void;
-	SetScalabilityQualityToLow(): void;
-	TakeAutomationScreenshot(LatentInfo: LatentActionInfo,Name: string,Notes: string,Options: AutomationScreenshotOptions): void;
-	TakeAutomationScreenshotAtCamera(LatentInfo: LatentActionInfo,Camera: CameraActor,NameOverride: string,Notes: string,Options: AutomationScreenshotOptions): void;
-	TakeAutomationScreenshotOfUI(LatentInfo: LatentActionInfo,Name: string,Options: AutomationScreenshotOptions): void;
-	GetIsMyTurn(PlayerController: PlayerController,MatchID: string,bIsMyTurn?: boolean): {bIsMyTurn: boolean};
-	GetMyPlayerIndex(PlayerController: PlayerController,MatchID: string,PlayerIndex?: number): {PlayerIndex: number};
-	GetPlayerDisplayName(PlayerController: PlayerController,MatchID: string,PlayerIndex: number,PlayerDisplayName?: string): {PlayerDisplayName: string};
-	RegisterTurnBasedMatchInterfaceObject(PlayerController: PlayerController,UObject: UObject): void;
-	GetCachedAchievementDescription(PlayerController: PlayerController,AchievementID: string,bFoundID?: boolean,Title?: string,LockedDescription?: string,UnlockedDescription?: string,bHidden?: boolean): {bFoundID: boolean, Title: string, LockedDescription: string, UnlockedDescription: string, bHidden: boolean};
-	GetCachedAchievementProgress(PlayerController: PlayerController,AchievementID: string,bFoundID?: boolean,Progress?: number): {bFoundID: boolean, Progress: number};
-	LogBox(BoxShape: Box,text: string,ObjectColor: LinearColor,LogCategory: string,bAddToMessageLog: boolean): void;
-	LogLocation(Location: Vector,text: string,ObjectColor: LinearColor,Radius: number,LogCategory: string,bAddToMessageLog: boolean): void;
-	LogSegment(SegmentStart: Vector,SegmentEnd: Vector,text: string,ObjectColor: LinearColor,Thickness: number,CategoryName: string,bAddToMessageLog: boolean): void;
-	LogText(text: string,LogCategory: string,bAddToMessageLog: boolean): void;
-	BoxOverlapActors(BoxPos: Vector,BoxExtent: Vector,ObjectTypes: EObjectTypeQuery[],ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
-	BoxOverlapComponents(BoxPos: Vector,Extent: Vector,ObjectTypes: EObjectTypeQuery[],ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
-	BoxTraceMulti(Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
-	BoxTraceMultiByProfile(Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
-	BoxTraceMultiForObjects(Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
-	BoxTraceSingle(Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
-	BoxTraceSingleByProfile(Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
-	BoxTraceSingleForObjects(Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
-	CapsuleOverlapActors(CapsulePos: Vector,Radius: number,HalfHeight: number,ObjectTypes: EObjectTypeQuery[],ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
-	CapsuleOverlapComponents(CapsulePos: Vector,Radius: number,HalfHeight: number,ObjectTypes: EObjectTypeQuery[],ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
-	CapsuleTraceMulti(Start: Vector,End: Vector,Radius: number,HalfHeight: number,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
-	CapsuleTraceMultiByProfile(Start: Vector,End: Vector,Radius: number,HalfHeight: number,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
-	CapsuleTraceMultiForObjects(Start: Vector,End: Vector,Radius: number,HalfHeight: number,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
-	CapsuleTraceSingle(Start: Vector,End: Vector,Radius: number,HalfHeight: number,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
-	CapsuleTraceSingleByProfile(Start: Vector,End: Vector,Radius: number,HalfHeight: number,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
-	CapsuleTraceSingleForObjects(Start: Vector,End: Vector,Radius: number,HalfHeight: number,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
-	Delay(Duration: number,LatentInfo: LatentActionInfo): void;
-	DrawDebugArrow(LineStart: Vector,LineEnd: Vector,ArrowSize: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
-	DrawDebugBox(Center: Vector,Extent: Vector,LineColor: LinearColor,Rotation: Rotator,Duration: number,Thickness: number): void;
-	DrawDebugCapsule(Center: Vector,HalfHeight: number,Radius: number,Rotation: Rotator,LineColor: LinearColor,Duration: number,Thickness: number): void;
-	DrawDebugCircle(Center: Vector,Radius: number,NumSegments: number,LineColor: LinearColor,Duration: number,Thickness: number,YAxis: Vector,ZAxis: Vector,bDrawAxis: boolean): void;
-	DrawDebugCone(Origin: Vector,Direction: Vector,Length: number,AngleWidth: number,AngleHeight: number,NumSides: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
-	DrawDebugConeInDegrees(Origin: Vector,Direction: Vector,Length: number,AngleWidth: number,AngleHeight: number,NumSides: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
-	DrawDebugCoordinateSystem(AxisLoc: Vector,AxisRot: Rotator,Scale: number,Duration: number,Thickness: number): void;
-	DrawDebugCylinder(Start: Vector,End: Vector,Radius: number,Segments: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
-	DrawDebugFloatHistoryLocation(FloatHistory: DebugFloatHistory,DrawLocation: Vector,DrawSize: Vector2D,DrawColor: LinearColor,Duration: number): void;
-	DrawDebugFloatHistoryTransform(FloatHistory: DebugFloatHistory,DrawTransform: Transform,DrawSize: Vector2D,DrawColor: LinearColor,Duration: number): void;
-	DrawDebugFrustum(FrustumTransform: Transform,FrustumColor: LinearColor,Duration: number,Thickness: number): void;
-	DrawDebugLine(LineStart: Vector,LineEnd: Vector,LineColor: LinearColor,Duration: number,Thickness: number): void;
-	DrawDebugPlane(PlaneCoordinates: Plane,Location: Vector,Size: number,PlaneColor: LinearColor,Duration: number): void;
-	DrawDebugPoint(Position: Vector,Size: number,PointColor: LinearColor,Duration: number): void;
-	DrawDebugSphere(Center: Vector,Radius: number,Segments: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
-	DrawDebugString(TextLocation: Vector,text: string,TestBaseActor: Actor,TextColor: LinearColor,Duration: number): void;
-	ExecuteConsoleCommand(Command: string,SpecificPlayer: PlayerController): void;
-	FlushDebugStrings(): void;
-	FlushPersistentDebugLines(): void;
-	GetConsoleVariableFloatValue(VariableName: string): number;
-	GetConsoleVariableIntValue(VariableName: string): number;
-	GetGameTimeInSeconds(): number;
-	IsDedicatedServer(): boolean;
-	IsServer(): boolean;
-	IsStandalone(): boolean;
-	K2_ClearAndInvalidateTimerHandle(Handle?: TimerHandle): {Handle: TimerHandle};
-	K2_ClearTimerHandle(Handle: TimerHandle): void;
-	K2_GetTimerElapsedTimeHandle(Handle: TimerHandle): number;
-	K2_GetTimerRemainingTimeHandle(Handle: TimerHandle): number;
-	K2_IsTimerActiveHandle(Handle: TimerHandle): boolean;
-	K2_IsTimerPausedHandle(Handle: TimerHandle): boolean;
-	K2_PauseTimerHandle(Handle: TimerHandle): void;
-	K2_TimerExistsHandle(Handle: TimerHandle): boolean;
-	K2_UnPauseTimerHandle(Handle: TimerHandle): void;
-	LineTraceMulti(Start: Vector,End: Vector,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
-	LineTraceMultiByProfile(Start: Vector,End: Vector,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
-	LineTraceMultiForObjects(Start: Vector,End: Vector,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
-	LineTraceSingle(Start: Vector,End: Vector,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
-	LineTraceSingleByProfile(Start: Vector,End: Vector,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
-	LineTraceSingleForObjects(Start: Vector,End: Vector,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
-	LoadAsset(Asset: UObject,OnLoaded: UnrealEngineDelegate<(Loaded: UObject) => void>,LatentInfo: LatentActionInfo): void;
-	LoadAssetClass(AssetClass: Class,OnLoaded: UnrealEngineDelegate<(Loaded: UnrealEngineClass) => void>,LatentInfo: LatentActionInfo): void;
-	PrintString(inString: string,bPrintToScreen: boolean,bPrintToLog: boolean,TextColor: LinearColor,Duration: number): void;
-	PrintText(InText: string,bPrintToScreen: boolean,bPrintToLog: boolean,TextColor: LinearColor,Duration: number): void;
-	QuitGame(SpecificPlayer: PlayerController,QuitPreference: EQuitPreference,bIgnorePlatformRestrictions: boolean): void;
-	RetriggerableDelay(Duration: number,LatentInfo: LatentActionInfo): void;
-	SetSuppressViewportTransitionMessage(bState: boolean): void;
-	SphereOverlapActors(SpherePos: Vector,SphereRadius: number,ObjectTypes: EObjectTypeQuery[],ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
-	SphereOverlapComponents(SpherePos: Vector,SphereRadius: number,ObjectTypes: EObjectTypeQuery[],ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
-	SphereTraceMulti(Start: Vector,End: Vector,Radius: number,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
-	SphereTraceMultiByProfile(Start: Vector,End: Vector,Radius: number,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
-	SphereTraceMultiForObjects(Start: Vector,End: Vector,Radius: number,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
-	SphereTraceSingle(Start: Vector,End: Vector,Radius: number,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
-	SphereTraceSingleByProfile(Start: Vector,End: Vector,Radius: number,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
-	SphereTraceSingleForObjects(Start: Vector,End: Vector,Radius: number,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
-	BeginDrawCanvasToRenderTarget(TextureRenderTarget: TextureRenderTarget2D,Canvas?: Canvas,Size?: Vector2D,Context?: DrawToRenderTargetContext): {Canvas: Canvas, Size: Vector2D, Context: DrawToRenderTargetContext};
-	ClearRenderTarget2D(TextureRenderTarget: TextureRenderTarget2D,ClearColor: LinearColor): void;
-	ConvertRenderTargetToTexture2DEditorOnly(RenderTarget: TextureRenderTarget2D,Texture: Texture2D): void;
-	CreateRenderTarget2D(Width: number,Height: number,Format: ETextureRenderTargetFormat): TextureRenderTarget2D;
-	DrawMaterialToRenderTarget(TextureRenderTarget: TextureRenderTarget2D,Material: MaterialInterface): void;
-	EndDrawCanvasToRenderTarget(Context: DrawToRenderTargetContext): void;
-	ExportRenderTarget(TextureRenderTarget: TextureRenderTarget2D,FilePath: string,Filename: string): void;
-	ExportTexture2D(Texture: Texture2D,FilePath: string,Filename: string): void;
-	ImportBufferAsTexture2D(Buffer: number[]): Texture2D;
-	ImportFileAsTexture2D(Filename: string): Texture2D;
-	ReadRenderTargetPixel(TextureRenderTarget: TextureRenderTarget2D,X: number,Y: number): Color;
-	ReadRenderTargetRawPixel(TextureRenderTarget: TextureRenderTarget2D,X: number,Y: number): LinearColor;
-	ReadRenderTargetRawUV(TextureRenderTarget: TextureRenderTarget2D,U: number,V: number): LinearColor;
-	ReadRenderTargetUV(TextureRenderTarget: TextureRenderTarget2D,U: number,V: number): Color;
-	MinimumAreaRectangle(InVerts: Vector[],SampleSurfaceNormal: Vector,OutRectCenter?: Vector,OutRectRotation?: Rotator,OutSideLengthX?: number,OutSideLengthY?: number,bDebugDraw?: boolean): {OutRectCenter: Vector, OutRectRotation: Rotator, OutSideLengthX: number, OutSideLengthY: number};
-	CreateDynamicMaterialInstance(Parent: MaterialInterface,OptionalName: string): MaterialInstanceDynamic;
-	GetScalarParameterValue(Collection: MaterialParameterCollection,ParameterName: string): number;
-	GetVectorParameterValue(Collection: MaterialParameterCollection,ParameterName: string): LinearColor;
-	SetScalarParameterValue(Collection: MaterialParameterCollection,ParameterName: string,ParameterValue: number): void;
-	SetVectorParameterValue(Collection: MaterialParameterCollection,ParameterName: string,ParameterValue: LinearColor): void;
-	ActivateReverbEffect(ReverbEffect: ReverbEffect,TagName: string,Priority: number,Volume: number,FadeTime: number): void;
-	ApplyRadialDamage(BaseDamage: number,Origin: Vector,DamageRadius: number,DamageTypeClass: UnrealEngineClass,IgnoreActors: Actor[],DamageCauser: Actor,InstigatedByController: Controller,bDoFullDamage: boolean,DamagePreventionChannel: ECollisionChannel): boolean;
-	ApplyRadialDamageWithFalloff(BaseDamage: number,MinimumDamage: number,Origin: Vector,DamageInnerRadius: number,DamageOuterRadius: number,DamageFalloff: number,DamageTypeClass: UnrealEngineClass,IgnoreActors: Actor[],DamageCauser: Actor,InstigatedByController: Controller,DamagePreventionChannel: ECollisionChannel): boolean;
-	AreAnyListenersWithinRange(Location: Vector,MaximumRange: number): boolean;
-	BeginDeferredActorSpawnFromClass(ActorClass: UnrealEngineClass,SpawnTransform: Transform,CollisionHandlingOverride: ESpawnActorCollisionHandlingMethod,Owner: Actor): Actor;
-	BeginSpawningActorFromBlueprint(Blueprint: Blueprint,SpawnTransform: Transform,bNoCollisionFail: boolean): Actor;
-	BeginSpawningActorFromClass(ActorClass: UnrealEngineClass,SpawnTransform: Transform,bNoCollisionFail: boolean,Owner: Actor): Actor;
-	Blueprint_PredictProjectilePath_Advanced(PredictParams: PredictProjectilePathParams,PredictResult?: PredictProjectilePathResult): {PredictResult: PredictProjectilePathResult, $: boolean};
-	Blueprint_PredictProjectilePath_ByObjectType(OutHit?: HitResult,OutPathPositions?: Vector[],OutLastTraceDestination?: Vector,StartPos?: Vector,LaunchVelocity?: Vector,bTracePath?: boolean,ProjectileRadius?: number,ObjectTypes?: EObjectTypeQuery[],bTraceComplex?: boolean,ActorsToIgnore?: Actor[],DrawDebugType?: EDrawDebugTrace,DrawDebugTime?: number,SimFrequency?: number,MaxSimTime?: number,OverrideGravityZ?: number): {OutHit: HitResult, OutPathPositions: Vector[], OutLastTraceDestination: Vector, $: boolean};
-	Blueprint_PredictProjectilePath_ByTraceChannel(OutHit?: HitResult,OutPathPositions?: Vector[],OutLastTraceDestination?: Vector,StartPos?: Vector,LaunchVelocity?: Vector,bTracePath?: boolean,ProjectileRadius?: number,TraceChannel?: ECollisionChannel,bTraceComplex?: boolean,ActorsToIgnore?: Actor[],DrawDebugType?: EDrawDebugTrace,DrawDebugTime?: number,SimFrequency?: number,MaxSimTime?: number,OverrideGravityZ?: number): {OutHit: HitResult, OutPathPositions: Vector[], OutLastTraceDestination: Vector, $: boolean};
-	BlueprintSuggestProjectileVelocity(TossVelocity?: Vector,StartLocation?: Vector,EndLocation?: Vector,LaunchSpeed?: number,OverrideGravityZ?: number,TraceOption?: ESuggestProjVelocityTraceOption,CollisionRadius?: number,bFavorHighArc?: boolean,bDrawDebug?: boolean): {TossVelocity: Vector, $: boolean};
-	ClearSoundMixClassOverride(InSoundMixModifier: SoundMix,InSoundClass: SoundClass,FadeOutTime: number): void;
-	ClearSoundMixModifiers(): void;
-	CreatePlayer(ControllerId: number,bSpawnPawn: boolean): PlayerController;
-	CreateSound2D(Sound: SoundBase,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,ConcurrencySettings: SoundConcurrency,bPersistAcrossLevelTransition: boolean,bAutoDestroy: boolean): AudioComponent;
-	DeactivateReverbEffect(TagName: string): void;
-	FlushLevelStreaming(): void;
-	GetAccurateRealTime(Seconds?: number,PartialSeconds?: number): {Seconds: number, PartialSeconds: number};
-	GetAllActorsOfClass(ActorClass: UnrealEngineClass,OutActors?: Actor[]): {OutActors: Actor[]};
-	GetAllActorsWithInterface(Interface: UnrealEngineClass,OutActors?: Actor[]): {OutActors: Actor[]};
-	GetAllActorsWithTag(Tag: string,OutActors?: Actor[]): {OutActors: Actor[]};
-	GetAudioTimeSeconds(): number;
-	GetCurrentLevelName(bRemovePrefixString: boolean): string;
-	GetCurrentReverbEffect(): ReverbEffect;
-	GetEnableWorldRendering(): boolean;
-	GetGameInstance(): GameInstance;
-	GetGameMode(): GameModeBase;
-	GetGameState(): GameStateBase;
-	GetGlobalTimeDilation(): number;
-	GetPlayerCameraManager(PlayerIndex: number): PlayerCameraManager;
-	GetPlayerCharacter(PlayerIndex: number): Character;
-	GetPlayerController(PlayerIndex: number): PlayerController;
-	GetPlayerPawn(PlayerIndex: number): Pawn;
-	GetRealTimeSeconds(): number;
-	GetStreamingLevel(PackageName: string): LevelStreaming;
-	GetTimeSeconds(): number;
-	GetUnpausedTimeSeconds(): number;
-	GetWorldDeltaSeconds(): number;
-	GetWorldOriginLocation(): IntVector;
-	GrassOverlappingSphereCount(StaticMesh: StaticMesh,CenterPosition: Vector,Radius: number): number;
-	IsGamePaused(): boolean;
-	LoadStreamLevel(LevelName: string,bMakeVisibleAfterLoad: boolean,bShouldBlockOnLoad: boolean,LatentInfo: LatentActionInfo): void;
-	OpenLevel(LevelName: string,bAbsolute: boolean,Options: string): void;
-	PlayDialogue2D(Dialogue: DialogueWave,Context: DialogueContext,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number): void;
-	PlayDialogueAtLocation(Dialogue: DialogueWave,Context: DialogueContext,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation): void;
-	PlaySound2D(Sound: SoundBase,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,ConcurrencySettings: SoundConcurrency,OwningActor: Actor): void;
-	PlaySoundAtLocation(Sound: SoundBase,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,ConcurrencySettings: SoundConcurrency,OwningActor: Actor): void;
-	PlayWorldCameraShake(Shake: UnrealEngineClass,Epicenter: Vector,InnerRadius: number,OuterRadius: number,Falloff: number,bOrientShakeTowardsEpicenter: boolean): void;
-	PopSoundMixModifier(InSoundMixModifier: SoundMix): void;
-	PushSoundMixModifier(InSoundMixModifier: SoundMix): void;
-	RebaseLocalOriginOntoZero(WorldLocation: Vector): Vector;
-	RebaseZeroOriginOntoLocal(WorldLocation: Vector): Vector;
-	SetBaseSoundMix(InSoundMix: SoundMix): void;
-	SetEnableWorldRendering(bEnable: boolean): void;
-	SetGamePaused(bPaused: boolean): boolean;
-	SetGlobalListenerFocusParameters(FocusAzimuthScale: number,NonFocusAzimuthScale: number,FocusDistanceScale: number,NonFocusDistanceScale: number,FocusVolumeScale: number,NonFocusVolumeScale: number,FocusPriorityScale: number,NonFocusPriorityScale: number): void;
-	SetGlobalPitchModulation(PitchModulation: number,TimeSec: number): void;
-	SetGlobalTimeDilation(TimeDilation: number): void;
-	SetSoundMixClassOverride(InSoundMixModifier: SoundMix,InSoundClass: SoundClass,Volume: number,Pitch: number,FadeInTime: number,bApplyToChildren: boolean): void;
-	SetWorldOriginLocation(NewLocation: IntVector): void;
-	SpawnDecalAtLocation(DecalMaterial: MaterialInterface,DecalSize: Vector,Location: Vector,Rotation: Rotator,LifeSpan: number): DecalComponent;
-	SpawnDialogue2D(Dialogue: DialogueWave,Context: DialogueContext,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,bAutoDestroy: boolean): AudioComponent;
-	SpawnDialogueAtLocation(Dialogue: DialogueWave,Context: DialogueContext,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,bAutoDestroy: boolean): AudioComponent;
-	SpawnEmitterAtLocation(EmitterTemplate: ParticleSystem,Location: Vector,Rotation: Rotator,Scale: Vector,bAutoDestroy: boolean,PoolingMethod: EPSCPoolMethod): ParticleSystemComponent;
-	SpawnForceFeedbackAtLocation(ForceFeedbackEffect: ForceFeedbackEffect,Location: Vector,Rotation: Rotator,bLooping: boolean,IntensityMultiplier: number,StartTime: number,AttenuationSettings: ForceFeedbackAttenuation,bAutoDestroy: boolean): ForceFeedbackComponent;
-	SpawnSound2D(Sound: SoundBase,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,ConcurrencySettings: SoundConcurrency,bPersistAcrossLevelTransition: boolean,bAutoDestroy: boolean): AudioComponent;
-	SpawnSoundAtLocation(Sound: SoundBase,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,ConcurrencySettings: SoundConcurrency,bAutoDestroy: boolean): AudioComponent;
-	SuggestProjectileVelocity_CustomArc(OutLaunchVelocity?: Vector,StartPos?: Vector,EndPos?: Vector,OverrideGravityZ?: number,ArcParam?: number): {OutLaunchVelocity: Vector, $: boolean};
-	UnloadStreamLevel(LevelName: string,LatentInfo: LatentActionInfo,bShouldBlockOnUnload: boolean): void;
-	FoliageOverlappingBoxCount(StaticMesh: StaticMesh,Box: Box): number;
-	FoliageOverlappingSphereCount(StaticMesh: StaticMesh,CenterPosition: Vector,Radius: number): number;
-	GetMousePositionOnViewport(): Vector2D;
-	GetViewportScale(): number;
-	GetViewportSize(): Vector2D;
-	GetViewportWidgetGeometry(): Geometry;
-	RemoveAllWidgets(): void;
-	Create(WidgetType: UnrealEngineClass,OwningPlayer: PlayerController): UserWidget;
-	GetAllWidgetsOfClass(FoundWidgets?: UserWidget[],WidgetClass?: UnrealEngineClass,TopLevelOnly?: boolean): {FoundWidgets: UserWidget[]};
-	GetAllWidgetsWithInterface(Interface: UnrealEngineClass,FoundWidgets?: UserWidget[],TopLevelOnly?: boolean): {FoundWidgets: UserWidget[]};
-	GetSafeZonePadding(SafePadding?: Vector4,SafePaddingScale?: Vector2D,SpillOverPadding?: Vector4): {SafePadding: Vector4, SafePaddingScale: Vector2D, SpillOverPadding: Vector4};
-	SetHardwareCursor(CursorShape: EMouseCursor,CursorName: string,HotSpot: Vector2D): boolean;
-	AbsoluteToViewport(AbsoluteDesktopCoordinate: Vector2D,PixelPosition?: Vector2D,ViewportPosition?: Vector2D): {PixelPosition: Vector2D, ViewportPosition: Vector2D};
-	LocalToViewport(Geometry: Geometry,LocalCoordinate: Vector2D,PixelPosition?: Vector2D,ViewportPosition?: Vector2D): {PixelPosition: Vector2D, ViewportPosition: Vector2D};
-	ScreenToViewport(ScreenPosition: Vector2D,ViewportPosition?: Vector2D): {ViewportPosition: Vector2D};
-	ScreenToWidgetAbsolute(ScreenPosition: Vector2D,AbsoluteCoordinate?: Vector2D): {AbsoluteCoordinate: Vector2D};
-	ScreenToWidgetLocal(Geometry: Geometry,ScreenPosition: Vector2D,LocalCoordinate?: Vector2D): {LocalCoordinate: Vector2D};
-	AddMasterSubmixEffect(SubmixEffectPreset: SoundEffectSubmixPreset): void;
-	AddSourceEffectToPresetChain(PresetChain: SoundEffectSourcePresetChain,Entry: SourceEffectChainEntry): void;
-	ClearMasterSubmixEffects(): void;
-	GetNumberOfEntriesInSourceEffectChain(PresetChain: SoundEffectSourcePresetChain): number;
-	PauseRecordingOutput(SubmixToPause: SoundSubmix): void;
-	RemoveMasterSubmixEffect(SubmixEffectPreset: SoundEffectSubmixPreset): void;
-	RemoveSourceEffectFromPresetChain(PresetChain: SoundEffectSourcePresetChain,EntryIndex: number): void;
-	ResumeRecordingOutput(SubmixToPause: SoundSubmix): void;
-	SetBypassSourceEffectChainEntry(PresetChain: SoundEffectSourcePresetChain,EntryIndex: number,bBypassed: boolean): void;
-	StartRecordingOutput(ExpectedDuration: number,SubmixToRecord: SoundSubmix): void;
-	StopRecordingOutput(ExportType: EAudioRecordingExportType,Name: string,Path: string,SubmixToRecord: SoundSubmix,ExistingSoundWaveToOverwrite: SoundWave): SoundWave;
-	CreateMoveToProxyObject(Pawn: Pawn,Destination: Vector,TargetActor: Actor,AcceptanceRadius: number,bStopOnOverlap: boolean): AIAsyncTaskBlueprintProxy;
-	SpawnAIFromClass(PawnClass: UnrealEngineClass,BehaviorTree: BehaviorTree,Location: Vector,Rotation: Rotator,bNoCollisionFail: boolean): Pawn;
-	GetAllActorsOfClassMatchingTagQuery(ActorClass: UnrealEngineClass,GameplayTagQuery: GameplayTagQuery,OutActors?: Actor[]): {OutActors: Actor[]};
-	GetDeviceWorldPose(XRDeviceId: XRDeviceId,bIsTracked?: boolean,Orientation?: Rotator,bHasPositionalTracking?: boolean,Position?: Vector): {bIsTracked: boolean, Orientation: Rotator, bHasPositionalTracking: boolean, Position: Vector};
-	GetTrackingToWorldTransform(): Transform;
-	GetWorldToMetersScale(): number;
-	SetWorldToMetersScale(NewScale: number): void;
-	static EditorDestroyActor(World: World,Actor: Actor,bShouldModifyLevel: boolean): boolean;
-	static ExportNavigation(InWorld: World,Path: string): string;
-	static GetDefaultBrush(World: World): Brush;
-	static InvalidateModelGeometry(World: World,InLevel: Level): void;
-	static RemoveLevelInstance(World: World): void;
-	static GetActors(WorldContextObject: UObject,ActorLayer: ActorLayer): Actor[];
-	static BeginPlay(World: World): void;
-	static DestroyWorld(World: World): void;
-	static InitializeActorsForPlay(World: World,URL: URL): void;
-	static GenerateNavigation(InWorld: World,NavData: RecastNavMesh): void;
-	static GetAllActorsOfClassAndTags(WorldContextObject: UObject,ActorClass: UnrealEngineClass,Tags_Accept: string[],Tags_Deny: string[],OutActors?: Actor[]): {OutActors: Actor[]};
-	static GetLevels(World: World): Level[];
-	static GetModel(World: World): Model;
-	static GetWorldBounds(InWorld: World): Box;
-	static IsGameWorld(World: World): boolean;
-	static IsPlayInEditor(World: World): boolean;
-	static IsPlayInPreview(World: World): boolean;
-	static TraceChannelTestUtil(WorldContextObject: UObject,BatchOptions: TraceChannelTestBatchOptions,Start: Vector,End: Vector,SphereCapsuleRadius: number,CapsuleHalfHeight: number,BoxHalfSize: Vector,Orientation: Rotator,TraceChannel: ETraceTypeQuery,ObjectTypes: EObjectTypeQuery[],ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],bIgnoreSelf: boolean,DrawDebugType: EDrawDebugTrace,TraceColor: LinearColor,TraceHitColor: LinearColor,DrawTime: number): TraceQueryTestResults;
-	static RunAllFunctionalTests(WorldContextObject: UObject,bNewLog: boolean,bRunLooped: boolean,FailedTestsReproString: string): boolean;
-	static DisableStatGroup(WorldContextObject: UObject,GroupName: string): void;
-	static EnableStatGroup(WorldContextObject: UObject,GroupName: string): void;
-	static SetScalabilityQualityLevelRelativeToMax(WorldContextObject: UObject,Value: number): void;
-	static SetScalabilityQualityToEpic(WorldContextObject: UObject): void;
-	static SetScalabilityQualityToLow(WorldContextObject: UObject): void;
-	static TakeAutomationScreenshot(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Name: string,Notes: string,Options: AutomationScreenshotOptions): void;
-	static TakeAutomationScreenshotAtCamera(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Camera: CameraActor,NameOverride: string,Notes: string,Options: AutomationScreenshotOptions): void;
-	static TakeAutomationScreenshotOfUI(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Name: string,Options: AutomationScreenshotOptions): void;
-	static GetIsMyTurn(WorldContextObject: UObject,PlayerController: PlayerController,MatchID: string,bIsMyTurn?: boolean): {bIsMyTurn: boolean};
-	static GetMyPlayerIndex(WorldContextObject: UObject,PlayerController: PlayerController,MatchID: string,PlayerIndex?: number): {PlayerIndex: number};
-	static GetPlayerDisplayName(WorldContextObject: UObject,PlayerController: PlayerController,MatchID: string,PlayerIndex: number,PlayerDisplayName?: string): {PlayerDisplayName: string};
-	static RegisterTurnBasedMatchInterfaceObject(WorldContextObject: UObject,PlayerController: PlayerController,UObject: UObject): void;
-	static GetCachedAchievementDescription(WorldContextObject: UObject,PlayerController: PlayerController,AchievementID: string,bFoundID?: boolean,Title?: string,LockedDescription?: string,UnlockedDescription?: string,bHidden?: boolean): {bFoundID: boolean, Title: string, LockedDescription: string, UnlockedDescription: string, bHidden: boolean};
-	static GetCachedAchievementProgress(WorldContextObject: UObject,PlayerController: PlayerController,AchievementID: string,bFoundID?: boolean,Progress?: number): {bFoundID: boolean, Progress: number};
-	static LogBox(WorldContextObject: UObject,BoxShape: Box,text: string,ObjectColor: LinearColor,LogCategory: string,bAddToMessageLog: boolean): void;
-	static LogLocation(WorldContextObject: UObject,Location: Vector,text: string,ObjectColor: LinearColor,Radius: number,LogCategory: string,bAddToMessageLog: boolean): void;
-	static LogSegment(WorldContextObject: UObject,SegmentStart: Vector,SegmentEnd: Vector,text: string,ObjectColor: LinearColor,Thickness: number,CategoryName: string,bAddToMessageLog: boolean): void;
-	static LogText(WorldContextObject: UObject,text: string,LogCategory: string,bAddToMessageLog: boolean): void;
-	static BoxOverlapActors(WorldContextObject: UObject,BoxPos: Vector,BoxExtent: Vector,ObjectTypes: EObjectTypeQuery[],ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
-	static BoxOverlapComponents(WorldContextObject: UObject,BoxPos: Vector,Extent: Vector,ObjectTypes: EObjectTypeQuery[],ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
-	static BoxTraceMulti(WorldContextObject: UObject,Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
-	static BoxTraceMultiByProfile(WorldContextObject: UObject,Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
-	static BoxTraceMultiForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
-	static BoxTraceSingle(WorldContextObject: UObject,Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
-	static BoxTraceSingleByProfile(WorldContextObject: UObject,Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
-	static BoxTraceSingleForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
-	static CapsuleOverlapActors(WorldContextObject: UObject,CapsulePos: Vector,Radius: number,HalfHeight: number,ObjectTypes: EObjectTypeQuery[],ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
-	static CapsuleOverlapComponents(WorldContextObject: UObject,CapsulePos: Vector,Radius: number,HalfHeight: number,ObjectTypes: EObjectTypeQuery[],ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
-	static CapsuleTraceMulti(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
-	static CapsuleTraceMultiByProfile(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
-	static CapsuleTraceMultiForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
-	static CapsuleTraceSingle(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
-	static CapsuleTraceSingleByProfile(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
-	static CapsuleTraceSingleForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
-	static Delay(WorldContextObject: UObject,Duration: number,LatentInfo: LatentActionInfo): void;
-	static DrawDebugArrow(WorldContextObject: UObject,LineStart: Vector,LineEnd: Vector,ArrowSize: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
-	static DrawDebugBox(WorldContextObject: UObject,Center: Vector,Extent: Vector,LineColor: LinearColor,Rotation: Rotator,Duration: number,Thickness: number): void;
-	static DrawDebugCapsule(WorldContextObject: UObject,Center: Vector,HalfHeight: number,Radius: number,Rotation: Rotator,LineColor: LinearColor,Duration: number,Thickness: number): void;
-	static DrawDebugCircle(WorldContextObject: UObject,Center: Vector,Radius: number,NumSegments: number,LineColor: LinearColor,Duration: number,Thickness: number,YAxis: Vector,ZAxis: Vector,bDrawAxis: boolean): void;
-	static DrawDebugCone(WorldContextObject: UObject,Origin: Vector,Direction: Vector,Length: number,AngleWidth: number,AngleHeight: number,NumSides: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
-	static DrawDebugConeInDegrees(WorldContextObject: UObject,Origin: Vector,Direction: Vector,Length: number,AngleWidth: number,AngleHeight: number,NumSides: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
-	static DrawDebugCoordinateSystem(WorldContextObject: UObject,AxisLoc: Vector,AxisRot: Rotator,Scale: number,Duration: number,Thickness: number): void;
-	static DrawDebugCylinder(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,Segments: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
-	static DrawDebugFloatHistoryLocation(WorldContextObject: UObject,FloatHistory: DebugFloatHistory,DrawLocation: Vector,DrawSize: Vector2D,DrawColor: LinearColor,Duration: number): void;
-	static DrawDebugFloatHistoryTransform(WorldContextObject: UObject,FloatHistory: DebugFloatHistory,DrawTransform: Transform,DrawSize: Vector2D,DrawColor: LinearColor,Duration: number): void;
-	static DrawDebugFrustum(WorldContextObject: UObject,FrustumTransform: Transform,FrustumColor: LinearColor,Duration: number,Thickness: number): void;
-	static DrawDebugLine(WorldContextObject: UObject,LineStart: Vector,LineEnd: Vector,LineColor: LinearColor,Duration: number,Thickness: number): void;
-	static DrawDebugPlane(WorldContextObject: UObject,PlaneCoordinates: Plane,Location: Vector,Size: number,PlaneColor: LinearColor,Duration: number): void;
-	static DrawDebugPoint(WorldContextObject: UObject,Position: Vector,Size: number,PointColor: LinearColor,Duration: number): void;
-	static DrawDebugSphere(WorldContextObject: UObject,Center: Vector,Radius: number,Segments: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
-	static DrawDebugString(WorldContextObject: UObject,TextLocation: Vector,text: string,TestBaseActor: Actor,TextColor: LinearColor,Duration: number): void;
-	static ExecuteConsoleCommand(WorldContextObject: UObject,Command: string,SpecificPlayer: PlayerController): void;
-	static FlushDebugStrings(WorldContextObject: UObject): void;
-	static FlushPersistentDebugLines(WorldContextObject: UObject): void;
-	static GetConsoleVariableFloatValue(WorldContextObject: UObject,VariableName: string): number;
-	static GetConsoleVariableIntValue(WorldContextObject: UObject,VariableName: string): number;
-	static GetGameTimeInSeconds(WorldContextObject: UObject): number;
-	static IsDedicatedServer(WorldContextObject: UObject): boolean;
-	static IsServer(WorldContextObject: UObject): boolean;
-	static IsStandalone(WorldContextObject: UObject): boolean;
-	static K2_ClearAndInvalidateTimerHandle(WorldContextObject: UObject,Handle?: TimerHandle): {Handle: TimerHandle};
-	static K2_ClearTimerHandle(WorldContextObject: UObject,Handle: TimerHandle): void;
-	static K2_GetTimerElapsedTimeHandle(WorldContextObject: UObject,Handle: TimerHandle): number;
-	static K2_GetTimerRemainingTimeHandle(WorldContextObject: UObject,Handle: TimerHandle): number;
-	static K2_IsTimerActiveHandle(WorldContextObject: UObject,Handle: TimerHandle): boolean;
-	static K2_IsTimerPausedHandle(WorldContextObject: UObject,Handle: TimerHandle): boolean;
-	static K2_PauseTimerHandle(WorldContextObject: UObject,Handle: TimerHandle): void;
-	static K2_TimerExistsHandle(WorldContextObject: UObject,Handle: TimerHandle): boolean;
-	static K2_UnPauseTimerHandle(WorldContextObject: UObject,Handle: TimerHandle): void;
-	static LineTraceMulti(WorldContextObject: UObject,Start: Vector,End: Vector,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
-	static LineTraceMultiByProfile(WorldContextObject: UObject,Start: Vector,End: Vector,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
-	static LineTraceMultiForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
-	static LineTraceSingle(WorldContextObject: UObject,Start: Vector,End: Vector,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
-	static LineTraceSingleByProfile(WorldContextObject: UObject,Start: Vector,End: Vector,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
-	static LineTraceSingleForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
-	static LoadAsset(WorldContextObject: UObject,Asset: UObject,OnLoaded: UnrealEngineDelegate<(Loaded: UObject) => void>,LatentInfo: LatentActionInfo): void;
-	static LoadAssetClass(WorldContextObject: UObject,AssetClass: Class,OnLoaded: UnrealEngineDelegate<(Loaded: UnrealEngineClass) => void>,LatentInfo: LatentActionInfo): void;
-	static PrintString(WorldContextObject: UObject,inString: string,bPrintToScreen: boolean,bPrintToLog: boolean,TextColor: LinearColor,Duration: number): void;
-	static PrintText(WorldContextObject: UObject,InText: string,bPrintToScreen: boolean,bPrintToLog: boolean,TextColor: LinearColor,Duration: number): void;
-	static QuitGame(WorldContextObject: UObject,SpecificPlayer: PlayerController,QuitPreference: EQuitPreference,bIgnorePlatformRestrictions: boolean): void;
-	static RetriggerableDelay(WorldContextObject: UObject,Duration: number,LatentInfo: LatentActionInfo): void;
-	static SetSuppressViewportTransitionMessage(WorldContextObject: UObject,bState: boolean): void;
-	static SphereOverlapActors(WorldContextObject: UObject,SpherePos: Vector,SphereRadius: number,ObjectTypes: EObjectTypeQuery[],ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
-	static SphereOverlapComponents(WorldContextObject: UObject,SpherePos: Vector,SphereRadius: number,ObjectTypes: EObjectTypeQuery[],ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
-	static SphereTraceMulti(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
-	static SphereTraceMultiByProfile(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
-	static SphereTraceMultiForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
-	static SphereTraceSingle(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
-	static SphereTraceSingleByProfile(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
-	static SphereTraceSingleForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
-	static BeginDrawCanvasToRenderTarget(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,Canvas?: Canvas,Size?: Vector2D,Context?: DrawToRenderTargetContext): {Canvas: Canvas, Size: Vector2D, Context: DrawToRenderTargetContext};
-	static ClearRenderTarget2D(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,ClearColor: LinearColor): void;
-	static ConvertRenderTargetToTexture2DEditorOnly(WorldContextObject: UObject,RenderTarget: TextureRenderTarget2D,Texture: Texture2D): void;
-	static CreateRenderTarget2D(WorldContextObject: UObject,Width: number,Height: number,Format: ETextureRenderTargetFormat): TextureRenderTarget2D;
-	static DrawMaterialToRenderTarget(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,Material: MaterialInterface): void;
-	static EndDrawCanvasToRenderTarget(WorldContextObject: UObject,Context: DrawToRenderTargetContext): void;
-	static ExportRenderTarget(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,FilePath: string,Filename: string): void;
-	static ExportTexture2D(WorldContextObject: UObject,Texture: Texture2D,FilePath: string,Filename: string): void;
-	static ImportBufferAsTexture2D(WorldContextObject: UObject,Buffer: number[]): Texture2D;
-	static ImportFileAsTexture2D(WorldContextObject: UObject,Filename: string): Texture2D;
-	static ReadRenderTargetPixel(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,X: number,Y: number): Color;
-	static ReadRenderTargetRawPixel(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,X: number,Y: number): LinearColor;
-	static ReadRenderTargetRawUV(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,U: number,V: number): LinearColor;
-	static ReadRenderTargetUV(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,U: number,V: number): Color;
-	static MinimumAreaRectangle(WorldContextObject: UObject,InVerts: Vector[],SampleSurfaceNormal: Vector,OutRectCenter?: Vector,OutRectRotation?: Rotator,OutSideLengthX?: number,OutSideLengthY?: number,bDebugDraw?: boolean): {OutRectCenter: Vector, OutRectRotation: Rotator, OutSideLengthX: number, OutSideLengthY: number};
-	static CreateDynamicMaterialInstance(WorldContextObject: UObject,Parent: MaterialInterface,OptionalName: string): MaterialInstanceDynamic;
-	static GetScalarParameterValue(WorldContextObject: UObject,Collection: MaterialParameterCollection,ParameterName: string): number;
-	static GetVectorParameterValue(WorldContextObject: UObject,Collection: MaterialParameterCollection,ParameterName: string): LinearColor;
-	static SetScalarParameterValue(WorldContextObject: UObject,Collection: MaterialParameterCollection,ParameterName: string,ParameterValue: number): void;
-	static SetVectorParameterValue(WorldContextObject: UObject,Collection: MaterialParameterCollection,ParameterName: string,ParameterValue: LinearColor): void;
-	static ActivateReverbEffect(WorldContextObject: UObject,ReverbEffect: ReverbEffect,TagName: string,Priority: number,Volume: number,FadeTime: number): void;
-	static ApplyRadialDamage(WorldContextObject: UObject,BaseDamage: number,Origin: Vector,DamageRadius: number,DamageTypeClass: UnrealEngineClass,IgnoreActors: Actor[],DamageCauser: Actor,InstigatedByController: Controller,bDoFullDamage: boolean,DamagePreventionChannel: ECollisionChannel): boolean;
-	static ApplyRadialDamageWithFalloff(WorldContextObject: UObject,BaseDamage: number,MinimumDamage: number,Origin: Vector,DamageInnerRadius: number,DamageOuterRadius: number,DamageFalloff: number,DamageTypeClass: UnrealEngineClass,IgnoreActors: Actor[],DamageCauser: Actor,InstigatedByController: Controller,DamagePreventionChannel: ECollisionChannel): boolean;
-	static AreAnyListenersWithinRange(WorldContextObject: UObject,Location: Vector,MaximumRange: number): boolean;
-	static BeginDeferredActorSpawnFromClass(WorldContextObject: UObject,ActorClass: UnrealEngineClass,SpawnTransform: Transform,CollisionHandlingOverride: ESpawnActorCollisionHandlingMethod,Owner: Actor): Actor;
-	static BeginSpawningActorFromBlueprint(WorldContextObject: UObject,Blueprint: Blueprint,SpawnTransform: Transform,bNoCollisionFail: boolean): Actor;
-	static BeginSpawningActorFromClass(WorldContextObject: UObject,ActorClass: UnrealEngineClass,SpawnTransform: Transform,bNoCollisionFail: boolean,Owner: Actor): Actor;
-	static Blueprint_PredictProjectilePath_Advanced(WorldContextObject: UObject,PredictParams: PredictProjectilePathParams,PredictResult?: PredictProjectilePathResult): {PredictResult: PredictProjectilePathResult, $: boolean};
-	static Blueprint_PredictProjectilePath_ByObjectType(WorldContextObject: UObject,OutHit?: HitResult,OutPathPositions?: Vector[],OutLastTraceDestination?: Vector,StartPos?: Vector,LaunchVelocity?: Vector,bTracePath?: boolean,ProjectileRadius?: number,ObjectTypes?: EObjectTypeQuery[],bTraceComplex?: boolean,ActorsToIgnore?: Actor[],DrawDebugType?: EDrawDebugTrace,DrawDebugTime?: number,SimFrequency?: number,MaxSimTime?: number,OverrideGravityZ?: number): {OutHit: HitResult, OutPathPositions: Vector[], OutLastTraceDestination: Vector, $: boolean};
-	static Blueprint_PredictProjectilePath_ByTraceChannel(WorldContextObject: UObject,OutHit?: HitResult,OutPathPositions?: Vector[],OutLastTraceDestination?: Vector,StartPos?: Vector,LaunchVelocity?: Vector,bTracePath?: boolean,ProjectileRadius?: number,TraceChannel?: ECollisionChannel,bTraceComplex?: boolean,ActorsToIgnore?: Actor[],DrawDebugType?: EDrawDebugTrace,DrawDebugTime?: number,SimFrequency?: number,MaxSimTime?: number,OverrideGravityZ?: number): {OutHit: HitResult, OutPathPositions: Vector[], OutLastTraceDestination: Vector, $: boolean};
-	static BlueprintSuggestProjectileVelocity(WorldContextObject: UObject,TossVelocity?: Vector,StartLocation?: Vector,EndLocation?: Vector,LaunchSpeed?: number,OverrideGravityZ?: number,TraceOption?: ESuggestProjVelocityTraceOption,CollisionRadius?: number,bFavorHighArc?: boolean,bDrawDebug?: boolean): {TossVelocity: Vector, $: boolean};
-	static ClearSoundMixClassOverride(WorldContextObject: UObject,InSoundMixModifier: SoundMix,InSoundClass: SoundClass,FadeOutTime: number): void;
-	static ClearSoundMixModifiers(WorldContextObject: UObject): void;
-	static CreatePlayer(WorldContextObject: UObject,ControllerId: number,bSpawnPawn: boolean): PlayerController;
-	static CreateSound2D(WorldContextObject: UObject,Sound: SoundBase,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,ConcurrencySettings: SoundConcurrency,bPersistAcrossLevelTransition: boolean,bAutoDestroy: boolean): AudioComponent;
-	static DeactivateReverbEffect(WorldContextObject: UObject,TagName: string): void;
-	static FlushLevelStreaming(WorldContextObject: UObject): void;
-	static GetAccurateRealTime(WorldContextObject: UObject,Seconds?: number,PartialSeconds?: number): {Seconds: number, PartialSeconds: number};
-	static GetAllActorsOfClass(WorldContextObject: UObject,ActorClass: UnrealEngineClass,OutActors?: Actor[]): {OutActors: Actor[]};
-	static GetAllActorsWithInterface(WorldContextObject: UObject,Interface: UnrealEngineClass,OutActors?: Actor[]): {OutActors: Actor[]};
-	static GetAllActorsWithTag(WorldContextObject: UObject,Tag: string,OutActors?: Actor[]): {OutActors: Actor[]};
-	static GetAudioTimeSeconds(WorldContextObject: UObject): number;
-	static GetCurrentLevelName(WorldContextObject: UObject,bRemovePrefixString: boolean): string;
-	static GetCurrentReverbEffect(WorldContextObject: UObject): ReverbEffect;
-	static GetEnableWorldRendering(WorldContextObject: UObject): boolean;
-	static GetGameInstance(WorldContextObject: UObject): GameInstance;
-	static GetGameMode(WorldContextObject: UObject): GameModeBase;
-	static GetGameState(WorldContextObject: UObject): GameStateBase;
-	static GetGlobalTimeDilation(WorldContextObject: UObject): number;
-	static GetPlayerCameraManager(WorldContextObject: UObject,PlayerIndex: number): PlayerCameraManager;
-	static GetPlayerCharacter(WorldContextObject: UObject,PlayerIndex: number): Character;
-	static GetPlayerController(WorldContextObject: UObject,PlayerIndex: number): PlayerController;
-	static GetPlayerPawn(WorldContextObject: UObject,PlayerIndex: number): Pawn;
-	static GetRealTimeSeconds(WorldContextObject: UObject): number;
-	static GetStreamingLevel(WorldContextObject: UObject,PackageName: string): LevelStreaming;
-	static GetTimeSeconds(WorldContextObject: UObject): number;
-	static GetUnpausedTimeSeconds(WorldContextObject: UObject): number;
-	static GetWorldDeltaSeconds(WorldContextObject: UObject): number;
-	static GetWorldOriginLocation(WorldContextObject: UObject): IntVector;
-	static GrassOverlappingSphereCount(WorldContextObject: UObject,StaticMesh: StaticMesh,CenterPosition: Vector,Radius: number): number;
-	static IsGamePaused(WorldContextObject: UObject): boolean;
-	static LoadStreamLevel(WorldContextObject: UObject,LevelName: string,bMakeVisibleAfterLoad: boolean,bShouldBlockOnLoad: boolean,LatentInfo: LatentActionInfo): void;
-	static OpenLevel(WorldContextObject: UObject,LevelName: string,bAbsolute: boolean,Options: string): void;
-	static PlayDialogue2D(WorldContextObject: UObject,Dialogue: DialogueWave,Context: DialogueContext,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number): void;
-	static PlayDialogueAtLocation(WorldContextObject: UObject,Dialogue: DialogueWave,Context: DialogueContext,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation): void;
-	static PlaySound2D(WorldContextObject: UObject,Sound: SoundBase,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,ConcurrencySettings: SoundConcurrency,OwningActor: Actor): void;
-	static PlaySoundAtLocation(WorldContextObject: UObject,Sound: SoundBase,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,ConcurrencySettings: SoundConcurrency,OwningActor: Actor): void;
-	static PlayWorldCameraShake(WorldContextObject: UObject,Shake: UnrealEngineClass,Epicenter: Vector,InnerRadius: number,OuterRadius: number,Falloff: number,bOrientShakeTowardsEpicenter: boolean): void;
-	static PopSoundMixModifier(WorldContextObject: UObject,InSoundMixModifier: SoundMix): void;
-	static PushSoundMixModifier(WorldContextObject: UObject,InSoundMixModifier: SoundMix): void;
-	static RebaseLocalOriginOntoZero(WorldContextObject: UObject,WorldLocation: Vector): Vector;
-	static RebaseZeroOriginOntoLocal(WorldContextObject: UObject,WorldLocation: Vector): Vector;
-	static SetBaseSoundMix(WorldContextObject: UObject,InSoundMix: SoundMix): void;
-	static SetEnableWorldRendering(WorldContextObject: UObject,bEnable: boolean): void;
-	static SetGamePaused(WorldContextObject: UObject,bPaused: boolean): boolean;
-	static SetGlobalListenerFocusParameters(WorldContextObject: UObject,FocusAzimuthScale: number,NonFocusAzimuthScale: number,FocusDistanceScale: number,NonFocusDistanceScale: number,FocusVolumeScale: number,NonFocusVolumeScale: number,FocusPriorityScale: number,NonFocusPriorityScale: number): void;
-	static SetGlobalPitchModulation(WorldContextObject: UObject,PitchModulation: number,TimeSec: number): void;
-	static SetGlobalTimeDilation(WorldContextObject: UObject,TimeDilation: number): void;
-	static SetSoundMixClassOverride(WorldContextObject: UObject,InSoundMixModifier: SoundMix,InSoundClass: SoundClass,Volume: number,Pitch: number,FadeInTime: number,bApplyToChildren: boolean): void;
-	static SetWorldOriginLocation(WorldContextObject: UObject,NewLocation: IntVector): void;
-	static SpawnDecalAtLocation(WorldContextObject: UObject,DecalMaterial: MaterialInterface,DecalSize: Vector,Location: Vector,Rotation: Rotator,LifeSpan: number): DecalComponent;
-	static SpawnDialogue2D(WorldContextObject: UObject,Dialogue: DialogueWave,Context: DialogueContext,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,bAutoDestroy: boolean): AudioComponent;
-	static SpawnDialogueAtLocation(WorldContextObject: UObject,Dialogue: DialogueWave,Context: DialogueContext,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,bAutoDestroy: boolean): AudioComponent;
-	static SpawnEmitterAtLocation(WorldContextObject: UObject,EmitterTemplate: ParticleSystem,Location: Vector,Rotation: Rotator,Scale: Vector,bAutoDestroy: boolean,PoolingMethod: EPSCPoolMethod): ParticleSystemComponent;
-	static SpawnForceFeedbackAtLocation(WorldContextObject: UObject,ForceFeedbackEffect: ForceFeedbackEffect,Location: Vector,Rotation: Rotator,bLooping: boolean,IntensityMultiplier: number,StartTime: number,AttenuationSettings: ForceFeedbackAttenuation,bAutoDestroy: boolean): ForceFeedbackComponent;
-	static SpawnSound2D(WorldContextObject: UObject,Sound: SoundBase,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,ConcurrencySettings: SoundConcurrency,bPersistAcrossLevelTransition: boolean,bAutoDestroy: boolean): AudioComponent;
-	static SpawnSoundAtLocation(WorldContextObject: UObject,Sound: SoundBase,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,ConcurrencySettings: SoundConcurrency,bAutoDestroy: boolean): AudioComponent;
-	static SuggestProjectileVelocity_CustomArc(WorldContextObject: UObject,OutLaunchVelocity?: Vector,StartPos?: Vector,EndPos?: Vector,OverrideGravityZ?: number,ArcParam?: number): {OutLaunchVelocity: Vector, $: boolean};
-	static UnloadStreamLevel(WorldContextObject: UObject,LevelName: string,LatentInfo: LatentActionInfo,bShouldBlockOnUnload: boolean): void;
-	static FoliageOverlappingBoxCount(WorldContextObject: UObject,StaticMesh: StaticMesh,Box: Box): number;
-	static FoliageOverlappingSphereCount(WorldContextObject: UObject,StaticMesh: StaticMesh,CenterPosition: Vector,Radius: number): number;
-	static GetMousePositionOnViewport(WorldContextObject: UObject): Vector2D;
-	static GetViewportScale(WorldContextObject: UObject): number;
-	static GetViewportSize(WorldContextObject: UObject): Vector2D;
-	static GetViewportWidgetGeometry(WorldContextObject: UObject): Geometry;
-	static RemoveAllWidgets(WorldContextObject: UObject): void;
-	static Create(WorldContextObject: UObject,WidgetType: UnrealEngineClass,OwningPlayer: PlayerController): UserWidget;
-	static GetAllWidgetsOfClass(WorldContextObject: UObject,FoundWidgets?: UserWidget[],WidgetClass?: UnrealEngineClass,TopLevelOnly?: boolean): {FoundWidgets: UserWidget[]};
-	static GetAllWidgetsWithInterface(WorldContextObject: UObject,Interface: UnrealEngineClass,FoundWidgets?: UserWidget[],TopLevelOnly?: boolean): {FoundWidgets: UserWidget[]};
-	static GetSafeZonePadding(WorldContextObject: UObject,SafePadding?: Vector4,SafePaddingScale?: Vector2D,SpillOverPadding?: Vector4): {SafePadding: Vector4, SafePaddingScale: Vector2D, SpillOverPadding: Vector4};
-	static SetHardwareCursor(WorldContextObject: UObject,CursorShape: EMouseCursor,CursorName: string,HotSpot: Vector2D): boolean;
-	static AbsoluteToViewport(WorldContextObject: UObject,AbsoluteDesktopCoordinate: Vector2D,PixelPosition?: Vector2D,ViewportPosition?: Vector2D): {PixelPosition: Vector2D, ViewportPosition: Vector2D};
-	static LocalToViewport(WorldContextObject: UObject,Geometry: Geometry,LocalCoordinate: Vector2D,PixelPosition?: Vector2D,ViewportPosition?: Vector2D): {PixelPosition: Vector2D, ViewportPosition: Vector2D};
-	static ScreenToViewport(WorldContextObject: UObject,ScreenPosition: Vector2D,ViewportPosition?: Vector2D): {ViewportPosition: Vector2D};
-	static ScreenToWidgetAbsolute(WorldContextObject: UObject,ScreenPosition: Vector2D,AbsoluteCoordinate?: Vector2D): {AbsoluteCoordinate: Vector2D};
-	static ScreenToWidgetLocal(WorldContextObject: UObject,Geometry: Geometry,ScreenPosition: Vector2D,LocalCoordinate?: Vector2D): {LocalCoordinate: Vector2D};
-	static AddMasterSubmixEffect(WorldContextObject: UObject,SubmixEffectPreset: SoundEffectSubmixPreset): void;
-	static AddSourceEffectToPresetChain(WorldContextObject: UObject,PresetChain: SoundEffectSourcePresetChain,Entry: SourceEffectChainEntry): void;
-	static ClearMasterSubmixEffects(WorldContextObject: UObject): void;
-	static GetNumberOfEntriesInSourceEffectChain(WorldContextObject: UObject,PresetChain: SoundEffectSourcePresetChain): number;
-	static PauseRecordingOutput(WorldContextObject: UObject,SubmixToPause: SoundSubmix): void;
-	static RemoveMasterSubmixEffect(WorldContextObject: UObject,SubmixEffectPreset: SoundEffectSubmixPreset): void;
-	static RemoveSourceEffectFromPresetChain(WorldContextObject: UObject,PresetChain: SoundEffectSourcePresetChain,EntryIndex: number): void;
-	static ResumeRecordingOutput(WorldContextObject: UObject,SubmixToPause: SoundSubmix): void;
-	static SetBypassSourceEffectChainEntry(WorldContextObject: UObject,PresetChain: SoundEffectSourcePresetChain,EntryIndex: number,bBypassed: boolean): void;
-	static StartRecordingOutput(WorldContextObject: UObject,ExpectedDuration: number,SubmixToRecord: SoundSubmix): void;
-	static StopRecordingOutput(WorldContextObject: UObject,ExportType: EAudioRecordingExportType,Name: string,Path: string,SubmixToRecord: SoundSubmix,ExistingSoundWaveToOverwrite: SoundWave): SoundWave;
-	static CreateMoveToProxyObject(WorldContextObject: UObject,Pawn: Pawn,Destination: Vector,TargetActor: Actor,AcceptanceRadius: number,bStopOnOverlap: boolean): AIAsyncTaskBlueprintProxy;
-	static SpawnAIFromClass(WorldContextObject: UObject,PawnClass: UnrealEngineClass,BehaviorTree: BehaviorTree,Location: Vector,Rotation: Rotator,bNoCollisionFail: boolean): Pawn;
-	static GetAllActorsOfClassMatchingTagQuery(WorldContextObject: UObject,ActorClass: UnrealEngineClass,GameplayTagQuery: GameplayTagQuery,OutActors?: Actor[]): {OutActors: Actor[]};
-	static GetDeviceWorldPose(WorldContext: UObject,XRDeviceId: XRDeviceId,bIsTracked?: boolean,Orientation?: Rotator,bHasPositionalTracking?: boolean,Position?: Vector): {bIsTracked: boolean, Orientation: Rotator, bHasPositionalTracking: boolean, Position: Vector};
-	static GetTrackingToWorldTransform(WorldContext: UObject): Transform;
-	static GetWorldToMetersScale(WorldContext: UObject): number;
-	static SetWorldToMetersScale(WorldContext: UObject,NewScale: number): void;
+declare class PostProcessSettings { 
+	bOverride_WhiteTemp: boolean;
+	bOverride_WhiteTint: boolean;
+	bOverride_ColorSaturation: boolean;
+	bOverride_ColorContrast: boolean;
+	bOverride_ColorGamma: boolean;
+	bOverride_ColorGain: boolean;
+	bOverride_ColorOffset: boolean;
+	bOverride_ColorSaturationShadows: boolean;
+	bOverride_ColorContrastShadows: boolean;
+	bOverride_ColorGammaShadows: boolean;
+	bOverride_ColorGainShadows: boolean;
+	bOverride_ColorOffsetShadows: boolean;
+	bOverride_ColorSaturationMidtones: boolean;
+	bOverride_ColorContrastMidtones: boolean;
+	bOverride_ColorGammaMidtones: boolean;
+	bOverride_ColorGainMidtones: boolean;
+	bOverride_ColorOffsetMidtones: boolean;
+	bOverride_ColorSaturationHighlights: boolean;
+	bOverride_ColorContrastHighlights: boolean;
+	bOverride_ColorGammaHighlights: boolean;
+	bOverride_ColorGainHighlights: boolean;
+	bOverride_ColorOffsetHighlights: boolean;
+	bOverride_ColorCorrectionShadowsMax: boolean;
+	bOverride_ColorCorrectionHighlightsMin: boolean;
+	bOverride_BlueCorrection: boolean;
+	bOverride_ExpandGamut: boolean;
+	bOverride_FilmWhitePoint: boolean;
+	bOverride_FilmSaturation: boolean;
+	bOverride_FilmChannelMixerRed: boolean;
+	bOverride_FilmChannelMixerGreen: boolean;
+	bOverride_FilmChannelMixerBlue: boolean;
+	bOverride_FilmContrast: boolean;
+	bOverride_FilmDynamicRange: boolean;
+	bOverride_FilmHealAmount: boolean;
+	bOverride_FilmToeAmount: boolean;
+	bOverride_FilmShadowTint: boolean;
+	bOverride_FilmShadowTintBlend: boolean;
+	bOverride_FilmShadowTintAmount: boolean;
+	bOverride_FilmSlope: boolean;
+	bOverride_FilmToe: boolean;
+	bOverride_FilmShoulder: boolean;
+	bOverride_FilmBlackClip: boolean;
+	bOverride_FilmWhiteClip: boolean;
+	bOverride_SceneColorTint: boolean;
+	bOverride_SceneFringeIntensity: boolean;
+	bOverride_ChromaticAberrationStartOffset: boolean;
+	bOverride_AmbientCubemapTint: boolean;
+	bOverride_AmbientCubemapIntensity: boolean;
+	bOverride_BloomMethod: boolean;
+	bOverride_BloomIntensity: boolean;
+	bOverride_BloomThreshold: boolean;
+	bOverride_Bloom1Tint: boolean;
+	bOverride_Bloom1Size: boolean;
+	bOverride_Bloom2Size: boolean;
+	bOverride_Bloom2Tint: boolean;
+	bOverride_Bloom3Tint: boolean;
+	bOverride_Bloom3Size: boolean;
+	bOverride_Bloom4Tint: boolean;
+	bOverride_Bloom4Size: boolean;
+	bOverride_Bloom5Tint: boolean;
+	bOverride_Bloom5Size: boolean;
+	bOverride_Bloom6Tint: boolean;
+	bOverride_Bloom6Size: boolean;
+	bOverride_BloomSizeScale: boolean;
+	bOverride_BloomConvolutionTexture: boolean;
+	bOverride_BloomConvolutionSize: boolean;
+	bOverride_BloomConvolutionCenterUV: boolean;
+	bOverride_BloomConvolutionPreFilter: boolean;
+	bOverride_BloomConvolutionPreFilterMin: boolean;
+	bOverride_BloomConvolutionPreFilterMax: boolean;
+	bOverride_BloomConvolutionPreFilterMult: boolean;
+	bOverride_BloomConvolutionBufferScale: boolean;
+	bOverride_BloomDirtMaskIntensity: boolean;
+	bOverride_BloomDirtMaskTint: boolean;
+	bOverride_BloomDirtMask: boolean;
+	bOverride_CameraShutterSpeed: boolean;
+	bOverride_CameraISO: boolean;
+	bOverride_AutoExposureMethod: boolean;
+	bOverride_AutoExposureLowPercent: boolean;
+	bOverride_AutoExposureHighPercent: boolean;
+	bOverride_AutoExposureMinBrightness: boolean;
+	bOverride_AutoExposureMaxBrightness: boolean;
+	bOverride_AutoExposureCalibrationConstant: boolean;
+	bOverride_AutoExposureSpeedUp: boolean;
+	bOverride_AutoExposureSpeedDown: boolean;
+	bOverride_AutoExposureBias: boolean;
+	bOverride_AutoExposureBiasCurve: boolean;
+	bOverride_HistogramLogMin: boolean;
+	bOverride_HistogramLogMax: boolean;
+	bOverride_LensFlareIntensity: boolean;
+	bOverride_LensFlareTint: boolean;
+	bOverride_LensFlareTints: boolean;
+	bOverride_LensFlareBokehSize: boolean;
+	bOverride_LensFlareBokehShape: boolean;
+	bOverride_LensFlareThreshold: boolean;
+	bOverride_VignetteIntensity: boolean;
+	bOverride_GrainIntensity: boolean;
+	bOverride_GrainJitter: boolean;
+	bOverride_AmbientOcclusionIntensity: boolean;
+	bOverride_AmbientOcclusionStaticFraction: boolean;
+	bOverride_AmbientOcclusionRadius: boolean;
+	bOverride_AmbientOcclusionFadeDistance: boolean;
+	bOverride_AmbientOcclusionFadeRadius: boolean;
+	bOverride_AmbientOcclusionDistance: boolean;
+	bOverride_AmbientOcclusionRadiusInWS: boolean;
+	bOverride_AmbientOcclusionPower: boolean;
+	bOverride_AmbientOcclusionBias: boolean;
+	bOverride_AmbientOcclusionQuality: boolean;
+	bOverride_AmbientOcclusionMipBlend: boolean;
+	bOverride_AmbientOcclusionMipScale: boolean;
+	bOverride_AmbientOcclusionMipThreshold: boolean;
+	bOverride_RayTracingAO: boolean;
+	bOverride_RayTracingAOSamplesPerPixel: boolean;
+	bOverride_LPVIntensity: boolean;
+	bOverride_LPVDirectionalOcclusionIntensity: boolean;
+	bOverride_LPVDirectionalOcclusionRadius: boolean;
+	bOverride_LPVDiffuseOcclusionExponent: boolean;
+	bOverride_LPVSpecularOcclusionExponent: boolean;
+	bOverride_LPVDiffuseOcclusionIntensity: boolean;
+	bOverride_LPVSpecularOcclusionIntensity: boolean;
+	bOverride_LPVSize: boolean;
+	bOverride_LPVSecondaryOcclusionIntensity: boolean;
+	bOverride_LPVSecondaryBounceIntensity: boolean;
+	bOverride_LPVGeometryVolumeBias: boolean;
+	bOverride_LPVVplInjectionBias: boolean;
+	bOverride_LPVEmissiveInjectionIntensity: boolean;
+	bOverride_LPVFadeRange: boolean;
+	bOverride_LPVDirectionalOcclusionFadeRange: boolean;
+	bOverride_IndirectLightingColor: boolean;
+	bOverride_IndirectLightingIntensity: boolean;
+	bOverride_ColorGradingIntensity: boolean;
+	bOverride_ColorGradingLUT: boolean;
+	bOverride_DepthOfFieldFocalDistance: boolean;
+	bOverride_DepthOfFieldFstop: boolean;
+	bOverride_DepthOfFieldMinFstop: boolean;
+	bOverride_DepthOfFieldBladeCount: boolean;
+	bOverride_DepthOfFieldSensorWidth: boolean;
+	bOverride_DepthOfFieldDepthBlurRadius: boolean;
+	bOverride_DepthOfFieldDepthBlurAmount: boolean;
+	bOverride_DepthOfFieldFocalRegion: boolean;
+	bOverride_DepthOfFieldNearTransitionRegion: boolean;
+	bOverride_DepthOfFieldFarTransitionRegion: boolean;
+	bOverride_DepthOfFieldScale: boolean;
+	bOverride_DepthOfFieldNearBlurSize: boolean;
+	bOverride_DepthOfFieldFarBlurSize: boolean;
+	bOverride_MobileHQGaussian: boolean;
+	bOverride_DepthOfFieldOcclusion: boolean;
+	bOverride_DepthOfFieldSkyFocusDistance: boolean;
+	bOverride_DepthOfFieldVignetteSize: boolean;
+	bOverride_MotionBlurAmount: boolean;
+	bOverride_MotionBlurMax: boolean;
+	bOverride_MotionBlurTargetFPS: boolean;
+	bOverride_MotionBlurPerObjectSize: boolean;
+	bOverride_ScreenPercentage: boolean;
+	bOverride_ScreenSpaceReflectionIntensity: boolean;
+	bOverride_ScreenSpaceReflectionQuality: boolean;
+	bOverride_ScreenSpaceReflectionMaxRoughness: boolean;
+	bOverride_ScreenSpaceReflectionRoughnessScale: boolean;
+	bOverride_ReflectionsType: boolean;
+	bOverride_RayTracingReflectionsMaxRoughness: boolean;
+	bOverride_RayTracingReflectionsMaxBounces: boolean;
+	bOverride_RayTracingReflectionsSamplesPerPixel: boolean;
+	bOverride_RayTracingReflectionsShadows: boolean;
+	bOverride_TranslucencyType: boolean;
+	bOverride_RayTracingTranslucencyMaxRoughness: boolean;
+	bOverride_RayTracingTranslucencyRefractionRays: boolean;
+	bOverride_RayTracingTranslucencySamplesPerPixel: boolean;
+	bOverride_RayTracingTranslucencyShadows: boolean;
+	bOverride_RayTracingTranslucencyRefraction: boolean;
+	bOverride_RayTracingGI: boolean;
+	bOverride_RayTracingGIMaxBounces: boolean;
+	bOverride_RayTracingGISamplesPerPixel: boolean;
+	bOverride_PathTracingMaxBounces: boolean;
+	bOverride_PathTracingSamplesPerPixel: boolean;
+	bMobileHQGaussian: boolean;
+	BloomMethod: EBloomMethod;
+	AutoExposureMethod: EAutoExposureMethod;
+	DepthOfFieldMethod: EDepthOfFieldMethod;
+	WhiteTemp: number;
+	WhiteTint: number;
+	ColorSaturation: Vector4;
+	ColorContrast: Vector4;
+	ColorGamma: Vector4;
+	ColorGain: Vector4;
+	ColorOffset: Vector4;
+	ColorSaturationShadows: Vector4;
+	ColorContrastShadows: Vector4;
+	ColorGammaShadows: Vector4;
+	ColorGainShadows: Vector4;
+	ColorOffsetShadows: Vector4;
+	ColorSaturationMidtones: Vector4;
+	ColorContrastMidtones: Vector4;
+	ColorGammaMidtones: Vector4;
+	ColorGainMidtones: Vector4;
+	ColorOffsetMidtones: Vector4;
+	ColorSaturationHighlights: Vector4;
+	ColorContrastHighlights: Vector4;
+	ColorGammaHighlights: Vector4;
+	ColorGainHighlights: Vector4;
+	ColorOffsetHighlights: Vector4;
+	ColorCorrectionHighlightsMin: number;
+	ColorCorrectionShadowsMax: number;
+	BlueCorrection: number;
+	ExpandGamut: number;
+	FilmSlope: number;
+	FilmToe: number;
+	FilmShoulder: number;
+	FilmBlackClip: number;
+	FilmWhiteClip: number;
+	FilmWhitePoint: LinearColor;
+	FilmShadowTint: LinearColor;
+	FilmShadowTintBlend: number;
+	FilmShadowTintAmount: number;
+	FilmSaturation: number;
+	FilmChannelMixerRed: LinearColor;
+	FilmChannelMixerGreen: LinearColor;
+	FilmChannelMixerBlue: LinearColor;
+	FilmContrast: number;
+	FilmToeAmount: number;
+	FilmHealAmount: number;
+	FilmDynamicRange: number;
+	SceneColorTint: LinearColor;
+	SceneFringeIntensity: number;
+	ChromaticAberrationStartOffset: number;
+	BloomIntensity: number;
+	BloomThreshold: number;
+	BloomSizeScale: number;
+	Bloom1Size: number;
+	Bloom2Size: number;
+	Bloom3Size: number;
+	Bloom4Size: number;
+	Bloom5Size: number;
+	Bloom6Size: number;
+	Bloom1Tint: LinearColor;
+	Bloom2Tint: LinearColor;
+	Bloom3Tint: LinearColor;
+	Bloom4Tint: LinearColor;
+	Bloom5Tint: LinearColor;
+	Bloom6Tint: LinearColor;
+	BloomConvolutionSize: number;
+	BloomConvolutionTexture: Texture2D;
+	BloomConvolutionCenterUV: Vector2D;
+	BloomConvolutionPreFilter: Vector;
+	BloomConvolutionPreFilterMin: number;
+	BloomConvolutionPreFilterMax: number;
+	BloomConvolutionPreFilterMult: number;
+	BloomConvolutionBufferScale: number;
+	BloomDirtMask: Texture;
+	BloomDirtMaskIntensity: number;
+	BloomDirtMaskTint: LinearColor;
+	AmbientCubemapTint: LinearColor;
+	AmbientCubemapIntensity: number;
+	AmbientCubemap: TextureCube;
+	CameraShutterSpeed: number;
+	CameraISO: number;
+	DepthOfFieldFstop: number;
+	DepthOfFieldMinFstop: number;
+	DepthOfFieldBladeCount: number;
+	AutoExposureBias: number;
+	AutoExposureBiasCurve: CurveFloat;
+	AutoExposureLowPercent: number;
+	AutoExposureHighPercent: number;
+	AutoExposureMinBrightness: number;
+	AutoExposureMaxBrightness: number;
+	AutoExposureSpeedUp: number;
+	AutoExposureSpeedDown: number;
+	HistogramLogMin: number;
+	HistogramLogMax: number;
+	AutoExposureCalibrationConstant: number;
+	LensFlareIntensity: number;
+	LensFlareTint: LinearColor;
+	LensFlareBokehSize: number;
+	LensFlareThreshold: number;
+	LensFlareBokehShape: Texture;
+	LensFlareTints: LinearColor;
+	VignetteIntensity: number;
+	GrainJitter: number;
+	GrainIntensity: number;
+	AmbientOcclusionIntensity: number;
+	AmbientOcclusionStaticFraction: number;
+	AmbientOcclusionRadius: number;
+	AmbientOcclusionRadiusInWS: boolean;
+	AmbientOcclusionFadeDistance: number;
+	AmbientOcclusionFadeRadius: number;
+	AmbientOcclusionDistance: number;
+	AmbientOcclusionPower: number;
+	AmbientOcclusionBias: number;
+	AmbientOcclusionQuality: number;
+	AmbientOcclusionMipBlend: number;
+	AmbientOcclusionMipScale: number;
+	AmbientOcclusionMipThreshold: number;
+	RayTracingAO: boolean;
+	RayTracingAOSamplesPerPixel: number;
+	IndirectLightingColor: LinearColor;
+	IndirectLightingIntensity: number;
+	RayTracingGI: boolean;
+	RayTracingGIMaxBounces: number;
+	RayTracingGISamplesPerPixel: number;
+	ColorGradingIntensity: number;
+	ColorGradingLUT: Texture;
+	DepthOfFieldSensorWidth: number;
+	DepthOfFieldFocalDistance: number;
+	DepthOfFieldDepthBlurAmount: number;
+	DepthOfFieldDepthBlurRadius: number;
+	DepthOfFieldFocalRegion: number;
+	DepthOfFieldNearTransitionRegion: number;
+	DepthOfFieldFarTransitionRegion: number;
+	DepthOfFieldScale: number;
+	DepthOfFieldNearBlurSize: number;
+	DepthOfFieldFarBlurSize: number;
+	DepthOfFieldOcclusion: number;
+	DepthOfFieldSkyFocusDistance: number;
+	DepthOfFieldVignetteSize: number;
+	MotionBlurAmount: number;
+	MotionBlurMax: number;
+	MotionBlurTargetFPS: number;
+	MotionBlurPerObjectSize: number;
+	LPVIntensity: number;
+	LPVVplInjectionBias: number;
+	LPVSize: number;
+	LPVSecondaryOcclusionIntensity: number;
+	LPVSecondaryBounceIntensity: number;
+	LPVGeometryVolumeBias: number;
+	LPVEmissiveInjectionIntensity: number;
+	LPVDirectionalOcclusionIntensity: number;
+	LPVDirectionalOcclusionRadius: number;
+	LPVDiffuseOcclusionExponent: number;
+	LPVSpecularOcclusionExponent: number;
+	LPVDiffuseOcclusionIntensity: number;
+	LPVSpecularOcclusionIntensity: number;
+	ReflectionsType: EReflectionsType;
+	ScreenSpaceReflectionIntensity: number;
+	ScreenSpaceReflectionQuality: number;
+	ScreenSpaceReflectionMaxRoughness: number;
+	RayTracingReflectionsMaxRoughness: number;
+	RayTracingReflectionsMaxBounces: number;
+	RayTracingReflectionsSamplesPerPixel: number;
+	RayTracingReflectionsShadows: EReflectedAndRefractedRayTracedShadows;
+	TranslucencyType: ETranslucencyType;
+	RayTracingTranslucencyMaxRoughness: number;
+	RayTracingTranslucencyRefractionRays: number;
+	RayTracingTranslucencySamplesPerPixel: number;
+	RayTracingTranslucencyShadows: EReflectedAndRefractedRayTracedShadows;
+	RayTracingTranslucencyRefraction: boolean;
+	PathTracingMaxBounces: number;
+	PathTracingSamplesPerPixel: number;
+	LPVFadeRange: number;
+	LPVDirectionalOcclusionFadeRange: number;
+	ScreenPercentage: number;
+	WeightedBlendables: WeightedBlendables;
+	Blendables: UObject[];
+	clone() : PostProcessSettings;
+	static C(Other: UObject | any): PostProcessSettings;
+}
+
+declare class MinimalViewInfo { 
+	Location: Vector;
+	Rotation: Rotator;
+	FOV: number;
+	DesiredFOV: number;
+	OrthoWidth: number;
+	OrthoNearClipPlane: number;
+	OrthoFarClipPlane: number;
+	AspectRatio: number;
+	bConstrainAspectRatio: boolean;
+	bUseFieldOfViewForLOD: boolean;
+	ProjectionMode: ECameraProjectionMode;
+	PostProcessBlendWeight: number;
+	PostProcessSettings: PostProcessSettings;
+	OffCenterProjectionOffset: Vector2D;
+	clone() : MinimalViewInfo;
+	static C(Other: UObject | any): MinimalViewInfo;
+}
+
+declare class CameraCacheEntry { 
+	Timestamp: number;
+	POV: MinimalViewInfo;
+	clone() : CameraCacheEntry;
+	static C(Other: UObject | any): CameraCacheEntry;
+}
+
+declare class TViewTarget { 
+	Target: Actor;
+	POV: MinimalViewInfo;
+	PlayerState: PlayerState;
+	clone() : TViewTarget;
+	static C(Other: UObject | any): TViewTarget;
+}
+
+declare class CameraModifier extends UObject { 
+	bDebug: boolean;
+	bExclusive: boolean;
+	Priority: number;
+	CameraOwner: PlayerCameraManager;
+	AlphaInTime: number;
+	AlphaOutTime: number;
+	Alpha: number;
+	static Load(ResourceName: string): CameraModifier;
+	static Find(Outer: UObject, ResourceName: string): CameraModifier;
+	static GetDefaultObject(): CameraModifier;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraModifier;
+	IsDisabled(): boolean;
+	GetViewTarget(): Actor;
+	EnableModifier(): void;
+	DisableModifier(bImmediate: boolean): void;
+	BlueprintModifyPostProcess(DeltaTime: number,PostProcessBlendWeight?: number,PostProcessSettings?: PostProcessSettings): {PostProcessBlendWeight: number, PostProcessSettings: PostProcessSettings};
+	BlueprintModifyCamera(DeltaTime: number,ViewLocation: Vector,ViewRotation: Rotator,FOV: number,NewViewLocation?: Vector,NewViewRotation?: Rotator,NewFOV?: number): {NewViewLocation: Vector, NewViewRotation: Rotator, NewFOV: number};
+	static C(Other: UObject | any): CameraModifier;
+}
+
+declare class FXSystemComponent extends PrimitiveComponent { 
+	static Load(ResourceName: string): FXSystemComponent;
+	static Find(Outer: UObject, ResourceName: string): FXSystemComponent;
+	static GetDefaultObject(): FXSystemComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FXSystemComponent;
+	SetVectorParameter(ParameterName: string,Param: Vector): void;
+	SetFloatParameter(ParameterName: string,Param: number): void;
+	SetColorParameter(ParameterName: string,Param: LinearColor): void;
+	SetActorParameter(ParameterName: string,Param: Actor): void;
+	static C(Other: UObject | any): FXSystemComponent;
+}
+
+declare class FXSystemAsset extends UObject { 
+	static Load(ResourceName: string): FXSystemAsset;
+	static Find(Outer: UObject, ResourceName: string): FXSystemAsset;
+	static GetDefaultObject(): FXSystemAsset;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FXSystemAsset;
+	static C(Other: UObject | any): FXSystemAsset;
+}
+
+declare type EParticleSystemUpdateMode = 'EPSUM_RealTime' | 'EPSUM_FixedTime' | 'EPSUM_MAX';
+declare var EParticleSystemUpdateMode : { EPSUM_RealTime:'EPSUM_RealTime',EPSUM_FixedTime:'EPSUM_FixedTime',EPSUM_MAX:'EPSUM_MAX', };
+declare type EEmitterRenderMode = 'ERM_Normal' | 'ERM_Point' | 'ERM_Cross' | 'ERM_LightsOnly' | 'ERM_None' | 'ERM_MAX';
+declare var EEmitterRenderMode : { ERM_Normal:'ERM_Normal',ERM_Point:'ERM_Point',ERM_Cross:'ERM_Cross',ERM_LightsOnly:'ERM_LightsOnly',ERM_None:'ERM_None',ERM_MAX:'ERM_MAX', };
+declare type EParticleSignificanceLevel = 'Low' | 'Medium' | 'High' | 'Critical' | 'Num' | 'EParticleSignificanceLevel_MAX';
+declare var EParticleSignificanceLevel : { Low:'Low',Medium:'Medium',High:'High',Critical:'Critical',Num:'Num',EParticleSignificanceLevel_MAX:'EParticleSignificanceLevel_MAX', };
+declare class ParticleModule extends UObject { 
+	bSpawnModule: boolean;
+	bUpdateModule: boolean;
+	bFinalUpdateModule: boolean;
+	bUpdateForGPUEmitter: boolean;
+	bCurvesAsColor: boolean;
+	b3DDrawMode: boolean;
+	bSupported3DDrawMode: boolean;
+	bEnabled: boolean;
+	bEditable: boolean;
+	LODDuplicate: boolean;
+	bSupportsRandomSeed: boolean;
+	bRequiresLoopingNotification: boolean;
+	LODValidity: number;
+	ModuleEditorColor: Color;
+	static Load(ResourceName: string): ParticleModule;
+	static Find(Outer: UObject, ResourceName: string): ParticleModule;
+	static GetDefaultObject(): ParticleModule;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModule;
+	static C(Other: UObject | any): ParticleModule;
+}
+
+declare type EParticleScreenAlignment = 'PSA_FacingCameraPosition' | 'PSA_Square' | 'PSA_Rectangle' | 'PSA_Velocity' | 'PSA_AwayFromCenter' | 'PSA_TypeSpecific' | 'PSA_FacingCameraDistanceBlend' | 'PSA_MAX';
+declare var EParticleScreenAlignment : { PSA_FacingCameraPosition:'PSA_FacingCameraPosition',PSA_Square:'PSA_Square',PSA_Rectangle:'PSA_Rectangle',PSA_Velocity:'PSA_Velocity',PSA_AwayFromCenter:'PSA_AwayFromCenter',PSA_TypeSpecific:'PSA_TypeSpecific',PSA_FacingCameraDistanceBlend:'PSA_FacingCameraDistanceBlend',PSA_MAX:'PSA_MAX', };
+declare type EParticleSortMode = 'PSORTMODE_None' | 'PSORTMODE_ViewProjDepth' | 'PSORTMODE_DistanceToView' | 'PSORTMODE_Age_OldestFirst' | 'PSORTMODE_Age_NewestFirst' | 'PSORTMODE_MAX';
+declare var EParticleSortMode : { PSORTMODE_None:'PSORTMODE_None',PSORTMODE_ViewProjDepth:'PSORTMODE_ViewProjDepth',PSORTMODE_DistanceToView:'PSORTMODE_DistanceToView',PSORTMODE_Age_OldestFirst:'PSORTMODE_Age_OldestFirst',PSORTMODE_Age_NewestFirst:'PSORTMODE_Age_NewestFirst',PSORTMODE_MAX:'PSORTMODE_MAX', };
+declare class DistributionLookupTable { 
+	Op: number;
+	EntryCount: number;
+	EntryStride: number;
+	SubEntryStride: number;
+	TimeScale: number;
+	TimeBias: number;
+	Values: number[];
+	LockFlag: number;
+	clone() : DistributionLookupTable;
+	static C(Other: UObject | any): DistributionLookupTable;
+}
+
+declare class RawDistribution { 
+	Table: DistributionLookupTable;
+	clone() : RawDistribution;
+	static C(Other: UObject | any): RawDistribution;
+}
+
+declare class Distribution extends UObject { 
+	static Load(ResourceName: string): Distribution;
+	static Find(Outer: UObject, ResourceName: string): Distribution;
+	static GetDefaultObject(): Distribution;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Distribution;
+	static C(Other: UObject | any): Distribution;
+}
+
+declare class DistributionFloat extends Distribution { 
+	bCanBeBaked: boolean;
+	bBakedDataSuccesfully: boolean;
+	static Load(ResourceName: string): DistributionFloat;
+	static Find(Outer: UObject, ResourceName: string): DistributionFloat;
+	static GetDefaultObject(): DistributionFloat;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionFloat;
+	static C(Other: UObject | any): DistributionFloat;
+}
+
+declare class RawDistributionFloat extends RawDistribution { 
+	MinValue: number;
+	MaxValue: number;
+	Distribution: DistributionFloat;
+	clone() : RawDistributionFloat;
+	static C(Other: UObject | any): RawDistributionFloat;
+}
+
+declare type EParticleBurstMethod = 'EPBM_Instant' | 'EPBM_Interpolated' | 'EPBM_MAX';
+declare var EParticleBurstMethod : { EPBM_Instant:'EPBM_Instant',EPBM_Interpolated:'EPBM_Interpolated',EPBM_MAX:'EPBM_MAX', };
+declare class ParticleBurst { 
+	Count: number;
+	CountLow: number;
+	Time: number;
+	clone() : ParticleBurst;
+	static C(Other: UObject | any): ParticleBurst;
+}
+
+declare type EParticleSubUVInterpMethod = 'PSUVIM_None' | 'PSUVIM_Linear' | 'PSUVIM_Linear_Blend' | 'PSUVIM_Random' | 'PSUVIM_Random_Blend' | 'PSUVIM_MAX';
+declare var EParticleSubUVInterpMethod : { PSUVIM_None:'PSUVIM_None',PSUVIM_Linear:'PSUVIM_Linear',PSUVIM_Linear_Blend:'PSUVIM_Linear_Blend',PSUVIM_Random:'PSUVIM_Random',PSUVIM_Random_Blend:'PSUVIM_Random_Blend',PSUVIM_MAX:'PSUVIM_MAX', };
+declare type EParticleUVFlipMode = 'None' | 'FlipUV' | 'FlipUOnly' | 'FlipVOnly' | 'RandomFlipUV' | 'RandomFlipUOnly' | 'RandomFlipVOnly' | 'RandomFlipUVIndependent' | 'EParticleUVFlipMode_MAX';
+declare var EParticleUVFlipMode : { None:'None',FlipUV:'FlipUV',FlipUOnly:'FlipUOnly',FlipVOnly:'FlipVOnly',RandomFlipUV:'RandomFlipUV',RandomFlipUOnly:'RandomFlipUOnly',RandomFlipVOnly:'RandomFlipVOnly',RandomFlipUVIndependent:'RandomFlipUVIndependent',EParticleUVFlipMode_MAX:'EParticleUVFlipMode_MAX', };
+declare type ESubUVBoundingVertexCount = 'BVC_FourVertices' | 'BVC_EightVertices' | 'BVC_MAX';
+declare var ESubUVBoundingVertexCount : { BVC_FourVertices:'BVC_FourVertices',BVC_EightVertices:'BVC_EightVertices',BVC_MAX:'BVC_MAX', };
+declare type EOpacitySourceMode = 'OSM_Alpha' | 'OSM_ColorBrightness' | 'OSM_RedChannel' | 'OSM_GreenChannel' | 'OSM_BlueChannel' | 'OSM_MAX';
+declare var EOpacitySourceMode : { OSM_Alpha:'OSM_Alpha',OSM_ColorBrightness:'OSM_ColorBrightness',OSM_RedChannel:'OSM_RedChannel',OSM_GreenChannel:'OSM_GreenChannel',OSM_BlueChannel:'OSM_BlueChannel',OSM_MAX:'OSM_MAX', };
+declare type EEmitterNormalsMode = 'ENM_CameraFacing' | 'ENM_Spherical' | 'ENM_Cylindrical' | 'ENM_MAX';
+declare var EEmitterNormalsMode : { ENM_CameraFacing:'ENM_CameraFacing',ENM_Spherical:'ENM_Spherical',ENM_Cylindrical:'ENM_Cylindrical',ENM_MAX:'ENM_MAX', };
+declare class ParticleModuleRequired extends ParticleModule { 
+	Material: MaterialInterface;
+	EmitterOrigin: Vector;
+	EmitterRotation: Rotator;
+	ScreenAlignment: EParticleScreenAlignment;
+	MinFacingCameraBlendDistance: number;
+	MaxFacingCameraBlendDistance: number;
+	bUseLocalSpace: boolean;
+	bKillOnDeactivate: boolean;
+	bKillOnCompleted: boolean;
+	SortMode: EParticleSortMode;
+	bUseLegacyEmitterTime: boolean;
+	bRemoveHMDRoll: boolean;
+	EmitterDuration: number;
+	EmitterDurationLow: number;
+	bEmitterDurationUseRange: boolean;
+	bDurationRecalcEachLoop: boolean;
+	EmitterLoops: number;
+	SpawnRate: RawDistributionFloat;
+	ParticleBurstMethod: EParticleBurstMethod;
+	BurstList: ParticleBurst[];
+	EmitterDelay: number;
+	EmitterDelayLow: number;
+	bEmitterDelayUseRange: boolean;
+	bDelayFirstLoopOnly: boolean;
+	InterpolationMethod: EParticleSubUVInterpMethod;
+	SubImages_Horizontal: number;
+	SubImages_Vertical: number;
+	bScaleUV: boolean;
+	RandomImageTime: number;
+	RandomImageChanges: number;
+	bOverrideSystemMacroUV: boolean;
+	MacroUVPosition: Vector;
+	MacroUVRadius: number;
+	bUseMaxDrawCount: boolean;
+	MaxDrawCount: number;
+	UVFlippingMode: EParticleUVFlipMode;
+	CutoutTexture: Texture2D;
+	BoundingMode: ESubUVBoundingVertexCount;
+	OpacitySourceMode: EOpacitySourceMode;
+	AlphaThreshold: number;
+	EmitterNormalsMode: EEmitterNormalsMode;
+	NormalsSphereCenter: Vector;
+	NormalsCylinderDirection: Vector;
+	bOrbitModuleAffectsVelocityAlignment: boolean;
+	NamedMaterialOverrides: string[];
+	static Load(ResourceName: string): ParticleModuleRequired;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleRequired;
+	static GetDefaultObject(): ParticleModuleRequired;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRequired;
+	static C(Other: UObject | any): ParticleModuleRequired;
+}
+
+declare class ParticleModuleTypeDataBase extends ParticleModule { 
+	static Load(ResourceName: string): ParticleModuleTypeDataBase;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleTypeDataBase;
+	static GetDefaultObject(): ParticleModuleTypeDataBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleTypeDataBase;
+	static C(Other: UObject | any): ParticleModuleTypeDataBase;
+}
+
+declare class ParticleModuleSpawnBase extends ParticleModule { 
+	bProcessSpawnRate: boolean;
+	bProcessBurstList: boolean;
+	static Load(ResourceName: string): ParticleModuleSpawnBase;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleSpawnBase;
+	static GetDefaultObject(): ParticleModuleSpawnBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSpawnBase;
+	static C(Other: UObject | any): ParticleModuleSpawnBase;
+}
+
+declare class ParticleModuleSpawn extends ParticleModuleSpawnBase { 
+	Rate: RawDistributionFloat;
+	RateScale: RawDistributionFloat;
+	ParticleBurstMethod: EParticleBurstMethod;
+	BurstList: ParticleBurst[];
+	BurstScale: RawDistributionFloat;
+	bApplyGlobalSpawnRateScale: boolean;
+	static Load(ResourceName: string): ParticleModuleSpawn;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleSpawn;
+	static GetDefaultObject(): ParticleModuleSpawn;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSpawn;
+	static C(Other: UObject | any): ParticleModuleSpawn;
+}
+
+declare class ParticleModuleEventBase extends ParticleModule { 
+	static Load(ResourceName: string): ParticleModuleEventBase;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleEventBase;
+	static GetDefaultObject(): ParticleModuleEventBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleEventBase;
+	static C(Other: UObject | any): ParticleModuleEventBase;
+}
+
+declare type EParticleEventType = 'EPET_Any' | 'EPET_Spawn' | 'EPET_Death' | 'EPET_Collision' | 'EPET_Burst' | 'EPET_Blueprint' | 'EPET_MAX';
+declare var EParticleEventType : { EPET_Any:'EPET_Any',EPET_Spawn:'EPET_Spawn',EPET_Death:'EPET_Death',EPET_Collision:'EPET_Collision',EPET_Burst:'EPET_Burst',EPET_Blueprint:'EPET_Blueprint',EPET_MAX:'EPET_MAX', };
+declare class ParticleModuleEventSendToGame extends UObject { 
+	static Load(ResourceName: string): ParticleModuleEventSendToGame;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleEventSendToGame;
+	static GetDefaultObject(): ParticleModuleEventSendToGame;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleEventSendToGame;
+	static C(Other: UObject | any): ParticleModuleEventSendToGame;
+}
+
+declare class ParticleEvent_GenerateInfo { 
+	Type: EParticleEventType;
+	Frequency: number;
+	ParticleFrequency: number;
+	FirstTimeOnly: boolean;
+	LastTimeOnly: boolean;
+	UseReflectedImpactVector: boolean;
+	bUseOrbitOffset: boolean;
+	CustomName: string;
+	ParticleModuleEventsToSendToGame: ParticleModuleEventSendToGame[];
+	clone() : ParticleEvent_GenerateInfo;
+	static C(Other: UObject | any): ParticleEvent_GenerateInfo;
+}
+
+declare class ParticleModuleEventGenerator extends ParticleModuleEventBase { 
+	Events: ParticleEvent_GenerateInfo[];
+	static Load(ResourceName: string): ParticleModuleEventGenerator;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleEventGenerator;
+	static GetDefaultObject(): ParticleModuleEventGenerator;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleEventGenerator;
+	static C(Other: UObject | any): ParticleModuleEventGenerator;
+}
+
+declare class ParticleModuleOrbitBase extends ParticleModule { 
+	bUseEmitterTime: boolean;
+	static Load(ResourceName: string): ParticleModuleOrbitBase;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleOrbitBase;
+	static GetDefaultObject(): ParticleModuleOrbitBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleOrbitBase;
+	static C(Other: UObject | any): ParticleModuleOrbitBase;
+}
+
+declare type EOrbitChainMode = 'EOChainMode_Add' | 'EOChainMode_Scale' | 'EOChainMode_Link' | 'EOChainMode_MAX';
+declare var EOrbitChainMode : { EOChainMode_Add:'EOChainMode_Add',EOChainMode_Scale:'EOChainMode_Scale',EOChainMode_Link:'EOChainMode_Link',EOChainMode_MAX:'EOChainMode_MAX', };
+declare class DistributionVector extends Distribution { 
+	bCanBeBaked: boolean;
+	bIsDirty: boolean;
+	bBakedDataSuccesfully: boolean;
+	static Load(ResourceName: string): DistributionVector;
+	static Find(Outer: UObject, ResourceName: string): DistributionVector;
+	static GetDefaultObject(): DistributionVector;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DistributionVector;
+	static C(Other: UObject | any): DistributionVector;
+}
+
+declare class RawDistributionVector extends RawDistribution { 
+	MinValue: number;
+	MaxValue: number;
+	MinValueVec: Vector;
+	MaxValueVec: Vector;
+	Distribution: DistributionVector;
+	clone() : RawDistributionVector;
+	static C(Other: UObject | any): RawDistributionVector;
+}
+
+declare class OrbitOptions { 
+	bProcessDuringSpawn: boolean;
+	bProcessDuringUpdate: boolean;
+	bUseEmitterTime: boolean;
+	clone() : OrbitOptions;
+	static C(Other: UObject | any): OrbitOptions;
+}
+
+declare class ParticleModuleOrbit extends ParticleModuleOrbitBase { 
+	ChainMode: EOrbitChainMode;
+	OffsetAmount: RawDistributionVector;
+	OffsetOptions: OrbitOptions;
+	RotationAmount: RawDistributionVector;
+	RotationOptions: OrbitOptions;
+	RotationRateAmount: RawDistributionVector;
+	RotationRateOptions: OrbitOptions;
+	static Load(ResourceName: string): ParticleModuleOrbit;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleOrbit;
+	static GetDefaultObject(): ParticleModuleOrbit;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleOrbit;
+	static C(Other: UObject | any): ParticleModuleOrbit;
+}
+
+declare class ParticleModuleEventReceiverBase extends ParticleModuleEventBase { 
+	EventGeneratorType: EParticleEventType;
+	EventName: string;
+	static Load(ResourceName: string): ParticleModuleEventReceiverBase;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleEventReceiverBase;
+	static GetDefaultObject(): ParticleModuleEventReceiverBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleEventReceiverBase;
+	static C(Other: UObject | any): ParticleModuleEventReceiverBase;
+}
+
+declare class ParticleLODLevel extends UObject { 
+	Level: number;
+	bEnabled: boolean;
+	RequiredModule: ParticleModuleRequired;
+	Modules: ParticleModule[];
+	TypeDataModule: ParticleModuleTypeDataBase;
+	SpawnModule: ParticleModuleSpawn;
+	EventGenerator: ParticleModuleEventGenerator;
+	SpawningModules: ParticleModuleSpawnBase[];
+	SpawnModules: ParticleModule[];
+	UpdateModules: ParticleModule[];
+	OrbitModules: ParticleModuleOrbit[];
+	EventReceiverModules: ParticleModuleEventReceiverBase[];
+	ConvertedModules: boolean;
+	PeakActiveParticles: number;
+	static Load(ResourceName: string): ParticleLODLevel;
+	static Find(Outer: UObject, ResourceName: string): ParticleLODLevel;
+	static GetDefaultObject(): ParticleLODLevel;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleLODLevel;
+	static C(Other: UObject | any): ParticleLODLevel;
+}
+
+declare class ParticleEmitter extends UObject { 
+	EmitterName: string;
+	SubUVDataOffset: number;
+	EmitterRenderMode: EEmitterRenderMode;
+	SignificanceLevel: EParticleSignificanceLevel;
+	bUseLegacySpawningBehavior: boolean;
+	ConvertedModules: boolean;
+	bIsSoloing: boolean;
+	bCookedOut: boolean;
+	bDisabledLODsKeepEmitterAlive: boolean;
+	bDisableWhenInsignficant: boolean;
+	bCollapsed: boolean;
+	DetailMode: EDetailMode;
+	EmitterEditorColor: Color;
+	LODLevels: ParticleLODLevel[];
+	PeakActiveParticles: number;
+	InitialAllocationCount: number;
+	QualityLevelSpawnRateScale: number;
+	DetailModeBitmask: any;
+	DetailModeDisplay: string;
+	static Load(ResourceName: string): ParticleEmitter;
+	static Find(Outer: UObject, ResourceName: string): ParticleEmitter;
+	static GetDefaultObject(): ParticleEmitter;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleEmitter;
+	static C(Other: UObject | any): ParticleEmitter;
+}
+
+declare class CurveEdEntry { 
+	CurveObject: UObject;
+	CurveColor: Color;
+	CurveName: string;
+	bHideCurve: number;
+	bColorCurve: number;
+	bFloatingPointColorCurve: number;
+	bClamp: number;
+	ClampLow: number;
+	ClampHigh: number;
+	clone() : CurveEdEntry;
+	static C(Other: UObject | any): CurveEdEntry;
+}
+
+declare class CurveEdTab { 
+	TabName: string;
+	Curves: CurveEdEntry[];
+	ViewStartInput: number;
+	ViewEndInput: number;
+	ViewStartOutput: number;
+	ViewEndOutput: number;
+	clone() : CurveEdTab;
+	static C(Other: UObject | any): CurveEdTab;
+}
+
+declare class InterpCurveEdSetup extends UObject { 
+	Tabs: CurveEdTab[];
+	ActiveTab: number;
+	static Load(ResourceName: string): InterpCurveEdSetup;
+	static Find(Outer: UObject, ResourceName: string): InterpCurveEdSetup;
+	static GetDefaultObject(): InterpCurveEdSetup;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpCurveEdSetup;
+	static C(Other: UObject | any): InterpCurveEdSetup;
+}
+
+declare type ParticleSystemLODMethod = 'PARTICLESYSTEMLODMETHOD_Automatic' | 'PARTICLESYSTEMLODMETHOD_DirectSet' | 'PARTICLESYSTEMLODMETHOD_ActivateAutomatic' | 'PARTICLESYSTEMLODMETHOD_MAX';
+declare var ParticleSystemLODMethod : { PARTICLESYSTEMLODMETHOD_Automatic:'PARTICLESYSTEMLODMETHOD_Automatic',PARTICLESYSTEMLODMETHOD_DirectSet:'PARTICLESYSTEMLODMETHOD_DirectSet',PARTICLESYSTEMLODMETHOD_ActivateAutomatic:'PARTICLESYSTEMLODMETHOD_ActivateAutomatic',PARTICLESYSTEMLODMETHOD_MAX:'PARTICLESYSTEMLODMETHOD_MAX', };
+declare class ParticleSystemLOD { 
+	clone() : ParticleSystemLOD;
+	static C(Other: UObject | any): ParticleSystemLOD;
+}
+
+declare type EParticleSystemInsignificanceReaction = 'Auto' | 'Complete' | 'DisableTick' | 'DisableTickAndKill' | 'Num' | 'EParticleSystemInsignificanceReaction_MAX';
+declare var EParticleSystemInsignificanceReaction : { Auto:'Auto',Complete:'Complete',DisableTick:'DisableTick',DisableTickAndKill:'DisableTickAndKill',Num:'Num',EParticleSystemInsignificanceReaction_MAX:'EParticleSystemInsignificanceReaction_MAX', };
+declare type EParticleSystemOcclusionBoundsMethod = 'EPSOBM_None' | 'EPSOBM_ParticleBounds' | 'EPSOBM_CustomBounds' | 'EPSOBM_MAX';
+declare var EParticleSystemOcclusionBoundsMethod : { EPSOBM_None:'EPSOBM_None',EPSOBM_ParticleBounds:'EPSOBM_ParticleBounds',EPSOBM_CustomBounds:'EPSOBM_CustomBounds',EPSOBM_MAX:'EPSOBM_MAX', };
+declare class LODSoloTrack { 
+	SoloEnableSetting: number[];
+	clone() : LODSoloTrack;
+	static C(Other: UObject | any): LODSoloTrack;
+}
+
+declare class NamedEmitterMaterial { 
+	Name: string;
+	Material: MaterialInterface;
+	clone() : NamedEmitterMaterial;
+	static C(Other: UObject | any): NamedEmitterMaterial;
+}
+
+declare type EPSCPoolMethod = 'None' | 'AutoRelease' | 'ManualRelease' | 'ManualRelease_OnComplete' | 'FreeInPool' | 'EPSCPoolMethod_MAX';
+declare var EPSCPoolMethod : { None:'None',AutoRelease:'AutoRelease',ManualRelease:'ManualRelease',ManualRelease_OnComplete:'ManualRelease_OnComplete',FreeInPool:'FreeInPool',EPSCPoolMethod_MAX:'EPSCPoolMethod_MAX', };
+declare class ParticleSystem extends FXSystemAsset { 
+	SystemUpdateMode: EParticleSystemUpdateMode;
+	UpdateTime_FPS: number;
+	UpdateTime_Delta: number;
+	WarmupTime: number;
+	WarmupTickRate: number;
+	Emitters: ParticleEmitter[];
+	PreviewComponent: ParticleSystemComponent;
+	ThumbnailAngle: Rotator;
+	ThumbnailDistance: number;
+	ThumbnailWarmup: number;
+	CurveEdSetup: InterpCurveEdSetup;
+	bOrientZAxisTowardCamera: boolean;
+	LODDistanceCheckTime: number;
+	LODMethod: ParticleSystemLODMethod;
+	LODDistances: number[];
+	EditorLODSetting: number;
+	bRegenerateLODDuplicate: boolean;
+	LODSettings: ParticleSystemLOD[];
+	bUseFixedRelativeBoundingBox: boolean;
+	FixedRelativeBoundingBox: Box;
+	SecondsBeforeInactive: number;
+	FloorMesh: string;
+	FloorPosition: Vector;
+	FloorRotation: Rotator;
+	FloorScale: number;
+	FloorScale3D: Vector;
+	BackgroundColor: Color;
+	bShouldResetPeakCounts: boolean;
+	bHasPhysics: boolean;
+	bUseRealtimeThumbnail: boolean;
+	ThumbnailImageOutOfDate: boolean;
+	ThumbnailImage: Texture2D;
+	Delay: number;
+	DelayLow: number;
+	bUseDelayRange: boolean;
+	bAllowManagedTicking: boolean;
+	bAutoDeactivate: boolean;
+	MinTimeBetweenTicks: any;
+	InsignificantReaction: EParticleSystemInsignificanceReaction;
+	InsignificanceDelay: number;
+	MaxSignificanceLevel: EParticleSignificanceLevel;
+	MaxPoolSize: any;
+	MacroUVPosition: Vector;
+	MacroUVRadius: number;
+	OcclusionBoundsMethod: EParticleSystemOcclusionBoundsMethod;
+	CustomOcclusionBounds: Box;
+	SoloTracking: LODSoloTrack[];
+	NamedMaterialSlots: NamedEmitterMaterial[];
+	static Load(ResourceName: string): ParticleSystem;
+	static Find(Outer: UObject, ResourceName: string): ParticleSystem;
+	static GetDefaultObject(): ParticleSystem;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleSystem;
+	ContainsEmitterType(TypeData: UnrealEngineClass): boolean;
+	static C(Other: UObject | any): ParticleSystem;
+	SpawnEmitterAttached(AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,Scale: Vector,LocationType: EAttachLocation,bAutoDestroy: boolean,PoolingMethod: EPSCPoolMethod): ParticleSystemComponent;
+	static SpawnEmitterAttached(EmitterTemplate: ParticleSystem,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,Scale: Vector,LocationType: EAttachLocation,bAutoDestroy: boolean,PoolingMethod: EPSCPoolMethod): ParticleSystemComponent;
+}
+
+declare type EParticleSysParamType = 'PSPT_None' | 'PSPT_Scalar' | 'PSPT_ScalarRand' | 'PSPT_Vector' | 'PSPT_VectorRand' | 'PSPT_Color' | 'PSPT_Actor' | 'PSPT_Material' | 'PSPT_MAX';
+declare var EParticleSysParamType : { PSPT_None:'PSPT_None',PSPT_Scalar:'PSPT_Scalar',PSPT_ScalarRand:'PSPT_ScalarRand',PSPT_Vector:'PSPT_Vector',PSPT_VectorRand:'PSPT_VectorRand',PSPT_Color:'PSPT_Color',PSPT_Actor:'PSPT_Actor',PSPT_Material:'PSPT_Material',PSPT_MAX:'PSPT_MAX', };
+declare class ParticleSysParam { 
+	Name: string;
+	ParamType: EParticleSysParamType;
+	Scalar: number;
+	Scalar_Low: number;
+	Vector: Vector;
+	Vector_Low: Vector;
+	Color: Color;
+	Actor: Actor;
+	Material: MaterialInterface;
+	clone() : ParticleSysParam;
+	static C(Other: UObject | any): ParticleSysParam;
+}
+
+declare class ParticleSystemReplay extends UObject { 
+	ClipIDNumber: number;
+	static Load(ResourceName: string): ParticleSystemReplay;
+	static Find(Outer: UObject, ResourceName: string): ParticleSystemReplay;
+	static GetDefaultObject(): ParticleSystemReplay;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleSystemReplay;
+	static C(Other: UObject | any): ParticleSystemReplay;
+}
+
+declare type ETrailWidthMode = 'ETrailWidthMode_FromCentre' | 'ETrailWidthMode_FromFirst' | 'ETrailWidthMode_FromSecond' | 'ETrailWidthMode_MAX';
+declare var ETrailWidthMode : { ETrailWidthMode_FromCentre:'ETrailWidthMode_FromCentre',ETrailWidthMode_FromFirst:'ETrailWidthMode_FromFirst',ETrailWidthMode_FromSecond:'ETrailWidthMode_FromSecond',ETrailWidthMode_MAX:'ETrailWidthMode_MAX', };
+declare class ParticleSystemComponent extends FXSystemComponent { 
+	Template: ParticleSystem;
+	EmitterMaterials: MaterialInterface[];
+	SkelMeshComponents: SkeletalMeshComponent[];
+	bResetOnDetach: boolean;
+	bUpdateOnDedicatedServer: boolean;
+	bAllowRecycling: boolean;
+	bAutoManageAttachment: boolean;
+	bWarmingUp: boolean;
+	bOverrideLODMethod: boolean;
+	bSkipUpdateDynamicDataDuringTick: boolean;
+	LODMethod: ParticleSystemLODMethod;
+	RequiredSignificance: EParticleSignificanceLevel;
+	InstanceParameters: ParticleSysParam[];
+	OnParticleSpawn: UnrealEngineMulticastDelegate<(EventName: string, EmitterTime: number, Location: Vector, Velocity: Vector) => void>;
+	OnParticleBurst: UnrealEngineMulticastDelegate<(EventName: string, EmitterTime: number, ParticleCount: number) => void>;
+	OnParticleDeath: UnrealEngineMulticastDelegate<(EventName: string, EmitterTime: number, ParticleTime: number, Location: Vector, Velocity: Vector, Direction: Vector) => void>;
+	OnParticleCollide: UnrealEngineMulticastDelegate<(EventName: string, EmitterTime: number, ParticleTime: number, Location: Vector, Velocity: Vector, Direction: Vector, Normal: Vector, BoneName: string, PhysMat: PhysicalMaterial) => void>;
+	OldPosition: Vector;
+	PartSysVelocity: Vector;
+	WarmupTime: number;
+	WarmupTickRate: number;
+	SecondsBeforeInactive: number;
+	MaxTimeBeforeForceUpdateTransform: number;
+	EditorLODLevel: number;
+	EditorDetailMode: number;
+	ReplayClips: ParticleSystemReplay[];
+	CustomTimeDilation: number;
+	AutoAttachParent: any;
+	AutoAttachSocketName: string;
+	AutoAttachLocationType: EAttachLocation;
+	AutoAttachLocationRule: EAttachmentRule;
+	AutoAttachRotationRule: EAttachmentRule;
+	AutoAttachScaleRule: EAttachmentRule;
+	OnSystemFinished: UnrealEngineMulticastDelegate<(PSystem: ParticleSystemComponent) => void>;
+	static Load(ResourceName: string): ParticleSystemComponent;
+	static Find(Outer: UObject, ResourceName: string): ParticleSystemComponent;
+	static GetDefaultObject(): ParticleSystemComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleSystemComponent;
+	SetTrailSourceData(InFirstSocketName: string,InSecondSocketName: string,InWidthMode: ETrailWidthMode,InWidth: number): void;
+	SetTemplate(NewTemplate: ParticleSystem): void;
+	SetMaterialParameter(ParameterName: string,Param: MaterialInterface): void;
+	SetEmitterEnable(EmitterName: string,bNewEnableState: boolean): void;
+	SetBeamTargetTangent(EmitterIndex: number,NewTangentPoint: Vector,TargetIndex: number): void;
+	SetBeamTargetStrength(EmitterIndex: number,NewTargetStrength: number,TargetIndex: number): void;
+	SetBeamTargetPoint(EmitterIndex: number,NewTargetPoint: Vector,TargetIndex: number): void;
+	SetBeamSourceTangent(EmitterIndex: number,NewTangentPoint: Vector,SourceIndex: number): void;
+	SetBeamSourceStrength(EmitterIndex: number,NewSourceStrength: number,SourceIndex: number): void;
+	SetBeamSourcePoint(EmitterIndex: number,NewSourcePoint: Vector,SourceIndex: number): void;
+	SetBeamEndPoint(EmitterIndex: number,NewEndPoint: Vector): void;
+	SetAutoAttachParams(Parent: SceneComponent,SocketName: string,LocationType: EAttachLocation): void;
+	SetAutoAttachmentParameters(Parent: SceneComponent,SocketName: string,LocationRule: EAttachmentRule,RotationRule: EAttachmentRule,ScaleRule: EAttachmentRule): void;
+	ReleaseToPool(): void;
+	GetNumActiveParticles(): number;
+	GetNamedMaterial(InName: string): MaterialInterface;
+	GetBeamTargetTangent(EmitterIndex: number,TargetIndex: number,OutTangentPoint?: Vector): {OutTangentPoint: Vector, $: boolean};
+	GetBeamTargetStrength(EmitterIndex: number,TargetIndex: number,OutTargetStrength?: number): {OutTargetStrength: number, $: boolean};
+	GetBeamTargetPoint(EmitterIndex: number,TargetIndex: number,OutTargetPoint?: Vector): {OutTargetPoint: Vector, $: boolean};
+	GetBeamSourceTangent(EmitterIndex: number,SourceIndex: number,OutTangentPoint?: Vector): {OutTangentPoint: Vector, $: boolean};
+	GetBeamSourceStrength(EmitterIndex: number,SourceIndex: number,OutSourceStrength?: number): {OutSourceStrength: number, $: boolean};
+	GetBeamSourcePoint(EmitterIndex: number,SourceIndex: number,OutSourcePoint?: Vector): {OutSourcePoint: Vector, $: boolean};
+	GetBeamEndPoint(EmitterIndex: number,OutEndPoint?: Vector): {OutEndPoint: Vector, $: boolean};
+	GenerateParticleEvent(InEventName: string,InEmitterTime: number,InLocation: Vector,InDirection: Vector,InVelocity: Vector): void;
+	EndTrails(): void;
+	CreateNamedDynamicMaterialInstance(InName: string,SourceMaterial: MaterialInterface): MaterialInstanceDynamic;
+	BeginTrails(InFirstSocketName: string,InSecondSocketName: string,InWidthMode: ETrailWidthMode,InWidth: number): void;
+	static C(Other: UObject | any): ParticleSystemComponent;
+}
+
+declare class ArrowComponent extends PrimitiveComponent { 
+	ArrowColor: Color;
+	ArrowSize: number;
+	bIsScreenSizeScaled: boolean;
+	ScreenSize: number;
+	bTreatAsASprite: boolean;
+	SpriteCategoryName: string;
+	SpriteInfo: SpriteCategoryInfo;
+	bLightAttachment: boolean;
+	bUseInEditorScaling: boolean;
+	static Load(ResourceName: string): ArrowComponent;
+	static Find(Outer: UObject, ResourceName: string): ArrowComponent;
+	static GetDefaultObject(): ArrowComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ArrowComponent;
+	SetArrowColor(NewColor: LinearColor): void;
+	static C(Other: UObject | any): ArrowComponent;
+}
+
+declare class Emitter extends Actor { 
+	ParticleSystemComponent: ParticleSystemComponent;
+	bDestroyOnSystemFinish: boolean;
+	bPostUpdateTickGroup: boolean;
+	bCurrentlyActive: boolean;
+	OnParticleSpawn: UnrealEngineMulticastDelegate<(EventName: string, EmitterTime: number, Location: Vector, Velocity: Vector) => void>;
+	OnParticleBurst: UnrealEngineMulticastDelegate<(EventName: string, EmitterTime: number, ParticleCount: number) => void>;
+	OnParticleDeath: UnrealEngineMulticastDelegate<(EventName: string, EmitterTime: number, ParticleTime: number, Location: Vector, Velocity: Vector, Direction: Vector) => void>;
+	OnParticleCollide: UnrealEngineMulticastDelegate<(EventName: string, EmitterTime: number, ParticleTime: number, Location: Vector, Velocity: Vector, Direction: Vector, Normal: Vector, BoneName: string, PhysMat: PhysicalMaterial) => void>;
+	SpriteComponent: BillboardComponent;
+	ArrowComponent: ArrowComponent;
+	static GetDefaultObject(): Emitter;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Emitter;
+	ToggleActive(): void;
+	SetVectorParameter(ParameterName: string,Param: Vector): void;
+	SetTemplate(NewTemplate: ParticleSystem): void;
+	SetMaterialParameter(ParameterName: string,Param: MaterialInterface): void;
+	SetFloatParameter(ParameterName: string,Param: number): void;
+	SetColorParameter(ParameterName: string,Param: LinearColor): void;
+	SetActorParameter(ParameterName: string,Param: Actor): void;
+	OnRep_bCurrentlyActive(): void;
+	OnParticleSystemFinished(FinishedComponent: ParticleSystemComponent): void;
+	IsActive(): boolean;
+	Deactivate(): void;
+	Activate(): void;
+	static C(Other: UObject | any): Emitter;
+}
+
+declare class EmitterCameraLensEffectBase extends Emitter { 
+	PS_CameraEffect: ParticleSystem;
+	PS_CameraEffectNonExtremeContent: ParticleSystem;
+	BaseCamera: PlayerCameraManager;
+	RelativeTransform: Transform;
+	BaseFOV: number;
+	bAllowMultipleInstances: boolean;
+	bResetWhenRetriggered: boolean;
+	EmittersToTreatAsSame: UnrealEngineClass[];
+	DistFromCamera: number;
+	static GetDefaultObject(): EmitterCameraLensEffectBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EmitterCameraLensEffectBase;
+	static C(Other: UObject | any): EmitterCameraLensEffectBase;
+}
+
+declare type EInitialOscillatorOffset = 'EOO_OffsetRandom' | 'EOO_OffsetZero' | 'EOO_MAX';
+declare var EInitialOscillatorOffset : { EOO_OffsetRandom:'EOO_OffsetRandom',EOO_OffsetZero:'EOO_OffsetZero',EOO_MAX:'EOO_MAX', };
+declare type EOscillatorWaveform = 'SineWave' | 'PerlinNoise' | 'EOscillatorWaveform_MAX';
+declare var EOscillatorWaveform : { SineWave:'SineWave',PerlinNoise:'PerlinNoise',EOscillatorWaveform_MAX:'EOscillatorWaveform_MAX', };
+declare class FOscillator { 
+	Amplitude: number;
+	Frequency: number;
+	InitialOffset: EInitialOscillatorOffset;
+	Waveform: EOscillatorWaveform;
+	clone() : FOscillator;
+	static C(Other: UObject | any): FOscillator;
+}
+
+declare class ROscillator { 
+	Pitch: FOscillator;
+	Yaw: FOscillator;
+	Roll: FOscillator;
+	clone() : ROscillator;
+	static C(Other: UObject | any): ROscillator;
+}
+
+declare class VOscillator { 
+	X: FOscillator;
+	Y: FOscillator;
+	Z: FOscillator;
+	clone() : VOscillator;
+	static C(Other: UObject | any): VOscillator;
+}
+
+declare class SubTrackGroup { 
+	GroupName: string;
+	TrackIndices: number[];
+	bIsCollapsed: boolean;
+	bIsSelected: boolean;
+	clone() : SubTrackGroup;
+	static C(Other: UObject | any): SubTrackGroup;
+}
+
+declare class SupportedSubTrackInfo { 
+	SupportedClass: UnrealEngineClass;
+	SubTrackName: string;
+	GroupIndex: number;
+	clone() : SupportedSubTrackInfo;
+	static C(Other: UObject | any): SupportedSubTrackInfo;
+}
+
+declare type ETrackActiveCondition = 'ETAC_Always' | 'ETAC_GoreEnabled' | 'ETAC_GoreDisabled' | 'ETAC_MAX';
+declare var ETrackActiveCondition : { ETAC_Always:'ETAC_Always',ETAC_GoreEnabled:'ETAC_GoreEnabled',ETAC_GoreDisabled:'ETAC_GoreDisabled',ETAC_MAX:'ETAC_MAX', };
+declare class InterpTrack extends UObject { 
+	SubTracks: InterpTrack[];
+	SubTrackGroups: SubTrackGroup[];
+	SupportedSubTracks: SupportedSubTrackInfo[];
+	TrackInstClass: UnrealEngineClass;
+	ActiveCondition: ETrackActiveCondition;
+	TrackTitle: string;
+	bOnePerGroup: boolean;
+	bDirGroupOnly: boolean;
+	bDisableTrack: boolean;
+	bIsSelected: boolean;
+	TrackIcon: Texture2D;
+	bIsAnimControlTrack: boolean;
+	bSubTrackOnly: boolean;
+	bVisible: boolean;
+	bIsRecording: boolean;
+	bIsCollapsed: boolean;
+	static Load(ResourceName: string): InterpTrack;
+	static Find(Outer: UObject, ResourceName: string): InterpTrack;
+	static GetDefaultObject(): InterpTrack;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrack;
+	static C(Other: UObject | any): InterpTrack;
+}
+
+declare class InterpGroup extends UObject { 
+	InterpTracks: InterpTrack[];
+	GroupName: string;
+	GroupColor: Color;
+	bCollapsed: boolean;
+	bVisible: boolean;
+	bIsFolder: boolean;
+	bIsParented: boolean;
+	bIsSelected: boolean;
+	static Load(ResourceName: string): InterpGroup;
+	static Find(Outer: UObject, ResourceName: string): InterpGroup;
+	static GetDefaultObject(): InterpGroup;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpGroup;
+	static C(Other: UObject | any): InterpGroup;
+}
+
+declare class CameraAnim extends UObject { 
+	CameraInterpGroup: InterpGroup;
+	PreviewInterpGroup: InterpGroup;
+	AnimLength: number;
+	BoundingBox: Box;
+	bRelativeToInitialTransform: boolean;
+	bRelativeToInitialFOV: boolean;
+	BaseFOV: number;
+	BasePostProcessSettings: PostProcessSettings;
+	BasePostProcessBlendWeight: number;
+	static Load(ResourceName: string): CameraAnim;
+	static Find(Outer: UObject, ResourceName: string): CameraAnim;
+	static GetDefaultObject(): CameraAnim;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraAnim;
+	static C(Other: UObject | any): CameraAnim;
+}
+
+declare class InterpGroupInst extends UObject { 
+	Group: InterpGroup;
+	GroupActor: Actor;
+	TrackInst: InterpTrackInst[];
+	static Load(ResourceName: string): InterpGroupInst;
+	static Find(Outer: UObject, ResourceName: string): InterpGroupInst;
+	static GetDefaultObject(): InterpGroupInst;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpGroupInst;
+	static C(Other: UObject | any): InterpGroupInst;
+}
+
+declare type EInterpCurveMode = 'CIM_Linear' | 'CIM_CurveAuto' | 'CIM_Constant' | 'CIM_CurveUser' | 'CIM_CurveBreak' | 'CIM_CurveAutoClamped' | 'CIM_MAX';
+declare var EInterpCurveMode : { CIM_Linear:'CIM_Linear',CIM_CurveAuto:'CIM_CurveAuto',CIM_Constant:'CIM_Constant',CIM_CurveUser:'CIM_CurveUser',CIM_CurveBreak:'CIM_CurveBreak',CIM_CurveAutoClamped:'CIM_CurveAutoClamped',CIM_MAX:'CIM_MAX', };
+declare class InterpCurvePointVector { 
+	InVal: number;
+	OutVal: Vector;
+	ArriveTangent: Vector;
+	LeaveTangent: Vector;
+	InterpMode: EInterpCurveMode;
+	clone() : InterpCurvePointVector;
+	static C(Other: UObject | any): InterpCurvePointVector;
+}
+
+declare class InterpCurveVector { 
+	Points: InterpCurvePointVector[];
+	bIsLooped: boolean;
+	LoopKeyOffset: number;
+	clone() : InterpCurveVector;
+	static C(Other: UObject | any): InterpCurveVector;
+}
+
+declare class InterpLookupPoint { 
+	GroupName: string;
+	Time: number;
+	clone() : InterpLookupPoint;
+	static C(Other: UObject | any): InterpLookupPoint;
+}
+
+declare class InterpLookupTrack { 
+	Points: InterpLookupPoint[];
+	clone() : InterpLookupTrack;
+	static C(Other: UObject | any): InterpLookupTrack;
+}
+
+declare type EInterpTrackMoveRotMode = 'IMR_Keyframed' | 'IMR_LookAtGroup' | 'IMR_Ignore' | 'IMR_MAX';
+declare var EInterpTrackMoveRotMode : { IMR_Keyframed:'IMR_Keyframed',IMR_LookAtGroup:'IMR_LookAtGroup',IMR_Ignore:'IMR_Ignore',IMR_MAX:'IMR_MAX', };
+declare class InterpTrackMove extends InterpTrack { 
+	PosTrack: InterpCurveVector;
+	EulerTrack: InterpCurveVector;
+	LookupTrack: InterpLookupTrack;
+	LookAtGroupName: string;
+	LinCurveTension: number;
+	AngCurveTension: number;
+	bUseQuatInterpolation: boolean;
+	bShowArrowAtKeys: boolean;
+	bDisableMovement: boolean;
+	bShowTranslationOnCurveEd: boolean;
+	bShowRotationOnCurveEd: boolean;
+	bHide3DTrack: boolean;
+	RotMode: EInterpTrackMoveRotMode;
+	static Load(ResourceName: string): InterpTrackMove;
+	static Find(Outer: UObject, ResourceName: string): InterpTrackMove;
+	static GetDefaultObject(): InterpTrackMove;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackMove;
+	static C(Other: UObject | any): InterpTrackMove;
+}
+
+declare class InterpTrackInstMove extends InterpTrackInst { 
+	ResetLocation: Vector;
+	ResetRotation: Rotator;
+	static Load(ResourceName: string): InterpTrackInstMove;
+	static Find(Outer: UObject, ResourceName: string): InterpTrackInstMove;
+	static GetDefaultObject(): InterpTrackInstMove;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpTrackInstMove;
+	static C(Other: UObject | any): InterpTrackInstMove;
+}
+
+declare type ECameraAnimPlaySpace = 'CameraLocal' | 'World' | 'UserDefined' | 'ECameraAnimPlaySpace_MAX';
+declare var ECameraAnimPlaySpace : { CameraLocal:'CameraLocal',World:'World',UserDefined:'UserDefined',ECameraAnimPlaySpace_MAX:'ECameraAnimPlaySpace_MAX', };
+declare class CameraAnimInst extends UObject { 
+	CamAnim: CameraAnim;
+	InterpGroupInst: InterpGroupInst;
+	PlayRate: number;
+	MoveTrack: InterpTrackMove;
+	MoveInst: InterpTrackInstMove;
+	PlaySpace: ECameraAnimPlaySpace;
+	static Load(ResourceName: string): CameraAnimInst;
+	static Find(Outer: UObject, ResourceName: string): CameraAnimInst;
+	static GetDefaultObject(): CameraAnimInst;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraAnimInst;
+	Stop(bImmediate: boolean): void;
+	SetScale(NewDuration: number): void;
+	SetDuration(NewDuration: number): void;
+	static C(Other: UObject | any): CameraAnimInst;
+}
+
+declare class CameraShake extends UObject { 
+	bSingleInstance: boolean;
+	OscillationDuration: number;
+	OscillationBlendInTime: number;
+	OscillationBlendOutTime: number;
+	RotOscillation: ROscillator;
+	LocOscillation: VOscillator;
+	FOVOscillation: FOscillator;
+	AnimPlayRate: number;
+	AnimScale: number;
+	AnimBlendInTime: number;
+	AnimBlendOutTime: number;
+	RandomAnimSegmentDuration: number;
+	Anim: CameraAnim;
+	bRandomAnimSegment: boolean;
+	CameraOwner: PlayerCameraManager;
+	ShakeScale: number;
+	OscillatorTimeRemaining: number;
+	AnimInst: CameraAnimInst;
+	static Load(ResourceName: string): CameraShake;
+	static Find(Outer: UObject, ResourceName: string): CameraShake;
+	static GetDefaultObject(): CameraShake;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraShake;
+	ReceiveStopShake(bImmediately: boolean): void;
+	ReceivePlayShake(Scale: number): void;
+	ReceiveIsFinished(): boolean;
+	BlueprintUpdateCameraShake(DeltaTime: number,Alpha: number,POV: MinimalViewInfo,ModifiedPOV?: MinimalViewInfo): {ModifiedPOV: MinimalViewInfo};
+	static C(Other: UObject | any): CameraShake;
+}
+
+declare class CameraModifier_CameraShake extends CameraModifier { 
+	ActiveShakes: CameraShake[];
+	ExpiredPooledShakesMap: any;
+	SplitScreenShakeScale: number;
+	static Load(ResourceName: string): CameraModifier_CameraShake;
+	static Find(Outer: UObject, ResourceName: string): CameraModifier_CameraShake;
+	static GetDefaultObject(): CameraModifier_CameraShake;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraModifier_CameraShake;
+	static C(Other: UObject | any): CameraModifier_CameraShake;
+}
+
+declare class MeshBuildSettings { 
+	bUseMikkTSpace: boolean;
+	bRecomputeNormals: boolean;
+	bRecomputeTangents: boolean;
+	bRemoveDegenerates: boolean;
+	bBuildAdjacencyBuffer: boolean;
+	bBuildReversedIndexBuffer: boolean;
+	bUseHighPrecisionTangentBasis: boolean;
+	bUseFullPrecisionUVs: boolean;
+	bGenerateLightmapUVs: boolean;
+	bGenerateDistanceFieldAsIfTwoSided: boolean;
+	MinLightmapResolution: number;
+	SrcLightmapIndex: number;
+	DstLightmapIndex: number;
+	BuildScale: number;
+	BuildScale3D: Vector;
+	DistanceFieldResolutionScale: number;
+	DistanceFieldBias: number;
+	DistanceFieldReplacementMesh: StaticMesh;
+	clone() : MeshBuildSettings;
+	static C(Other: UObject | any): MeshBuildSettings;
+}
+
+declare type EMeshFeatureImportance = 'Off' | 'Lowest' | 'Low' | 'Normal' | 'High' | 'Highest' | 'EMeshFeatureImportance_MAX';
+declare var EMeshFeatureImportance : { Off:'Off',Lowest:'Lowest',Low:'Low',Normal:'Normal',High:'High',Highest:'Highest',EMeshFeatureImportance_MAX:'EMeshFeatureImportance_MAX', };
+declare type EStaticMeshReductionTerimationCriterion = 'Triangles' | 'Vertices' | 'Any' | 'EStaticMeshReductionTerimationCriterion_MAX';
+declare var EStaticMeshReductionTerimationCriterion : { Triangles:'Triangles',Vertices:'Vertices',Any:'Any',EStaticMeshReductionTerimationCriterion_MAX:'EStaticMeshReductionTerimationCriterion_MAX', };
+declare class MeshReductionSettings { 
+	PercentTriangles: number;
+	PercentVertices: number;
+	MaxDeviation: number;
+	PixelError: number;
+	WeldingThreshold: number;
+	HardAngleThreshold: number;
+	BaseLODModel: number;
+	SilhouetteImportance: EMeshFeatureImportance;
+	TextureImportance: EMeshFeatureImportance;
+	ShadingImportance: EMeshFeatureImportance;
+	bRecalculateNormals: boolean;
+	bGenerateUniqueLightmapUVs: boolean;
+	bKeepSymmetry: boolean;
+	bVisibilityAided: boolean;
+	bCullOccluded: boolean;
+	TerminationCriterion: EStaticMeshReductionTerimationCriterion;
+	VisibilityAggressiveness: EMeshFeatureImportance;
+	VertexColorImportance: EMeshFeatureImportance;
+	clone() : MeshReductionSettings;
+	static C(Other: UObject | any): MeshReductionSettings;
+}
+
+declare class StaticMeshSourceModel { 
+	BuildSettings: MeshBuildSettings;
+	ReductionSettings: MeshReductionSettings;
+	LODDistance: number;
+	ScreenSize: PerPlatformFloat;
+	SourceImportFilename: string;
+	bImportWithBaseMesh: boolean;
+	clone() : StaticMeshSourceModel;
+	static C(Other: UObject | any): StaticMeshSourceModel;
+}
+
+declare class MeshSectionInfoMap { 
+	Map: any;
+	clone() : MeshSectionInfoMap;
+	static C(Other: UObject | any): MeshSectionInfoMap;
+}
+
+declare class MaterialRemapIndex { 
+	ImportVersionKey: any;
+	MaterialRemap: number[];
+	clone() : MaterialRemapIndex;
+	static C(Other: UObject | any): MaterialRemapIndex;
+}
+
+declare class StaticMaterial { 
+	MaterialInterface: MaterialInterface;
+	MaterialSlotName: string;
+	ImportedMaterialSlotName: string;
+	UVChannelData: MeshUVChannelInfo;
+	clone() : StaticMaterial;
+	static C(Other: UObject | any): StaticMaterial;
+}
+
+declare class AssetEditorOrbitCameraPosition { 
+	bIsSet: boolean;
+	CamOrbitPoint: Vector;
+	CamOrbitZoom: Vector;
+	CamOrbitRotation: Rotator;
+	clone() : AssetEditorOrbitCameraPosition;
+	static C(Other: UObject | any): AssetEditorOrbitCameraPosition;
+}
+
+declare class StaticMeshSocket extends UObject { 
+	SocketName: string;
+	RelativeLocation: Vector;
+	RelativeRotation: Rotator;
+	RelativeScale: Vector;
+	Tag: string;
+	PreviewStaticMesh: StaticMesh;
+	bSocketCreatedAtImport: boolean;
+	static Load(ResourceName: string): StaticMeshSocket;
+	static Find(Outer: UObject, ResourceName: string): StaticMeshSocket;
+	static GetDefaultObject(): StaticMeshSocket;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshSocket;
+	static C(Other: UObject | any): StaticMeshSocket;
+}
+
+declare class NavCollisionBase extends UObject { 
+	bIsDynamicObstacle: boolean;
+	static Load(ResourceName: string): NavCollisionBase;
+	static Find(Outer: UObject, ResourceName: string): NavCollisionBase;
+	static GetDefaultObject(): NavCollisionBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavCollisionBase;
+	static C(Other: UObject | any): NavCollisionBase;
+}
+
+declare class MeshSectionInfo { 
+	MaterialIndex: number;
+	bEnableCollision: boolean;
+	bCastShadow: boolean;
+	clone() : MeshSectionInfo;
+	static C(Other: UObject | any): MeshSectionInfo;
+}
+
+declare class JavascriptRawMesh { 
+	FaceMaterialIndices: number[];
+	FaceSmoothingMasks: any[];
+	VertexPositions: Vector[];
+	WedgeIndices: any[];
+	WedgeTangentX: Vector[];
+	WedgeTangentY: Vector[];
+	WedgeTangentZ: Vector[];
+	WedgeTexCoords_0: Vector2D[];
+	WedgeTexCoords_1: Vector2D[];
+	WedgeTexCoords_2: Vector2D[];
+	WedgeTexCoords_3: Vector2D[];
+	WedgeTexCoords_4: Vector2D[];
+	WedgeTexCoords_5: Vector2D[];
+	WedgeTexCoords_6: Vector2D[];
+	WedgeTexCoords_7: Vector2D[];
+	WedgeColors: Color[];
+	MaterialIndexToImportIndex: number[];
+	clone() : JavascriptRawMesh;
+	static C(Other: UObject | any): JavascriptRawMesh;
+	CompactMaterialIndices(): {RawMesh: JavascriptRawMesh};
+	Empty(): {RawMesh: JavascriptRawMesh};
+	GetWedgePosition(WedgeIndex: number): Vector;
+	IsValid(): boolean;
+	IsValidOrFixable(): boolean;
+	static CompactMaterialIndices(RawMesh?: JavascriptRawMesh): {RawMesh: JavascriptRawMesh};
+	static Empty(RawMesh?: JavascriptRawMesh): {RawMesh: JavascriptRawMesh};
+	static GetWedgePosition(RawMesh: JavascriptRawMesh,WedgeIndex: number): Vector;
+	static IsValid(RawMesh: JavascriptRawMesh): boolean;
+	static IsValidOrFixable(RawMesh: JavascriptRawMesh): boolean;
+}
+
+declare class ProcMeshTangent { 
+	TangentX: Vector;
+	bFlipTangentY: boolean;
+	clone() : ProcMeshTangent;
+	static C(Other: UObject | any): ProcMeshTangent;
+}
+
+declare class StaticMesh extends StreamableRenderAsset { 
+	SourceModels: StaticMeshSourceModel[];
+	SectionInfoMap: MeshSectionInfoMap;
+	OriginalSectionInfoMap: MeshSectionInfoMap;
+	LODGroup: string;
+	NumStreamedLODs: PerPlatformInt;
+	ImportVersion: number;
+	MaterialRemapIndexPerImportVersion: MaterialRemapIndex[];
+	LightmapUVVersion: number;
+	bAutoComputeLODScreenSize: boolean;
+	Materials: MaterialInterface[];
+	MinLOD: PerPlatformInt;
+	LpvBiasMultiplier: number;
+	StaticMaterials: StaticMaterial[];
+	LightmapUVDensity: number;
+	LightMapResolution: number;
+	LightMapCoordinateIndex: number;
+	DistanceFieldSelfShadowBias: number;
+	BodySetup: BodySetup;
+	LODForCollision: number;
+	bGenerateMeshDistanceField: boolean;
+	bStripComplexCollisionForConsole: boolean;
+	bHasNavigationData: boolean;
+	bSupportUniformlyDistributedSampling: boolean;
+	bAllowCPUAccess: boolean;
+	bSupportGpuUniformlyDistributedSampling: boolean;
+	AssetImportData: AssetImportData;
+	SourceFilePath: string;
+	SourceFileTimestamp: string;
+	ThumbnailInfo: ThumbnailInfo;
+	EditorCameraPosition: AssetEditorOrbitCameraPosition;
+	bCustomizedCollision: boolean;
+	LODForOccluderMesh: number;
+	Sockets: StaticMeshSocket[];
+	PositiveBoundsExtension: Vector;
+	NegativeBoundsExtension: Vector;
+	ExtendedBounds: BoxSphereBounds;
+	ElementToIgnoreForTexFactor: number;
+	AssetUserData: AssetUserData[];
+	EditableMesh: UObject;
+	ComplexCollisionMesh: StaticMesh;
+	NavCollision: NavCollisionBase;
+	static Load(ResourceName: string): StaticMesh;
+	static Find(Outer: UObject, ResourceName: string): StaticMesh;
+	static GetDefaultObject(): StaticMesh;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMesh;
+	SetMaterial(MaterialIndex: number,NewMaterial: MaterialInterface): void;
+	RemoveSocket(Socket: StaticMeshSocket): void;
+	GetNumSections(InLOD: number): number;
+	GetNumLODs(): number;
+	GetMaterialIndex(MaterialSlotName: string): number;
+	GetMaterial(MaterialIndex: number): MaterialInterface;
+	GetBounds(): BoxSphereBounds;
+	GetBoundingBox(): Box;
+	FindSocket(InSocketName: string): StaticMeshSocket;
+	AddSocket(Socket: StaticMeshSocket): void;
+	static C(Other: UObject | any): StaticMesh;
+	Build(): void;
+	GetSectionInfo(LODIndex: number,SectionIndex: number): MeshSectionInfo;
+	LoadRawMesh(SourceModelIndex: number,OutMesh?: JavascriptRawMesh): {OutMesh: JavascriptRawMesh};
+	SaveRawMesh(SourceModelIndex: number,InMesh?: JavascriptRawMesh): {InMesh: JavascriptRawMesh};
+	SetSectionInfo(LODIndex: number,SectionIndex: number,Info: MeshSectionInfo): void;
+	GetSectionFromStaticMesh(LODIndex: number,SectionIndex: number,Vertices?: Vector[],Triangles?: number[],Normals?: Vector[],UVs?: Vector2D[],Tangents?: ProcMeshTangent[]): {Vertices: Vector[], Triangles: number[], Normals: Vector[], UVs: Vector2D[], Tangents: ProcMeshTangent[]};
+	static Build(StaticMesh: StaticMesh): void;
+	static GetSectionInfo(StaticMesh: StaticMesh,LODIndex: number,SectionIndex: number): MeshSectionInfo;
+	static LoadRawMesh(StaticMesh: StaticMesh,SourceModelIndex: number,OutMesh?: JavascriptRawMesh): {OutMesh: JavascriptRawMesh};
+	static SaveRawMesh(StaticMesh: StaticMesh,SourceModelIndex: number,InMesh?: JavascriptRawMesh): {InMesh: JavascriptRawMesh};
+	static SetSectionInfo(StaticMesh: StaticMesh,LODIndex: number,SectionIndex: number,Info: MeshSectionInfo): void;
+	static GetSectionFromStaticMesh(InMesh: StaticMesh,LODIndex: number,SectionIndex: number,Vertices?: Vector[],Triangles?: number[],Normals?: Vector[],UVs?: Vector2D[],Tangents?: ProcMeshTangent[]): {Vertices: Vector[], Triangles: number[], Normals: Vector[], UVs: Vector2D[], Tangents: ProcMeshTangent[]};
+}
+
+declare class CameraComponent extends SceneComponent { 
+	FieldOfView: number;
+	OrthoWidth: number;
+	OrthoNearClipPlane: number;
+	OrthoFarClipPlane: number;
+	AspectRatio: number;
+	bConstrainAspectRatio: boolean;
+	bUseFieldOfViewForLOD: boolean;
+	bLockToHmd: boolean;
+	bUsePawnControlRotation: boolean;
+	ProjectionMode: ECameraProjectionMode;
+	CameraMesh: StaticMesh;
+	PostProcessBlendWeight: number;
+	PostProcessSettings: PostProcessSettings;
+	bUseControllerViewRotation: boolean;
+	static Load(ResourceName: string): CameraComponent;
+	static Find(Outer: UObject, ResourceName: string): CameraComponent;
+	static GetDefaultObject(): CameraComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraComponent;
+	SetUseFieldOfViewForLOD(bInUseFieldOfViewForLOD: boolean): void;
+	SetProjectionMode(InProjectionMode: ECameraProjectionMode): void;
+	SetPostProcessBlendWeight(InPostProcessBlendWeight: number): void;
+	SetOrthoWidth(InOrthoWidth: number): void;
+	SetOrthoNearClipPlane(InOrthoNearClipPlane: number): void;
+	SetOrthoFarClipPlane(InOrthoFarClipPlane: number): void;
+	SetFieldOfView(InFieldOfView: number): void;
+	SetConstraintAspectRatio(bInConstrainAspectRatio: boolean): void;
+	SetAspectRatio(InAspectRatio: number): void;
+	GetFilmbackText(): string;
+	GetCameraView(DeltaTime: number,DesiredView?: MinimalViewInfo): {DesiredView: MinimalViewInfo};
+	static C(Other: UObject | any): CameraComponent;
+}
+
+declare class CameraActor extends Actor { 
+	AutoActivateForPlayer: EAutoReceiveInput;
+	CameraComponent: CameraComponent;
+	SceneComponent: SceneComponent;
+	bConstrainAspectRatio: boolean;
+	AspectRatio: number;
+	FOVAngle: number;
+	PostProcessBlendWeight: number;
+	PostProcessSettings: PostProcessSettings;
+	static GetDefaultObject(): CameraActor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraActor;
+	GetAutoActivatePlayerIndex(): number;
+	static C(Other: UObject | any): CameraActor;
+	DrawDebugCamera(CameraColor: LinearColor,Duration: number): void;
+	static DrawDebugCamera(CameraActor: CameraActor,CameraColor: LinearColor,Duration: number): void;
+}
+
+declare class PlayerCameraManager extends Actor { 
+	PCOwner: PlayerController;
+	TransformComponent: SceneComponent;
+	DefaultFOV: number;
+	DefaultOrthoWidth: number;
+	DefaultAspectRatio: number;
+	CameraCache: CameraCacheEntry;
+	LastFrameCameraCache: CameraCacheEntry;
+	ViewTarget: TViewTarget;
+	PendingViewTarget: TViewTarget;
+	CameraCachePrivate: CameraCacheEntry;
+	LastFrameCameraCachePrivate: CameraCacheEntry;
+	ModifierList: CameraModifier[];
+	DefaultModifiers: UnrealEngineClass[];
+	FreeCamDistance: number;
+	FreeCamOffset: Vector;
+	ViewTargetOffset: Vector;
+	CameraLensEffects: EmitterCameraLensEffectBase[];
+	CachedCameraShakeMod: CameraModifier_CameraShake;
+	AnimInstPool: CameraAnimInst;
+	PostProcessBlendCache: PostProcessSettings[];
+	ActiveAnims: CameraAnimInst[];
+	FreeAnims: CameraAnimInst[];
+	AnimCameraActor: CameraActor;
+	bIsOrthographic: boolean;
+	bDefaultConstrainAspectRatio: boolean;
+	bClientSimulatingViewTarget: boolean;
+	bUseClientSideCameraUpdates: boolean;
+	bGameCameraCutThisFrame: boolean;
+	ViewPitchMin: number;
+	ViewPitchMax: number;
+	ViewYawMin: number;
+	ViewYawMax: number;
+	ViewRollMin: number;
+	ViewRollMax: number;
+	ServerUpdateCameraTimeout: number;
+	static GetDefaultObject(): PlayerCameraManager;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayerCameraManager;
+	StopCameraShake(ShakeInstance: CameraShake,bImmediately: boolean): void;
+	StopCameraFade(): void;
+	StopCameraAnimInst(AnimInst: CameraAnimInst,bImmediate: boolean): void;
+	StopAllInstancesOfCameraShake(Shake: UnrealEngineClass,bImmediately: boolean): void;
+	StopAllInstancesOfCameraAnim(Anim: CameraAnim,bImmediate: boolean): void;
+	StopAllCameraShakes(bImmediately: boolean): void;
+	StopAllCameraAnims(bImmediate: boolean): void;
+	StartCameraFade(FromAlpha: number,ToAlpha: number,Duration: number,Color: LinearColor,bShouldFadeAudio: boolean,bHoldWhenFinished: boolean): void;
+	SetManualCameraFade(InFadeAmount: number,Color: LinearColor,bInFadeAudio: boolean): void;
+	SetGameCameraCutThisFrame(): void;
+	RemoveCameraModifier(ModifierToRemove: CameraModifier): boolean;
+	RemoveCameraLensEffect(Emitter: EmitterCameraLensEffectBase): void;
+	PlayCameraShake(ShakeClass: UnrealEngineClass,Scale: number,PlaySpace: ECameraAnimPlaySpace,UserPlaySpaceRot: Rotator): CameraShake;
+	PlayCameraAnim(Anim: CameraAnim,Rate: number,Scale: number,BlendInTime: number,BlendOutTime: number,bLoop: boolean,bRandomStartTime: boolean,Duration: number,PlaySpace: ECameraAnimPlaySpace,UserPlaySpaceRot: Rotator): CameraAnimInst;
+	PhotographyCameraModify(NewCameraLocation: Vector,PreviousCameraLocation: Vector,OriginalCameraLocation: Vector,ResultCameraLocation?: Vector): {ResultCameraLocation: Vector};
+	OnPhotographySessionStart(): void;
+	OnPhotographySessionEnd(): void;
+	OnPhotographyMultiPartCaptureStart(): void;
+	OnPhotographyMultiPartCaptureEnd(): void;
+	GetOwningPlayerController(): PlayerController;
+	GetFOVAngle(): number;
+	GetCameraRotation(): Rotator;
+	GetCameraLocation(): Vector;
+	FindCameraModifierByClass(ModifierClass: UnrealEngineClass): CameraModifier;
+	ClearCameraLensEffects(): void;
+	BlueprintUpdateCamera(CameraTarget: Actor,NewCameraLocation?: Vector,NewCameraRotation?: Rotator,NewCameraFOV?: number): {NewCameraLocation: Vector, NewCameraRotation: Rotator, NewCameraFOV: number, $: boolean};
+	AddNewCameraModifier(ModifierClass: UnrealEngineClass): CameraModifier;
+	AddCameraLensEffect(LensEffectEmitterClass: UnrealEngineClass): EmitterCameraLensEffectBase;
+	static C(Other: UObject | any): PlayerCameraManager;
+}
+
+declare class DrawFrustumComponent extends PrimitiveComponent { 
+	FrustumColor: Color;
+	FrustumAngle: number;
+	FrustumAspectRatio: number;
+	FrustumStartDist: number;
+	FrustumEndDist: number;
+	Texture: Texture;
+	static Load(ResourceName: string): DrawFrustumComponent;
+	static Find(Outer: UObject, ResourceName: string): DrawFrustumComponent;
+	static GetDefaultObject(): DrawFrustumComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DrawFrustumComponent;
+	static C(Other: UObject | any): DrawFrustumComponent;
+}
+
+declare class DebugCameraController extends PlayerController { 
+	bShowSelectedInfo: boolean;
+	bIsFrozenRendering: boolean;
+	bIsOrbitingSelectedActor: boolean;
+	bOrbitPivotUseCenter: boolean;
+	bEnableBufferVisualization: boolean;
+	bEnableBufferVisualizationFullMode: boolean;
+	bIsBufferVisualizationInputSetup: boolean;
+	bLastDisplayEnabled: boolean;
+	DrawFrustum: DrawFrustumComponent;
+	SelectedActor: Actor;
+	SelectedComponent: PrimitiveComponent;
+	SelectedHitPoint: HitResult;
+	OriginalControllerRef: PlayerController;
+	OriginalPlayer: Player;
+	SpeedScale: number;
+	InitialMaxSpeed: number;
+	InitialAccel: number;
+	InitialDecel: number;
+	static GetDefaultObject(): DebugCameraController;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DebugCameraController;
+	ToggleDisplay(): void;
+	ShowDebugSelectedInfo(): void;
+	SetPawnMovementSpeedScale(NewSpeedScale: number): void;
+	ReceiveOnDeactivate(RestoredPC: PlayerController): void;
+	ReceiveOnActorSelected(NewSelectedActor: Actor,SelectHitLocation: Vector,SelectHitNormal: Vector,Hit: HitResult): void;
+	ReceiveOnActivate(OriginalPC: PlayerController): void;
+	GetSelectedActor(): Actor;
+	static C(Other: UObject | any): DebugCameraController;
+}
+
+declare class CheatManager extends UObject { 
+	DebugCameraControllerRef: DebugCameraController;
+	DebugCameraControllerClass: UnrealEngineClass;
+	static Load(ResourceName: string): CheatManager;
+	static Find(Outer: UObject, ResourceName: string): CheatManager;
+	static GetDefaultObject(): CheatManager;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CheatManager;
+	Walk(): void;
+	ViewSelf(): void;
+	ViewPlayer(S: string): void;
+	ViewClass(DesiredClass: UnrealEngineClass): void;
+	ViewActor(ActorName: string): void;
+	UpdateSafeArea(): void;
+	ToggleServerStatReplicatorUpdateStatNet(): void;
+	ToggleServerStatReplicatorClientOverwrite(): void;
+	ToggleDebugCamera(): void;
+	ToggleAILogging(): void;
+	TestCollisionDistance(): void;
+	Teleport(): void;
+	Summon(ClassName: string): void;
+	StreamLevelOut(PackageName: string): void;
+	StreamLevelIn(PackageName: string): void;
+	SpawnServerStatReplicator(): void;
+	Slomo(NewTimeDilation: number): void;
+	SetWorldOrigin(): void;
+	SetMouseSensitivityToDefault(): void;
+	ServerToggleAILogging(): void;
+	ReceiveInitCheatManager(): void;
+	ReceiveEndPlay(): void;
+	PlayersOnly(): void;
+	OnlyLoadLevel(PackageName: string): void;
+	LogLoc(): void;
+	InvertMouse(): void;
+	God(): void;
+	Ghost(): void;
+	FreezeFrame(Delay: number): void;
+	Fly(): void;
+	FlushLog(): void;
+	EnableDebugCamera(): void;
+	DumpVoiceMutingState(): void;
+	DumpPartyState(): void;
+	DumpOnlineSessionState(): void;
+	DumpChatState(): void;
+	DisableDebugCamera(): void;
+	DestroyTarget(): void;
+	DestroyServerStatReplicator(): void;
+	DestroyPawns(aClass: UnrealEngineClass): void;
+	DestroyAllPawnsExceptTarget(): void;
+	DestroyAll(aClass: UnrealEngineClass): void;
+	DebugCapsuleSweepSize(HalfHeight: number,Radius: number): void;
+	DebugCapsuleSweepPawn(): void;
+	DebugCapsuleSweepComplex(bTraceComplex: boolean): void;
+	DebugCapsuleSweepClear(): void;
+	DebugCapsuleSweepChannel(Channel: ECollisionChannel): void;
+	DebugCapsuleSweepCapture(): void;
+	DebugCapsuleSweep(): void;
+	DamageTarget(DamageAmount: number): void;
+	CheatScript(ScriptName: string): void;
+	ChangeSize(F: number): void;
+	BugItStringCreator(ViewLocation: Vector,ViewRotation: Rotator,GoString?: string,LocString?: string): {GoString: string, LocString: string};
+	BugItGo(X: number,Y: number,Z: number,Pitch: number,Yaw: number,Roll: number): void;
+	BugIt(ScreenShotDescription: string): void;
+	static C(Other: UObject | any): CheatManager;
+}
+
+declare class KeyBind { 
+	Key: Key;
+	Command: string;
+	Control: boolean;
+	Shift: boolean;
+	Alt: boolean;
+	Cmd: boolean;
+	bIgnoreCtrl: boolean;
+	bIgnoreShift: boolean;
+	bIgnoreAlt: boolean;
+	bIgnoreCmd: boolean;
+	bDisabled: boolean;
+	clone() : KeyBind;
+	static C(Other: UObject | any): KeyBind;
+}
+
+declare class PlayerInput extends UObject { 
+	DebugExecBindings: KeyBind[];
+	InvertedAxis: string[];
+	static Load(ResourceName: string): PlayerInput;
+	static Find(Outer: UObject, ResourceName: string): PlayerInput;
+	static GetDefaultObject(): PlayerInput;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayerInput;
+	SetMouseSensitivity(Sensitivity: number): void;
+	SetBind(BindName: string,Command: string): void;
+	InvertAxisKey(AxisKey: Key): void;
+	InvertAxis(AxisName: string): void;
+	ClearSmoothing(): void;
+	static C(Other: UObject | any): PlayerInput;
+}
+
+declare class RuntimeFloatCurve { 
+	EditorCurveData: RichCurve;
+	ExternalCurve: CurveFloat;
+	clone() : RuntimeFloatCurve;
+	static C(Other: UObject | any): RuntimeFloatCurve;
+}
+
+declare class ForceFeedbackChannelDetails { 
+	bAffectsLeftLarge: boolean;
+	bAffectsLeftSmall: boolean;
+	bAffectsRightLarge: boolean;
+	bAffectsRightSmall: boolean;
+	Curve: RuntimeFloatCurve;
+	clone() : ForceFeedbackChannelDetails;
+	static C(Other: UObject | any): ForceFeedbackChannelDetails;
+}
+
+declare type EAttenuationDistanceModel = 'Linear' | 'Logarithmic' | 'Inverse' | 'LogReverse' | 'NaturalSound' | 'Custom' | 'EAttenuationDistanceModel_MAX';
+declare var EAttenuationDistanceModel : { Linear:'Linear',Logarithmic:'Logarithmic',Inverse:'Inverse',LogReverse:'LogReverse',NaturalSound:'NaturalSound',Custom:'Custom',EAttenuationDistanceModel_MAX:'EAttenuationDistanceModel_MAX', };
+declare type EAttenuationShape = 'Sphere' | 'Capsule' | 'Box' | 'Cone' | 'EAttenuationShape_MAX';
+declare var EAttenuationShape : { Sphere:'Sphere',Capsule:'Capsule',Box:'Box',Cone:'Cone',EAttenuationShape_MAX:'EAttenuationShape_MAX', };
+declare class BaseAttenuationSettings { 
+	DistanceAlgorithm: EAttenuationDistanceModel;
+	AttenuationShape: EAttenuationShape;
+	dBAttenuationAtMax: number;
+	AttenuationShapeExtents: Vector;
+	ConeOffset: number;
+	FalloffDistance: number;
+	CustomAttenuationCurve: RuntimeFloatCurve;
+	clone() : BaseAttenuationSettings;
+	static C(Other: UObject | any): BaseAttenuationSettings;
+}
+
+declare class ForceFeedbackAttenuationSettings extends BaseAttenuationSettings { 
+	clone() : ForceFeedbackAttenuationSettings;
+	static C(Other: UObject | any): ForceFeedbackAttenuationSettings;
+}
+
+declare class ForceFeedbackAttenuation extends UObject { 
+	Attenuation: ForceFeedbackAttenuationSettings;
+	static Load(ResourceName: string): ForceFeedbackAttenuation;
+	static Find(Outer: UObject, ResourceName: string): ForceFeedbackAttenuation;
+	static GetDefaultObject(): ForceFeedbackAttenuation;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ForceFeedbackAttenuation;
+	static C(Other: UObject | any): ForceFeedbackAttenuation;
+}
+
+declare class ForceFeedbackComponent extends SceneComponent { 
+	ForceFeedbackEffect: ForceFeedbackEffect;
+	bAutoDestroy: boolean;
+	bStopWhenOwnerDestroyed: boolean;
+	bLooping: boolean;
+	bIgnoreTimeDilation: boolean;
+	bOverrideAttenuation: boolean;
+	IntensityMultiplier: number;
+	AttenuationSettings: ForceFeedbackAttenuation;
+	AttenuationOverrides: ForceFeedbackAttenuationSettings;
+	OnForceFeedbackFinished: UnrealEngineMulticastDelegate<(ForceFeedbackComponent: ForceFeedbackComponent) => void>;
+	static Load(ResourceName: string): ForceFeedbackComponent;
+	static Find(Outer: UObject, ResourceName: string): ForceFeedbackComponent;
+	static GetDefaultObject(): ForceFeedbackComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ForceFeedbackComponent;
+	Stop(): void;
+	SetIntensityMultiplier(NewIntensityMultiplier: number): void;
+	SetForceFeedbackEffect(NewForceFeedbackEffect: ForceFeedbackEffect): void;
+	Play(StartTime: number): void;
+	BP_GetAttenuationSettingsToApply(OutAttenuationSettings?: ForceFeedbackAttenuationSettings): {OutAttenuationSettings: ForceFeedbackAttenuationSettings, $: boolean};
+	AdjustAttenuation(InAttenuationSettings: ForceFeedbackAttenuationSettings): void;
+	static C(Other: UObject | any): ForceFeedbackComponent;
+}
+
+declare class ForceFeedbackEffect extends UObject { 
+	ChannelDetails: ForceFeedbackChannelDetails[];
+	Duration: number;
+	static Load(ResourceName: string): ForceFeedbackEffect;
+	static Find(Outer: UObject, ResourceName: string): ForceFeedbackEffect;
+	static GetDefaultObject(): ForceFeedbackEffect;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ForceFeedbackEffect;
+	static C(Other: UObject | any): ForceFeedbackEffect;
+	SpawnForceFeedbackAttached(AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,bStopWhenAttachedToDestroyed: boolean,bLooping: boolean,IntensityMultiplier: number,StartTime: number,AttenuationSettings: ForceFeedbackAttenuation,bAutoDestroy: boolean): ForceFeedbackComponent;
+	static SpawnForceFeedbackAttached(ForceFeedbackEffect: ForceFeedbackEffect,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,bStopWhenAttachedToDestroyed: boolean,bLooping: boolean,IntensityMultiplier: number,StartTime: number,AttenuationSettings: ForceFeedbackAttenuation,bAutoDestroy: boolean): ForceFeedbackComponent;
+}
+
+declare class ActiveForceFeedbackEffect { 
+	ForceFeedbackEffect: ForceFeedbackEffect;
+	clone() : ActiveForceFeedbackEffect;
+	static C(Other: UObject | any): ActiveForceFeedbackEffect;
+}
+
+declare class ChildConnection extends NetConnection { 
+	Parent: NetConnection;
+	static Load(ResourceName: string): ChildConnection;
+	static Find(Outer: UObject, ResourceName: string): ChildConnection;
+	static GetDefaultObject(): ChildConnection;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ChildConnection;
+	static C(Other: UObject | any): ChildConnection;
+}
+
+declare class Property extends Field { 
+	static Load(ResourceName: string): Property;
+	static Find(Outer: UObject, ResourceName: string): Property;
+	static GetDefaultObject(): Property;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Property;
+	static C(Other: UObject | any): Property;
+}
+
+declare class ChannelDefinition { 
+	ChannelName: string;
+	ClassName: string;
+	ChannelClass: UnrealEngineClass;
+	StaticChannelIndex: number;
+	bTickOnCreate: boolean;
+	bServerOpen: boolean;
+	bClientOpen: boolean;
+	bInitialServer: boolean;
+	bInitialClient: boolean;
+	clone() : ChannelDefinition;
+	static C(Other: UObject | any): ChannelDefinition;
+}
+
+declare class Channel extends UObject { 
+	Connection: NetConnection;
+	static Load(ResourceName: string): Channel;
+	static Find(Outer: UObject, ResourceName: string): Channel;
+	static GetDefaultObject(): Channel;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Channel;
+	static C(Other: UObject | any): Channel;
+}
+
+declare class ReplicationDriver extends UObject { 
+	static Load(ResourceName: string): ReplicationDriver;
+	static Find(Outer: UObject, ResourceName: string): ReplicationDriver;
+	static GetDefaultObject(): ReplicationDriver;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReplicationDriver;
+	static C(Other: UObject | any): ReplicationDriver;
+}
+
+declare class NetDriver extends UObject { 
+	NetConnectionClassName: string;
+	ReplicationDriverClassName: string;
+	MaxDownloadSize: number;
+	bClampListenServerTickRate: boolean;
+	NetServerMaxTickRate: number;
+	MaxNetTickRate: number;
+	MaxInternetClientRate: number;
+	MaxClientRate: number;
+	ServerTravelPause: number;
+	SpawnPrioritySeconds: number;
+	RelevantTimeout: number;
+	KeepAliveTime: number;
+	InitialConnectTimeout: number;
+	ConnectionTimeout: number;
+	TimeoutMultiplierForUnoptimizedBuilds: number;
+	bNoTimeouts: boolean;
+	ServerConnection: NetConnection;
+	ClientConnections: NetConnection[];
+	RecentlyDisconnectedTrackingTime: number;
+	World: World;
+	WorldPackage: Package;
+	NetConnectionClass: UnrealEngineClass;
+	ReplicationDriverClass: UnrealEngineClass;
+	RoleProperty: Property;
+	RemoteRoleProperty: Property;
+	NetDriverName: string;
+	ChannelDefinitions: ChannelDefinition[];
+	ChannelDefinitionMap: any;
+	ActorChannelPool: Channel[];
+	Time: number;
+	ReplicationDriver: ReplicationDriver;
+	static Load(ResourceName: string): NetDriver;
+	static Find(Outer: UObject, ResourceName: string): NetDriver;
+	static GetDefaultObject(): NetDriver;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NetDriver;
+	static C(Other: UObject | any): NetDriver;
+}
+
+declare class PackageMap extends UObject { 
+	static Load(ResourceName: string): PackageMap;
+	static Find(Outer: UObject, ResourceName: string): PackageMap;
+	static GetDefaultObject(): PackageMap;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PackageMap;
+	static C(Other: UObject | any): PackageMap;
+}
+
+declare class NetConnection extends Player { 
+	Children: ChildConnection[];
+	Driver: NetDriver;
+	PackageMapClass: UnrealEngineClass;
+	PackageMap: PackageMap;
+	OpenChannels: Channel[];
+	SentTemporaries: Actor[];
+	ViewTarget: Actor;
+	OwningActor: Actor;
+	MaxPacket: number;
+	InternalAck: boolean;
+	PlayerId: UniqueNetIdRepl;
+	LastReceiveTime: any;
+	ChannelsToTick: Channel[];
+	static Load(ResourceName: string): NetConnection;
+	static Find(Outer: UObject, ResourceName: string): NetConnection;
+	static GetDefaultObject(): NetConnection;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NetConnection;
+	static C(Other: UObject | any): NetConnection;
+}
+
+declare class CachedKeyToActionInfo { 
+	PlayerInput: PlayerInput;
+	clone() : CachedKeyToActionInfo;
+	static C(Other: UObject | any): CachedKeyToActionInfo;
+}
+
+declare type EControllerAnalogStick = 'CAS_LeftStick' | 'CAS_RightStick' | 'CAS_MAX';
+declare var EControllerAnalogStick : { CAS_LeftStick:'CAS_LeftStick',CAS_RightStick:'CAS_RightStick',CAS_MAX:'CAS_MAX', };
+declare class InputComponent extends ActorComponent { 
+	CachedKeyToActionInfo: CachedKeyToActionInfo[];
+	static Load(ResourceName: string): InputComponent;
+	static Find(Outer: UObject, ResourceName: string): InputComponent;
+	static GetDefaultObject(): InputComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputComponent;
+	WasControllerKeyJustReleased(Key: Key): boolean;
+	WasControllerKeyJustPressed(Key: Key): boolean;
+	IsControllerKeyDown(Key: Key): boolean;
+	GetTouchState(FingerIndex: number,LocationX?: number,LocationY?: number,bIsCurrentlyPressed?: boolean): {LocationX: number, LocationY: number, bIsCurrentlyPressed: boolean};
+	GetControllerVectorKeyState(Key: Key): Vector;
+	GetControllerMouseDelta(DeltaX?: number,DeltaY?: number): {DeltaX: number, DeltaY: number};
+	GetControllerKeyTimeDown(Key: Key): number;
+	GetControllerAnalogStickState(WhichStick: EControllerAnalogStick,StickX?: number,StickY?: number): {StickX: number, StickY: number};
+	GetControllerAnalogKeyState(Key: Key): number;
+	static C(Other: UObject | any): InputComponent;
+}
+
+declare class TouchInputControl { 
+	Image1: Texture2D;
+	Image2: Texture2D;
+	Center: Vector2D;
+	VisualSize: Vector2D;
+	ThumbSize: Vector2D;
+	InteractionSize: Vector2D;
+	InputScale: Vector2D;
+	MainInputKey: Key;
+	AltInputKey: Key;
+	clone() : TouchInputControl;
+	static C(Other: UObject | any): TouchInputControl;
+}
+
+declare class TouchInterface extends UObject { 
+	Controls: TouchInputControl[];
+	ActiveOpacity: number;
+	InactiveOpacity: number;
+	TimeUntilDeactive: number;
+	TimeUntilReset: number;
+	ActivationDelay: number;
+	bPreventRecenter: boolean;
+	StartupDelay: number;
+	static Load(ResourceName: string): TouchInterface;
+	static Find(Outer: UObject, ResourceName: string): TouchInterface;
+	static GetDefaultObject(): TouchInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TouchInterface;
+	static C(Other: UObject | any): TouchInterface;
+}
+
+declare type EPlaneConstraintAxisSetting = 'Custom' | 'X' | 'Y' | 'Z' | 'UseGlobalPhysicsSetting' | 'EPlaneConstraintAxisSetting_MAX';
+declare var EPlaneConstraintAxisSetting : { Custom:'Custom',X:'X',Y:'Y',Z:'Z',UseGlobalPhysicsSetting:'UseGlobalPhysicsSetting',EPlaneConstraintAxisSetting_MAX:'EPlaneConstraintAxisSetting_MAX', };
+declare class MovementComponent extends ActorComponent { 
+	UpdatedComponent: SceneComponent;
+	UpdatedPrimitive: PrimitiveComponent;
+	Velocity: Vector;
+	PlaneConstraintNormal: Vector;
+	PlaneConstraintOrigin: Vector;
+	bUpdateOnlyIfRendered: boolean;
+	bAutoUpdateTickRegistration: boolean;
+	bTickBeforeOwner: boolean;
+	bAutoRegisterUpdatedComponent: boolean;
+	bConstrainToPlane: boolean;
+	bSnapToPlaneAtStart: boolean;
+	bAutoRegisterPhysicsVolumeUpdates: boolean;
+	bComponentShouldUpdatePhysicsVolume: boolean;
+	PlaneConstraintAxisSetting: EPlaneConstraintAxisSetting;
+	static Load(ResourceName: string): MovementComponent;
+	static Find(Outer: UObject, ResourceName: string): MovementComponent;
+	static GetDefaultObject(): MovementComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovementComponent;
+	StopMovementImmediately(): void;
+	SnapUpdatedComponentToPlane(): void;
+	SetUpdatedComponent(NewUpdatedComponent: SceneComponent): void;
+	SetPlaneConstraintOrigin(PlaneOrigin: Vector): void;
+	SetPlaneConstraintNormal(PlaneNormal: Vector): void;
+	SetPlaneConstraintFromVectors(Forward: Vector,Up: Vector): void;
+	SetPlaneConstraintEnabled(bEnabled: boolean): void;
+	SetPlaneConstraintAxisSetting(NewAxisSetting: EPlaneConstraintAxisSetting): void;
+	PhysicsVolumeChanged(NewVolume: PhysicsVolume): void;
+	K2_MoveUpdatedComponent(Delta: Vector,NewRotation: Rotator,OutHit?: HitResult,bSweep?: boolean,bTeleport?: boolean): {OutHit: HitResult, $: boolean};
+	K2_GetModifiedMaxSpeed(): number;
+	K2_GetMaxSpeedModifier(): number;
+	IsExceedingMaxSpeed(MaxSpeed: number): boolean;
+	GetPlaneConstraintOrigin(): Vector;
+	GetPlaneConstraintNormal(): Vector;
+	GetPlaneConstraintAxisSetting(): EPlaneConstraintAxisSetting;
+	GetPhysicsVolume(): PhysicsVolume;
+	GetMaxSpeed(): number;
+	GetGravityZ(): number;
+	ConstrainNormalToPlane(Normal: Vector): Vector;
+	ConstrainLocationToPlane(Location: Vector): Vector;
+	ConstrainDirectionToPlane(Direction: Vector): Vector;
+	static C(Other: UObject | any): MovementComponent;
+}
+
+declare class MovementProperties { 
+	bCanCrouch: boolean;
+	bCanJump: boolean;
+	bCanWalk: boolean;
+	bCanSwim: boolean;
+	bCanFly: boolean;
+	clone() : MovementProperties;
+	static C(Other: UObject | any): MovementProperties;
+}
+
+declare class NavAgentProperties extends MovementProperties { 
+	AgentRadius: number;
+	AgentHeight: number;
+	AgentStepHeight: number;
+	NavWalkingSearchHeightScale: number;
+	PreferredNavData: SoftClassPath;
+	clone() : NavAgentProperties;
+	static C(Other: UObject | any): NavAgentProperties;
+}
+
+declare class NavMovementComponent extends MovementComponent { 
+	NavAgentProps: NavAgentProperties;
+	FixedPathBrakingDistance: number;
+	bUpdateNavAgentWithOwnersCollision: boolean;
+	bUseAccelerationForPaths: boolean;
+	bUseFixedBrakingDistanceForPaths: boolean;
+	MovementState: MovementProperties;
+	PathFollowingComp: UObject;
+	static Load(ResourceName: string): NavMovementComponent;
+	static Find(Outer: UObject, ResourceName: string): NavMovementComponent;
+	static GetDefaultObject(): NavMovementComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavMovementComponent;
+	StopMovementKeepPathing(): void;
+	StopActiveMovement(): void;
+	IsSwimming(): boolean;
+	IsMovingOnGround(): boolean;
+	IsFlying(): boolean;
+	IsFalling(): boolean;
+	IsCrouching(): boolean;
+	static C(Other: UObject | any): NavMovementComponent;
+}
+
+declare class PawnMovementComponent extends NavMovementComponent { 
+	PawnOwner: Pawn;
+	static Load(ResourceName: string): PawnMovementComponent;
+	static Find(Outer: UObject, ResourceName: string): PawnMovementComponent;
+	static GetDefaultObject(): PawnMovementComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnMovementComponent;
+	K2_GetInputVector(): Vector;
+	IsMoveInputIgnored(): boolean;
+	GetPendingInputVector(): Vector;
+	GetPawnOwner(): Pawn;
+	GetLastInputVector(): Vector;
+	ConsumeInputVector(): Vector;
+	AddInputVector(WorldVector: Vector,bForce: boolean): void;
+	static C(Other: UObject | any): PawnMovementComponent;
+}
+
+declare class NavAreaBase extends UObject { 
+	static Load(ResourceName: string): NavAreaBase;
+	static Find(Outer: UObject, ResourceName: string): NavAreaBase;
+	static GetDefaultObject(): NavAreaBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavAreaBase;
+	static C(Other: UObject | any): NavAreaBase;
+}
+
+declare class ShapeComponent extends PrimitiveComponent { 
+	ShapeBodySetup: BodySetup;
+	ShapeColor: Color;
+	bDrawOnlyIfSelected: boolean;
+	bShouldCollideWhenPlacing: boolean;
+	bDynamicObstacle: boolean;
+	AreaClass: UnrealEngineClass;
+	static Load(ResourceName: string): ShapeComponent;
+	static Find(Outer: UObject, ResourceName: string): ShapeComponent;
+	static GetDefaultObject(): ShapeComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ShapeComponent;
+	static C(Other: UObject | any): ShapeComponent;
+}
+
+declare class SphereComponent extends ShapeComponent { 
+	SphereRadius: number;
+	static Load(ResourceName: string): SphereComponent;
+	static Find(Outer: UObject, ResourceName: string): SphereComponent;
+	static GetDefaultObject(): SphereComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SphereComponent;
+	SetSphereRadius(InSphereRadius: number,bUpdateOverlaps: boolean): void;
+	GetUnscaledSphereRadius(): number;
+	GetShapeScale(): number;
+	GetScaledSphereRadius(): number;
+	static C(Other: UObject | any): SphereComponent;
+}
+
+declare class StaticMeshComponentLODInfo { 
+	clone() : StaticMeshComponentLODInfo;
+	static C(Other: UObject | any): StaticMeshComponentLODInfo;
+}
+
+declare class StreamingTextureBuildInfo { 
+	PackedRelativeBox: any;
+	TextureLevelIndex: number;
+	TexelFactor: number;
+	clone() : StreamingTextureBuildInfo;
+	static C(Other: UObject | any): StreamingTextureBuildInfo;
+}
+
+declare class LightmassPrimitiveSettings { 
+	bUseTwoSidedLighting: boolean;
+	bShadowIndirectOnly: boolean;
+	bUseEmissiveForStaticLighting: boolean;
+	bUseVertexNormalForHemisphereGather: boolean;
+	EmissiveLightFalloffExponent: number;
+	EmissiveLightExplicitInfluenceRadius: number;
+	EmissiveBoost: number;
+	DiffuseBoost: number;
+	FullyOccludedSamplesFraction: number;
+	clone() : LightmassPrimitiveSettings;
+	static C(Other: UObject | any): LightmassPrimitiveSettings;
+}
+
+declare class ProcMeshVertex { 
+	Position: Vector;
+	Normal: Vector;
+	Tangent: ProcMeshTangent;
+	Color: Color;
+	UV0: Vector2D;
+	UV1: Vector2D;
+	UV2: Vector2D;
+	UV3: Vector2D;
+	clone() : ProcMeshVertex;
+	static C(Other: UObject | any): ProcMeshVertex;
+}
+
+declare class ProcMeshSection { 
+	ProcVertexBuffer: ProcMeshVertex[];
+	ProcIndexBuffer: any[];
+	SectionLocalBox: Box;
+	bEnableCollision: boolean;
+	bSectionVisible: boolean;
+	clone() : ProcMeshSection;
+	static C(Other: UObject | any): ProcMeshSection;
+}
+
+declare type EProcMeshSliceCapOption = 'NoCap' | 'CreateNewSectionForCap' | 'UseLastSectionForCap' | 'EProcMeshSliceCapOption_MAX';
+declare var EProcMeshSliceCapOption : { NoCap:'NoCap',CreateNewSectionForCap:'CreateNewSectionForCap',UseLastSectionForCap:'UseLastSectionForCap',EProcMeshSliceCapOption_MAX:'EProcMeshSliceCapOption_MAX', };
+declare class ProceduralMeshComponent extends MeshComponent { 
+	bUseComplexAsSimpleCollision: boolean;
+	bUseAsyncCooking: boolean;
+	ProcMeshBodySetup: BodySetup;
+	ProcMeshSections: ProcMeshSection[];
+	CollisionConvexElems: KConvexElem[];
+	LocalBounds: BoxSphereBounds;
+	AsyncBodySetupQueue: BodySetup[];
+	static Load(ResourceName: string): ProceduralMeshComponent;
+	static Find(Outer: UObject, ResourceName: string): ProceduralMeshComponent;
+	static GetDefaultObject(): ProceduralMeshComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ProceduralMeshComponent;
+	UpdateMeshSection_LinearColor(SectionIndex: number,Vertices: Vector[],Normals: Vector[],UV0: Vector2D[],UV1: Vector2D[],UV2: Vector2D[],UV3: Vector2D[],VertexColors: LinearColor[],Tangents: ProcMeshTangent[]): void;
+	UpdateMeshSection(SectionIndex: number,Vertices: Vector[],Normals: Vector[],UV0: Vector2D[],VertexColors: Color[],Tangents: ProcMeshTangent[]): void;
+	SetMeshSectionVisible(SectionIndex: number,bNewVisibility: boolean): void;
+	IsMeshSectionVisible(SectionIndex: number): boolean;
+	GetNumSections(): number;
+	CreateMeshSection_LinearColor(SectionIndex: number,Vertices: Vector[],Triangles: number[],Normals: Vector[],UV0: Vector2D[],UV1: Vector2D[],UV2: Vector2D[],UV3: Vector2D[],VertexColors: LinearColor[],Tangents: ProcMeshTangent[],bCreateCollision: boolean): void;
+	CreateMeshSection(SectionIndex: number,Vertices: Vector[],Triangles: number[],Normals: Vector[],UV0: Vector2D[],VertexColors: Color[],Tangents: ProcMeshTangent[],bCreateCollision: boolean): void;
+	ClearMeshSection(SectionIndex: number): void;
+	ClearCollisionConvexMeshes(): void;
+	ClearAllMeshSections(): void;
+	AddCollisionConvexMesh(ConvexVerts: Vector[]): void;
+	static C(Other: UObject | any): ProceduralMeshComponent;
+	GetSectionFromProceduralMesh(SectionIndex: number,Vertices?: Vector[],Triangles?: number[],Normals?: Vector[],UVs?: Vector2D[],Tangents?: ProcMeshTangent[]): {Vertices: Vector[], Triangles: number[], Normals: Vector[], UVs: Vector2D[], Tangents: ProcMeshTangent[]};
+	SliceProceduralMesh(PlanePosition: Vector,PlaneNormal: Vector,bCreateOtherHalf: boolean,OutOtherHalfProcMesh?: ProceduralMeshComponent,CapOption?: EProcMeshSliceCapOption,CapMaterial?: MaterialInterface): {OutOtherHalfProcMesh: ProceduralMeshComponent};
+	static GetSectionFromProceduralMesh(InProcMesh: ProceduralMeshComponent,SectionIndex: number,Vertices?: Vector[],Triangles?: number[],Normals?: Vector[],UVs?: Vector2D[],Tangents?: ProcMeshTangent[]): {Vertices: Vector[], Triangles: number[], Normals: Vector[], UVs: Vector2D[], Tangents: ProcMeshTangent[]};
+	static SliceProceduralMesh(InProcMesh: ProceduralMeshComponent,PlanePosition: Vector,PlaneNormal: Vector,bCreateOtherHalf: boolean,OutOtherHalfProcMesh?: ProceduralMeshComponent,CapOption?: EProcMeshSliceCapOption,CapMaterial?: MaterialInterface): {OutOtherHalfProcMesh: ProceduralMeshComponent};
+}
+
+declare type EVertexPaintAxis = 'X' | 'Y' | 'Z' | 'EVertexPaintAxis_MAX';
+declare var EVertexPaintAxis : { X:'X',Y:'Y',Z:'Z',EVertexPaintAxis_MAX:'EVertexPaintAxis_MAX', };
+declare class StaticMeshComponent extends MeshComponent { 
+	ForcedLodModel: number;
+	PreviousLODLevel: number;
+	MinLOD: number;
+	SubDivisionStepSize: number;
+	StaticMesh: StaticMesh;
+	WireframeColorOverride: Color;
+	SelectedEditorSection: number;
+	SelectedEditorMaterial: number;
+	SectionIndexPreview: number;
+	MaterialIndexPreview: number;
+	StaticMeshImportVersion: number;
+	bOverrideWireframeColor: boolean;
+	bOverrideMinLOD: boolean;
+	bOverrideNavigationExport: boolean;
+	bForceNavigationObstacle: boolean;
+	bDisallowMeshPaintPerInstance: boolean;
+	bIgnoreInstanceForTextureStreaming: boolean;
+	bOverrideLightMapRes: boolean;
+	bCastDistanceFieldIndirectShadow: boolean;
+	bOverrideDistanceFieldSelfShadowBias: boolean;
+	bUseSubDivisions: boolean;
+	bUseDefaultCollision: boolean;
+	bCustomOverrideVertexColorPerLOD: boolean;
+	bDisplayVertexColors: boolean;
+	bReverseCulling: boolean;
+	OverriddenLightMapRes: number;
+	DistanceFieldIndirectShadowMinVisibility: number;
+	DistanceFieldSelfShadowBias: number;
+	StreamingDistanceMultiplier: number;
+	IrrelevantLights: Guid[];
+	LodData: StaticMeshComponentLODInfo[];
+	StreamingTextureData: StreamingTextureBuildInfo[];
+	StaticMeshDerivedDataKey: string;
+	MaterialStreamingRelativeBoxes: any[];
+	LightmassSettings: LightmassPrimitiveSettings;
+	static Load(ResourceName: string): StaticMeshComponent;
+	static Find(Outer: UObject, ResourceName: string): StaticMeshComponent;
+	static GetDefaultObject(): StaticMeshComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshComponent;
+	SetStaticMesh(NewMesh: StaticMesh): boolean;
+	SetReverseCulling(ReverseCulling: boolean): void;
+	SetForcedLodModel(NewForcedLodModel: number): void;
+	SetDistanceFieldSelfShadowBias(NewValue: number): void;
+	OnRep_StaticMesh(OldStaticMesh: StaticMesh): void;
+	GetLocalBounds(Min?: Vector,Max?: Vector): {Min: Vector, Max: Vector};
+	static C(Other: UObject | any): StaticMeshComponent;
+	CopyProceduralMeshFromStaticMeshComponent(LODIndex: number,ProcMeshComponent: ProceduralMeshComponent,bCreateCollision: boolean): void;
+	PaintVerticesLerpAlongAxis(StartColor: LinearColor,EndColor: LinearColor,Axis: EVertexPaintAxis,bConvertToSRGB: boolean): void;
+	PaintVerticesSingleColor(FillColor: LinearColor,bConvertToSRGB: boolean): void;
+	RemovePaintedVertices(): void;
+	static CopyProceduralMeshFromStaticMeshComponent(StaticMeshComponent: StaticMeshComponent,LODIndex: number,ProcMeshComponent: ProceduralMeshComponent,bCreateCollision: boolean): void;
+	static PaintVerticesLerpAlongAxis(StaticMeshComponent: StaticMeshComponent,StartColor: LinearColor,EndColor: LinearColor,Axis: EVertexPaintAxis,bConvertToSRGB: boolean): void;
+	static PaintVerticesSingleColor(StaticMeshComponent: StaticMeshComponent,FillColor: LinearColor,bConvertToSRGB: boolean): void;
+	static RemovePaintedVertices(StaticMeshComponent: StaticMeshComponent): void;
+}
+
+declare class DefaultPawn extends Pawn { 
+	BaseTurnRate: number;
+	BaseLookUpRate: number;
+	MovementComponent: PawnMovementComponent;
+	CollisionComponent: SphereComponent;
+	MeshComponent: StaticMeshComponent;
+	bAddDefaultMovementBindings: boolean;
+	static GetDefaultObject(): DefaultPawn;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DefaultPawn;
+	TurnAtRate(Rate: number): void;
+	MoveUp_World(Val: number): void;
+	MoveRight(Val: number): void;
+	MoveForward(Val: number): void;
+	LookUpAtRate(Rate: number): void;
+	static C(Other: UObject | any): DefaultPawn;
+}
+
+declare class SpectatorPawn extends DefaultPawn { 
+	static GetDefaultObject(): SpectatorPawn;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpectatorPawn;
+	static C(Other: UObject | any): SpectatorPawn;
+}
+
+declare type EControllerHand = 'Left' | 'Right' | 'AnyHand' | 'Pad' | 'ExternalCamera' | 'Gun' | 'Special_1' | 'Special_2' | 'Special_3' | 'Special_4' | 'Special_5' | 'Special_6' | 'Special_7' | 'Special_8' | 'Special_9' | 'Special_10' | 'Special_11' | 'ControllerHand_Count' | 'EControllerHand_MAX';
+declare var EControllerHand : { Left:'Left',Right:'Right',AnyHand:'AnyHand',Pad:'Pad',ExternalCamera:'ExternalCamera',Gun:'Gun',Special_1:'Special_1',Special_2:'Special_2',Special_3:'Special_3',Special_4:'Special_4',Special_5:'Special_5',Special_6:'Special_6',Special_7:'Special_7',Special_8:'Special_8',Special_9:'Special_9',Special_10:'Special_10',Special_11:'Special_11',ControllerHand_Count:'ControllerHand_Count',EControllerHand_MAX:'EControllerHand_MAX', };
+declare type EViewTargetBlendFunction = 'VTBlend_Linear' | 'VTBlend_Cubic' | 'VTBlend_EaseIn' | 'VTBlend_EaseOut' | 'VTBlend_EaseInOut' | 'VTBlend_MAX';
+declare var EViewTargetBlendFunction : { VTBlend_Linear:'VTBlend_Linear',VTBlend_Cubic:'VTBlend_Cubic',VTBlend_EaseIn:'VTBlend_EaseIn',VTBlend_EaseOut:'VTBlend_EaseOut',VTBlend_EaseInOut:'VTBlend_EaseInOut',VTBlend_MAX:'VTBlend_MAX', };
+declare class MovieSceneSignedObject extends UObject { 
+	Signature: Guid;
+	static Load(ResourceName: string): MovieSceneSignedObject;
+	static Find(Outer: UObject, ResourceName: string): MovieSceneSignedObject;
+	static GetDefaultObject(): MovieSceneSignedObject;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneSignedObject;
+	static C(Other: UObject | any): MovieSceneSignedObject;
+}
+
+declare class MovieSceneFrameRange { 
+	clone() : MovieSceneFrameRange;
+	static C(Other: UObject | any): MovieSceneFrameRange;
+}
+
+declare class MovieSceneEvaluationGroupLUTIndex { 
+	LUTOffset: number;
+	NumInitPtrs: number;
+	NumEvalPtrs: number;
+	clone() : MovieSceneEvaluationGroupLUTIndex;
+	static C(Other: UObject | any): MovieSceneEvaluationGroupLUTIndex;
+}
+
+declare class MovieSceneSequenceID { 
+	Value: any;
+	clone() : MovieSceneSequenceID;
+	static C(Other: UObject | any): MovieSceneSequenceID;
+}
+
+declare class MovieSceneTrackIdentifier { 
+	Value: any;
+	clone() : MovieSceneTrackIdentifier;
+	static C(Other: UObject | any): MovieSceneTrackIdentifier;
+}
+
+declare class MovieSceneEvaluationFieldTrackPtr { 
+	SequenceID: MovieSceneSequenceID;
+	TrackIdentifier: MovieSceneTrackIdentifier;
+	clone() : MovieSceneEvaluationFieldTrackPtr;
+	static C(Other: UObject | any): MovieSceneEvaluationFieldTrackPtr;
+}
+
+declare class MovieSceneSegmentIdentifier { 
+	IdentifierIndex: number;
+	clone() : MovieSceneSegmentIdentifier;
+	static C(Other: UObject | any): MovieSceneSegmentIdentifier;
+}
+
+declare class MovieSceneEvaluationFieldSegmentPtr extends MovieSceneEvaluationFieldTrackPtr { 
+	SegmentID: MovieSceneSegmentIdentifier;
+	clone() : MovieSceneEvaluationFieldSegmentPtr;
+	static C(Other: UObject | any): MovieSceneEvaluationFieldSegmentPtr;
+}
+
+declare class MovieSceneEvaluationGroup { 
+	LUTIndices: MovieSceneEvaluationGroupLUTIndex[];
+	SegmentPtrLUT: MovieSceneEvaluationFieldSegmentPtr[];
+	clone() : MovieSceneEvaluationGroup;
+	static C(Other: UObject | any): MovieSceneEvaluationGroup;
+}
+
+declare class MovieSceneEvaluationKey { 
+	SequenceID: MovieSceneSequenceID;
+	TrackIdentifier: MovieSceneTrackIdentifier;
+	SectionIndex: any;
+	clone() : MovieSceneEvaluationKey;
+	static C(Other: UObject | any): MovieSceneEvaluationKey;
+}
+
+declare class MovieSceneOrderedEvaluationKey { 
+	Key: MovieSceneEvaluationKey;
+	EvaluationIndex: any;
+	clone() : MovieSceneOrderedEvaluationKey;
+	static C(Other: UObject | any): MovieSceneOrderedEvaluationKey;
+}
+
+declare class MovieSceneEvaluationMetaData { 
+	ActiveSequences: MovieSceneSequenceID[];
+	ActiveEntities: MovieSceneOrderedEvaluationKey[];
+	SubTemplateSerialNumbers: any;
+	clone() : MovieSceneEvaluationMetaData;
+	static C(Other: UObject | any): MovieSceneEvaluationMetaData;
+}
+
+declare class MovieSceneEvaluationField { 
+	Signature: Guid;
+	Ranges: MovieSceneFrameRange[];
+	Groups: MovieSceneEvaluationGroup[];
+	MetaData: MovieSceneEvaluationMetaData[];
+	clone() : MovieSceneEvaluationField;
+	static C(Other: UObject | any): MovieSceneEvaluationField;
+}
+
+declare class MovieSceneSequenceHierarchy { 
+	SubSequences: any;
+	Hierarchy: any;
+	clone() : MovieSceneSequenceHierarchy;
+	static C(Other: UObject | any): MovieSceneSequenceHierarchy;
+}
+
+declare class MovieSceneEvaluationTemplateSerialNumber { 
+	Value: any;
+	clone() : MovieSceneEvaluationTemplateSerialNumber;
+	static C(Other: UObject | any): MovieSceneEvaluationTemplateSerialNumber;
+}
+
+declare class MovieSceneTemplateGenerationLedger { 
+	LastTrackIdentifier: MovieSceneTrackIdentifier;
+	TrackSignatureToTrackIdentifier: any;
+	SubSectionRanges: any;
+	clone() : MovieSceneTemplateGenerationLedger;
+	static C(Other: UObject | any): MovieSceneTemplateGenerationLedger;
+}
+
+declare class MovieSceneTrackFieldData { 
+	clone() : MovieSceneTrackFieldData;
+	static C(Other: UObject | any): MovieSceneTrackFieldData;
+}
+
+declare class MovieSceneSubSectionFieldData { 
+	clone() : MovieSceneSubSectionFieldData;
+	static C(Other: UObject | any): MovieSceneSubSectionFieldData;
+}
+
+declare class MovieSceneEvaluationTemplate { 
+	Tracks: any;
+	EvaluationField: MovieSceneEvaluationField;
+	Hierarchy: MovieSceneSequenceHierarchy;
+	SequenceSignature: Guid;
+	TemplateSerialNumber: MovieSceneEvaluationTemplateSerialNumber;
+	TemplateLedger: MovieSceneTemplateGenerationLedger;
+	TrackFieldData: MovieSceneTrackFieldData;
+	SubSectionFieldData: MovieSceneSubSectionFieldData;
+	clone() : MovieSceneEvaluationTemplate;
+	static C(Other: UObject | any): MovieSceneEvaluationTemplate;
+}
+
+declare type EMovieSceneCompletionMode = 'KeepState' | 'RestoreState' | 'ProjectDefault' | 'EMovieSceneCompletionMode_MAX';
+declare var EMovieSceneCompletionMode : { KeepState:'KeepState',RestoreState:'RestoreState',ProjectDefault:'ProjectDefault',EMovieSceneCompletionMode_MAX:'EMovieSceneCompletionMode_MAX', };
+declare class MovieSceneSequence extends MovieSceneSignedObject { 
+	PrecompiledEvaluationTemplate: MovieSceneEvaluationTemplate;
+	DefaultCompletionMode: EMovieSceneCompletionMode;
+	bParentContextsAreSignificant: boolean;
+	static Load(ResourceName: string): MovieSceneSequence;
+	static Find(Outer: UObject, ResourceName: string): MovieSceneSequence;
+	static GetDefaultObject(): MovieSceneSequence;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneSequence;
+	static C(Other: UObject | any): MovieSceneSequence;
+}
+
+declare class Timecode { 
+	Hours: number;
+	Minutes: number;
+	Seconds: number;
+	Frames: number;
+	bDropFrameFormat: boolean;
+	clone() : Timecode;
+	static C(Other: UObject | any): Timecode;
+	Conv_TimecodeToString(bForceSignDisplay: boolean): string;
+	static Conv_TimecodeToString(InTimecode: Timecode,bForceSignDisplay: boolean): string;
+	static GetTimecode(): Timecode;
+}
+
+declare class FrameRate { 
+	Numerator: number;
+	Denominator: number;
+	clone() : FrameRate;
+	static C(Other: UObject | any): FrameRate;
+	BreakFrameRate(Numerator?: number,Denominator?: number): {Numerator: number, Denominator: number};
+	Conv_FrameRateToSeconds(): number;
+	IsValid_Framerate(): boolean;
+	IsValid_MultipleOf(OtherFramerate: FrameRate): boolean;
+	static BreakFrameRate(InFrameRate: FrameRate,Numerator?: number,Denominator?: number): {Numerator: number, Denominator: number};
+	static Conv_FrameRateToSeconds(InFrameRate: FrameRate): number;
+	static IsValid_Framerate(InFrameRate: FrameRate): boolean;
+	static IsValid_MultipleOf(InFrameRate: FrameRate,OtherFramerate: FrameRate): boolean;
+	static MakeFrameRate(Numerator: number,Denominator: number): FrameRate;
+}
+
+declare class FrameTime { 
+	FrameNumber: FrameNumber;
+	SubFrame: number;
+	clone() : FrameTime;
+	static C(Other: UObject | any): FrameTime;
+	SnapFrameTimeToRate(SourceRate: FrameRate,SnapToRate: FrameRate): FrameTime;
+	TransformTime(SourceRate: FrameRate,DestinationRate: FrameRate): FrameTime;
+	static SnapFrameTimeToRate(SourceTime: FrameTime,SourceRate: FrameRate,SnapToRate: FrameRate): FrameTime;
+	static TransformTime(SourceTime: FrameTime,SourceRate: FrameRate,DestinationRate: FrameRate): FrameTime;
+	static Multiply_SecondsFrameRate(TimeInSeconds: number,FrameRate: FrameRate): FrameTime;
+}
+
+declare class QualifiedFrameTime { 
+	Time: FrameTime;
+	Rate: FrameRate;
+	clone() : QualifiedFrameTime;
+	static C(Other: UObject | any): QualifiedFrameTime;
+	BreakQualifiedFrameTime(Frame?: FrameNumber,FrameRate?: FrameRate,SubFrame?: number): {Frame: FrameNumber, FrameRate: FrameRate, SubFrame: number};
+	Conv_QualifiedFrameTimeToSeconds(): number;
+	static BreakQualifiedFrameTime(InFrameTime: QualifiedFrameTime,Frame?: FrameNumber,FrameRate?: FrameRate,SubFrame?: number): {Frame: FrameNumber, FrameRate: FrameRate, SubFrame: number};
+	static Conv_QualifiedFrameTimeToSeconds(InFrameTime: QualifiedFrameTime): number;
+}
+
+declare class FrameNumber { 
+	Value: number;
+	clone() : FrameNumber;
+	static C(Other: UObject | any): FrameNumber;
+	MakeQualifiedFrameTime(FrameRate: FrameRate,SubFrame: number): QualifiedFrameTime;
+	Add_FrameNumberFrameNumber(B: FrameNumber): FrameNumber;
+	Add_FrameNumberInteger(B: number): FrameNumber;
+	Conv_FrameNumberToInteger(): number;
+	Divide_FrameNumberInteger(B: number): FrameNumber;
+	Multiply_FrameNumberInteger(B: number): FrameNumber;
+	Subtract_FrameNumberFrameNumber(B: FrameNumber): FrameNumber;
+	Subtract_FrameNumberInteger(B: number): FrameNumber;
+	static MakeQualifiedFrameTime(Frame: FrameNumber,FrameRate: FrameRate,SubFrame: number): QualifiedFrameTime;
+	static Add_FrameNumberFrameNumber(A: FrameNumber,B: FrameNumber): FrameNumber;
+	static Add_FrameNumberInteger(A: FrameNumber,B: number): FrameNumber;
+	static Conv_FrameNumberToInteger(InFrameNumber: FrameNumber): number;
+	static Divide_FrameNumberInteger(A: FrameNumber,B: number): FrameNumber;
+	static Multiply_FrameNumberInteger(A: FrameNumber,B: number): FrameNumber;
+	static Subtract_FrameNumberFrameNumber(A: FrameNumber,B: FrameNumber): FrameNumber;
+	static Subtract_FrameNumberInteger(A: FrameNumber,B: number): FrameNumber;
+}
+
+declare class MovieSceneTimecodeSource { 
+	Timecode: Timecode;
+	DeltaFrame: FrameNumber;
+	clone() : MovieSceneTimecodeSource;
+	static C(Other: UObject | any): MovieSceneTimecodeSource;
+}
+
+declare type ESpawnOwnership = 'InnerSequence' | 'MasterSequence' | 'External' | 'ESpawnOwnership_MAX';
+declare var ESpawnOwnership : { InnerSequence:'InnerSequence',MasterSequence:'MasterSequence',External:'External',ESpawnOwnership_MAX:'ESpawnOwnership_MAX', };
+declare class MovieSceneSpawnable { 
+	SpawnTransform: Transform;
+	Tags: string[];
+	bContinuouslyRespawn: boolean;
+	Guid: Guid;
+	Name: string;
+	ObjectTemplate: UObject;
+	ChildPossessables: Guid[];
+	Ownership: ESpawnOwnership;
+	GeneratedClass: UnrealEngineClass;
+	LevelName: string;
+	clone() : MovieSceneSpawnable;
+	static C(Other: UObject | any): MovieSceneSpawnable;
+}
+
+declare class MovieScenePossessable { 
+	Tags: string[];
+	Guid: Guid;
+	Name: string;
+	PossessedObjectClass: UnrealEngineClass;
+	ParentGuid: Guid;
+	clone() : MovieScenePossessable;
+	static C(Other: UObject | any): MovieScenePossessable;
+}
+
+declare class MovieSceneTrackEvalOptions { 
+	bCanEvaluateNearestSection: boolean;
+	bEvalNearestSection: boolean;
+	bEvaluateInPreroll: boolean;
+	bEvaluateInPostroll: boolean;
+	bEvaluateNearestSection: boolean;
+	clone() : MovieSceneTrackEvalOptions;
+	static C(Other: UObject | any): MovieSceneTrackEvalOptions;
+}
+
+declare class MovieSceneTrackDisplayOptions { 
+	bShowVerticalFrames: boolean;
+	clone() : MovieSceneTrackDisplayOptions;
+	static C(Other: UObject | any): MovieSceneTrackDisplayOptions;
+}
+
+declare class MovieSceneTrack extends MovieSceneSignedObject { 
+	EvalOptions: MovieSceneTrackEvalOptions;
+	DisplayOptions: MovieSceneTrackDisplayOptions;
+	TrackTint: Color;
+	SortingOrder: number;
+	bSupportsDefaultSections: boolean;
+	static Load(ResourceName: string): MovieSceneTrack;
+	static Find(Outer: UObject, ResourceName: string): MovieSceneTrack;
+	static GetDefaultObject(): MovieSceneTrack;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneTrack;
+	static C(Other: UObject | any): MovieSceneTrack;
+}
+
+declare class MovieSceneBinding { 
+	ObjectGuid: Guid;
+	BindingName: string;
+	Tracks: MovieSceneTrack[];
+	SortingOrder: number;
+	clone() : MovieSceneBinding;
+	static C(Other: UObject | any): MovieSceneBinding;
+}
+
+declare type EMovieSceneEvaluationType = 'FrameLocked' | 'WithSubFrames' | 'EMovieSceneEvaluationType_MAX';
+declare var EMovieSceneEvaluationType : { FrameLocked:'FrameLocked',WithSubFrames:'WithSubFrames',EMovieSceneEvaluationType_MAX:'EMovieSceneEvaluationType_MAX', };
+declare type EUpdateClockSource = 'Tick' | 'Platform' | 'Audio' | 'Timecode' | 'EUpdateClockSource_MAX';
+declare var EUpdateClockSource : { Tick:'Tick',Platform:'Platform',Audio:'Audio',Timecode:'Timecode',EUpdateClockSource_MAX:'EUpdateClockSource_MAX', };
+declare class MovieSceneMarkedFrame { 
+	FrameNumber: FrameNumber;
+	Label: string;
+	Color: LinearColor;
+	clone() : MovieSceneMarkedFrame;
+	static C(Other: UObject | any): MovieSceneMarkedFrame;
+}
+
+declare class FloatRangeBound { 
+	Type: ERangeBoundTypes;
+	Value: number;
+	clone() : FloatRangeBound;
+	static C(Other: UObject | any): FloatRangeBound;
+}
+
+declare class FloatRange { 
+	LowerBound: FloatRangeBound;
+	UpperBound: FloatRangeBound;
+	clone() : FloatRange;
+	static C(Other: UObject | any): FloatRange;
+}
+
+declare class MovieSceneEditorData { 
+	ExpansionStates: any;
+	ViewStart: any;
+	ViewEnd: any;
+	WorkStart: any;
+	WorkEnd: any;
+	MarkedFrames: any;
+	WorkingRange: FloatRange;
+	ViewRange: FloatRange;
+	clone() : MovieSceneEditorData;
+	static C(Other: UObject | any): MovieSceneEditorData;
+}
+
+declare class MovieSceneFolder extends UObject { 
+	FolderName: string;
+	ChildFolders: MovieSceneFolder[];
+	ChildMasterTracks: MovieSceneTrack[];
+	ChildObjectBindingStrings: string[];
+	FolderColor: Color;
+	SortingOrder: number;
+	static Load(ResourceName: string): MovieSceneFolder;
+	static Find(Outer: UObject, ResourceName: string): MovieSceneFolder;
+	static GetDefaultObject(): MovieSceneFolder;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneFolder;
+	static C(Other: UObject | any): MovieSceneFolder;
+}
+
+declare class MovieScene extends MovieSceneSignedObject { 
+	TimecodeSource: MovieSceneTimecodeSource;
+	Spawnables: MovieSceneSpawnable[];
+	Possessables: MovieScenePossessable[];
+	ObjectBindings: MovieSceneBinding[];
+	MasterTracks: MovieSceneTrack[];
+	CameraCutTrack: MovieSceneTrack;
+	SelectionRange: MovieSceneFrameRange;
+	PlaybackRange: MovieSceneFrameRange;
+	TickResolution: FrameRate;
+	DisplayRate: FrameRate;
+	EvaluationType: EMovieSceneEvaluationType;
+	ClockSource: EUpdateClockSource;
+	MarkedFrames: MovieSceneMarkedFrame[];
+	bReadOnly: boolean;
+	bPlaybackRangeLocked: boolean;
+	ObjectsToDisplayNames: any;
+	ObjectsToLabels: any;
+	EditorData: MovieSceneEditorData;
+	RootFolders: MovieSceneFolder[];
+	InTime: number;
+	OutTime: number;
+	StartTime: number;
+	EndTime: number;
+	bForceFixedFrameIntervalPlayback: boolean;
+	FixedFrameInterval: number;
+	static Load(ResourceName: string): MovieScene;
+	static Find(Outer: UObject, ResourceName: string): MovieScene;
+	static GetDefaultObject(): MovieScene;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScene;
+	static C(Other: UObject | any): MovieScene;
+}
+
+declare class WidgetAnimationBinding { 
+	WidgetName: string;
+	SlotWidgetName: string;
+	AnimationGuid: Guid;
+	bIsRootWidget: boolean;
+	clone() : WidgetAnimationBinding;
+	static C(Other: UObject | any): WidgetAnimationBinding;
+}
+
+declare class WidgetAnimation extends MovieSceneSequence { 
+	OnAnimationStarted: UnrealEngineMulticastDelegate<() => void>;
+	OnAnimationFinished: UnrealEngineMulticastDelegate<() => void>;
+	MovieScene: MovieScene;
+	AnimationBindings: WidgetAnimationBinding[];
+	bLegacyFinishOnStop: boolean;
+	DisplayLabel: string;
+	static Load(ResourceName: string): WidgetAnimation;
+	static Find(Outer: UObject, ResourceName: string): WidgetAnimation;
+	static GetDefaultObject(): WidgetAnimation;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetAnimation;
+	UnbindAllFromAnimationStarted(Widget: UserWidget): void;
+	UnbindAllFromAnimationFinished(Widget: UserWidget): void;
+	GetStartTime(): number;
+	GetEndTime(): number;
+	static C(Other: UObject | any): WidgetAnimation;
+}
+
+declare class UMGSequencePlayer extends UObject { 
+	Animation: WidgetAnimation;
+	static Load(ResourceName: string): UMGSequencePlayer;
+	static Find(Outer: UObject, ResourceName: string): UMGSequencePlayer;
+	static GetDefaultObject(): UMGSequencePlayer;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UMGSequencePlayer;
+	SetUserTag(InUserTag: string): void;
+	GetUserTag(): string;
+	static C(Other: UObject | any): UMGSequencePlayer;
+}
+
+declare class NamedSlotBinding { 
+	Name: string;
+	Content: Widget;
+	clone() : NamedSlotBinding;
+	static C(Other: UObject | any): NamedSlotBinding;
+}
+
+declare class WidgetTree extends UObject { 
+	RootWidget: Widget;
+	AllWidgets: Widget[];
+	static Load(ResourceName: string): WidgetTree;
+	static Find(Outer: UObject, ResourceName: string): WidgetTree;
+	static GetDefaultObject(): WidgetTree;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetTree;
+	static C(Other: UObject | any): WidgetTree;
+}
+
+declare type EDesignPreviewSizeMode = 'FillScreen' | 'Custom' | 'CustomOnScreen' | 'Desired' | 'DesiredOnScreen' | 'EDesignPreviewSizeMode_MAX';
+declare var EDesignPreviewSizeMode : { FillScreen:'FillScreen',Custom:'Custom',CustomOnScreen:'CustomOnScreen',Desired:'Desired',DesiredOnScreen:'DesiredOnScreen',EDesignPreviewSizeMode_MAX:'EDesignPreviewSizeMode_MAX', };
+declare type EWidgetTickFrequency = 'Never' | 'Auto' | 'EWidgetTickFrequency_MAX';
+declare var EWidgetTickFrequency : { Never:'Never',Auto:'Auto',EWidgetTickFrequency_MAX:'EWidgetTickFrequency_MAX', };
+declare type EWidgetAnimationEvent = 'Started' | 'Finished' | 'EWidgetAnimationEvent_MAX';
+declare var EWidgetAnimationEvent : { Started:'Started',Finished:'Finished',EWidgetAnimationEvent_MAX:'EWidgetAnimationEvent_MAX', };
+declare class AnimationEventBinding { 
+	Animation: WidgetAnimation;
+	delegate: UnrealEngineDelegate<() => void>;
+	AnimationEvent: EWidgetAnimationEvent;
+	UserTag: string;
+	clone() : AnimationEventBinding;
+	static C(Other: UObject | any): AnimationEventBinding;
+}
+
+declare class Geometry { 
+	clone() : Geometry;
+	static C(Other: UObject | any): Geometry;
+	CenterOf(): Vector2D;
+	FindClosestPointOnGeom(TestPoint: Vector2D): Vector2D;
+	AbsoluteToLocal(AbsoluteCoordinate: Vector2D): Vector2D;
+	GetAbsoluteSize(): Vector2D;
+	GetLocalSize(): Vector2D;
+	IsUnderLocation(AbsoluteCoordinate: Vector2D): boolean;
+	LocalToAbsolute(LocalCoordinate: Vector2D): Vector2D;
+	TransformScalarAbsoluteToLocal(AbsoluteScalar: number): number;
+	TransformScalarLocalToAbsolute(LocalScalar: number): number;
+	TransformVectorAbsoluteToLocal(AbsoluteVector: Vector2D): Vector2D;
+	TransformVectorLocalToAbsolute(LocalVector: Vector2D): Vector2D;
+	static CenterOf(Geom: Geometry): Vector2D;
+	static FindClosestPointOnGeom(Geom: Geometry,TestPoint: Vector2D): Vector2D;
+	static AbsoluteToLocal(Geometry: Geometry,AbsoluteCoordinate: Vector2D): Vector2D;
+	static GetAbsoluteSize(Geometry: Geometry): Vector2D;
+	static GetLocalSize(Geometry: Geometry): Vector2D;
+	static IsUnderLocation(Geometry: Geometry,AbsoluteCoordinate: Vector2D): boolean;
+	static LocalToAbsolute(Geometry: Geometry,LocalCoordinate: Vector2D): Vector2D;
+	static TransformScalarAbsoluteToLocal(Geometry: Geometry,AbsoluteScalar: number): number;
+	static TransformScalarLocalToAbsolute(Geometry: Geometry,LocalScalar: number): number;
+	static TransformVectorAbsoluteToLocal(Geometry: Geometry,AbsoluteVector: Vector2D): Vector2D;
+	static TransformVectorLocalToAbsolute(Geometry: Geometry,LocalVector: Vector2D): Vector2D;
+}
+
+declare type EInputEvent = 'IE_Pressed' | 'IE_Released' | 'IE_Repeat' | 'IE_DoubleClick' | 'IE_Axis' | 'IE_MAX';
+declare var EInputEvent : { IE_Pressed:'IE_Pressed',IE_Released:'IE_Released',IE_Repeat:'IE_Repeat',IE_DoubleClick:'IE_DoubleClick',IE_Axis:'IE_Axis',IE_MAX:'IE_MAX', };
+declare class Anchors { 
+	Minimum: Vector2D;
+	Maximum: Vector2D;
+	clone() : Anchors;
+	static C(Other: UObject | any): Anchors;
+}
+
+declare type EAudioOutputTarget = 'Speaker' | 'Controller' | 'ControllerFallbackToSpeaker' | 'EAudioOutputTarget_MAX';
+declare var EAudioOutputTarget : { Speaker:'Speaker',Controller:'Controller',ControllerFallbackToSpeaker:'ControllerFallbackToSpeaker',EAudioOutputTarget_MAX:'EAudioOutputTarget_MAX', };
+declare class SoundClassProperties { 
+	Volume: number;
+	Pitch: number;
+	StereoBleed: number;
+	LFEBleed: number;
+	VoiceCenterChannelVolume: number;
+	RadioFilterVolume: number;
+	RadioFilterVolumeThreshold: number;
+	bApplyEffects: boolean;
+	bAlwaysPlay: boolean;
+	bIsUISound: boolean;
+	bIsMusic: boolean;
+	bReverb: boolean;
+	Default2DReverbSendAmount: number;
+	bCenterChannelOnly: boolean;
+	bApplyAmbientVolumes: boolean;
+	OutputTarget: EAudioOutputTarget;
+	clone() : SoundClassProperties;
+	static C(Other: UObject | any): SoundClassProperties;
+}
+
+declare class AudioEQEffect { 
+	FrequencyCenter0: number;
+	Gain0: number;
+	Bandwidth0: number;
+	FrequencyCenter1: number;
+	Gain1: number;
+	Bandwidth1: number;
+	FrequencyCenter2: number;
+	Gain2: number;
+	Bandwidth2: number;
+	FrequencyCenter3: number;
+	Gain3: number;
+	Bandwidth3: number;
+	clone() : AudioEQEffect;
+	static C(Other: UObject | any): AudioEQEffect;
+}
+
+declare class SoundClassAdjuster { 
+	SoundClassObject: SoundClass;
+	VolumeAdjuster: number;
+	PitchAdjuster: number;
+	bApplyToChildren: boolean;
+	VoiceCenterChannelVolumeAdjuster: number;
+	clone() : SoundClassAdjuster;
+	static C(Other: UObject | any): SoundClassAdjuster;
+}
+
+declare class SoundMix extends UObject { 
+	bApplyEQ: boolean;
+	EQPriority: number;
+	EQSettings: AudioEQEffect;
+	SoundClassEffects: SoundClassAdjuster[];
+	InitialDelay: number;
+	FadeInTime: number;
+	Duration: number;
+	FadeOutTime: number;
+	bChanged: boolean;
+	static Load(ResourceName: string): SoundMix;
+	static Find(Outer: UObject, ResourceName: string): SoundMix;
+	static GetDefaultObject(): SoundMix;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundMix;
+	static C(Other: UObject | any): SoundMix;
+}
+
+declare class PassiveSoundMixModifier { 
+	SoundMix: SoundMix;
+	MinVolumeThreshold: number;
+	MaxVolumeThreshold: number;
+	clone() : PassiveSoundMixModifier;
+	static C(Other: UObject | any): PassiveSoundMixModifier;
+}
+
+declare class SoundClass extends UObject { 
+	Properties: SoundClassProperties;
+	ChildClasses: SoundClass[];
+	PassiveSoundMixModifiers: PassiveSoundMixModifier[];
+	ParentClass: SoundClass;
+	static Load(ResourceName: string): SoundClass;
+	static Find(Outer: UObject, ResourceName: string): SoundClass;
+	static GetDefaultObject(): SoundClass;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundClass;
+	static C(Other: UObject | any): SoundClass;
+}
+
+declare type EVirtualizationMode = 'Disabled' | 'PlayWhenSilent' | 'Restart' | 'EVirtualizationMode_MAX';
+declare var EVirtualizationMode : { Disabled:'Disabled',PlayWhenSilent:'PlayWhenSilent',Restart:'Restart',EVirtualizationMode_MAX:'EVirtualizationMode_MAX', };
+declare type EMaxConcurrentResolutionRule = 'PreventNew' | 'StopOldest' | 'StopFarthestThenPreventNew' | 'StopFarthestThenOldest' | 'StopLowestPriority' | 'StopQuietest' | 'StopLowestPriorityThenPreventNew' | 'EMaxConcurrentResolutionRule_MAX';
+declare var EMaxConcurrentResolutionRule : { PreventNew:'PreventNew',StopOldest:'StopOldest',StopFarthestThenPreventNew:'StopFarthestThenPreventNew',StopFarthestThenOldest:'StopFarthestThenOldest',StopLowestPriority:'StopLowestPriority',StopQuietest:'StopQuietest',StopLowestPriorityThenPreventNew:'StopLowestPriorityThenPreventNew',EMaxConcurrentResolutionRule_MAX:'EMaxConcurrentResolutionRule_MAX', };
+declare class SoundConcurrencySettings { 
+	MaxCount: number;
+	bLimitToOwner: boolean;
+	ResolutionRule: EMaxConcurrentResolutionRule;
+	VolumeScale: number;
+	VolumeScaleAttackTime: number;
+	bVolumeScaleCanRelease: boolean;
+	VolumeScaleReleaseTime: number;
+	VoiceStealReleaseTime: number;
+	clone() : SoundConcurrencySettings;
+	static C(Other: UObject | any): SoundConcurrencySettings;
+}
+
+declare class SoundConcurrency extends UObject { 
+	Concurrency: SoundConcurrencySettings;
+	static Load(ResourceName: string): SoundConcurrency;
+	static Find(Outer: UObject, ResourceName: string): SoundConcurrency;
+	static GetDefaultObject(): SoundConcurrency;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundConcurrency;
+	static C(Other: UObject | any): SoundConcurrency;
+}
+
+declare type ESoundSpatializationAlgorithm = 'SPATIALIZATION_Default' | 'SPATIALIZATION_HRTF' | 'SPATIALIZATION_MAX';
+declare var ESoundSpatializationAlgorithm : { SPATIALIZATION_Default:'SPATIALIZATION_Default',SPATIALIZATION_HRTF:'SPATIALIZATION_HRTF',SPATIALIZATION_MAX:'SPATIALIZATION_MAX', };
+declare type EAirAbsorptionMethod = 'Linear' | 'CustomCurve' | 'EAirAbsorptionMethod_MAX';
+declare var EAirAbsorptionMethod : { Linear:'Linear',CustomCurve:'CustomCurve',EAirAbsorptionMethod_MAX:'EAirAbsorptionMethod_MAX', };
+declare type EReverbSendMethod = 'Linear' | 'CustomCurve' | 'Manual' | 'EReverbSendMethod_MAX';
+declare var EReverbSendMethod : { Linear:'Linear',CustomCurve:'CustomCurve',Manual:'Manual',EReverbSendMethod_MAX:'EReverbSendMethod_MAX', };
+declare type ESoundDistanceCalc = 'SOUNDDISTANCE_Normal' | 'SOUNDDISTANCE_InfiniteXYPlane' | 'SOUNDDISTANCE_InfiniteXZPlane' | 'SOUNDDISTANCE_InfiniteYZPlane' | 'SOUNDDISTANCE_MAX';
+declare var ESoundDistanceCalc : { SOUNDDISTANCE_Normal:'SOUNDDISTANCE_Normal',SOUNDDISTANCE_InfiniteXYPlane:'SOUNDDISTANCE_InfiniteXYPlane',SOUNDDISTANCE_InfiniteXZPlane:'SOUNDDISTANCE_InfiniteXZPlane',SOUNDDISTANCE_InfiniteYZPlane:'SOUNDDISTANCE_InfiniteYZPlane',SOUNDDISTANCE_MAX:'SOUNDDISTANCE_MAX', };
+declare class SpatializationPluginSourceSettingsBase extends UObject { 
+	static Load(ResourceName: string): SpatializationPluginSourceSettingsBase;
+	static Find(Outer: UObject, ResourceName: string): SpatializationPluginSourceSettingsBase;
+	static GetDefaultObject(): SpatializationPluginSourceSettingsBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpatializationPluginSourceSettingsBase;
+	static C(Other: UObject | any): SpatializationPluginSourceSettingsBase;
+}
+
+declare class OcclusionPluginSourceSettingsBase extends UObject { 
+	static Load(ResourceName: string): OcclusionPluginSourceSettingsBase;
+	static Find(Outer: UObject, ResourceName: string): OcclusionPluginSourceSettingsBase;
+	static GetDefaultObject(): OcclusionPluginSourceSettingsBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OcclusionPluginSourceSettingsBase;
+	static C(Other: UObject | any): OcclusionPluginSourceSettingsBase;
+}
+
+declare class ReverbPluginSourceSettingsBase extends UObject { 
+	static Load(ResourceName: string): ReverbPluginSourceSettingsBase;
+	static Find(Outer: UObject, ResourceName: string): ReverbPluginSourceSettingsBase;
+	static GetDefaultObject(): ReverbPluginSourceSettingsBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReverbPluginSourceSettingsBase;
+	static C(Other: UObject | any): ReverbPluginSourceSettingsBase;
+}
+
+declare class SoundAttenuationPluginSettings { 
+	SpatializationPluginSettingsArray: SpatializationPluginSourceSettingsBase[];
+	OcclusionPluginSettingsArray: OcclusionPluginSourceSettingsBase[];
+	ReverbPluginSettingsArray: ReverbPluginSourceSettingsBase[];
+	clone() : SoundAttenuationPluginSettings;
+	static C(Other: UObject | any): SoundAttenuationPluginSettings;
+}
+
+declare class SoundAttenuationSettings extends BaseAttenuationSettings { 
+	bAttenuate: boolean;
+	bSpatialize: boolean;
+	bAttenuateWithLPF: boolean;
+	bEnableListenerFocus: boolean;
+	bEnableFocusInterpolation: boolean;
+	bEnableOcclusion: boolean;
+	bUseComplexCollisionForOcclusion: boolean;
+	bEnableReverbSend: boolean;
+	bApplyNormalizationToStereoSounds: boolean;
+	bEnableLogFrequencyScaling: boolean;
+	SpatializationAlgorithm: ESoundSpatializationAlgorithm;
+	AbsorptionMethod: EAirAbsorptionMethod;
+	OcclusionTraceChannel: ECollisionChannel;
+	ReverbSendMethod: EReverbSendMethod;
+	DistanceType: ESoundDistanceCalc;
+	OmniRadius: number;
+	StereoSpread: number;
+	SpatializationPluginSettings: SpatializationPluginSourceSettingsBase;
+	RadiusMin: number;
+	RadiusMax: number;
+	LPFRadiusMin: number;
+	LPFRadiusMax: number;
+	CustomLowpassAirAbsorptionCurve: RuntimeFloatCurve;
+	CustomHighpassAirAbsorptionCurve: RuntimeFloatCurve;
+	LPFFrequencyAtMin: number;
+	LPFFrequencyAtMax: number;
+	HPFFrequencyAtMin: number;
+	HPFFrequencyAtMax: number;
+	FocusAzimuth: number;
+	NonFocusAzimuth: number;
+	FocusDistanceScale: number;
+	NonFocusDistanceScale: number;
+	FocusPriorityScale: number;
+	NonFocusPriorityScale: number;
+	FocusVolumeAttenuation: number;
+	NonFocusVolumeAttenuation: number;
+	FocusAttackInterpSpeed: number;
+	FocusReleaseInterpSpeed: number;
+	OcclusionLowPassFilterFrequency: number;
+	OcclusionVolumeAttenuation: number;
+	OcclusionInterpolationTime: number;
+	OcclusionPluginSettings: OcclusionPluginSourceSettingsBase;
+	ReverbPluginSettings: ReverbPluginSourceSettingsBase;
+	ReverbWetLevelMin: number;
+	ReverbWetLevelMax: number;
+	ReverbDistanceMin: number;
+	ReverbDistanceMax: number;
+	ManualReverbSendLevel: number;
+	CustomReverbSendCurve: RuntimeFloatCurve;
+	PluginSettings: SoundAttenuationPluginSettings;
+	clone() : SoundAttenuationSettings;
+	static C(Other: UObject | any): SoundAttenuationSettings;
+}
+
+declare class SoundAttenuation extends UObject { 
+	Attenuation: SoundAttenuationSettings;
+	static Load(ResourceName: string): SoundAttenuation;
+	static Find(Outer: UObject, ResourceName: string): SoundAttenuation;
+	static GetDefaultObject(): SoundAttenuation;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundAttenuation;
+	static C(Other: UObject | any): SoundAttenuation;
+}
+
+declare class SoundModulationPluginSourceSettingsBase extends UObject { 
+	static Load(ResourceName: string): SoundModulationPluginSourceSettingsBase;
+	static Find(Outer: UObject, ResourceName: string): SoundModulationPluginSourceSettingsBase;
+	static GetDefaultObject(): SoundModulationPluginSourceSettingsBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundModulationPluginSourceSettingsBase;
+	static C(Other: UObject | any): SoundModulationPluginSourceSettingsBase;
+}
+
+declare class SoundModulation { 
+	Settings: SoundModulationPluginSourceSettingsBase[];
+	clone() : SoundModulation;
+	static C(Other: UObject | any): SoundModulation;
+}
+
+declare type ESubmixChannelFormat = 'Device' | 'Stereo' | 'Quad' | 'FiveDotOne' | 'SevenDotOne' | 'Ambisonics' | 'Count' | 'ESubmixChannelFormat_MAX';
+declare var ESubmixChannelFormat : { Device:'Device',Stereo:'Stereo',Quad:'Quad',FiveDotOne:'FiveDotOne',SevenDotOne:'SevenDotOne',Ambisonics:'Ambisonics',Count:'Count',ESubmixChannelFormat_MAX:'ESubmixChannelFormat_MAX', };
+declare class SoundEffectPreset extends UObject { 
+	static Load(ResourceName: string): SoundEffectPreset;
+	static Find(Outer: UObject, ResourceName: string): SoundEffectPreset;
+	static GetDefaultObject(): SoundEffectPreset;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundEffectPreset;
+	static C(Other: UObject | any): SoundEffectPreset;
+}
+
+declare class SoundEffectSubmixPreset extends SoundEffectPreset { 
+	static Load(ResourceName: string): SoundEffectSubmixPreset;
+	static Find(Outer: UObject, ResourceName: string): SoundEffectSubmixPreset;
+	static GetDefaultObject(): SoundEffectSubmixPreset;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundEffectSubmixPreset;
+	static C(Other: UObject | any): SoundEffectSubmixPreset;
+}
+
+declare class AmbisonicsSubmixSettingsBase extends UObject { 
+	static Load(ResourceName: string): AmbisonicsSubmixSettingsBase;
+	static Find(Outer: UObject, ResourceName: string): AmbisonicsSubmixSettingsBase;
+	static GetDefaultObject(): AmbisonicsSubmixSettingsBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AmbisonicsSubmixSettingsBase;
+	static C(Other: UObject | any): AmbisonicsSubmixSettingsBase;
+}
+
+declare type ESoundwaveSampleRateSettings = 'Max' | 'High' | 'Medium' | 'Low' | 'Min' | 'MatchDevice' | 'ESoundwaveSampleRateSettings_MAX';
+declare var ESoundwaveSampleRateSettings : { Max:'Max',High:'High',Medium:'Medium',Low:'Low',Min:'Min',MatchDevice:'MatchDevice',ESoundwaveSampleRateSettings_MAX:'ESoundwaveSampleRateSettings_MAX', };
+declare type ESoundGroup = 'SOUNDGROUP_Default' | 'SOUNDGROUP_Effects' | 'SOUNDGROUP_UI' | 'SOUNDGROUP_Music' | 'SOUNDGROUP_Voice' | 'SOUNDGROUP_GameSoundGroup1' | 'SOUNDGROUP_GameSoundGroup2' | 'SOUNDGROUP_GameSoundGroup3' | 'SOUNDGROUP_GameSoundGroup4' | 'SOUNDGROUP_GameSoundGroup5' | 'SOUNDGROUP_GameSoundGroup6' | 'SOUNDGROUP_GameSoundGroup7' | 'SOUNDGROUP_GameSoundGroup8' | 'SOUNDGROUP_GameSoundGroup9' | 'SOUNDGROUP_GameSoundGroup10' | 'SOUNDGROUP_GameSoundGroup11' | 'SOUNDGROUP_GameSoundGroup12' | 'SOUNDGROUP_GameSoundGroup13' | 'SOUNDGROUP_GameSoundGroup14' | 'SOUNDGROUP_GameSoundGroup15' | 'SOUNDGROUP_GameSoundGroup16' | 'SOUNDGROUP_GameSoundGroup17' | 'SOUNDGROUP_GameSoundGroup18' | 'SOUNDGROUP_GameSoundGroup19' | 'SOUNDGROUP_GameSoundGroup20' | 'SOUNDGROUP_MAX';
+declare var ESoundGroup : { SOUNDGROUP_Default:'SOUNDGROUP_Default',SOUNDGROUP_Effects:'SOUNDGROUP_Effects',SOUNDGROUP_UI:'SOUNDGROUP_UI',SOUNDGROUP_Music:'SOUNDGROUP_Music',SOUNDGROUP_Voice:'SOUNDGROUP_Voice',SOUNDGROUP_GameSoundGroup1:'SOUNDGROUP_GameSoundGroup1',SOUNDGROUP_GameSoundGroup2:'SOUNDGROUP_GameSoundGroup2',SOUNDGROUP_GameSoundGroup3:'SOUNDGROUP_GameSoundGroup3',SOUNDGROUP_GameSoundGroup4:'SOUNDGROUP_GameSoundGroup4',SOUNDGROUP_GameSoundGroup5:'SOUNDGROUP_GameSoundGroup5',SOUNDGROUP_GameSoundGroup6:'SOUNDGROUP_GameSoundGroup6',SOUNDGROUP_GameSoundGroup7:'SOUNDGROUP_GameSoundGroup7',SOUNDGROUP_GameSoundGroup8:'SOUNDGROUP_GameSoundGroup8',SOUNDGROUP_GameSoundGroup9:'SOUNDGROUP_GameSoundGroup9',SOUNDGROUP_GameSoundGroup10:'SOUNDGROUP_GameSoundGroup10',SOUNDGROUP_GameSoundGroup11:'SOUNDGROUP_GameSoundGroup11',SOUNDGROUP_GameSoundGroup12:'SOUNDGROUP_GameSoundGroup12',SOUNDGROUP_GameSoundGroup13:'SOUNDGROUP_GameSoundGroup13',SOUNDGROUP_GameSoundGroup14:'SOUNDGROUP_GameSoundGroup14',SOUNDGROUP_GameSoundGroup15:'SOUNDGROUP_GameSoundGroup15',SOUNDGROUP_GameSoundGroup16:'SOUNDGROUP_GameSoundGroup16',SOUNDGROUP_GameSoundGroup17:'SOUNDGROUP_GameSoundGroup17',SOUNDGROUP_GameSoundGroup18:'SOUNDGROUP_GameSoundGroup18',SOUNDGROUP_GameSoundGroup19:'SOUNDGROUP_GameSoundGroup19',SOUNDGROUP_GameSoundGroup20:'SOUNDGROUP_GameSoundGroup20',SOUNDGROUP_MAX:'SOUNDGROUP_MAX', };
+declare type ESoundWaveFFTSize = 'VerySmall_64' | 'Small_256' | 'Medium_512' | 'Large_1024' | 'VeryLarge_2048' | 'ESoundWaveFFTSize_MAX';
+declare var ESoundWaveFFTSize : { VerySmall_64:'VerySmall_64',Small_256:'Small_256',Medium_512:'Medium_512',Large_1024:'Large_1024',VeryLarge_2048:'VeryLarge_2048',ESoundWaveFFTSize_MAX:'ESoundWaveFFTSize_MAX', };
+declare class SoundWaveSpectralDataEntry { 
+	Magnitude: number;
+	NormalizedMagnitude: number;
+	clone() : SoundWaveSpectralDataEntry;
+	static C(Other: UObject | any): SoundWaveSpectralDataEntry;
+}
+
+declare class SoundWaveSpectralTimeData { 
+	Data: SoundWaveSpectralDataEntry[];
+	TimeSec: number;
+	clone() : SoundWaveSpectralTimeData;
+	static C(Other: UObject | any): SoundWaveSpectralTimeData;
+}
+
+declare class SoundWaveEnvelopeTimeData { 
+	Amplitude: number;
+	TimeSec: number;
+	clone() : SoundWaveEnvelopeTimeData;
+	static C(Other: UObject | any): SoundWaveEnvelopeTimeData;
+}
+
+declare class SubtitleCue { 
+	text: string;
+	Time: number;
+	clone() : SubtitleCue;
+	static C(Other: UObject | any): SubtitleCue;
+}
+
+declare type EEvaluateCurveTableResult = 'RowFound' | 'RowNotFound' | 'EEvaluateCurveTableResult_MAX';
+declare var EEvaluateCurveTableResult : { RowFound:'RowFound',RowNotFound:'RowNotFound',EEvaluateCurveTableResult_MAX:'EEvaluateCurveTableResult_MAX', };
+declare class CurveTable extends UObject { 
+	AssetImportData: AssetImportData;
+	ImportPath: string;
+	static Load(ResourceName: string): CurveTable;
+	static Find(Outer: UObject, ResourceName: string): CurveTable;
+	static GetDefaultObject(): CurveTable;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveTable;
+	static C(Other: UObject | any): CurveTable;
+	AddRichCurve(Key: string,InCurve: RichCurve): void;
+	NotifyUpdateCurveTable(): void;
+	EvaluateCurveTableRow(RowName: string,InXY: number,OutResult?: EEvaluateCurveTableResult,OutXY?: number,ContextString?: string): {OutResult: EEvaluateCurveTableResult, OutXY: number};
+	static AddRichCurve(InCurveTable: CurveTable,Key: string,InCurve: RichCurve): void;
+	static NotifyUpdateCurveTable(InCurveTable: CurveTable): void;
+	static EvaluateCurveTableRow(CurveTable: CurveTable,RowName: string,InXY: number,OutResult?: EEvaluateCurveTableResult,OutXY?: number,ContextString?: string): {OutResult: EEvaluateCurveTableResult, OutXY: number};
+}
+
+declare class SoundWave extends SoundBase { 
+	CompressionQuality: number;
+	StreamingPriority: number;
+	SampleRateQuality: ESoundwaveSampleRateSettings;
+	SoundGroup: ESoundGroup;
+	bLooping: boolean;
+	bStreaming: boolean;
+	bSeekableStreaming: boolean;
+	bMature: boolean;
+	bManualWordWrap: boolean;
+	bSingleLine: boolean;
+	bVirtualizeWhenSilent: boolean;
+	bIsAmbisonics: boolean;
+	OverrideSoundToUseForAnalysis: SoundWave;
+	TreatFileAsLoopingForAnalysis: boolean;
+	bEnableBakedFFTAnalysis: boolean;
+	bEnableAmplitudeEnvelopeAnalysis: boolean;
+	FFTSize: ESoundWaveFFTSize;
+	FFTAnalysisFrameSize: number;
+	FFTAnalysisAttackTime: number;
+	FFTAnalysisReleaseTime: number;
+	EnvelopeFollowerFrameSize: number;
+	EnvelopeFollowerAttackTime: number;
+	EnvelopeFollowerReleaseTime: number;
+	FrequenciesToAnalyze: number[];
+	CookedSpectralTimeData: SoundWaveSpectralTimeData[];
+	CookedEnvelopeTimeData: SoundWaveEnvelopeTimeData[];
+	SpokenText: string;
+	SubtitlePriority: number;
+	Volume: number;
+	Pitch: number;
+	NumChannels: number;
+	ChannelOffsets: number[];
+	ChannelSizes: number[];
+	SampleRate: number;
+	Subtitles: SubtitleCue[];
+	Comment: string;
+	SourceFilePath: string;
+	SourceFileTimestamp: string;
+	AssetImportData: AssetImportData;
+	Curves: CurveTable;
+	InternalCurves: CurveTable;
+	static Load(ResourceName: string): SoundWave;
+	static Find(Outer: UObject, ResourceName: string): SoundWave;
+	static GetDefaultObject(): SoundWave;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundWave;
+	static C(Other: UObject | any): SoundWave;
+}
+
+declare type EAudioRecordingExportType = 'SoundWave' | 'WavFile' | 'EAudioRecordingExportType_MAX';
+declare var EAudioRecordingExportType : { SoundWave:'SoundWave',WavFile:'WavFile',EAudioRecordingExportType_MAX:'EAudioRecordingExportType_MAX', };
+declare class SoundSubmix extends UObject { 
+	ChildSubmixes: SoundSubmix[];
+	ParentSubmix: SoundSubmix;
+	ChannelFormat: ESubmixChannelFormat;
+	bMuteWhenBackgrounded: boolean;
+	SubmixEffectChain: SoundEffectSubmixPreset[];
+	AmbisonicsPluginSettings: AmbisonicsSubmixSettingsBase;
+	EnvelopeFollowerAttackTime: number;
+	EnvelopeFollowerReleaseTime: number;
+	OutputVolume: number;
+	OnSubmixRecordedFileDone: UnrealEngineMulticastDelegate<(ResultingSoundWave: SoundWave) => void>;
+	static Load(ResourceName: string): SoundSubmix;
+	static Find(Outer: UObject, ResourceName: string): SoundSubmix;
+	static GetDefaultObject(): SoundSubmix;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSubmix;
+	StopRecordingOutput(WorldContextObject: UObject,ExportType: EAudioRecordingExportType,Name: string,Path: string,ExistingSoundWaveToOverwrite: SoundWave): void;
+	StopEnvelopeFollowing(WorldContextObject: UObject): void;
+	StartRecordingOutput(WorldContextObject: UObject,ExpectedDuration: number): void;
+	StartEnvelopeFollowing(WorldContextObject: UObject): void;
+	SetSubmixOutputVolume(WorldContextObject: UObject,InOutputVolume: number): void;
+	static C(Other: UObject | any): SoundSubmix;
+}
+
+declare type ESendLevelControlMethod = 'Linear' | 'CustomCurve' | 'Manual' | 'ESendLevelControlMethod_MAX';
+declare var ESendLevelControlMethod : { Linear:'Linear',CustomCurve:'CustomCurve',Manual:'Manual',ESendLevelControlMethod_MAX:'ESendLevelControlMethod_MAX', };
+declare class SoundSubmixSendInfo { 
+	SendLevelControlMethod: ESendLevelControlMethod;
+	SoundSubmix: SoundSubmix;
+	SendLevel: number;
+	MinSendLevel: number;
+	MaxSendLevel: number;
+	MinSendDistance: number;
+	MaxSendDistance: number;
+	CustomSendLevelCurve: RuntimeFloatCurve;
+	clone() : SoundSubmixSendInfo;
+	static C(Other: UObject | any): SoundSubmixSendInfo;
+}
+
+declare class SoundEffectSourcePreset extends SoundEffectPreset { 
+	static Load(ResourceName: string): SoundEffectSourcePreset;
+	static Find(Outer: UObject, ResourceName: string): SoundEffectSourcePreset;
+	static GetDefaultObject(): SoundEffectSourcePreset;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundEffectSourcePreset;
+	static C(Other: UObject | any): SoundEffectSourcePreset;
+}
+
+declare class SourceEffectChainEntry { 
+	Preset: SoundEffectSourcePreset;
+	bBypass: boolean;
+	clone() : SourceEffectChainEntry;
+	static C(Other: UObject | any): SourceEffectChainEntry;
+}
+
+declare class SoundEffectSourcePresetChain extends UObject { 
+	Chain: SourceEffectChainEntry[];
+	bPlayEffectChainTails: boolean;
+	static Load(ResourceName: string): SoundEffectSourcePresetChain;
+	static Find(Outer: UObject, ResourceName: string): SoundEffectSourcePresetChain;
+	static GetDefaultObject(): SoundEffectSourcePresetChain;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundEffectSourcePresetChain;
+	static C(Other: UObject | any): SoundEffectSourcePresetChain;
+}
+
+declare type ESourceBusSendLevelControlMethod = 'Linear' | 'CustomCurve' | 'Manual' | 'ESourceBusSendLevelControlMethod_MAX';
+declare var ESourceBusSendLevelControlMethod : { Linear:'Linear',CustomCurve:'CustomCurve',Manual:'Manual',ESourceBusSendLevelControlMethod_MAX:'ESourceBusSendLevelControlMethod_MAX', };
+declare type ESourceBusChannels = 'Mono' | 'Stereo' | 'ESourceBusChannels_MAX';
+declare var ESourceBusChannels : { Mono:'Mono',Stereo:'Stereo',ESourceBusChannels_MAX:'ESourceBusChannels_MAX', };
+declare class SoundSourceBus extends SoundWave { 
+	SourceBusChannels: ESourceBusChannels;
+	SourceBusDuration: number;
+	bAutoDeactivateWhenSilent: boolean;
+	static Load(ResourceName: string): SoundSourceBus;
+	static Find(Outer: UObject, ResourceName: string): SoundSourceBus;
+	static GetDefaultObject(): SoundSourceBus;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSourceBus;
+	static C(Other: UObject | any): SoundSourceBus;
+}
+
+declare class SoundSourceBusSendInfo { 
+	SourceBusSendLevelControlMethod: ESourceBusSendLevelControlMethod;
+	SoundSourceBus: SoundSourceBus;
+	SendLevel: number;
+	MinSendLevel: number;
+	MaxSendLevel: number;
+	MinSendDistance: number;
+	MaxSendDistance: number;
+	CustomSendLevelCurve: RuntimeFloatCurve;
+	clone() : SoundSourceBusSendInfo;
+	static C(Other: UObject | any): SoundSourceBusSendInfo;
+}
+
+declare class AudioComponentParam { 
+	ParamName: string;
+	FloatParam: number;
+	BoolParam: boolean;
+	IntParam: number;
+	SoundWaveParam: SoundWave;
+	clone() : AudioComponentParam;
+	static C(Other: UObject | any): AudioComponentParam;
+}
+
+declare class SoundWaveSpectralData { 
+	FrequencyHz: number;
+	Magnitude: number;
+	NormalizedMagnitude: number;
+	clone() : SoundWaveSpectralData;
+	static C(Other: UObject | any): SoundWaveSpectralData;
+}
+
+declare class SoundWaveSpectralDataPerSound { 
+	SpectralData: SoundWaveSpectralData[];
+	PlaybackTime: number;
+	SoundWave: SoundWave;
+	clone() : SoundWaveSpectralDataPerSound;
+	static C(Other: UObject | any): SoundWaveSpectralDataPerSound;
+}
+
+declare class SoundWaveEnvelopeDataPerSound { 
+	Envelope: number;
+	PlaybackTime: number;
+	SoundWave: SoundWave;
+	clone() : SoundWaveEnvelopeDataPerSound;
+	static C(Other: UObject | any): SoundWaveEnvelopeDataPerSound;
+}
+
+declare class AudioComponent extends SceneComponent { 
+	Sound: SoundBase;
+	InstanceParameters: AudioComponentParam[];
+	SoundClassOverride: SoundClass;
+	bAutoDestroy: boolean;
+	bStopWhenOwnerDestroyed: boolean;
+	bShouldRemainActiveIfDropped: boolean;
+	bAllowSpatialization: boolean;
+	bOverrideAttenuation: boolean;
+	bOverrideSubtitlePriority: boolean;
+	bIsUISound: boolean;
+	bEnableLowPassFilter: boolean;
+	bOverridePriority: boolean;
+	bSuppressSubtitles: boolean;
+	bAutoManageAttachment: boolean;
+	AudioComponentUserID: string;
+	PitchModulationMin: number;
+	PitchModulationMax: number;
+	VolumeModulationMin: number;
+	VolumeModulationMax: number;
+	VolumeMultiplier: number;
+	EnvelopeFollowerAttackTime: number;
+	EnvelopeFollowerReleaseTime: number;
+	Priority: number;
+	SubtitlePriority: number;
+	VolumeWeightedPriorityScale: number;
+	HighFrequencyGainMultiplier: number;
+	PitchMultiplier: number;
+	LowPassFilterFrequency: number;
+	AttenuationSettings: SoundAttenuation;
+	AttenuationOverrides: SoundAttenuationSettings;
+	ConcurrencySettings: SoundConcurrency;
+	ConcurrencySet: any;
+	AutoAttachLocationRule: EAttachmentRule;
+	AutoAttachRotationRule: EAttachmentRule;
+	AutoAttachScaleRule: EAttachmentRule;
+	OnAudioFinished: UnrealEngineMulticastDelegate<() => void>;
+	OnAudioPlaybackPercent: UnrealEngineMulticastDelegate<(PlayingSoundWave: SoundWave, PlaybackPercent: number) => void>;
+	OnAudioSingleEnvelopeValue: UnrealEngineMulticastDelegate<(PlayingSoundWave: SoundWave, EnvelopeValue: number) => void>;
+	OnAudioMultiEnvelopeValue: UnrealEngineMulticastDelegate<(AverageEnvelopeValue: number, MaxEnvelope: number, NumWaveInstances: number) => void>;
+	Modulation: SoundModulation;
+	OnQueueSubtitles: UnrealEngineDelegate<(Subtitles: SubtitleCue[], CueDuration: number) => void>;
+	AutoAttachParent: any;
+	AutoAttachSocketName: string;
+	static Load(ResourceName: string): AudioComponent;
+	static Find(Outer: UObject, ResourceName: string): AudioComponent;
+	static GetDefaultObject(): AudioComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioComponent;
+	StopDelayed(DelayTime: number): void;
+	Stop(): void;
+	SetWaveParameter(InName: string,InWave: SoundWave): void;
+	SetVolumeMultiplier(NewVolumeMultiplier: number): void;
+	SetUISound(bInUISound: boolean): void;
+	SetSubmixSend(Submix: SoundSubmix,SendLevel: number): void;
+	SetSourceBusSendPreEffect(SoundSourceBus: SoundSourceBus,SourceBusSendLevel: number): void;
+	SetSourceBusSendPostEffect(SoundSourceBus: SoundSourceBus,SourceBusSendLevel: number): void;
+	SetSound(NewSound: SoundBase): void;
+	SetPitchMultiplier(NewPitchMultiplier: number): void;
+	SetPaused(bPause: boolean): void;
+	SetLowPassFilterFrequency(InLowPassFilterFrequency: number): void;
+	SetLowPassFilterEnabled(InLowPassFilterEnabled: boolean): void;
+	SetIntParameter(InName: string,inInt: number): void;
+	SetFloatParameter(InName: string,InFloat: number): void;
+	SetBoolParameter(InName: string,InBool: boolean): void;
+	Play(StartTime: number): void;
+	IsPlaying(): boolean;
+	HasCookedFFTData(): boolean;
+	HasCookedAmplitudeEnvelopeData(): boolean;
+	GetCookedFFTDataForAllPlayingSounds(OutSoundWaveSpectralData?: SoundWaveSpectralDataPerSound[]): {OutSoundWaveSpectralData: SoundWaveSpectralDataPerSound[], $: boolean};
+	GetCookedFFTData(FrequenciesToGet: number[],OutSoundWaveSpectralData?: SoundWaveSpectralData[]): {OutSoundWaveSpectralData: SoundWaveSpectralData[], $: boolean};
+	GetCookedEnvelopeDataForAllPlayingSounds(OutEnvelopeData?: SoundWaveEnvelopeDataPerSound[]): {OutEnvelopeData: SoundWaveEnvelopeDataPerSound[], $: boolean};
+	GetCookedEnvelopeData(OutEnvelopeData?: number): {OutEnvelopeData: number, $: boolean};
+	FadeOut(FadeOutDuration: number,FadeVolumeLevel: number): void;
+	FadeIn(FadeInDuration: number,FadeVolumeLevel: number,StartTime: number): void;
+	BP_GetAttenuationSettingsToApply(OutAttenuationSettings?: SoundAttenuationSettings): {OutAttenuationSettings: SoundAttenuationSettings, $: boolean};
+	AdjustVolume(AdjustVolumeDuration: number,AdjustVolumeLevel: number): void;
+	AdjustAttenuation(InAttenuationSettings: SoundAttenuationSettings): void;
+	static C(Other: UObject | any): AudioComponent;
+}
+
+declare class SoundBase extends UObject { 
+	SoundClassObject: SoundClass;
+	bDebug: boolean;
+	bOverrideConcurrency: boolean;
+	bOutputToBusOnly: boolean;
+	bHasDelayNode: boolean;
+	bHasConcatenatorNode: boolean;
+	bHasVirtualizeWhenSilent: boolean;
+	bBypassVolumeScaleForPriority: boolean;
+	VirtualizationMode: EVirtualizationMode;
+	MaxConcurrentResolutionRule: EMaxConcurrentResolutionRule;
+	SoundConcurrencySettings: SoundConcurrency;
+	ConcurrencySet: any;
+	ConcurrencyOverrides: SoundConcurrencySettings;
+	MaxConcurrentPlayCount: number;
+	Duration: number;
+	MaxDistance: number;
+	TotalSamples: number;
+	Priority: number;
+	AttenuationSettings: SoundAttenuation;
+	Modulation: SoundModulation;
+	SoundSubmixObject: SoundSubmix;
+	SoundSubmixSends: SoundSubmixSendInfo[];
+	SourceEffectChain: SoundEffectSourcePresetChain;
+	BusSends: SoundSourceBusSendInfo[];
+	PreEffectBusSends: SoundSourceBusSendInfo[];
+	static Load(ResourceName: string): SoundBase;
+	static Find(Outer: UObject, ResourceName: string): SoundBase;
+	static GetDefaultObject(): SoundBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundBase;
+	static C(Other: UObject | any): SoundBase;
+	SpawnSoundAttached(AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,bStopWhenAttachedToDestroyed: boolean,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,ConcurrencySettings: SoundConcurrency,bAutoDestroy: boolean): AudioComponent;
+	static SpawnSoundAttached(Sound: SoundBase,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,bStopWhenAttachedToDestroyed: boolean,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,ConcurrencySettings: SoundConcurrency,bAutoDestroy: boolean): AudioComponent;
+}
+
+declare type EUMGSequencePlayMode = 'Forward' | 'Reverse' | 'PingPong' | 'EUMGSequencePlayMode_MAX';
+declare var EUMGSequencePlayMode : { Forward:'Forward',Reverse:'Reverse',PingPong:'PingPong',EUMGSequencePlayMode_MAX:'EUMGSequencePlayMode_MAX', };
+declare class InputEvent { 
+	clone() : InputEvent;
+	static C(Other: UObject | any): InputEvent;
+	InputEvent_IsAltDown(): boolean;
+	InputEvent_IsCommandDown(): boolean;
+	InputEvent_IsControlDown(): boolean;
+	InputEvent_IsLeftAltDown(): boolean;
+	InputEvent_IsLeftCommandDown(): boolean;
+	InputEvent_IsLeftControlDown(): boolean;
+	InputEvent_IsLeftShiftDown(): boolean;
+	InputEvent_IsRepeat(): boolean;
+	InputEvent_IsRightAltDown(): boolean;
+	InputEvent_IsRightCommandDown(): boolean;
+	InputEvent_IsRightControlDown(): boolean;
+	InputEvent_IsRightShiftDown(): boolean;
+	InputEvent_IsShiftDown(): boolean;
+	static InputEvent_IsAltDown(Input: InputEvent): boolean;
+	static InputEvent_IsCommandDown(Input: InputEvent): boolean;
+	static InputEvent_IsControlDown(Input: InputEvent): boolean;
+	static InputEvent_IsLeftAltDown(Input: InputEvent): boolean;
+	static InputEvent_IsLeftCommandDown(Input: InputEvent): boolean;
+	static InputEvent_IsLeftControlDown(Input: InputEvent): boolean;
+	static InputEvent_IsLeftShiftDown(Input: InputEvent): boolean;
+	static InputEvent_IsRepeat(Input: InputEvent): boolean;
+	static InputEvent_IsRightAltDown(Input: InputEvent): boolean;
+	static InputEvent_IsRightCommandDown(Input: InputEvent): boolean;
+	static InputEvent_IsRightControlDown(Input: InputEvent): boolean;
+	static InputEvent_IsRightShiftDown(Input: InputEvent): boolean;
+	static InputEvent_IsShiftDown(Input: InputEvent): boolean;
+}
+
+declare type ESlateGesture = 'None' | 'Scroll' | 'Magnify' | 'Swipe' | 'Rotate' | 'LongPress' | 'ESlateGesture_MAX';
+declare var ESlateGesture : { None:'None',Scroll:'Scroll',Magnify:'Magnify',Swipe:'Swipe',Rotate:'Rotate',LongPress:'LongPress',ESlateGesture_MAX:'ESlateGesture_MAX', };
+declare class EventReply { 
+	clone() : EventReply;
+	static C(Other: UObject | any): EventReply;
+	CaptureJoystick(CapturingWidget?: Widget,bInAllJoysticks?: boolean): {Reply: EventReply, $: EventReply};
+	CaptureMouse(CapturingWidget?: Widget): {Reply: EventReply, $: EventReply};
+	ClearUserFocus(bInAllUsers?: boolean): {Reply: EventReply, $: EventReply};
+	DetectDrag(WidgetDetectingDrag?: Widget,DragKey?: Key): {Reply: EventReply, $: EventReply};
+	EndDragDrop(): {Reply: EventReply, $: EventReply};
+	LockMouse(CapturingWidget?: Widget): {Reply: EventReply, $: EventReply};
+	ReleaseJoystickCapture(bInAllJoysticks?: boolean): {Reply: EventReply, $: EventReply};
+	ReleaseMouseCapture(): {Reply: EventReply, $: EventReply};
+	SetMousePosition(NewMousePosition?: Vector2D): {Reply: EventReply, $: EventReply};
+	SetUserFocus(FocusWidget?: Widget,bInAllUsers?: boolean): {Reply: EventReply, $: EventReply};
+	UnlockMouse(): {Reply: EventReply, $: EventReply};
+	static CaptureJoystick(Reply?: EventReply,CapturingWidget?: Widget,bInAllJoysticks?: boolean): {Reply: EventReply, $: EventReply};
+	static CaptureMouse(Reply?: EventReply,CapturingWidget?: Widget): {Reply: EventReply, $: EventReply};
+	static ClearUserFocus(Reply?: EventReply,bInAllUsers?: boolean): {Reply: EventReply, $: EventReply};
+	static DetectDrag(Reply?: EventReply,WidgetDetectingDrag?: Widget,DragKey?: Key): {Reply: EventReply, $: EventReply};
+	static EndDragDrop(Reply?: EventReply): {Reply: EventReply, $: EventReply};
+	static LockMouse(Reply?: EventReply,CapturingWidget?: Widget): {Reply: EventReply, $: EventReply};
+	static ReleaseJoystickCapture(Reply?: EventReply,bInAllJoysticks?: boolean): {Reply: EventReply, $: EventReply};
+	static ReleaseMouseCapture(Reply?: EventReply): {Reply: EventReply, $: EventReply};
+	static SetMousePosition(Reply?: EventReply,NewMousePosition?: Vector2D): {Reply: EventReply, $: EventReply};
+	static SetUserFocus(Reply?: EventReply,FocusWidget?: Widget,bInAllUsers?: boolean): {Reply: EventReply, $: EventReply};
+	static UnlockMouse(Reply?: EventReply): {Reply: EventReply, $: EventReply};
+	static Handled(): EventReply;
+	static Unhandled(): EventReply;
+}
+
+declare class UPointerEvent extends InputEvent { 
+	clone() : UPointerEvent;
+	static C(Other: UObject | any): UPointerEvent;
+	PointerEvent_GetCursorDelta(): Vector2D;
+	PointerEvent_GetEffectingButton(): Key;
+	PointerEvent_GetGestureDelta(): Vector2D;
+	PointerEvent_GetGestureType(): ESlateGesture;
+	PointerEvent_GetLastScreenSpacePosition(): Vector2D;
+	PointerEvent_GetPointerIndex(): number;
+	PointerEvent_GetScreenSpacePosition(): Vector2D;
+	PointerEvent_GetTouchpadIndex(): number;
+	PointerEvent_GetUserIndex(): number;
+	PointerEvent_GetWheelDelta(): number;
+	PointerEvent_IsMouseButtonDown(MouseButton: Key): boolean;
+	PointerEvent_IsTouchEvent(): boolean;
+	DetectDragIfPressed(WidgetDetectingDrag: Widget,DragKey: Key): EventReply;
+	GetInputEventFromPointerEvent(): InputEvent;
+	static PointerEvent_GetCursorDelta(Input: UPointerEvent): Vector2D;
+	static PointerEvent_GetEffectingButton(Input: UPointerEvent): Key;
+	static PointerEvent_GetGestureDelta(Input: UPointerEvent): Vector2D;
+	static PointerEvent_GetGestureType(Input: UPointerEvent): ESlateGesture;
+	static PointerEvent_GetLastScreenSpacePosition(Input: UPointerEvent): Vector2D;
+	static PointerEvent_GetPointerIndex(Input: UPointerEvent): number;
+	static PointerEvent_GetScreenSpacePosition(Input: UPointerEvent): Vector2D;
+	static PointerEvent_GetTouchpadIndex(Input: UPointerEvent): number;
+	static PointerEvent_GetUserIndex(Input: UPointerEvent): number;
+	static PointerEvent_GetWheelDelta(Input: UPointerEvent): number;
+	static PointerEvent_IsMouseButtonDown(Input: UPointerEvent,MouseButton: Key): boolean;
+	static PointerEvent_IsTouchEvent(Input: UPointerEvent): boolean;
+	static DetectDragIfPressed(UPointerEvent: UPointerEvent,WidgetDetectingDrag: Widget,DragKey: Key): EventReply;
+	static GetInputEventFromPointerEvent(Event: UPointerEvent): InputEvent;
+}
+
+declare class UFocusEvent { 
+	clone() : UFocusEvent;
+	static C(Other: UObject | any): UFocusEvent;
+}
+
+declare class KeyEvent extends InputEvent { 
+	clone() : KeyEvent;
+	static C(Other: UObject | any): KeyEvent;
+	GetKeyNameByKeyEvent(): string;
+	GetKey(): Key;
+	GetUserIndex(): number;
+	Key_GetNavigationDirectionFromKey(): EUINavigation;
+	GetInputEventFromKeyEvent(): InputEvent;
+	static GetKeyNameByKeyEvent(Event: KeyEvent): string;
+	static GetKey(Input: KeyEvent): Key;
+	static GetUserIndex(Input: KeyEvent): number;
+	static Key_GetNavigationDirectionFromKey(InKeyEvent: KeyEvent): EUINavigation;
+	static GetInputEventFromKeyEvent(Event: KeyEvent): InputEvent;
+}
+
+declare class SlateBrushAsset extends UObject { 
+	Brush: SlateBrush;
+	static Load(ResourceName: string): SlateBrushAsset;
+	static Find(Outer: UObject, ResourceName: string): SlateBrushAsset;
+	static GetDefaultObject(): SlateBrushAsset;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateBrushAsset;
+	static C(Other: UObject | any): SlateBrushAsset;
+	MakeBrushFromAsset(): SlateBrush;
+	static MakeBrushFromAsset(BrushAsset: SlateBrushAsset): SlateBrush;
+}
+
+declare class PaintContext { 
+	clone() : PaintContext;
+	static C(Other: UObject | any): PaintContext;
+	DrawSpaceSpline(InStart?: Vector2D,InStartDir?: Vector2D,InEnd?: Vector2D,InEndDir?: Vector2D,InThickness?: number,InTint?: LinearColor): {Context: PaintContext};
+	DrawBox(Position?: Vector2D,Size?: Vector2D,Brush?: SlateBrushAsset,Tint?: LinearColor): {Context: PaintContext};
+	DrawLine(PositionA?: Vector2D,PositionB?: Vector2D,Tint?: LinearColor,bAntiAlias?: boolean,Thickness?: number): {Context: PaintContext};
+	DrawLines(Points?: Vector2D[],Tint?: LinearColor,bAntiAlias?: boolean,Thickness?: number): {Context: PaintContext};
+	DrawText(inString?: string,Position?: Vector2D,Tint?: LinearColor): {Context: PaintContext};
+	DrawTextFormatted(text?: string,Position?: Vector2D,Font?: Font,FontSize?: number,FontTypeFace?: string,Tint?: LinearColor): {Context: PaintContext};
+	static DrawSpaceSpline(Context?: PaintContext,InStart?: Vector2D,InStartDir?: Vector2D,InEnd?: Vector2D,InEndDir?: Vector2D,InThickness?: number,InTint?: LinearColor): {Context: PaintContext};
+	static DrawBox(Context?: PaintContext,Position?: Vector2D,Size?: Vector2D,Brush?: SlateBrushAsset,Tint?: LinearColor): {Context: PaintContext};
+	static DrawLine(Context?: PaintContext,PositionA?: Vector2D,PositionB?: Vector2D,Tint?: LinearColor,bAntiAlias?: boolean,Thickness?: number): {Context: PaintContext};
+	static DrawLines(Context?: PaintContext,Points?: Vector2D[],Tint?: LinearColor,bAntiAlias?: boolean,Thickness?: number): {Context: PaintContext};
+	static DrawText(Context?: PaintContext,inString?: string,Position?: Vector2D,Tint?: LinearColor): {Context: PaintContext};
+	static DrawTextFormatted(Context?: PaintContext,text?: string,Position?: Vector2D,Font?: Font,FontSize?: number,FontTypeFace?: string,Tint?: LinearColor): {Context: PaintContext};
+}
+
+declare class MotionEvent extends InputEvent { 
+	clone() : MotionEvent;
+	static C(Other: UObject | any): MotionEvent;
+}
+
+declare class CharacterEvent extends InputEvent { 
+	clone() : CharacterEvent;
+	static C(Other: UObject | any): CharacterEvent;
+	GetInputEventFromCharacterEvent(): InputEvent;
+	static GetInputEventFromCharacterEvent(Event: CharacterEvent): InputEvent;
+}
+
+declare class AnalogInputEvent extends KeyEvent { 
+	clone() : AnalogInputEvent;
+	static C(Other: UObject | any): AnalogInputEvent;
+	GetAnalogValue(): number;
+	Key_GetNavigationDirectionFromAnalog(): EUINavigation;
+	GetKeyEventFromAnalogInputEvent(): KeyEvent;
+	static GetAnalogValue(Input: AnalogInputEvent): number;
+	static Key_GetNavigationDirectionFromAnalog(InAnalogEvent: AnalogInputEvent): EUINavigation;
+	static GetKeyEventFromAnalogInputEvent(Event: AnalogInputEvent): KeyEvent;
+}
+
+declare class UserWidget extends Widget { 
+	ColorAndOpacity: LinearColor;
+	ColorAndOpacityDelegate: UnrealEngineDelegate<() => LinearColor>;
+	ForegroundColor: SlateColor;
+	ForegroundColorDelegate: UnrealEngineDelegate<() => SlateColor>;
+	Padding: Margin;
+	ActiveSequencePlayers: UMGSequencePlayer[];
+	StoppedSequencePlayers: UMGSequencePlayer[];
+	NamedSlotBindings: NamedSlotBinding[];
+	WidgetTree: WidgetTree;
+	DesignTimeSize: Vector2D;
+	DesignSizeMode: EDesignPreviewSizeMode;
+	PaletteCategory: string;
+	PreviewBackground: Texture2D;
+	Priority: number;
+	bSupportsKeyboardFocus: boolean;
+	bIsFocusable: boolean;
+	bStopAction: boolean;
+	bHasScriptImplementedTick: boolean;
+	bHasScriptImplementedPaint: boolean;
+	bCookedWidgetTree: boolean;
+	TickFrequency: EWidgetTickFrequency;
+	InputComponent: InputComponent;
+	AnimationCallbacks: AnimationEventBinding[];
+	static Load(ResourceName: string): UserWidget;
+	static Find(Outer: UObject, ResourceName: string): UserWidget;
+	static GetDefaultObject(): UserWidget;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserWidget;
+	UnregisterInputComponent(): void;
+	UnbindAllFromAnimationStarted(Animation: WidgetAnimation): void;
+	UnbindAllFromAnimationFinished(Animation: WidgetAnimation): void;
+	Tick(MyGeometry: Geometry,InDeltaTime: number): void;
+	StopListeningForInputAction(ActionName: string,EventType: EInputEvent): void;
+	StopListeningForAllInputActions(): void;
+	StopAnimationsAndLatentActions(): void;
+	StopAnimation(InAnimation: WidgetAnimation): void;
+	StopAllAnimations(): void;
+	SetPositionInViewport(Position: Vector2D,bRemoveDPIScale: boolean): void;
+	SetPlaybackSpeed(InAnimation: WidgetAnimation,PlaybackSpeed: number): void;
+	SetPadding(InPadding: Margin): void;
+	SetOwningPlayer(LocalPlayerController: PlayerController): void;
+	SetNumLoopsToPlay(InAnimation: WidgetAnimation,NumLoopsToPlay: number): void;
+	SetInputActionPriority(NewPriority: number): void;
+	SetInputActionBlocking(bShouldBlock: boolean): void;
+	SetForegroundColor(InForegroundColor: SlateColor): void;
+	SetDesiredSizeInViewport(Size: Vector2D): void;
+	SetColorAndOpacity(InColorAndOpacity: LinearColor): void;
+	SetAnchorsInViewport(Anchors: Anchors): void;
+	SetAlignmentInViewport(Alignment: Vector2D): void;
+	ReverseAnimation(InAnimation: WidgetAnimation): void;
+	RemoveFromViewport(): void;
+	RegisterInputComponent(): void;
+	PreConstruct(IsDesignTime: boolean): void;
+	PlaySound(SoundToPlay: SoundBase): void;
+	PlayAnimationTimeRange(InAnimation: WidgetAnimation,StartAtTime: number,EndAtTime: number,NumLoopsToPlay: number,PlayMode: EUMGSequencePlayMode,PlaybackSpeed: number): UMGSequencePlayer;
+	PlayAnimationReverse(InAnimation: WidgetAnimation,PlaybackSpeed: number): UMGSequencePlayer;
+	PlayAnimationForward(InAnimation: WidgetAnimation,PlaybackSpeed: number): UMGSequencePlayer;
+	PlayAnimation(InAnimation: WidgetAnimation,StartAtTime: number,NumLoopsToPlay: number,PlayMode: EUMGSequencePlayMode,PlaybackSpeed: number): UMGSequencePlayer;
+	PauseAnimation(InAnimation: WidgetAnimation): number;
+	OnTouchStarted(MyGeometry: Geometry,InTouchEvent: UPointerEvent): EventReply;
+	OnTouchMoved(MyGeometry: Geometry,InTouchEvent: UPointerEvent): EventReply;
+	OnTouchGesture(MyGeometry: Geometry,GestureEvent: UPointerEvent): EventReply;
+	OnTouchForceChanged(MyGeometry: Geometry,InTouchEvent: UPointerEvent): EventReply;
+	OnTouchEnded(MyGeometry: Geometry,InTouchEvent: UPointerEvent): EventReply;
+	OnRemovedFromFocusPath(InFocusEvent: UFocusEvent): void;
+	OnPreviewMouseButtonDown(MyGeometry: Geometry,MouseEvent: UPointerEvent): EventReply;
+	OnPreviewKeyDown(MyGeometry: Geometry,InKeyEvent: KeyEvent): EventReply;
+	OnPaint(Context?: PaintContext): {Context: PaintContext};
+	OnMouseWheel(MyGeometry: Geometry,MouseEvent: UPointerEvent): EventReply;
+	OnMouseMove(MyGeometry: Geometry,MouseEvent: UPointerEvent): EventReply;
+	OnMouseLeave(MouseEvent: UPointerEvent): void;
+	OnMouseEnter(MyGeometry: Geometry,MouseEvent: UPointerEvent): void;
+	OnMouseCaptureLost(): void;
+	OnMouseButtonUp(MyGeometry: Geometry,MouseEvent: UPointerEvent): EventReply;
+	OnMouseButtonDown(MyGeometry: Geometry,MouseEvent: UPointerEvent): EventReply;
+	OnMouseButtonDoubleClick(InMyGeometry: Geometry,InMouseEvent: UPointerEvent): EventReply;
+	OnMotionDetected(MyGeometry: Geometry,InMotionEvent: MotionEvent): EventReply;
+	OnKeyUp(MyGeometry: Geometry,InKeyEvent: KeyEvent): EventReply;
+	OnKeyDown(MyGeometry: Geometry,InKeyEvent: KeyEvent): EventReply;
+	OnKeyChar(MyGeometry: Geometry,InCharacterEvent: CharacterEvent): EventReply;
+	OnInitialized(): void;
+	OnFocusReceived(MyGeometry: Geometry,InFocusEvent: UFocusEvent): EventReply;
+	OnFocusLost(InFocusEvent: UFocusEvent): void;
+	OnDrop(MyGeometry: Geometry,UPointerEvent: UPointerEvent,Operation: DragDropOperation): boolean;
+	OnDragOver(MyGeometry: Geometry,UPointerEvent: UPointerEvent,Operation: DragDropOperation): boolean;
+	OnDragLeave(UPointerEvent: UPointerEvent,Operation: DragDropOperation): void;
+	OnDragEnter(MyGeometry: Geometry,UPointerEvent: UPointerEvent,Operation: DragDropOperation): void;
+	OnDragDetected(MyGeometry: Geometry,UPointerEvent: UPointerEvent,Operation?: DragDropOperation): {Operation: DragDropOperation};
+	OnDragCancelled(UPointerEvent: UPointerEvent,Operation: DragDropOperation): void;
+	OnAnimationStarted(Animation: WidgetAnimation): void;
+	OnAnimationFinished(Animation: WidgetAnimation): void;
+	OnAnalogValueChanged(MyGeometry: Geometry,InAnalogInputEvent: AnalogInputEvent): EventReply;
+	OnAddedToFocusPath(InFocusEvent: UFocusEvent): void;
+	IsPlayingAnimation(): boolean;
+	IsListeningForInputAction(ActionName: string): boolean;
+	IsInViewport(): boolean;
+	IsInteractable(): boolean;
+	IsAnyAnimationPlaying(): boolean;
+	IsAnimationPlayingForward(InAnimation: WidgetAnimation): boolean;
+	IsAnimationPlaying(InAnimation: WidgetAnimation): boolean;
+	GetOwningPlayerPawn(): Pawn;
+	GetIsVisible(): boolean;
+	GetAnimationCurrentTime(InAnimation: WidgetAnimation): number;
+	GetAnchorsInViewport(): Anchors;
+	GetAlignmentInViewport(): Vector2D;
+	Destruct(): void;
+	Construct(): void;
+	CancelLatentActions(): void;
+	AddToViewport(ZOrder: number): void;
+	AddToPlayerScreen(ZOrder: number): boolean;
+	static C(Other: UObject | any): UserWidget;
+}
+
+declare class ViewTargetTransitionParams { 
+	BlendTime: number;
+	BlendFunction: EViewTargetBlendFunction;
+	BlendExp: number;
+	bLockOutgoing: boolean;
+	clone() : ViewTargetTransitionParams;
+	static C(Other: UObject | any): ViewTargetTransitionParams;
+}
+
+declare class UpdateLevelVisibilityLevelInfo { 
+	PackageName: string;
+	bIsVisible: boolean;
+	clone() : UpdateLevelVisibilityLevelInfo;
+	static C(Other: UObject | any): UpdateLevelVisibilityLevelInfo;
+}
+
+declare class HapticFeedbackEffect_Base extends UObject { 
+	static Load(ResourceName: string): HapticFeedbackEffect_Base;
+	static Find(Outer: UObject, ResourceName: string): HapticFeedbackEffect_Base;
+	static GetDefaultObject(): HapticFeedbackEffect_Base;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HapticFeedbackEffect_Base;
+	static C(Other: UObject | any): HapticFeedbackEffect_Base;
+}
+
+declare type EDynamicForceFeedbackAction = 'Start' | 'Update' | 'Stop' | 'EDynamicForceFeedbackAction_MAX';
+declare var EDynamicForceFeedbackAction : { Start:'Start',Update:'Update',Stop:'Stop',EDynamicForceFeedbackAction_MAX:'EDynamicForceFeedbackAction_MAX', };
+declare type EObjectTypeQuery = 'ObjectTypeQuery1' | 'ObjectTypeQuery2' | 'ObjectTypeQuery3' | 'ObjectTypeQuery4' | 'ObjectTypeQuery5' | 'ObjectTypeQuery6' | 'ObjectTypeQuery7' | 'ObjectTypeQuery8' | 'ObjectTypeQuery9' | 'ObjectTypeQuery10' | 'ObjectTypeQuery11' | 'ObjectTypeQuery12' | 'ObjectTypeQuery13' | 'ObjectTypeQuery14' | 'ObjectTypeQuery15' | 'ObjectTypeQuery16' | 'ObjectTypeQuery17' | 'ObjectTypeQuery18' | 'ObjectTypeQuery19' | 'ObjectTypeQuery20' | 'ObjectTypeQuery21' | 'ObjectTypeQuery22' | 'ObjectTypeQuery23' | 'ObjectTypeQuery24' | 'ObjectTypeQuery25' | 'ObjectTypeQuery26' | 'ObjectTypeQuery27' | 'ObjectTypeQuery28' | 'ObjectTypeQuery29' | 'ObjectTypeQuery30' | 'ObjectTypeQuery31' | 'ObjectTypeQuery32' | 'ObjectTypeQuery_MAX' | 'EObjectTypeQuery_MAX';
+declare var EObjectTypeQuery : { ObjectTypeQuery1:'ObjectTypeQuery1',ObjectTypeQuery2:'ObjectTypeQuery2',ObjectTypeQuery3:'ObjectTypeQuery3',ObjectTypeQuery4:'ObjectTypeQuery4',ObjectTypeQuery5:'ObjectTypeQuery5',ObjectTypeQuery6:'ObjectTypeQuery6',ObjectTypeQuery7:'ObjectTypeQuery7',ObjectTypeQuery8:'ObjectTypeQuery8',ObjectTypeQuery9:'ObjectTypeQuery9',ObjectTypeQuery10:'ObjectTypeQuery10',ObjectTypeQuery11:'ObjectTypeQuery11',ObjectTypeQuery12:'ObjectTypeQuery12',ObjectTypeQuery13:'ObjectTypeQuery13',ObjectTypeQuery14:'ObjectTypeQuery14',ObjectTypeQuery15:'ObjectTypeQuery15',ObjectTypeQuery16:'ObjectTypeQuery16',ObjectTypeQuery17:'ObjectTypeQuery17',ObjectTypeQuery18:'ObjectTypeQuery18',ObjectTypeQuery19:'ObjectTypeQuery19',ObjectTypeQuery20:'ObjectTypeQuery20',ObjectTypeQuery21:'ObjectTypeQuery21',ObjectTypeQuery22:'ObjectTypeQuery22',ObjectTypeQuery23:'ObjectTypeQuery23',ObjectTypeQuery24:'ObjectTypeQuery24',ObjectTypeQuery25:'ObjectTypeQuery25',ObjectTypeQuery26:'ObjectTypeQuery26',ObjectTypeQuery27:'ObjectTypeQuery27',ObjectTypeQuery28:'ObjectTypeQuery28',ObjectTypeQuery29:'ObjectTypeQuery29',ObjectTypeQuery30:'ObjectTypeQuery30',ObjectTypeQuery31:'ObjectTypeQuery31',ObjectTypeQuery32:'ObjectTypeQuery32',ObjectTypeQuery_MAX:'ObjectTypeQuery_MAX',EObjectTypeQuery_MAX:'EObjectTypeQuery_MAX', };
+declare type ETraceTypeQuery = 'TraceTypeQuery1' | 'TraceTypeQuery2' | 'TraceTypeQuery3' | 'TraceTypeQuery4' | 'TraceTypeQuery5' | 'TraceTypeQuery6' | 'TraceTypeQuery7' | 'TraceTypeQuery8' | 'TraceTypeQuery9' | 'TraceTypeQuery10' | 'TraceTypeQuery11' | 'TraceTypeQuery12' | 'TraceTypeQuery13' | 'TraceTypeQuery14' | 'TraceTypeQuery15' | 'TraceTypeQuery16' | 'TraceTypeQuery17' | 'TraceTypeQuery18' | 'TraceTypeQuery19' | 'TraceTypeQuery20' | 'TraceTypeQuery21' | 'TraceTypeQuery22' | 'TraceTypeQuery23' | 'TraceTypeQuery24' | 'TraceTypeQuery25' | 'TraceTypeQuery26' | 'TraceTypeQuery27' | 'TraceTypeQuery28' | 'TraceTypeQuery29' | 'TraceTypeQuery30' | 'TraceTypeQuery31' | 'TraceTypeQuery32' | 'TraceTypeQuery_MAX' | 'ETraceTypeQuery_MAX';
+declare var ETraceTypeQuery : { TraceTypeQuery1:'TraceTypeQuery1',TraceTypeQuery2:'TraceTypeQuery2',TraceTypeQuery3:'TraceTypeQuery3',TraceTypeQuery4:'TraceTypeQuery4',TraceTypeQuery5:'TraceTypeQuery5',TraceTypeQuery6:'TraceTypeQuery6',TraceTypeQuery7:'TraceTypeQuery7',TraceTypeQuery8:'TraceTypeQuery8',TraceTypeQuery9:'TraceTypeQuery9',TraceTypeQuery10:'TraceTypeQuery10',TraceTypeQuery11:'TraceTypeQuery11',TraceTypeQuery12:'TraceTypeQuery12',TraceTypeQuery13:'TraceTypeQuery13',TraceTypeQuery14:'TraceTypeQuery14',TraceTypeQuery15:'TraceTypeQuery15',TraceTypeQuery16:'TraceTypeQuery16',TraceTypeQuery17:'TraceTypeQuery17',TraceTypeQuery18:'TraceTypeQuery18',TraceTypeQuery19:'TraceTypeQuery19',TraceTypeQuery20:'TraceTypeQuery20',TraceTypeQuery21:'TraceTypeQuery21',TraceTypeQuery22:'TraceTypeQuery22',TraceTypeQuery23:'TraceTypeQuery23',TraceTypeQuery24:'TraceTypeQuery24',TraceTypeQuery25:'TraceTypeQuery25',TraceTypeQuery26:'TraceTypeQuery26',TraceTypeQuery27:'TraceTypeQuery27',TraceTypeQuery28:'TraceTypeQuery28',TraceTypeQuery29:'TraceTypeQuery29',TraceTypeQuery30:'TraceTypeQuery30',TraceTypeQuery31:'TraceTypeQuery31',TraceTypeQuery32:'TraceTypeQuery32',TraceTypeQuery_MAX:'TraceTypeQuery_MAX',ETraceTypeQuery_MAX:'ETraceTypeQuery_MAX', };
+declare class UpdateLevelStreamingLevelStatus { 
+	PackageName: string;
+	LODIndex: number;
+	bNewShouldBeLoaded: boolean;
+	bNewShouldBeVisible: boolean;
+	bNewShouldBlockOnLoad: boolean;
+	clone() : UpdateLevelStreamingLevelStatus;
+	static C(Other: UObject | any): UpdateLevelStreamingLevelStatus;
+}
+
+declare type ETravelType = 'TRAVEL_Absolute' | 'TRAVEL_Partial' | 'TRAVEL_Relative' | 'TRAVEL_MAX';
+declare var ETravelType : { TRAVEL_Absolute:'TRAVEL_Absolute',TRAVEL_Partial:'TRAVEL_Partial',TRAVEL_Relative:'TRAVEL_Relative',TRAVEL_MAX:'TRAVEL_MAX', };
+declare class ForceFeedbackParameters { 
+	Tag: string;
+	bLooping: boolean;
+	bIgnoreTimeDilation: boolean;
+	bPlayWhilePaused: boolean;
+	clone() : ForceFeedbackParameters;
+	static C(Other: UObject | any): ForceFeedbackParameters;
+}
+
+declare class LocalPlayerSubsystem extends Subsystem { 
+	static Load(ResourceName: string): LocalPlayerSubsystem;
+	static Find(Outer: UObject, ResourceName: string): LocalPlayerSubsystem;
+	static GetDefaultObject(): LocalPlayerSubsystem;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocalPlayerSubsystem;
+	static C(Other: UObject | any): LocalPlayerSubsystem;
+}
+
+declare type EMouseLockMode = 'DoNotLock' | 'LockOnCapture' | 'LockAlways' | 'LockInFullscreen' | 'EMouseLockMode_MAX';
+declare var EMouseLockMode : { DoNotLock:'DoNotLock',LockOnCapture:'LockOnCapture',LockAlways:'LockAlways',LockInFullscreen:'LockInFullscreen',EMouseLockMode_MAX:'EMouseLockMode_MAX', };
+declare class PlayerController extends Controller { 
+	Player: Player;
+	AcknowledgedPawn: Pawn;
+	ControllingDirTrackInst: InterpTrackInstDirector;
+	MyHUD: HUD;
+	PlayerCameraManager: PlayerCameraManager;
+	PlayerCameraManagerClass: UnrealEngineClass;
+	bAutoManageActiveCameraTarget: boolean;
+	TargetViewRotation: Rotator;
+	SmoothTargetViewRotationSpeed: number;
+	HiddenActors: Actor[];
+	HiddenPrimitiveComponents: any[];
+	LastSpectatorStateSynchTime: number;
+	LastSpectatorSyncLocation: Vector;
+	LastSpectatorSyncRotation: Rotator;
+	ClientCap: number;
+	CheatManager: CheatManager;
+	CheatClass: UnrealEngineClass;
+	PlayerInput: PlayerInput;
+	ActiveForceFeedbackEffects: ActiveForceFeedbackEffect[];
+	bPlayerIsWaiting: boolean;
+	NetPlayerIndex: number;
+	PendingSwapConnection: NetConnection;
+	NetConnection: NetConnection;
+	InputYawScale: number;
+	InputPitchScale: number;
+	InputRollScale: number;
+	bShowMouseCursor: boolean;
+	bEnableClickEvents: boolean;
+	bEnableTouchEvents: boolean;
+	bEnableMouseOverEvents: boolean;
+	bEnableTouchOverEvents: boolean;
+	bForceFeedbackEnabled: boolean;
+	ForceFeedbackScale: number;
+	ClickEventKeys: Key[];
+	DefaultMouseCursor: EMouseCursor;
+	CurrentMouseCursor: EMouseCursor;
+	DefaultClickTraceChannel: ECollisionChannel;
+	CurrentClickTraceChannel: ECollisionChannel;
+	HitResultTraceDistance: number;
+	SeamlessTravelCount: any;
+	LastCompletedSeamlessTravelCount: any;
+	InactiveStateInputComponent: InputComponent;
+	bShouldPerformFullTickWhenPaused: boolean;
+	CurrentTouchInterface: TouchInterface;
+	SpectatorPawn: SpectatorPawn;
+	bIsLocalPlayerController: boolean;
+	SpawnLocation: Vector;
+	static GetDefaultObject(): PlayerController;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayerController;
+	WasInputKeyJustReleased(Key: Key): boolean;
+	WasInputKeyJustPressed(Key: Key): boolean;
+	ToggleSpeaking(bInSpeaking: boolean): void;
+	SwitchLevel(URL: string): void;
+	StopHapticEffect(Hand: EControllerHand): void;
+	StartFire(FireModeNum: number): void;
+	SetVirtualJoystickVisibility(bVisible: boolean): void;
+	SetViewTargetWithBlend(NewViewTarget: Actor,BlendTime: number,BlendFunc: EViewTargetBlendFunction,BlendExp: number,bLockOutgoing: boolean): void;
+	SetName(S: string): void;
+	SetMouseLocation(X: number,Y: number): void;
+	SetMouseCursorWidget(Cursor: EMouseCursor,CursorWidget: UserWidget): void;
+	SetHapticsByValue(Frequency: number,Amplitude: number,Hand: EControllerHand): void;
+	SetDisableHaptics(bNewDisabled: boolean): void;
+	SetControllerLightColor(Color: Color): void;
+	SetCinematicMode(bInCinematicMode: boolean,bHidePlayer: boolean,bAffectsHUD: boolean,bAffectsMovement: boolean,bAffectsTurning: boolean): void;
+	SetAudioListenerOverride(AttachToComponent: SceneComponent,Location: Vector,Rotation: Rotator): void;
+	SetAudioListenerAttenuationOverride(AttachToComponent: SceneComponent,AttenuationLocationOVerride: Vector): void;
+	ServerViewSelf(TransitionParams: ViewTargetTransitionParams): void;
+	ServerViewPrevPlayer(): void;
+	ServerViewNextPlayer(): void;
+	ServerVerifyViewTarget(): void;
+	ServerUpdateMultipleLevelsVisibility(LevelVisibilities: UpdateLevelVisibilityLevelInfo[]): void;
+	ServerUpdateLevelVisibility(PackageName: string,bIsVisible: boolean): void;
+	ServerUpdateCamera(CamLoc: Vector_NetQuantize,CamPitchAndYaw: number): void;
+	ServerUnmutePlayer(PlayerId: UniqueNetIdRepl): void;
+	ServerToggleAILogging(): void;
+	ServerShortTimeout(): void;
+	ServerSetSpectatorWaiting(bWaiting: boolean): void;
+	ServerSetSpectatorLocation(NewLoc: Vector,NewRot: Rotator): void;
+	ServerRestartPlayer(): void;
+	ServerPause(): void;
+	ServerNotifyLoadedWorld(WorldPackageName: string): void;
+	ServerMutePlayer(PlayerId: UniqueNetIdRepl): void;
+	ServerCheckClientPossessionReliable(): void;
+	ServerCheckClientPossession(): void;
+	ServerChangeName(S: string): void;
+	ServerCamera(NewMode: string): void;
+	ServerAcknowledgePossession(P: Pawn): void;
+	SendToConsole(Command: string): void;
+	RestartLevel(): void;
+	ResetControllerLightColor(): void;
+	ProjectWorldLocationToScreen(WorldLocation: Vector,ScreenLocation?: Vector2D,bPlayerViewportRelative?: boolean): {ScreenLocation: Vector2D, $: boolean};
+	PlayHapticEffect(HapticEffect: HapticFeedbackEffect_Base,Hand: EControllerHand,Scale: number,bLoop: boolean): void;
+	PlayDynamicForceFeedback(Intensity: number,Duration: number,bAffectsLeftLarge: boolean,bAffectsLeftSmall: boolean,bAffectsRightLarge: boolean,bAffectsRightSmall: boolean,Action: EDynamicForceFeedbackAction,LatentInfo: LatentActionInfo): void;
+	Pause(): void;
+	OnServerStartedVisualLogger(bIsLogging: boolean): void;
+	LocalTravel(URL: string): void;
+	K2_ClientPlayForceFeedback(ForceFeedbackEffect: ForceFeedbackEffect,Tag: string,bLooping: boolean,bIgnoreTimeDilation: boolean,bPlayWhilePaused: boolean): void;
+	IsInputKeyDown(Key: Key): boolean;
+	GetViewportSize(SizeX?: number,SizeY?: number): {SizeX: number, SizeY: number};
+	GetSpectatorPawn(): SpectatorPawn;
+	GetMousePosition(LocationX?: number,LocationY?: number): {LocationX: number, LocationY: number, $: boolean};
+	GetInputVectorKeyState(Key: Key): Vector;
+	GetInputTouchState(FingerIndex: ETouchIndex,LocationX?: number,LocationY?: number,bIsCurrentlyPressed?: boolean): {LocationX: number, LocationY: number, bIsCurrentlyPressed: boolean};
+	GetInputMouseDelta(DeltaX?: number,DeltaY?: number): {DeltaX: number, DeltaY: number};
+	GetInputMotionState(Tilt?: Vector,RotationRate?: Vector,Gravity?: Vector,Acceleration?: Vector): {Tilt: Vector, RotationRate: Vector, Gravity: Vector, Acceleration: Vector};
+	GetInputKeyTimeDown(Key: Key): number;
+	GetInputAnalogStickState(WhichStick: EControllerAnalogStick,StickX?: number,StickY?: number): {StickX: number, StickY: number};
+	GetInputAnalogKeyState(Key: Key): number;
+	GetHUD(): HUD;
+	GetHitResultUnderFingerForObjects(FingerIndex: ETouchIndex,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,HitResult?: HitResult): {HitResult: HitResult, $: boolean};
+	GetHitResultUnderFingerByChannel(FingerIndex: ETouchIndex,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,HitResult?: HitResult): {HitResult: HitResult, $: boolean};
+	GetHitResultUnderFinger(FingerIndex: ETouchIndex,TraceChannel: ECollisionChannel,bTraceComplex: boolean,HitResult?: HitResult): {HitResult: HitResult, $: boolean};
+	GetHitResultUnderCursorForObjects(ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,HitResult?: HitResult): {HitResult: HitResult, $: boolean};
+	GetHitResultUnderCursorByChannel(TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,HitResult?: HitResult): {HitResult: HitResult, $: boolean};
+	GetHitResultUnderCursor(TraceChannel: ECollisionChannel,bTraceComplex: boolean,HitResult?: HitResult): {HitResult: HitResult, $: boolean};
+	GetFocalLocation(): Vector;
+	FOV(NewFOV: number): void;
+	EnableCheats(): void;
+	DeprojectScreenPositionToWorld(ScreenX: number,ScreenY: number,WorldLocation?: Vector,WorldDirection?: Vector): {WorldLocation: Vector, WorldDirection: Vector, $: boolean};
+	DeprojectMousePositionToWorld(WorldLocation?: Vector,WorldDirection?: Vector): {WorldLocation: Vector, WorldDirection: Vector, $: boolean};
+	ConsoleKey(Key: Key): void;
+	ClientWasKicked(KickReason: string): void;
+	ClientVoiceHandshakeComplete(): void;
+	ClientUpdateMultipleLevelsStreamingStatus(LevelStatuses: UpdateLevelStreamingLevelStatus[]): void;
+	ClientUpdateLevelStreamingStatus(PackageName: string,bNewShouldBeLoaded: boolean,bNewShouldBeVisible: boolean,bNewShouldBlockOnLoad: boolean,LODIndex: number): void;
+	ClientUnmutePlayer(PlayerId: UniqueNetIdRepl): void;
+	ClientTravelInternal(URL: string,TravelType: ETravelType,bSeamless: boolean,MapPackageGuid: Guid): void;
+	ClientTravel(URL: string,TravelType: ETravelType,bSeamless: boolean,MapPackageGuid: Guid): void;
+	ClientTeamMessage(SenderPlayerState: PlayerState,S: string,Type: string,MsgLifeTime: number): void;
+	ClientStopForceFeedback(ForceFeedbackEffect: ForceFeedbackEffect,Tag: string): void;
+	ClientStopCameraShake(Shake: UnrealEngineClass,bImmediately: boolean): void;
+	ClientStopCameraAnim(AnimToStop: CameraAnim): void;
+	ClientStartOnlineSession(): void;
+	ClientSpawnCameraLensEffect(LensEffectEmitterClass: UnrealEngineClass): void;
+	ClientSetViewTarget(A: Actor,TransitionParams: ViewTargetTransitionParams): void;
+	ClientSetSpectatorWaiting(bWaiting: boolean): void;
+	ClientSetHUD(NewHUDClass: UnrealEngineClass): void;
+	ClientSetForceMipLevelsToBeResident(Material: MaterialInterface,ForceDuration: number,CinematicTextureGroups: number): void;
+	ClientSetCinematicMode(bInCinematicMode: boolean,bAffectsMovement: boolean,bAffectsTurning: boolean,bAffectsHUD: boolean): void;
+	ClientSetCameraMode(NewCamMode: string): void;
+	ClientSetCameraFade(bEnableFading: boolean,FadeColor: Color,FadeAlpha: Vector2D,FadeTime: number,bFadeAudio: boolean): void;
+	ClientSetBlockOnAsyncLoading(): void;
+	ClientReturnToMainMenuWithTextReason(ReturnReason: string): void;
+	ClientReturnToMainMenu(ReturnReason: string): void;
+	ClientRetryClientRestart(NewPawn: Pawn): void;
+	ClientRestart(NewPawn: Pawn): void;
+	ClientReset(): void;
+	ClientRepObjRef(UObject: UObject): void;
+	ClientReceiveLocalizedMessage(Message: UnrealEngineClass,Switch: number,RelatedPlayerState_1: PlayerState,RelatedPlayerState_2: PlayerState,OptionalObject: UObject): void;
+	ClientPrestreamTextures(ForcedActor: Actor,ForceDuration: number,bEnableStreaming: boolean,CinematicTextureGroups: number): void;
+	ClientPrepareMapChange(LevelName: string,bFirst: boolean,bLast: boolean): void;
+	ClientPlaySoundAtLocation(Sound: SoundBase,Location: Vector,VolumeMultiplier: number,PitchMultiplier: number): void;
+	ClientPlaySound(Sound: SoundBase,VolumeMultiplier: number,PitchMultiplier: number): void;
+	ClientPlayForceFeedback_Internal(ForceFeedbackEffect: ForceFeedbackEffect,Params: ForceFeedbackParameters): void;
+	ClientPlayCameraShake(Shake: UnrealEngineClass,Scale: number,PlaySpace: ECameraAnimPlaySpace,UserPlaySpaceRot: Rotator): void;
+	ClientPlayCameraAnim(AnimToPlay: CameraAnim,Scale: number,Rate: number,BlendInTime: number,BlendOutTime: number,bLoop: boolean,bRandomStartTime: boolean,Space: ECameraAnimPlaySpace,CustomPlaySpace: Rotator): void;
+	ClientMutePlayer(PlayerId: UniqueNetIdRepl): void;
+	ClientMessage(S: string,Type: string,MsgLifeTime: number): void;
+	ClientIgnoreMoveInput(bIgnore: boolean): void;
+	ClientIgnoreLookInput(bIgnore: boolean): void;
+	ClientGotoState(NewState: string): void;
+	ClientGameEnded(EndGameFocus: Actor,bIsWinner: boolean): void;
+	ClientForceGarbageCollection(): void;
+	ClientFlushLevelStreaming(): void;
+	ClientEndOnlineSession(): void;
+	ClientEnableNetworkVoice(bEnable: boolean): void;
+	ClientCommitMapChange(): void;
+	ClientClearCameraLensEffects(): void;
+	ClientCapBandwidth(Cap: number): void;
+	ClientCancelPendingMapChange(): void;
+	ClientAddTextureStreamingLoc(InLoc: Vector,Duration: number,bOverrideLocation: boolean): void;
+	ClearAudioListenerOverride(): void;
+	ClearAudioListenerAttenuationOverride(): void;
+	CanRestartPlayer(): boolean;
+	Camera(NewMode: string): void;
+	AddYawInput(Val: number): void;
+	AddRollInput(Val: number): void;
+	AddPitchInput(Val: number): void;
+	ActivateTouchInterface(NewTouchInterface: TouchInterface): void;
+	static C(Other: UObject | any): PlayerController;
+	SetEyeTrackedPlayer(): void;
+	WriteLeaderboardInteger(StatName: string,StatValue: number): boolean;
+	GetLocalPlayerSubSystemFromPlayerController(Class: UnrealEngineClass): LocalPlayerSubsystem;
+	IsLoggedIn(): boolean;
+	ShowPlatformSpecificAchievementsScreen(): void;
+	DeprojectScreenToWorld(ScreenPosition: Vector2D,WorldPosition?: Vector,WorldDirection?: Vector): {WorldPosition: Vector, WorldDirection: Vector, $: boolean};
+	GetPlayerControllerID(): number;
+	ProjectWorldToScreen(WorldPosition: Vector,ScreenPosition?: Vector2D,bPlayerViewportRelative?: boolean): {ScreenPosition: Vector2D, $: boolean};
+	RemovePlayer(bDestroyPawn: boolean): void;
+	SetPlayerControllerID(ControllerId: number): void;
+	GetMousePositionScaledByDPI(LocationX?: number,LocationY?: number): {LocationX: number, LocationY: number, $: boolean};
+	GetPlayerScreenWidgetGeometry(): Geometry;
+	ProjectWorldLocationToWidgetPosition(WorldLocation: Vector,ScreenPosition?: Vector2D): {ScreenPosition: Vector2D, $: boolean};
+	SetInputMode_GameAndUI(InWidgetToFocus: Widget,bLockMouseToViewport: boolean,bHideCursorDuringCapture: boolean): void;
+	SetInputMode_GameAndUIEx(InWidgetToFocus: Widget,InMouseLockMode: EMouseLockMode,bHideCursorDuringCapture: boolean): void;
+	SetInputMode_GameOnly(): void;
+	SetInputMode_UIOnly(InWidgetToFocus: Widget,bLockMouseToViewport: boolean): void;
+	SetInputMode_UIOnlyEx(InWidgetToFocus: Widget,InMouseLockMode: EMouseLockMode): void;
+	static SetEyeTrackedPlayer(PlayerController: PlayerController): void;
+	static WriteLeaderboardInteger(PlayerController: PlayerController,StatName: string,StatValue: number): boolean;
+	static GetLocalPlayerSubSystemFromPlayerController(PlayerController: PlayerController,Class: UnrealEngineClass): LocalPlayerSubsystem;
+	static IsLoggedIn(SpecificPlayer: PlayerController): boolean;
+	static ShowPlatformSpecificAchievementsScreen(SpecificPlayer: PlayerController): void;
+	static DeprojectScreenToWorld(Player: PlayerController,ScreenPosition: Vector2D,WorldPosition?: Vector,WorldDirection?: Vector): {WorldPosition: Vector, WorldDirection: Vector, $: boolean};
+	static GetPlayerControllerID(Player: PlayerController): number;
+	static ProjectWorldToScreen(Player: PlayerController,WorldPosition: Vector,ScreenPosition?: Vector2D,bPlayerViewportRelative?: boolean): {ScreenPosition: Vector2D, $: boolean};
+	static RemovePlayer(Player: PlayerController,bDestroyPawn: boolean): void;
+	static SetPlayerControllerID(Player: PlayerController,ControllerId: number): void;
+	static GetMousePositionScaledByDPI(Player: PlayerController,LocationX?: number,LocationY?: number): {LocationX: number, LocationY: number, $: boolean};
+	static GetPlayerScreenWidgetGeometry(PlayerController: PlayerController): Geometry;
+	static ProjectWorldLocationToWidgetPosition(PlayerController: PlayerController,WorldLocation: Vector,ScreenPosition?: Vector2D): {ScreenPosition: Vector2D, $: boolean};
+	static SetInputMode_GameAndUI(Target: PlayerController,InWidgetToFocus: Widget,bLockMouseToViewport: boolean,bHideCursorDuringCapture: boolean): void;
+	static SetInputMode_GameAndUIEx(PlayerController: PlayerController,InWidgetToFocus: Widget,InMouseLockMode: EMouseLockMode,bHideCursorDuringCapture: boolean): void;
+	static SetInputMode_GameOnly(PlayerController: PlayerController): void;
+	static SetInputMode_UIOnly(Target: PlayerController,InWidgetToFocus: Widget,bLockMouseToViewport: boolean): void;
+	static SetInputMode_UIOnlyEx(PlayerController: PlayerController,InWidgetToFocus: Widget,InMouseLockMode: EMouseLockMode): void;
+}
+
+declare class ScriptViewportClient extends UObject { 
+	static Load(ResourceName: string): ScriptViewportClient;
+	static Find(Outer: UObject, ResourceName: string): ScriptViewportClient;
+	static GetDefaultObject(): ScriptViewportClient;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ScriptViewportClient;
+	static C(Other: UObject | any): ScriptViewportClient;
+}
+
+declare class Console extends UObject { 
+	ConsoleTargetPlayer: LocalPlayer;
+	DefaultTexture_Black: Texture2D;
+	DefaultTexture_White: Texture2D;
+	HistoryBuffer: string[];
+	static Load(ResourceName: string): Console;
+	static Find(Outer: UObject, ResourceName: string): Console;
+	static GetDefaultObject(): Console;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Console;
+	static C(Other: UObject | any): Console;
+}
+
+declare class DebugDisplayProperty { 
+	Obj: UObject;
+	WithinClass: UnrealEngineClass;
+	clone() : DebugDisplayProperty;
+	static C(Other: UObject | any): DebugDisplayProperty;
+}
+
+declare class OnlineSession extends UObject { 
+	static Load(ResourceName: string): OnlineSession;
+	static Find(Outer: UObject, ResourceName: string): OnlineSession;
+	static GetDefaultObject(): OnlineSession;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineSession;
+	static C(Other: UObject | any): OnlineSession;
+}
+
+declare type ETravelFailure = 'NoLevel' | 'LoadMapFailure' | 'InvalidURL' | 'PackageMissing' | 'PackageVersion' | 'NoDownload' | 'TravelFailure' | 'CheatCommands' | 'PendingNetGameCreateFailure' | 'CloudSaveFailure' | 'ServerTravelFailure' | 'ClientTravelFailure' | 'ETravelFailure_MAX';
+declare var ETravelFailure : { NoLevel:'NoLevel',LoadMapFailure:'LoadMapFailure',InvalidURL:'InvalidURL',PackageMissing:'PackageMissing',PackageVersion:'PackageVersion',NoDownload:'NoDownload',TravelFailure:'TravelFailure',CheatCommands:'CheatCommands',PendingNetGameCreateFailure:'PendingNetGameCreateFailure',CloudSaveFailure:'CloudSaveFailure',ServerTravelFailure:'ServerTravelFailure',ClientTravelFailure:'ClientTravelFailure',ETravelFailure_MAX:'ETravelFailure_MAX', };
+declare type ENetworkFailure = 'NetDriverAlreadyExists' | 'NetDriverCreateFailure' | 'NetDriverListenFailure' | 'ConnectionLost' | 'ConnectionTimeout' | 'FailureReceived' | 'OutdatedClient' | 'OutdatedServer' | 'PendingConnectionFailure' | 'NetGuidMismatch' | 'NetChecksumMismatch' | 'ENetworkFailure_MAX';
+declare var ENetworkFailure : { NetDriverAlreadyExists:'NetDriverAlreadyExists',NetDriverCreateFailure:'NetDriverCreateFailure',NetDriverListenFailure:'NetDriverListenFailure',ConnectionLost:'ConnectionLost',ConnectionTimeout:'ConnectionTimeout',FailureReceived:'FailureReceived',OutdatedClient:'OutdatedClient',OutdatedServer:'OutdatedServer',PendingConnectionFailure:'PendingConnectionFailure',NetGuidMismatch:'NetGuidMismatch',NetChecksumMismatch:'NetChecksumMismatch',ENetworkFailure_MAX:'ENetworkFailure_MAX', };
+declare class GameInstance extends UObject { 
+	LocalPlayers: LocalPlayer[];
+	OnlineSession: OnlineSession;
+	ReferencedObjects: UObject[];
+	static Load(ResourceName: string): GameInstance;
+	static Find(Outer: UObject, ResourceName: string): GameInstance;
+	static GetDefaultObject(): GameInstance;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameInstance;
+	ReceiveShutdown(): void;
+	ReceiveInit(): void;
+	HandleTravelError(FailureType: ETravelFailure): void;
+	HandleNetworkError(FailureType: ENetworkFailure,bIsServer: boolean): void;
+	DebugRemovePlayer(ControllerId: number): void;
+	DebugCreatePlayer(ControllerId: number): void;
+	static C(Other: UObject | any): GameInstance;
+}
+
+declare class GameViewportClient extends ScriptViewportClient { 
+	ViewportConsole: Console;
+	DebugProperties: DebugDisplayProperty[];
+	World: World;
+	GameInstance: GameInstance;
+	static Load(ResourceName: string): GameViewportClient;
+	static Find(Outer: UObject, ResourceName: string): GameViewportClient;
+	static GetDefaultObject(): GameViewportClient;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameViewportClient;
+	SSSwapControllers(): void;
+	ShowTitleSafeArea(): void;
+	SetConsoleTarget(PlayerIndex: number): void;
+	static C(Other: UObject | any): GameViewportClient;
+}
+
+declare type EAspectRatioAxisConstraint = 'AspectRatio_MaintainYFOV' | 'AspectRatio_MaintainXFOV' | 'AspectRatio_MajorAxisFOV' | 'AspectRatio_MAX';
+declare var EAspectRatioAxisConstraint : { AspectRatio_MaintainYFOV:'AspectRatio_MaintainYFOV',AspectRatio_MaintainXFOV:'AspectRatio_MaintainXFOV',AspectRatio_MajorAxisFOV:'AspectRatio_MajorAxisFOV',AspectRatio_MAX:'AspectRatio_MAX', };
+declare class LocalPlayer extends Player { 
+	ViewportClient: GameViewportClient;
+	AspectRatioAxisConstraint: EAspectRatioAxisConstraint;
+	PendingLevelPlayerControllerClass: UnrealEngineClass;
+	bSentSplitJoin: boolean;
+	ControllerId: number;
+	static Load(ResourceName: string): LocalPlayer;
+	static Find(Outer: UObject, ResourceName: string): LocalPlayer;
+	static GetDefaultObject(): LocalPlayer;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocalPlayer;
+	static C(Other: UObject | any): LocalPlayer;
+}
+
+declare class JavascriptSlateWidget { 
+	clone() : JavascriptSlateWidget;
+	static C(Other: UObject | any): JavascriptSlateWidget;
+	EditorAddModalWindow(): void;
+	AddWindow(bShowImmediately: boolean): void;
+	AddWindowAsNativeChild(RootWindow: JavascriptSlateWidget): void;
+	ShowWindow(): void;
+	static EditorAddModalWindow(Widget: JavascriptSlateWidget): void;
+	static AddWindow(NewWindow: JavascriptSlateWidget,bShowImmediately: boolean): void;
+	static AddWindowAsNativeChild(NewWindow: JavascriptSlateWidget,RootWindow: JavascriptSlateWidget): void;
+	static ShowWindow(NewWindow: JavascriptSlateWidget): void;
+	static CreateLogListingWidget(InLogName: string): JavascriptSlateWidget;
+	static GetRootWindow(): JavascriptSlateWidget;
+}
+
+declare type EHorizontalAlignment = 'HAlign_Fill' | 'HAlign_Left' | 'HAlign_Center' | 'HAlign_Right' | 'HAlign_MAX';
+declare var EHorizontalAlignment : { HAlign_Fill:'HAlign_Fill',HAlign_Left:'HAlign_Left',HAlign_Center:'HAlign_Center',HAlign_Right:'HAlign_Right',HAlign_MAX:'HAlign_MAX', };
+declare type EVerticalAlignment = 'VAlign_Fill' | 'VAlign_Top' | 'VAlign_Center' | 'VAlign_Bottom' | 'VAlign_MAX';
+declare var EVerticalAlignment : { VAlign_Fill:'VAlign_Fill',VAlign_Top:'VAlign_Top',VAlign_Center:'VAlign_Center',VAlign_Bottom:'VAlign_Bottom',VAlign_MAX:'VAlign_MAX', };
+declare class BorderSlot extends PanelSlot { 
+	Padding: Margin;
+	HorizontalAlignment: EHorizontalAlignment;
+	VerticalAlignment: EVerticalAlignment;
+	static Load(ResourceName: string): BorderSlot;
+	static Find(Outer: UObject, ResourceName: string): BorderSlot;
+	static GetDefaultObject(): BorderSlot;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BorderSlot;
+	SetVerticalAlignment(InVerticalAlignment: EVerticalAlignment): void;
+	SetPadding(InPadding: Margin): void;
+	SetHorizontalAlignment(InHorizontalAlignment: EHorizontalAlignment): void;
+	static C(Other: UObject | any): BorderSlot;
+}
+
+declare class AnchorData { 
+	Offsets: Margin;
+	Anchors: Anchors;
+	Alignment: Vector2D;
+	clone() : AnchorData;
+	static C(Other: UObject | any): AnchorData;
+}
+
+declare class CanvasPanelSlot extends PanelSlot { 
+	LayoutData: AnchorData;
+	bAutoSize: boolean;
+	ZOrder: number;
+	static Load(ResourceName: string): CanvasPanelSlot;
+	static Find(Outer: UObject, ResourceName: string): CanvasPanelSlot;
+	static GetDefaultObject(): CanvasPanelSlot;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CanvasPanelSlot;
+	SetZOrder(InZOrder: number): void;
+	SetSize(InSize: Vector2D): void;
+	SetPosition(InPosition: Vector2D): void;
+	SetOffsets(InOffset: Margin): void;
+	SetMinimum(InMinimumAnchors: Vector2D): void;
+	SetMaximum(InMaximumAnchors: Vector2D): void;
+	SetLayout(InLayoutData: AnchorData): void;
+	SetAutoSize(InbAutoSize: boolean): void;
+	SetAnchors(InAnchors: Anchors): void;
+	SetAlignment(InAlignment: Vector2D): void;
+	GetZOrder(): number;
+	GetSize(): Vector2D;
+	GetPosition(): Vector2D;
+	GetOffsets(): Margin;
+	GetLayout(): AnchorData;
+	GetAutoSize(): boolean;
+	GetAnchors(): Anchors;
+	GetAlignment(): Vector2D;
+	static C(Other: UObject | any): CanvasPanelSlot;
+}
+
+declare class GridSlot extends PanelSlot { 
+	Padding: Margin;
+	HorizontalAlignment: EHorizontalAlignment;
+	VerticalAlignment: EVerticalAlignment;
+	Row: number;
+	RowSpan: number;
+	Column: number;
+	ColumnSpan: number;
+	Layer: number;
+	Nudge: Vector2D;
+	static Load(ResourceName: string): GridSlot;
+	static Find(Outer: UObject, ResourceName: string): GridSlot;
+	static GetDefaultObject(): GridSlot;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GridSlot;
+	SetVerticalAlignment(InVerticalAlignment: EVerticalAlignment): void;
+	SetRowSpan(InRowSpan: number): void;
+	SetRow(InRow: number): void;
+	SetPadding(InPadding: Margin): void;
+	SetNudge(InNudge: Vector2D): void;
+	SetLayer(InLayer: number): void;
+	SetHorizontalAlignment(InHorizontalAlignment: EHorizontalAlignment): void;
+	SetColumnSpan(InColumnSpan: number): void;
+	SetColumn(InColumn: number): void;
+	static C(Other: UObject | any): GridSlot;
+}
+
+declare type ESlateSizeRule = 'Automatic' | 'Fill' | 'ESlateSizeRule_MAX';
+declare var ESlateSizeRule : { Automatic:'Automatic',Fill:'Fill',ESlateSizeRule_MAX:'ESlateSizeRule_MAX', };
+declare class SlateChildSize { 
+	Value: number;
+	SizeRule: ESlateSizeRule;
+	clone() : SlateChildSize;
+	static C(Other: UObject | any): SlateChildSize;
+}
+
+declare class HorizontalBoxSlot extends PanelSlot { 
+	Padding: Margin;
+	Size: SlateChildSize;
+	HorizontalAlignment: EHorizontalAlignment;
+	VerticalAlignment: EVerticalAlignment;
+	static Load(ResourceName: string): HorizontalBoxSlot;
+	static Find(Outer: UObject, ResourceName: string): HorizontalBoxSlot;
+	static GetDefaultObject(): HorizontalBoxSlot;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HorizontalBoxSlot;
+	SetVerticalAlignment(InVerticalAlignment: EVerticalAlignment): void;
+	SetSize(InSize: SlateChildSize): void;
+	SetPadding(InPadding: Margin): void;
+	SetHorizontalAlignment(InHorizontalAlignment: EHorizontalAlignment): void;
+	static C(Other: UObject | any): HorizontalBoxSlot;
+}
+
+declare class OverlaySlot extends PanelSlot { 
+	Padding: Margin;
+	HorizontalAlignment: EHorizontalAlignment;
+	VerticalAlignment: EVerticalAlignment;
+	static Load(ResourceName: string): OverlaySlot;
+	static Find(Outer: UObject, ResourceName: string): OverlaySlot;
+	static GetDefaultObject(): OverlaySlot;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OverlaySlot;
+	SetVerticalAlignment(InVerticalAlignment: EVerticalAlignment): void;
+	SetPadding(InPadding: Margin): void;
+	SetHorizontalAlignment(InHorizontalAlignment: EHorizontalAlignment): void;
+	static C(Other: UObject | any): OverlaySlot;
+}
+
+declare class ScrollBoxSlot extends PanelSlot { 
+	Padding: Margin;
+	HorizontalAlignment: EHorizontalAlignment;
+	VerticalAlignment: EVerticalAlignment;
+	static Load(ResourceName: string): ScrollBoxSlot;
+	static Find(Outer: UObject, ResourceName: string): ScrollBoxSlot;
+	static GetDefaultObject(): ScrollBoxSlot;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ScrollBoxSlot;
+	SetVerticalAlignment(InVerticalAlignment: EVerticalAlignment): void;
+	SetPadding(InPadding: Margin): void;
+	SetHorizontalAlignment(InHorizontalAlignment: EHorizontalAlignment): void;
+	static C(Other: UObject | any): ScrollBoxSlot;
+}
+
+declare class UniformGridSlot extends PanelSlot { 
+	HorizontalAlignment: EHorizontalAlignment;
+	VerticalAlignment: EVerticalAlignment;
+	Row: number;
+	Column: number;
+	static Load(ResourceName: string): UniformGridSlot;
+	static Find(Outer: UObject, ResourceName: string): UniformGridSlot;
+	static GetDefaultObject(): UniformGridSlot;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UniformGridSlot;
+	SetVerticalAlignment(InVerticalAlignment: EVerticalAlignment): void;
+	SetRow(InRow: number): void;
+	SetHorizontalAlignment(InHorizontalAlignment: EHorizontalAlignment): void;
+	SetColumn(InColumn: number): void;
+	static C(Other: UObject | any): UniformGridSlot;
+}
+
+declare class VerticalBoxSlot extends PanelSlot { 
+	Padding: Margin;
+	Size: SlateChildSize;
+	HorizontalAlignment: EHorizontalAlignment;
+	VerticalAlignment: EVerticalAlignment;
+	static Load(ResourceName: string): VerticalBoxSlot;
+	static Find(Outer: UObject, ResourceName: string): VerticalBoxSlot;
+	static GetDefaultObject(): VerticalBoxSlot;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VerticalBoxSlot;
+	SetVerticalAlignment(InVerticalAlignment: EVerticalAlignment): void;
+	SetSize(InSize: SlateChildSize): void;
+	SetPadding(InPadding: Margin): void;
+	SetHorizontalAlignment(InHorizontalAlignment: EHorizontalAlignment): void;
+	static C(Other: UObject | any): VerticalBoxSlot;
+}
+
+declare type EWindowTitleBarMode = 'Overlay' | 'VerticalBox' | 'EWindowTitleBarMode_MAX';
+declare var EWindowTitleBarMode : { Overlay:'Overlay',VerticalBox:'VerticalBox',EWindowTitleBarMode_MAX:'EWindowTitleBarMode_MAX', };
+declare class Widget extends Visual { 
+	Slot: PanelSlot;
+	bIsEnabledDelegate: UnrealEngineDelegate<() => boolean>;
+	ToolTipText: string;
+	ToolTipTextDelegate: UnrealEngineDelegate<() => string>;
+	ToolTipWidget: Widget;
+	ToolTipWidgetDelegate: UnrealEngineDelegate<() => Widget>;
+	VisibilityDelegate: UnrealEngineDelegate<() => ESlateVisibility>;
+	RenderTransform: WidgetTransform;
+	RenderTransformPivot: Vector2D;
+	bIsVariable: boolean;
+	bCreatedByConstructionScript: boolean;
+	bIsEnabled: boolean;
+	bOverride_Cursor: boolean;
+	bOverrideAccessibleDefaults: boolean;
+	bCanChildrenBeAccessible: boolean;
+	AccessibleBehavior: ESlateAccessibleBehavior;
+	AccessibleSummaryBehavior: ESlateAccessibleBehavior;
+	AccessibleText: string;
+	AccessibleTextDelegate: UnrealEngineDelegate<() => string>;
+	AccessibleSummaryText: string;
+	AccessibleSummaryTextDelegate: UnrealEngineDelegate<() => string>;
+	AccessibleWidgetData: SlateAccessibleWidgetData;
+	bIsVolatile: boolean;
+	bHiddenInDesigner: boolean;
+	bExpandedInDesigner: boolean;
+	bLockedInDesigner: boolean;
+	Cursor: EMouseCursor;
+	Clipping: EWidgetClipping;
+	Visibility: ESlateVisibility;
+	RenderOpacity: number;
+	Navigation: WidgetNavigation;
+	FlowDirectionPreference: EFlowDirectionPreference;
+	NativeBindings: PropertyBinding[];
+	DesignerFlags: EWidgetDesignFlags;
+	DisplayLabel: string;
+	CategoryName: string;
+	static Load(ResourceName: string): Widget;
+	static Find(Outer: UObject, ResourceName: string): Widget;
+	static GetDefaultObject(): Widget;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Widget;
+	SetVisibility(InVisibility: ESlateVisibility): void;
+	SetUserFocus(PlayerController: PlayerController): void;
+	SetToolTipText(InToolTipText: string): void;
+	SetToolTip(Widget: Widget): void;
+	SetRenderTranslation(Translation: Vector2D): void;
+	SetRenderTransformPivot(Pivot: Vector2D): void;
+	SetRenderTransformAngle(Angle: number): void;
+	SetRenderTransform(InTransform: WidgetTransform): void;
+	SetRenderShear(Shear: Vector2D): void;
+	SetRenderScale(Scale: Vector2D): void;
+	SetRenderOpacity(InOpacity: number): void;
+	SetNavigationRule(Direction: EUINavigation,Rule: EUINavigationRule,WidgetToFocus: string): void;
+	SetKeyboardFocus(): void;
+	SetIsEnabled(bInIsEnabled: boolean): void;
+	SetCursor(InCursor: EMouseCursor): void;
+	SetClipping(InClipping: EWidgetClipping): void;
+	SetAllNavigationRules(Rule: EUINavigationRule,WidgetToFocus: string): void;
+	ResetCursor(): void;
+	RemoveFromParent(): void;
+	IsVisible(): boolean;
+	IsHovered(): boolean;
+	InvalidateLayoutAndVolatility(): void;
+	HasUserFocusedDescendants(PlayerController: PlayerController): boolean;
+	HasUserFocus(PlayerController: PlayerController): boolean;
+	HasMouseCaptureByUser(UserIndex: number,PointerIndex: number): boolean;
+	HasMouseCapture(): boolean;
+	HasKeyboardFocus(): boolean;
+	HasFocusedDescendants(): boolean;
+	HasAnyUserFocus(): boolean;
+	GetVisibility(): ESlateVisibility;
+	GetRenderTransformAngle(): number;
+	GetRenderOpacity(): number;
+	GetParent(): PanelWidget;
+	GetOwningPlayer(): PlayerController;
+	GetOwningLocalPlayer(): LocalPlayer;
+	GetIsEnabled(): boolean;
+	GetGameInstance(): GameInstance;
+	GetDesiredSize(): Vector2D;
+	GetClipping(): EWidgetClipping;
+	GetCachedGeometry(): Geometry;
+	ForceVolatile(bForce: boolean): void;
+	ForceLayoutPrepass(): void;
+	static C(Other: UObject | any): Widget;
+	OpenPopupWindow(PopupDesiredSize: Vector2D,HeadingText: string): void;
+	TakeWidget(): JavascriptSlateWidget;
+	SlotAsBorderSlot(): BorderSlot;
+	SlotAsCanvasSlot(): CanvasPanelSlot;
+	SlotAsGridSlot(): GridSlot;
+	SlotAsHorizontalBoxSlot(): HorizontalBoxSlot;
+	SlotAsOverlaySlot(): OverlaySlot;
+	SlotAsScrollBoxSlot(): ScrollBoxSlot;
+	SlotAsUniformGridSlot(): UniformGridSlot;
+	SlotAsVerticalBoxSlot(): VerticalBoxSlot;
+	SetWindowTitleBarState(Mode: EWindowTitleBarMode,bTitleBarDragEnabled: boolean,bWindowButtonsVisible: boolean,bTitleBarVisible: boolean): void;
+	static OpenPopupWindow(Widget: Widget,PopupDesiredSize: Vector2D,HeadingText: string): void;
+	static TakeWidget(Widget: Widget): JavascriptSlateWidget;
+	static SlotAsBorderSlot(Widget: Widget): BorderSlot;
+	static SlotAsCanvasSlot(Widget: Widget): CanvasPanelSlot;
+	static SlotAsGridSlot(Widget: Widget): GridSlot;
+	static SlotAsHorizontalBoxSlot(Widget: Widget): HorizontalBoxSlot;
+	static SlotAsOverlaySlot(Widget: Widget): OverlaySlot;
+	static SlotAsScrollBoxSlot(Widget: Widget): ScrollBoxSlot;
+	static SlotAsUniformGridSlot(Widget: Widget): UniformGridSlot;
+	static SlotAsVerticalBoxSlot(Widget: Widget): VerticalBoxSlot;
+	static SetWindowTitleBarState(TitleBarContent: Widget,Mode: EWindowTitleBarMode,bTitleBarDragEnabled: boolean,bWindowButtonsVisible: boolean,bTitleBarVisible: boolean): void;
+}
+
+declare type EDragPivot = 'MouseDown' | 'TopLeft' | 'TopCenter' | 'TopRight' | 'CenterLeft' | 'CenterCenter' | 'CenterRight' | 'BottomLeft' | 'BottomCenter' | 'BottomRight' | 'EDragPivot_MAX';
+declare var EDragPivot : { MouseDown:'MouseDown',TopLeft:'TopLeft',TopCenter:'TopCenter',TopRight:'TopRight',CenterLeft:'CenterLeft',CenterCenter:'CenterCenter',CenterRight:'CenterRight',BottomLeft:'BottomLeft',BottomCenter:'BottomCenter',BottomRight:'BottomRight',EDragPivot_MAX:'EDragPivot_MAX', };
+declare class DragDropOperation extends UObject { 
+	Tag: string;
+	Payload: UObject;
+	DefaultDragVisual: Widget;
+	Pivot: EDragPivot;
+	Offset: Vector2D;
+	OnDrop: UnrealEngineMulticastDelegate<(Operation: DragDropOperation) => void>;
+	OnDragCancelled: UnrealEngineMulticastDelegate<(Operation: DragDropOperation) => void>;
+	OnDragged: UnrealEngineMulticastDelegate<(Operation: DragDropOperation) => void>;
+	static Load(ResourceName: string): DragDropOperation;
+	static Find(Outer: UObject, ResourceName: string): DragDropOperation;
+	static GetDefaultObject(): DragDropOperation;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DragDropOperation;
+	Drop(UPointerEvent: UPointerEvent): void;
+	Dragged(UPointerEvent: UPointerEvent): void;
+	DragCancelled(UPointerEvent: UPointerEvent): void;
+	static C(Other: UObject | any): DragDropOperation;
+}
+
+declare class Class extends Struct { 
+	static Load(ResourceName: string): Class;
+	static Find(Outer: UObject, ResourceName: string): Class;
+	static GetDefaultObject(): Class;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Class;
+	static C(Other: UObject | any): Class;
+	AddDynamicBinding(BindingObject: DynamicBlueprintBinding): void;
+	GetClassPathName(): string;
+	GetDerivedClasses(Results?: UnrealEngineClass[],bRecursive?: boolean): {Results: UnrealEngineClass[]};
+	GetDynamicBinding(BindingObjectClass: UnrealEngineClass): DynamicBlueprintBinding;
+	GetObjectsOfClass(Results?: UObject[],bIncludeDerivedClasses?: boolean,ExcludeFlags?: number,ExclusionInternalFlags?: number): {Results: UObject[]};
+	GetSuperClasses(): UnrealEngineClass[];
+	IsGeneratedByBlueprint(): boolean;
+	GetAllDatasmithUserData(OutUserData?: DatasmithAssetUserData[]): {OutUserData: DatasmithAssetUserData[]};
+	GetEngineSubsystem(): EngineSubsystem;
+	Conv_ClassToSoftClassReference(): Class;
+	Conv_SoftClassReferenceToClass(): UnrealEngineClass;
+	Conv_SoftClassReferenceToString(): string;
+	EqualEqual_SoftClassReference(B: Class): boolean;
+	GetClassDisplayName(): string;
+	GetPrimaryAssetIdFromClass(): PrimaryAssetId;
+	GetPrimaryAssetIdFromSoftClassReference(): PrimaryAssetId;
+	IsValidClass(): boolean;
+	IsValidSoftClassReference(): boolean;
+	LoadClassAsset_Blocking(): UnrealEngineClass;
+	NotEqual_SoftClassReference(B: Class): boolean;
+	ClassIsChildOf(ParentClass: UnrealEngineClass): boolean;
+	EqualEqual_ClassClass(B: UnrealEngineClass): boolean;
+	NotEqual_ClassClass(B: UnrealEngineClass): boolean;
+	SelectClass(B: UnrealEngineClass,bSelectA: boolean): UnrealEngineClass;
+	CreateSaveGameObject(): SaveGame;
+	SpawnObject(Outer: UObject): UObject;
+	GetEditorSubsystem(): EditorSubsystem;
+	CreateDragDropOperation(): DragDropOperation;
+	static AddDynamicBinding(Outer: UnrealEngineClass,BindingObject: DynamicBlueprintBinding): void;
+	static GetClassPathName(Class: UnrealEngineClass): string;
+	static GetDerivedClasses(ClassToLookFor: UnrealEngineClass,Results?: UnrealEngineClass[],bRecursive?: boolean): {Results: UnrealEngineClass[]};
+	static GetDynamicBinding(Outer: UnrealEngineClass,BindingObjectClass: UnrealEngineClass): DynamicBlueprintBinding;
+	static GetObjectsOfClass(ClassToLookFor: UnrealEngineClass,Results?: UObject[],bIncludeDerivedClasses?: boolean,ExcludeFlags?: number,ExclusionInternalFlags?: number): {Results: UObject[]};
+	static GetSuperClasses(InClass: UnrealEngineClass): UnrealEngineClass[];
+	static IsGeneratedByBlueprint(InClass: UnrealEngineClass): boolean;
+	static GetAllDatasmithUserData(ObjectClass: UnrealEngineClass,OutUserData?: DatasmithAssetUserData[]): {OutUserData: DatasmithAssetUserData[]};
+	static GetEngineSubsystem(Class: UnrealEngineClass): EngineSubsystem;
+	static Conv_ClassToSoftClassReference(Class: UnrealEngineClass): Class;
+	static Conv_SoftClassReferenceToClass(softclass: Class): UnrealEngineClass;
+	static Conv_SoftClassReferenceToString(SoftClassReference: Class): string;
+	static EqualEqual_SoftClassReference(A: Class,B: Class): boolean;
+	static GetClassDisplayName(Class: UnrealEngineClass): string;
+	static GetPrimaryAssetIdFromClass(Class: UnrealEngineClass): PrimaryAssetId;
+	static GetPrimaryAssetIdFromSoftClassReference(SoftClassReference: Class): PrimaryAssetId;
+	static IsValidClass(Class: UnrealEngineClass): boolean;
+	static IsValidSoftClassReference(SoftClassReference: Class): boolean;
+	static LoadClassAsset_Blocking(AssetClass: Class): UnrealEngineClass;
+	static NotEqual_SoftClassReference(A: Class,B: Class): boolean;
+	static ClassIsChildOf(TestClass: UnrealEngineClass,ParentClass: UnrealEngineClass): boolean;
+	static EqualEqual_ClassClass(A: UnrealEngineClass,B: UnrealEngineClass): boolean;
+	static NotEqual_ClassClass(A: UnrealEngineClass,B: UnrealEngineClass): boolean;
+	static SelectClass(A: UnrealEngineClass,B: UnrealEngineClass,bSelectA: boolean): UnrealEngineClass;
+	static CreateSaveGameObject(SaveGameClass: UnrealEngineClass): SaveGame;
+	static SpawnObject(ObjectClass: UnrealEngineClass,Outer: UObject): UObject;
+	static GetEditorSubsystem(Class: UnrealEngineClass): EditorSubsystem;
+	static CreateDragDropOperation(OperationClass: UnrealEngineClass): DragDropOperation;
+}
+
+declare class SoftClassPath extends SoftObjectPath { 
+	clone() : SoftClassPath;
+	static C(Other: UObject | any): SoftClassPath;
+	BreakSoftClassPath(PathString?: string): {PathString: string};
+	Conv_SoftClassPathToSoftClassRef(): Class;
+	static BreakSoftClassPath(InSoftClassPath: SoftClassPath,PathString?: string): {PathString: string};
+	static Conv_SoftClassPathToSoftClassRef(SoftClassPath: SoftClassPath): Class;
+	static MakeSoftClassPath(PathString: string): SoftClassPath;
+}
+
+declare class AnimNotifyEventReference { 
+	NotifySource: UObject;
+	clone() : AnimNotifyEventReference;
+	static C(Other: UObject | any): AnimNotifyEventReference;
+}
+
+declare class AnimNotifyQueue { 
+	AnimNotifies: AnimNotifyEventReference[];
+	UnfilteredMontageAnimNotifies: any;
+	clone() : AnimNotifyQueue;
+	static C(Other: UObject | any): AnimNotifyQueue;
+}
+
+declare class PoseSnapshot { 
+	LocalTransforms: Transform[];
+	BoneNames: string[];
+	SkeletalMeshName: string;
+	SnapshotName: string;
+	bIsValid: boolean;
+	clone() : PoseSnapshot;
+	static C(Other: UObject | any): PoseSnapshot;
+}
+
+declare type ETeleportType = 'None' | 'TeleportPhysics' | 'ResetPhysics' | 'ETeleportType_MAX';
+declare var ETeleportType : { None:'None',TeleportPhysics:'TeleportPhysics',ResetPhysics:'ResetPhysics',ETeleportType_MAX:'ETeleportType_MAX', };
+declare type EMontagePlayReturnType = 'MontageLength' | 'Duration' | 'EMontagePlayReturnType_MAX';
+declare var EMontagePlayReturnType : { MontageLength:'MontageLength',Duration:'Duration',EMontagePlayReturnType_MAX:'EMontagePlayReturnType_MAX', };
+declare class MarkerSyncAnimPosition { 
+	PreviousMarkerName: string;
+	NextMarkerName: string;
+	PositionBetweenMarkers: number;
+	clone() : MarkerSyncAnimPosition;
+	static C(Other: UObject | any): MarkerSyncAnimPosition;
+}
+
+declare type EAnimCurveType = 'AttributeCurve' | 'MaterialCurve' | 'MorphTargetCurve' | 'MaxAnimCurveType' | 'EAnimCurveType_MAX';
+declare var EAnimCurveType : { AttributeCurve:'AttributeCurve',MaterialCurve:'MaterialCurve',MorphTargetCurve:'MorphTargetCurve',MaxAnimCurveType:'MaxAnimCurveType',EAnimCurveType_MAX:'EAnimCurveType_MAX', };
+declare class AnimInstance extends UObject { 
+	CurrentSkeleton: Skeleton;
+	RootMotionMode: ERootMotionMode;
+	DeltaTime: number;
+	bRunUpdatesInWorkerThreads: boolean;
+	bCanUseParallelUpdateAnimation: boolean;
+	bWarnAboutBlueprintUsage: boolean;
+	bUseMultiThreadedAnimationUpdate: boolean;
+	bUsingCopyPoseFromMesh: boolean;
+	bQueueMontageEvents: boolean;
+	OnMontageBlendingOut: UnrealEngineMulticastDelegate<(Montage: AnimMontage, bInterrupted: boolean) => void>;
+	OnMontageStarted: UnrealEngineMulticastDelegate<(Montage: AnimMontage) => void>;
+	OnMontageEnded: UnrealEngineMulticastDelegate<(Montage: AnimMontage, bInterrupted: boolean) => void>;
+	OnAllMontageInstancesEnded: UnrealEngineMulticastDelegate<() => void>;
+	PostCompileValidationClassName: SoftClassPath;
+	NotifyQueue: AnimNotifyQueue;
+	ActiveAnimNotifyState: AnimNotifyEvent[];
+	static Load(ResourceName: string): AnimInstance;
+	static Find(Outer: UObject, ResourceName: string): AnimInstance;
+	static GetDefaultObject(): AnimInstance;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimInstance;
+	UnlockAIResources(bUnlockMovement: boolean,UnlockAILogic: boolean): void;
+	TryGetPawnOwner(): Pawn;
+	StopSlotAnimation(InBlendOutTime: number,SlotNodeName: string): void;
+	SnapshotPose(Snapshot?: PoseSnapshot): {Snapshot: PoseSnapshot};
+	SetSubInstanceClassByTag(InTag: string,InClass: UnrealEngineClass): void;
+	SetRootMotionMode(Value: ERootMotionMode): void;
+	SetMorphTarget(MorphTargetName: string,Value: number): void;
+	SetLayerOverlay(InClass: UnrealEngineClass): void;
+	SavePoseSnapshot(SnapshotName: string): void;
+	ResetDynamics(InTeleportType: ETeleportType): void;
+	PlaySlotAnimationAsDynamicMontage(Asset: AnimSequenceBase,SlotNodeName: string,BlendInTime: number,BlendOutTime: number,InPlayRate: number,LoopCount: number,BlendOutTriggerTime: number,InTimeToStartMontageAt: number): AnimMontage;
+	PlaySlotAnimation(Asset: AnimSequenceBase,SlotNodeName: string,BlendInTime: number,BlendOutTime: number,InPlayRate: number,LoopCount: number): number;
+	Montage_Stop(InBlendOutTime: number,Montage: AnimMontage): void;
+	Montage_SetPosition(Montage: AnimMontage,NewPosition: number): void;
+	Montage_SetPlayRate(Montage: AnimMontage,NewPlayRate: number): void;
+	Montage_SetNextSection(SectionNameToChange: string,NextSection: string,Montage: AnimMontage): void;
+	Montage_Resume(Montage: AnimMontage): void;
+	Montage_Play(MontageToPlay: AnimMontage,InPlayRate: number,ReturnValueType: EMontagePlayReturnType,InTimeToStartMontageAt: number,bStopAllMontages: boolean): number;
+	Montage_Pause(Montage: AnimMontage): void;
+	Montage_JumpToSectionsEnd(SectionName: string,Montage: AnimMontage): void;
+	Montage_JumpToSection(SectionName: string,Montage: AnimMontage): void;
+	Montage_IsPlaying(Montage: AnimMontage): boolean;
+	Montage_IsActive(Montage: AnimMontage): boolean;
+	Montage_GetPosition(Montage: AnimMontage): number;
+	Montage_GetPlayRate(Montage: AnimMontage): number;
+	Montage_GetIsStopped(Montage: AnimMontage): boolean;
+	Montage_GetCurrentSection(Montage: AnimMontage): string;
+	Montage_GetBlendTime(Montage: AnimMontage): number;
+	LockAIResources(bLockMovement: boolean,LockAILogic: boolean): void;
+	IsSyncGroupBetweenMarkers(InSyncGroupName: string,PreviousMarker: string,NextMarker: string,bRespectMarkerOrder: boolean): boolean;
+	IsPlayingSlotAnimation(Asset: AnimSequenceBase,SlotNodeName: string): boolean;
+	IsAnyMontagePlaying(): boolean;
+	HasMarkerBeenHitThisFrame(SyncGroup: string,MarkerName: string): boolean;
+	GetTimeToClosestMarker(SyncGroup: string,MarkerName: string,OutMarkerTime?: number): {OutMarkerTime: number, $: boolean};
+	GetSyncGroupPosition(InSyncGroupName: string): MarkerSyncAnimPosition;
+	GetSubInstancesByTag(InTag: string,OutSubInstances?: AnimInstance[]): {OutSubInstances: AnimInstance[]};
+	GetSubInstanceByTag(InTag: string): AnimInstance;
+	GetRelevantAnimTimeRemainingFraction(MachineIndex: number,StateIndex: number): number;
+	GetRelevantAnimTimeRemaining(MachineIndex: number,StateIndex: number): number;
+	GetRelevantAnimTimeFraction(MachineIndex: number,StateIndex: number): number;
+	GetRelevantAnimTime(MachineIndex: number,StateIndex: number): number;
+	GetRelevantAnimLength(MachineIndex: number,StateIndex: number): number;
+	GetOwningComponent(): SkeletalMeshComponent;
+	GetOwningActor(): Actor;
+	GetLayerSubInstanceByGroup(InGroup: string): AnimInstance;
+	GetInstanceTransitionTimeElapsedFraction(MachineIndex: number,TransitionIndex: number): number;
+	GetInstanceTransitionTimeElapsed(MachineIndex: number,TransitionIndex: number): number;
+	GetInstanceTransitionCrossfadeDuration(MachineIndex: number,TransitionIndex: number): number;
+	GetInstanceStateWeight(MachineIndex: number,StateIndex: number): number;
+	GetInstanceMachineWeight(MachineIndex: number): number;
+	GetInstanceCurrentStateElapsedTime(MachineIndex: number): number;
+	GetInstanceAssetPlayerTimeFromEndFraction(AssetPlayerIndex: number): number;
+	GetInstanceAssetPlayerTimeFromEnd(AssetPlayerIndex: number): number;
+	GetInstanceAssetPlayerTimeFraction(AssetPlayerIndex: number): number;
+	GetInstanceAssetPlayerTime(AssetPlayerIndex: number): number;
+	GetInstanceAssetPlayerLength(AssetPlayerIndex: number): number;
+	GetCurveValue(CurveName: string): number;
+	GetCurrentStateName(MachineIndex: number): string;
+	GetCurrentActiveMontage(): AnimMontage;
+	GetAllCurveNames(OutNames?: string[]): {OutNames: string[]};
+	GetActiveCurveNames(CurveType: EAnimCurveType,OutNames?: string[]): {OutNames: string[]};
+	ClearMorphTargets(): void;
+	CalculateDirection(Velocity: Vector,BaseRotation: Rotator): number;
+	BlueprintUpdateAnimation(DeltaTimeX: number): void;
+	BlueprintPostEvaluateAnimation(): void;
+	BlueprintInitializeAnimation(): void;
+	BlueprintBeginPlay(): void;
+	static C(Other: UObject | any): AnimInstance;
+	LockAIResourcesWithAnimation(bLockMovement: boolean,LockAILogic: boolean): void;
+	UnlockAIResourcesWithAnimation(bUnlockMovement: boolean,UnlockAILogic: boolean): void;
+	static LockAIResourcesWithAnimation(AnimInstance: AnimInstance,bLockMovement: boolean,LockAILogic: boolean): void;
+	static UnlockAIResourcesWithAnimation(AnimInstance: AnimInstance,bUnlockMovement: boolean,UnlockAILogic: boolean): void;
+}
+
+declare class ClothingAssetBase extends UObject { 
+	ImportedFilePath: string;
+	AssetGuid: Guid;
+	static Load(ResourceName: string): ClothingAssetBase;
+	static Find(Outer: UObject, ResourceName: string): ClothingAssetBase;
+	static GetDefaultObject(): ClothingAssetBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingAssetBase;
+	static C(Other: UObject | any): ClothingAssetBase;
+}
+
+declare class SkeletalMeshSamplingRegionMaterialFilter { 
+	MaterialName: string;
+	clone() : SkeletalMeshSamplingRegionMaterialFilter;
+	static C(Other: UObject | any): SkeletalMeshSamplingRegionMaterialFilter;
+}
+
+declare class SkeletalMeshSamplingRegionBoneFilter { 
+	BoneName: string;
+	bIncludeOrExclude: boolean;
+	bApplyToChildren: boolean;
+	clone() : SkeletalMeshSamplingRegionBoneFilter;
+	static C(Other: UObject | any): SkeletalMeshSamplingRegionBoneFilter;
+}
+
+declare class SkeletalMeshSamplingRegion { 
+	Name: string;
+	LODIndex: number;
+	bSupportUniformlyDistributedSampling: boolean;
+	MaterialFilters: SkeletalMeshSamplingRegionMaterialFilter[];
+	BoneFilters: SkeletalMeshSamplingRegionBoneFilter[];
+	clone() : SkeletalMeshSamplingRegion;
+	static C(Other: UObject | any): SkeletalMeshSamplingRegion;
+}
+
+declare class SkeletalMeshSamplingLODBuiltData { 
+	clone() : SkeletalMeshSamplingLODBuiltData;
+	static C(Other: UObject | any): SkeletalMeshSamplingLODBuiltData;
+}
+
+declare class SkeletalMeshSamplingRegionBuiltData { 
+	clone() : SkeletalMeshSamplingRegionBuiltData;
+	static C(Other: UObject | any): SkeletalMeshSamplingRegionBuiltData;
+}
+
+declare class SkeletalMeshSamplingBuiltData { 
+	WholeMeshBuiltData: SkeletalMeshSamplingLODBuiltData[];
+	RegionBuiltData: SkeletalMeshSamplingRegionBuiltData[];
+	clone() : SkeletalMeshSamplingBuiltData;
+	static C(Other: UObject | any): SkeletalMeshSamplingBuiltData;
+}
+
+declare class SkeletalMeshSamplingInfo { 
+	Regions: SkeletalMeshSamplingRegion[];
+	BuiltData: SkeletalMeshSamplingBuiltData;
+	clone() : SkeletalMeshSamplingInfo;
+	static C(Other: UObject | any): SkeletalMeshSamplingInfo;
+}
+
+declare class SkinWeightProfileInfo { 
+	Name: string;
+	DefaultProfile: PerPlatformBool;
+	DefaultProfileFromLODIndex: PerPlatformInt;
+	PerLODSourceFiles: any;
+	clone() : SkinWeightProfileInfo;
+	static C(Other: UObject | any): SkinWeightProfileInfo;
+}
+
+declare class BlueprintCore extends UObject { 
+	SkeletonGeneratedClass: UnrealEngineClass;
+	GeneratedClass: UnrealEngineClass;
+	bLegacyNeedToPurgeSkelRefs: boolean;
+	BlueprintGuid: Guid;
+	static Load(ResourceName: string): BlueprintCore;
+	static Find(Outer: UObject, ResourceName: string): BlueprintCore;
+	static GetDefaultObject(): BlueprintCore;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintCore;
+	static C(Other: UObject | any): BlueprintCore;
+}
+
+declare type EBlueprintNativizationFlag = 'Disabled' | 'Dependency' | 'ExplicitlyEnabled' | 'EBlueprintNativizationFlag_MAX';
+declare var EBlueprintNativizationFlag : { Disabled:'Disabled',Dependency:'Dependency',ExplicitlyEnabled:'ExplicitlyEnabled',EBlueprintNativizationFlag_MAX:'EBlueprintNativizationFlag_MAX', };
+declare type EBlueprintCompileMode = 'Default' | 'Development' | 'FinalRelease' | 'EBlueprintCompileMode_MAX';
+declare var EBlueprintCompileMode : { Default:'Default',Development:'Development',FinalRelease:'FinalRelease',EBlueprintCompileMode_MAX:'EBlueprintCompileMode_MAX', };
+declare class BlueprintComponentChangedPropertyInfo { 
+	PropertyName: string;
+	ArrayIndex: number;
+	PropertyScope: Struct;
+	clone() : BlueprintComponentChangedPropertyInfo;
+	static C(Other: UObject | any): BlueprintComponentChangedPropertyInfo;
+}
+
+declare class BlueprintCookedComponentInstancingData { 
+	bHasValidCookedData: boolean;
+	ChangedPropertyList: BlueprintComponentChangedPropertyInfo[];
+	clone() : BlueprintCookedComponentInstancingData;
+	static C(Other: UObject | any): BlueprintCookedComponentInstancingData;
+}
+
+declare class BPVariableMetaDataEntry { 
+	DataKey: string;
+	DataValue: string;
+	clone() : BPVariableMetaDataEntry;
+	static C(Other: UObject | any): BPVariableMetaDataEntry;
+}
+
+declare class SCS_Node extends UObject { 
+	ComponentClass: UnrealEngineClass;
+	ComponentTemplate: ActorComponent;
+	CookedComponentInstancingData: BlueprintCookedComponentInstancingData;
+	CategoryName: string;
+	AttachToName: string;
+	ParentComponentOrVariableName: string;
+	ParentComponentOwnerClassName: string;
+	bIsParentComponentNative: boolean;
+	ChildNodes: SCS_Node[];
+	MetaDataArray: BPVariableMetaDataEntry[];
+	VariableGuid: Guid;
+	bIsNative: boolean;
+	NativeComponentName: string;
+	bVariableNameAutoGenerated: boolean;
+	InternalVariableName: string;
+	static Load(ResourceName: string): SCS_Node;
+	static Find(Outer: UObject, ResourceName: string): SCS_Node;
+	static GetDefaultObject(): SCS_Node;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SCS_Node;
+	static C(Other: UObject | any): SCS_Node;
+}
+
+declare class SimpleConstructionScript extends UObject { 
+	RootNodes: SCS_Node[];
+	AllNodes: SCS_Node[];
+	DefaultSceneRootNode: SCS_Node;
+	RootNode: SCS_Node;
+	ActorComponentNodes: SCS_Node[];
+	static Load(ResourceName: string): SimpleConstructionScript;
+	static Find(Outer: UObject, ResourceName: string): SimpleConstructionScript;
+	static GetDefaultObject(): SimpleConstructionScript;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SimpleConstructionScript;
+	static C(Other: UObject | any): SimpleConstructionScript;
+}
+
+declare class EdGraphSchema extends UObject { 
+	static Load(ResourceName: string): EdGraphSchema;
+	static Find(Outer: UObject, ResourceName: string): EdGraphSchema;
+	static GetDefaultObject(): EdGraphSchema;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdGraphSchema;
+	static C(Other: UObject | any): EdGraphSchema;
+	SetNodeMetaData(UNode: EdGraphNode,KeyValue: string): boolean;
+	TryConnection(A: JavascriptEdGraphPin,B: JavascriptEdGraphPin): void;
+	static SetNodeMetaData(Schema: EdGraphSchema,UNode: EdGraphNode,KeyValue: string): boolean;
+	static TryConnection(Schema: EdGraphSchema,A: JavascriptEdGraphPin,B: JavascriptEdGraphPin): void;
+}
+
+declare class EdGraph extends UObject { 
+	Schema: UnrealEngineClass;
+	Nodes: EdGraphNode[];
+	bEditable: boolean;
+	bAllowDeletion: boolean;
+	bAllowRenaming: boolean;
+	SubGraphs: EdGraph[];
+	GraphGuid: Guid;
+	InterfaceGuid: Guid;
+	static Load(ResourceName: string): EdGraph;
+	static Find(Outer: UObject, ResourceName: string): EdGraph;
+	static GetDefaultObject(): EdGraph;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdGraph;
+	static C(Other: UObject | any): EdGraph;
+}
+
+declare type ETimelineLengthMode = 'TL_TimelineLength' | 'TL_LastKeyFrame' | 'TL_MAX';
+declare var ETimelineLengthMode : { TL_TimelineLength:'TL_TimelineLength',TL_LastKeyFrame:'TL_LastKeyFrame',TL_MAX:'TL_MAX', };
+declare class TTTrackBase { 
+	TrackName: string;
+	bIsExternalCurve: boolean;
+	clone() : TTTrackBase;
+	static C(Other: UObject | any): TTTrackBase;
+}
+
+declare class TTEventTrack extends TTTrackBase { 
+	FunctionName: string;
+	CurveKeys: CurveFloat;
+	clone() : TTEventTrack;
+	static C(Other: UObject | any): TTEventTrack;
+}
+
+declare class TTPropertyTrack extends TTTrackBase { 
+	PropertyName: string;
+	clone() : TTPropertyTrack;
+	static C(Other: UObject | any): TTPropertyTrack;
+}
+
+declare class TTFloatTrack extends TTPropertyTrack { 
+	CurveFloat: CurveFloat;
+	clone() : TTFloatTrack;
+	static C(Other: UObject | any): TTFloatTrack;
+}
+
+declare class CurveVector extends CurveBase { 
+	FloatCurves: RichCurve;
+	static Load(ResourceName: string): CurveVector;
+	static Find(Outer: UObject, ResourceName: string): CurveVector;
+	static GetDefaultObject(): CurveVector;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveVector;
+	GetVectorValue(InTime: number): Vector;
+	static C(Other: UObject | any): CurveVector;
+}
+
+declare class TTVectorTrack extends TTPropertyTrack { 
+	CurveVector: CurveVector;
+	clone() : TTVectorTrack;
+	static C(Other: UObject | any): TTVectorTrack;
+}
+
+declare class TTLinearColorTrack extends TTPropertyTrack { 
+	CurveLinearColor: CurveLinearColor;
+	clone() : TTLinearColorTrack;
+	static C(Other: UObject | any): TTLinearColorTrack;
+}
+
+declare class TimelineTemplate extends UObject { 
+	TimelineLength: number;
+	LengthMode: ETimelineLengthMode;
+	bAutoPlay: boolean;
+	bLoop: boolean;
+	bReplicated: boolean;
+	bIgnoreTimeDilation: boolean;
+	EventTracks: TTEventTrack[];
+	FloatTracks: TTFloatTrack[];
+	VectorTracks: TTVectorTrack[];
+	LinearColorTracks: TTLinearColorTrack[];
+	MetaDataArray: BPVariableMetaDataEntry[];
+	TimelineGuid: Guid;
+	VariableName: string;
+	DirectionPropertyName: string;
+	UpdateFunctionName: string;
+	FinishedFunctionName: string;
+	static Load(ResourceName: string): TimelineTemplate;
+	static Find(Outer: UObject, ResourceName: string): TimelineTemplate;
+	static GetDefaultObject(): TimelineTemplate;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TimelineTemplate;
+	static C(Other: UObject | any): TimelineTemplate;
+}
+
+declare class ComponentKey { 
+	OwnerClass: UnrealEngineClass;
+	SCSVariableName: string;
+	AssociatedGuid: Guid;
+	clone() : ComponentKey;
+	static C(Other: UObject | any): ComponentKey;
+}
+
+declare class ComponentOverrideRecord { 
+	ComponentClass: UnrealEngineClass;
+	ComponentTemplate: ActorComponent;
+	ComponentKey: ComponentKey;
+	CookedComponentInstancingData: BlueprintCookedComponentInstancingData;
+	clone() : ComponentOverrideRecord;
+	static C(Other: UObject | any): ComponentOverrideRecord;
+}
+
+declare class InheritableComponentHandler extends UObject { 
+	Records: ComponentOverrideRecord[];
+	UnnecessaryComponents: ActorComponent[];
+	static Load(ResourceName: string): InheritableComponentHandler;
+	static Find(Outer: UObject, ResourceName: string): InheritableComponentHandler;
+	static GetDefaultObject(): InheritableComponentHandler;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InheritableComponentHandler;
+	static C(Other: UObject | any): InheritableComponentHandler;
+}
+
+declare type EBlueprintType = 'BPTYPE_Normal' | 'BPTYPE_Const' | 'BPTYPE_MacroLibrary' | 'BPTYPE_Interface' | 'BPTYPE_LevelScript' | 'BPTYPE_FunctionLibrary' | 'BPTYPE_MAX';
+declare var EBlueprintType : { BPTYPE_Normal:'BPTYPE_Normal',BPTYPE_Const:'BPTYPE_Const',BPTYPE_MacroLibrary:'BPTYPE_MacroLibrary',BPTYPE_Interface:'BPTYPE_Interface',BPTYPE_LevelScript:'BPTYPE_LevelScript',BPTYPE_FunctionLibrary:'BPTYPE_FunctionLibrary',BPTYPE_MAX:'BPTYPE_MAX', };
+declare type EBlueprintStatus = 'BS_Unknown' | 'BS_Dirty' | 'BS_Error' | 'BS_UpToDate' | 'BS_BeingCreated' | 'BS_UpToDateWithWarnings' | 'BS_MAX';
+declare var EBlueprintStatus : { BS_Unknown:'BS_Unknown',BS_Dirty:'BS_Dirty',BS_Error:'BS_Error',BS_UpToDate:'BS_UpToDate',BS_BeingCreated:'BS_BeingCreated',BS_UpToDateWithWarnings:'BS_UpToDateWithWarnings',BS_MAX:'BS_MAX', };
+declare type ELifetimeCondition = 'COND_None' | 'COND_InitialOnly' | 'COND_OwnerOnly' | 'COND_SkipOwner' | 'COND_SimulatedOnly' | 'COND_AutonomousOnly' | 'COND_SimulatedOrPhysics' | 'COND_InitialOrOwner' | 'COND_Custom' | 'COND_ReplayOrOwner' | 'COND_ReplayOnly' | 'COND_SimulatedOnlyNoReplay' | 'COND_SimulatedOrPhysicsNoReplay' | 'COND_SkipReplay' | 'COND_Never' | 'COND_Max';
+declare var ELifetimeCondition : { COND_None:'COND_None',COND_InitialOnly:'COND_InitialOnly',COND_OwnerOnly:'COND_OwnerOnly',COND_SkipOwner:'COND_SkipOwner',COND_SimulatedOnly:'COND_SimulatedOnly',COND_AutonomousOnly:'COND_AutonomousOnly',COND_SimulatedOrPhysics:'COND_SimulatedOrPhysics',COND_InitialOrOwner:'COND_InitialOrOwner',COND_Custom:'COND_Custom',COND_ReplayOrOwner:'COND_ReplayOrOwner',COND_ReplayOnly:'COND_ReplayOnly',COND_SimulatedOnlyNoReplay:'COND_SimulatedOnlyNoReplay',COND_SimulatedOrPhysicsNoReplay:'COND_SimulatedOrPhysicsNoReplay',COND_SkipReplay:'COND_SkipReplay',COND_Never:'COND_Never',COND_Max:'COND_Max', };
+declare class BPVariableDescription { 
+	VarName: string;
+	VarGuid: Guid;
+	VarType: EdGraphPinType;
+	FriendlyName: string;
+	Category: string;
+	PropertyFlags: any;
+	RepNotifyFunc: string;
+	ReplicationCondition: ELifetimeCondition;
+	MetaDataArray: BPVariableMetaDataEntry[];
+	DefaultValue: string;
+	clone() : BPVariableDescription;
+	static C(Other: UObject | any): BPVariableDescription;
+}
+
+declare class Interface extends UObject { 
+	static Load(ResourceName: string): Interface;
+	static Find(Outer: UObject, ResourceName: string): Interface;
+	static GetDefaultObject(): Interface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Interface;
+	static C(Other: UObject | any): Interface;
+}
+
+declare class BPInterfaceDescription { 
+	Interface: UnrealEngineClass;
+	Graphs: EdGraph[];
+	clone() : BPInterfaceDescription;
+	static C(Other: UObject | any): BPInterfaceDescription;
+}
+
+declare class EditedDocumentInfo { 
+	EditedObjectPath: SoftObjectPath;
+	SavedViewOffset: Vector2D;
+	SavedZoomAmount: number;
+	EditedObject: UObject;
+	clone() : EditedDocumentInfo;
+	static C(Other: UObject | any): EditedDocumentInfo;
+}
+
+declare class BPEditorBookmarkNode { 
+	NodeGuid: Guid;
+	ParentGuid: Guid;
+	DisplayName: string;
+	clone() : BPEditorBookmarkNode;
+	static C(Other: UObject | any): BPEditorBookmarkNode;
+}
+
+declare class Breakpoint extends UObject { 
+	bEnabled: boolean;
+	UNode: EdGraphNode;
+	bStepOnce: boolean;
+	bStepOnce_WasPreviouslyDisabled: boolean;
+	bStepOnce_RemoveAfterHit: boolean;
+	static Load(ResourceName: string): Breakpoint;
+	static Find(Outer: UObject, ResourceName: string): Breakpoint;
+	static GetDefaultObject(): Breakpoint;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Breakpoint;
+	static C(Other: UObject | any): Breakpoint;
+}
+
+declare class EdGraphPinReference { 
+	OwningNode: any;
+	PinID: Guid;
+	clone() : EdGraphPinReference;
+	static C(Other: UObject | any): EdGraphPinReference;
+}
+
+declare class Blueprint extends BlueprintCore { 
+	bRecompileOnLoad: boolean;
+	ParentClass: UnrealEngineClass;
+	bHasBeenRegenerated: boolean;
+	bIsRegeneratingOnLoad: boolean;
+	bIsNewlyCreated: boolean;
+	bForceFullEditor: boolean;
+	bQueuedForCompilation: boolean;
+	bRunConstructionScriptOnDrag: boolean;
+	bRunConstructionScriptInSequencer: boolean;
+	bGenerateConstClass: boolean;
+	bGenerateAbstractClass: boolean;
+	BlueprintDisplayName: string;
+	BlueprintDescription: string;
+	BlueprintCategory: string;
+	HideCategories: string[];
+	NativizationFlag: EBlueprintNativizationFlag;
+	bDisplayCompilePIEWarning: boolean;
+	SearchGuid: Guid;
+	bDeprecate: boolean;
+	CompileMode: EBlueprintCompileMode;
+	SimpleConstructionScript: SimpleConstructionScript;
+	UbergraphPages: EdGraph[];
+	FunctionGraphs: EdGraph[];
+	DelegateSignatureGraphs: EdGraph[];
+	MacroGraphs: EdGraph[];
+	IntermediateGeneratedGraphs: EdGraph[];
+	EventGraphs: EdGraph[];
+	PRIVATE_CachedMacroInfo: any;
+	bDuplicatingReadOnly: boolean;
+	ComponentTemplates: ActorComponent[];
+	Timelines: TimelineTemplate[];
+	InheritableComponentHandler: InheritableComponentHandler;
+	BlueprintType: EBlueprintType;
+	Status: EBlueprintStatus;
+	NewVariables: BPVariableDescription[];
+	CategorySorting: string[];
+	ImplementedInterfaces: BPInterfaceDescription[];
+	BlueprintSystemVersion: number;
+	LastEditedDocuments: EditedDocumentInfo[];
+	Bookmarks: any;
+	BookmarkNodes: BPEditorBookmarkNode[];
+	Breakpoints: Breakpoint[];
+	WatchedPins: EdGraphPinReference[];
+	DeprecatedPinWatches: EdGraphPin_Deprecated[];
+	ComponentTemplateNameIndex: any;
+	OldToNewComponentTemplateNames: any;
+	ThumbnailInfo: ThumbnailInfo;
+	bBeingCompiled: boolean;
+	CrcLastCompiledCDO: any;
+	CrcLastCompiledSignature: any;
+	OriginalClass: UnrealEngineClass;
+	bNativize: boolean;
+	static Load(ResourceName: string): Blueprint;
+	static Find(Outer: UObject, ResourceName: string): Blueprint;
+	static GetDefaultObject(): Blueprint;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Blueprint;
+	static C(Other: UObject | any): Blueprint;
+	AddComponentsToBlueprint(Components: ActorComponent[],bHarvesting: boolean,OptionalNewRootComponent: ActorComponent,bKeepMobility: boolean): void;
+	CompileBlueprint(): void;
+	GetParentClassOfBlueprint(): UnrealEngineClass;
+	RemoveComponentFromBlueprint(RemoveComponent: ActorComponent,bPromoteChildren: boolean): void;
+	GetBlueprintGeneratedClass(): UnrealEngineClass;
+	static AddComponentsToBlueprint(Blueprint: Blueprint,Components: ActorComponent[],bHarvesting: boolean,OptionalNewRootComponent: ActorComponent,bKeepMobility: boolean): void;
+	static CompileBlueprint(Blueprint: Blueprint): void;
+	static GetParentClassOfBlueprint(Blueprint: Blueprint): UnrealEngineClass;
+	static RemoveComponentFromBlueprint(Blueprint: Blueprint,RemoveComponent: ActorComponent,bPromoteChildren: boolean): void;
+	static GetBlueprintGeneratedClass(Blueprint: Blueprint): UnrealEngineClass;
+}
+
+declare class SkeletalMesh extends UObject { 
+	Skeleton: Skeleton;
+	ImportedBounds: BoxSphereBounds;
+	ExtendedBounds: BoxSphereBounds;
+	PositiveBoundsExtension: Vector;
+	NegativeBoundsExtension: Vector;
+	Materials: SkeletalMaterial[];
+	SkelMirrorTable: BoneMirrorInfo[];
+	LODInfo: SkeletalMeshLODInfo[];
+	MinLOD: PerPlatformInt;
+	DisableBelowMinLodStripping: PerPlatformBool;
+	LODSettings: SkeletalMeshLODSettings;
+	SkelMirrorAxis: EAxis;
+	SkelMirrorFlipAxis: EAxis;
+	bUseFullPrecisionUVs: boolean;
+	bUseHighPrecisionTangentBasis: boolean;
+	bHasBeenSimplified: boolean;
+	bHasVertexColors: boolean;
+	bEnablePerPolyCollision: boolean;
+	VertexColorGuid: Guid;
+	BodySetup: BodySetup;
+	PhysicsAsset: PhysicsAsset;
+	ShadowPhysicsAsset: PhysicsAsset;
+	NodeMappingData: NodeMappingContainer[];
+	AssetImportData: AssetImportData;
+	SourceFilePath: string;
+	SourceFileTimestamp: string;
+	ThumbnailInfo: ThumbnailInfo;
+	bHasCustomDefaultEditorCamera: boolean;
+	DefaultEditorCameraLocation: Vector;
+	DefaultEditorCameraRotation: Rotator;
+	DefaultEditorCameraLookAt: Vector;
+	DefaultEditorCameraOrthoZoom: number;
+	PreviewAttachedAssetContainer: PreviewAssetAttachContainer;
+	MorphTargets: MorphTarget[];
+	FloorOffset: number;
+	RetargetBasePose: Transform[];
+	ClothingAssets: ClothingAssetData_Legacy[];
+	PostProcessAnimBlueprint: UnrealEngineClass;
+	MeshClothingAssets: ClothingAssetBase[];
+	SamplingInfo: SkeletalMeshSamplingInfo;
+	AssetUserData: AssetUserData[];
+	Sockets: SkeletalMeshSocket[];
+	SkinWeightProfiles: SkinWeightProfileInfo[];
+	static Load(ResourceName: string): SkeletalMesh;
+	static Find(Outer: UObject, ResourceName: string): SkeletalMesh;
+	static GetDefaultObject(): SkeletalMesh;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMesh;
+	SetLODSettings(InLODSettings: SkeletalMeshLODSettings): void;
+	NumSockets(): number;
+	K2_GetAllMorphTargetNames(): string[];
+	IsSectionUsingCloth(InSectionIndex: number,bCheckCorrespondingSections: boolean): boolean;
+	GetSocketByIndex(index: number): SkeletalMeshSocket;
+	GetNodeMappingContainer(SourceAsset: Blueprint): NodeMappingContainer;
+	GetImportedBounds(): BoxSphereBounds;
+	GetBounds(): BoxSphereBounds;
+	FindSocketInfo(InSocketName: string,OutTransform?: Transform,OutBoneIndex?: number,OutIndex?: number): {OutTransform: Transform, OutBoneIndex: number, OutIndex: number, $: SkeletalMeshSocket};
+	FindSocketAndIndex(InSocketName: string,OutIndex?: number): {OutIndex: number, $: SkeletalMeshSocket};
+	FindSocket(InSocketName: string): SkeletalMeshSocket;
+	static C(Other: UObject | any): SkeletalMesh;
+}
+
+declare class SkelMeshComponentLODInfo { 
+	HiddenMaterials: boolean[];
+	clone() : SkelMeshComponentLODInfo;
+	static C(Other: UObject | any): SkelMeshComponentLODInfo;
+}
+
+declare type EVisibilityBasedAnimTickOption = 'AlwaysTickPoseAndRefreshBones' | 'AlwaysTickPose' | 'OnlyTickMontagesWhenNotRendered' | 'OnlyTickPoseWhenRendered' | 'EVisibilityBasedAnimTickOption_MAX';
+declare var EVisibilityBasedAnimTickOption : { AlwaysTickPoseAndRefreshBones:'AlwaysTickPoseAndRefreshBones',AlwaysTickPose:'AlwaysTickPose',OnlyTickMontagesWhenNotRendered:'OnlyTickMontagesWhenNotRendered',OnlyTickPoseWhenRendered:'OnlyTickPoseWhenRendered',EVisibilityBasedAnimTickOption_MAX:'EVisibilityBasedAnimTickOption_MAX', };
+declare class SkelMeshSkinWeightInfo { 
+	Bones: number;
+	Weights: number;
+	clone() : SkelMeshSkinWeightInfo;
+	static C(Other: UObject | any): SkelMeshSkinWeightInfo;
+	BreakSkinWeightInfo(Bone0?: number,Weight0?: number,Bone1?: number,Weight1?: number,Bone2?: number,Weight2?: number,Bone3?: number,Weight3?: number): {Bone0: number, Weight0: number, Bone1: number, Weight1: number, Bone2: number, Weight2: number, Bone3: number, Weight3: number};
+	static BreakSkinWeightInfo(InWeight: SkelMeshSkinWeightInfo,Bone0?: number,Weight0?: number,Bone1?: number,Weight1?: number,Bone2?: number,Weight2?: number,Bone3?: number,Weight3?: number): {Bone0: number, Weight0: number, Bone1: number, Weight1: number, Bone2: number, Weight2: number, Bone3: number, Weight3: number};
+	static MakeSkinWeightInfo(Bone0: number,Weight0: number,Bone1: number,Weight1: number,Bone2: number,Weight2: number,Bone3: number,Weight3: number): SkelMeshSkinWeightInfo;
+}
+
+declare type EPhysBodyOp = 'PBO_None' | 'PBO_Term' | 'PBO_MAX';
+declare var EPhysBodyOp : { PBO_None:'PBO_None',PBO_Term:'PBO_Term',PBO_MAX:'PBO_MAX', };
+declare class SkinnedMeshComponent extends MeshComponent { 
+	SkeletalMesh: SkeletalMesh;
+	MasterPoseComponent: any;
+	WireframeColor: Color;
+	PhysicsAssetOverride: PhysicsAsset;
+	ForcedLodModel: number;
+	MinLodModel: number;
+	StreamingDistanceMultiplier: number;
+	LODInfo: SkelMeshComponentLODInfo[];
+	VisibilityBasedAnimTickOption: EVisibilityBasedAnimTickOption;
+	bOverrideMinLOD: boolean;
+	bUseBoundsFromMasterPoseComponent: boolean;
+	bForceWireframe: boolean;
+	bDisplayBones: boolean;
+	bDisableMorphTarget: boolean;
+	bHideSkin: boolean;
+	bPerBoneMotionBlur: boolean;
+	bComponentUseFixedSkelBounds: boolean;
+	bConsiderAllBodiesForBounds: boolean;
+	bSyncAttachParentLOD: boolean;
+	bCanHighlightSelectedSections: boolean;
+	bRecentlyRendered: boolean;
+	bCastCapsuleDirectShadow: boolean;
+	bCastCapsuleIndirectShadow: boolean;
+	bCPUSkinning: boolean;
+	bEnableUpdateRateOptimizations: boolean;
+	bDisplayDebugUpdateRateOptimizations: boolean;
+	bRenderStatic: boolean;
+	bIgnoreMasterPoseComponentLOD: boolean;
+	bCachedLocalBoundsUpToDate: boolean;
+	bForceMeshObjectUpdate: boolean;
+	CapsuleIndirectShadowMinVisibility: number;
+	CachedLocalBounds: BoxSphereBounds;
+	static Load(ResourceName: string): SkinnedMeshComponent;
+	static Find(Outer: UObject, ResourceName: string): SkinnedMeshComponent;
+	static GetDefaultObject(): SkinnedMeshComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkinnedMeshComponent;
+	UnloadSkinWeightProfile(InProfileName: string): void;
+	UnHideBoneByName(BoneName: string): void;
+	TransformToBoneSpace(BoneName: string,InPosition: Vector,InRotation: Rotator,OutPosition?: Vector,OutRotation?: Rotator): {OutPosition: Vector, OutRotation: Rotator};
+	TransformFromBoneSpace(BoneName: string,InPosition: Vector,InRotation: Rotator,OutPosition?: Vector,OutRotation?: Rotator): {OutPosition: Vector, OutRotation: Rotator};
+	ShowMaterialSection(MaterialID: number,bShow: boolean,LODIndex: number): void;
+	ShowAllMaterialSections(LODIndex: number): void;
+	SetVertexColorOverride_LinearColor(LODIndex: number,VertexColors: LinearColor[]): void;
+	SetSkinWeightProfile(InProfileName: string): boolean;
+	SetSkinWeightOverride(LODIndex: number,SkinWeights: SkelMeshSkinWeightInfo[]): void;
+	SetSkeletalMesh(NewMesh: SkeletalMesh,bReinitPose: boolean): void;
+	SetRenderStatic(bNewValue: boolean): void;
+	SetPhysicsAsset(NewPhysicsAsset: PhysicsAsset,bForceReInit: boolean): void;
+	SetMinLOD(InNewMinLOD: number): void;
+	SetMasterPoseComponent(NewMasterBoneComponent: SkinnedMeshComponent,bForceUpdate: boolean): void;
+	SetForcedLOD(InNewForcedLOD: number): void;
+	SetCastCapsuleIndirectShadow(bNewValue: boolean): void;
+	SetCastCapsuleDirectShadow(bNewValue: boolean): void;
+	SetCapsuleIndirectShadowMinVisibility(NewValue: number): void;
+	IsUsingSkinWeightProfile(): boolean;
+	IsMaterialSectionShown(MaterialID: number,LODIndex: number): boolean;
+	IsBoneHiddenByName(BoneName: string): boolean;
+	HideBoneByName(BoneName: string,PhysBodyOption: EPhysBodyOp): void;
+	GetTwistAndSwingAngleOfDeltaRotationFromRefPose(BoneName: string,OutTwistAngle?: number,OutSwingAngle?: number): {OutTwistAngle: number, OutSwingAngle: number, $: boolean};
+	GetSocketBoneName(InSocketName: string): string;
+	GetRefPosePosition(BoneIndex: number): Vector;
+	GetParentBone(BoneName: string): string;
+	GetNumLODs(): number;
+	GetNumBones(): number;
+	GetDeltaTransformFromRefPose(BoneName: string,BaseName: string): Transform;
+	GetCurrentSkinWeightProfileName(): string;
+	GetBoneName(BoneIndex: number): string;
+	GetBoneIndex(BoneName: string): number;
+	FindClosestBone_K2(TestLocation: Vector,BoneLocation?: Vector,IgnoreScale?: number,bRequirePhysicsAsset?: boolean): {BoneLocation: Vector, $: string};
+	ClearVertexColorOverride(LODIndex: number): void;
+	ClearSkinWeightProfile(): void;
+	ClearSkinWeightOverride(LODIndex: number): void;
+	BoneIsChildOf(BoneName: string,ParentBoneName: string): boolean;
+	static C(Other: UObject | any): SkinnedMeshComponent;
+}
+
+declare class AnimGroupInfo { 
+	Name: string;
+	Color: LinearColor;
+	clone() : AnimGroupInfo;
+	static C(Other: UObject | any): AnimGroupInfo;
+}
+
+declare class AnimParentNodeAssetOverride { 
+	NewAsset: AnimationAsset;
+	ParentNodeGuid: Guid;
+	clone() : AnimParentNodeAssetOverride;
+	static C(Other: UObject | any): AnimParentNodeAssetOverride;
+}
+
+declare class PoseWatch extends UObject { 
+	UNode: EdGraphNode;
+	PoseWatchColour: Color;
+	static Load(ResourceName: string): PoseWatch;
+	static Find(Outer: UObject, ResourceName: string): PoseWatch;
+	static GetDefaultObject(): PoseWatch;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PoseWatch;
+	static C(Other: UObject | any): PoseWatch;
+}
+
+declare class AnimBlueprint extends Blueprint { 
+	TargetSkeleton: Skeleton;
+	Groups: AnimGroupInfo[];
+	bUseMultiThreadedAnimationUpdate: boolean;
+	bWarnAboutBlueprintUsage: boolean;
+	ParentAssetOverrides: AnimParentNodeAssetOverride[];
+	PoseWatches: PoseWatch[];
+	PreviewSkeletalMesh: SkeletalMesh;
+	static Load(ResourceName: string): AnimBlueprint;
+	static Find(Outer: UObject, ResourceName: string): AnimBlueprint;
+	static GetDefaultObject(): AnimBlueprint;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimBlueprint;
+	static C(Other: UObject | any): AnimBlueprint;
+}
+
+declare class SingleAnimationPlayData { 
+	AnimToPlay: AnimationAsset;
+	bSavedLooping: boolean;
+	bSavedPlaying: boolean;
+	SavedPosition: number;
+	SavedPlayRate: number;
+	clone() : SingleAnimationPlayData;
+	static C(Other: UObject | any): SingleAnimationPlayData;
+}
+
+declare type EKinematicBonesUpdateToPhysics = 'SkipSimulatingBones' | 'SkipAllBones' | 'EKinematicBonesUpdateToPhysics_MAX';
+declare var EKinematicBonesUpdateToPhysics : { SkipSimulatingBones:'SkipSimulatingBones',SkipAllBones:'SkipAllBones',EKinematicBonesUpdateToPhysics_MAX:'EKinematicBonesUpdateToPhysics_MAX', };
+declare type EPhysicsTransformUpdateMode = 'SimulationUpatesComponentTransform' | 'ComponentTransformIsKinematic' | 'EPhysicsTransformUpdateMode_MAX';
+declare var EPhysicsTransformUpdateMode : { SimulationUpatesComponentTransform:'SimulationUpatesComponentTransform',ComponentTransformIsKinematic:'ComponentTransformIsKinematic',EPhysicsTransformUpdateMode_MAX:'EPhysicsTransformUpdateMode_MAX', };
+declare type EAnimationMode = 'AnimationBlueprint' | 'AnimationSingleNode' | 'AnimationCustomMode' | 'EAnimationMode_MAX';
+declare var EAnimationMode : { AnimationBlueprint:'AnimationBlueprint',AnimationSingleNode:'AnimationSingleNode',AnimationCustomMode:'AnimationCustomMode',EAnimationMode_MAX:'EAnimationMode_MAX', };
+declare class ClothingSimulationFactory extends UObject { 
+	static Load(ResourceName: string): ClothingSimulationFactory;
+	static Find(Outer: UObject, ResourceName: string): ClothingSimulationFactory;
+	static GetDefaultObject(): ClothingSimulationFactory;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingSimulationFactory;
+	static C(Other: UObject | any): ClothingSimulationFactory;
+}
+
+declare class ClothingSimulationInteractor extends UObject { 
+	static Load(ResourceName: string): ClothingSimulationInteractor;
+	static Find(Outer: UObject, ResourceName: string): ClothingSimulationInteractor;
+	static GetDefaultObject(): ClothingSimulationInteractor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingSimulationInteractor;
+	PhysicsAssetUpdated(): void;
+	ClothConfigUpdated(): void;
+	static C(Other: UObject | any): ClothingSimulationInteractor;
+}
+
+declare class SkeletalMeshComponent extends SkinnedMeshComponent { 
+	AnimationBlueprint: AnimBlueprint;
+	AnimBlueprintGeneratedClass: UnrealEngineClass;
+	AnimClass: UnrealEngineClass;
+	AnimScriptInstance: AnimInstance;
+	SubInstances: AnimInstance[];
+	PostProcessAnimInstance: AnimInstance;
+	AnimationData: SingleAnimationPlayData;
+	RootBoneTranslation: Vector;
+	LineCheckBoundsScale: Vector;
+	CachedBoneSpaceTransforms: Transform[];
+	CachedComponentSpaceTransforms: Transform[];
+	GlobalAnimRateScale: number;
+	KinematicBonesUpdateType: EKinematicBonesUpdateToPhysics;
+	PhysicsTransformUpdateMode: EPhysicsTransformUpdateMode;
+	AnimationMode: EAnimationMode;
+	bDisablePostProcessBlueprint: boolean;
+	bUpdateOverlapsOnAnimationFinalize: boolean;
+	bHasValidBodies: boolean;
+	bBlendPhysics: boolean;
+	bEnablePhysicsOnDedicatedServer: boolean;
+	bUpdateJointsFromAnimation: boolean;
+	bDisableClothSimulation: boolean;
+	bAllowAnimCurveEvaluation: boolean;
+	bDisableAnimCurves: boolean;
+	bCollideWithEnvironment: boolean;
+	bCollideWithAttachedChildren: boolean;
+	bLocalSpaceSimulation: boolean;
+	bResetAfterTeleport: boolean;
+	bDeferKinematicBoneUpdate: boolean;
+	bNoSkeletonUpdate: boolean;
+	bPauseAnims: boolean;
+	bUseRefPoseOnInitAnim: boolean;
+	bEnablePerPolyCollision: boolean;
+	bForceRefpose: boolean;
+	bOnlyAllowAutonomousTickPose: boolean;
+	bIsAutonomousTickPose: boolean;
+	bOldForceRefPose: boolean;
+	bShowPrePhysBones: boolean;
+	bRequiredBonesUpToDate: boolean;
+	bAnimTreeInitialised: boolean;
+	bIncludeComponentLocationIntoBounds: boolean;
+	bEnableLineCheckWithBounds: boolean;
+	bUseBendingElements: boolean;
+	bUseTetrahedralConstraints: boolean;
+	bUseThinShellVolumeConstraints: boolean;
+	bUseSelfCollisions: boolean;
+	bUseContinuousCollisionDetection: boolean;
+	bPropagateCurvesToSlaves: boolean;
+	bSkipKinematicUpdateWhenInterpolating: boolean;
+	bSkipBoundsUpdateWhenInterpolating: boolean;
+	bUpdateAnimationInEditor: boolean;
+	bNeedsQueuedAnimEventsDispatched: boolean;
+	CachedAnimCurveUidVersion: any;
+	ClothBlendWeight: number;
+	EdgeStiffness: number;
+	BendingStiffness: number;
+	AreaStiffness: number;
+	VolumeStiffness: number;
+	StrainLimitingStiffness: number;
+	ShapeTargetStiffness: number;
+	DisallowedAnimCurves: string[];
+	BodySetup: BodySetup;
+	OnConstraintBroken: UnrealEngineMulticastDelegate<(ConstraintIndex: number) => void>;
+	ClothingSimulationFactory: UnrealEngineClass;
+	TeleportDistanceThreshold: number;
+	TeleportRotationThreshold: number;
+	LastPoseTickFrame: any;
+	ClothingInteractor: ClothingSimulationInteractor;
+	OnAnimInitialized: UnrealEngineMulticastDelegate<() => void>;
+	SequenceToPlay: AnimSequence;
+	AnimToPlay: AnimationAsset;
+	bDefaultLooping: boolean;
+	bDefaultPlaying: boolean;
+	DefaultPosition: number;
+	DefaultPlayRate: number;
+	static Load(ResourceName: string): SkeletalMeshComponent;
+	static Find(Outer: UObject, ResourceName: string): SkeletalMeshComponent;
+	static GetDefaultObject(): SkeletalMeshComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMeshComponent;
+	UnbindClothFromMasterPoseComponent(bRestoreSimulationSpace: boolean): void;
+	ToggleDisablePostProcessBlueprint(): void;
+	TermBodiesBelow(ParentBoneName: string): void;
+	SuspendClothingSimulation(): void;
+	Stop(): void;
+	SnapshotPose(Snapshot?: PoseSnapshot): {Snapshot: PoseSnapshot};
+	SetUpdateAnimationInEditor(NewUpdateState: boolean): void;
+	SetTeleportRotationThreshold(Threshold: number): void;
+	SetTeleportDistanceThreshold(Threshold: number): void;
+	SetPosition(InPos: number,bFireNotifies: boolean): void;
+	SetPlayRate(Rate: number): void;
+	SetPhysicsBlendWeight(PhysicsBlendWeight: number): void;
+	SetNotifyRigidBodyCollisionBelow(bNewNotifyRigidBodyCollision: boolean,BoneName: string,bIncludeSelf: boolean): void;
+	SetMorphTarget(MorphTargetName: string,Value: number,bRemoveZeroWeight: boolean): void;
+	SetLayerOverlay(InClass: UnrealEngineClass): void;
+	SetEnablePhysicsBlending(bNewBlendPhysics: boolean): void;
+	SetEnableGravityOnAllBodiesBelow(bEnableGravity: boolean,BoneName: string,bIncludeSelf: boolean): void;
+	SetEnableBodyGravity(bEnableGravity: boolean,BoneName: string): void;
+	SetDisablePostProcessBlueprint(bInDisablePostProcess: boolean): void;
+	SetDisableAnimCurves(bInDisableAnimCurves: boolean): void;
+	SetConstraintProfileForAll(ProfileName: string,bDefaultIfNotFound: boolean): void;
+	SetConstraintProfile(JointName: string,ProfileName: string,bDefaultIfNotFound: boolean): void;
+	SetClothMaxDistanceScale(Scale: number): void;
+	SetBodyNotifyRigidBodyCollision(bNewNotifyRigidBodyCollision: boolean,BoneName: string): void;
+	SetAnimClass(NewClass: UnrealEngineClass): void;
+	SetAnimationMode(InAnimationMode: EAnimationMode): void;
+	SetAnimation(NewAnimToPlay: AnimationAsset): void;
+	SetAngularLimits(InBoneName: string,Swing1LimitAngle: number,TwistLimitAngle: number,Swing2LimitAngle: number): void;
+	SetAllowedAnimCurvesEvaluation(List: string[],bAllow: boolean): void;
+	SetAllowAnimCurveEvaluation(bInAllow: boolean): void;
+	SetAllMotorsAngularVelocityDrive(bEnableSwingDrive: boolean,bEnableTwistDrive: boolean,bSkipCustomPhysicsType: boolean): void;
+	SetAllMotorsAngularPositionDrive(bEnableSwingDrive: boolean,bEnableTwistDrive: boolean,bSkipCustomPhysicsType: boolean): void;
+	SetAllMotorsAngularDriveParams(InSpring: number,InDamping: number,InForceLimit: number,bSkipCustomPhysicsType: boolean): void;
+	SetAllBodiesSimulatePhysics(bNewSimulate: boolean): void;
+	SetAllBodiesPhysicsBlendWeight(PhysicsBlendWeight: number,bSkipCustomPhysicsType: boolean): void;
+	SetAllBodiesBelowSimulatePhysics(InBoneName: string,bNewSimulate: boolean,bIncludeSelf: boolean): void;
+	SetAllBodiesBelowPhysicsBlendWeight(InBoneName: string,PhysicsBlendWeight: number,bSkipCustomPhysicsType: boolean,bIncludeSelf: boolean): void;
+	ResumeClothingSimulation(): void;
+	ResetClothTeleportMode(): void;
+	ResetAnimInstanceDynamics(InTeleportType: ETeleportType): void;
+	ResetAllowedAnimCurveEvaluation(): void;
+	ResetAllBodiesSimulatePhysics(): void;
+	PlayAnimation(NewAnimToPlay: AnimationAsset,bLooping: boolean): void;
+	Play(bLooping: boolean): void;
+	OverrideAnimationData(InAnimToPlay: AnimationAsset,bIsLooping: boolean,bIsPlaying: boolean,Position: number,PlayRate: number): void;
+	K2_GetClosestPointOnPhysicsAsset(WorldPosition: Vector,ClosestWorldPosition?: Vector,Normal?: Vector,BoneName?: string,Distance?: number): {ClosestWorldPosition: Vector, Normal: Vector, BoneName: string, Distance: number, $: boolean};
+	IsPlaying(): boolean;
+	IsClothingSimulationSuspended(): boolean;
+	IsBodyGravityEnabled(BoneName: string): boolean;
+	HasValidAnimationInstance(): boolean;
+	GetTeleportRotationThreshold(): number;
+	GetTeleportDistanceThreshold(): number;
+	GetSubInstancesByTag(InTag: string,OutSubInstances?: AnimInstance[]): {OutSubInstances: AnimInstance[]};
+	GetSubInstanceByTag(InTag: string): AnimInstance;
+	GetSkeletalCenterOfMass(): Vector;
+	GetPostProcessInstance(): AnimInstance;
+	GetPosition(): number;
+	GetPlayRate(): number;
+	GetMorphTarget(MorphTargetName: string): number;
+	GetLayerSubInstanceByGroup(InGroup: string): AnimInstance;
+	GetDisablePostProcessBlueprint(): boolean;
+	GetDisableAnimCurves(): boolean;
+	GetCurrentJointAngles(InBoneName: string,Swing1Angle?: number,TwistAngle?: number,Swing2Angle?: number): {Swing1Angle: number, TwistAngle: number, Swing2Angle: number};
+	GetClothMaxDistanceScale(): number;
+	GetClothingSimulationInteractor(): ClothingSimulationInteractor;
+	GetBoneMass(BoneName: string,bScaleMass: boolean): number;
+	GetAnimInstance(): AnimInstance;
+	GetAnimClass(): UnrealEngineClass;
+	GetAnimationMode(): EAnimationMode;
+	GetAllowedAnimCurveEvaluate(): boolean;
+	ForceClothNextUpdateTeleportAndReset(): void;
+	ForceClothNextUpdateTeleport(): void;
+	FindConstraintBoneName(ConstraintIndex: number): string;
+	ClearMorphTargets(): void;
+	BreakConstraint(Impulse: Vector,HitLocation: Vector,InBoneName: string): void;
+	BindClothToMasterPoseComponent(): void;
+	AllowAnimCurveEvaluation(NameOfCurve: string,bAllow: boolean): void;
+	AddImpulseToAllBodiesBelow(Impulse: Vector,BoneName: string,bVelChange: boolean,bIncludeSelf: boolean): void;
+	AddForceToAllBodiesBelow(Force: Vector,BoneName: string,bAccelChange: boolean,bIncludeSelf: boolean): void;
+	AccumulateAllBodiesBelowPhysicsBlendWeight(InBoneName: string,AddPhysicsBlendWeight: number,bSkipCustomPhysicsType: boolean): void;
+	static C(Other: UObject | any): SkeletalMeshComponent;
+	K2_DirectionBetweenSockets(SocketOrBoneNameFrom: string,SocketOrBoneNameTo: string): Vector;
+	K2_DistanceBetweenTwoSocketsAndMapRange(SocketOrBoneNameA: string,SocketSpaceA: ERelativeTransformSpace,SocketOrBoneNameB: string,SocketSpaceB: ERelativeTransformSpace,bRemapRange: boolean,InRangeMin: number,InRangeMax: number,OutRangeMin: number,OutRangeMax: number): number;
+	static K2_DirectionBetweenSockets(Component: SkeletalMeshComponent,SocketOrBoneNameFrom: string,SocketOrBoneNameTo: string): Vector;
+	static K2_DistanceBetweenTwoSocketsAndMapRange(Component: SkeletalMeshComponent,SocketOrBoneNameA: string,SocketSpaceA: ERelativeTransformSpace,SocketOrBoneNameB: string,SocketSpaceB: ERelativeTransformSpace,bRemapRange: boolean,InRangeMin: number,InRangeMax: number,OutRangeMin: number,OutRangeMax: number): number;
+}
+
+declare type EMovementMode = 'MOVE_None' | 'MOVE_Walking' | 'MOVE_NavWalking' | 'MOVE_Falling' | 'MOVE_Swimming' | 'MOVE_Flying' | 'MOVE_Custom' | 'MOVE_MAX';
+declare var EMovementMode : { MOVE_None:'MOVE_None',MOVE_Walking:'MOVE_Walking',MOVE_NavWalking:'MOVE_NavWalking',MOVE_Falling:'MOVE_Falling',MOVE_Swimming:'MOVE_Swimming',MOVE_Flying:'MOVE_Flying',MOVE_Custom:'MOVE_Custom',MOVE_MAX:'MOVE_MAX', };
+declare type ENetworkSmoothingMode = 'Disabled' | 'Linear' | 'Exponential' | 'Replay' | 'ENetworkSmoothingMode_MAX';
+declare var ENetworkSmoothingMode : { Disabled:'Disabled',Linear:'Linear',Exponential:'Exponential',Replay:'Replay',ENetworkSmoothingMode_MAX:'ENetworkSmoothingMode_MAX', };
+declare class FindFloorResult { 
+	bBlockingHit: boolean;
+	bWalkableFloor: boolean;
+	bLineTrace: boolean;
+	FloorDist: number;
+	LineDist: number;
+	HitResult: HitResult;
+	clone() : FindFloorResult;
+	static C(Other: UObject | any): FindFloorResult;
+}
+
+declare class NavAvoidanceMask { 
+	bGroup0: boolean;
+	bGroup1: boolean;
+	bGroup2: boolean;
+	bGroup3: boolean;
+	bGroup4: boolean;
+	bGroup5: boolean;
+	bGroup6: boolean;
+	bGroup7: boolean;
+	bGroup8: boolean;
+	bGroup9: boolean;
+	bGroup10: boolean;
+	bGroup11: boolean;
+	bGroup12: boolean;
+	bGroup13: boolean;
+	bGroup14: boolean;
+	bGroup15: boolean;
+	bGroup16: boolean;
+	bGroup17: boolean;
+	bGroup18: boolean;
+	bGroup19: boolean;
+	bGroup20: boolean;
+	bGroup21: boolean;
+	bGroup22: boolean;
+	bGroup23: boolean;
+	bGroup24: boolean;
+	bGroup25: boolean;
+	bGroup26: boolean;
+	bGroup27: boolean;
+	bGroup28: boolean;
+	bGroup29: boolean;
+	bGroup30: boolean;
+	bGroup31: boolean;
+	clone() : NavAvoidanceMask;
+	static C(Other: UObject | any): NavAvoidanceMask;
+}
+
+declare class CharacterMovementComponentPostPhysicsTickFunction extends TickFunction { 
+	clone() : CharacterMovementComponentPostPhysicsTickFunction;
+	static C(Other: UObject | any): CharacterMovementComponentPostPhysicsTickFunction;
+}
+
+declare class RootMotionSourceSettings { 
+	Flags: number;
+	clone() : RootMotionSourceSettings;
+	static C(Other: UObject | any): RootMotionSourceSettings;
+}
+
+declare class Vector_NetQuantize10 extends Vector { 
+	clone() : Vector_NetQuantize10;
+	static C(Other: UObject | any): Vector_NetQuantize10;
+}
+
+declare class RootMotionSourceGroup { 
+	bHasAdditiveSources: boolean;
+	bHasOverrideSources: boolean;
+	bIsAdditiveVelocityApplied: boolean;
+	LastAccumulatedSettings: RootMotionSourceSettings;
+	LastPreAdditiveVelocity: Vector_NetQuantize10;
+	clone() : RootMotionSourceGroup;
+	static C(Other: UObject | any): RootMotionSourceGroup;
+}
+
+declare class RootMotionMovementParams { 
+	bHasRootMotion: boolean;
+	BlendWeight: number;
+	RootMotionTransform: Transform;
+	clone() : RootMotionMovementParams;
+	static C(Other: UObject | any): RootMotionMovementParams;
+}
+
+declare class CharacterMovementComponent extends PawnMovementComponent { 
+	CharacterOwner: Character;
+	GravityScale: number;
+	MaxStepHeight: number;
+	JumpZVelocity: number;
+	JumpOffJumpZFactor: number;
+	WalkableFloorAngle: number;
+	WalkableFloorZ: number;
+	MovementMode: EMovementMode;
+	CustomMovementMode: number;
+	NetworkSmoothingMode: ENetworkSmoothingMode;
+	GroundFriction: number;
+	MaxWalkSpeed: number;
+	MaxWalkSpeedCrouched: number;
+	MaxSwimSpeed: number;
+	MaxFlySpeed: number;
+	MaxCustomMovementSpeed: number;
+	MaxAcceleration: number;
+	MinAnalogWalkSpeed: number;
+	BrakingFrictionFactor: number;
+	BrakingFriction: number;
+	BrakingSubStepTime: number;
+	BrakingDecelerationWalking: number;
+	BrakingDecelerationFalling: number;
+	BrakingDecelerationSwimming: number;
+	BrakingDecelerationFlying: number;
+	AirControl: number;
+	AirControlBoostMultiplier: number;
+	AirControlBoostVelocityThreshold: number;
+	FallingLateralFriction: number;
+	CrouchedHalfHeight: number;
+	Buoyancy: number;
+	PerchRadiusThreshold: number;
+	PerchAdditionalHeight: number;
+	RotationRate: Rotator;
+	bUseSeparateBrakingFriction: boolean;
+	bApplyGravityWhileJumping: boolean;
+	bUseControllerDesiredRotation: boolean;
+	bOrientRotationToMovement: boolean;
+	bSweepWhileNavWalking: boolean;
+	bMovementInProgress: boolean;
+	bEnableScopedMovementUpdates: boolean;
+	bEnableServerDualMoveScopedMovementUpdates: boolean;
+	bForceMaxAccel: boolean;
+	bRunPhysicsWithNoController: boolean;
+	bForceNextFloorCheck: boolean;
+	bShrinkProxyCapsule: boolean;
+	bCanWalkOffLedges: boolean;
+	bCanWalkOffLedgesWhenCrouching: boolean;
+	bNetworkSkipProxyPredictionOnNetUpdate: boolean;
+	bNetworkAlwaysReplicateTransformUpdateTimestamp: boolean;
+	bDeferUpdateMoveComponent: boolean;
+	bEnablePhysicsInteraction: boolean;
+	bTouchForceScaledToMass: boolean;
+	bPushForceScaledToMass: boolean;
+	bPushForceUsingZOffset: boolean;
+	bScalePushForceToVelocity: boolean;
+	DeferredUpdatedMoveComponent: SceneComponent;
+	MaxOutOfWaterStepHeight: number;
+	OutofWaterZ: number;
+	Mass: number;
+	StandingDownwardForceScale: number;
+	InitialPushForceFactor: number;
+	PushForceFactor: number;
+	PushForcePointZOffsetFactor: number;
+	TouchForceFactor: number;
+	MinTouchForce: number;
+	MaxTouchForce: number;
+	RepulsionForce: number;
+	bForceBraking: boolean;
+	CrouchedSpeedMultiplier: number;
+	UpperImpactNormalScale: number;
+	Acceleration: Vector;
+	LastUpdateRotation: Quat;
+	LastUpdateLocation: Vector;
+	LastUpdateVelocity: Vector;
+	ServerLastTransformUpdateTimeStamp: number;
+	ServerLastClientGoodMoveAckTime: number;
+	ServerLastClientAdjustmentTime: number;
+	PendingImpulseToApply: Vector;
+	PendingForceToApply: Vector;
+	AnalogInputModifier: number;
+	MaxSimulationTimeStep: number;
+	MaxSimulationIterations: number;
+	MaxJumpApexAttemptsPerSimulation: number;
+	MaxDepenetrationWithGeometry: number;
+	MaxDepenetrationWithGeometryAsProxy: number;
+	MaxDepenetrationWithPawn: number;
+	MaxDepenetrationWithPawnAsProxy: number;
+	NetworkSimulatedSmoothLocationTime: number;
+	NetworkSimulatedSmoothRotationTime: number;
+	ListenServerNetworkSimulatedSmoothLocationTime: number;
+	ListenServerNetworkSimulatedSmoothRotationTime: number;
+	NetProxyShrinkRadius: number;
+	NetProxyShrinkHalfHeight: number;
+	NetworkMaxSmoothUpdateDistance: number;
+	NetworkNoSmoothUpdateDistance: number;
+	NetworkMinTimeBetweenClientAckGoodMoves: number;
+	NetworkMinTimeBetweenClientAdjustments: number;
+	NetworkMinTimeBetweenClientAdjustmentsLargeCorrection: number;
+	NetworkLargeClientCorrectionDistance: number;
+	LedgeCheckThreshold: number;
+	JumpOutOfWaterPitch: number;
+	CurrentFloor: FindFloorResult;
+	DefaultLandMovementMode: EMovementMode;
+	DefaultWaterMovementMode: EMovementMode;
+	GroundMovementMode: EMovementMode;
+	bMaintainHorizontalGroundVelocity: boolean;
+	bImpartBaseVelocityX: boolean;
+	bImpartBaseVelocityY: boolean;
+	bImpartBaseVelocityZ: boolean;
+	bImpartBaseAngularVelocity: boolean;
+	bJustTeleported: boolean;
+	bNetworkUpdateReceived: boolean;
+	bNetworkMovementModeChanged: boolean;
+	bIgnoreClientMovementErrorChecksAndCorrection: boolean;
+	bServerAcceptClientAuthoritativePosition: boolean;
+	bNotifyApex: boolean;
+	bCheatFlying: boolean;
+	bWantsToCrouch: boolean;
+	bCrouchMaintainsBaseLocation: boolean;
+	bIgnoreBaseRotation: boolean;
+	bFastAttachedMove: boolean;
+	bAlwaysCheckFloor: boolean;
+	bUseFlatBaseForFloorChecks: boolean;
+	bPerformingJumpOff: boolean;
+	bWantsToLeaveNavWalking: boolean;
+	bUseRVOAvoidance: boolean;
+	bRequestedMoveUseAcceleration: boolean;
+	bWasSimulatingRootMotion: boolean;
+	bAllowPhysicsRotationDuringAnimRootMotion: boolean;
+	bHasRequestedVelocity: boolean;
+	bRequestedMoveWithMaxSpeed: boolean;
+	bWasAvoidanceUpdated: boolean;
+	bProjectNavMeshWalking: boolean;
+	bProjectNavMeshOnBothWorldChannels: boolean;
+	AvoidanceConsiderationRadius: number;
+	RequestedVelocity: Vector;
+	AvoidanceUID: number;
+	AvoidanceGroup: NavAvoidanceMask;
+	GroupsToAvoid: NavAvoidanceMask;
+	GroupsToIgnore: NavAvoidanceMask;
+	AvoidanceWeight: number;
+	PendingLaunchVelocity: Vector;
+	NavMeshProjectionInterval: number;
+	NavMeshProjectionTimer: number;
+	NavMeshProjectionInterpSpeed: number;
+	NavMeshProjectionHeightScaleUp: number;
+	NavMeshProjectionHeightScaleDown: number;
+	NavWalkingFloorDistTolerance: number;
+	PostPhysicsTickFunction: CharacterMovementComponentPostPhysicsTickFunction;
+	MinTimeBetweenTimeStampResets: number;
+	CurrentRootMotion: RootMotionSourceGroup;
+	RootMotionParams: RootMotionMovementParams;
+	AnimRootMotionVelocity: Vector;
+	static Load(ResourceName: string): CharacterMovementComponent;
+	static Find(Outer: UObject, ResourceName: string): CharacterMovementComponent;
+	static GetDefaultObject(): CharacterMovementComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CharacterMovementComponent;
+	SetWalkableFloorZ(InWalkableFloorZ: number): void;
+	SetWalkableFloorAngle(InWalkableFloorAngle: number): void;
+	SetMovementMode(NewMovementMode: EMovementMode,NewCustomMode: number): void;
+	SetGroupsToIgnoreMask(GroupMask: NavAvoidanceMask): void;
+	SetGroupsToIgnore(GroupFlags: number): void;
+	SetGroupsToAvoidMask(GroupMask: NavAvoidanceMask): void;
+	SetGroupsToAvoid(GroupFlags: number): void;
+	SetAvoidanceGroupMask(GroupMask: NavAvoidanceMask): void;
+	SetAvoidanceGroup(GroupFlags: number): void;
+	SetAvoidanceEnabled(bEnable: boolean): void;
+	K2_GetWalkableFloorZ(): number;
+	K2_GetWalkableFloorAngle(): number;
+	K2_GetModifiedMaxAcceleration(): number;
+	K2_FindFloor(CapsuleLocation: Vector,FloorResult?: FindFloorResult): {FloorResult: FindFloorResult};
+	K2_ComputeFloorDist(CapsuleLocation: Vector,LineDistance: number,SweepDistance: number,SweepRadius: number,FloorResult?: FindFloorResult): {FloorResult: FindFloorResult};
+	IsWalking(): boolean;
+	IsWalkable(Hit: HitResult): boolean;
+	GetValidPerchRadius(): number;
+	GetPerchRadiusThreshold(): number;
+	GetMovementBase(): PrimitiveComponent;
+	GetMinAnalogSpeed(): number;
+	GetMaxJumpHeightWithJumpTime(): number;
+	GetMaxJumpHeight(): number;
+	GetMaxBrakingDeceleration(): number;
+	GetMaxAcceleration(): number;
+	GetLastUpdateVelocity(): Vector;
+	GetLastUpdateRotation(): Rotator;
+	GetLastUpdateLocation(): Vector;
+	GetImpartedMovementBaseVelocity(): Vector;
+	GetCurrentAcceleration(): Vector;
+	GetCharacterOwner(): Character;
+	GetAnalogInputModifier(): number;
+	DisableMovement(): void;
+	ClearAccumulatedForces(): void;
+	CapsuleTouched(OverlappedComp: PrimitiveComponent,Other: Actor,OtherComp: PrimitiveComponent,OtherBodyIndex: number,bFromSweep: boolean,SweepResult: HitResult): void;
+	CalcVelocity(DeltaTime: number,Friction: number,bFluid: boolean,BrakingDeceleration: number): void;
+	AddImpulse(Impulse: Vector,bVelocityChange: boolean): void;
+	AddForce(Force: Vector): void;
+	static C(Other: UObject | any): CharacterMovementComponent;
+}
+
+declare class CapsuleComponent extends ShapeComponent { 
+	CapsuleHalfHeight: number;
+	CapsuleRadius: number;
+	CapsuleHeight: number;
+	static Load(ResourceName: string): CapsuleComponent;
+	static Find(Outer: UObject, ResourceName: string): CapsuleComponent;
+	static GetDefaultObject(): CapsuleComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CapsuleComponent;
+	SetCapsuleSize(InRadius: number,InHalfHeight: number,bUpdateOverlaps: boolean): void;
+	SetCapsuleRadius(Radius: number,bUpdateOverlaps: boolean): void;
+	SetCapsuleHalfHeight(HalfHeight: number,bUpdateOverlaps: boolean): void;
+	GetUnscaledCapsuleSize_WithoutHemisphere(OutRadius?: number,OutHalfHeightWithoutHemisphere?: number): {OutRadius: number, OutHalfHeightWithoutHemisphere: number};
+	GetUnscaledCapsuleSize(OutRadius?: number,OutHalfHeight?: number): {OutRadius: number, OutHalfHeight: number};
+	GetUnscaledCapsuleRadius(): number;
+	GetUnscaledCapsuleHalfHeight_WithoutHemisphere(): number;
+	GetUnscaledCapsuleHalfHeight(): number;
+	GetShapeScale(): number;
+	GetScaledCapsuleSize_WithoutHemisphere(OutRadius?: number,OutHalfHeightWithoutHemisphere?: number): {OutRadius: number, OutHalfHeightWithoutHemisphere: number};
+	GetScaledCapsuleSize(OutRadius?: number,OutHalfHeight?: number): {OutRadius: number, OutHalfHeight: number};
+	GetScaledCapsuleRadius(): number;
+	GetScaledCapsuleHalfHeight_WithoutHemisphere(): number;
+	GetScaledCapsuleHalfHeight(): number;
+	static C(Other: UObject | any): CapsuleComponent;
+}
+
+declare class Vector_NetQuantize100 extends Vector { 
+	clone() : Vector_NetQuantize100;
+	static C(Other: UObject | any): Vector_NetQuantize100;
+}
+
+declare class BasedMovementInfo { 
+	MovementBase: PrimitiveComponent;
+	BoneName: string;
+	Location: Vector_NetQuantize100;
+	Rotation: Rotator;
+	bServerHasBaseComponent: boolean;
+	bRelativeRotation: boolean;
+	bServerHasVelocity: boolean;
+	clone() : BasedMovementInfo;
+	static C(Other: UObject | any): BasedMovementInfo;
+}
+
+declare class RepRootMotionMontage { 
+	bIsActive: boolean;
+	AnimMontage: AnimMontage;
+	Position: number;
+	Location: Vector_NetQuantize100;
+	Rotation: Rotator;
+	MovementBase: PrimitiveComponent;
+	MovementBaseBoneName: string;
+	bRelativePosition: boolean;
+	bRelativeRotation: boolean;
+	AuthoritativeRootMotion: RootMotionSourceGroup;
+	Acceleration: Vector_NetQuantize10;
+	LinearVelocity: Vector_NetQuantize10;
+	clone() : RepRootMotionMontage;
+	static C(Other: UObject | any): RepRootMotionMontage;
+}
+
+declare class SimulatedRootMotionReplicatedMove { 
+	Time: number;
+	RootMotion: RepRootMotionMontage;
+	clone() : SimulatedRootMotionReplicatedMove;
+	static C(Other: UObject | any): SimulatedRootMotionReplicatedMove;
+}
+
+declare class Character extends Pawn { 
+	Mesh: SkeletalMeshComponent;
+	CharacterMovement: CharacterMovementComponent;
+	CapsuleComponent: CapsuleComponent;
+	ArrowComponent: ArrowComponent;
+	BasedMovement: BasedMovementInfo;
+	ReplicatedBasedMovement: BasedMovementInfo;
+	AnimRootMotionTranslationScale: number;
+	BaseTranslationOffset: Vector;
+	BaseRotationOffset: Quat;
+	ReplicatedServerLastTransformUpdateTimeStamp: number;
+	ReplayLastTransformUpdateTimeStamp: number;
+	ReplicatedMovementMode: number;
+	bInBaseReplication: boolean;
+	CrouchedEyeHeight: number;
+	bIsCrouched: boolean;
+	bProxyIsJumpForceApplied: boolean;
+	bPressedJump: boolean;
+	bClientUpdating: boolean;
+	bClientWasFalling: boolean;
+	bClientResimulateRootMotion: boolean;
+	bClientResimulateRootMotionSources: boolean;
+	bSimGravityDisabled: boolean;
+	bClientCheckEncroachmentOnNetUpdate: boolean;
+	bServerMoveIgnoreRootMotion: boolean;
+	bWasJumping: boolean;
+	JumpKeyHoldTime: number;
+	JumpForceTimeRemaining: number;
+	ProxyJumpForceStartedTime: number;
+	JumpMaxHoldTime: number;
+	JumpMaxCount: number;
+	JumpCurrentCount: number;
+	OnReachedJumpApex: UnrealEngineMulticastDelegate<() => void>;
+	MovementModeChangedDelegate: UnrealEngineMulticastDelegate<(Character: Character, PrevMovementMode: EMovementMode, PreviousCustomMode: number) => void>;
+	OnCharacterMovementUpdated: UnrealEngineMulticastDelegate<(DeltaSeconds: number, OldLocation: Vector, OldVelocity: Vector) => void>;
+	SavedRootMotion: RootMotionSourceGroup;
+	ClientRootMotionParams: RootMotionMovementParams;
+	RootMotionRepMoves: SimulatedRootMotionReplicatedMove[];
+	RepRootMotion: RepRootMotionMontage;
+	static GetDefaultObject(): Character;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Character;
+	UnCrouch(bClientSimulation: boolean): void;
+	StopJumping(): void;
+	StopAnimMontage(AnimMontage: AnimMontage): void;
+	ServerMoveOld(OldTimeStamp: number,OldAccel: Vector_NetQuantize10,OldMoveFlags: number): void;
+	ServerMoveNoBase(Timestamp: number,InAccel: Vector_NetQuantize10,ClientLoc: Vector_NetQuantize100,CompressedMoveFlags: number,ClientRoll: number,View: any,ClientMovementMode: number): void;
+	ServerMoveDualNoBase(TimeStamp0: number,InAccel0: Vector_NetQuantize10,PendingFlags: number,View0: any,Timestamp: number,InAccel: Vector_NetQuantize10,ClientLoc: Vector_NetQuantize100,NewFlags: number,ClientRoll: number,View: any,ClientMovementMode: number): void;
+	ServerMoveDualHybridRootMotion(TimeStamp0: number,InAccel0: Vector_NetQuantize10,PendingFlags: number,View0: any,Timestamp: number,InAccel: Vector_NetQuantize10,ClientLoc: Vector_NetQuantize100,NewFlags: number,ClientRoll: number,View: any,ClientMovementBase: PrimitiveComponent,ClientBaseBoneName: string,ClientMovementMode: number): void;
+	ServerMoveDual(TimeStamp0: number,InAccel0: Vector_NetQuantize10,PendingFlags: number,View0: any,Timestamp: number,InAccel: Vector_NetQuantize10,ClientLoc: Vector_NetQuantize100,NewFlags: number,ClientRoll: number,View: any,ClientMovementBase: PrimitiveComponent,ClientBaseBoneName: string,ClientMovementMode: number): void;
+	ServerMove(Timestamp: number,InAccel: Vector_NetQuantize10,ClientLoc: Vector_NetQuantize100,CompressedMoveFlags: number,ClientRoll: number,View: any,ClientMovementBase: PrimitiveComponent,ClientBaseBoneName: string,ClientMovementMode: number): void;
+	RootMotionDebugClientPrintOnScreen(inString: string): void;
+	PlayAnimMontage(AnimMontage: AnimMontage,InPlayRate: number,StartSectionName: string): number;
+	OnWalkingOffLedge(PreviousFloorImpactNormal: Vector,PreviousFloorContactNormal: Vector,PreviousLocation: Vector,TimeDelta: number): void;
+	OnRep_RootMotion(): void;
+	OnRep_ReplicatedBasedMovement(): void;
+	OnRep_ReplayLastTransformUpdateTimeStamp(): void;
+	OnRep_IsCrouched(): void;
+	OnLaunched(LaunchVelocity: Vector,bXYOverride: boolean,bZOverride: boolean): void;
+	OnLanded(Hit: HitResult): void;
+	OnJumped(): void;
+	LaunchCharacter(LaunchVelocity: Vector,bXYOverride: boolean,bZOverride: boolean): void;
+	K2_UpdateCustomMovement(DeltaTime: number): void;
+	K2_OnStartCrouch(HalfHeightAdjust: number,ScaledHalfHeightAdjust: number): void;
+	K2_OnMovementModeChanged(PrevMovementMode: EMovementMode,NewMovementMode: EMovementMode,PrevCustomMode: number,NewCustomMode: number): void;
+	K2_OnEndCrouch(HalfHeightAdjust: number,ScaledHalfHeightAdjust: number): void;
+	Jump(): void;
+	IsPlayingRootMotion(): boolean;
+	IsPlayingNetworkedRootMotionMontage(): boolean;
+	IsJumpProvidingForce(): boolean;
+	HasAnyRootMotion(): boolean;
+	GetCurrentMontage(): AnimMontage;
+	GetBaseTranslationOffset(): Vector;
+	GetBaseRotationOffsetRotator(): Rotator;
+	GetAnimRootMotionTranslationScale(): number;
+	Crouch(bClientSimulation: boolean): void;
+	ClientVeryShortAdjustPosition(Timestamp: number,NewLoc: Vector,NewBase: PrimitiveComponent,NewBaseBoneName: string,bHasBase: boolean,bBaseRelativePosition: boolean,ServerMovementMode: number): void;
+	ClientCheatWalk(): void;
+	ClientCheatGhost(): void;
+	ClientCheatFly(): void;
+	ClientAdjustRootMotionSourcePosition(Timestamp: number,ServerRootMotion: RootMotionSourceGroup,bHasAnimRootMotion: boolean,ServerMontageTrackPosition: number,ServerLoc: Vector,ServerRotation: Vector_NetQuantizeNormal,ServerVelZ: number,ServerBase: PrimitiveComponent,ServerBoneName: string,bHasBase: boolean,bBaseRelativePosition: boolean,ServerMovementMode: number): void;
+	ClientAdjustRootMotionPosition(Timestamp: number,ServerMontageTrackPosition: number,ServerLoc: Vector,ServerRotation: Vector_NetQuantizeNormal,ServerVelZ: number,ServerBase: PrimitiveComponent,ServerBoneName: string,bHasBase: boolean,bBaseRelativePosition: boolean,ServerMovementMode: number): void;
+	ClientAdjustPosition(Timestamp: number,NewLoc: Vector,NewVel: Vector,NewBase: PrimitiveComponent,NewBaseBoneName: string,bHasBase: boolean,bBaseRelativePosition: boolean,ServerMovementMode: number): void;
+	ClientAckGoodMove(Timestamp: number): void;
+	CanJumpInternal(): boolean;
+	CanJump(): boolean;
+	CanCrouch(): boolean;
+	CacheInitialMeshOffset(MeshRelativeLocation: Vector,MeshRelativeRotation: Rotator): void;
+	static C(Other: UObject | any): Character;
+}
+
+declare type ENavPathEvent = 'Cleared' | 'NewPath' | 'UpdatedDueToGoalMoved' | 'UpdatedDueToNavigationChanged' | 'Invalidated' | 'RePathFailed' | 'MetaPathUpdate' | 'Custom' | 'ENavPathEvent_MAX';
+declare var ENavPathEvent : { Cleared:'Cleared',NewPath:'NewPath',UpdatedDueToGoalMoved:'UpdatedDueToGoalMoved',UpdatedDueToNavigationChanged:'UpdatedDueToNavigationChanged',Invalidated:'Invalidated',RePathFailed:'RePathFailed',MetaPathUpdate:'MetaPathUpdate',Custom:'Custom',ENavPathEvent_MAX:'ENavPathEvent_MAX', };
+declare type ENavigationOptionFlag = 'Default' | 'Enable' | 'Disable' | 'MAX';
+declare var ENavigationOptionFlag : { Default:'Default',Enable:'Enable',Disable:'Disable',MAX:'MAX', };
+declare class NavigationPath extends UObject { 
+	PathUpdatedNotifier: UnrealEngineMulticastDelegate<(AffectedPath: NavigationPath, PathEvent: ENavPathEvent) => void>;
+	PathPoints: Vector[];
+	RecalculateOnInvalidation: ENavigationOptionFlag;
+	static Load(ResourceName: string): NavigationPath;
+	static Find(Outer: UObject, ResourceName: string): NavigationPath;
+	static GetDefaultObject(): NavigationPath;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationPath;
+	IsValid(): boolean;
+	IsStringPulled(): boolean;
+	IsPartial(): boolean;
+	GetPathLength(): number;
+	GetPathCost(): number;
+	GetDebugString(): string;
+	EnableRecalculationOnInvalidation(DoRecalculation: ENavigationOptionFlag): void;
+	EnableDebugDrawing(bShouldDrawDebugData: boolean,PathColor: LinearColor): void;
+	static C(Other: UObject | any): NavigationPath;
+}
+
+declare class Controller extends Actor { 
+	PlayerState: PlayerState;
+	OnInstigatedAnyDamage: UnrealEngineMulticastDelegate<(Damage: number, DamageType: DamageType, DamagedActor: Actor, DamageCauser: Actor) => void>;
+	StateName: string;
+	Pawn: Pawn;
+	Character: Character;
+	TransformComponent: SceneComponent;
+	ControlRotation: Rotator;
+	bAttachToPawn: boolean;
+	static GetDefaultObject(): Controller;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Controller;
+	UnPossess(): void;
+	StopMovement(): void;
+	SetInitialLocationAndRotation(NewLocation: Vector,NewRotation: Rotator): void;
+	SetIgnoreMoveInput(bNewMoveInput: boolean): void;
+	SetIgnoreLookInput(bNewLookInput: boolean): void;
+	SetControlRotation(NewRotation: Rotator): void;
+	ResetIgnoreMoveInput(): void;
+	ResetIgnoreLookInput(): void;
+	ResetIgnoreInputFlags(): void;
+	ReceiveUnPossess(UnpossessedPawn: Pawn): void;
+	ReceivePossess(PossessedPawn: Pawn): void;
+	ReceiveInstigatedAnyDamage(Damage: number,DamageType: DamageType,DamagedActor: Actor,DamageCauser: Actor): void;
+	Possess(InPawn: Pawn): void;
+	OnRep_PlayerState(): void;
+	OnRep_Pawn(): void;
+	LineOfSightTo(Other: Actor,ViewPoint: Vector,bAlternateChecks: boolean): boolean;
+	K2_GetPawn(): Pawn;
+	IsPlayerController(): boolean;
+	IsMoveInputIgnored(): boolean;
+	IsLookInputIgnored(): boolean;
+	IsLocalPlayerController(): boolean;
+	IsLocalController(): boolean;
+	GetViewTarget(): Actor;
+	GetDesiredRotation(): Rotator;
+	GetControlRotation(): Rotator;
+	ClientSetRotation(NewRotation: Rotator,bResetCamera: boolean): void;
+	ClientSetLocation(NewLocation: Vector,NewRotation: Rotator): void;
+	CastToPlayerController(): PlayerController;
+	static C(Other: UObject | any): Controller;
+	GetCurrentPath(): NavigationPath;
+	SimpleMoveToActor(Goal: Actor): void;
+	SimpleMoveToLocation(Goal: Vector): void;
+	static GetCurrentPath(Controller: Controller): NavigationPath;
+	static SimpleMoveToActor(Controller: Controller,Goal: Actor): void;
+	static SimpleMoveToLocation(Controller: Controller,Goal: Vector): void;
+}
+
+declare class Pawn extends Actor { 
+	bUseControllerRotationPitch: boolean;
+	bUseControllerRotationYaw: boolean;
+	bUseControllerRotationRoll: boolean;
+	bCanAffectNavigationGeneration: boolean;
+	BaseEyeHeight: number;
+	AutoPossessPlayer: EAutoReceiveInput;
+	AutoPossessAI: EAutoPossessAI;
+	RemoteViewPitch: number;
+	AIControllerClass: UnrealEngineClass;
+	PlayerState: PlayerState;
+	LastHitBy: Controller;
+	Controller: Controller;
+	ControlInputVector: Vector;
+	LastControlInputVector: Vector;
+	static GetDefaultObject(): Pawn;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Pawn;
+	SpawnDefaultController(): void;
+	SetCanAffectNavigationGeneration(bNewValue: boolean,bForceUpdate: boolean): void;
+	ReceiveUnpossessed(OldController: Controller): void;
+	ReceivePossessed(NewController: Controller): void;
+	PawnMakeNoise(Loudness: number,NoiseLocation: Vector,bUseNoiseMakerLocation: boolean,NoiseMaker: Actor): void;
+	OnRep_PlayerState(): void;
+	OnRep_Controller(): void;
+	LaunchPawn(LaunchVelocity: Vector,bXYOverride: boolean,bZOverride: boolean): void;
+	K2_GetMovementInputVector(): Vector;
+	IsPlayerControlled(): boolean;
+	IsMoveInputIgnored(): boolean;
+	IsLocallyControlled(): boolean;
+	IsControlled(): boolean;
+	IsBotControlled(): boolean;
+	GetPendingMovementInputVector(): Vector;
+	GetNavAgentLocation(): Vector;
+	GetMovementComponent(): PawnMovementComponent;
+	static GetMovementBaseActor(Pawn: Pawn): Actor;
+	GetLastMovementInputVector(): Vector;
+	GetControlRotation(): Rotator;
+	GetController(): Controller;
+	GetBaseAimRotation(): Rotator;
+	DetachFromControllerPendingDestroy(): void;
+	ConsumeMovementInputVector(): Vector;
+	AddMovementInput(WorldDirection: Vector,ScaleValue: number,bForce: boolean): void;
+	AddControllerYawInput(Val: number): void;
+	AddControllerRollInput(Val: number): void;
+	AddControllerPitchInput(Val: number): void;
+	static C(Other: UObject | any): Pawn;
+	SendAIMessage(Message: string,MessageSource: UObject,bSuccess: boolean): void;
+	static SendAIMessage(Target: Pawn,Message: string,MessageSource: UObject,bSuccess: boolean): void;
+}
+
+declare type ERadialImpulseFalloff = 'RIF_Constant' | 'RIF_Linear' | 'RIF_MAX';
+declare var ERadialImpulseFalloff : { RIF_Constant:'RIF_Constant',RIF_Linear:'RIF_Linear',RIF_MAX:'RIF_MAX', };
+declare class PrimitiveComponent extends SceneComponent { 
+	MinDrawDistance: number;
+	LDMaxDrawDistance: number;
+	CachedMaxDrawDistance: number;
+	DepthPriorityGroup: ESceneDepthPriorityGroup;
+	ViewOwnerDepthPriorityGroup: ESceneDepthPriorityGroup;
+	IndirectLightingCacheQuality: EIndirectLightingCacheQuality;
+	LightmapType: ELightmapType;
+	ExcludeForSpecificHLODLevels: number[];
+	bEnableAutoLODGeneration: boolean;
+	bUseMaxLODAsImposter: boolean;
+	bNeverDistanceCull: boolean;
+	bAlwaysCreatePhysicsState: boolean;
+	bGenerateOverlapEvents: boolean;
+	bMultiBodyOverlap: boolean;
+	bTraceComplexOnMove: boolean;
+	bReturnMaterialOnMove: boolean;
+	bUseViewOwnerDepthPriorityGroup: boolean;
+	bAllowCullDistanceVolume: boolean;
+	bHasMotionBlurVelocityMeshes: boolean;
+	bVisibleInReflectionCaptures: boolean;
+	bVisibleInRayTracing: boolean;
+	bRenderInMainPass: boolean;
+	bReceivesDecals: boolean;
+	bOwnerNoSee: boolean;
+	bOnlyOwnerSee: boolean;
+	bTreatAsBackgroundForOcclusion: boolean;
+	bUseAsOccluder: boolean;
+	bSelectable: boolean;
+	bForceMipStreaming: boolean;
+	bHasPerInstanceHitProxies: boolean;
+	CastShadow: boolean;
+	bAffectDynamicIndirectLighting: boolean;
+	bAffectDistanceFieldLighting: boolean;
+	bCastDynamicShadow: boolean;
+	bCastStaticShadow: boolean;
+	bCastVolumetricTranslucentShadow: boolean;
+	bSelfShadowOnly: boolean;
+	bCastFarShadow: boolean;
+	bCastInsetShadow: boolean;
+	bCastCinematicShadow: boolean;
+	bCastHiddenShadow: boolean;
+	bCastShadowAsTwoSided: boolean;
+	bLightAsIfStatic: boolean;
+	bLightAttachmentsAsGroup: boolean;
+	bReceiveMobileCSMShadows: boolean;
+	bSingleSampleShadowFromStationaryLights: boolean;
+	bIgnoreRadialImpulse: boolean;
+	bIgnoreRadialForce: boolean;
+	bApplyImpulseOnDamage: boolean;
+	bReplicatePhysicsToAutonomousProxy: boolean;
+	AlwaysLoadOnClient: boolean;
+	AlwaysLoadOnServer: boolean;
+	bUseEditorCompositing: boolean;
+	bRenderCustomDepth: boolean;
+	bHasCustomNavigableGeometry: EHasCustomNavigableGeometry;
+	CanBeCharacterBase: ECanBeCharacterBase;
+	CanCharacterStepUpOn: ECanBeCharacterBase;
+	LightingChannels: LightingChannels;
+	CustomDepthStencilWriteMask: ERendererStencilMask;
+	CustomDepthStencilValue: number;
+	CustomPrimitiveData: CustomPrimitiveData;
+	TranslucencySortPriority: number;
+	VisibilityId: number;
+	RuntimeVirtualTextures: RuntimeVirtualTexture[];
+	VirtualTextureLodBias: number;
+	VirtualTextureCullMips: number;
+	VirtualTextureMinCoverage: number;
+	VirtualTextureRenderPassType: ERuntimeVirtualTextureMainPassType;
+	LpvBiasMultiplier: number;
+	BoundsScale: number;
+	MoveIgnoreActors: Actor[];
+	MoveIgnoreComponents: PrimitiveComponent[];
+	BodyInstance: BodyInstance;
+	OnComponentHit: UnrealEngineMulticastDelegate<(HitComponent: PrimitiveComponent, OtherActor: Actor, OtherComp: PrimitiveComponent, NormalImpulse: Vector, Hit: HitResult) => void>;
+	OnComponentBeginOverlap: UnrealEngineMulticastDelegate<(OverlappedComponent: PrimitiveComponent, OtherActor: Actor, OtherComp: PrimitiveComponent, OtherBodyIndex: number, bFromSweep: boolean, SweepResult: HitResult) => void>;
+	OnComponentEndOverlap: UnrealEngineMulticastDelegate<(OverlappedComponent: PrimitiveComponent, OtherActor: Actor, OtherComp: PrimitiveComponent, OtherBodyIndex: number) => void>;
+	OnComponentWake: UnrealEngineMulticastDelegate<(WakingComponent: PrimitiveComponent, BoneName: string) => void>;
+	OnComponentSleep: UnrealEngineMulticastDelegate<(SleepingComponent: PrimitiveComponent, BoneName: string) => void>;
+	OnBeginCursorOver: UnrealEngineMulticastDelegate<(TouchedComponent: PrimitiveComponent) => void>;
+	OnEndCursorOver: UnrealEngineMulticastDelegate<(TouchedComponent: PrimitiveComponent) => void>;
+	OnClicked: UnrealEngineMulticastDelegate<(TouchedComponent: PrimitiveComponent, ButtonPressed: Key) => void>;
+	OnReleased: UnrealEngineMulticastDelegate<(TouchedComponent: PrimitiveComponent, ButtonReleased: Key) => void>;
+	OnInputTouchBegin: UnrealEngineMulticastDelegate<(FingerIndex: ETouchIndex, TouchedComponent: PrimitiveComponent) => void>;
+	OnInputTouchEnd: UnrealEngineMulticastDelegate<(FingerIndex: ETouchIndex, TouchedComponent: PrimitiveComponent) => void>;
+	OnInputTouchEnter: UnrealEngineMulticastDelegate<(FingerIndex: ETouchIndex, TouchedComponent: PrimitiveComponent) => void>;
+	OnInputTouchLeave: UnrealEngineMulticastDelegate<(FingerIndex: ETouchIndex, TouchedComponent: PrimitiveComponent) => void>;
+	LODParentPrimitive: PrimitiveComponent;
+	static Load(ResourceName: string): PrimitiveComponent;
+	static Find(Outer: UObject, ResourceName: string): PrimitiveComponent;
+	static GetDefaultObject(): PrimitiveComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PrimitiveComponent;
+	WakeRigidBody(BoneName: string): void;
+	WakeAllRigidBodies(): void;
+	SetWalkableSlopeOverride(NewOverride: WalkableSlopeOverride): void;
+	SetUseCCD(InUseCCD: boolean,BoneName: string): void;
+	SetTranslucentSortPriority(NewTranslucentSortPriority: number): void;
+	SetSingleSampleShadowFromStationaryLights(bNewSingleSampleShadowFromStationaryLights: boolean): void;
+	SetSimulatePhysics(bSimulate: boolean): void;
+	SetRenderInMainPass(bValue: boolean): void;
+	SetRenderCustomDepth(bValue: boolean): void;
+	SetReceivesDecals(bNewReceivesDecals: boolean): void;
+	SetPhysMaterialOverride(NewPhysMaterial: PhysicalMaterial): void;
+	SetPhysicsMaxAngularVelocityInRadians(NewMaxAngVel: number,bAddToCurrent: boolean,BoneName: string): void;
+	SetPhysicsMaxAngularVelocityInDegrees(NewMaxAngVel: number,bAddToCurrent: boolean,BoneName: string): void;
+	SetPhysicsMaxAngularVelocity(NewMaxAngVel: number,bAddToCurrent: boolean,BoneName: string): void;
+	SetPhysicsLinearVelocity(NewVel: Vector,bAddToCurrent: boolean,BoneName: string): void;
+	SetPhysicsAngularVelocityInRadians(NewAngVel: Vector,bAddToCurrent: boolean,BoneName: string): void;
+	SetPhysicsAngularVelocityInDegrees(NewAngVel: Vector,bAddToCurrent: boolean,BoneName: string): void;
+	SetPhysicsAngularVelocity(NewAngVel: Vector,bAddToCurrent: boolean,BoneName: string): void;
+	SetOwnerNoSee(bNewOwnerNoSee: boolean): void;
+	SetOnlyOwnerSee(bNewOnlyOwnerSee: boolean): void;
+	SetNotifyRigidBodyCollision(bNewNotifyRigidBodyCollision: boolean): void;
+	SetMaterialByName(MaterialSlotName: string,Material: MaterialInterface): void;
+	SetMaterial(ElementIndex: number,Material: MaterialInterface): void;
+	SetMassScale(BoneName: string,InMassScale: number): void;
+	SetMassOverrideInKg(BoneName: string,MassInKg: number,bOverrideMass: boolean): void;
+	SetLinearDamping(InDamping: number): void;
+	SetGenerateOverlapEvents(bInGenerateOverlapEvents: boolean): void;
+	SetEnableGravity(bGravityEnabled: boolean): void;
+	SetCustomPrimitiveDataVector4(DataIndex: number,Value: Vector4): void;
+	SetCustomPrimitiveDataVector3(DataIndex: number,Value: Vector): void;
+	SetCustomPrimitiveDataVector2(DataIndex: number,Value: Vector2D): void;
+	SetCustomPrimitiveDataFloat(DataIndex: number,Value: number): void;
+	SetCustomDepthStencilWriteMask(WriteMaskBit: ERendererStencilMask): void;
+	SetCustomDepthStencilValue(Value: number): void;
+	SetCullDistance(NewCullDistance: number): void;
+	SetConstraintMode(ConstraintMode: EDOFMode): void;
+	SetCollisionResponseToChannel(Channel: ECollisionChannel,NewResponse: ECollisionResponse): void;
+	SetCollisionResponseToAllChannels(NewResponse: ECollisionResponse): void;
+	SetCollisionProfileName(InCollisionProfileName: string): void;
+	SetCollisionObjectType(Channel: ECollisionChannel): void;
+	SetCollisionEnabled(NewType: ECollisionEnabled): void;
+	SetCenterOfMass(CenterOfMassOffset: Vector,BoneName: string): void;
+	SetCastShadow(NewCastShadow: boolean): void;
+	SetBoundsScale(NewBoundsScale: number): void;
+	SetAngularDamping(InDamping: number): void;
+	SetAllUseCCD(InUseCCD: boolean): void;
+	SetAllPhysicsLinearVelocity(NewVel: Vector,bAddToCurrent: boolean): void;
+	SetAllPhysicsAngularVelocityInRadians(NewAngVel: Vector,bAddToCurrent: boolean): void;
+	SetAllPhysicsAngularVelocityInDegrees(NewAngVel: Vector,bAddToCurrent: boolean): void;
+	SetAllMassScale(InMassScale: number): void;
+	ScaleByMomentOfInertia(InputVector: Vector,BoneName: string): Vector;
+	PutRigidBodyToSleep(BoneName: string): void;
+	K2_SphereTraceComponent(TraceStart: Vector,TraceEnd: Vector,SphereRadius: number,bTraceComplex: boolean,bShowTrace: boolean,bPersistentShowTrace: boolean,HitLocation?: Vector,HitNormal?: Vector,BoneName?: string,OutHit?: HitResult): {HitLocation: Vector, HitNormal: Vector, BoneName: string, OutHit: HitResult, $: boolean};
+	K2_SphereOverlapComponent(InSphereCentre: Vector,InSphereRadius: number,bTraceComplex: boolean,bShowTrace: boolean,bPersistentShowTrace: boolean,HitLocation?: Vector,HitNormal?: Vector,BoneName?: string,OutHit?: HitResult): {HitLocation: Vector, HitNormal: Vector, BoneName: string, OutHit: HitResult, $: boolean};
+	K2_LineTraceComponent(TraceStart: Vector,TraceEnd: Vector,bTraceComplex: boolean,bShowTrace: boolean,bPersistentShowTrace: boolean,HitLocation?: Vector,HitNormal?: Vector,BoneName?: string,OutHit?: HitResult): {HitLocation: Vector, HitNormal: Vector, BoneName: string, OutHit: HitResult, $: boolean};
+	K2_IsQueryCollisionEnabled(): boolean;
+	K2_IsPhysicsCollisionEnabled(): boolean;
+	K2_IsCollisionEnabled(): boolean;
+	K2_BoxOverlapComponent(InBoxCentre: Vector,InBox: Box,bTraceComplex: boolean,bShowTrace: boolean,bPersistentShowTrace: boolean,HitLocation?: Vector,HitNormal?: Vector,BoneName?: string,OutHit?: HitResult): {HitLocation: Vector, HitNormal: Vector, BoneName: string, OutHit: HitResult, $: boolean};
+	IsOverlappingComponent(OtherComp: PrimitiveComponent): boolean;
+	IsOverlappingActor(Other: Actor): boolean;
+	IsGravityEnabled(): boolean;
+	IsAnyRigidBodyAwake(): boolean;
+	IgnoreComponentWhenMoving(Component: PrimitiveComponent,bShouldIgnore: boolean): void;
+	IgnoreActorWhenMoving(Actor: Actor,bShouldIgnore: boolean): void;
+	GetWalkableSlopeOverride(): WalkableSlopeOverride;
+	GetPhysicsLinearVelocityAtPoint(Point: Vector,BoneName: string): Vector;
+	GetPhysicsLinearVelocity(BoneName: string): Vector;
+	GetPhysicsAngularVelocityInRadians(BoneName: string): Vector;
+	GetPhysicsAngularVelocityInDegrees(BoneName: string): Vector;
+	GetPhysicsAngularVelocity(BoneName: string): Vector;
+	GetOverlappingComponents(OutOverlappingComponents?: PrimitiveComponent[]): {OutOverlappingComponents: PrimitiveComponent[]};
+	GetOverlappingActors(OverlappingActors?: Actor[],ClassFilter?: UnrealEngineClass): {OverlappingActors: Actor[]};
+	GetNumMaterials(): number;
+	GetMaterialFromCollisionFaceIndex(FaceIndex: number,SectionIndex?: number): {SectionIndex: number, $: MaterialInterface};
+	GetMaterial(ElementIndex: number): MaterialInterface;
+	GetMassScale(BoneName: string): number;
+	GetMass(): number;
+	GetLinearDamping(): number;
+	GetInertiaTensor(BoneName: string): Vector;
+	GetGenerateOverlapEvents(): boolean;
+	GetCollisionResponseToChannel(Channel: ECollisionChannel): ECollisionResponse;
+	GetCollisionProfileName(): string;
+	GetCollisionObjectType(): ECollisionChannel;
+	GetCollisionEnabled(): ECollisionEnabled;
+	GetClosestPointOnCollision(Point: Vector,OutPointOnBody?: Vector,BoneName?: string): {OutPointOnBody: Vector, $: number};
+	GetCenterOfMass(BoneName: string): Vector;
+	GetAngularDamping(): number;
+	CreateDynamicMaterialInstance(ElementIndex: number,SourceMaterial: MaterialInterface,OptionalName: string): MaterialInstanceDynamic;
+	CreateAndSetMaterialInstanceDynamicFromMaterial(ElementIndex: number,Parent: MaterialInterface): MaterialInstanceDynamic;
+	CreateAndSetMaterialInstanceDynamic(ElementIndex: number): MaterialInstanceDynamic;
+	CopyArrayOfMoveIgnoreComponents(): PrimitiveComponent[];
+	CopyArrayOfMoveIgnoreActors(): Actor[];
+	ClearMoveIgnoreComponents(): void;
+	ClearMoveIgnoreActors(): void;
+	CanCharacterStepUp(Pawn: Pawn): boolean;
+	AddTorqueInRadians(Torque: Vector,BoneName: string,bAccelChange: boolean): void;
+	AddTorqueInDegrees(Torque: Vector,BoneName: string,bAccelChange: boolean): void;
+	AddTorque(Torque: Vector,BoneName: string,bAccelChange: boolean): void;
+	AddRadialImpulse(Origin: Vector,Radius: number,Strength: number,Falloff: ERadialImpulseFalloff,bVelChange: boolean): void;
+	AddRadialForce(Origin: Vector,Radius: number,Strength: number,Falloff: ERadialImpulseFalloff,bAccelChange: boolean): void;
+	AddImpulseAtLocation(Impulse: Vector,Location: Vector,BoneName: string): void;
+	AddImpulse(Impulse: Vector,BoneName: string,bVelChange: boolean): void;
+	AddForceAtLocationLocal(Force: Vector,Location: Vector,BoneName: string): void;
+	AddForceAtLocation(Force: Vector,Location: Vector,BoneName: string): void;
+	AddForce(Force: Vector,BoneName: string,bAccelChange: boolean): void;
+	AddAngularImpulseInRadians(Impulse: Vector,BoneName: string,bVelChange: boolean): void;
+	AddAngularImpulseInDegrees(Impulse: Vector,BoneName: string,bVelChange: boolean): void;
+	AddAngularImpulse(Impulse: Vector,BoneName: string,bVelChange: boolean): void;
+	static C(Other: UObject | any): PrimitiveComponent;
+	ComponentOverlapActors(ComponentTransform: Transform,ObjectTypes: EObjectTypeQuery[],ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
+	ComponentOverlapComponents(ComponentTransform: Transform,ObjectTypes: EObjectTypeQuery[],ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
+	static ComponentOverlapActors(Component: PrimitiveComponent,ComponentTransform: Transform,ObjectTypes: EObjectTypeQuery[],ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
+	static ComponentOverlapComponents(Component: PrimitiveComponent,ComponentTransform: Transform,ObjectTypes: EObjectTypeQuery[],ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
+}
+
+declare class MRMeshComponent extends PrimitiveComponent { 
+	Material: MaterialInterface;
+	bCreateMeshProxySections: boolean;
+	bUpdateNavMeshOnMeshUpdate: boolean;
+	bNeverCreateCollisionMesh: boolean;
+	CachedBodySetup: BodySetup;
+	BodySetups: BodySetup[];
+	WireframeMaterial: MaterialInterface;
+	static Load(ResourceName: string): MRMeshComponent;
+	static Find(Outer: UObject, ResourceName: string): MRMeshComponent;
+	static GetDefaultObject(): MRMeshComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MRMeshComponent;
+	IsConnected(): boolean;
+	ForceNavMeshUpdate(): void;
+	Clear(): void;
+	static C(Other: UObject | any): MRMeshComponent;
+}
+
+declare type EARObjectClassification = 'NotApplicable' | 'Unknown' | 'Wall' | 'Ceiling' | 'Floor' | 'Table' | 'Seat' | 'Face' | 'Image' | 'World' | 'SceneObject' | 'EARObjectClassification_MAX';
+declare var EARObjectClassification : { NotApplicable:'NotApplicable',Unknown:'Unknown',Wall:'Wall',Ceiling:'Ceiling',Floor:'Floor',Table:'Table',Seat:'Seat',Face:'Face',Image:'Image',World:'World',SceneObject:'SceneObject',EARObjectClassification_MAX:'EARObjectClassification_MAX', };
+declare class ARTrackedGeometry extends UObject { 
+	UniqueId: Guid;
+	LocalToTrackingTransform: Transform;
+	LocalToAlignedTrackingTransform: Transform;
+	TrackingState: EARTrackingState;
+	UnderlyingMesh: MRMeshComponent;
+	ObjectClassification: EARObjectClassification;
+	LastUpdateFrameNumber: number;
+	DebugName: string;
+	static Load(ResourceName: string): ARTrackedGeometry;
+	static Find(Outer: UObject, ResourceName: string): ARTrackedGeometry;
+	static GetDefaultObject(): ARTrackedGeometry;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTrackedGeometry;
+	IsTracked(): boolean;
+	GetUnderlyingMesh(): MRMeshComponent;
+	GetTrackingState(): EARTrackingState;
+	GetObjectClassification(): EARObjectClassification;
+	GetLocalToWorldTransform(): Transform;
+	GetLocalToTrackingTransform(): Transform;
+	GetLastUpdateTimestamp(): number;
+	GetLastUpdateFrameNumber(): number;
+	GetDebugName(): string;
+	static C(Other: UObject | any): ARTrackedGeometry;
+	DebugDrawTrackedGeometry(WorldContextObject: UObject,Color: LinearColor,OutlineThickness: number,PersistForSeconds: number): void;
+	static DebugDrawTrackedGeometry(TrackedGeometry: ARTrackedGeometry,WorldContextObject: UObject,Color: LinearColor,OutlineThickness: number,PersistForSeconds: number): void;
+}
+
+declare class ARTraceResult { 
+	DistanceFromCamera: number;
+	TraceChannel: EARLineTraceChannels;
+	LocalToTrackingTransform: Transform;
+	TrackedGeometry: ARTrackedGeometry;
+	clone() : ARTraceResult;
+	static C(Other: UObject | any): ARTraceResult;
+	GetDistanceFromCamera(): number;
+	GetLocalToTrackingTransform(): Transform;
+	GetLocalToWorldTransform(): Transform;
+	GetTraceChannel(): EARLineTraceChannels;
+	GetTrackedGeometry(): ARTrackedGeometry;
+	static GetDistanceFromCamera(TraceResult: ARTraceResult): number;
+	static GetLocalToTrackingTransform(TraceResult: ARTraceResult): Transform;
+	static GetLocalToWorldTransform(TraceResult: ARTraceResult): Transform;
+	static GetTraceChannel(TraceResult: ARTraceResult): EARLineTraceChannels;
+	static GetTrackedGeometry(TraceResult: ARTraceResult): ARTrackedGeometry;
+}
+
+declare class Vector2D { 
+	X: number;
+	Y: number;
+	clone() : Vector2D;
+	static C(Other: UObject | any): Vector2D;
+	Conv_Vector2dToText(): string;
+	Conv_Vector2dToString(): string;
+	Add_Vector2DFloat(B: number): Vector2D;
+	Add_Vector2DVector2D(B: Vector2D): Vector2D;
+	BreakVector2D(X?: number,Y?: number): {X: number, Y: number};
+	ClampAxes2D(MinAxisVal: number,MaxAxisVal: number): Vector2D;
+	Conv_Vector2DToIntPoint(): IntPoint;
+	Conv_Vector2DToVector(Z: number): Vector;
+	CrossProduct2D(B: Vector2D): number;
+	Distance2D(v2: Vector2D): number;
+	DistanceSquared2D(v2: Vector2D): number;
+	Divide_Vector2DFloat(B: number): Vector2D;
+	Divide_Vector2DVector2D(B: Vector2D): Vector2D;
+	DotProduct2D(B: Vector2D): number;
+	EqualEqual_Vector2DVector2D(B: Vector2D,ErrorTolerance: number): boolean;
+	EqualExactly_Vector2DVector2D(B: Vector2D): boolean;
+	GetAbs2D(): Vector2D;
+	GetAbsMax2D(): number;
+	GetMax2D(): number;
+	GetMin2D(): number;
+	GetRotated2D(AngleDeg: number): Vector2D;
+	IsNearlyZero2D(Tolerance: number): boolean;
+	IsZero2D(): boolean;
+	MakeBox2D(Max: Vector2D): Box2D;
+	Multiply_Vector2DFloat(B: number): Vector2D;
+	Multiply_Vector2DVector2D(B: Vector2D): Vector2D;
+	Negated2D(): Vector2D;
+	Normal2D(): Vector2D;
+	Normalize2D(Tolerance?: number): {A: Vector2D};
+	NormalSafe2D(Tolerance: number): Vector2D;
+	NotEqual_Vector2DVector2D(B: Vector2D,ErrorTolerance: number): boolean;
+	NotEqualExactly_Vector2DVector2D(B: Vector2D): boolean;
+	Set2D(X?: number,Y?: number): {A: Vector2D};
+	Spherical2DToUnitCartesian(): Vector;
+	Subtract_Vector2DFloat(B: number): Vector2D;
+	Subtract_Vector2DVector2D(B: Vector2D): Vector2D;
+	ToDirectionAndLength2D(OutDir?: Vector2D,OutLength?: number): {OutDir: Vector2D, OutLength: number};
+	ToRounded2D(): Vector2D;
+	ToSign2D(): Vector2D;
+	Vector2DInterpTo(Target: Vector2D,DeltaTime: number,InterpSpeed: number): Vector2D;
+	Vector2DInterpTo_Constant(Target: Vector2D,DeltaTime: number,InterpSpeed: number): Vector2D;
+	VSize2D(): number;
+	VSize2DSquared(): number;
+	SetSpectatorScreenModeTexturePlusEyeLayout(EyeRectMax: Vector2D,TextureRectMin: Vector2D,TextureRectMax: Vector2D,bDrawEyeFirst: boolean,bClearBlack: boolean,bUseAlpha: boolean): void;
+	LineTraceTrackedObjects(bTestFeaturePoints: boolean,bTestGroundPlane: boolean,bTestPlaneExtents: boolean,bTestPlaneBoundaryPolygon: boolean): ARTraceResult[];
+	static Conv_Vector2dToText(InVec: Vector2D): string;
+	static Conv_Vector2dToString(InVec: Vector2D): string;
+	static Add_Vector2DFloat(A: Vector2D,B: number): Vector2D;
+	static Add_Vector2DVector2D(A: Vector2D,B: Vector2D): Vector2D;
+	static BreakVector2D(InVec: Vector2D,X?: number,Y?: number): {X: number, Y: number};
+	static ClampAxes2D(A: Vector2D,MinAxisVal: number,MaxAxisVal: number): Vector2D;
+	static Conv_Vector2DToIntPoint(InVector2D: Vector2D): IntPoint;
+	static Conv_Vector2DToVector(InVector2D: Vector2D,Z: number): Vector;
+	static CrossProduct2D(A: Vector2D,B: Vector2D): number;
+	static Distance2D(v1: Vector2D,v2: Vector2D): number;
+	static DistanceSquared2D(v1: Vector2D,v2: Vector2D): number;
+	static Divide_Vector2DFloat(A: Vector2D,B: number): Vector2D;
+	static Divide_Vector2DVector2D(A: Vector2D,B: Vector2D): Vector2D;
+	static DotProduct2D(A: Vector2D,B: Vector2D): number;
+	static EqualEqual_Vector2DVector2D(A: Vector2D,B: Vector2D,ErrorTolerance: number): boolean;
+	static EqualExactly_Vector2DVector2D(A: Vector2D,B: Vector2D): boolean;
+	static GetAbs2D(A: Vector2D): Vector2D;
+	static GetAbsMax2D(A: Vector2D): number;
+	static GetMax2D(A: Vector2D): number;
+	static GetMin2D(A: Vector2D): number;
+	static GetRotated2D(A: Vector2D,AngleDeg: number): Vector2D;
+	static IsNearlyZero2D(A: Vector2D,Tolerance: number): boolean;
+	static IsZero2D(A: Vector2D): boolean;
+	static MakeBox2D(Min: Vector2D,Max: Vector2D): Box2D;
+	static Multiply_Vector2DFloat(A: Vector2D,B: number): Vector2D;
+	static Multiply_Vector2DVector2D(A: Vector2D,B: Vector2D): Vector2D;
+	static Negated2D(A: Vector2D): Vector2D;
+	static Normal2D(A: Vector2D): Vector2D;
+	static Normalize2D(A?: Vector2D,Tolerance?: number): {A: Vector2D};
+	static NormalSafe2D(A: Vector2D,Tolerance: number): Vector2D;
+	static NotEqual_Vector2DVector2D(A: Vector2D,B: Vector2D,ErrorTolerance: number): boolean;
+	static NotEqualExactly_Vector2DVector2D(A: Vector2D,B: Vector2D): boolean;
+	static Set2D(A?: Vector2D,X?: number,Y?: number): {A: Vector2D};
+	static Spherical2DToUnitCartesian(A: Vector2D): Vector;
+	static Subtract_Vector2DFloat(A: Vector2D,B: number): Vector2D;
+	static Subtract_Vector2DVector2D(A: Vector2D,B: Vector2D): Vector2D;
+	static ToDirectionAndLength2D(A: Vector2D,OutDir?: Vector2D,OutLength?: number): {OutDir: Vector2D, OutLength: number};
+	static ToRounded2D(A: Vector2D): Vector2D;
+	static ToSign2D(A: Vector2D): Vector2D;
+	static Vector2DInterpTo(Current: Vector2D,Target: Vector2D,DeltaTime: number,InterpSpeed: number): Vector2D;
+	static Vector2DInterpTo_Constant(Current: Vector2D,Target: Vector2D,DeltaTime: number,InterpSpeed: number): Vector2D;
+	static VSize2D(A: Vector2D): number;
+	static VSize2DSquared(A: Vector2D): number;
+	static SetSpectatorScreenModeTexturePlusEyeLayout(EyeRectMin: Vector2D,EyeRectMax: Vector2D,TextureRectMin: Vector2D,TextureRectMax: Vector2D,bDrawEyeFirst: boolean,bClearBlack: boolean,bUseAlpha: boolean): void;
+	static LineTraceTrackedObjects(ScreenCoord: Vector2D,bTestFeaturePoints: boolean,bTestGroundPlane: boolean,bTestPlaneExtents: boolean,bTestPlaneBoundaryPolygon: boolean): ARTraceResult[];
+	static GenerateDynamicImageResource(InDynamicBrushName: string): Vector2D;
+	static MakeVector2D(X: number,Y: number): Vector2D;
+	static Vector2D_One(): Vector2D;
+	static Vector2D_Unit45Deg(): Vector2D;
+	static Vector2D_Zero(): Vector2D;
+	static NextSobolCell2D(index: number,NumCells: number,PreviousValue: Vector2D): Vector2D;
+	static RandomSobolCell2D(index: number,NumCells: number,Cell: Vector2D,Seed: Vector2D): Vector2D;
+	static GetMousePositionOnPlatform(): Vector2D;
+}
+
+declare type EBoundaryType = 'Boundary_Outer' | 'Boundary_PlayArea' | 'Boundary_MAX';
+declare var EBoundaryType : { Boundary_Outer:'Boundary_Outer',Boundary_PlayArea:'Boundary_PlayArea',Boundary_MAX:'Boundary_MAX', };
+declare type ETrackedDeviceType = 'None' | 'HMD' | 'LTouch' | 'RTouch' | 'Touch' | 'DeviceObjectZero' | 'All' | 'ETrackedDeviceType_MAX';
+declare var ETrackedDeviceType : { None:'None',HMD:'HMD',LTouch:'LTouch',RTouch:'RTouch',Touch:'Touch',DeviceObjectZero:'DeviceObjectZero',All:'All',ETrackedDeviceType_MAX:'ETrackedDeviceType_MAX', };
+declare class GuardianTestResult { 
+	IsTriggering: boolean;
+	DeviceType: ETrackedDeviceType;
+	ClosestDistance: number;
+	ClosestPoint: Vector;
+	ClosestPointNormal: Vector;
+	clone() : GuardianTestResult;
+	static C(Other: UObject | any): GuardianTestResult;
+	static GetNodeGuardianIntersection(DeviceType: ETrackedDeviceType,BoundaryType: EBoundaryType): GuardianTestResult;
+}
+
+declare type EPassableWorldError = 'None' | 'LowMapQuality' | 'UnableToLocalize' | 'Unavailable' | 'PrivilegeDenied' | 'InvalidParam' | 'UnspecifiedFailure' | 'PrivilegeRequestPending' | 'EPassableWorldError_MAX';
+declare var EPassableWorldError : { None:'None',LowMapQuality:'LowMapQuality',UnableToLocalize:'UnableToLocalize',Unavailable:'Unavailable',PrivilegeDenied:'PrivilegeDenied',InvalidParam:'InvalidParam',UnspecifiedFailure:'UnspecifiedFailure',PrivilegeRequestPending:'PrivilegeRequestPending',EPassableWorldError_MAX:'EPassableWorldError_MAX', };
+declare class IntVector { 
+	X: number;
+	Y: number;
+	Z: number;
+	clone() : IntVector;
+	static C(Other: UObject | any): IntVector;
+	Conv_IntVectorToString(): string;
+	Conv_IntVectorToVector(): Vector;
+	static Conv_IntVectorToString(InIntVec: IntVector): string;
+	static Conv_IntVectorToVector(InIntVector: IntVector): Vector;
+	static Conv_IntToIntVector(inInt: number): IntVector;
+}
+
+declare class VectorSpringState { 
+	clone() : VectorSpringState;
+	static C(Other: UObject | any): VectorSpringState;
+	ResetVectorSpringState(): {SpringState: VectorSpringState};
+	static ResetVectorSpringState(SpringState?: VectorSpringState): {SpringState: VectorSpringState};
+}
+
+declare class Vector { 
+	X: number;
+	Y: number;
+	Z: number;
+	clone() : Vector;
+	static C(Other: UObject | any): Vector;
+	SegmentIntersection2D(SegmentEndA: Vector,SegmentStartB: Vector,SegmentEndB: Vector,IntersectionPoint?: Vector): {IntersectionPoint: Vector, $: boolean};
+	GetSelectionBounds(BoxExtent?: Vector,SphereRadius?: number): {Origin: Vector, BoxExtent: Vector, SphereRadius: number};
+	GenerateBoxMesh(Vertices?: Vector[],Triangles?: number[],Normals?: Vector[],UVs?: Vector2D[],Tangents?: ProcMeshTangent[]): {Vertices: Vector[], Triangles: number[], Normals: Vector[], UVs: Vector2D[], Tangents: ProcMeshTangent[]};
+	GetPointGuardianIntersection(BoundaryType: EBoundaryType): GuardianTestResult;
+	GetRawSensorData(LinearAcceleration?: Vector,AngularVelocity?: Vector,LinearVelocity?: Vector,TimeInSeconds?: number,DeviceType?: ETrackedDeviceType): {AngularAcceleration: Vector, LinearAcceleration: Vector, AngularVelocity: Vector, LinearVelocity: Vector, TimeInSeconds: number};
+	SetPositionScale3D(): void;
+	SetBasePosition(): void;
+	GetClosestARPin(PinID?: Guid): {PinID: Guid, $: EPassableWorldError};
+	IsValidAIDirection(): boolean;
+	IsValidAILocation(): boolean;
+	Conv_VectorToText(): string;
+	Conv_VectorToString(): string;
+	Add_VectorFloat(B: number): Vector;
+	Add_VectorInt(B: number): Vector;
+	Add_VectorVector(B: Vector): Vector;
+	BreakVector(X?: number,Y?: number,Z?: number): {X: number, Y: number, Z: number};
+	ClampVectorSize(Min: number,Max: number): Vector;
+	Conv_VectorToLinearColor(): LinearColor;
+	Conv_VectorToQuaterion(): Quat;
+	Conv_VectorToRotator(): Rotator;
+	Conv_VectorToTransform(): Transform;
+	Conv_VectorToVector2D(): Vector2D;
+	Cross_VectorVector(B: Vector): Vector;
+	Divide_VectorFloat(B: number): Vector;
+	Divide_VectorInt(B: number): Vector;
+	Divide_VectorVector(B: Vector): Vector;
+	Dot_VectorVector(B: Vector): number;
+	DynamicWeightedMovingAverage_FVector(PreviousSample: Vector,MaxDistance: number,MinWeight: number,MaxWeight: number): Vector;
+	EqualEqual_VectorVector(B: Vector,ErrorTolerance: number): boolean;
+	EqualExactly_VectorVector(B: Vector): boolean;
+	FindClosestPointOnLine(LineOrigin: Vector,LineDirection: Vector): Vector;
+	FindClosestPointOnSegment(SegmentStart: Vector,SegmentEnd: Vector): Vector;
+	FindLookAtRotation(Target: Vector): Rotator;
+	FindNearestPointsOnLineSegments(Segment1End: Vector,Segment2Start: Vector,Segment2End: Vector,Segment1Point?: Vector,Segment2Point?: Vector): {Segment1Point: Vector, Segment2Point: Vector};
+	FTruncVector(): IntVector;
+	GetAzimuthAndElevation(ReferenceFrame: Transform,Azimuth?: number,Elevation?: number): {Azimuth: number, Elevation: number};
+	GetDirectionUnitVector(To: Vector): Vector;
+	GetMaxElement(): number;
+	GetMinElement(): number;
+	GetPointDistanceToLine(LineOrigin: Vector,LineDirection: Vector): number;
+	GetPointDistanceToSegment(SegmentStart: Vector,SegmentEnd: Vector): number;
+	GetReflectionVector(SurfaceNormal: Vector): Vector;
+	GetSlopeDegreeAngles(FloorNormal: Vector,UpVector: Vector,OutSlopePitchDegreeAngle?: number,OutSlopeRollDegreeAngle?: number): {OutSlopePitchDegreeAngle: number, OutSlopeRollDegreeAngle: number};
+	GetYawPitchFromVector(Yaw?: number,Pitch?: number): {Yaw: number, Pitch: number};
+	GreaterGreater_VectorRotator(B: Rotator): Vector;
+	IsPointInBox(BoxOrigin: Vector,BoxExtent: Vector): boolean;
+	IsPointInBoxWithTransform(BoxWorldTransform: Transform,BoxExtent: Vector): boolean;
+	LessLess_VectorRotator(B: Rotator): Vector;
+	LinePlaneIntersection(LineEnd: Vector,APlane: Plane,T?: number,Intersection?: Vector): {T: number, Intersection: Vector, $: boolean};
+	LinePlaneIntersection_OriginNormal(LineEnd: Vector,PlaneOrigin: Vector,PlaneNormal: Vector,T?: number,Intersection?: Vector): {T: number, Intersection: Vector, $: boolean};
+	MakeBox(Max: Vector): Box;
+	MakePlaneFromPointAndNormal(Normal: Vector): Plane;
+	MakeRotationFromAxes(Right: Vector,Up: Vector): Rotator;
+	MakeRotFromX(): Rotator;
+	MakeRotFromXY(Y: Vector): Rotator;
+	MakeRotFromXZ(Z: Vector): Rotator;
+	MakeRotFromY(): Rotator;
+	MakeRotFromYX(X: Vector): Rotator;
+	MakeRotFromYZ(Z: Vector): Rotator;
+	MakeRotFromZ(): Rotator;
+	MakeRotFromZX(X: Vector): Rotator;
+	MakeRotFromZY(Y: Vector): Rotator;
+	MakeTransform(Rotation: Rotator,Scale: Vector): Transform;
+	MirrorVectorByNormal(InNormal: Vector): Vector;
+	Multiply_VectorFloat(B: number): Vector;
+	Multiply_VectorInt(B: number): Vector;
+	Multiply_VectorVector(B: Vector): Vector;
+	NegateVector(): Vector;
+	Normal(Tolerance: number): Vector;
+	NotEqual_VectorVector(B: Vector,ErrorTolerance: number): boolean;
+	NotEqualExactly_VectorVector(B: Vector): boolean;
+	ProjectPointOnToPlane(PlaneBase: Vector,PlaneNormal: Vector): Vector;
+	ProjectVectorOnToPlane(PlaneNormal: Vector): Vector;
+	ProjectVectorOnToVector(Target: Vector): Vector;
+	Quat_MakeFromEuler(): Quat;
+	RandomPointInBoundingBox(BoxExtent: Vector): Vector;
+	RandomUnitVectorInConeInDegrees(ConeHalfAngleInDegrees: number): Vector;
+	RandomUnitVectorInConeInDegreesFromStream(ConeHalfAngleInDegrees: number,Stream: RandomStream): Vector;
+	RandomUnitVectorInConeInRadians(ConeHalfAngleInRadians: number): Vector;
+	RandomUnitVectorInConeInRadiansFromStream(ConeHalfAngleInRadians: number,Stream: RandomStream): Vector;
+	RandomUnitVectorInEllipticalConeInDegrees(MaxYawInDegrees: number,MaxPitchInDegrees: number): Vector;
+	RandomUnitVectorInEllipticalConeInDegreesFromStream(MaxYawInDegrees: number,MaxPitchInDegrees: number,Stream: RandomStream): Vector;
+	RandomUnitVectorInEllipticalConeInRadians(MaxYawInRadians: number,MaxPitchInRadians: number): Vector;
+	RandomUnitVectorInEllipticalConeInRadiansFromStream(MaxYawInRadians: number,MaxPitchInRadians: number,Stream: RandomStream): Vector;
+	RotateAngleAxis(AngleDeg: number,Axis: Vector): Vector;
+	RotatorFromAxisAndAngle(Angle: number): Rotator;
+	SelectVector(B: Vector,bPickA: boolean): Vector;
+	Subtract_VectorFloat(B: number): Vector;
+	Subtract_VectorInt(B: number): Vector;
+	Subtract_VectorVector(B: Vector): Vector;
+	VEase(B: Vector,Alpha: number,EasingFunc: EEasingFunc,BlendExp: number,Steps: number): Vector;
+	Vector_AddBounded(InAddVect?: Vector,InRadius?: number): {A: Vector};
+	Vector_Assign(InVector?: Vector): {A: Vector};
+	Vector_BoundedToBox(InBoxMin: Vector,InBoxMax: Vector): Vector;
+	Vector_BoundedToCube(InRadius: number): Vector;
+	Vector_ClampSize2D(Min: number,Max: number): Vector;
+	Vector_ClampSizeMax(Max: number): Vector;
+	Vector_ClampSizeMax2D(Max: number): Vector;
+	Vector_ComponentMax(B: Vector): Vector;
+	Vector_ComponentMin(B: Vector): Vector;
+	Vector_CosineAngle2D(B: Vector): number;
+	Vector_Distance(v2: Vector): number;
+	Vector_Distance2D(v2: Vector): number;
+	Vector_Distance2DSquared(v2: Vector): number;
+	Vector_DistanceSquared(v2: Vector): number;
+	Vector_GetAbs(): Vector;
+	Vector_GetAbsMax(): number;
+	Vector_GetAbsMin(): number;
+	Vector_GetProjection(): Vector;
+	Vector_GetSignVector(): Vector;
+	Vector_HeadingAngle(): number;
+	Vector_IsNAN(): boolean;
+	Vector_IsNearlyZero(Tolerance: number): boolean;
+	Vector_IsNormal(): boolean;
+	Vector_IsUniform(Tolerance: number): boolean;
+	Vector_IsUnit(SquaredLenthTolerance: number): boolean;
+	Vector_IsZero(): boolean;
+	Vector_MirrorByPlane(InPlane: Plane): Vector;
+	Vector_Normal2D(Tolerance: number): Vector;
+	Vector_Normalize(Tolerance?: number): {A: Vector};
+	Vector_NormalUnsafe(): Vector;
+	Vector_ProjectOnToNormal(InNormal: Vector): Vector;
+	Vector_Reciprocal(): Vector;
+	Vector_Set(X?: number,Y?: number,Z?: number): {A: Vector};
+	Vector_SnappedToGrid(InGridSize: number): Vector;
+	Vector_ToDegrees(): Vector;
+	Vector_ToRadians(): Vector;
+	Vector_UnitCartesianToSpherical(): Vector2D;
+	Vector_UnwindEuler(): {A: Vector};
+	VectorSpringInterp(Target: Vector,SpringState?: VectorSpringState,Stiffness?: number,CriticalDampingFactor?: number,DeltaTime?: number,Mass?: number): {SpringState: VectorSpringState, $: Vector};
+	VInterpTo(Target: Vector,DeltaTime: number,InterpSpeed: number): Vector;
+	VInterpTo_Constant(Target: Vector,DeltaTime: number,InterpSpeed: number): Vector;
+	VLerp(B: Vector,Alpha: number): Vector;
+	VSize(): number;
+	VSizeSquared(): number;
+	VSizeXY(): number;
+	VSizeXYSquared(): number;
+	WeightedMovingAverage_FVector(PreviousSample: Vector,Weight: number): Vector;
+	K2_TwoBoneIK(JointPos: Vector,EndPos: Vector,JointTarget: Vector,Effector: Vector,OutJointPos?: Vector,OutEndPos?: Vector,bAllowStretching?: boolean,StartStretchRatio?: number,MaxStretchScale?: number): {OutJointPos: Vector, OutEndPos: Vector};
+	GetPositionalTrackingCameraParameters(CameraRotation?: Rotator,HFOV?: number,VFOV?: number,CameraDistance?: number,NearPlane?: number,FarPlane?: number): {CameraOrigin: Vector, CameraRotation: Rotator, HFOV: number, VFOV: number, CameraDistance: number, NearPlane: number, FarPlane: number};
+	GetTrackingSensorParameters(Rotation?: Rotator,LeftFOV?: number,RightFOV?: number,TopFOV?: number,BottomFOV?: number,Distance?: number,NearPlane?: number,FarPlane?: number,IsActive?: boolean,index?: number): {Origin: Vector, Rotation: Rotator, LeftFOV: number, RightFOV: number, TopFOV: number, BottomFOV: number, Distance: number, NearPlane: number, FarPlane: number, IsActive: boolean};
+	AddManualEnvironmentCaptureProbe(Extent: Vector): boolean;
+	LineTraceTrackedObjects3D(End: Vector,bTestFeaturePoints: boolean,bTestGroundPlane: boolean,bTestPlaneExtents: boolean,bTestPlaneBoundaryPolygon: boolean): ARTraceResult[];
+	static SegmentIntersection2D(SegmentStartA: Vector,SegmentEndA: Vector,SegmentStartB: Vector,SegmentEndB: Vector,IntersectionPoint?: Vector): {IntersectionPoint: Vector, $: boolean};
+	static GetSelectionBounds(Origin?: Vector,BoxExtent?: Vector,SphereRadius?: number): {Origin: Vector, BoxExtent: Vector, SphereRadius: number};
+	static GenerateBoxMesh(BoxRadius: Vector,Vertices?: Vector[],Triangles?: number[],Normals?: Vector[],UVs?: Vector2D[],Tangents?: ProcMeshTangent[]): {Vertices: Vector[], Triangles: number[], Normals: Vector[], UVs: Vector2D[], Tangents: ProcMeshTangent[]};
+	static GetPointGuardianIntersection(Point: Vector,BoundaryType: EBoundaryType): GuardianTestResult;
+	static GetRawSensorData(AngularAcceleration?: Vector,LinearAcceleration?: Vector,AngularVelocity?: Vector,LinearVelocity?: Vector,TimeInSeconds?: number,DeviceType?: ETrackedDeviceType): {AngularAcceleration: Vector, LinearAcceleration: Vector, AngularVelocity: Vector, LinearVelocity: Vector, TimeInSeconds: number};
+	static SetPositionScale3D(PosScale3D: Vector): void;
+	static SetBasePosition(InBasePosition: Vector): void;
+	static GetClosestARPin(SearchPoint: Vector,PinID?: Guid): {PinID: Guid, $: EPassableWorldError};
+	static IsValidAIDirection(DirectionVector: Vector): boolean;
+	static IsValidAILocation(Location: Vector): boolean;
+	static Conv_VectorToText(InVec: Vector): string;
+	static Conv_VectorToString(InVec: Vector): string;
+	static Add_VectorFloat(A: Vector,B: number): Vector;
+	static Add_VectorInt(A: Vector,B: number): Vector;
+	static Add_VectorVector(A: Vector,B: Vector): Vector;
+	static BreakVector(InVec: Vector,X?: number,Y?: number,Z?: number): {X: number, Y: number, Z: number};
+	static ClampVectorSize(A: Vector,Min: number,Max: number): Vector;
+	static Conv_VectorToLinearColor(InVec: Vector): LinearColor;
+	static Conv_VectorToQuaterion(InVec: Vector): Quat;
+	static Conv_VectorToRotator(InVec: Vector): Rotator;
+	static Conv_VectorToTransform(InLocation: Vector): Transform;
+	static Conv_VectorToVector2D(InVector: Vector): Vector2D;
+	static Cross_VectorVector(A: Vector,B: Vector): Vector;
+	static Divide_VectorFloat(A: Vector,B: number): Vector;
+	static Divide_VectorInt(A: Vector,B: number): Vector;
+	static Divide_VectorVector(A: Vector,B: Vector): Vector;
+	static Dot_VectorVector(A: Vector,B: Vector): number;
+	static DynamicWeightedMovingAverage_FVector(CurrentSample: Vector,PreviousSample: Vector,MaxDistance: number,MinWeight: number,MaxWeight: number): Vector;
+	static EqualEqual_VectorVector(A: Vector,B: Vector,ErrorTolerance: number): boolean;
+	static EqualExactly_VectorVector(A: Vector,B: Vector): boolean;
+	static FindClosestPointOnLine(Point: Vector,LineOrigin: Vector,LineDirection: Vector): Vector;
+	static FindClosestPointOnSegment(Point: Vector,SegmentStart: Vector,SegmentEnd: Vector): Vector;
+	static FindLookAtRotation(Start: Vector,Target: Vector): Rotator;
+	static FindNearestPointsOnLineSegments(Segment1Start: Vector,Segment1End: Vector,Segment2Start: Vector,Segment2End: Vector,Segment1Point?: Vector,Segment2Point?: Vector): {Segment1Point: Vector, Segment2Point: Vector};
+	static FTruncVector(InVector: Vector): IntVector;
+	static GetAzimuthAndElevation(InDirection: Vector,ReferenceFrame: Transform,Azimuth?: number,Elevation?: number): {Azimuth: number, Elevation: number};
+	static GetDirectionUnitVector(From: Vector,To: Vector): Vector;
+	static GetMaxElement(A: Vector): number;
+	static GetMinElement(A: Vector): number;
+	static GetPointDistanceToLine(Point: Vector,LineOrigin: Vector,LineDirection: Vector): number;
+	static GetPointDistanceToSegment(Point: Vector,SegmentStart: Vector,SegmentEnd: Vector): number;
+	static GetReflectionVector(Direction: Vector,SurfaceNormal: Vector): Vector;
+	static GetSlopeDegreeAngles(MyRightYAxis: Vector,FloorNormal: Vector,UpVector: Vector,OutSlopePitchDegreeAngle?: number,OutSlopeRollDegreeAngle?: number): {OutSlopePitchDegreeAngle: number, OutSlopeRollDegreeAngle: number};
+	static GetYawPitchFromVector(InVec: Vector,Yaw?: number,Pitch?: number): {Yaw: number, Pitch: number};
+	static GreaterGreater_VectorRotator(A: Vector,B: Rotator): Vector;
+	static IsPointInBox(Point: Vector,BoxOrigin: Vector,BoxExtent: Vector): boolean;
+	static IsPointInBoxWithTransform(Point: Vector,BoxWorldTransform: Transform,BoxExtent: Vector): boolean;
+	static LessLess_VectorRotator(A: Vector,B: Rotator): Vector;
+	static LinePlaneIntersection(LineStart: Vector,LineEnd: Vector,APlane: Plane,T?: number,Intersection?: Vector): {T: number, Intersection: Vector, $: boolean};
+	static LinePlaneIntersection_OriginNormal(LineStart: Vector,LineEnd: Vector,PlaneOrigin: Vector,PlaneNormal: Vector,T?: number,Intersection?: Vector): {T: number, Intersection: Vector, $: boolean};
+	static MakeBox(Min: Vector,Max: Vector): Box;
+	static MakePlaneFromPointAndNormal(Point: Vector,Normal: Vector): Plane;
+	static MakeRotationFromAxes(Forward: Vector,Right: Vector,Up: Vector): Rotator;
+	static MakeRotFromX(X: Vector): Rotator;
+	static MakeRotFromXY(X: Vector,Y: Vector): Rotator;
+	static MakeRotFromXZ(X: Vector,Z: Vector): Rotator;
+	static MakeRotFromY(Y: Vector): Rotator;
+	static MakeRotFromYX(Y: Vector,X: Vector): Rotator;
+	static MakeRotFromYZ(Y: Vector,Z: Vector): Rotator;
+	static MakeRotFromZ(Z: Vector): Rotator;
+	static MakeRotFromZX(Z: Vector,X: Vector): Rotator;
+	static MakeRotFromZY(Z: Vector,Y: Vector): Rotator;
+	static MakeTransform(Location: Vector,Rotation: Rotator,Scale: Vector): Transform;
+	static MirrorVectorByNormal(InVect: Vector,InNormal: Vector): Vector;
+	static Multiply_VectorFloat(A: Vector,B: number): Vector;
+	static Multiply_VectorInt(A: Vector,B: number): Vector;
+	static Multiply_VectorVector(A: Vector,B: Vector): Vector;
+	static NegateVector(A: Vector): Vector;
+	static Normal(A: Vector,Tolerance: number): Vector;
+	static NotEqual_VectorVector(A: Vector,B: Vector,ErrorTolerance: number): boolean;
+	static NotEqualExactly_VectorVector(A: Vector,B: Vector): boolean;
+	static ProjectPointOnToPlane(Point: Vector,PlaneBase: Vector,PlaneNormal: Vector): Vector;
+	static ProjectVectorOnToPlane(V: Vector,PlaneNormal: Vector): Vector;
+	static ProjectVectorOnToVector(V: Vector,Target: Vector): Vector;
+	static Quat_MakeFromEuler(Euler: Vector): Quat;
+	static RandomPointInBoundingBox(Origin: Vector,BoxExtent: Vector): Vector;
+	static RandomUnitVectorInConeInDegrees(ConeDir: Vector,ConeHalfAngleInDegrees: number): Vector;
+	static RandomUnitVectorInConeInDegreesFromStream(ConeDir: Vector,ConeHalfAngleInDegrees: number,Stream: RandomStream): Vector;
+	static RandomUnitVectorInConeInRadians(ConeDir: Vector,ConeHalfAngleInRadians: number): Vector;
+	static RandomUnitVectorInConeInRadiansFromStream(ConeDir: Vector,ConeHalfAngleInRadians: number,Stream: RandomStream): Vector;
+	static RandomUnitVectorInEllipticalConeInDegrees(ConeDir: Vector,MaxYawInDegrees: number,MaxPitchInDegrees: number): Vector;
+	static RandomUnitVectorInEllipticalConeInDegreesFromStream(ConeDir: Vector,MaxYawInDegrees: number,MaxPitchInDegrees: number,Stream: RandomStream): Vector;
+	static RandomUnitVectorInEllipticalConeInRadians(ConeDir: Vector,MaxYawInRadians: number,MaxPitchInRadians: number): Vector;
+	static RandomUnitVectorInEllipticalConeInRadiansFromStream(ConeDir: Vector,MaxYawInRadians: number,MaxPitchInRadians: number,Stream: RandomStream): Vector;
+	static RotateAngleAxis(InVect: Vector,AngleDeg: number,Axis: Vector): Vector;
+	static RotatorFromAxisAndAngle(Axis: Vector,Angle: number): Rotator;
+	static SelectVector(A: Vector,B: Vector,bPickA: boolean): Vector;
+	static Subtract_VectorFloat(A: Vector,B: number): Vector;
+	static Subtract_VectorInt(A: Vector,B: number): Vector;
+	static Subtract_VectorVector(A: Vector,B: Vector): Vector;
+	static VEase(A: Vector,B: Vector,Alpha: number,EasingFunc: EEasingFunc,BlendExp: number,Steps: number): Vector;
+	static Vector_AddBounded(A?: Vector,InAddVect?: Vector,InRadius?: number): {A: Vector};
+	static Vector_Assign(A?: Vector,InVector?: Vector): {A: Vector};
+	static Vector_BoundedToBox(InVect: Vector,InBoxMin: Vector,InBoxMax: Vector): Vector;
+	static Vector_BoundedToCube(InVect: Vector,InRadius: number): Vector;
+	static Vector_ClampSize2D(A: Vector,Min: number,Max: number): Vector;
+	static Vector_ClampSizeMax(A: Vector,Max: number): Vector;
+	static Vector_ClampSizeMax2D(A: Vector,Max: number): Vector;
+	static Vector_ComponentMax(A: Vector,B: Vector): Vector;
+	static Vector_ComponentMin(A: Vector,B: Vector): Vector;
+	static Vector_CosineAngle2D(A: Vector,B: Vector): number;
+	static Vector_Distance(v1: Vector,v2: Vector): number;
+	static Vector_Distance2D(v1: Vector,v2: Vector): number;
+	static Vector_Distance2DSquared(v1: Vector,v2: Vector): number;
+	static Vector_DistanceSquared(v1: Vector,v2: Vector): number;
+	static Vector_GetAbs(A: Vector): Vector;
+	static Vector_GetAbsMax(A: Vector): number;
+	static Vector_GetAbsMin(A: Vector): number;
+	static Vector_GetProjection(A: Vector): Vector;
+	static Vector_GetSignVector(A: Vector): Vector;
+	static Vector_HeadingAngle(A: Vector): number;
+	static Vector_IsNAN(A: Vector): boolean;
+	static Vector_IsNearlyZero(A: Vector,Tolerance: number): boolean;
+	static Vector_IsNormal(A: Vector): boolean;
+	static Vector_IsUniform(A: Vector,Tolerance: number): boolean;
+	static Vector_IsUnit(A: Vector,SquaredLenthTolerance: number): boolean;
+	static Vector_IsZero(A: Vector): boolean;
+	static Vector_MirrorByPlane(A: Vector,InPlane: Plane): Vector;
+	static Vector_Normal2D(A: Vector,Tolerance: number): Vector;
+	static Vector_Normalize(A?: Vector,Tolerance?: number): {A: Vector};
+	static Vector_NormalUnsafe(A: Vector): Vector;
+	static Vector_ProjectOnToNormal(V: Vector,InNormal: Vector): Vector;
+	static Vector_Reciprocal(A: Vector): Vector;
+	static Vector_Set(A?: Vector,X?: number,Y?: number,Z?: number): {A: Vector};
+	static Vector_SnappedToGrid(InVect: Vector,InGridSize: number): Vector;
+	static Vector_ToDegrees(A: Vector): Vector;
+	static Vector_ToRadians(A: Vector): Vector;
+	static Vector_UnitCartesianToSpherical(A: Vector): Vector2D;
+	static Vector_UnwindEuler(A?: Vector): {A: Vector};
+	static VectorSpringInterp(Current: Vector,Target: Vector,SpringState?: VectorSpringState,Stiffness?: number,CriticalDampingFactor?: number,DeltaTime?: number,Mass?: number): {SpringState: VectorSpringState, $: Vector};
+	static VInterpTo(Current: Vector,Target: Vector,DeltaTime: number,InterpSpeed: number): Vector;
+	static VInterpTo_Constant(Current: Vector,Target: Vector,DeltaTime: number,InterpSpeed: number): Vector;
+	static VLerp(A: Vector,B: Vector,Alpha: number): Vector;
+	static VSize(A: Vector): number;
+	static VSizeSquared(A: Vector): number;
+	static VSizeXY(A: Vector): number;
+	static VSizeXYSquared(A: Vector): number;
+	static WeightedMovingAverage_FVector(CurrentSample: Vector,PreviousSample: Vector,Weight: number): Vector;
+	static K2_TwoBoneIK(RootPos: Vector,JointPos: Vector,EndPos: Vector,JointTarget: Vector,Effector: Vector,OutJointPos?: Vector,OutEndPos?: Vector,bAllowStretching?: boolean,StartStretchRatio?: number,MaxStretchScale?: number): {OutJointPos: Vector, OutEndPos: Vector};
+	static GetPositionalTrackingCameraParameters(CameraOrigin?: Vector,CameraRotation?: Rotator,HFOV?: number,VFOV?: number,CameraDistance?: number,NearPlane?: number,FarPlane?: number): {CameraOrigin: Vector, CameraRotation: Rotator, HFOV: number, VFOV: number, CameraDistance: number, NearPlane: number, FarPlane: number};
+	static GetTrackingSensorParameters(Origin?: Vector,Rotation?: Rotator,LeftFOV?: number,RightFOV?: number,TopFOV?: number,BottomFOV?: number,Distance?: number,NearPlane?: number,FarPlane?: number,IsActive?: boolean,index?: number): {Origin: Vector, Rotation: Rotator, LeftFOV: number, RightFOV: number, TopFOV: number, BottomFOV: number, Distance: number, NearPlane: number, FarPlane: number, IsActive: boolean};
+	static AddManualEnvironmentCaptureProbe(Location: Vector,Extent: Vector): boolean;
+	static LineTraceTrackedObjects3D(Start: Vector,End: Vector,bTestFeaturePoints: boolean,bTestGroundPlane: boolean,bTestPlaneExtents: boolean,bTestPlaneBoundaryPolygon: boolean): ARTraceResult[];
+	static GetGuardianDimensions(BoundaryType: EBoundaryType): Vector;
+	static Conv_FloatToVector(InFloat: number): Vector;
+	static CreateVectorFromYawPitch(Yaw: number,Pitch: number,Length: number): Vector;
+	static GetVectorArrayAverage(Vectors: Vector[]): Vector;
+	static MakeVector(X: number,Y: number,Z: number): Vector;
+	static RandomUnitVector(): Vector;
+	static Vector_Backward(): Vector;
+	static Vector_Down(): Vector;
+	static Vector_Forward(): Vector;
+	static Vector_Left(): Vector;
+	static Vector_One(): Vector;
+	static Vector_Right(): Vector;
+	static Vector_Up(): Vector;
+	static Vector_Zero(): Vector;
+	static NextSobolCell3D(index: number,NumCells: number,PreviousValue: Vector): Vector;
+	static RandomSobolCell3D(index: number,NumCells: number,Cell: Vector,Seed: Vector): Vector;
+	static GetActorArrayAverageLocation(Actors: Actor[]): Vector;
+	static K2_MakePerlinNoiseVectorAndRemap(X: number,Y: number,Z: number,RangeOutMinX: number,RangeOutMaxX: number,RangeOutMinY: number,RangeOutMaxY: number,RangeOutMinZ: number,RangeOutMaxZ: number): Vector;
+}
+
+declare type EVectorQuantization = 'RoundWholeNumber' | 'RoundOneDecimal' | 'RoundTwoDecimals' | 'EVectorQuantization_MAX';
+declare var EVectorQuantization : { RoundWholeNumber:'RoundWholeNumber',RoundOneDecimal:'RoundOneDecimal',RoundTwoDecimals:'RoundTwoDecimals',EVectorQuantization_MAX:'EVectorQuantization_MAX', };
+declare type ERotatorQuantization = 'ByteComponents' | 'ShortComponents' | 'ERotatorQuantization_MAX';
+declare var ERotatorQuantization : { ByteComponents:'ByteComponents',ShortComponents:'ShortComponents',ERotatorQuantization_MAX:'ERotatorQuantization_MAX', };
+declare class RepMovement { 
+	LinearVelocity: Vector;
+	AngularVelocity: Vector;
+	Location: Vector;
+	Rotation: Rotator;
+	bSimulatedPhysicSleep: boolean;
+	bRepPhysics: boolean;
+	LocationQuantizationLevel: EVectorQuantization;
+	VelocityQuantizationLevel: EVectorQuantization;
+	RotationQuantizationLevel: ERotatorQuantization;
+	clone() : RepMovement;
+	static C(Other: UObject | any): RepMovement;
+}
+
+declare class RepAttachment { 
+	AttachParent: Actor;
+	LocationOffset: Vector_NetQuantize100;
+	RelativeScale3D: Vector_NetQuantize100;
+	RotationOffset: Rotator;
+	AttachSocket: string;
+	AttachComponent: SceneComponent;
+	clone() : RepAttachment;
+	static C(Other: UObject | any): RepAttachment;
+}
+
+declare type ENetDormancy = 'DORM_Never' | 'DORM_Awake' | 'DORM_DormantAll' | 'DORM_DormantPartial' | 'DORM_Initial' | 'DORM_MAX';
+declare var ENetDormancy : { DORM_Never:'DORM_Never',DORM_Awake:'DORM_Awake',DORM_DormantAll:'DORM_DormantAll',DORM_DormantPartial:'DORM_DormantPartial',DORM_Initial:'DORM_Initial',DORM_MAX:'DORM_MAX', };
+declare type ESpawnActorCollisionHandlingMethod = 'Undefined' | 'AlwaysSpawn' | 'AdjustIfPossibleButAlwaysSpawn' | 'AdjustIfPossibleButDontSpawnIfColliding' | 'DontSpawnIfColliding' | 'ESpawnActorCollisionHandlingMethod_MAX';
+declare var ESpawnActorCollisionHandlingMethod : { Undefined:'Undefined',AlwaysSpawn:'AlwaysSpawn',AdjustIfPossibleButAlwaysSpawn:'AdjustIfPossibleButAlwaysSpawn',AdjustIfPossibleButDontSpawnIfColliding:'AdjustIfPossibleButDontSpawnIfColliding',DontSpawnIfColliding:'DontSpawnIfColliding',ESpawnActorCollisionHandlingMethod_MAX:'ESpawnActorCollisionHandlingMethod_MAX', };
+declare class InterpFilter extends UObject { 
+	Caption: string;
+	static Load(ResourceName: string): InterpFilter;
+	static Find(Outer: UObject, ResourceName: string): InterpFilter;
+	static GetDefaultObject(): InterpFilter;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpFilter;
+	static C(Other: UObject | any): InterpFilter;
+}
+
+declare class InterpGroupDirector extends InterpGroup { 
+	static Load(ResourceName: string): InterpGroupDirector;
+	static Find(Outer: UObject, ResourceName: string): InterpGroupDirector;
+	static GetDefaultObject(): InterpGroupDirector;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpGroupDirector;
+	static C(Other: UObject | any): InterpGroupDirector;
+}
+
+declare class InterpData extends UObject { 
+	InterpLength: number;
+	PathBuildTime: number;
+	InterpGroups: InterpGroup[];
+	CurveEdSetup: InterpCurveEdSetup;
+	InterpFilters: InterpFilter[];
+	SelectedFilter: InterpFilter;
+	DefaultFilters: InterpFilter[];
+	EdSectionStart: number;
+	EdSectionEnd: number;
+	bShouldBakeAndPrune: boolean;
+	CachedDirectorGroup: InterpGroupDirector;
+	AllEventNames: string[];
+	static Load(ResourceName: string): InterpData;
+	static Find(Outer: UObject, ResourceName: string): InterpData;
+	static GetDefaultObject(): InterpData;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterpData;
+	static C(Other: UObject | any): InterpData;
+}
+
+declare class InterpGroupActorInfo { 
+	ObjectName: string;
+	Actors: Actor[];
+	clone() : InterpGroupActorInfo;
+	static C(Other: UObject | any): InterpGroupActorInfo;
+}
+
+declare class CameraCutInfo { 
+	Location: Vector;
+	Timestamp: number;
+	clone() : CameraCutInfo;
+	static C(Other: UObject | any): CameraCutInfo;
+}
+
+declare class MatineeActor extends Actor { 
+	MatineeData: InterpData;
+	MatineeControllerName: string;
+	PlayRate: number;
+	bPlayOnLevelLoad: boolean;
+	bForceStartPos: boolean;
+	ForceStartPosition: number;
+	bLooping: boolean;
+	bRewindOnPlay: boolean;
+	bNoResetOnRewind: boolean;
+	bRewindIfAlreadyPlaying: boolean;
+	bDisableRadioFilter: boolean;
+	bClientSideOnly: boolean;
+	bSkipUpdateIfNotVisible: boolean;
+	bIsSkippable: boolean;
+	PreferredSplitScreenNum: number;
+	bDisableMovementInput: boolean;
+	bDisableLookAtInput: boolean;
+	bHidePlayer: boolean;
+	bHideHud: boolean;
+	GroupActorInfos: InterpGroupActorInfo[];
+	bShouldShowGore: boolean;
+	GroupInst: InterpGroupInst[];
+	CameraCuts: CameraCutInfo[];
+	SpriteComponent: BillboardComponent;
+	bIsBeingEdited: boolean;
+	bIsScrubbing: boolean;
+	bIsPlaying: boolean;
+	bReversePlayback: boolean;
+	bPaused: boolean;
+	bPendingStop: boolean;
+	InterpPosition: number;
+	ReplicationForceIsPlaying: number;
+	OnPlay: UnrealEngineMulticastDelegate<() => void>;
+	OnStop: UnrealEngineMulticastDelegate<() => void>;
+	OnPause: UnrealEngineMulticastDelegate<() => void>;
+	static GetDefaultObject(): MatineeActor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MatineeActor;
+	Stop(): void;
+	SetPosition(NewPosition: number,bJump: boolean): void;
+	SetLoopingState(bNewLooping: boolean): void;
+	Reverse(): void;
+	Play(): void;
+	Pause(): void;
+	EnableGroupByName(GroupName: string,bEnable: boolean): void;
+	ChangePlaybackDirection(): void;
+	static C(Other: UObject | any): MatineeActor;
+}
+
+declare class ChildActorComponent extends SceneComponent { 
+	ChildActorClass: UnrealEngineClass;
+	ChildActor: Actor;
+	ChildActorTemplate: Actor;
+	static Load(ResourceName: string): ChildActorComponent;
+	static Find(Outer: UObject, ResourceName: string): ChildActorComponent;
+	static GetDefaultObject(): ChildActorComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ChildActorComponent;
+	SetChildActorClass(InClass: UnrealEngineClass): void;
+	static C(Other: UObject | any): ChildActorComponent;
+}
+
+declare class ModelComponent extends PrimitiveComponent { 
+	ModelBodySetup: BodySetup;
+	static Load(ResourceName: string): ModelComponent;
+	static Find(Outer: UObject, ResourceName: string): ModelComponent;
+	static GetDefaultObject(): ModelComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ModelComponent;
+	static C(Other: UObject | any): ModelComponent;
+}
+
+declare class LevelActorContainer extends UObject { 
+	Actors: Actor[];
+	static Load(ResourceName: string): LevelActorContainer;
+	static Find(Outer: UObject, ResourceName: string): LevelActorContainer;
+	static GetDefaultObject(): LevelActorContainer;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelActorContainer;
+	static C(Other: UObject | any): LevelActorContainer;
+}
+
+declare class LevelScriptBlueprint extends Blueprint { 
+	FriendlyName: string;
+	static Load(ResourceName: string): LevelScriptBlueprint;
+	static Find(Outer: UObject, ResourceName: string): LevelScriptBlueprint;
+	static GetDefaultObject(): LevelScriptBlueprint;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelScriptBlueprint;
+	static C(Other: UObject | any): LevelScriptBlueprint;
+}
+
+declare class LevelScriptActor extends Actor { 
+	bInputEnabled: boolean;
+	static GetDefaultObject(): LevelScriptActor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelScriptActor;
+	WorldOriginLocationChanged(OldOriginLocation: IntVector,NewOriginLocation: IntVector): void;
+	SetCinematicMode(bCinematicMode: boolean,bHidePlayer: boolean,bAffectsHUD: boolean,bAffectsMovement: boolean,bAffectsTurning: boolean): void;
+	RemoteEvent(EventName: string): boolean;
+	LevelReset(): void;
+	static C(Other: UObject | any): LevelScriptActor;
+}
+
+declare class NavigationObjectBase extends Actor { 
+	CapsuleComponent: CapsuleComponent;
+	GoodSprite: BillboardComponent;
+	BadSprite: BillboardComponent;
+	bIsPIEPlayerStart: boolean;
+	static GetDefaultObject(): NavigationObjectBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationObjectBase;
+	static C(Other: UObject | any): NavigationObjectBase;
+}
+
+declare class NavigationDataChunk extends UObject { 
+	NavigationDataName: string;
+	static Load(ResourceName: string): NavigationDataChunk;
+	static Find(Outer: UObject, ResourceName: string): NavigationDataChunk;
+	static GetDefaultObject(): NavigationDataChunk;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationDataChunk;
+	static C(Other: UObject | any): NavigationDataChunk;
+}
+
+declare type ELightingBuildQuality = 'Quality_Preview' | 'Quality_Medium' | 'Quality_High' | 'Quality_Production' | 'Quality_MAX';
+declare var ELightingBuildQuality : { Quality_Preview:'Quality_Preview',Quality_Medium:'Quality_Medium',Quality_High:'Quality_High',Quality_Production:'Quality_Production',Quality_MAX:'Quality_MAX', };
+declare class MapBuildDataRegistry extends UObject { 
+	LevelLightingQuality: ELightingBuildQuality;
+	static Load(ResourceName: string): MapBuildDataRegistry;
+	static Find(Outer: UObject, ResourceName: string): MapBuildDataRegistry;
+	static GetDefaultObject(): MapBuildDataRegistry;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MapBuildDataRegistry;
+	static C(Other: UObject | any): MapBuildDataRegistry;
+}
+
+declare type ETextureSizingType = 'TextureSizingType_UseSingleTextureSize' | 'TextureSizingType_UseAutomaticBiasedSizes' | 'TextureSizingType_UseManualOverrideTextureSize' | 'TextureSizingType_UseSimplygonAutomaticSizing' | 'TextureSizingType_MAX';
+declare var ETextureSizingType : { TextureSizingType_UseSingleTextureSize:'TextureSizingType_UseSingleTextureSize',TextureSizingType_UseAutomaticBiasedSizes:'TextureSizingType_UseAutomaticBiasedSizes',TextureSizingType_UseManualOverrideTextureSize:'TextureSizingType_UseManualOverrideTextureSize',TextureSizingType_UseSimplygonAutomaticSizing:'TextureSizingType_UseSimplygonAutomaticSizing',TextureSizingType_MAX:'TextureSizingType_MAX', };
+declare type EMaterialMergeType = 'MaterialMergeType_Default' | 'MaterialMergeType_Simplygon' | 'MaterialMergeType_MAX';
+declare var EMaterialMergeType : { MaterialMergeType_Default:'MaterialMergeType_Default',MaterialMergeType_Simplygon:'MaterialMergeType_Simplygon',MaterialMergeType_MAX:'MaterialMergeType_MAX', };
+declare class MaterialProxySettings { 
+	TextureSize: IntPoint;
+	GutterSpace: number;
+	MetallicConstant: number;
+	RoughnessConstant: number;
+	SpecularConstant: number;
+	OpacityConstant: number;
+	OpacityMaskConstant: number;
+	AmbientOcclusionConstant: number;
+	TextureSizingType: ETextureSizingType;
+	MaterialMergeType: EMaterialMergeType;
+	BlendMode: EBlendMode;
+	bAllowTwoSidedMaterial: boolean;
+	bNormalMap: boolean;
+	bMetallicMap: boolean;
+	bRoughnessMap: boolean;
+	bSpecularMap: boolean;
+	bEmissiveMap: boolean;
+	bOpacityMap: boolean;
+	bOpacityMaskMap: boolean;
+	bAmbientOcclusionMap: boolean;
+	DiffuseTextureSize: IntPoint;
+	NormalTextureSize: IntPoint;
+	MetallicTextureSize: IntPoint;
+	RoughnessTextureSize: IntPoint;
+	SpecularTextureSize: IntPoint;
+	EmissiveTextureSize: IntPoint;
+	OpacityTextureSize: IntPoint;
+	OpacityMaskTextureSize: IntPoint;
+	AmbientOcclusionTextureSize: IntPoint;
+	clone() : MaterialProxySettings;
+	static C(Other: UObject | any): MaterialProxySettings;
+}
+
+declare class LevelSimplificationDetails { 
+	bCreatePackagePerAsset: boolean;
+	DetailsPercentage: number;
+	StaticMeshMaterialSettings: MaterialProxySettings;
+	bOverrideLandscapeExportLOD: boolean;
+	LandscapeExportLOD: number;
+	LandscapeMaterialSettings: MaterialProxySettings;
+	bBakeFoliageToLandscape: boolean;
+	bBakeGrassToLandscape: boolean;
+	bGenerateMeshNormalMap: boolean;
+	bGenerateMeshMetallicMap: boolean;
+	bGenerateMeshRoughnessMap: boolean;
+	bGenerateMeshSpecularMap: boolean;
+	bGenerateLandscapeNormalMap: boolean;
+	bGenerateLandscapeMetallicMap: boolean;
+	bGenerateLandscapeRoughnessMap: boolean;
+	bGenerateLandscapeSpecularMap: boolean;
+	clone() : LevelSimplificationDetails;
+	static C(Other: UObject | any): LevelSimplificationDetails;
+}
+
+declare type EVisibilityAggressiveness = 'VIS_LeastAggressive' | 'VIS_ModeratelyAggressive' | 'VIS_MostAggressive' | 'VIS_Max';
+declare var EVisibilityAggressiveness : { VIS_LeastAggressive:'VIS_LeastAggressive',VIS_ModeratelyAggressive:'VIS_ModeratelyAggressive',VIS_MostAggressive:'VIS_MostAggressive',VIS_Max:'VIS_Max', };
+declare class NavigationSystemConfig extends UObject { 
+	NavigationSystemClass: SoftClassPath;
+	bIsOverriden: boolean;
+	static Load(ResourceName: string): NavigationSystemConfig;
+	static Find(Outer: UObject, ResourceName: string): NavigationSystemConfig;
+	static GetDefaultObject(): NavigationSystemConfig;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationSystemConfig;
+	static C(Other: UObject | any): NavigationSystemConfig;
+}
+
+declare class DefaultPhysicsVolume extends PhysicsVolume { 
+	static GetDefaultObject(): DefaultPhysicsVolume;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DefaultPhysicsVolume;
+	static C(Other: UObject | any): DefaultPhysicsVolume;
+}
+
+declare class PhysicsCollisionHandler extends UObject { 
+	ImpactThreshold: number;
+	ImpactReFireDelay: number;
+	DefaultImpactSound: SoundBase;
+	LastImpactSoundTime: number;
+	static Load(ResourceName: string): PhysicsCollisionHandler;
+	static Find(Outer: UObject, ResourceName: string): PhysicsCollisionHandler;
+	static GetDefaultObject(): PhysicsCollisionHandler;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsCollisionHandler;
+	static C(Other: UObject | any): PhysicsCollisionHandler;
+}
+
+declare class GameSession extends Info { 
+	MaxSpectators: number;
+	MaxPlayers: number;
+	MaxPartySize: number;
+	MaxSplitscreensPerConnection: number;
+	bRequiresPushToTalk: boolean;
+	SessionName: string;
+	static GetDefaultObject(): GameSession;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameSession;
+	static C(Other: UObject | any): GameSession;
+}
+
+declare class GameStateBase extends Info { 
+	GameModeClass: UnrealEngineClass;
+	AuthorityGameMode: GameModeBase;
+	SpectatorClass: UnrealEngineClass;
+	PlayerArray: PlayerState[];
+	bReplicatedHasBegunPlay: boolean;
+	ReplicatedWorldTimeSeconds: number;
+	ServerWorldTimeSecondsDelta: number;
+	ServerWorldTimeSecondsUpdateFrequency: number;
+	static GetDefaultObject(): GameStateBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameStateBase;
+	OnRep_SpectatorClass(): void;
+	OnRep_ReplicatedWorldTimeSeconds(): void;
+	OnRep_ReplicatedHasBegunPlay(): void;
+	OnRep_GameModeClass(): void;
+	HasMatchStarted(): boolean;
+	HasBegunPlay(): boolean;
+	GetServerWorldTimeSeconds(): number;
+	GetPlayerStartTime(Controller: Controller): number;
+	GetPlayerRespawnDelay(Controller: Controller): number;
+	static C(Other: UObject | any): GameStateBase;
+}
+
+declare class ServerStatReplicator extends Info { 
+	bUpdateStatNet: boolean;
+	bOverwriteClientStats: boolean;
+	Channels: any;
+	InRate: any;
+	OutRate: any;
+	OutSaturation: any;
+	MaxPacketOverhead: any;
+	InRateClientMax: any;
+	InRateClientMin: any;
+	InRateClientAvg: any;
+	InPacketsClientMax: any;
+	InPacketsClientMin: any;
+	InPacketsClientAvg: any;
+	OutRateClientMax: any;
+	OutRateClientMin: any;
+	OutRateClientAvg: any;
+	OutPacketsClientMax: any;
+	OutPacketsClientMin: any;
+	OutPacketsClientAvg: any;
+	NetNumClients: any;
+	InPackets: any;
+	OutPackets: any;
+	InBunches: any;
+	OutBunches: any;
+	OutLoss: any;
+	InLoss: any;
+	VoiceBytesSent: any;
+	VoiceBytesRecv: any;
+	VoicePacketsSent: any;
+	VoicePacketsRecv: any;
+	PercentInVoice: any;
+	PercentOutVoice: any;
+	NumActorChannels: any;
+	NumConsideredActors: any;
+	PrioritizedActors: any;
+	NumRelevantActors: any;
+	NumRelevantDeletedActors: any;
+	NumReplicatedActorAttempts: any;
+	NumReplicatedActors: any;
+	NumActors: any;
+	NumNetActors: any;
+	NumDormantActors: any;
+	NumInitiallyDormantActors: any;
+	NumNetGUIDsAckd: any;
+	NumNetGUIDsPending: any;
+	NumNetGUIDsUnAckd: any;
+	ObjPathBytes: any;
+	NetGUIDOutRate: any;
+	NetGUIDInRate: any;
+	NetSaturated: any;
+	static GetDefaultObject(): ServerStatReplicator;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ServerStatReplicator;
+	static C(Other: UObject | any): ServerStatReplicator;
+}
+
+declare class GameModeBase extends Info { 
+	OptionsString: string;
+	GameSessionClass: UnrealEngineClass;
+	GameStateClass: UnrealEngineClass;
+	PlayerControllerClass: UnrealEngineClass;
+	PlayerStateClass: UnrealEngineClass;
+	HUDClass: UnrealEngineClass;
+	DefaultPawnClass: UnrealEngineClass;
+	SpectatorClass: UnrealEngineClass;
+	ReplaySpectatorPlayerControllerClass: UnrealEngineClass;
+	ServerStatReplicatorClass: UnrealEngineClass;
+	GameSession: GameSession;
+	GameState: GameStateBase;
+	ServerStatReplicator: ServerStatReplicator;
+	DefaultPlayerName: string;
+	bUseSeamlessTravel: boolean;
+	bStartPlayersAsSpectators: boolean;
+	bPauseable: boolean;
+	static GetDefaultObject(): GameModeBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameModeBase;
+	StartPlay(): void;
+	SpawnDefaultPawnFor(NewPlayer: Controller,StartSpot: Actor): Pawn;
+	SpawnDefaultPawnAtTransform(NewPlayer: Controller,SpawnTransform: Transform): Pawn;
+	ShouldReset(ActorToReset: Actor): boolean;
+	ReturnToMainMenuHost(): void;
+	RestartPlayerAtTransform(NewPlayer: Controller,SpawnTransform: Transform): void;
+	RestartPlayerAtPlayerStart(NewPlayer: Controller,StartSpot: Actor): void;
+	RestartPlayer(NewPlayer: Controller): void;
+	ResetLevel(): void;
+	PlayerCanRestart(Player: PlayerController): boolean;
+	MustSpectate(NewPlayerController: PlayerController): boolean;
+	K2_PostLogin(NewPlayer: PlayerController): void;
+	K2_OnSwapPlayerControllers(OldPC: PlayerController,NewPC: PlayerController): void;
+	K2_OnRestartPlayer(NewPlayer: Controller): void;
+	K2_OnLogout(ExitingController: Controller): void;
+	K2_OnChangeName(Other: Controller,NewName: string,bNameChange: boolean): void;
+	K2_FindPlayerStart(Player: Controller,IncomingName: string): Actor;
+	InitStartSpot(StartSpot: Actor,NewPlayer: Controller): void;
+	InitializeHUDForPlayer(NewPlayer: PlayerController): void;
+	HasMatchStarted(): boolean;
+	HandleStartingNewPlayer(NewPlayer: PlayerController): void;
+	GetNumSpectators(): number;
+	GetNumPlayers(): number;
+	GetDefaultPawnClassForController(InController: Controller): UnrealEngineClass;
+	FindPlayerStart(Player: Controller,IncomingName: string): Actor;
+	ChoosePlayerStart(Player: Controller): Actor;
+	ChangeName(Controller: Controller,NewName: string,bNameChange: boolean): void;
+	CanSpectate(Viewer: PlayerController,ViewTarget: PlayerState): boolean;
+	static C(Other: UObject | any): GameModeBase;
+	HandleSeamlessTravelPlayer(C?: Controller): {C: Controller};
+	static HandleSeamlessTravelPlayer(GameMode: GameModeBase,C?: Controller): {C: Controller};
+}
+
+declare class GameNetworkManager extends Info { 
+	BadPacketLossThreshold: number;
+	SeverePacketLossThreshold: number;
+	BadPingThreshold: number;
+	SeverePingThreshold: number;
+	AdjustedNetSpeed: number;
+	LastNetSpeedUpdateTime: number;
+	TotalNetBandwidth: number;
+	MinDynamicBandwidth: number;
+	MaxDynamicBandwidth: number;
+	bIsStandbyCheckingEnabled: boolean;
+	bHasStandbyCheatTriggered: boolean;
+	StandbyRxCheatTime: number;
+	StandbyTxCheatTime: number;
+	PercentMissingForRxStandby: number;
+	PercentMissingForTxStandby: number;
+	PercentForBadPing: number;
+	JoinInProgressStandbyWaitTime: number;
+	MoveRepSize: number;
+	MAXPOSITIONERRORSQUARED: number;
+	MAXNEARZEROVELOCITYSQUARED: number;
+	CLIENTADJUSTUPDATECOST: number;
+	MAXCLIENTUPDATEINTERVAL: number;
+	MaxClientForcedUpdateDuration: number;
+	ServerForcedUpdateHitchThreshold: number;
+	ServerForcedUpdateHitchCooldown: number;
+	MaxMoveDeltaTime: number;
+	MaxClientSmoothingDeltaTime: number;
+	ClientNetSendMoveDeltaTime: number;
+	ClientNetSendMoveDeltaTimeThrottled: number;
+	ClientNetSendMoveDeltaTimeStationary: number;
+	ClientNetSendMoveThrottleAtNetSpeed: number;
+	ClientNetSendMoveThrottleOverPlayerCount: number;
+	ClientAuthorativePosition: boolean;
+	ClientErrorUpdateRateLimit: number;
+	ClientNetCamUpdateDeltaTime: number;
+	ClientNetCamUpdatePositionLimit: number;
+	bMovementTimeDiscrepancyDetection: boolean;
+	bMovementTimeDiscrepancyResolution: boolean;
+	MovementTimeDiscrepancyMaxTimeMargin: number;
+	MovementTimeDiscrepancyMinTimeMargin: number;
+	MovementTimeDiscrepancyResolutionRate: number;
+	MovementTimeDiscrepancyDriftAllowance: number;
+	bMovementTimeDiscrepancyForceCorrectionsDuringResolution: boolean;
+	bUseDistanceBasedRelevancy: boolean;
+	static GetDefaultObject(): GameNetworkManager;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameNetworkManager;
+	static C(Other: UObject | any): GameNetworkManager;
+}
+
+declare type EVolumeLightingMethod = 'VLM_VolumetricLightmap' | 'VLM_SparseVolumeLightingSamples' | 'VLM_MAX';
+declare var EVolumeLightingMethod : { VLM_VolumetricLightmap:'VLM_VolumetricLightmap',VLM_SparseVolumeLightingSamples:'VLM_SparseVolumeLightingSamples',VLM_MAX:'VLM_MAX', };
+declare class LightmassWorldInfoSettings { 
+	StaticLightingLevelScale: number;
+	NumIndirectLightingBounces: number;
+	NumSkyLightingBounces: number;
+	IndirectLightingQuality: number;
+	IndirectLightingSmoothness: number;
+	EnvironmentColor: Color;
+	EnvironmentIntensity: number;
+	EmissiveBoost: number;
+	DiffuseBoost: number;
+	VolumeLightingMethod: EVolumeLightingMethod;
+	bUseAmbientOcclusion: boolean;
+	bGenerateAmbientOcclusionMaterialMask: boolean;
+	bVisualizeMaterialDiffuse: boolean;
+	bVisualizeAmbientOcclusion: boolean;
+	bCompressLightmaps: boolean;
+	VolumetricLightmapDetailCellSize: number;
+	VolumetricLightmapMaximumBrickMemoryMb: number;
+	VolumetricLightmapSphericalHarmonicSmoothing: number;
+	VolumeLightSamplePlacementScale: number;
+	DirectIlluminationOcclusionFraction: number;
+	IndirectIlluminationOcclusionFraction: number;
+	OcclusionExponent: number;
+	FullyOccludedSamplesFraction: number;
+	MaxOcclusionDistance: number;
+	clone() : LightmassWorldInfoSettings;
+	static C(Other: UObject | any): LightmassWorldInfoSettings;
+}
+
+declare type ReverbPreset = 'REVERB_Default' | 'REVERB_Bathroom' | 'REVERB_StoneRoom' | 'REVERB_Auditorium' | 'REVERB_ConcertHall' | 'REVERB_Cave' | 'REVERB_Hallway' | 'REVERB_StoneCorridor' | 'REVERB_Alley' | 'REVERB_Forest' | 'REVERB_City' | 'REVERB_Mountains' | 'REVERB_Quarry' | 'REVERB_Plain' | 'REVERB_ParkingLot' | 'REVERB_SewerPipe' | 'REVERB_Underwater' | 'REVERB_SmallRoom' | 'REVERB_MediumRoom' | 'REVERB_LargeRoom' | 'REVERB_MediumHall' | 'REVERB_LargeHall' | 'REVERB_Plate' | 'REVERB_MAX';
+declare var ReverbPreset : { REVERB_Default:'REVERB_Default',REVERB_Bathroom:'REVERB_Bathroom',REVERB_StoneRoom:'REVERB_StoneRoom',REVERB_Auditorium:'REVERB_Auditorium',REVERB_ConcertHall:'REVERB_ConcertHall',REVERB_Cave:'REVERB_Cave',REVERB_Hallway:'REVERB_Hallway',REVERB_StoneCorridor:'REVERB_StoneCorridor',REVERB_Alley:'REVERB_Alley',REVERB_Forest:'REVERB_Forest',REVERB_City:'REVERB_City',REVERB_Mountains:'REVERB_Mountains',REVERB_Quarry:'REVERB_Quarry',REVERB_Plain:'REVERB_Plain',REVERB_ParkingLot:'REVERB_ParkingLot',REVERB_SewerPipe:'REVERB_SewerPipe',REVERB_Underwater:'REVERB_Underwater',REVERB_SmallRoom:'REVERB_SmallRoom',REVERB_MediumRoom:'REVERB_MediumRoom',REVERB_LargeRoom:'REVERB_LargeRoom',REVERB_MediumHall:'REVERB_MediumHall',REVERB_LargeHall:'REVERB_LargeHall',REVERB_Plate:'REVERB_Plate',REVERB_MAX:'REVERB_MAX', };
+declare class ReverbEffect extends UObject { 
+	Density: number;
+	Diffusion: number;
+	Gain: number;
+	GainHF: number;
+	DecayTime: number;
+	DecayHFRatio: number;
+	ReflectionsGain: number;
+	ReflectionsDelay: number;
+	LateGain: number;
+	LateDelay: number;
+	AirAbsorptionGainHF: number;
+	RoomRolloffFactor: number;
+	bChanged: boolean;
+	static Load(ResourceName: string): ReverbEffect;
+	static Find(Outer: UObject, ResourceName: string): ReverbEffect;
+	static GetDefaultObject(): ReverbEffect;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReverbEffect;
+	static C(Other: UObject | any): ReverbEffect;
+}
+
+declare class ReverbSettings { 
+	bApplyReverb: boolean;
+	ReverbType: ReverbPreset;
+	ReverbEffect: ReverbEffect;
+	ReverbPluginEffect: SoundEffectSubmixPreset;
+	Volume: number;
+	FadeTime: number;
+	clone() : ReverbSettings;
+	static C(Other: UObject | any): ReverbSettings;
+}
+
+declare class InteriorSettings { 
+	bIsWorldSettings: boolean;
+	ExteriorVolume: number;
+	ExteriorTime: number;
+	ExteriorLPF: number;
+	ExteriorLPFTime: number;
+	InteriorVolume: number;
+	InteriorTime: number;
+	InteriorLPF: number;
+	InteriorLPFTime: number;
+	clone() : InteriorSettings;
+	static C(Other: UObject | any): InteriorSettings;
+}
+
+declare type EProxyNormalComputationMethod = 'AngleWeighted' | 'AreaWeighted' | 'EqualWeighted' | 'EProxyNormalComputationMethod_MAX';
+declare var EProxyNormalComputationMethod : { AngleWeighted:'AngleWeighted',AreaWeighted:'AreaWeighted',EqualWeighted:'EqualWeighted',EProxyNormalComputationMethod_MAX:'EProxyNormalComputationMethod_MAX', };
+declare type ELandscapeCullingPrecision = 'High' | 'Medium' | 'Low' | 'ELandscapeCullingPrecision_MAX';
+declare var ELandscapeCullingPrecision : { High:'High',Medium:'Medium',Low:'Low',ELandscapeCullingPrecision_MAX:'ELandscapeCullingPrecision_MAX', };
+declare class MeshProxySettings { 
+	ScreenSize: number;
+	VoxelSize: number;
+	MaterialSettings: MaterialProxySettings;
+	TextureWidth: number;
+	TextureHeight: number;
+	bExportNormalMap: boolean;
+	bExportMetallicMap: boolean;
+	bExportRoughnessMap: boolean;
+	bExportSpecularMap: boolean;
+	bBakeVertexData: boolean;
+	MergeDistance: number;
+	UnresolvedGeometryColor: Color;
+	MaxRayCastDist: number;
+	HardAngleThreshold: number;
+	LightMapResolution: number;
+	NormalCalculationMethod: EProxyNormalComputationMethod;
+	LandscapeCullingPrecision: ELandscapeCullingPrecision;
+	bCalculateCorrectLODModel: boolean;
+	bOverrideVoxelSize: boolean;
+	bOverrideTransferDistance: boolean;
+	bUseHardAngleThreshold: boolean;
+	bComputeLightMapResolution: boolean;
+	bRecalculateNormals: boolean;
+	bUseLandscapeCulling: boolean;
+	bAllowAdjacency: boolean;
+	bAllowDistanceField: boolean;
+	bReuseMeshLightmapUVs: boolean;
+	bCreateCollision: boolean;
+	bAllowVertexColors: boolean;
+	bGenerateLightmapUVs: boolean;
+	clone() : MeshProxySettings;
+	static C(Other: UObject | any): MeshProxySettings;
+}
+
+declare type EUVOutput = 'DoNotOutputChannel' | 'OutputChannel' | 'EUVOutput_MAX';
+declare var EUVOutput : { DoNotOutputChannel:'DoNotOutputChannel',OutputChannel:'OutputChannel',EUVOutput_MAX:'EUVOutput_MAX', };
+declare type EMeshLODSelectionType = 'AllLODs' | 'SpecificLOD' | 'CalculateLOD' | 'LowestDetailLOD' | 'EMeshLODSelectionType_MAX';
+declare var EMeshLODSelectionType : { AllLODs:'AllLODs',SpecificLOD:'SpecificLOD',CalculateLOD:'CalculateLOD',LowestDetailLOD:'LowestDetailLOD',EMeshLODSelectionType_MAX:'EMeshLODSelectionType_MAX', };
+declare class MeshMergingSettings { 
+	TargetLightMapResolution: number;
+	OutputUVs: EUVOutput;
+	MaterialSettings: MaterialProxySettings;
+	GutterSize: number;
+	SpecificLOD: number;
+	LODSelectionType: EMeshLODSelectionType;
+	bGenerateLightMapUV: boolean;
+	bComputedLightMapResolution: boolean;
+	bPivotPointAtZero: boolean;
+	bMergePhysicsData: boolean;
+	bMergeMaterials: boolean;
+	bBakeVertexDataToMesh: boolean;
+	bUseVertexDataForBakingMaterial: boolean;
+	bUseTextureBinning: boolean;
+	bReuseMeshLightmapUVs: boolean;
+	bMergeEquivalentMaterials: boolean;
+	bUseLandscapeCulling: boolean;
+	bIncludeImposters: boolean;
+	bAllowDistanceField: boolean;
+	bImportVertexColors: boolean;
+	bCalculateCorrectLODModel: boolean;
+	bExportNormalMap: boolean;
+	bExportMetallicMap: boolean;
+	bExportRoughnessMap: boolean;
+	bExportSpecularMap: boolean;
+	MergedMaterialAtlasResolution: number;
+	ExportSpecificLOD: number;
+	clone() : MeshMergingSettings;
+	static C(Other: UObject | any): MeshMergingSettings;
+}
+
+declare class HierarchicalSimplification { 
+	TransitionScreenSize: number;
+	OverrideDrawDistance: number;
+	bUseOverrideDrawDistance: boolean;
+	bAllowSpecificExclusion: boolean;
+	bSimplifyMesh: boolean;
+	bOnlyGenerateClustersForVolumes: boolean;
+	bReusePreviousLevelClusters: boolean;
+	ProxySetting: MeshProxySettings;
+	MergeSetting: MeshMergingSettings;
+	DesiredBoundRadius: number;
+	DesiredFillingPercentage: number;
+	MinNumberOfActorsToBuild: number;
+	clone() : HierarchicalSimplification;
+	static C(Other: UObject | any): HierarchicalSimplification;
+}
+
+declare class BookmarkBase extends UObject { 
+	static Load(ResourceName: string): BookmarkBase;
+	static Find(Outer: UObject, ResourceName: string): BookmarkBase;
+	static GetDefaultObject(): BookmarkBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BookmarkBase;
+	static C(Other: UObject | any): BookmarkBase;
+}
+
+declare class BookMark extends BookmarkBase { 
+	Location: Vector;
+	Rotation: Rotator;
+	HiddenLevels: string[];
+	static Load(ResourceName: string): BookMark;
+	static Find(Outer: UObject, ResourceName: string): BookMark;
+	static GetDefaultObject(): BookMark;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BookMark;
+	static C(Other: UObject | any): BookMark;
+}
+
+declare class BroadphaseSettings { 
+	bUseMBPOnClient: boolean;
+	bUseMBPOnServer: boolean;
+	bUseMBPOuterBounds: boolean;
+	MBPBounds: Box;
+	MBPOuterBounds: Box;
+	MBPNumSubdivs: any;
+	clone() : BroadphaseSettings;
+	static C(Other: UObject | any): BroadphaseSettings;
+}
+
+declare class NetViewer { 
+	Connection: NetConnection;
+	InViewer: Actor;
+	ViewTarget: Actor;
+	ViewLocation: Vector;
+	ViewDir: Vector;
+	clone() : NetViewer;
+	static C(Other: UObject | any): NetViewer;
+}
+
+declare class WorldSettings extends Info { 
+	VisibilityCellSize: number;
+	VisibilityAggressiveness: EVisibilityAggressiveness;
+	bPrecomputeVisibility: boolean;
+	bPlaceCellsOnlyAlongCameraTracks: boolean;
+	bEnableWorldBoundsChecks: boolean;
+	bEnableNavigationSystem: boolean;
+	bEnableAISystem: boolean;
+	bEnableWorldComposition: boolean;
+	bUseClientSideLevelStreamingVolumes: boolean;
+	bEnableWorldOriginRebasing: boolean;
+	bWorldGravitySet: boolean;
+	bGlobalGravitySet: boolean;
+	bMinimizeBSPSections: boolean;
+	bForceNoPrecomputedLighting: boolean;
+	bHighPriorityLoading: boolean;
+	bHighPriorityLoadingLocal: boolean;
+	bOverrideDefaultBroadphaseSettings: boolean;
+	NavigationSystemConfig: NavigationSystemConfig;
+	NavigationSystemConfigOverride: NavigationSystemConfig;
+	WorldToMeters: number;
+	KillZ: number;
+	KillZDamageType: UnrealEngineClass;
+	WorldGravityZ: number;
+	GlobalGravityZ: number;
+	DefaultPhysicsVolumeClass: UnrealEngineClass;
+	PhysicsCollisionHandlerClass: UnrealEngineClass;
+	DefaultGameMode: UnrealEngineClass;
+	GameNetworkManagerClass: UnrealEngineClass;
+	PackedLightAndShadowMapTextureSize: number;
+	DefaultColorScale: Vector;
+	DefaultMaxDistanceFieldOcclusionDistance: number;
+	GlobalDistanceFieldViewDistance: number;
+	DynamicIndirectShadowsSelfShadowingIntensity: number;
+	LightmassSettings: LightmassWorldInfoSettings;
+	DefaultReverbSettings: ReverbSettings;
+	DefaultAmbientZoneSettings: InteriorSettings;
+	MonoCullingDistance: number;
+	DefaultBaseSoundMix: SoundMix;
+	bEnableHierarchicalLODSystem: boolean;
+	HLODSetupAsset: Class;
+	OverrideBaseMaterial: MaterialInterface;
+	HierarchicalLODSetup: HierarchicalSimplification[];
+	NumHLODLevels: number;
+	bGenerateSingleClusterForLevel: boolean;
+	Bookmarks: BookMark;
+	TimeDilation: number;
+	MatineeTimeDilation: number;
+	DemoPlayTimeDilation: number;
+	MinGlobalTimeDilation: number;
+	MaxGlobalTimeDilation: number;
+	MinUndilatedFrameTime: number;
+	MaxUndilatedFrameTime: number;
+	BroadphaseSettings: BroadphaseSettings;
+	Pauser: PlayerState;
+	ReplicationViewers: NetViewer[];
+	AssetUserData: AssetUserData[];
+	PauserPlayerState: PlayerState;
+	MaxNumberOfBookmarks: number;
+	DefaultBookmarkClass: UnrealEngineClass;
+	BookmarkArray: BookmarkBase[];
+	LastBookmarkClass: UnrealEngineClass;
+	static GetDefaultObject(): WorldSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldSettings;
+	OnRep_WorldGravityZ(): void;
+	static C(Other: UObject | any): WorldSettings;
+}
+
+declare class ReplicatedStaticActorDestructionInfo { 
+	ObjClass: UnrealEngineClass;
+	clone() : ReplicatedStaticActorDestructionInfo;
+	static C(Other: UObject | any): ReplicatedStaticActorDestructionInfo;
+}
+
+declare class Level extends UObject { 
+	OwningWorld: World;
+	Model: Model;
+	ModelComponents: ModelComponent[];
+	ActorCluster: LevelActorContainer;
+	LevelScriptBlueprint: LevelScriptBlueprint;
+	TextureStreamingResourceGuids: Guid[];
+	NumTextureStreamingUnbuiltComponents: number;
+	NumTextureStreamingDirtyResources: number;
+	LevelScriptActor: LevelScriptActor;
+	NavListStart: NavigationObjectBase;
+	NavListEnd: NavigationObjectBase;
+	NavDataChunks: NavigationDataChunk[];
+	LightmapTotalSize: number;
+	ShadowmapTotalSize: number;
+	StaticNavigableGeometry: Vector[];
+	StreamingTextureGuids: Guid[];
+	LevelBuildDataId: Guid;
+	MapBuildData: MapBuildDataRegistry;
+	LightBuildLevelOffset: IntVector;
+	bIsLightingScenario: boolean;
+	bTextureStreamingRotationChanged: boolean;
+	bStaticComponentsRegisteredInStreamingManager: boolean;
+	bIsVisible: boolean;
+	bLocked: boolean;
+	LevelSimplification: LevelSimplificationDetails;
+	LevelColor: LinearColor;
+	bLevelOkayForPlacementWhileCheckedIn: boolean;
+	WorldSettings: WorldSettings;
+	AssetUserData: AssetUserData[];
+	DestroyedReplicatedStaticActors: ReplicatedStaticActorDestructionInfo[];
+	static Load(ResourceName: string): Level;
+	static Find(Outer: UObject, ResourceName: string): Level;
+	static GetDefaultObject(): Level;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Level;
+	static C(Other: UObject | any): Level;
+	UpdateModelComponents(): void;
+	static UpdateModelComponents(Level: Level): void;
+}
+
+declare class NavDataConfig extends NavAgentProperties { 
+	Name: string;
+	Color: Color;
+	DefaultQueryExtent: Vector;
+	NavigationDataClass: UnrealEngineClass;
+	NavigationDataClassName: SoftClassPath;
+	clone() : NavDataConfig;
+	static C(Other: UObject | any): NavDataConfig;
+}
+
+declare type ERuntimeGenerationType = 'Static' | 'DynamicModifiersOnly' | 'Dynamic' | 'LegacyGeneration' | 'ERuntimeGenerationType_MAX';
+declare var ERuntimeGenerationType : { Static:'Static',DynamicModifiersOnly:'DynamicModifiersOnly',Dynamic:'Dynamic',LegacyGeneration:'LegacyGeneration',ERuntimeGenerationType_MAX:'ERuntimeGenerationType_MAX', };
+declare class SupportedAreaData { 
+	AreaClassName: string;
+	AreaID: number;
+	AreaClass: UnrealEngineClass;
+	clone() : SupportedAreaData;
+	static C(Other: UObject | any): SupportedAreaData;
+}
+
+declare class NavigationData extends Actor { 
+	RenderingComp: PrimitiveComponent;
+	NavDataConfig: NavDataConfig;
+	bEnableDrawing: boolean;
+	bForceRebuildOnLoad: boolean;
+	bCanBeMainNavData: boolean;
+	bCanSpawnOnRebuild: boolean;
+	bRebuildAtRuntime: boolean;
+	RuntimeGeneration: ERuntimeGenerationType;
+	ObservedPathsTickInterval: number;
+	DataVersion: any;
+	SupportedAreas: SupportedAreaData[];
+	static GetDefaultObject(): NavigationData;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationData;
+	static C(Other: UObject | any): NavigationData;
+}
+
+declare type EPathFollowingAction = 'Error' | 'NoMove' | 'DirectMove' | 'PartialPath' | 'PathToGoal' | 'EPathFollowingAction_MAX';
+declare var EPathFollowingAction : { Error:'Error',NoMove:'NoMove',DirectMove:'DirectMove',PartialPath:'PartialPath',PathToGoal:'PathToGoal',EPathFollowingAction_MAX:'EPathFollowingAction_MAX', };
+declare class PathFollowingComponent extends ActorComponent { 
+	MovementComp: NavMovementComponent;
+	MyNavData: NavigationData;
+	static Load(ResourceName: string): PathFollowingComponent;
+	static Find(Outer: UObject, ResourceName: string): PathFollowingComponent;
+	static GetDefaultObject(): PathFollowingComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PathFollowingComponent;
+	OnNavDataRegistered(NavData: NavigationData): void;
+	OnActorBump(SelfActor: Actor,OtherActor: Actor,NormalImpulse: Vector,Hit: HitResult): void;
+	GetPathDestination(): Vector;
+	GetPathActionType(): EPathFollowingAction;
+	static C(Other: UObject | any): PathFollowingComponent;
+}
+
+declare class BlackboardKeyType extends UObject { 
+	static Load(ResourceName: string): BlackboardKeyType;
+	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType;
+	static GetDefaultObject(): BlackboardKeyType;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType;
+	static C(Other: UObject | any): BlackboardKeyType;
+}
+
+declare class BlackboardEntry { 
+	EntryName: string;
+	EntryDescription: string;
+	KeyType: BlackboardKeyType;
+	bInstanceSynced: boolean;
+	clone() : BlackboardEntry;
+	static C(Other: UObject | any): BlackboardEntry;
+}
+
+declare class BlackboardData extends DataAsset { 
+	Parent: BlackboardData;
+	ParentKeys: BlackboardEntry[];
+	Keys: BlackboardEntry[];
+	bHasSynchronizedKeys: boolean;
+	static Load(ResourceName: string): BlackboardData;
+	static Find(Outer: UObject, ResourceName: string): BlackboardData;
+	static GetDefaultObject(): BlackboardData;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardData;
+	static C(Other: UObject | any): BlackboardData;
+}
+
+declare class BlackboardComponent extends ActorComponent { 
+	BrainComp: BrainComponent;
+	BlackboardAsset: BlackboardData;
+	KeyInstances: BlackboardKeyType[];
+	static Load(ResourceName: string): BlackboardComponent;
+	static Find(Outer: UObject, ResourceName: string): BlackboardComponent;
+	static GetDefaultObject(): BlackboardComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardComponent;
+	SetValueAsVector(KeyName: string,VectorValue: Vector): void;
+	SetValueAsString(KeyName: string,StringValue: string): void;
+	SetValueAsRotator(KeyName: string,VectorValue: Rotator): void;
+	SetValueAsObject(KeyName: string,ObjectValue: UObject): void;
+	SetValueAsName(KeyName: string,NameValue: string): void;
+	SetValueAsInt(KeyName: string,IntValue: number): void;
+	SetValueAsFloat(KeyName: string,FloatValue: number): void;
+	SetValueAsEnum(KeyName: string,EnumValue: number): void;
+	SetValueAsClass(KeyName: string,ClassValue: UnrealEngineClass): void;
+	SetValueAsBool(KeyName: string,BoolValue: boolean): void;
+	IsVectorValueSet(KeyName: string): boolean;
+	GetValueAsVector(KeyName: string): Vector;
+	GetValueAsString(KeyName: string): string;
+	GetValueAsRotator(KeyName: string): Rotator;
+	GetValueAsObject(KeyName: string): UObject;
+	GetValueAsName(KeyName: string): string;
+	GetValueAsInt(KeyName: string): number;
+	GetValueAsFloat(KeyName: string): number;
+	GetValueAsEnum(KeyName: string): number;
+	GetValueAsClass(KeyName: string): UnrealEngineClass;
+	GetValueAsBool(KeyName: string): boolean;
+	GetRotationFromEntry(KeyName: string,ResultRotation?: Rotator): {ResultRotation: Rotator, $: boolean};
+	GetLocationFromEntry(KeyName: string,ResultLocation?: Vector): {ResultLocation: Vector, $: boolean};
+	ClearValue(KeyName: string): void;
+	static C(Other: UObject | any): BlackboardComponent;
+}
+
+declare class BrainComponent extends ActorComponent { 
+	BlackboardComp: BlackboardComponent;
+	AIOwner: AIController;
+	static Load(ResourceName: string): BrainComponent;
+	static Find(Outer: UObject, ResourceName: string): BrainComponent;
+	static GetDefaultObject(): BrainComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BrainComponent;
+	StopLogic(Reason: string): void;
+	RestartLogic(): void;
+	IsRunning(): boolean;
+	IsPaused(): boolean;
+	static C(Other: UObject | any): BrainComponent;
+}
+
+declare class AISenseConfig extends UObject { 
+	DebugColor: Color;
+	MaxAge: number;
+	bStartsEnabled: boolean;
+	static Load(ResourceName: string): AISenseConfig;
+	static Find(Outer: UObject, ResourceName: string): AISenseConfig;
+	static GetDefaultObject(): AISenseConfig;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig;
+	static C(Other: UObject | any): AISenseConfig;
+}
+
+declare type EAISenseNotifyType = 'OnEveryPerception' | 'OnPerceptionChange' | 'EAISenseNotifyType_MAX';
+declare var EAISenseNotifyType : { OnEveryPerception:'OnEveryPerception',OnPerceptionChange:'OnPerceptionChange',EAISenseNotifyType_MAX:'EAISenseNotifyType_MAX', };
+declare class AISystemBase extends UObject { 
+	AISystemClassName: SoftClassPath;
+	AISystemModuleName: string;
+	bInstantiateAISystemOnClient: boolean;
+	static Load(ResourceName: string): AISystemBase;
+	static Find(Outer: UObject, ResourceName: string): AISystemBase;
+	static GetDefaultObject(): AISystemBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISystemBase;
+	static C(Other: UObject | any): AISystemBase;
+}
+
+declare class BlackboardKeySelector { 
+	AllowedTypes: BlackboardKeyType[];
+	SelectedKeyName: string;
+	SelectedKeyType: UnrealEngineClass;
+	SelectedKeyID: number;
+	bNoneIsAllowedValue: boolean;
+	clone() : BlackboardKeySelector;
+	static C(Other: UObject | any): BlackboardKeySelector;
+}
+
+declare class GameplayTagQuery { 
+	TokenStreamVersion: number;
+	TagDictionary: GameplayTag[];
+	QueryTokenStream: number[];
+	UserDescription: string;
+	AutoDescription: string;
+	clone() : GameplayTagQuery;
+	static C(Other: UObject | any): GameplayTagQuery;
+	IsTagQueryEmpty(): boolean;
+	MakeGameplayTagQuery(): GameplayTagQuery;
+	static IsTagQueryEmpty(TagQuery: GameplayTagQuery): boolean;
+	static MakeGameplayTagQuery(TagQuery: GameplayTagQuery): GameplayTagQuery;
+}
+
+declare class GameplayTagContainer { 
+	GameplayTags: GameplayTag[];
+	ParentTags: GameplayTag[];
+	clone() : GameplayTagContainer;
+	static C(Other: UObject | any): GameplayTagContainer;
+	AddGameplayTag(Tag?: GameplayTag): {TagContainer: GameplayTagContainer};
+	AppendGameplayTagContainers(InTagContainer?: GameplayTagContainer): {InOutTagContainer: GameplayTagContainer};
+	BreakGameplayTagContainer(GameplayTags?: GameplayTag[]): {GameplayTags: GameplayTag[]};
+	DoesContainerMatchTagQuery(TagQuery: GameplayTagQuery): boolean;
+	EqualEqual_GameplayTagContainer(B: GameplayTagContainer): boolean;
+	GetDebugStringFromGameplayTagContainer(): string;
+	GetNumGameplayTagsInContainer(): number;
+	HasAllTags(OtherContainer: GameplayTagContainer,bExactMatch: boolean): boolean;
+	HasAnyTags(OtherContainer: GameplayTagContainer,bExactMatch: boolean): boolean;
+	HasTag(Tag: GameplayTag,bExactMatch: boolean): boolean;
+	MakeLiteralGameplayTagContainer(): GameplayTagContainer;
+	NotEqual_GameplayTagContainer(B: GameplayTagContainer): boolean;
+	NotEqual_TagContainerTagContainer(B: string): boolean;
+	RemoveGameplayTag(Tag?: GameplayTag): {TagContainer: GameplayTagContainer, $: boolean};
+	static AddGameplayTag(TagContainer?: GameplayTagContainer,Tag?: GameplayTag): {TagContainer: GameplayTagContainer};
+	static AppendGameplayTagContainers(InOutTagContainer?: GameplayTagContainer,InTagContainer?: GameplayTagContainer): {InOutTagContainer: GameplayTagContainer};
+	static BreakGameplayTagContainer(GameplayTagContainer: GameplayTagContainer,GameplayTags?: GameplayTag[]): {GameplayTags: GameplayTag[]};
+	static DoesContainerMatchTagQuery(TagContainer: GameplayTagContainer,TagQuery: GameplayTagQuery): boolean;
+	static EqualEqual_GameplayTagContainer(A: GameplayTagContainer,B: GameplayTagContainer): boolean;
+	static GetDebugStringFromGameplayTagContainer(TagContainer: GameplayTagContainer): string;
+	static GetNumGameplayTagsInContainer(TagContainer: GameplayTagContainer): number;
+	static HasAllTags(TagContainer: GameplayTagContainer,OtherContainer: GameplayTagContainer,bExactMatch: boolean): boolean;
+	static HasAnyTags(TagContainer: GameplayTagContainer,OtherContainer: GameplayTagContainer,bExactMatch: boolean): boolean;
+	static HasTag(TagContainer: GameplayTagContainer,Tag: GameplayTag,bExactMatch: boolean): boolean;
+	static MakeLiteralGameplayTagContainer(Value: GameplayTagContainer): GameplayTagContainer;
+	static NotEqual_GameplayTagContainer(A: GameplayTagContainer,B: GameplayTagContainer): boolean;
+	static NotEqual_TagContainerTagContainer(A: GameplayTagContainer,B: string): boolean;
+	static RemoveGameplayTag(TagContainer?: GameplayTagContainer,Tag?: GameplayTag): {TagContainer: GameplayTagContainer, $: boolean};
+	static MakeGameplayTagContainerFromArray(GameplayTags: GameplayTag[]): GameplayTagContainer;
+}
+
+declare class GameplayTag { 
+	TagName: string;
+	clone() : GameplayTag;
+	static C(Other: UObject | any): GameplayTag;
+	EqualEqual_GameplayTag(B: GameplayTag): boolean;
+	GetDebugStringFromGameplayTag(): string;
+	GetTagName(): string;
+	IsGameplayTagValid(): boolean;
+	MakeGameplayTagContainerFromTag(): GameplayTagContainer;
+	MakeLiteralGameplayTag(): GameplayTag;
+	MatchesAnyTags(OtherContainer: GameplayTagContainer,bExactMatch: boolean): boolean;
+	MatchesTag(TagTwo: GameplayTag,bExactMatch: boolean): boolean;
+	NotEqual_GameplayTag(B: GameplayTag): boolean;
+	NotEqual_TagTag(B: string): boolean;
+	static EqualEqual_GameplayTag(A: GameplayTag,B: GameplayTag): boolean;
+	static GetDebugStringFromGameplayTag(GameplayTag: GameplayTag): string;
+	static GetTagName(GameplayTag: GameplayTag): string;
+	static IsGameplayTagValid(GameplayTag: GameplayTag): boolean;
+	static MakeGameplayTagContainerFromTag(SingleTag: GameplayTag): GameplayTagContainer;
+	static MakeLiteralGameplayTag(Value: GameplayTag): GameplayTag;
+	static MatchesAnyTags(TagOne: GameplayTag,OtherContainer: GameplayTagContainer,bExactMatch: boolean): boolean;
+	static MatchesTag(TagOne: GameplayTag,TagTwo: GameplayTag,bExactMatch: boolean): boolean;
+	static NotEqual_GameplayTag(A: GameplayTag,B: GameplayTag): boolean;
+	static NotEqual_TagTag(A: GameplayTag,B: string): boolean;
+}
+
+declare class BehaviorTreeComponent extends BrainComponent { 
+	NodeInstances: BTNode[];
+	static Load(ResourceName: string): BehaviorTreeComponent;
+	static Find(Outer: UObject, ResourceName: string): BehaviorTreeComponent;
+	static GetDefaultObject(): BehaviorTreeComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeComponent;
+	SetDynamicSubtree(InjectTag: GameplayTag,BehaviorAsset: BehaviorTree): void;
+	GetTagCooldownEndTime(CooldownTag: GameplayTag): number;
+	AddCooldownTagDuration(CooldownTag: GameplayTag,CooldownDuration: number,bAddToExistingDuration: boolean): void;
+	static C(Other: UObject | any): BehaviorTreeComponent;
 }
 
-declare class Package extends UObject { 
-	static Load(ResourceName: string): Package;
-	static Find(Outer: UObject, ResourceName: string): Package;
-	static GetDefaultObject(): Package;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Package;
-	static C(Other: UObject | any): Package;
-	DeletePackage(): boolean;
-	FindWorldInPackage(): World;
-	SavePackage(Filename: string): boolean;
-	GetLongPackagePath(): string;
-	HasAnyPackageFlags(Flags: number): boolean;
-	LoadPackage(PackageName: string): Package;
-	static DeletePackage(Package: Package): boolean;
-	static FindWorldInPackage(Package: Package): World;
-	static SavePackage(Package: Package,Filename: string): boolean;
-	static GetLongPackagePath(InPackage: Package): string;
-	static HasAnyPackageFlags(Package: Package,Flags: number): boolean;
-	static LoadPackage(InOuter: Package,PackageName: string): Package;
+declare class BTNode extends UObject { 
+	NodeName: string;
+	TreeAsset: BehaviorTree;
+	ParentNode: BTCompositeNode;
+	static Load(ResourceName: string): BTNode;
+	static Find(Outer: UObject, ResourceName: string): BTNode;
+	static GetDefaultObject(): BTNode;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTNode;
+	static C(Other: UObject | any): BTNode;
+	ClearBlackboardValue(Key: BlackboardKeySelector): void;
+	ClearBlackboardValueAsVector(Key: BlackboardKeySelector): void;
+	GetBlackboardValueAsActor(Key: BlackboardKeySelector): Actor;
+	GetBlackboardValueAsBool(Key: BlackboardKeySelector): boolean;
+	GetBlackboardValueAsClass(Key: BlackboardKeySelector): UnrealEngineClass;
+	GetBlackboardValueAsEnum(Key: BlackboardKeySelector): number;
+	GetBlackboardValueAsFloat(Key: BlackboardKeySelector): number;
+	GetBlackboardValueAsInt(Key: BlackboardKeySelector): number;
+	GetBlackboardValueAsName(Key: BlackboardKeySelector): string;
+	GetBlackboardValueAsObject(Key: BlackboardKeySelector): UObject;
+	GetBlackboardValueAsRotator(Key: BlackboardKeySelector): Rotator;
+	GetBlackboardValueAsString(Key: BlackboardKeySelector): string;
+	GetBlackboardValueAsVector(Key: BlackboardKeySelector): Vector;
+	GetOwnerComponent(): BehaviorTreeComponent;
+	GetOwnersBlackboard(): BlackboardComponent;
+	SetBlackboardValueAsBool(Key: BlackboardKeySelector,Value: boolean): void;
+	SetBlackboardValueAsClass(Key: BlackboardKeySelector,Value: UnrealEngineClass): void;
+	SetBlackboardValueAsEnum(Key: BlackboardKeySelector,Value: number): void;
+	SetBlackboardValueAsFloat(Key: BlackboardKeySelector,Value: number): void;
+	SetBlackboardValueAsInt(Key: BlackboardKeySelector,Value: number): void;
+	SetBlackboardValueAsName(Key: BlackboardKeySelector,Value: string): void;
+	SetBlackboardValueAsObject(Key: BlackboardKeySelector,Value: UObject): void;
+	SetBlackboardValueAsRotator(Key: BlackboardKeySelector,Value: Rotator): void;
+	SetBlackboardValueAsString(Key: BlackboardKeySelector,Value: string): void;
+	SetBlackboardValueAsVector(Key: BlackboardKeySelector,Value: Vector): void;
+	StartUsingExternalEvent(OwningActor: Actor): void;
+	StopUsingExternalEvent(): void;
+	static ClearBlackboardValue(NodeOwner: BTNode,Key: BlackboardKeySelector): void;
+	static ClearBlackboardValueAsVector(NodeOwner: BTNode,Key: BlackboardKeySelector): void;
+	static GetBlackboardValueAsActor(NodeOwner: BTNode,Key: BlackboardKeySelector): Actor;
+	static GetBlackboardValueAsBool(NodeOwner: BTNode,Key: BlackboardKeySelector): boolean;
+	static GetBlackboardValueAsClass(NodeOwner: BTNode,Key: BlackboardKeySelector): UnrealEngineClass;
+	static GetBlackboardValueAsEnum(NodeOwner: BTNode,Key: BlackboardKeySelector): number;
+	static GetBlackboardValueAsFloat(NodeOwner: BTNode,Key: BlackboardKeySelector): number;
+	static GetBlackboardValueAsInt(NodeOwner: BTNode,Key: BlackboardKeySelector): number;
+	static GetBlackboardValueAsName(NodeOwner: BTNode,Key: BlackboardKeySelector): string;
+	static GetBlackboardValueAsObject(NodeOwner: BTNode,Key: BlackboardKeySelector): UObject;
+	static GetBlackboardValueAsRotator(NodeOwner: BTNode,Key: BlackboardKeySelector): Rotator;
+	static GetBlackboardValueAsString(NodeOwner: BTNode,Key: BlackboardKeySelector): string;
+	static GetBlackboardValueAsVector(NodeOwner: BTNode,Key: BlackboardKeySelector): Vector;
+	static GetOwnerComponent(NodeOwner: BTNode): BehaviorTreeComponent;
+	static GetOwnersBlackboard(NodeOwner: BTNode): BlackboardComponent;
+	static SetBlackboardValueAsBool(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: boolean): void;
+	static SetBlackboardValueAsClass(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: UnrealEngineClass): void;
+	static SetBlackboardValueAsEnum(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: number): void;
+	static SetBlackboardValueAsFloat(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: number): void;
+	static SetBlackboardValueAsInt(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: number): void;
+	static SetBlackboardValueAsName(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: string): void;
+	static SetBlackboardValueAsObject(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: UObject): void;
+	static SetBlackboardValueAsRotator(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: Rotator): void;
+	static SetBlackboardValueAsString(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: string): void;
+	static SetBlackboardValueAsVector(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: Vector): void;
+	static StartUsingExternalEvent(NodeOwner: BTNode,OwningActor: Actor): void;
+	static StopUsingExternalEvent(NodeOwner: BTNode): void;
+}
+
+declare class BTAuxiliaryNode extends BTNode { 
+	static Load(ResourceName: string): BTAuxiliaryNode;
+	static Find(Outer: UObject, ResourceName: string): BTAuxiliaryNode;
+	static GetDefaultObject(): BTAuxiliaryNode;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTAuxiliaryNode;
+	static C(Other: UObject | any): BTAuxiliaryNode;
+}
+
+declare class BTService extends BTAuxiliaryNode { 
+	Interval: number;
+	RandomDeviation: number;
+	bCallTickOnSearchStart: boolean;
+	bRestartTimerOnEachActivation: boolean;
+	static Load(ResourceName: string): BTService;
+	static Find(Outer: UObject, ResourceName: string): BTService;
+	static GetDefaultObject(): BTService;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTService;
+	static C(Other: UObject | any): BTService;
+}
+
+declare class BTTaskNode extends BTNode { 
+	Services: BTService[];
+	bIgnoreRestartSelf: boolean;
+	static Load(ResourceName: string): BTTaskNode;
+	static Find(Outer: UObject, ResourceName: string): BTTaskNode;
+	static GetDefaultObject(): BTTaskNode;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTaskNode;
+	static C(Other: UObject | any): BTTaskNode;
+}
+
+declare type EBTFlowAbortMode = 'None' | 'LowerPriority' | 'Self' | 'Both' | 'EBTFlowAbortMode_MAX';
+declare var EBTFlowAbortMode : { None:'None',LowerPriority:'LowerPriority',Self:'Self',Both:'Both',EBTFlowAbortMode_MAX:'EBTFlowAbortMode_MAX', };
+declare class BTDecorator extends BTAuxiliaryNode { 
+	bInverseCondition: boolean;
+	FlowAbortMode: EBTFlowAbortMode;
+	static Load(ResourceName: string): BTDecorator;
+	static Find(Outer: UObject, ResourceName: string): BTDecorator;
+	static GetDefaultObject(): BTDecorator;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator;
+	static C(Other: UObject | any): BTDecorator;
+}
+
+declare type EBTDecoratorLogic = 'Invalid' | 'Test' | 'And' | 'Or' | 'Not' | 'EBTDecoratorLogic_MAX';
+declare var EBTDecoratorLogic : { Invalid:'Invalid',Test:'Test',And:'And',Or:'Or',Not:'Not',EBTDecoratorLogic_MAX:'EBTDecoratorLogic_MAX', };
+declare class BTDecoratorLogic { 
+	Operation: EBTDecoratorLogic;
+	Number: any;
+	clone() : BTDecoratorLogic;
+	static C(Other: UObject | any): BTDecoratorLogic;
+}
+
+declare class BTCompositeChild { 
+	ChildComposite: BTCompositeNode;
+	ChildTask: BTTaskNode;
+	Decorators: BTDecorator[];
+	DecoratorOps: BTDecoratorLogic[];
+	clone() : BTCompositeChild;
+	static C(Other: UObject | any): BTCompositeChild;
+}
+
+declare class BTCompositeNode extends BTNode { 
+	Children: BTCompositeChild[];
+	Services: BTService[];
+	bApplyDecoratorScope: boolean;
+	static Load(ResourceName: string): BTCompositeNode;
+	static Find(Outer: UObject, ResourceName: string): BTCompositeNode;
+	static GetDefaultObject(): BTCompositeNode;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTCompositeNode;
+	static C(Other: UObject | any): BTCompositeNode;
+}
+
+declare class BehaviorTree extends UObject { 
+	RootNode: BTCompositeNode;
+	BTGraph: EdGraph;
+	LastEditedDocuments: EditedDocumentInfo[];
+	BlackboardAsset: BlackboardData;
+	RootDecorators: BTDecorator[];
+	RootDecoratorOps: BTDecoratorLogic[];
+	static Load(ResourceName: string): BehaviorTree;
+	static Find(Outer: UObject, ResourceName: string): BehaviorTree;
+	static GetDefaultObject(): BehaviorTree;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTree;
+	static C(Other: UObject | any): BehaviorTree;
+}
+
+declare class BehaviorTreeTemplateInfo { 
+	Asset: BehaviorTree;
+	Template: BTCompositeNode;
+	clone() : BehaviorTreeTemplateInfo;
+	static C(Other: UObject | any): BehaviorTreeTemplateInfo;
+}
+
+declare class BehaviorTreeManager extends UObject { 
+	MaxDebuggerSteps: number;
+	LoadedTemplates: BehaviorTreeTemplateInfo[];
+	ActiveComponents: BehaviorTreeComponent[];
+	static Load(ResourceName: string): BehaviorTreeManager;
+	static Find(Outer: UObject, ResourceName: string): BehaviorTreeManager;
+	static GetDefaultObject(): BehaviorTreeManager;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeManager;
+	static C(Other: UObject | any): BehaviorTreeManager;
+}
+
+declare class EnvQueryNode extends UObject { 
+	VerNum: number;
+	static Load(ResourceName: string): EnvQueryNode;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryNode;
+	static GetDefaultObject(): EnvQueryNode;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryNode;
+	static C(Other: UObject | any): EnvQueryNode;
+}
+
+declare class EnvQueryItemType extends UObject { 
+	static Load(ResourceName: string): EnvQueryItemType;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryItemType;
+	static GetDefaultObject(): EnvQueryItemType;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryItemType;
+	static C(Other: UObject | any): EnvQueryItemType;
+}
+
+declare class EnvQueryGenerator extends EnvQueryNode { 
+	OptionName: string;
+	ItemType: UnrealEngineClass;
+	bAutoSortTests: boolean;
+	static Load(ResourceName: string): EnvQueryGenerator;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator;
+	static GetDefaultObject(): EnvQueryGenerator;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator;
+	static C(Other: UObject | any): EnvQueryGenerator;
+}
+
+declare type EEnvTestPurpose = 'Filter' | 'Score' | 'FilterAndScore' | 'EEnvTestPurpose_MAX';
+declare var EEnvTestPurpose : { Filter:'Filter',Score:'Score',FilterAndScore:'FilterAndScore',EEnvTestPurpose_MAX:'EEnvTestPurpose_MAX', };
+declare type EEnvTestFilterOperator = 'AllPass' | 'AnyPass' | 'EEnvTestFilterOperator_MAX';
+declare var EEnvTestFilterOperator : { AllPass:'AllPass',AnyPass:'AnyPass',EEnvTestFilterOperator_MAX:'EEnvTestFilterOperator_MAX', };
+declare type EEnvTestScoreOperator = 'AverageScore' | 'MinScore' | 'MaxScore' | 'EEnvTestScoreOperator_MAX';
+declare var EEnvTestScoreOperator : { AverageScore:'AverageScore',MinScore:'MinScore',MaxScore:'MaxScore',EEnvTestScoreOperator_MAX:'EEnvTestScoreOperator_MAX', };
+declare type EEnvTestFilterType = 'Minimum' | 'Maximum' | 'Range' | 'Match' | 'EEnvTestFilterType_MAX';
+declare var EEnvTestFilterType : { Minimum:'Minimum',Maximum:'Maximum',Range:'Range',Match:'Match',EEnvTestFilterType_MAX:'EEnvTestFilterType_MAX', };
+declare class AIDataProvider extends UObject { 
+	static Load(ResourceName: string): AIDataProvider;
+	static Find(Outer: UObject, ResourceName: string): AIDataProvider;
+	static GetDefaultObject(): AIDataProvider;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIDataProvider;
+	static C(Other: UObject | any): AIDataProvider;
+}
+
+declare class AIDataProviderValue { 
+	CachedProperty: Property;
+	DataBinding: AIDataProvider;
+	DataField: string;
+	clone() : AIDataProviderValue;
+	static C(Other: UObject | any): AIDataProviderValue;
+}
+
+declare class AIDataProviderTypedValue extends AIDataProviderValue { 
+	PropertyType: UnrealEngineClass;
+	clone() : AIDataProviderTypedValue;
+	static C(Other: UObject | any): AIDataProviderTypedValue;
+}
+
+declare class AIDataProviderBoolValue extends AIDataProviderTypedValue { 
+	DefaultValue: boolean;
+	clone() : AIDataProviderBoolValue;
+	static C(Other: UObject | any): AIDataProviderBoolValue;
 }
 
-declare class DirectoryItem { 
-	Name: string;
-	bIsDirectory: boolean;
-	clone() : DirectoryItem;
-	static C(Other: UObject | any): DirectoryItem;
+declare class AIDataProviderFloatValue extends AIDataProviderTypedValue { 
+	DefaultValue: number;
+	clone() : AIDataProviderFloatValue;
+	static C(Other: UObject | any): AIDataProviderFloatValue;
 }
 
-declare type EJavascriptEncodingOptions = 'AutoDetect' | 'ForceAnsi' | 'ForceUnicode' | 'ForceUTF8' | 'ForceUTF8WithoutBOM' | 'EJavascriptEncodingOptions_MAX';
-declare var EJavascriptEncodingOptions : { AutoDetect:'AutoDetect',ForceAnsi:'ForceAnsi',ForceUnicode:'ForceUnicode',ForceUTF8:'ForceUTF8',ForceUTF8WithoutBOM:'ForceUTF8WithoutBOM',EJavascriptEncodingOptions_MAX:'EJavascriptEncodingOptions_MAX', };
-declare class CollisionProfileName { 
-	Name: string;
-	clone() : CollisionProfileName;
-	static C(Other: UObject | any): CollisionProfileName;
+declare type EEnvTestScoreEquation = 'Linear' | 'Square' | 'InverseLinear' | 'SquareRoot' | 'Constant' | 'EEnvTestScoreEquation_MAX';
+declare var EEnvTestScoreEquation : { Linear:'Linear',Square:'Square',InverseLinear:'InverseLinear',SquareRoot:'SquareRoot',Constant:'Constant',EEnvTestScoreEquation_MAX:'EEnvTestScoreEquation_MAX', };
+declare type EEnvQueryTestClamping = 'None' | 'SpecifiedValue' | 'FilterThreshold' | 'EEnvQueryTestClamping_MAX';
+declare var EEnvQueryTestClamping : { None:'None',SpecifiedValue:'SpecifiedValue',FilterThreshold:'FilterThreshold',EEnvQueryTestClamping_MAX:'EEnvQueryTestClamping_MAX', };
+declare type EEQSNormalizationType = 'Absolute' | 'RelativeToScores' | 'EEQSNormalizationType_MAX';
+declare var EEQSNormalizationType : { Absolute:'Absolute',RelativeToScores:'RelativeToScores',EEQSNormalizationType_MAX:'EEQSNormalizationType_MAX', };
+declare class EnvQueryTest extends EnvQueryNode { 
+	TestOrder: number;
+	TestPurpose: EEnvTestPurpose;
+	TestComment: string;
+	MultipleContextFilterOp: EEnvTestFilterOperator;
+	MultipleContextScoreOp: EEnvTestScoreOperator;
+	FilterType: EEnvTestFilterType;
+	BoolValue: AIDataProviderBoolValue;
+	FloatValueMin: AIDataProviderFloatValue;
+	FloatValueMax: AIDataProviderFloatValue;
+	ScoringEquation: EEnvTestScoreEquation;
+	ClampMinType: EEnvQueryTestClamping;
+	ClampMaxType: EEnvQueryTestClamping;
+	NormalizationType: EEQSNormalizationType;
+	ScoreClampMin: AIDataProviderFloatValue;
+	ScoreClampMax: AIDataProviderFloatValue;
+	ScoringFactor: AIDataProviderFloatValue;
+	ReferenceValue: AIDataProviderFloatValue;
+	bDefineReferenceValue: boolean;
+	bWorkOnFloatValues: boolean;
+	static Load(ResourceName: string): EnvQueryTest;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryTest;
+	static GetDefaultObject(): EnvQueryTest;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest;
+	static C(Other: UObject | any): EnvQueryTest;
 }
 
-declare class GenericStruct { 
-	Data: number;
-	clone() : GenericStruct;
-	static C(Other: UObject | any): GenericStruct;
+declare class EnvQueryOption extends UObject { 
+	Generator: EnvQueryGenerator;
+	Tests: EnvQueryTest[];
+	static Load(ResourceName: string): EnvQueryOption;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryOption;
+	static GetDefaultObject(): EnvQueryOption;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryOption;
+	static C(Other: UObject | any): EnvQueryOption;
 }
 
-declare class UObject { 
-	constructor();
-	constructor(Outer: UObject);
-	static Load(ResourceName: string): UObject;
-	static Find(Outer: UObject, ResourceName: string): UObject;
-	static StaticClass: any;
-	static GetClassObject(): Class;
-	static GetDefaultObject(): UObject;
-	static GetDefaultSubobjectByName(Name: string): UObject;
-	static SetDefaultSubobjectClass(Name: string): void;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UObject;
-	ExecuteUbergraph(EntryPoint: number): void;
-	static C(Other: UObject | any): UObject;
-	AddWhitelistedObject(): void;
-	BroadcastAssetCreated(): void;
-	MarkPackageDirty(): boolean;
-	ModifyObject(bAlwaysMarkDirty: boolean): void;
-	OpenEditorForAsset(): boolean;
-	PostEditChange(): void;
-	DestroyUObject(): void;
-	CreateEnum(Name: string,DisplayNames: string[]): Enum;
-	CreatePackage(PackageName: string): Package;
-	Duplicate(Outer: UObject,Name: string): UObject;
-	FindObjectWithOuter(ClassToLookFor: UnrealEngineClass,NameToLookFor: string): UObject;
-	FindPackage(PackageName: string): Package;
-	GetArchetypePathName(): string;
-	GetDir(WhichDir: string): string;
-	GetFields(bIncludeSuper: boolean): Field[];
-	GetFileSize(Filename: string): number;
-	GetName(): string;
-	GetObjectsWithOuter(Results?: UObject[],bIncludeNestedObjects?: boolean,ExclusionFlags?: number,ExclusionInternalFlags?: number): {Results: UObject[]};
-	GetOuter(): UObject;
-	GetOutermost(): UObject;
-	HasAnyFlags(Flags: number): boolean;
-	ReadDirectory(Directory: string,OutItems?: DirectoryItem[]): {OutItems: DirectoryItem[], $: boolean};
-	ReadFile(Filename: string): boolean;
-	ReadStringFromFile(Filename: string): string;
-	SetObjectFlags(Flags: number): void;
-	WriteFile(Filename: string): boolean;
-	WriteStringToFile(Filename: string,Data: string,EncodingOptions: EJavascriptEncodingOptions): boolean;
-	GetDatasmithUserData(): DatasmithAssetUserData;
-	GetDatasmithUserDataKeysAndValuesForValue(StringToMatch: string,OutKeys?: string[],OutValues?: string[]): {OutKeys: string[], OutValues: string[]};
-	GetDatasmithUserDataValueForKey(Key: string): string;
-	RedirectVislog(DestinationOwner: UObject): void;
-	Conv_ObjectToText(): string;
-	Conv_ObjectToSoftObjectReference(): UObject;
-	Conv_SoftObjectReferenceToObject(): UObject;
-	Conv_SoftObjectReferenceToString(): string;
-	CreateCopyForUndoBuffer(): void;
-	DoesImplementInterface(Interface: UnrealEngineClass): boolean;
-	EqualEqual_SoftObjectReference(B: UObject): boolean;
-	GetDisplayName(): string;
-	GetObjectName(): string;
-	GetPathName(): string;
-	GetPrimaryAssetIdFromObject(): PrimaryAssetId;
-	GetPrimaryAssetIdFromSoftObjectReference(): PrimaryAssetId;
-	IsValid(): boolean;
-	IsValidSoftObjectReference(): boolean;
-	K2_ClearTimer(FunctionName: string): void;
-	K2_GetTimerElapsedTime(FunctionName: string): number;
-	K2_GetTimerRemainingTime(FunctionName: string): number;
-	K2_IsTimerActive(FunctionName: string): boolean;
-	K2_IsTimerPaused(FunctionName: string): boolean;
-	K2_PauseTimer(FunctionName: string): void;
-	K2_SetTimer(FunctionName: string,Time: number,bLooping: boolean): TimerHandle;
-	K2_TimerExists(FunctionName: string): boolean;
-	K2_UnPauseTimer(FunctionName: string): void;
-	NotEqual_SoftObjectReference(B: UObject): boolean;
-	SetBoolPropertyByName(PropertyName: string,Value: boolean): void;
-	SetBytePropertyByName(PropertyName: string,Value: number): void;
-	SetClassPropertyByName(PropertyName: string,Value: UnrealEngineClass): void;
-	SetCollisionProfileNameProperty(PropertyName: string,Value: CollisionProfileName): void;
-	SetFloatPropertyByName(PropertyName: string,Value: number): void;
-	SetInterfacePropertyByName(PropertyName: string,Value: any): void;
-	SetIntPropertyByName(PropertyName: string,Value: number): void;
-	SetLinearColorPropertyByName(PropertyName: string,Value: LinearColor): void;
-	SetNamePropertyByName(PropertyName: string,Value: string): void;
-	SetObjectPropertyByName(PropertyName: string,Value: UObject): void;
-	SetRotatorPropertyByName(PropertyName: string,Value: Rotator): void;
-	SetSoftClassPropertyByName(PropertyName: string,Value: Class): void;
-	SetSoftObjectPropertyByName(PropertyName: string,Value: UObject): void;
-	SetStringPropertyByName(PropertyName: string,Value: string): void;
-	SetStructurePropertyByName(PropertyName: string,Value: GenericStruct): void;
-	SetTextPropertyByName(PropertyName: string,Value: string): void;
-	SetTransformPropertyByName(PropertyName: string,Value: Transform): void;
-	SetVectorPropertyByName(PropertyName: string,Value: Vector): void;
-	TransactObject(): void;
-	Conv_ObjectToString(): string;
-	EqualEqual_ObjectObject(B: UObject): boolean;
-	NotEqual_ObjectObject(B: UObject): boolean;
-	SelectObject(B: UObject,bSelectA: boolean): UObject;
-	SetArrayPropertyByName(PropertyName: string,Value: number[]): void;
-	GetObjectClass(): UnrealEngineClass;
-	SetSetPropertyByName(PropertyName: string,Value: any): void;
-	SetMapPropertyByName(PropertyName: string,Value: any): void;
-	static AddWhitelistedObject(InObject: UObject): void;
-	static BroadcastAssetCreated(NewAsset: UObject): void;
-	static MarkPackageDirty(InObject: UObject): boolean;
-	static ModifyObject(UObject: UObject,bAlwaysMarkDirty: boolean): void;
-	static OpenEditorForAsset(Asset: UObject): boolean;
-	static PostEditChange(InObject: UObject): void;
-	static DestroyUObject(UObject: UObject): void;
-	static CreateEnum(Outer: UObject,Name: string,DisplayNames: string[]): Enum;
-	static CreatePackage(Outer: UObject,PackageName: string): Package;
-	static Duplicate(UObject: UObject,Outer: UObject,Name: string): UObject;
-	static FindObjectWithOuter(Outer: UObject,ClassToLookFor: UnrealEngineClass,NameToLookFor: string): UObject;
-	static FindPackage(InOuter: UObject,PackageName: string): Package;
-	static GetArchetypePathName(UObject: UObject): string;
-	static GetDir(UObject: UObject,WhichDir: string): string;
-	static GetFields(UObject: UObject,bIncludeSuper: boolean): Field[];
-	static GetFileSize(UObject: UObject,Filename: string): number;
-	static GetName(UObject: UObject): string;
-	static GetObjectsWithOuter(Outer: UObject,Results?: UObject[],bIncludeNestedObjects?: boolean,ExclusionFlags?: number,ExclusionInternalFlags?: number): {Results: UObject[]};
-	static GetOuter(UObject: UObject): UObject;
-	static GetOutermost(UObject: UObject): UObject;
-	static HasAnyFlags(UObject: UObject,Flags: number): boolean;
-	static ReadDirectory(UObject: UObject,Directory: string,OutItems?: DirectoryItem[]): {OutItems: DirectoryItem[], $: boolean};
-	static ReadFile(UObject: UObject,Filename: string): boolean;
-	static ReadStringFromFile(UObject: UObject,Filename: string): string;
-	static SetObjectFlags(Obj: UObject,Flags: number): void;
-	static WriteFile(UObject: UObject,Filename: string): boolean;
-	static WriteStringToFile(UObject: UObject,Filename: string,Data: string,EncodingOptions: EJavascriptEncodingOptions): boolean;
-	static GetDatasmithUserData(UObject: UObject): DatasmithAssetUserData;
-	static GetDatasmithUserDataKeysAndValuesForValue(UObject: UObject,StringToMatch: string,OutKeys?: string[],OutValues?: string[]): {OutKeys: string[], OutValues: string[]};
-	static GetDatasmithUserDataValueForKey(UObject: UObject,Key: string): string;
-	static RedirectVislog(SourceOwner: UObject,DestinationOwner: UObject): void;
-	static Conv_ObjectToText(InObj: UObject): string;
-	static Conv_ObjectToSoftObjectReference(UObject: UObject): UObject;
-	static Conv_SoftObjectReferenceToObject(softobject: UObject): UObject;
-	static Conv_SoftObjectReferenceToString(SoftObjectReference: UObject): string;
-	static CreateCopyForUndoBuffer(ObjectToModify: UObject): void;
-	static DoesImplementInterface(TestObject: UObject,Interface: UnrealEngineClass): boolean;
-	static EqualEqual_SoftObjectReference(A: UObject,B: UObject): boolean;
-	static GetDisplayName(UObject: UObject): string;
-	static GetObjectName(UObject: UObject): string;
-	static GetPathName(UObject: UObject): string;
-	static GetPrimaryAssetIdFromObject(UObject: UObject): PrimaryAssetId;
-	static GetPrimaryAssetIdFromSoftObjectReference(SoftObjectReference: UObject): PrimaryAssetId;
-	static IsValid(UObject: UObject): boolean;
-	static IsValidSoftObjectReference(SoftObjectReference: UObject): boolean;
-	static K2_ClearTimer(UObject: UObject,FunctionName: string): void;
-	static K2_GetTimerElapsedTime(UObject: UObject,FunctionName: string): number;
-	static K2_GetTimerRemainingTime(UObject: UObject,FunctionName: string): number;
-	static K2_IsTimerActive(UObject: UObject,FunctionName: string): boolean;
-	static K2_IsTimerPaused(UObject: UObject,FunctionName: string): boolean;
-	static K2_PauseTimer(UObject: UObject,FunctionName: string): void;
-	static K2_SetTimer(UObject: UObject,FunctionName: string,Time: number,bLooping: boolean): TimerHandle;
-	static K2_TimerExists(UObject: UObject,FunctionName: string): boolean;
-	static K2_UnPauseTimer(UObject: UObject,FunctionName: string): void;
-	static NotEqual_SoftObjectReference(A: UObject,B: UObject): boolean;
-	static SetBoolPropertyByName(UObject: UObject,PropertyName: string,Value: boolean): void;
-	static SetBytePropertyByName(UObject: UObject,PropertyName: string,Value: number): void;
-	static SetClassPropertyByName(UObject: UObject,PropertyName: string,Value: UnrealEngineClass): void;
-	static SetCollisionProfileNameProperty(UObject: UObject,PropertyName: string,Value: CollisionProfileName): void;
-	static SetFloatPropertyByName(UObject: UObject,PropertyName: string,Value: number): void;
-	static SetInterfacePropertyByName(UObject: UObject,PropertyName: string,Value: any): void;
-	static SetIntPropertyByName(UObject: UObject,PropertyName: string,Value: number): void;
-	static SetLinearColorPropertyByName(UObject: UObject,PropertyName: string,Value: LinearColor): void;
-	static SetNamePropertyByName(UObject: UObject,PropertyName: string,Value: string): void;
-	static SetObjectPropertyByName(UObject: UObject,PropertyName: string,Value: UObject): void;
-	static SetRotatorPropertyByName(UObject: UObject,PropertyName: string,Value: Rotator): void;
-	static SetSoftClassPropertyByName(UObject: UObject,PropertyName: string,Value: Class): void;
-	static SetSoftObjectPropertyByName(UObject: UObject,PropertyName: string,Value: UObject): void;
-	static SetStringPropertyByName(UObject: UObject,PropertyName: string,Value: string): void;
-	static SetStructurePropertyByName(UObject: UObject,PropertyName: string,Value: GenericStruct): void;
-	static SetTextPropertyByName(UObject: UObject,PropertyName: string,Value: string): void;
-	static SetTransformPropertyByName(UObject: UObject,PropertyName: string,Value: Transform): void;
-	static SetVectorPropertyByName(UObject: UObject,PropertyName: string,Value: Vector): void;
-	static TransactObject(UObject: UObject): void;
-	static Conv_ObjectToString(InObj: UObject): string;
-	static EqualEqual_ObjectObject(A: UObject,B: UObject): boolean;
-	static NotEqual_ObjectObject(A: UObject,B: UObject): boolean;
-	static SelectObject(A: UObject,B: UObject,bSelectA: boolean): UObject;
-	static SetArrayPropertyByName(UObject: UObject,PropertyName: string,Value: number[]): void;
-	static GetObjectClass(UObject: UObject): UnrealEngineClass;
-	static SetSetPropertyByName(UObject: UObject,PropertyName: string,Value: any): void;
-	static SetMapPropertyByName(UObject: UObject,PropertyName: string,Value: any): void;
+declare class EnvQuery extends DataAsset { 
+	EdGraph: EdGraph;
+	QueryName: string;
+	Options: EnvQueryOption[];
+	static Load(ResourceName: string): EnvQuery;
+	static Find(Outer: UObject, ResourceName: string): EnvQuery;
+	static GetDefaultObject(): EnvQuery;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQuery;
+	static C(Other: UObject | any): EnvQuery;
+}
+
+declare class EnvQueryInstanceCache { 
+	Template: EnvQuery;
+	clone() : EnvQueryInstanceCache;
+	static C(Other: UObject | any): EnvQueryInstanceCache;
+}
+
+declare class EnvQueryContext extends UObject { 
+	static Load(ResourceName: string): EnvQueryContext;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryContext;
+	static GetDefaultObject(): EnvQueryContext;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryContext;
+	static C(Other: UObject | any): EnvQueryContext;
 }
 
-declare class GCObjectReferencer extends UObject { 
-	static Load(ResourceName: string): GCObjectReferencer;
-	static Find(Outer: UObject, ResourceName: string): GCObjectReferencer;
-	static GetDefaultObject(): GCObjectReferencer;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GCObjectReferencer;
-	static C(Other: UObject | any): GCObjectReferencer;
+declare type EEnvQueryStatus = 'Processing' | 'Success' | 'Failed' | 'Aborted' | 'OwnerLost' | 'MissingParam' | 'EEnvQueryStatus_MAX';
+declare var EEnvQueryStatus : { Processing:'Processing',Success:'Success',Failed:'Failed',Aborted:'Aborted',OwnerLost:'OwnerLost',MissingParam:'MissingParam',EEnvQueryStatus_MAX:'EEnvQueryStatus_MAX', };
+declare class EnvQueryInstanceBlueprintWrapper extends UObject { 
+	QueryID: number;
+	ItemType: UnrealEngineClass;
+	OptionIndex: number;
+	OnQueryFinishedEvent: UnrealEngineMulticastDelegate<(QueryInstance: EnvQueryInstanceBlueprintWrapper, QueryStatus: EEnvQueryStatus) => void>;
+	static Load(ResourceName: string): EnvQueryInstanceBlueprintWrapper;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryInstanceBlueprintWrapper;
+	static GetDefaultObject(): EnvQueryInstanceBlueprintWrapper;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryInstanceBlueprintWrapper;
+	SetNamedParam(ParamName: string,Value: number): void;
+	GetResultsAsLocations(): Vector[];
+	GetResultsAsActors(): Actor[];
+	GetQueryResultsAsLocations(ResultLocations?: Vector[]): {ResultLocations: Vector[], $: boolean};
+	GetQueryResultsAsActors(ResultActors?: Actor[]): {ResultActors: Actor[], $: boolean};
+	GetItemScore(ItemIndex: number): number;
+	static C(Other: UObject | any): EnvQueryInstanceBlueprintWrapper;
 }
 
-declare class TextBuffer extends UObject { 
-	static Load(ResourceName: string): TextBuffer;
-	static Find(Outer: UObject, ResourceName: string): TextBuffer;
-	static GetDefaultObject(): TextBuffer;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextBuffer;
-	static C(Other: UObject | any): TextBuffer;
+declare type EEnvQueryRunMode = 'SingleResult' | 'RandomBest5Pct' | 'RandomBest25Pct' | 'AllMatching' | 'EEnvQueryRunMode_MAX';
+declare var EEnvQueryRunMode : { SingleResult:'SingleResult',RandomBest5Pct:'RandomBest5Pct',RandomBest25Pct:'RandomBest25Pct',AllMatching:'AllMatching',EEnvQueryRunMode_MAX:'EEnvQueryRunMode_MAX', };
+declare class EnvQueryManager extends AISubsystem { 
+	InstanceCache: EnvQueryInstanceCache[];
+	LocalContexts: EnvQueryContext[];
+	GCShieldedWrappers: EnvQueryInstanceBlueprintWrapper[];
+	MaxAllowedTestingTime: number;
+	bTestQueriesUsingBreadth: boolean;
+	QueryCountWarningThreshold: number;
+	QueryCountWarningInterval: any;
+	static Load(ResourceName: string): EnvQueryManager;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryManager;
+	static GetDefaultObject(): EnvQueryManager;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryManager;
+	static RunEQSQuery(WorldContextObject: UObject,QueryTemplate: EnvQuery,Querier: UObject,RunMode: EEnvQueryRunMode,WrapperClass: UnrealEngineClass): EnvQueryInstanceBlueprintWrapper;
+	static C(Other: UObject | any): EnvQueryManager;
 }
 
-declare class ScriptStruct extends Struct { 
-	static Load(ResourceName: string): ScriptStruct;
-	static Find(Outer: UObject, ResourceName: string): ScriptStruct;
-	static GetDefaultObject(): ScriptStruct;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ScriptStruct;
-	static C(Other: UObject | any): ScriptStruct;
+declare type EPathFollowingResult = 'Success' | 'Blocked' | 'OffPath' | 'Aborted' | 'Skipped_DEPRECATED' | 'Invalid' | 'EPathFollowingResult_MAX';
+declare var EPathFollowingResult : { Success:'Success',Blocked:'Blocked',OffPath:'OffPath',Aborted:'Aborted',Skipped_DEPRECATED:'Skipped_DEPRECATED',Invalid:'Invalid',EPathFollowingResult_MAX:'EPathFollowingResult_MAX', };
+declare class AIRequestID { 
+	RequestID: any;
+	clone() : AIRequestID;
+	static C(Other: UObject | any): AIRequestID;
 }
 
-declare class DelegateFunction extends UFunction { 
-	static Load(ResourceName: string): DelegateFunction;
-	static Find(Outer: UObject, ResourceName: string): DelegateFunction;
-	static GetDefaultObject(): DelegateFunction;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DelegateFunction;
-	static C(Other: UObject | any): DelegateFunction;
+declare class AIAsyncTaskBlueprintProxy extends UObject { 
+	OnSuccess: UnrealEngineMulticastDelegate<(MovementResult: EPathFollowingResult) => void>;
+	OnFail: UnrealEngineMulticastDelegate<(MovementResult: EPathFollowingResult) => void>;
+	static Load(ResourceName: string): AIAsyncTaskBlueprintProxy;
+	static Find(Outer: UObject, ResourceName: string): AIAsyncTaskBlueprintProxy;
+	static GetDefaultObject(): AIAsyncTaskBlueprintProxy;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIAsyncTaskBlueprintProxy;
+	OnMoveCompleted(RequestID: AIRequestID,MovementResult: EPathFollowingResult): void;
+	static C(Other: UObject | any): AIAsyncTaskBlueprintProxy;
 }
 
-declare class DynamicClass extends Class { 
-	static Load(ResourceName: string): DynamicClass;
-	static Find(Outer: UObject, ResourceName: string): DynamicClass;
-	static GetDefaultObject(): DynamicClass;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DynamicClass;
-	static C(Other: UObject | any): DynamicClass;
+declare class AIHotSpotManager extends UObject { 
+	static Load(ResourceName: string): AIHotSpotManager;
+	static Find(Outer: UObject, ResourceName: string): AIHotSpotManager;
+	static GetDefaultObject(): AIHotSpotManager;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIHotSpotManager;
+	static C(Other: UObject | any): AIHotSpotManager;
+}
+
+declare class NavLocalGridManager extends UObject { 
+	static Load(ResourceName: string): NavLocalGridManager;
+	static Find(Outer: UObject, ResourceName: string): NavLocalGridManager;
+	static GetDefaultObject(): NavLocalGridManager;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLocalGridManager;
+	static SetLocalNavigationGridDensity(WorldContextObject: UObject,CellSize: number): boolean;
+	static RemoveLocalNavigationGrid(WorldContextObject: UObject,GridId: number,bRebuildGrids: boolean): void;
+	static FindLocalNavigationGridPath(WorldContextObject: UObject,Start: Vector,End: Vector,PathPoints?: Vector[]): {PathPoints: Vector[], $: boolean};
+	static AddLocalNavigationGridForPoints(WorldContextObject: UObject,Locations: Vector[],Radius2D: number,Height: number,bRebuildGrids: boolean): number;
+	static AddLocalNavigationGridForPoint(WorldContextObject: UObject,Location: Vector,Radius2D: number,Height: number,bRebuildGrids: boolean): number;
+	static AddLocalNavigationGridForCapsule(WorldContextObject: UObject,Location: Vector,CapsuleRadius: number,CapsuleHalfHeight: number,Radius2D: number,Height: number,bRebuildGrids: boolean): number;
+	static AddLocalNavigationGridForBox(WorldContextObject: UObject,Location: Vector,Extent: Vector,Rotation: Rotator,Radius2D: number,Height: number,bRebuildGrids: boolean): number;
+	static C(Other: UObject | any): NavLocalGridManager;
+}
+
+declare class AISystem extends AISystemBase { 
+	PerceptionSystemClassName: SoftClassPath;
+	HotSpotManagerClassName: SoftClassPath;
+	AcceptanceRadius: number;
+	PathfollowingRegularPathPointAcceptanceRadius: number;
+	PathfollowingNavLinkAcceptanceRadius: number;
+	bFinishMoveOnGoalOverlap: boolean;
+	bAcceptPartialPaths: boolean;
+	bAllowStrafing: boolean;
+	bEnableBTAITasks: boolean;
+	bAllowControllersAsEQSQuerier: boolean;
+	bEnableDebuggerPlugin: boolean;
+	DefaultSightCollisionChannel: ECollisionChannel;
+	BehaviorTreeManager: BehaviorTreeManager;
+	EnvironmentQueryManager: EnvQueryManager;
+	PerceptionSystem: AIPerceptionSystem;
+	AllProxyObjects: AIAsyncTaskBlueprintProxy[];
+	HotSpotManager: AIHotSpotManager;
+	NavLocalGrids: NavLocalGridManager;
+	static Load(ResourceName: string): AISystem;
+	static Find(Outer: UObject, ResourceName: string): AISystem;
+	static GetDefaultObject(): AISystem;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISystem;
+	AILoggingVerbose(): void;
+	AIIgnorePlayers(): void;
+	static C(Other: UObject | any): AISystem;
+}
+
+declare class AISubsystem extends UObject { 
+	AISystem: AISystem;
+	static Load(ResourceName: string): AISubsystem;
+	static Find(Outer: UObject, ResourceName: string): AISubsystem;
+	static GetDefaultObject(): AISubsystem;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISubsystem;
+	static C(Other: UObject | any): AISubsystem;
+}
+
+declare class AISenseEvent extends UObject { 
+	static Load(ResourceName: string): AISenseEvent;
+	static Find(Outer: UObject, ResourceName: string): AISenseEvent;
+	static GetDefaultObject(): AISenseEvent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseEvent;
+	static C(Other: UObject | any): AISenseEvent;
+}
+
+declare class AIStimulus { 
+	Age: number;
+	ExpirationAge: number;
+	Strength: number;
+	StimulusLocation: Vector;
+	ReceiverLocation: Vector;
+	Tag: string;
+	bSuccessfullySensed: boolean;
+	clone() : AIStimulus;
+	static C(Other: UObject | any): AIStimulus;
+}
+
+declare class AIPerceptionSystem extends AISubsystem { 
+	Senses: AISense[];
+	PerceptionAgingRate: number;
+	static Load(ResourceName: string): AIPerceptionSystem;
+	static Find(Outer: UObject, ResourceName: string): AIPerceptionSystem;
+	static GetDefaultObject(): AIPerceptionSystem;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIPerceptionSystem;
+	static ReportPerceptionEvent(WorldContextObject: UObject,PerceptionEvent: AISenseEvent): void;
+	ReportEvent(PerceptionEvent: AISenseEvent): void;
+	static RegisterPerceptionStimuliSource(WorldContextObject: UObject,Sense: UnrealEngineClass,Target: Actor): boolean;
+	OnPerceptionStimuliSourceEndPlay(Actor: Actor,EndPlayReason: EEndPlayReason): void;
+	static GetSenseClassForStimulus(WorldContextObject: UObject,Stimulus: AIStimulus): UnrealEngineClass;
+	static C(Other: UObject | any): AIPerceptionSystem;
+}
+
+declare class AISense extends UObject { 
+	DefaultExpirationAge: number;
+	NotifyType: EAISenseNotifyType;
+	bWantsNewPawnNotification: boolean;
+	bAutoRegisterAllPawnsAsSources: boolean;
+	PerceptionSystemInstance: AIPerceptionSystem;
+	static Load(ResourceName: string): AISense;
+	static Find(Outer: UObject, ResourceName: string): AISense;
+	static GetDefaultObject(): AISense;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense;
+	static C(Other: UObject | any): AISense;
+}
+
+declare class ActorPerceptionBlueprintInfo { 
+	Target: Actor;
+	LastSensedStimuli: AIStimulus[];
+	bIsHostile: boolean;
+	clone() : ActorPerceptionBlueprintInfo;
+	static C(Other: UObject | any): ActorPerceptionBlueprintInfo;
+}
+
+declare class AIPerceptionComponent extends ActorComponent { 
+	SensesConfig: AISenseConfig[];
+	DominantSense: UnrealEngineClass;
+	AIOwner: AIController;
+	OnPerceptionUpdated: UnrealEngineMulticastDelegate<(UpdatedActors: Actor[]) => void>;
+	OnTargetPerceptionUpdated: UnrealEngineMulticastDelegate<(Actor: Actor, Stimulus: AIStimulus) => void>;
+	static Load(ResourceName: string): AIPerceptionComponent;
+	static Find(Outer: UObject, ResourceName: string): AIPerceptionComponent;
+	static GetDefaultObject(): AIPerceptionComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIPerceptionComponent;
+	SetSenseEnabled(SenseClass: UnrealEngineClass,bEnable: boolean): void;
+	RequestStimuliListenerUpdate(): void;
+	OnOwnerEndPlay(Actor: Actor,EndPlayReason: EEndPlayReason): void;
+	GetPerceivedHostileActors(OutActors?: Actor[]): {OutActors: Actor[]};
+	GetPerceivedActors(SenseToUse: UnrealEngineClass,OutActors?: Actor[]): {OutActors: Actor[]};
+	GetKnownPerceivedActors(SenseToUse: UnrealEngineClass,OutActors?: Actor[]): {OutActors: Actor[]};
+	GetCurrentlyPerceivedActors(SenseToUse: UnrealEngineClass,OutActors?: Actor[]): {OutActors: Actor[]};
+	GetActorsPerception(Actor: Actor,Info?: ActorPerceptionBlueprintInfo): {Info: ActorPerceptionBlueprintInfo, $: boolean};
+	static C(Other: UObject | any): AIPerceptionComponent;
+}
+
+declare type EAIRequestPriority = 'SoftScript' | 'Logic' | 'HardScript' | 'Reaction' | 'Ultimate' | 'MAX';
+declare var EAIRequestPriority : { SoftScript:'SoftScript',Logic:'Logic',HardScript:'HardScript',Reaction:'Reaction',Ultimate:'Ultimate',MAX:'MAX', };
+declare type EPawnActionResult = 'NotStarted' | 'InProgress' | 'Success' | 'Failed' | 'Aborted' | 'EPawnActionResult_MAX';
+declare var EPawnActionResult : { NotStarted:'NotStarted',InProgress:'InProgress',Success:'Success',Failed:'Failed',Aborted:'Aborted',EPawnActionResult_MAX:'EPawnActionResult_MAX', };
+declare class PawnAction extends UObject { 
+	ChildAction: PawnAction;
+	ParentAction: PawnAction;
+	OwnerComponent: PawnActionsComponent;
+	Instigator: UObject;
+	BrainComp: BrainComponent;
+	bAllowNewSameClassInstance: boolean;
+	bReplaceActiveSameClassInstance: boolean;
+	bShouldPauseMovement: boolean;
+	bAlwaysNotifyOnFinished: boolean;
+	static Load(ResourceName: string): PawnAction;
+	static Find(Outer: UObject, ResourceName: string): PawnAction;
+	static GetDefaultObject(): PawnAction;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnAction;
+	GetActionPriority(): EAIRequestPriority;
+	Finish(WithResult: EPawnActionResult): void;
+	static CreateActionInstance(WorldContextObject: UObject,ActionClass: UnrealEngineClass): PawnAction;
+	static C(Other: UObject | any): PawnAction;
+}
+
+declare class PawnActionStack { 
+	TopAction: PawnAction;
+	clone() : PawnActionStack;
+	static C(Other: UObject | any): PawnActionStack;
+}
+
+declare class PawnActionEvent { 
+	Action: PawnAction;
+	clone() : PawnActionEvent;
+	static C(Other: UObject | any): PawnActionEvent;
+}
+
+declare type EPawnActionAbortState = 'NeverStarted' | 'NotBeingAborted' | 'MarkPendingAbort' | 'LatentAbortInProgress' | 'AbortDone' | 'MAX';
+declare var EPawnActionAbortState : { NeverStarted:'NeverStarted',NotBeingAborted:'NotBeingAborted',MarkPendingAbort:'MarkPendingAbort',LatentAbortInProgress:'LatentAbortInProgress',AbortDone:'AbortDone',MAX:'MAX', };
+declare class PawnActionsComponent extends ActorComponent { 
+	ControlledPawn: Pawn;
+	ActionStacks: PawnActionStack[];
+	ActionEvents: PawnActionEvent[];
+	CurrentAction: PawnAction;
+	static Load(ResourceName: string): PawnActionsComponent;
+	static Find(Outer: UObject, ResourceName: string): PawnActionsComponent;
+	static GetDefaultObject(): PawnActionsComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnActionsComponent;
+	K2_PushAction(NewAction: PawnAction,Priority: EAIRequestPriority,Instigator: UObject): boolean;
+	static K2_PerformAction(Pawn: Pawn,Action: PawnAction,Priority: EAIRequestPriority): boolean;
+	K2_ForceAbortAction(ActionToAbort: PawnAction): EPawnActionAbortState;
+	K2_AbortAction(ActionToAbort: PawnAction): EPawnActionAbortState;
+	static C(Other: UObject | any): PawnActionsComponent;
 }
 
-declare class EnumProperty extends Property { 
-	static Load(ResourceName: string): EnumProperty;
-	static Find(Outer: UObject, ResourceName: string): EnumProperty;
-	static GetDefaultObject(): EnumProperty;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnumProperty;
-	static C(Other: UObject | any): EnumProperty;
+declare type ETaskResourceOverlapPolicy = 'StartOnTop' | 'StartAtEnd' | 'ETaskResourceOverlapPolicy_MAX';
+declare var ETaskResourceOverlapPolicy : { StartOnTop:'StartOnTop',StartAtEnd:'StartAtEnd',ETaskResourceOverlapPolicy_MAX:'ETaskResourceOverlapPolicy_MAX', };
+declare class GameplayTask extends UObject { 
+	InstanceName: string;
+	ResourceOverlapPolicy: ETaskResourceOverlapPolicy;
+	ChildTask: GameplayTask;
+	static Load(ResourceName: string): GameplayTask;
+	static Find(Outer: UObject, ResourceName: string): GameplayTask;
+	static GetDefaultObject(): GameplayTask;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTask;
+	ReadyForActivation(): void;
+	EndTask(): void;
+	static C(Other: UObject | any): GameplayTask;
 }
 
-declare class LinkerPlaceholderClass extends Class { 
-	static Load(ResourceName: string): LinkerPlaceholderClass;
-	static Find(Outer: UObject, ResourceName: string): LinkerPlaceholderClass;
-	static GetDefaultObject(): LinkerPlaceholderClass;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LinkerPlaceholderClass;
-	static C(Other: UObject | any): LinkerPlaceholderClass;
+declare class GameplayResourceSet { 
+	clone() : GameplayResourceSet;
+	static C(Other: UObject | any): GameplayResourceSet;
 }
 
-declare class LinkerPlaceholderExportObject extends UObject { 
-	static Load(ResourceName: string): LinkerPlaceholderExportObject;
-	static Find(Outer: UObject, ResourceName: string): LinkerPlaceholderExportObject;
-	static GetDefaultObject(): LinkerPlaceholderExportObject;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LinkerPlaceholderExportObject;
-	static C(Other: UObject | any): LinkerPlaceholderExportObject;
+declare class GameplayTasksComponent extends ActorComponent { 
+	bIsNetDirty: boolean;
+	SimulatedTasks: GameplayTask[];
+	TaskPriorityQueue: GameplayTask[];
+	TickingTasks: GameplayTask[];
+	KnownTasks: GameplayTask[];
+	OnClaimedResourcesChange: UnrealEngineMulticastDelegate<(NewlyClaimed: GameplayResourceSet, FreshlyReleased: GameplayResourceSet) => void>;
+	static Load(ResourceName: string): GameplayTasksComponent;
+	static Find(Outer: UObject, ResourceName: string): GameplayTasksComponent;
+	static GetDefaultObject(): GameplayTasksComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTasksComponent;
+	OnRep_SimulatedTasks(): void;
+	static C(Other: UObject | any): GameplayTasksComponent;
 }
 
-declare class LinkerPlaceholderFunction extends UFunction { 
-	static Load(ResourceName: string): LinkerPlaceholderFunction;
-	static Find(Outer: UObject, ResourceName: string): LinkerPlaceholderFunction;
-	static GetDefaultObject(): LinkerPlaceholderFunction;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LinkerPlaceholderFunction;
-	static C(Other: UObject | any): LinkerPlaceholderFunction;
+declare class NavAgentSelector { 
+	bSupportsAgent0: boolean;
+	bSupportsAgent1: boolean;
+	bSupportsAgent2: boolean;
+	bSupportsAgent3: boolean;
+	bSupportsAgent4: boolean;
+	bSupportsAgent5: boolean;
+	bSupportsAgent6: boolean;
+	bSupportsAgent7: boolean;
+	bSupportsAgent8: boolean;
+	bSupportsAgent9: boolean;
+	bSupportsAgent10: boolean;
+	bSupportsAgent11: boolean;
+	bSupportsAgent12: boolean;
+	bSupportsAgent13: boolean;
+	bSupportsAgent14: boolean;
+	bSupportsAgent15: boolean;
+	clone() : NavAgentSelector;
+	static C(Other: UObject | any): NavAgentSelector;
 }
 
-declare class MetaData extends UObject { 
-	static Load(ResourceName: string): MetaData;
-	static Find(Outer: UObject, ResourceName: string): MetaData;
-	static GetDefaultObject(): MetaData;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MetaData;
-	static C(Other: UObject | any): MetaData;
+declare class NavArea extends NavAreaBase { 
+	DefaultCost: number;
+	FixedAreaEnteringCost: number;
+	DrawColor: Color;
+	SupportedAgents: NavAgentSelector;
+	bSupportsAgent0: boolean;
+	bSupportsAgent1: boolean;
+	bSupportsAgent2: boolean;
+	bSupportsAgent3: boolean;
+	bSupportsAgent4: boolean;
+	bSupportsAgent5: boolean;
+	bSupportsAgent6: boolean;
+	bSupportsAgent7: boolean;
+	bSupportsAgent8: boolean;
+	bSupportsAgent9: boolean;
+	bSupportsAgent10: boolean;
+	bSupportsAgent11: boolean;
+	bSupportsAgent12: boolean;
+	bSupportsAgent13: boolean;
+	bSupportsAgent14: boolean;
+	bSupportsAgent15: boolean;
+	static Load(ResourceName: string): NavArea;
+	static Find(Outer: UObject, ResourceName: string): NavArea;
+	static GetDefaultObject(): NavArea;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavArea;
+	static C(Other: UObject | any): NavArea;
 }
 
-declare class ObjectRedirector extends UObject { 
-	static Load(ResourceName: string): ObjectRedirector;
-	static Find(Outer: UObject, ResourceName: string): ObjectRedirector;
-	static GetDefaultObject(): ObjectRedirector;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectRedirector;
-	static C(Other: UObject | any): ObjectRedirector;
+declare class NavigationFilterArea { 
+	AreaClass: UnrealEngineClass;
+	TravelCostOverride: number;
+	EnteringCostOverride: number;
+	bIsExcluded: boolean;
+	bOverrideTravelCost: boolean;
+	bOverrideEnteringCost: boolean;
+	clone() : NavigationFilterArea;
+	static C(Other: UObject | any): NavigationFilterArea;
 }
 
-declare class ArrayProperty extends Property { 
-	static Load(ResourceName: string): ArrayProperty;
-	static Find(Outer: UObject, ResourceName: string): ArrayProperty;
-	static GetDefaultObject(): ArrayProperty;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ArrayProperty;
-	static C(Other: UObject | any): ArrayProperty;
+declare class NavigationFilterFlags { 
+	bNavFlag0: boolean;
+	bNavFlag1: boolean;
+	bNavFlag2: boolean;
+	bNavFlag3: boolean;
+	bNavFlag4: boolean;
+	bNavFlag5: boolean;
+	bNavFlag6: boolean;
+	bNavFlag7: boolean;
+	bNavFlag8: boolean;
+	bNavFlag9: boolean;
+	bNavFlag10: boolean;
+	bNavFlag11: boolean;
+	bNavFlag12: boolean;
+	bNavFlag13: boolean;
+	bNavFlag14: boolean;
+	bNavFlag15: boolean;
+	clone() : NavigationFilterFlags;
+	static C(Other: UObject | any): NavigationFilterFlags;
 }
 
-declare class ObjectPropertyBase extends Property { 
-	static Load(ResourceName: string): ObjectPropertyBase;
-	static Find(Outer: UObject, ResourceName: string): ObjectPropertyBase;
-	static GetDefaultObject(): ObjectPropertyBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectPropertyBase;
-	static C(Other: UObject | any): ObjectPropertyBase;
+declare class NavigationQueryFilter extends UObject { 
+	Areas: NavigationFilterArea[];
+	IncludeFlags: NavigationFilterFlags;
+	ExcludeFlags: NavigationFilterFlags;
+	static Load(ResourceName: string): NavigationQueryFilter;
+	static Find(Outer: UObject, ResourceName: string): NavigationQueryFilter;
+	static GetDefaultObject(): NavigationQueryFilter;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationQueryFilter;
+	static C(Other: UObject | any): NavigationQueryFilter;
 }
 
-declare class BoolProperty extends Property { 
-	static Load(ResourceName: string): BoolProperty;
-	static Find(Outer: UObject, ResourceName: string): BoolProperty;
-	static GetDefaultObject(): BoolProperty;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BoolProperty;
-	static C(Other: UObject | any): BoolProperty;
+declare class GameplayTaskResource extends UObject { 
+	ManualResourceID: number;
+	AutoResourceID: any;
+	bManuallySetID: boolean;
+	static Load(ResourceName: string): GameplayTaskResource;
+	static Find(Outer: UObject, ResourceName: string): GameplayTaskResource;
+	static GetDefaultObject(): GameplayTaskResource;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTaskResource;
+	static C(Other: UObject | any): GameplayTaskResource;
 }
 
-declare class NumericProperty extends Property { 
-	static Load(ResourceName: string): NumericProperty;
-	static Find(Outer: UObject, ResourceName: string): NumericProperty;
-	static GetDefaultObject(): NumericProperty;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NumericProperty;
-	static C(Other: UObject | any): NumericProperty;
+declare type EPathFollowingRequestResult = 'Failed' | 'AlreadyAtGoal' | 'RequestSuccessful' | 'EPathFollowingRequestResult_MAX';
+declare var EPathFollowingRequestResult : { Failed:'Failed',AlreadyAtGoal:'AlreadyAtGoal',RequestSuccessful:'RequestSuccessful',EPathFollowingRequestResult_MAX:'EPathFollowingRequestResult_MAX', };
+declare type EPathFollowingStatus = 'Idle' | 'Waiting' | 'Paused' | 'Moving' | 'EPathFollowingStatus_MAX';
+declare var EPathFollowingStatus : { Idle:'Idle',Waiting:'Waiting',Paused:'Paused',Moving:'Moving',EPathFollowingStatus_MAX:'EPathFollowingStatus_MAX', };
+declare class AIController extends Controller { 
+	bStopAILogicOnUnposses: boolean;
+	bLOSflag: boolean;
+	bSkipExtraLOSChecks: boolean;
+	bAllowStrafe: boolean;
+	bWantsPlayerState: boolean;
+	bSetControlRotationFromPawnOrientation: boolean;
+	PathFollowingComponent: PathFollowingComponent;
+	BrainComponent: BrainComponent;
+	PerceptionComponent: AIPerceptionComponent;
+	ActionsComp: PawnActionsComponent;
+	Blackboard: BlackboardComponent;
+	CachedGameplayTasksComponent: GameplayTasksComponent;
+	DefaultNavigationFilterClass: UnrealEngineClass;
+	ReceiveMoveCompleted: UnrealEngineMulticastDelegate<(RequestID: AIRequestID, Result: EPathFollowingResult) => void>;
+	static GetDefaultObject(): AIController;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIController;
+	UseBlackboard(BlackboardAsset: BlackboardData,BlackboardComponent?: BlackboardComponent): {BlackboardComponent: BlackboardComponent, $: boolean};
+	UnclaimTaskResource(ResourceClass: UnrealEngineClass): void;
+	SetPathFollowingComponent(NewPFComponent: PathFollowingComponent): void;
+	SetMoveBlockDetection(bEnable: boolean): void;
+	RunBehaviorTree(BTAsset: BehaviorTree): boolean;
+	OnUsingBlackBoard(BlackboardComp: BlackboardComponent,BlackboardAsset: BlackboardData): void;
+	OnGameplayTaskResourcesClaimed(NewlyClaimed: GameplayResourceSet,FreshlyReleased: GameplayResourceSet): void;
+	MoveToLocation(Dest: Vector,AcceptanceRadius: number,bStopOnOverlap: boolean,bUsePathfinding: boolean,bProjectDestinationToNavigation: boolean,bCanStrafe: boolean,FilterClass: UnrealEngineClass,bAllowPartialPath: boolean): EPathFollowingRequestResult;
+	MoveToActor(Goal: Actor,AcceptanceRadius: number,bStopOnOverlap: boolean,bUsePathfinding: boolean,bCanStrafe: boolean,FilterClass: UnrealEngineClass,bAllowPartialPath: boolean): EPathFollowingRequestResult;
+	K2_SetFocus(NewFocus: Actor): void;
+	K2_SetFocalPoint(FP: Vector): void;
+	K2_ClearFocus(): void;
+	HasPartialPath(): boolean;
+	GetPathFollowingComponent(): PathFollowingComponent;
+	GetMoveStatus(): EPathFollowingStatus;
+	GetImmediateMoveDestination(): Vector;
+	GetFocusActor(): Actor;
+	GetFocalPointOnActor(Actor: Actor): Vector;
+	GetFocalPoint(): Vector;
+	GetAIPerceptionComponent(): AIPerceptionComponent;
+	ClaimTaskResource(ResourceClass: UnrealEngineClass): void;
+	static C(Other: UObject | any): AIController;
 }
 
-declare class ByteProperty extends NumericProperty { 
-	static Load(ResourceName: string): ByteProperty;
-	static Find(Outer: UObject, ResourceName: string): ByteProperty;
-	static GetDefaultObject(): ByteProperty;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ByteProperty;
-	static C(Other: UObject | any): ByteProperty;
+declare class XRDeviceId { 
+	SystemName: string;
+	DeviceID: number;
+	clone() : XRDeviceId;
+	static C(Other: UObject | any): XRDeviceId;
+	GetDevicePose(bIsTracked?: boolean,Orientation?: Rotator,bHasPositionalTracking?: boolean,Position?: Vector): {bIsTracked: boolean, Orientation: Rotator, bHasPositionalTracking: boolean, Position: Vector};
+	IsDeviceTracking(): boolean;
+	static GetDevicePose(XRDeviceId: XRDeviceId,bIsTracked?: boolean,Orientation?: Rotator,bHasPositionalTracking?: boolean,Position?: Vector): {bIsTracked: boolean, Orientation: Rotator, bHasPositionalTracking: boolean, Position: Vector};
+	static IsDeviceTracking(XRDeviceId: XRDeviceId): boolean;
 }
 
-declare class ObjectProperty extends ObjectPropertyBase { 
-	static Load(ResourceName: string): ObjectProperty;
-	static Find(Outer: UObject, ResourceName: string): ObjectProperty;
-	static GetDefaultObject(): ObjectProperty;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectProperty;
-	static C(Other: UObject | any): ObjectProperty;
+declare class Actor extends UObject { 
+	PrimaryActorTick: ActorTickFunction;
+	bHidden: boolean;
+	bNetTemporary: boolean;
+	bNetStartup: boolean;
+	bOnlyRelevantToOwner: boolean;
+	bAlwaysRelevant: boolean;
+	bReplicateMovement: boolean;
+	bTearOff: boolean;
+	bExchangedRoles: boolean;
+	bNetLoadOnClient: boolean;
+	bNetUseOwnerRelevancy: boolean;
+	bRelevantForNetworkReplays: boolean;
+	bRelevantForLevelBounds: boolean;
+	bReplayRewindable: boolean;
+	bAllowTickBeforeBeginPlay: boolean;
+	bAutoDestroyWhenFinished: boolean;
+	bBlockInput: boolean;
+	bCanBeDamaged: boolean;
+	bCollideWhenPlacing: boolean;
+	bFindCameraComponentWhenViewTarget: boolean;
+	bGenerateOverlapEventsDuringLevelStreaming: boolean;
+	bIgnoresOriginShifting: boolean;
+	bEnableAutoLODGeneration: boolean;
+	bIsEditorOnlyActor: boolean;
+	bActorSeamlessTraveled: boolean;
+	bReplicates: boolean;
+	bCanBeInCluster: boolean;
+	bAllowReceiveTickEventOnDedicatedServer: boolean;
+	bActorEnableCollision: boolean;
+	bActorIsBeingDestroyed: boolean;
+	RemoteRole: ENetRole;
+	ReplicatedMovement: RepMovement;
+	InitialLifeSpan: number;
+	CustomTimeDilation: number;
+	AttachmentReplication: RepAttachment;
+	Owner: Actor;
+	NetDriverName: string;
+	Role: ENetRole;
+	NetDormancy: ENetDormancy;
+	SpawnCollisionHandlingMethod: ESpawnActorCollisionHandlingMethod;
+	AutoReceiveInput: EAutoReceiveInput;
+	InputPriority: number;
+	InputComponent: InputComponent;
+	NetCullDistanceSquared: number;
+	NetTag: number;
+	NetUpdateFrequency: number;
+	MinNetUpdateFrequency: number;
+	NetPriority: number;
+	Instigator: Pawn;
+	Children: Actor[];
+	RootComponent: SceneComponent;
+	PivotOffset: Vector;
+	ControllingMatineeActors: MatineeActor[];
+	Layers: string[];
+	ParentComponentActor: any;
+	ParentComponent: any;
+	GroupActor: Actor;
+	SpriteScale: number;
+	HiddenEditorViews: any;
+	ActorLabel: string;
+	FolderPath: string;
+	bHiddenEd: boolean;
+	bIsEditorPreviewActor: boolean;
+	bHiddenEdLayer: boolean;
+	bHiddenEdLevel: boolean;
+	bLockLocation: boolean;
+	bActorLabelEditable: boolean;
+	bEditable: boolean;
+	bListedInSceneOutliner: boolean;
+	bOptimizeBPComponentData: boolean;
+	bHiddenEdTemporary: boolean;
+	Tags: string[];
+	OnTakeAnyDamage: UnrealEngineMulticastDelegate<(DamagedActor: Actor, Damage: number, DamageType: DamageType, InstigatedBy: Controller, DamageCauser: Actor) => void>;
+	OnTakePointDamage: UnrealEngineMulticastDelegate<(DamagedActor: Actor, Damage: number, InstigatedBy: Controller, HitLocation: Vector, FHitComponent: PrimitiveComponent, BoneName: string, ShotFromDirection: Vector, DamageType: DamageType, DamageCauser: Actor) => void>;
+	OnTakeRadialDamage: UnrealEngineMulticastDelegate<(DamagedActor: Actor, Damage: number, DamageType: DamageType, Origin: Vector, HitInfo: HitResult, InstigatedBy: Controller, DamageCauser: Actor) => void>;
+	OnActorBeginOverlap: UnrealEngineMulticastDelegate<(OverlappedActor: Actor, OtherActor: Actor) => void>;
+	OnActorEndOverlap: UnrealEngineMulticastDelegate<(OverlappedActor: Actor, OtherActor: Actor) => void>;
+	OnBeginCursorOver: UnrealEngineMulticastDelegate<(TouchedActor: Actor) => void>;
+	OnEndCursorOver: UnrealEngineMulticastDelegate<(TouchedActor: Actor) => void>;
+	OnClicked: UnrealEngineMulticastDelegate<(TouchedActor: Actor, ButtonPressed: Key) => void>;
+	OnReleased: UnrealEngineMulticastDelegate<(TouchedActor: Actor, ButtonReleased: Key) => void>;
+	OnInputTouchBegin: UnrealEngineMulticastDelegate<(FingerIndex: ETouchIndex, TouchedActor: Actor) => void>;
+	OnInputTouchEnd: UnrealEngineMulticastDelegate<(FingerIndex: ETouchIndex, TouchedActor: Actor) => void>;
+	OnInputTouchEnter: UnrealEngineMulticastDelegate<(FingerIndex: ETouchIndex, TouchedActor: Actor) => void>;
+	OnInputTouchLeave: UnrealEngineMulticastDelegate<(FingerIndex: ETouchIndex, TouchedActor: Actor) => void>;
+	OnActorHit: UnrealEngineMulticastDelegate<(SelfActor: Actor, OtherActor: Actor, NormalImpulse: Vector, Hit: HitResult) => void>;
+	OnDestroyed: UnrealEngineMulticastDelegate<(DestroyedActor: Actor) => void>;
+	OnEndPlay: UnrealEngineMulticastDelegate<(Actor: Actor, EndPlayReason: EEndPlayReason) => void>;
+	InstanceComponents: ActorComponent[];
+	BlueprintCreatedComponents: ActorComponent[];
+	constructor(InWorld: World, Location?: Vector, Rotation?: Rotator);
+	static GetDefaultObject(): Actor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Actor;
+	WasRecentlyRendered(Tolerance: number): boolean;
+	UserConstructionScript(): void;
+	TearOff(): void;
+	SnapRootComponentTo(InParentActor: Actor,InSocketName: string): void;
+	SetTickGroup(NewTickGroup: ETickingGroup): void;
+	SetTickableWhenPaused(bTickableWhenPaused: boolean): void;
+	SetReplicates(bInReplicates: boolean): void;
+	SetReplicateMovement(bInReplicateMovement: boolean): void;
+	SetOwner(NewOwner: Actor): void;
+	SetNetDormancy(NewDormancy: ENetDormancy): void;
+	SetLifeSpan(InLifespan: number): void;
+	SetIsTemporarilyHiddenInEditor(bIsHidden: boolean): void;
+	SetFolderPath(NewFolderPath: string): void;
+	SetActorTickInterval(TickInterval: number): void;
+	SetActorTickEnabled(bEnabled: boolean): void;
+	SetActorScale3D(NewScale3D: Vector): void;
+	SetActorRelativeScale3D(NewRelativeScale: Vector): void;
+	SetActorLabel(NewActorLabel: string,bMarkDirty: boolean): void;
+	SetActorHiddenInGame(bNewHidden: boolean): void;
+	SetActorEnableCollision(bNewActorEnableCollision: boolean): void;
+	RemoveTickPrerequisiteComponent(PrerequisiteComponent: ActorComponent): void;
+	RemoveTickPrerequisiteActor(PrerequisiteActor: Actor): void;
+	ReceiveTick(DeltaSeconds: number): void;
+	ReceiveRadialDamage(DamageReceived: number,DamageType: DamageType,Origin: Vector,HitInfo: HitResult,InstigatedBy: Controller,DamageCauser: Actor): void;
+	ReceivePointDamage(Damage: number,DamageType: DamageType,HitLocation: Vector,HitNormal: Vector,HitComponent: PrimitiveComponent,BoneName: string,ShotFromDirection: Vector,InstigatedBy: Controller,DamageCauser: Actor,HitInfo: HitResult): void;
+	ReceiveHit(MyComp: PrimitiveComponent,Other: Actor,OtherComp: PrimitiveComponent,bSelfMoved: boolean,HitLocation: Vector,HitNormal: Vector,NormalImpulse: Vector,Hit: HitResult): void;
+	ReceiveEndPlay(EndPlayReason: EEndPlayReason): void;
+	ReceiveDestroyed(): void;
+	ReceiveBeginPlay(): void;
+	ReceiveAnyDamage(Damage: number,DamageType: DamageType,InstigatedBy: Controller,DamageCauser: Actor): void;
+	ReceiveActorOnReleased(ButtonReleased: Key): void;
+	ReceiveActorOnInputTouchLeave(FingerIndex: ETouchIndex): void;
+	ReceiveActorOnInputTouchEnter(FingerIndex: ETouchIndex): void;
+	ReceiveActorOnInputTouchEnd(FingerIndex: ETouchIndex): void;
+	ReceiveActorOnInputTouchBegin(FingerIndex: ETouchIndex): void;
+	ReceiveActorOnClicked(ButtonPressed: Key): void;
+	ReceiveActorEndOverlap(OtherActor: Actor): void;
+	ReceiveActorEndCursorOver(): void;
+	ReceiveActorBeginOverlap(OtherActor: Actor): void;
+	ReceiveActorBeginCursorOver(): void;
+	PrestreamTextures(Seconds: number,bEnableStreaming: boolean,CinematicTextureGroups: number): void;
+	OnRep_ReplicateMovement(): void;
+	OnRep_ReplicatedMovement(): void;
+	OnRep_Owner(): void;
+	OnRep_Instigator(): void;
+	OnRep_AttachmentReplication(): void;
+	MakeNoise(Loudness: number,NoiseInstigator: Pawn,NoiseLocation: Vector,MaxRange: number,Tag: string): void;
+	MakeMIDForMaterial(Parent: MaterialInterface): MaterialInstanceDynamic;
+	K2_TeleportTo(DestLocation: Vector,DestRotation: Rotator): boolean;
+	K2_SetActorTransform(NewTransform: Transform,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult, $: boolean};
+	K2_SetActorRotation(NewRotation: Rotator,bTeleportPhysics: boolean): boolean;
+	K2_SetActorRelativeTransform(NewRelativeTransform: Transform,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
+	K2_SetActorRelativeRotation(NewRelativeRotation: Rotator,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
+	K2_SetActorRelativeLocation(NewRelativeLocation: Vector,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
+	K2_SetActorLocationAndRotation(NewLocation: Vector,NewRotation: Rotator,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult, $: boolean};
+	K2_SetActorLocation(NewLocation: Vector,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult, $: boolean};
+	K2_OnReset(): void;
+	K2_OnEndViewTarget(PC: PlayerController): void;
+	K2_OnBecomeViewTarget(PC: PlayerController): void;
+	K2_GetRootComponent(): SceneComponent;
+	K2_GetActorRotation(): Rotator;
+	K2_GetActorLocation(): Vector;
+	K2_DetachFromActor(LocationRule: EDetachmentRule,RotationRule: EDetachmentRule,ScaleRule: EDetachmentRule): void;
+	K2_DestroyComponent(Component: ActorComponent): void;
+	K2_DestroyActor(): void;
+	K2_AttachToComponent(Parent: SceneComponent,SocketName: string,LocationRule: EAttachmentRule,RotationRule: EAttachmentRule,ScaleRule: EAttachmentRule,bWeldSimulatedBodies: boolean): void;
+	K2_AttachToActor(ParentActor: Actor,SocketName: string,LocationRule: EAttachmentRule,RotationRule: EAttachmentRule,ScaleRule: EAttachmentRule,bWeldSimulatedBodies: boolean): void;
+	K2_AttachRootComponentToActor(InParentActor: Actor,InSocketName: string,AttachLocationType: EAttachLocation,bWeldSimulatedBodies: boolean): void;
+	K2_AttachRootComponentTo(InParent: SceneComponent,InSocketName: string,AttachLocationType: EAttachLocation,bWeldSimulatedBodies: boolean): void;
+	K2_AddActorWorldTransform(DeltaTransform: Transform,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
+	K2_AddActorWorldRotation(DeltaRotation: Rotator,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
+	K2_AddActorWorldOffset(DeltaLocation: Vector,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
+	K2_AddActorLocalTransform(NewTransform: Transform,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
+	K2_AddActorLocalRotation(DeltaRotation: Rotator,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
+	K2_AddActorLocalOffset(DeltaLocation: Vector,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult};
+	IsTemporarilyHiddenInEditor(bIncludeParent: boolean): boolean;
+	IsSelectable(): boolean;
+	IsOverlappingActor(Other: Actor): boolean;
+	IsHiddenEdAtStartup(): boolean;
+	IsHiddenEd(): boolean;
+	IsEditable(): boolean;
+	IsChildActor(): boolean;
+	IsActorTickEnabled(): boolean;
+	IsActorBeingDestroyed(): boolean;
+	HasAuthority(): boolean;
+	GetVerticalDistanceTo(OtherActor: Actor): number;
+	GetVelocity(): Vector;
+	GetTransform(): Transform;
+	GetTickableWhenPaused(): boolean;
+	GetSquaredDistanceTo(OtherActor: Actor): number;
+	GetRemoteRole(): ENetRole;
+	GetParentComponent(): ChildActorComponent;
+	GetParentActor(): Actor;
+	GetOwner(): Actor;
+	GetOverlappingComponents(OverlappingComponents?: PrimitiveComponent[]): {OverlappingComponents: PrimitiveComponent[]};
+	GetOverlappingActors(OverlappingActors?: Actor[],ClassFilter?: UnrealEngineClass): {OverlappingActors: Actor[]};
+	GetLocalRole(): ENetRole;
+	GetLifeSpan(): number;
+	GetInstigatorController(): Controller;
+	GetInstigator(): Pawn;
+	GetInputVectorAxisValue(InputAxisKey: Key): Vector;
+	GetInputAxisValue(InputAxisName: string): number;
+	GetInputAxisKeyValue(InputAxisKey: Key): number;
+	GetHorizontalDotProductTo(OtherActor: Actor): number;
+	GetHorizontalDistanceTo(OtherActor: Actor): number;
+	GetGameTimeSinceCreation(): number;
+	GetFolderPath(): string;
+	GetDotProductTo(OtherActor: Actor): number;
+	GetDistanceTo(OtherActor: Actor): number;
+	GetComponentsByTag(ComponentClass: UnrealEngineClass,Tag: string): ActorComponent[];
+	GetComponentsByClass(ComponentClass: UnrealEngineClass): ActorComponent[];
+	GetComponentByClass(ComponentClass: UnrealEngineClass): ActorComponent;
+	GetAttachParentSocketName(): string;
+	GetAttachParentActor(): Actor;
+	GetAttachedActors(OutActors?: Actor[]): {OutActors: Actor[]};
+	GetAllChildActors(ChildActors?: Actor[],bIncludeDescendants?: boolean): {ChildActors: Actor[]};
+	GetActorUpVector(): Vector;
+	GetActorTimeDilation(): number;
+	GetActorTickInterval(): number;
+	GetActorScale3D(): Vector;
+	GetActorRightVector(): Vector;
+	GetActorRelativeScale3D(): Vector;
+	GetActorLabel(): string;
+	GetActorForwardVector(): Vector;
+	GetActorEyesViewPoint(OutLocation?: Vector,OutRotation?: Rotator): {OutLocation: Vector, OutRotation: Rotator};
+	GetActorEnableCollision(): boolean;
+	GetActorBounds(bOnlyCollidingComponents: boolean,Origin?: Vector,BoxExtent?: Vector): {Origin: Vector, BoxExtent: Vector};
+	ForceNetUpdate(): void;
+	FlushNetDormancy(): void;
+	EnableInput(PlayerController: PlayerController): void;
+	DisableInput(PlayerController: PlayerController): void;
+	DetachRootComponentFromParent(bMaintainWorldPosition: boolean): void;
+	AddTickPrerequisiteComponent(PrerequisiteComponent: ActorComponent): void;
+	AddTickPrerequisiteActor(PrerequisiteActor: Actor): void;
+	AddComponent(TemplateName: string,bManualAttachment: boolean,RelativeTransform: Transform,ComponentTemplateContext: UObject): ActorComponent;
+	ActorHasTag(Tag: string): boolean;
+	static C(Other: UObject | any): Actor;
+	ClearActorLabel(): void;
+	GetActorLabel(): string;
+	GetActorLocation(): Vector;
+	GetFolderPath(): string;
+	IsActorLabelEditable(): boolean;
+	SetActorLabel(NewActorLabel: string,bMarkDirty: boolean): void;
+	SetActorLocation(NewLocation: Vector,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult, $: boolean};
+	SetFolderPath(NewFolderPath: string): void;
+	SetFolderPath_Recursively(NewFolderPath: string): void;
+	SetIsTemporarilyHiddenInEditor(bIsHidden: boolean): void;
+	Actor_GetWorld(): World;
+	GetLastRenderTime(): number;
+	GetLevel(): Level;
+	IsPendingKill(): boolean;
+	ReregisterAllComponents(): void;
+	SetActorFlags(Flags: number): void;
+	SetRootComponent(Component: SceneComponent): void;
+	SetFocusActor(): void;
+	GetAIController(): AIController;
+	GetBlackboard(): BlackboardComponent;
+	GetActorBounds(Origin?: Vector,BoxExtent?: Vector): {Origin: Vector, BoxExtent: Vector};
+	ApplyDamage(BaseDamage: number,EventInstigator: Controller,DamageCauser: Actor,DamageTypeClass: UnrealEngineClass): number;
+	ApplyPointDamage(BaseDamage: number,HitFromDirection: Vector,HitInfo: HitResult,EventInstigator: Controller,DamageCauser: Actor,DamageTypeClass: UnrealEngineClass): number;
+	FinishSpawningActor(SpawnTransform: Transform): Actor;
+	AddDeviceVisualizationComponentBlocking(XRDeviceId: XRDeviceId,bManualAttachment: boolean,RelativeTransform: Transform): PrimitiveComponent;
+	AddNamedDeviceVisualizationComponentBlocking(SystemName: string,DeviceName: string,bManualAttachment: boolean,RelativeTransform: Transform,XRDeviceId?: XRDeviceId): {XRDeviceId: XRDeviceId, $: PrimitiveComponent};
+	static ClearActorLabel(Actor: Actor): void;
+	static GetActorLabel(Actor: Actor): string;
+	static GetActorLocation(Actor: Actor): Vector;
+	static GetFolderPath(Actor: Actor): string;
+	static IsActorLabelEditable(Actor: Actor): boolean;
+	static SetActorLabel(Actor: Actor,NewActorLabel: string,bMarkDirty: boolean): void;
+	static SetActorLocation(Actor: Actor,NewLocation: Vector,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult, $: boolean};
+	static SetFolderPath(Actor: Actor,NewFolderPath: string): void;
+	static SetFolderPath_Recursively(Actor: Actor,NewFolderPath: string): void;
+	static SetIsTemporarilyHiddenInEditor(Actor: Actor,bIsHidden: boolean): void;
+	static Actor_GetWorld(Actor: Actor): World;
+	static GetLastRenderTime(Actor: Actor): number;
+	static GetLevel(Actor: Actor): Level;
+	static IsPendingKill(InActor: Actor): boolean;
+	static ReregisterAllComponents(Actor: Actor): void;
+	static SetActorFlags(Actor: Actor,Flags: number): void;
+	static SetRootComponent(Actor: Actor,Component: SceneComponent): void;
+	static SetFocusActor(InFocusActor: Actor): void;
+	static GetAIController(ControlledActor: Actor): AIController;
+	static GetBlackboard(Target: Actor): BlackboardComponent;
+	static GetActorBounds(Actor: Actor,Origin?: Vector,BoxExtent?: Vector): {Origin: Vector, BoxExtent: Vector};
+	static ApplyDamage(DamagedActor: Actor,BaseDamage: number,EventInstigator: Controller,DamageCauser: Actor,DamageTypeClass: UnrealEngineClass): number;
+	static ApplyPointDamage(DamagedActor: Actor,BaseDamage: number,HitFromDirection: Vector,HitInfo: HitResult,EventInstigator: Controller,DamageCauser: Actor,DamageTypeClass: UnrealEngineClass): number;
+	static FinishSpawningActor(Actor: Actor,SpawnTransform: Transform): Actor;
+	static AddDeviceVisualizationComponentBlocking(Target: Actor,XRDeviceId: XRDeviceId,bManualAttachment: boolean,RelativeTransform: Transform): PrimitiveComponent;
+	static AddNamedDeviceVisualizationComponentBlocking(Target: Actor,SystemName: string,DeviceName: string,bManualAttachment: boolean,RelativeTransform: Transform,XRDeviceId?: XRDeviceId): {XRDeviceId: XRDeviceId, $: PrimitiveComponent};
 }
 
-declare class ClassProperty extends ObjectProperty { 
-	static Load(ResourceName: string): ClassProperty;
-	static Find(Outer: UObject, ResourceName: string): ClassProperty;
-	static GetDefaultObject(): ClassProperty;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClassProperty;
-	static C(Other: UObject | any): ClassProperty;
+declare class LineBatchComponent extends PrimitiveComponent { 
+	static Load(ResourceName: string): LineBatchComponent;
+	static Find(Outer: UObject, ResourceName: string): LineBatchComponent;
+	static GetDefaultObject(): LineBatchComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LineBatchComponent;
+	static C(Other: UObject | any): LineBatchComponent;
 }
 
-declare class DelegateProperty extends Property { 
-	static Load(ResourceName: string): DelegateProperty;
-	static Find(Outer: UObject, ResourceName: string): DelegateProperty;
-	static GetDefaultObject(): DelegateProperty;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DelegateProperty;
-	static C(Other: UObject | any): DelegateProperty;
+declare type EStreamingVolumeUsage = 'SVB_Loading' | 'SVB_LoadingAndVisibility' | 'SVB_VisibilityBlockingOnLoad' | 'SVB_BlockingOnLoad' | 'SVB_LoadingNotVisible' | 'SVB_MAX';
+declare var EStreamingVolumeUsage : { SVB_Loading:'SVB_Loading',SVB_LoadingAndVisibility:'SVB_LoadingAndVisibility',SVB_VisibilityBlockingOnLoad:'SVB_VisibilityBlockingOnLoad',SVB_BlockingOnLoad:'SVB_BlockingOnLoad',SVB_LoadingNotVisible:'SVB_LoadingNotVisible',SVB_MAX:'SVB_MAX', };
+declare class LevelStreamingVolume extends Volume { 
+	StreamingLevelNames: string[];
+	bEditorPreVisOnly: boolean;
+	bDisabled: boolean;
+	StreamingUsage: EStreamingVolumeUsage;
+	static GetDefaultObject(): LevelStreamingVolume;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelStreamingVolume;
+	static C(Other: UObject | any): LevelStreamingVolume;
 }
 
-declare class DoubleProperty extends NumericProperty { 
-	static Load(ResourceName: string): DoubleProperty;
-	static Find(Outer: UObject, ResourceName: string): DoubleProperty;
-	static GetDefaultObject(): DoubleProperty;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DoubleProperty;
-	static C(Other: UObject | any): DoubleProperty;
+declare class LevelStreaming extends UObject { 
+	PackageName: string;
+	WorldAsset: World;
+	PackageNameToLoad: string;
+	LODPackageNames: string[];
+	LevelTransform: Transform;
+	LevelLODIndex: number;
+	StreamingPriority: number;
+	bShouldBeVisibleInEditor: boolean;
+	bShouldBeVisible: boolean;
+	bShouldBeLoaded: boolean;
+	bLocked: boolean;
+	bIsStatic: boolean;
+	bShouldBlockOnLoad: boolean;
+	bShouldBlockOnUnload: boolean;
+	bDisableDistanceStreaming: boolean;
+	bDrawOnLevelStatusMap: boolean;
+	DrawColor: Color;
+	LevelColor: LinearColor;
+	EditorStreamingVolumes: LevelStreamingVolume[];
+	MinTimeBetweenVolumeUnloadRequests: number;
+	Keywords: string[];
+	OnLevelLoaded: UnrealEngineMulticastDelegate<() => void>;
+	OnLevelUnloaded: UnrealEngineMulticastDelegate<() => void>;
+	OnLevelShown: UnrealEngineMulticastDelegate<() => void>;
+	OnLevelHidden: UnrealEngineMulticastDelegate<() => void>;
+	LoadedLevel: Level;
+	PendingUnloadLevel: Level;
+	FolderPath: string;
+	static Load(ResourceName: string): LevelStreaming;
+	static Find(Outer: UObject, ResourceName: string): LevelStreaming;
+	static GetDefaultObject(): LevelStreaming;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelStreaming;
+	ShouldBeLoaded(): boolean;
+	SetShouldBeVisible(bInShouldBeVisible: boolean): void;
+	SetShouldBeLoaded(bInShouldBeLoaded: boolean): void;
+	SetPriority(NewPriority: number): void;
+	SetLevelLODIndex(LODIndex: number): void;
+	IsStreamingStatePending(): boolean;
+	IsLevelVisible(): boolean;
+	IsLevelLoaded(): boolean;
+	GetWorldAssetPackageFName(): string;
+	GetLoadedLevel(): Level;
+	GetLevelScriptActor(): LevelScriptActor;
+	CreateInstance(UniqueInstanceName: string): LevelStreaming;
+	static C(Other: UObject | any): LevelStreaming;
 }
 
-declare class FloatProperty extends NumericProperty { 
-	static Load(ResourceName: string): FloatProperty;
-	static Find(Outer: UObject, ResourceName: string): FloatProperty;
-	static GetDefaultObject(): FloatProperty;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FloatProperty;
-	static C(Other: UObject | any): FloatProperty;
+declare class LevelStreamingWrapper { 
+	StreamingLevel: LevelStreaming;
+	clone() : LevelStreamingWrapper;
+	static C(Other: UObject | any): LevelStreamingWrapper;
 }
 
-declare class IntProperty extends NumericProperty { 
-	static Load(ResourceName: string): IntProperty;
-	static Find(Outer: UObject, ResourceName: string): IntProperty;
-	static GetDefaultObject(): IntProperty;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): IntProperty;
-	static C(Other: UObject | any): IntProperty;
+declare class StreamingLevelsToConsider { 
+	StreamingLevels: LevelStreamingWrapper[];
+	clone() : StreamingLevelsToConsider;
+	static C(Other: UObject | any): StreamingLevelsToConsider;
 }
 
-declare class Int16Property extends NumericProperty { 
-	static Load(ResourceName: string): Int16Property;
-	static Find(Outer: UObject, ResourceName: string): Int16Property;
-	static GetDefaultObject(): Int16Property;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Int16Property;
-	static C(Other: UObject | any): Int16Property;
+declare class MulticastRecordOptions { 
+	FuncPathName: string;
+	bServerSkip: boolean;
+	bClientSkip: boolean;
+	clone() : MulticastRecordOptions;
+	static C(Other: UObject | any): MulticastRecordOptions;
 }
 
-declare class Int64Property extends NumericProperty { 
-	static Load(ResourceName: string): Int64Property;
-	static Find(Outer: UObject, ResourceName: string): Int64Property;
-	static GetDefaultObject(): Int64Property;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Int64Property;
-	static C(Other: UObject | any): Int64Property;
+declare class DemoNetDriver extends NetDriver { 
+	RollbackNetStartupActors: any;
+	CheckpointSaveMaxMSPerFrame: number;
+	MulticastRecordOptions: MulticastRecordOptions[];
+	bIsLocalReplay: boolean;
+	SpectatorControllers: PlayerController[];
+	static Load(ResourceName: string): DemoNetDriver;
+	static Find(Outer: UObject, ResourceName: string): DemoNetDriver;
+	static GetDefaultObject(): DemoNetDriver;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DemoNetDriver;
+	static C(Other: UObject | any): DemoNetDriver;
 }
 
-declare class Int8Property extends NumericProperty { 
-	static Load(ResourceName: string): Int8Property;
-	static Find(Outer: UObject, ResourceName: string): Int8Property;
-	static GetDefaultObject(): Int8Property;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Int8Property;
-	static C(Other: UObject | any): Int8Property;
+declare class ParticleEventManager extends Actor { 
+	static GetDefaultObject(): ParticleEventManager;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleEventManager;
+	static C(Other: UObject | any): ParticleEventManager;
 }
 
-declare class InterfaceProperty extends Property { 
-	static Load(ResourceName: string): InterfaceProperty;
-	static Find(Outer: UObject, ResourceName: string): InterfaceProperty;
-	static GetDefaultObject(): InterfaceProperty;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterfaceProperty;
-	static C(Other: UObject | any): InterfaceProperty;
+declare class NavigationSystemBase extends UObject { 
+	static Load(ResourceName: string): NavigationSystemBase;
+	static Find(Outer: UObject, ResourceName: string): NavigationSystemBase;
+	static GetDefaultObject(): NavigationSystemBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationSystemBase;
+	static C(Other: UObject | any): NavigationSystemBase;
 }
 
-declare class LazyObjectProperty extends ObjectPropertyBase { 
-	static Load(ResourceName: string): LazyObjectProperty;
-	static Find(Outer: UObject, ResourceName: string): LazyObjectProperty;
-	static GetDefaultObject(): LazyObjectProperty;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LazyObjectProperty;
-	static C(Other: UObject | any): LazyObjectProperty;
+declare class AvoidanceManager extends UObject { 
+	DefaultTimeToLive: number;
+	LockTimeAfterAvoid: number;
+	LockTimeAfterClean: number;
+	DeltaTimeToPredict: number;
+	ArtificialRadiusExpansion: number;
+	TestHeightDifference: number;
+	HeightCheckMargin: number;
+	static Load(ResourceName: string): AvoidanceManager;
+	static Find(Outer: UObject, ResourceName: string): AvoidanceManager;
+	static GetDefaultObject(): AvoidanceManager;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AvoidanceManager;
+	RegisterMovementComponent(MovementComp: MovementComponent,AvoidanceWeight: number): boolean;
+	GetObjectCount(): number;
+	GetNewAvoidanceUID(): number;
+	GetAvoidanceVelocityForComponent(MovementComp: MovementComponent): Vector;
+	static C(Other: UObject | any): AvoidanceManager;
 }
 
-declare class MapProperty extends Property { 
-	static Load(ResourceName: string): MapProperty;
-	static Find(Outer: UObject, ResourceName: string): MapProperty;
-	static GetDefaultObject(): MapProperty;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MapProperty;
-	static C(Other: UObject | any): MapProperty;
+declare class LevelCollection { 
+	GameState: GameStateBase;
+	NetDriver: NetDriver;
+	DemoNetDriver: DemoNetDriver;
+	PersistentLevel: Level;
+	Levels: any;
+	clone() : LevelCollection;
+	static C(Other: UObject | any): LevelCollection;
 }
 
-declare class MulticastDelegateProperty extends Property { 
-	static Load(ResourceName: string): MulticastDelegateProperty;
-	static Find(Outer: UObject, ResourceName: string): MulticastDelegateProperty;
-	static GetDefaultObject(): MulticastDelegateProperty;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MulticastDelegateProperty;
-	static C(Other: UObject | any): MulticastDelegateProperty;
+declare class MaterialParameterCollectionInstance extends UObject { 
+	Collection: MaterialParameterCollection;
+	static Load(ResourceName: string): MaterialParameterCollectionInstance;
+	static Find(Outer: UObject, ResourceName: string): MaterialParameterCollectionInstance;
+	static GetDefaultObject(): MaterialParameterCollectionInstance;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialParameterCollectionInstance;
+	static C(Other: UObject | any): MaterialParameterCollectionInstance;
 }
 
-declare class NameProperty extends Property { 
-	static Load(ResourceName: string): NameProperty;
-	static Find(Outer: UObject, ResourceName: string): NameProperty;
-	static GetDefaultObject(): NameProperty;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NameProperty;
-	static C(Other: UObject | any): NameProperty;
+declare class LevelViewportInfo { 
+	CamPosition: Vector;
+	CamRotation: Rotator;
+	CamOrthoZoom: number;
+	CamUpdated: boolean;
+	clone() : LevelViewportInfo;
+	static C(Other: UObject | any): LevelViewportInfo;
 }
 
-declare class SetProperty extends Property { 
-	static Load(ResourceName: string): SetProperty;
-	static Find(Outer: UObject, ResourceName: string): SetProperty;
-	static GetDefaultObject(): SetProperty;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SetProperty;
-	static C(Other: UObject | any): SetProperty;
+declare class WorldComposition extends UObject { 
+	TilesStreaming: LevelStreaming[];
+	TilesStreamingTimeThreshold: any;
+	bLoadAllTilesDuringCinematic: boolean;
+	bRebaseOriginIn3DSpace: boolean;
+	bLockTilesLocation: boolean;
+	RebaseOriginDistance: number;
+	static Load(ResourceName: string): WorldComposition;
+	static Find(Outer: UObject, ResourceName: string): WorldComposition;
+	static GetDefaultObject(): WorldComposition;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WorldComposition;
+	static C(Other: UObject | any): WorldComposition;
 }
 
-declare class SoftObjectProperty extends ObjectPropertyBase { 
-	static Load(ResourceName: string): SoftObjectProperty;
-	static Find(Outer: UObject, ResourceName: string): SoftObjectProperty;
-	static GetDefaultObject(): SoftObjectProperty;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoftObjectProperty;
-	static C(Other: UObject | any): SoftObjectProperty;
+declare class WorldPSCPool { 
+	WorldParticleSystemPools: any;
+	clone() : WorldPSCPool;
+	static C(Other: UObject | any): WorldPSCPool;
 }
 
-declare class SoftClassProperty extends SoftObjectProperty { 
-	static Load(ResourceName: string): SoftClassProperty;
-	static Find(Outer: UObject, ResourceName: string): SoftClassProperty;
-	static GetDefaultObject(): SoftClassProperty;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoftClassProperty;
-	static C(Other: UObject | any): SoftClassProperty;
+declare class ActorLayer { 
+	Name: string;
+	clone() : ActorLayer;
+	static C(Other: UObject | any): ActorLayer;
 }
 
-declare class StrProperty extends Property { 
-	static Load(ResourceName: string): StrProperty;
-	static Find(Outer: UObject, ResourceName: string): StrProperty;
-	static GetDefaultObject(): StrProperty;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StrProperty;
-	static C(Other: UObject | any): StrProperty;
+declare class URL { 
+	Protocol: string;
+	Host: string;
+	Port: number;
+	Valid: number;
+	Map: string;
+	RedirectURL: string;
+	Op: string[];
+	Portal: string;
+	clone() : URL;
+	static C(Other: UObject | any): URL;
 }
 
-declare class StructProperty extends Property { 
-	static Load(ResourceName: string): StructProperty;
-	static Find(Outer: UObject, ResourceName: string): StructProperty;
-	static GetDefaultObject(): StructProperty;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StructProperty;
-	static C(Other: UObject | any): StructProperty;
+declare type ERecastPartitioning = 'Monotone' | 'Watershed' | 'ChunkyMonotone' | 'ERecastPartitioning_MAX';
+declare var ERecastPartitioning : { Monotone:'Monotone',Watershed:'Watershed',ChunkyMonotone:'ChunkyMonotone',ERecastPartitioning_MAX:'ERecastPartitioning_MAX', };
+declare class RecastNavMesh extends NavigationData { 
+	bDrawTriangleEdges: boolean;
+	bDrawPolyEdges: boolean;
+	bDrawFilledPolys: boolean;
+	bDrawNavMeshEdges: boolean;
+	bDrawTileBounds: boolean;
+	bDrawPathCollidingGeometry: boolean;
+	bDrawTileLabels: boolean;
+	bDrawPolygonLabels: boolean;
+	bDrawDefaultPolygonCost: boolean;
+	bDrawLabelsOnPathNodes: boolean;
+	bDrawNavLinks: boolean;
+	bDrawFailedNavLinks: boolean;
+	bDrawClusters: boolean;
+	bDrawOctree: boolean;
+	bDrawOctreeDetails: boolean;
+	bDrawMarkedForbiddenPolys: boolean;
+	bDistinctlyDrawTilesBeingBuilt: boolean;
+	bDrawNavMesh: boolean;
+	DrawOffset: number;
+	bFixedTilePoolSize: boolean;
+	TilePoolSize: number;
+	TileSizeUU: number;
+	CellSize: number;
+	CellHeight: number;
+	AgentRadius: number;
+	AgentHeight: number;
+	AgentMaxHeight: number;
+	AgentMaxSlope: number;
+	AgentMaxStepHeight: number;
+	MinRegionArea: number;
+	MergeRegionSize: number;
+	MaxSimplificationError: number;
+	MaxSimultaneousTileGenerationJobsCount: number;
+	TileNumberHardLimit: number;
+	PolyRefTileBits: number;
+	PolyRefNavPolyBits: number;
+	PolyRefSaltBits: number;
+	NavMeshOriginOffset: Vector;
+	DefaultDrawDistance: number;
+	DefaultMaxSearchNodes: number;
+	DefaultMaxHierarchicalSearchNodes: number;
+	RegionPartitioning: ERecastPartitioning;
+	LayerPartitioning: ERecastPartitioning;
+	RegionChunkSplits: number;
+	LayerChunkSplits: number;
+	bSortNavigationAreasByCost: boolean;
+	bPerformVoxelFiltering: boolean;
+	bMarkLowHeightAreas: boolean;
+	bFilterLowSpanSequences: boolean;
+	bFilterLowSpanFromTileCache: boolean;
+	bDoFullyAsyncNavDataGathering: boolean;
+	bUseBetterOffsetsFromCorners: boolean;
+	bStoreEmptyTileLayers: boolean;
+	bUseVirtualFilters: boolean;
+	bAllowNavLinkAsPathEnd: boolean;
+	bUseVoxelCache: boolean;
+	TileSetUpdateInterval: number;
+	HeuristicScale: number;
+	VerticalDeviationFromGroundCompensation: number;
+	static GetDefaultObject(): RecastNavMesh;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RecastNavMesh;
+	K2_ReplaceAreaInTileBounds(Bounds: Box,OldArea: UnrealEngineClass,NewArea: UnrealEngineClass,ReplaceLinks: boolean): boolean;
+	static C(Other: UObject | any): RecastNavMesh;
 }
 
-declare class UInt16Property extends NumericProperty { 
-	static Load(ResourceName: string): UInt16Property;
-	static Find(Outer: UObject, ResourceName: string): UInt16Property;
-	static GetDefaultObject(): UInt16Property;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UInt16Property;
-	static C(Other: UObject | any): UInt16Property;
+declare type EARWorldAlignment = 'Gravity' | 'GravityAndHeading' | 'Camera' | 'EARWorldAlignment_MAX';
+declare var EARWorldAlignment : { Gravity:'Gravity',GravityAndHeading:'GravityAndHeading',Camera:'Camera',EARWorldAlignment_MAX:'EARWorldAlignment_MAX', };
+declare type EARSessionType = 'None' | 'Orientation' | 'World' | 'Face' | 'Image' | 'ObjectScanning' | 'PoseTracking' | 'EARSessionType_MAX';
+declare var EARSessionType : { None:'None',Orientation:'Orientation',World:'World',Face:'Face',Image:'Image',ObjectScanning:'ObjectScanning',PoseTracking:'PoseTracking',EARSessionType_MAX:'EARSessionType_MAX', };
+declare type EARPlaneDetectionMode = 'None' | 'HorizontalPlaneDetection' | 'VerticalPlaneDetection' | 'EARPlaneDetectionMode_MAX';
+declare var EARPlaneDetectionMode : { None:'None',HorizontalPlaneDetection:'HorizontalPlaneDetection',VerticalPlaneDetection:'VerticalPlaneDetection',EARPlaneDetectionMode_MAX:'EARPlaneDetectionMode_MAX', };
+declare type EARLightEstimationMode = 'None' | 'AmbientLightEstimate' | 'DirectionalLightEstimate' | 'EARLightEstimationMode_MAX';
+declare var EARLightEstimationMode : { None:'None',AmbientLightEstimate:'AmbientLightEstimate',DirectionalLightEstimate:'DirectionalLightEstimate',EARLightEstimationMode_MAX:'EARLightEstimationMode_MAX', };
+declare type EARFrameSyncMode = 'SyncTickWithCameraImage' | 'SyncTickWithoutCameraImage' | 'EARFrameSyncMode_MAX';
+declare var EARFrameSyncMode : { SyncTickWithCameraImage:'SyncTickWithCameraImage',SyncTickWithoutCameraImage:'SyncTickWithoutCameraImage',EARFrameSyncMode_MAX:'EARFrameSyncMode_MAX', };
+declare type EARCandidateImageOrientation = 'Landscape' | 'Portrait' | 'EARCandidateImageOrientation_MAX';
+declare var EARCandidateImageOrientation : { Landscape:'Landscape',Portrait:'Portrait',EARCandidateImageOrientation_MAX:'EARCandidateImageOrientation_MAX', };
+declare class ARCandidateImage extends DataAsset { 
+	CandidateTexture: Texture2D;
+	FriendlyName: string;
+	Width: number;
+	Height: number;
+	Orientation: EARCandidateImageOrientation;
+	static Load(ResourceName: string): ARCandidateImage;
+	static Find(Outer: UObject, ResourceName: string): ARCandidateImage;
+	static GetDefaultObject(): ARCandidateImage;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARCandidateImage;
+	GetPhysicalWidth(): number;
+	GetPhysicalHeight(): number;
+	GetOrientation(): EARCandidateImageOrientation;
+	GetFriendlyName(): string;
+	GetCandidateTexture(): Texture2D;
+	static C(Other: UObject | any): ARCandidateImage;
+}
+
+declare type EAREnvironmentCaptureProbeType = 'None' | 'Manual' | 'Automatic' | 'EAREnvironmentCaptureProbeType_MAX';
+declare var EAREnvironmentCaptureProbeType : { None:'None',Manual:'Manual',Automatic:'Automatic',EAREnvironmentCaptureProbeType_MAX:'EAREnvironmentCaptureProbeType_MAX', };
+declare class ARCandidateObject extends DataAsset { 
+	CandidateObjectData: number[];
+	FriendlyName: string;
+	BoundingBox: Box;
+	static Load(ResourceName: string): ARCandidateObject;
+	static Find(Outer: UObject, ResourceName: string): ARCandidateObject;
+	static GetDefaultObject(): ARCandidateObject;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARCandidateObject;
+	SetFriendlyName(NewName: string): void;
+	SetCandidateObjectData(InCandidateObject: number[]): void;
+	SetBoundingBox(InBoundingBox: Box): void;
+	GetFriendlyName(): string;
+	GetCandidateObjectData(): number[];
+	GetBoundingBox(): Box;
+	static C(Other: UObject | any): ARCandidateObject;
 }
 
-declare class UInt32Property extends NumericProperty { 
-	static Load(ResourceName: string): UInt32Property;
-	static Find(Outer: UObject, ResourceName: string): UInt32Property;
-	static GetDefaultObject(): UInt32Property;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UInt32Property;
-	static C(Other: UObject | any): UInt32Property;
+declare class ARVideoFormat { 
+	FPS: number;
+	Width: number;
+	Height: number;
+	clone() : ARVideoFormat;
+	static C(Other: UObject | any): ARVideoFormat;
+}
+
+declare type EARFaceTrackingDirection = 'FaceRelative' | 'FaceMirrored' | 'EARFaceTrackingDirection_MAX';
+declare var EARFaceTrackingDirection : { FaceRelative:'FaceRelative',FaceMirrored:'FaceMirrored',EARFaceTrackingDirection_MAX:'EARFaceTrackingDirection_MAX', };
+declare type EARFaceTrackingUpdate = 'CurvesAndGeo' | 'CurvesOnly' | 'EARFaceTrackingUpdate_MAX';
+declare var EARFaceTrackingUpdate : { CurvesAndGeo:'CurvesAndGeo',CurvesOnly:'CurvesOnly',EARFaceTrackingUpdate_MAX:'EARFaceTrackingUpdate_MAX', };
+declare type EARSessionTrackingFeature = 'None' | 'PoseDetection2D' | 'PersonSegmentation' | 'PersonSegmentationWithDepth' | 'EARSessionTrackingFeature_MAX';
+declare var EARSessionTrackingFeature : { None:'None',PoseDetection2D:'PoseDetection2D',PersonSegmentation:'PersonSegmentation',PersonSegmentationWithDepth:'PersonSegmentationWithDepth',EARSessionTrackingFeature_MAX:'EARSessionTrackingFeature_MAX', };
+declare class ARSessionConfig extends DataAsset { 
+	bGenerateMeshDataFromTrackedGeometry: boolean;
+	bGenerateCollisionForMeshData: boolean;
+	bGenerateNavMeshForMeshData: boolean;
+	bUseMeshDataForOcclusion: boolean;
+	bRenderMeshDataInWireframe: boolean;
+	bTrackSceneObjects: boolean;
+	bUsePersonSegmentationForOcclusion: boolean;
+	WorldAlignment: EARWorldAlignment;
+	SessionType: EARSessionType;
+	PlaneDetectionMode: EARPlaneDetectionMode;
+	bHorizontalPlaneDetection: boolean;
+	bVerticalPlaneDetection: boolean;
+	bEnableAutoFocus: boolean;
+	LightEstimationMode: EARLightEstimationMode;
+	FrameSyncMode: EARFrameSyncMode;
+	bEnableAutomaticCameraOverlay: boolean;
+	bEnableAutomaticCameraTracking: boolean;
+	bResetCameraTracking: boolean;
+	bResetTrackedObjects: boolean;
+	CandidateImages: ARCandidateImage[];
+	MaxNumSimultaneousImagesTracked: number;
+	EnvironmentCaptureProbeType: EAREnvironmentCaptureProbeType;
+	WorldMapData: number[];
+	CandidateObjects: ARCandidateObject[];
+	DesiredVideoFormat: ARVideoFormat;
+	FaceTrackingDirection: EARFaceTrackingDirection;
+	FaceTrackingUpdate: EARFaceTrackingUpdate;
+	SerializedARCandidateImageDatabase: number[];
+	EnabledSessionTrackingFeature: EARSessionTrackingFeature;
+	static Load(ResourceName: string): ARSessionConfig;
+	static Find(Outer: UObject, ResourceName: string): ARSessionConfig;
+	static GetDefaultObject(): ARSessionConfig;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARSessionConfig;
+	ShouldResetTrackedObjects(): boolean;
+	ShouldResetCameraTracking(): boolean;
+	ShouldRenderCameraOverlay(): boolean;
+	ShouldEnableCameraTracking(): boolean;
+	ShouldEnableAutoFocus(): boolean;
+	SetWorldMapData(WorldMapData: number[]): void;
+	SetSessionTrackingFeatureToEnable(InSessionTrackingFeature: EARSessionTrackingFeature): void;
+	SetResetTrackedObjects(bNewValue: boolean): void;
+	SetResetCameraTracking(bNewValue: boolean): void;
+	SetFaceTrackingUpdate(InUpdate: EARFaceTrackingUpdate): void;
+	SetFaceTrackingDirection(InDirection: EARFaceTrackingDirection): void;
+	SetEnableAutoFocus(bNewValue: boolean): void;
+	SetDesiredVideoFormat(NewFormat: ARVideoFormat): void;
+	SetCandidateObjectList(InCandidateObjects: ARCandidateObject[]): void;
+	GetWorldMapData(): number[];
+	GetWorldAlignment(): EARWorldAlignment;
+	GetSessionType(): EARSessionType;
+	GetPlaneDetectionMode(): EARPlaneDetectionMode;
+	GetMaxNumSimultaneousImagesTracked(): number;
+	GetLightEstimationMode(): EARLightEstimationMode;
+	GetFrameSyncMode(): EARFrameSyncMode;
+	GetFaceTrackingUpdate(): EARFaceTrackingUpdate;
+	GetFaceTrackingDirection(): EARFaceTrackingDirection;
+	GetEnvironmentCaptureProbeType(): EAREnvironmentCaptureProbeType;
+	GetEnabledSessionTrackingFeature(): EARSessionTrackingFeature;
+	GetDesiredVideoFormat(): ARVideoFormat;
+	GetCandidateObjectList(): ARCandidateObject[];
+	GetCandidateImageList(): ARCandidateImage[];
+	AddCandidateObject(CandidateObject: ARCandidateObject): void;
+	AddCandidateImage(NewCandidateImage: ARCandidateImage): void;
+	static C(Other: UObject | any): ARSessionConfig;
+	AddRuntimeCandidateImage(CandidateTexture: Texture2D,FriendlyName: string,PhysicalWidth: number): ARCandidateImage;
+	StartARSession(): void;
+	static AddRuntimeCandidateImage(SessionConfig: ARSessionConfig,CandidateTexture: Texture2D,FriendlyName: string,PhysicalWidth: number): ARCandidateImage;
+	static StartARSession(SessionConfig: ARSessionConfig): void;
+}
+
+declare type EPlaneQueryFlags = 'Vertical' | 'Horizontal' | 'Arbitrary' | 'OrientToGravity' | 'PreferInner' | 'IgnoreHoles' | 'Ceiling' | 'Floor' | 'Wall' | 'EPlaneQueryFlags_MAX';
+declare var EPlaneQueryFlags : { Vertical:'Vertical',Horizontal:'Horizontal',Arbitrary:'Arbitrary',OrientToGravity:'OrientToGravity',PreferInner:'PreferInner',IgnoreHoles:'IgnoreHoles',Ceiling:'Ceiling',Floor:'Floor',Wall:'Wall',EPlaneQueryFlags_MAX:'EPlaneQueryFlags_MAX', };
+declare class LuminARSessionConfig extends ARSessionConfig { 
+	MaxPlaneQueryResults: number;
+	MinPlaneArea: number;
+	bArbitraryOrientationPlaneDetection: boolean;
+	PlaneSearchExtents: Vector;
+	PlaneQueryFlags: EPlaneQueryFlags[];
+	bDiscardZeroExtentPlanes: boolean;
+	static Load(ResourceName: string): LuminARSessionConfig;
+	static Find(Outer: UObject, ResourceName: string): LuminARSessionConfig;
+	static GetDefaultObject(): LuminARSessionConfig;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LuminARSessionConfig;
+	static C(Other: UObject | any): LuminARSessionConfig;
 }
 
-declare class UInt64Property extends NumericProperty { 
-	static Load(ResourceName: string): UInt64Property;
-	static Find(Outer: UObject, ResourceName: string): UInt64Property;
-	static GetDefaultObject(): UInt64Property;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UInt64Property;
-	static C(Other: UObject | any): UInt64Property;
+declare class TraceChannelTestBatchOptions { 
+	bLineTrace: boolean;
+	bSphereTrace: boolean;
+	bCapsuleTrace: boolean;
+	bBoxTrace: boolean;
+	bChannelTrace: boolean;
+	bObjectsTrace: boolean;
+	bProfileTrace: boolean;
+	clone() : TraceChannelTestBatchOptions;
+	static C(Other: UObject | any): TraceChannelTestBatchOptions;
 }
 
-declare class WeakObjectProperty extends ObjectPropertyBase { 
-	static Load(ResourceName: string): WeakObjectProperty;
-	static Find(Outer: UObject, ResourceName: string): WeakObjectProperty;
-	static GetDefaultObject(): WeakObjectProperty;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WeakObjectProperty;
-	static C(Other: UObject | any): WeakObjectProperty;
+declare type EDrawDebugTrace = 'None' | 'ForOneFrame' | 'ForDuration' | 'Persistent' | 'EDrawDebugTrace_MAX';
+declare var EDrawDebugTrace : { None:'None',ForOneFrame:'ForOneFrame',ForDuration:'ForDuration',Persistent:'Persistent',EDrawDebugTrace_MAX:'EDrawDebugTrace_MAX', };
+declare class TraceQueryTestNames { 
+	ComponentName: string;
+	PhysicalMaterialName: string;
+	ActorName: string;
+	clone() : TraceQueryTestNames;
+	static C(Other: UObject | any): TraceQueryTestNames;
 }
 
-declare class TextProperty extends Property { 
-	static Load(ResourceName: string): TextProperty;
-	static Find(Outer: UObject, ResourceName: string): TextProperty;
-	static GetDefaultObject(): TextProperty;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextProperty;
-	static C(Other: UObject | any): TextProperty;
+declare class TraceQueryTestResultsInnerMost { 
+	SingleHit: HitResult;
+	SingleNames: TraceQueryTestNames;
+	bSingleResult: boolean;
+	MultiHits: HitResult[];
+	MultiNames: TraceQueryTestNames[];
+	bMultiResult: boolean;
+	clone() : TraceQueryTestResultsInnerMost;
+	static C(Other: UObject | any): TraceQueryTestResultsInnerMost;
 }
 
-declare class InputCoreTypes extends UObject { 
-	static Load(ResourceName: string): InputCoreTypes;
-	static Find(Outer: UObject, ResourceName: string): InputCoreTypes;
-	static GetDefaultObject(): InputCoreTypes;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputCoreTypes;
-	static C(Other: UObject | any): InputCoreTypes;
+declare class TraceQueryTestResultsInner { 
+	LineResults: TraceQueryTestResultsInnerMost;
+	SphereResults: TraceQueryTestResultsInnerMost;
+	CapsuleResults: TraceQueryTestResultsInnerMost;
+	BoxResults: TraceQueryTestResultsInnerMost;
+	clone() : TraceQueryTestResultsInner;
+	static C(Other: UObject | any): TraceQueryTestResultsInner;
 }
 
-declare class FontFaceInterface extends Interface { 
-	static Load(ResourceName: string): FontFaceInterface;
-	static Find(Outer: UObject, ResourceName: string): FontFaceInterface;
-	static GetDefaultObject(): FontFaceInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FontFaceInterface;
-	static C(Other: UObject | any): FontFaceInterface;
+declare class TraceQueryTestResults extends UObject { 
+	ChannelResults: TraceQueryTestResultsInner;
+	ObjectResults: TraceQueryTestResultsInner;
+	ProfileResults: TraceQueryTestResultsInner;
+	BatchOptions: TraceChannelTestBatchOptions;
+	static Load(ResourceName: string): TraceQueryTestResults;
+	static Find(Outer: UObject, ResourceName: string): TraceQueryTestResults;
+	static GetDefaultObject(): TraceQueryTestResults;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TraceQueryTestResults;
+	ToString(): string;
+	static C(Other: UObject | any): TraceQueryTestResults;
 }
 
-declare class FontProviderInterface extends Interface { 
-	static Load(ResourceName: string): FontProviderInterface;
-	static Find(Outer: UObject, ResourceName: string): FontProviderInterface;
-	static GetDefaultObject(): FontProviderInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FontProviderInterface;
-	static C(Other: UObject | any): FontProviderInterface;
+declare class AutomationViewSettings extends DataAsset { 
+	AntiAliasing: boolean;
+	MotionBlur: boolean;
+	TemporalAA: boolean;
+	ScreenSpaceReflections: boolean;
+	ScreenSpaceAO: boolean;
+	DistanceFieldAO: boolean;
+	ContactShadows: boolean;
+	EyeAdaptation: boolean;
+	Bloom: boolean;
+	static Load(ResourceName: string): AutomationViewSettings;
+	static Find(Outer: UObject, ResourceName: string): AutomationViewSettings;
+	static GetDefaultObject(): AutomationViewSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomationViewSettings;
+	static C(Other: UObject | any): AutomationViewSettings;
 }
 
-declare class SlateTypes extends UObject { 
-	static Load(ResourceName: string): SlateTypes;
-	static Find(Outer: UObject, ResourceName: string): SlateTypes;
-	static GetDefaultObject(): SlateTypes;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateTypes;
-	static C(Other: UObject | any): SlateTypes;
+declare type EComparisonTolerance = 'Zero' | 'Low' | 'Medium' | 'High' | 'Custom' | 'EComparisonTolerance_MAX';
+declare var EComparisonTolerance : { Zero:'Zero',Low:'Low',Medium:'Medium',High:'High',Custom:'Custom',EComparisonTolerance_MAX:'EComparisonTolerance_MAX', };
+declare class ComparisonToleranceAmount { 
+	red: number;
+	green: number;
+	blue: number;
+	Alpha: number;
+	MinBrightness: number;
+	MaxBrightness: number;
+	clone() : ComparisonToleranceAmount;
+	static C(Other: UObject | any): ComparisonToleranceAmount;
 }
 
-declare class SlateWidgetStyleContainerBase extends UObject { 
-	static Load(ResourceName: string): SlateWidgetStyleContainerBase;
-	static Find(Outer: UObject, ResourceName: string): SlateWidgetStyleContainerBase;
-	static GetDefaultObject(): SlateWidgetStyleContainerBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateWidgetStyleContainerBase;
-	static C(Other: UObject | any): SlateWidgetStyleContainerBase;
+declare class AutomationScreenshotOptions { 
+	Resolution: Vector2D;
+	Delay: number;
+	bOverride_OverrideTimeTo: boolean;
+	OverrideTimeTo: number;
+	bDisableNoisyRenderingFeatures: boolean;
+	bDisableTonemapping: boolean;
+	ViewSettings: AutomationViewSettings;
+	VisualizeBuffer: string;
+	Tolerance: EComparisonTolerance;
+	ToleranceAmount: ComparisonToleranceAmount;
+	MaximumLocalError: number;
+	MaximumGlobalError: number;
+	bIgnoreAntiAliasing: boolean;
+	bIgnoreColors: boolean;
+	clone() : AutomationScreenshotOptions;
+	static C(Other: UObject | any): AutomationScreenshotOptions;
+	static GetDefaultScreenshotOptionsForGameplay(Tolerance: EComparisonTolerance,Delay: number): AutomationScreenshotOptions;
+	static GetDefaultScreenshotOptionsForRendering(Tolerance: EComparisonTolerance,Delay: number): AutomationScreenshotOptions;
 }
 
-declare class SlateWidgetStyleAsset extends UObject { 
-	CustomStyle: SlateWidgetStyleContainerBase;
-	static Load(ResourceName: string): SlateWidgetStyleAsset;
-	static Find(Outer: UObject, ResourceName: string): SlateWidgetStyleAsset;
-	static GetDefaultObject(): SlateWidgetStyleAsset;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateWidgetStyleAsset;
-	static C(Other: UObject | any): SlateWidgetStyleAsset;
+declare class DebugFloatHistory { 
+	Samples: number[];
+	MaxSamples: number;
+	MinValue: number;
+	MaxValue: number;
+	bAutoAdjustMinMax: boolean;
+	clone() : DebugFloatHistory;
+	static C(Other: UObject | any): DebugFloatHistory;
+	static AddFloatHistorySample(Value: number,FloatHistory: DebugFloatHistory): DebugFloatHistory;
 }
 
-declare class SlateWidgetStyleContainerInterface extends Interface { 
-	static Load(ResourceName: string): SlateWidgetStyleContainerInterface;
-	static Find(Outer: UObject, ResourceName: string): SlateWidgetStyleContainerInterface;
-	static GetDefaultObject(): SlateWidgetStyleContainerInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateWidgetStyleContainerInterface;
-	static C(Other: UObject | any): SlateWidgetStyleContainerInterface;
+declare class TimerHandle { 
+	Handle: any;
+	clone() : TimerHandle;
+	static C(Other: UObject | any): TimerHandle;
+	K2_InvalidateTimerHandle(): {Handle: TimerHandle, $: TimerHandle};
+	K2_IsValidTimerHandle(): boolean;
+	static K2_InvalidateTimerHandle(Handle?: TimerHandle): {Handle: TimerHandle, $: TimerHandle};
+	static K2_IsValidTimerHandle(Handle: TimerHandle): boolean;
+	static K2_SetTimerDelegate(delegate: UnrealEngineDelegate<() => void>,Time: number,bLooping: boolean,InitialStartDelay: number,InitialStartDelayVariance: number): TimerHandle;
 }
 
-declare class SlateWidgetStyle { 
-	clone() : SlateWidgetStyle;
-	static C(Other: UObject | any): SlateWidgetStyle;
+declare type EQuitPreference = 'Quit' | 'Background' | 'EQuitPreference_MAX';
+declare var EQuitPreference : { Quit:'Quit',Background:'Background',EQuitPreference_MAX:'EQuitPreference_MAX', };
+declare class TextureRenderTarget extends Texture { 
+	TargetGamma: number;
+	static Load(ResourceName: string): TextureRenderTarget;
+	static Find(Outer: UObject, ResourceName: string): TextureRenderTarget;
+	static GetDefaultObject(): TextureRenderTarget;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureRenderTarget;
+	static C(Other: UObject | any): TextureRenderTarget;
 }
 
-declare class SlateSound { 
-	ResourceObject: UObject;
-	clone() : SlateSound;
-	static C(Other: UObject | any): SlateSound;
+declare type ETextureRenderTargetFormat = 'RTF_R8' | 'RTF_RG8' | 'RTF_RGBA8' | 'RTF_R16f' | 'RTF_RG16f' | 'RTF_RGBA16f' | 'RTF_R32f' | 'RTF_RG32f' | 'RTF_RGBA32f' | 'RTF_RGB10A2' | 'RTF_MAX';
+declare var ETextureRenderTargetFormat : { RTF_R8:'RTF_R8',RTF_RG8:'RTF_RG8',RTF_RGBA8:'RTF_RGBA8',RTF_R16f:'RTF_R16f',RTF_RG16f:'RTF_RG16f',RTF_RGBA16f:'RTF_RGBA16f',RTF_R32f:'RTF_R32f',RTF_RG32f:'RTF_RG32f',RTF_RGBA32f:'RTF_RGBA32f',RTF_RGB10A2:'RTF_RGB10A2',RTF_MAX:'RTF_MAX', };
+declare type EPixelFormat = 'PF_Unknown' | 'PF_A32B32G32R32F' | 'PF_B8G8R8A8' | 'PF_G8' | 'PF_G16' | 'PF_DXT1' | 'PF_DXT3' | 'PF_DXT5' | 'PF_UYVY' | 'PF_FloatRGB' | 'PF_FloatRGBA' | 'PF_DepthStencil' | 'PF_ShadowDepth' | 'PF_R32_FLOAT' | 'PF_G16R16' | 'PF_G16R16F' | 'PF_G16R16F_FILTER' | 'PF_G32R32F' | 'PF_A2B10G10R10' | 'PF_A16B16G16R16' | 'PF_D24' | 'PF_R16F' | 'PF_R16F_FILTER' | 'PF_BC5' | 'PF_V8U8' | 'PF_A1' | 'PF_FloatR11G11B10' | 'PF_A8' | 'PF_R32_UINT' | 'PF_R32_SINT' | 'PF_PVRTC2' | 'PF_PVRTC4' | 'PF_R16_UINT' | 'PF_R16_SINT' | 'PF_R16G16B16A16_UINT' | 'PF_R16G16B16A16_SINT' | 'PF_R5G6B5_UNORM' | 'PF_R8G8B8A8' | 'PF_A8R8G8B8' | 'PF_BC4' | 'PF_R8G8' | 'PF_ATC_RGB' | 'PF_ATC_RGBA_E' | 'PF_ATC_RGBA_I' | 'PF_X24_G8' | 'PF_ETC1' | 'PF_ETC2_RGB' | 'PF_ETC2_RGBA' | 'PF_R32G32B32A32_UINT' | 'PF_R16G16_UINT' | 'PF_ASTC_4x4' | 'PF_ASTC_6x6' | 'PF_ASTC_8x8' | 'PF_ASTC_10x10' | 'PF_ASTC_12x12' | 'PF_BC6H' | 'PF_BC7' | 'PF_R8_UINT' | 'PF_L8' | 'PF_XGXR8' | 'PF_R8G8B8A8_UINT' | 'PF_R8G8B8A8_SNORM' | 'PF_R16G16B16A16_UNORM' | 'PF_R16G16B16A16_SNORM' | 'PF_PLATFORM_HDR_0' | 'PF_PLATFORM_HDR_1' | 'PF_PLATFORM_HDR_2' | 'PF_NV12' | 'PF_R32G32_UINT' | 'PF_MAX';
+declare var EPixelFormat : { PF_Unknown:'PF_Unknown',PF_A32B32G32R32F:'PF_A32B32G32R32F',PF_B8G8R8A8:'PF_B8G8R8A8',PF_G8:'PF_G8',PF_G16:'PF_G16',PF_DXT1:'PF_DXT1',PF_DXT3:'PF_DXT3',PF_DXT5:'PF_DXT5',PF_UYVY:'PF_UYVY',PF_FloatRGB:'PF_FloatRGB',PF_FloatRGBA:'PF_FloatRGBA',PF_DepthStencil:'PF_DepthStencil',PF_ShadowDepth:'PF_ShadowDepth',PF_R32_FLOAT:'PF_R32_FLOAT',PF_G16R16:'PF_G16R16',PF_G16R16F:'PF_G16R16F',PF_G16R16F_FILTER:'PF_G16R16F_FILTER',PF_G32R32F:'PF_G32R32F',PF_A2B10G10R10:'PF_A2B10G10R10',PF_A16B16G16R16:'PF_A16B16G16R16',PF_D24:'PF_D24',PF_R16F:'PF_R16F',PF_R16F_FILTER:'PF_R16F_FILTER',PF_BC5:'PF_BC5',PF_V8U8:'PF_V8U8',PF_A1:'PF_A1',PF_FloatR11G11B10:'PF_FloatR11G11B10',PF_A8:'PF_A8',PF_R32_UINT:'PF_R32_UINT',PF_R32_SINT:'PF_R32_SINT',PF_PVRTC2:'PF_PVRTC2',PF_PVRTC4:'PF_PVRTC4',PF_R16_UINT:'PF_R16_UINT',PF_R16_SINT:'PF_R16_SINT',PF_R16G16B16A16_UINT:'PF_R16G16B16A16_UINT',PF_R16G16B16A16_SINT:'PF_R16G16B16A16_SINT',PF_R5G6B5_UNORM:'PF_R5G6B5_UNORM',PF_R8G8B8A8:'PF_R8G8B8A8',PF_A8R8G8B8:'PF_A8R8G8B8',PF_BC4:'PF_BC4',PF_R8G8:'PF_R8G8',PF_ATC_RGB:'PF_ATC_RGB',PF_ATC_RGBA_E:'PF_ATC_RGBA_E',PF_ATC_RGBA_I:'PF_ATC_RGBA_I',PF_X24_G8:'PF_X24_G8',PF_ETC1:'PF_ETC1',PF_ETC2_RGB:'PF_ETC2_RGB',PF_ETC2_RGBA:'PF_ETC2_RGBA',PF_R32G32B32A32_UINT:'PF_R32G32B32A32_UINT',PF_R16G16_UINT:'PF_R16G16_UINT',PF_ASTC_4x4:'PF_ASTC_4x4',PF_ASTC_6x6:'PF_ASTC_6x6',PF_ASTC_8x8:'PF_ASTC_8x8',PF_ASTC_10x10:'PF_ASTC_10x10',PF_ASTC_12x12:'PF_ASTC_12x12',PF_BC6H:'PF_BC6H',PF_BC7:'PF_BC7',PF_R8_UINT:'PF_R8_UINT',PF_L8:'PF_L8',PF_XGXR8:'PF_XGXR8',PF_R8G8B8A8_UINT:'PF_R8G8B8A8_UINT',PF_R8G8B8A8_SNORM:'PF_R8G8B8A8_SNORM',PF_R16G16B16A16_UNORM:'PF_R16G16B16A16_UNORM',PF_R16G16B16A16_SNORM:'PF_R16G16B16A16_SNORM',PF_PLATFORM_HDR_0:'PF_PLATFORM_HDR_0',PF_PLATFORM_HDR_1:'PF_PLATFORM_HDR_1',PF_PLATFORM_HDR_2:'PF_PLATFORM_HDR_2',PF_NV12:'PF_NV12',PF_R32G32_UINT:'PF_R32G32_UINT',PF_MAX:'PF_MAX', };
+declare class TextureRenderTarget2D extends TextureRenderTarget { 
+	SizeX: number;
+	SizeY: number;
+	ClearColor: LinearColor;
+	AddressX: TextureAddress;
+	AddressY: TextureAddress;
+	bForceLinearGamma: boolean;
+	bHDR: boolean;
+	bGPUSharedFlag: boolean;
+	RenderTargetFormat: ETextureRenderTargetFormat;
+	bAutoGenerateMips: boolean;
+	MipsSamplerFilter: TextureFilter;
+	MipsAddressU: TextureAddress;
+	MipsAddressV: TextureAddress;
+	OverrideFormat: EPixelFormat;
+	static Load(ResourceName: string): TextureRenderTarget2D;
+	static Find(Outer: UObject, ResourceName: string): TextureRenderTarget2D;
+	static GetDefaultObject(): TextureRenderTarget2D;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureRenderTarget2D;
+	static C(Other: UObject | any): TextureRenderTarget2D;
+	ReleaseRenderTarget2D(): void;
+	RenderTargetCreateStaticTexture2DEditorOnly(Name: string,CompressionSettings: TextureCompressionSettings,MipSettings: TextureMipGenSettings): Texture2D;
+	static ReleaseRenderTarget2D(TextureRenderTarget: TextureRenderTarget2D): void;
+	static RenderTargetCreateStaticTexture2DEditorOnly(RenderTarget: TextureRenderTarget2D,Name: string,CompressionSettings: TextureCompressionSettings,MipSettings: TextureMipGenSettings): Texture2D;
 }
 
-declare class ButtonStyle extends SlateWidgetStyle { 
-	Normal: SlateBrush;
-	Hovered: SlateBrush;
-	Pressed: SlateBrush;
-	Disabled: SlateBrush;
-	NormalPadding: Margin;
-	PressedPadding: Margin;
-	PressedSlateSound: SlateSound;
-	HoveredSlateSound: SlateSound;
-	PressedSound: string;
-	HoveredSound: string;
-	clone() : ButtonStyle;
-	static C(Other: UObject | any): ButtonStyle;
+declare class DrawToRenderTargetContext { 
+	RenderTarget: TextureRenderTarget2D;
+	clone() : DrawToRenderTargetContext;
+	static C(Other: UObject | any): DrawToRenderTargetContext;
 }
 
-declare class ButtonWidgetStyle extends SlateWidgetStyleContainerBase { 
-	ButtonStyle: ButtonStyle;
-	static Load(ResourceName: string): ButtonWidgetStyle;
-	static Find(Outer: UObject, ResourceName: string): ButtonWidgetStyle;
-	static GetDefaultObject(): ButtonWidgetStyle;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ButtonWidgetStyle;
-	static C(Other: UObject | any): ButtonWidgetStyle;
+declare class PredictProjectilePathParams { 
+	StartLocation: Vector;
+	LaunchVelocity: Vector;
+	bTraceWithCollision: boolean;
+	ProjectileRadius: number;
+	MaxSimTime: number;
+	bTraceWithChannel: boolean;
+	TraceChannel: ECollisionChannel;
+	ObjectTypes: EObjectTypeQuery[];
+	ActorsToIgnore: Actor[];
+	SimFrequency: number;
+	OverrideGravityZ: number;
+	DrawDebugType: EDrawDebugTrace;
+	DrawDebugTime: number;
+	bTraceComplex: boolean;
+	clone() : PredictProjectilePathParams;
+	static C(Other: UObject | any): PredictProjectilePathParams;
 }
 
-declare type ESlateCheckBoxType = 'CheckBox' | 'ToggleButton' | 'ESlateCheckBoxType_MAX';
-declare var ESlateCheckBoxType : { CheckBox:'CheckBox',ToggleButton:'ToggleButton',ESlateCheckBoxType_MAX:'ESlateCheckBoxType_MAX', };
-declare class CheckBoxStyle extends SlateWidgetStyle { 
-	CheckBoxType: ESlateCheckBoxType;
-	UncheckedImage: SlateBrush;
-	UncheckedHoveredImage: SlateBrush;
-	UncheckedPressedImage: SlateBrush;
-	CheckedImage: SlateBrush;
-	CheckedHoveredImage: SlateBrush;
-	CheckedPressedImage: SlateBrush;
-	UndeterminedImage: SlateBrush;
-	UndeterminedHoveredImage: SlateBrush;
-	UndeterminedPressedImage: SlateBrush;
-	Padding: Margin;
-	ForegroundColor: SlateColor;
-	BorderBackgroundColor: SlateColor;
-	CheckedSlateSound: SlateSound;
-	UncheckedSlateSound: SlateSound;
-	HoveredSlateSound: SlateSound;
-	CheckedSound: string;
-	UncheckedSound: string;
-	HoveredSound: string;
-	clone() : CheckBoxStyle;
-	static C(Other: UObject | any): CheckBoxStyle;
+declare class PredictProjectilePathPointData { 
+	Location: Vector;
+	Velocity: Vector;
+	Time: number;
+	clone() : PredictProjectilePathPointData;
+	static C(Other: UObject | any): PredictProjectilePathPointData;
 }
 
-declare class CheckBoxWidgetStyle extends SlateWidgetStyleContainerBase { 
-	CheckBoxStyle: CheckBoxStyle;
-	static Load(ResourceName: string): CheckBoxWidgetStyle;
-	static Find(Outer: UObject, ResourceName: string): CheckBoxWidgetStyle;
-	static GetDefaultObject(): CheckBoxWidgetStyle;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CheckBoxWidgetStyle;
-	static C(Other: UObject | any): CheckBoxWidgetStyle;
+declare class PredictProjectilePathResult { 
+	PathData: PredictProjectilePathPointData[];
+	LastTraceDestination: PredictProjectilePathPointData;
+	HitResult: HitResult;
+	clone() : PredictProjectilePathResult;
+	static C(Other: UObject | any): PredictProjectilePathResult;
 }
 
-declare class ComboButtonStyle extends SlateWidgetStyle { 
-	ButtonStyle: ButtonStyle;
-	DownArrowImage: SlateBrush;
-	MenuBorderBrush: SlateBrush;
-	MenuBorderPadding: Margin;
-	clone() : ComboButtonStyle;
-	static C(Other: UObject | any): ComboButtonStyle;
+declare type ESuggestProjVelocityTraceOption = 'DoNotTrace' | 'TraceFullPath' | 'OnlyTraceWhileAscending' | 'ESuggestProjVelocityTraceOption_MAX';
+declare var ESuggestProjVelocityTraceOption : { DoNotTrace:'DoNotTrace',TraceFullPath:'TraceFullPath',OnlyTraceWhileAscending:'OnlyTraceWhileAscending',ESuggestProjVelocityTraceOption_MAX:'ESuggestProjVelocityTraceOption_MAX', };
+declare type EMouseCaptureMode = 'NoCapture' | 'CapturePermanently' | 'CapturePermanently_IncludingInitialMouseDown' | 'CaptureDuringMouseDown' | 'CaptureDuringRightMouseDown' | 'EMouseCaptureMode_MAX';
+declare var EMouseCaptureMode : { NoCapture:'NoCapture',CapturePermanently:'CapturePermanently',CapturePermanently_IncludingInitialMouseDown:'CapturePermanently_IncludingInitialMouseDown',CaptureDuringMouseDown:'CaptureDuringMouseDown',CaptureDuringRightMouseDown:'CaptureDuringRightMouseDown',EMouseCaptureMode_MAX:'EMouseCaptureMode_MAX', };
+declare type EGrammaticalGender = 'Neuter' | 'Masculine' | 'Feminine' | 'Mixed' | 'EGrammaticalGender_MAX';
+declare var EGrammaticalGender : { Neuter:'Neuter',Masculine:'Masculine',Feminine:'Feminine',Mixed:'Mixed',EGrammaticalGender_MAX:'EGrammaticalGender_MAX', };
+declare type EGrammaticalNumber = 'Singular' | 'Plural' | 'EGrammaticalNumber_MAX';
+declare var EGrammaticalNumber : { Singular:'Singular',Plural:'Plural',EGrammaticalNumber_MAX:'EGrammaticalNumber_MAX', };
+declare class DialogueVoice extends UObject { 
+	Gender: EGrammaticalGender;
+	Plurality: EGrammaticalNumber;
+	LocalizationGUID: Guid;
+	static Load(ResourceName: string): DialogueVoice;
+	static Find(Outer: UObject, ResourceName: string): DialogueVoice;
+	static GetDefaultObject(): DialogueVoice;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DialogueVoice;
+	static C(Other: UObject | any): DialogueVoice;
 }
 
-declare class ComboBoxStyle extends SlateWidgetStyle { 
-	ComboButtonStyle: ComboButtonStyle;
-	PressedSlateSound: SlateSound;
-	SelectionChangeSlateSound: SlateSound;
-	PressedSound: string;
-	SelectionChangeSound: string;
-	clone() : ComboBoxStyle;
-	static C(Other: UObject | any): ComboBoxStyle;
+declare class DialogueContext { 
+	Speaker: DialogueVoice;
+	Targets: DialogueVoice[];
+	clone() : DialogueContext;
+	static C(Other: UObject | any): DialogueContext;
 }
 
-declare class ComboBoxWidgetStyle extends SlateWidgetStyleContainerBase { 
-	ComboBoxStyle: ComboBoxStyle;
-	static Load(ResourceName: string): ComboBoxWidgetStyle;
-	static Find(Outer: UObject, ResourceName: string): ComboBoxWidgetStyle;
-	static GetDefaultObject(): ComboBoxWidgetStyle;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ComboBoxWidgetStyle;
-	static C(Other: UObject | any): ComboBoxWidgetStyle;
+declare class DialogueSoundWaveProxy extends SoundBase { 
+	static Load(ResourceName: string): DialogueSoundWaveProxy;
+	static Find(Outer: UObject, ResourceName: string): DialogueSoundWaveProxy;
+	static GetDefaultObject(): DialogueSoundWaveProxy;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DialogueSoundWaveProxy;
+	static C(Other: UObject | any): DialogueSoundWaveProxy;
 }
 
-declare class ComboButtonWidgetStyle extends SlateWidgetStyleContainerBase { 
-	ComboButtonStyle: ComboButtonStyle;
-	static Load(ResourceName: string): ComboButtonWidgetStyle;
-	static Find(Outer: UObject, ResourceName: string): ComboButtonWidgetStyle;
-	static GetDefaultObject(): ComboButtonWidgetStyle;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ComboButtonWidgetStyle;
-	static C(Other: UObject | any): ComboButtonWidgetStyle;
+declare class DialogueContextMapping { 
+	Context: DialogueContext;
+	SoundWave: SoundWave;
+	LocalizationKeyFormat: string;
+	Proxy: DialogueSoundWaveProxy;
+	clone() : DialogueContextMapping;
+	static C(Other: UObject | any): DialogueContextMapping;
 }
 
-declare class FontOutlineSettings { 
-	OutlineSize: number;
-	OutlineMaterial: UObject;
-	OutlineColor: LinearColor;
-	bSeparateFillAlpha: boolean;
-	bApplyOutlineToDropShadows: boolean;
-	clone() : FontOutlineSettings;
-	static C(Other: UObject | any): FontOutlineSettings;
+declare class DialogueWave extends UObject { 
+	bMature: boolean;
+	bOverride_SubtitleOverride: boolean;
+	SpokenText: string;
+	SubtitleOverride: string;
+	VoiceActorDirection: string;
+	ContextMappings: DialogueContextMapping[];
+	LocalizationGUID: Guid;
+	static Load(ResourceName: string): DialogueWave;
+	static Find(Outer: UObject, ResourceName: string): DialogueWave;
+	static GetDefaultObject(): DialogueWave;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DialogueWave;
+	static C(Other: UObject | any): DialogueWave;
+	SpawnDialogueAttached(Context: DialogueContext,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,bStopWhenAttachedToDestroyed: boolean,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,bAutoDestroy: boolean): AudioComponent;
+	static SpawnDialogueAttached(Dialogue: DialogueWave,Context: DialogueContext,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,bStopWhenAttachedToDestroyed: boolean,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,bAutoDestroy: boolean): AudioComponent;
 }
 
-declare class SlateFontInfo { 
-	FontObject: UObject;
-	FontMaterial: UObject;
-	OutlineSettings: FontOutlineSettings;
-	TypefaceFontName: string;
-	Size: number;
-	FontName: string;
-	Hinting: EFontHinting;
-	clone() : SlateFontInfo;
-	static C(Other: UObject | any): SlateFontInfo;
+declare type EFFTSize = 'DefaultSize' | 'Min' | 'Small' | 'Medium' | 'Large' | 'Max' | 'EFFTSize_MAX';
+declare var EFFTSize : { DefaultSize:'DefaultSize',Min:'Min',Small:'Small',Medium:'Medium',Large:'Large',Max:'Max',EFFTSize_MAX:'EFFTSize_MAX', };
+declare type EFFTPeakInterpolationMethod = 'NearestNeighbor' | 'Linear' | 'Quadratic' | 'EFFTPeakInterpolationMethod_MAX';
+declare var EFFTPeakInterpolationMethod : { NearestNeighbor:'NearestNeighbor',Linear:'Linear',Quadratic:'Quadratic',EFFTPeakInterpolationMethod_MAX:'EFFTPeakInterpolationMethod_MAX', };
+declare type EFFTWindowType = 'None' | 'Hamming' | 'Hann' | 'Blackman' | 'EFFTWindowType_MAX';
+declare var EFFTWindowType : { None:'None',Hamming:'Hamming',Hann:'Hann',Blackman:'Blackman',EFFTWindowType_MAX:'EFFTWindowType_MAX', };
+declare class World extends UObject { 
+	Layers: Layer[];
+	ActiveGroupActors: Actor[];
+	ThumbnailInfo: ThumbnailInfo;
+	PersistentLevel: Level;
+	NetDriver: NetDriver;
+	LineBatcher: LineBatchComponent;
+	PersistentLineBatcher: LineBatchComponent;
+	ForegroundLineBatcher: LineBatchComponent;
+	NetworkManager: GameNetworkManager;
+	PhysicsCollisionHandler: PhysicsCollisionHandler;
+	ExtraReferencedObjects: UObject[];
+	PerModuleDataObjects: UObject[];
+	LevelSequenceActors: Actor[];
+	StreamingLevels: LevelStreaming[];
+	StreamingLevelsToConsider: StreamingLevelsToConsider;
+	StreamingLevelsPrefix: string;
+	CurrentLevelPendingVisibility: Level;
+	CurrentLevelPendingInvisibility: Level;
+	DemoNetDriver: DemoNetDriver;
+	MyParticleEventManager: ParticleEventManager;
+	DefaultPhysicsVolume: PhysicsVolume;
+	bAreConstraintsDirty: boolean;
+	NavigationSystem: NavigationSystemBase;
+	AuthorityGameMode: GameModeBase;
+	GameState: GameStateBase;
+	AISystem: AISystemBase;
+	AvoidanceManager: AvoidanceManager;
+	Levels: Level[];
+	LevelCollections: LevelCollection[];
+	CurrentLevel: Level;
+	OwningGameInstance: GameInstance;
+	ParameterCollectionInstances: MaterialParameterCollectionInstance[];
+	CanvasForRenderingToTarget: Canvas;
+	CanvasForDrawMaterialToRenderTarget: Canvas;
+	EditorViews: LevelViewportInfo[];
+	ComponentsThatNeedEndOfFrameUpdate: ActorComponent[];
+	ComponentsThatNeedEndOfFrameUpdate_OnGameThread: ActorComponent[];
+	SelectedLevels: Level[];
+	WorldComposition: WorldComposition;
+	PSCPool: WorldPSCPool;
+	static Load(ResourceName: string): World;
+	static Find(Outer: UObject, ResourceName: string): World;
+	static GetDefaultObject(): World;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): World;
+	K2_GetWorldSettings(): WorldSettings;
+	HandleTimelineScrubbed(): void;
+	static C(Other: UObject | any): World;
+	EditorDestroyActor(Actor: Actor,bShouldModifyLevel: boolean): boolean;
+	ExportNavigation(Path: string): string;
+	GetDefaultBrush(): Brush;
+	InvalidateModelGeometry(InLevel: Level): void;
+	RemoveLevelInstance(): void;
+	GetActors(ActorLayer: ActorLayer): Actor[];
+	BeginPlay(): void;
+	DestroyWorld(): void;
+	InitializeActorsForPlay(URL: URL): void;
+	GenerateNavigation(NavData: RecastNavMesh): void;
+	GetAllActorsOfClassAndTags(ActorClass: UnrealEngineClass,Tags_Accept: string[],Tags_Deny: string[],OutActors?: Actor[]): {OutActors: Actor[]};
+	GetLevels(): Level[];
+	GetModel(): Model;
+	GetWorldBounds(): Box;
+	IsGameWorld(): boolean;
+	IsPlayInEditor(): boolean;
+	IsPlayInPreview(): boolean;
+	LuminARLineTrace(ScreenPosition: Vector2D,TraceChannels: any,OutHitResults?: ARTraceResult[]): {OutHitResults: ARTraceResult[], $: boolean};
+	StartLuminARSession(LatentInfo: LatentActionInfo,Configuration: LuminARSessionConfig): void;
+	TraceChannelTestUtil(BatchOptions: TraceChannelTestBatchOptions,Start: Vector,End: Vector,SphereCapsuleRadius: number,CapsuleHalfHeight: number,BoxHalfSize: Vector,Orientation: Rotator,TraceChannel: ETraceTypeQuery,ObjectTypes: EObjectTypeQuery[],ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],bIgnoreSelf: boolean,DrawDebugType: EDrawDebugTrace,TraceColor: LinearColor,TraceHitColor: LinearColor,DrawTime: number): TraceQueryTestResults;
+	RunAllFunctionalTests(bNewLog: boolean,bRunLooped: boolean,FailedTestsReproString: string): boolean;
+	AutomationWaitForLoading(LatentInfo: LatentActionInfo): void;
+	DisableStatGroup(GroupName: string): void;
+	EnableStatGroup(GroupName: string): void;
+	SetScalabilityQualityLevelRelativeToMax(Value: number): void;
+	SetScalabilityQualityToEpic(): void;
+	SetScalabilityQualityToLow(): void;
+	TakeAutomationScreenshot(LatentInfo: LatentActionInfo,Name: string,Notes: string,Options: AutomationScreenshotOptions): void;
+	TakeAutomationScreenshotAtCamera(LatentInfo: LatentActionInfo,Camera: CameraActor,NameOverride: string,Notes: string,Options: AutomationScreenshotOptions): void;
+	TakeAutomationScreenshotOfUI(LatentInfo: LatentActionInfo,Name: string,Options: AutomationScreenshotOptions): void;
+	GetIsMyTurn(PlayerController: PlayerController,MatchID: string,bIsMyTurn?: boolean): {bIsMyTurn: boolean};
+	GetMyPlayerIndex(PlayerController: PlayerController,MatchID: string,PlayerIndex?: number): {PlayerIndex: number};
+	GetPlayerDisplayName(PlayerController: PlayerController,MatchID: string,PlayerIndex: number,PlayerDisplayName?: string): {PlayerDisplayName: string};
+	RegisterTurnBasedMatchInterfaceObject(PlayerController: PlayerController,UObject: UObject): void;
+	GetCachedAchievementDescription(PlayerController: PlayerController,AchievementID: string,bFoundID?: boolean,Title?: string,LockedDescription?: string,UnlockedDescription?: string,bHidden?: boolean): {bFoundID: boolean, Title: string, LockedDescription: string, UnlockedDescription: string, bHidden: boolean};
+	GetCachedAchievementProgress(PlayerController: PlayerController,AchievementID: string,bFoundID?: boolean,Progress?: number): {bFoundID: boolean, Progress: number};
+	CreateMoveToProxyObject(Pawn: Pawn,Destination: Vector,TargetActor: Actor,AcceptanceRadius: number,bStopOnOverlap: boolean): AIAsyncTaskBlueprintProxy;
+	SpawnAIFromClass(PawnClass: UnrealEngineClass,BehaviorTree: BehaviorTree,Location: Vector,Rotation: Rotator,bNoCollisionFail: boolean): Pawn;
+	LogBox(BoxShape: Box,text: string,ObjectColor: LinearColor,LogCategory: string,bAddToMessageLog: boolean): void;
+	LogLocation(Location: Vector,text: string,ObjectColor: LinearColor,Radius: number,LogCategory: string,bAddToMessageLog: boolean): void;
+	LogSegment(SegmentStart: Vector,SegmentEnd: Vector,text: string,ObjectColor: LinearColor,Thickness: number,CategoryName: string,bAddToMessageLog: boolean): void;
+	LogText(text: string,LogCategory: string,bAddToMessageLog: boolean): void;
+	BoxOverlapActors(BoxPos: Vector,BoxExtent: Vector,ObjectTypes: EObjectTypeQuery[],ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
+	BoxOverlapComponents(BoxPos: Vector,Extent: Vector,ObjectTypes: EObjectTypeQuery[],ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
+	BoxTraceMulti(Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
+	BoxTraceMultiByProfile(Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
+	BoxTraceMultiForObjects(Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
+	BoxTraceSingle(Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
+	BoxTraceSingleByProfile(Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
+	BoxTraceSingleForObjects(Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
+	CapsuleOverlapActors(CapsulePos: Vector,Radius: number,HalfHeight: number,ObjectTypes: EObjectTypeQuery[],ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
+	CapsuleOverlapComponents(CapsulePos: Vector,Radius: number,HalfHeight: number,ObjectTypes: EObjectTypeQuery[],ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
+	CapsuleTraceMulti(Start: Vector,End: Vector,Radius: number,HalfHeight: number,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
+	CapsuleTraceMultiByProfile(Start: Vector,End: Vector,Radius: number,HalfHeight: number,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
+	CapsuleTraceMultiForObjects(Start: Vector,End: Vector,Radius: number,HalfHeight: number,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
+	CapsuleTraceSingle(Start: Vector,End: Vector,Radius: number,HalfHeight: number,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
+	CapsuleTraceSingleByProfile(Start: Vector,End: Vector,Radius: number,HalfHeight: number,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
+	CapsuleTraceSingleForObjects(Start: Vector,End: Vector,Radius: number,HalfHeight: number,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
+	Delay(Duration: number,LatentInfo: LatentActionInfo): void;
+	DrawDebugArrow(LineStart: Vector,LineEnd: Vector,ArrowSize: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
+	DrawDebugBox(Center: Vector,Extent: Vector,LineColor: LinearColor,Rotation: Rotator,Duration: number,Thickness: number): void;
+	DrawDebugCapsule(Center: Vector,HalfHeight: number,Radius: number,Rotation: Rotator,LineColor: LinearColor,Duration: number,Thickness: number): void;
+	DrawDebugCircle(Center: Vector,Radius: number,NumSegments: number,LineColor: LinearColor,Duration: number,Thickness: number,YAxis: Vector,ZAxis: Vector,bDrawAxis: boolean): void;
+	DrawDebugCone(Origin: Vector,Direction: Vector,Length: number,AngleWidth: number,AngleHeight: number,NumSides: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
+	DrawDebugConeInDegrees(Origin: Vector,Direction: Vector,Length: number,AngleWidth: number,AngleHeight: number,NumSides: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
+	DrawDebugCoordinateSystem(AxisLoc: Vector,AxisRot: Rotator,Scale: number,Duration: number,Thickness: number): void;
+	DrawDebugCylinder(Start: Vector,End: Vector,Radius: number,Segments: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
+	DrawDebugFloatHistoryLocation(FloatHistory: DebugFloatHistory,DrawLocation: Vector,DrawSize: Vector2D,DrawColor: LinearColor,Duration: number): void;
+	DrawDebugFloatHistoryTransform(FloatHistory: DebugFloatHistory,DrawTransform: Transform,DrawSize: Vector2D,DrawColor: LinearColor,Duration: number): void;
+	DrawDebugFrustum(FrustumTransform: Transform,FrustumColor: LinearColor,Duration: number,Thickness: number): void;
+	DrawDebugLine(LineStart: Vector,LineEnd: Vector,LineColor: LinearColor,Duration: number,Thickness: number): void;
+	DrawDebugPlane(PlaneCoordinates: Plane,Location: Vector,Size: number,PlaneColor: LinearColor,Duration: number): void;
+	DrawDebugPoint(Position: Vector,Size: number,PointColor: LinearColor,Duration: number): void;
+	DrawDebugSphere(Center: Vector,Radius: number,Segments: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
+	DrawDebugString(TextLocation: Vector,text: string,TestBaseActor: Actor,TextColor: LinearColor,Duration: number): void;
+	ExecuteConsoleCommand(Command: string,SpecificPlayer: PlayerController): void;
+	FlushDebugStrings(): void;
+	FlushPersistentDebugLines(): void;
+	GetGameTimeInSeconds(): number;
+	IsDedicatedServer(): boolean;
+	IsServer(): boolean;
+	IsStandalone(): boolean;
+	K2_ClearAndInvalidateTimerHandle(Handle?: TimerHandle): {Handle: TimerHandle};
+	K2_ClearTimerHandle(Handle: TimerHandle): void;
+	K2_GetTimerElapsedTimeHandle(Handle: TimerHandle): number;
+	K2_GetTimerRemainingTimeHandle(Handle: TimerHandle): number;
+	K2_IsTimerActiveHandle(Handle: TimerHandle): boolean;
+	K2_IsTimerPausedHandle(Handle: TimerHandle): boolean;
+	K2_PauseTimerHandle(Handle: TimerHandle): void;
+	K2_TimerExistsHandle(Handle: TimerHandle): boolean;
+	K2_UnPauseTimerHandle(Handle: TimerHandle): void;
+	LineTraceMulti(Start: Vector,End: Vector,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
+	LineTraceMultiByProfile(Start: Vector,End: Vector,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
+	LineTraceMultiForObjects(Start: Vector,End: Vector,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
+	LineTraceSingle(Start: Vector,End: Vector,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
+	LineTraceSingleByProfile(Start: Vector,End: Vector,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
+	LineTraceSingleForObjects(Start: Vector,End: Vector,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
+	LoadAsset(Asset: UObject,OnLoaded: UnrealEngineDelegate<(Loaded: UObject) => void>,LatentInfo: LatentActionInfo): void;
+	LoadAssetClass(AssetClass: Class,OnLoaded: UnrealEngineDelegate<(Loaded: UnrealEngineClass) => void>,LatentInfo: LatentActionInfo): void;
+	PrintString(inString: string,bPrintToScreen: boolean,bPrintToLog: boolean,TextColor: LinearColor,Duration: number): void;
+	PrintText(InText: string,bPrintToScreen: boolean,bPrintToLog: boolean,TextColor: LinearColor,Duration: number): void;
+	QuitGame(SpecificPlayer: PlayerController,QuitPreference: EQuitPreference,bIgnorePlatformRestrictions: boolean): void;
+	RetriggerableDelay(Duration: number,LatentInfo: LatentActionInfo): void;
+	SetSuppressViewportTransitionMessage(bState: boolean): void;
+	SphereOverlapActors(SpherePos: Vector,SphereRadius: number,ObjectTypes: EObjectTypeQuery[],ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
+	SphereOverlapComponents(SpherePos: Vector,SphereRadius: number,ObjectTypes: EObjectTypeQuery[],ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
+	SphereTraceMulti(Start: Vector,End: Vector,Radius: number,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
+	SphereTraceMultiByProfile(Start: Vector,End: Vector,Radius: number,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
+	SphereTraceMultiForObjects(Start: Vector,End: Vector,Radius: number,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
+	SphereTraceSingle(Start: Vector,End: Vector,Radius: number,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
+	SphereTraceSingleByProfile(Start: Vector,End: Vector,Radius: number,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
+	SphereTraceSingleForObjects(Start: Vector,End: Vector,Radius: number,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
+	BeginDrawCanvasToRenderTarget(TextureRenderTarget: TextureRenderTarget2D,Canvas?: Canvas,Size?: Vector2D,Context?: DrawToRenderTargetContext): {Canvas: Canvas, Size: Vector2D, Context: DrawToRenderTargetContext};
+	ClearRenderTarget2D(TextureRenderTarget: TextureRenderTarget2D,ClearColor: LinearColor): void;
+	ConvertRenderTargetToTexture2DEditorOnly(RenderTarget: TextureRenderTarget2D,Texture: Texture2D): void;
+	CreateRenderTarget2D(Width: number,Height: number,Format: ETextureRenderTargetFormat,ClearColor: LinearColor): TextureRenderTarget2D;
+	DrawMaterialToRenderTarget(TextureRenderTarget: TextureRenderTarget2D,Material: MaterialInterface): void;
+	EndDrawCanvasToRenderTarget(Context: DrawToRenderTargetContext): void;
+	ExportRenderTarget(TextureRenderTarget: TextureRenderTarget2D,FilePath: string,Filename: string): void;
+	ExportTexture2D(Texture: Texture2D,FilePath: string,Filename: string): void;
+	ImportBufferAsTexture2D(Buffer: number[]): Texture2D;
+	ImportFileAsTexture2D(Filename: string): Texture2D;
+	ReadRenderTargetPixel(TextureRenderTarget: TextureRenderTarget2D,X: number,Y: number): Color;
+	ReadRenderTargetRawPixel(TextureRenderTarget: TextureRenderTarget2D,X: number,Y: number): LinearColor;
+	ReadRenderTargetRawUV(TextureRenderTarget: TextureRenderTarget2D,U: number,V: number): LinearColor;
+	ReadRenderTargetUV(TextureRenderTarget: TextureRenderTarget2D,U: number,V: number): Color;
+	MinimumAreaRectangle(InVerts: Vector[],SampleSurfaceNormal: Vector,OutRectCenter?: Vector,OutRectRotation?: Rotator,OutSideLengthX?: number,OutSideLengthY?: number,bDebugDraw?: boolean): {OutRectCenter: Vector, OutRectRotation: Rotator, OutSideLengthX: number, OutSideLengthY: number};
+	CreateDynamicMaterialInstance(Parent: MaterialInterface,OptionalName: string): MaterialInstanceDynamic;
+	GetScalarParameterValue(Collection: MaterialParameterCollection,ParameterName: string): number;
+	GetVectorParameterValue(Collection: MaterialParameterCollection,ParameterName: string): LinearColor;
+	SetScalarParameterValue(Collection: MaterialParameterCollection,ParameterName: string,ParameterValue: number): void;
+	SetVectorParameterValue(Collection: MaterialParameterCollection,ParameterName: string,ParameterValue: LinearColor): void;
+	ActivateReverbEffect(ReverbEffect: ReverbEffect,TagName: string,Priority: number,Volume: number,FadeTime: number): void;
+	ApplyRadialDamage(BaseDamage: number,Origin: Vector,DamageRadius: number,DamageTypeClass: UnrealEngineClass,IgnoreActors: Actor[],DamageCauser: Actor,InstigatedByController: Controller,bDoFullDamage: boolean,DamagePreventionChannel: ECollisionChannel): boolean;
+	ApplyRadialDamageWithFalloff(BaseDamage: number,MinimumDamage: number,Origin: Vector,DamageInnerRadius: number,DamageOuterRadius: number,DamageFalloff: number,DamageTypeClass: UnrealEngineClass,IgnoreActors: Actor[],DamageCauser: Actor,InstigatedByController: Controller,DamagePreventionChannel: ECollisionChannel): boolean;
+	AreAnyListenersWithinRange(Location: Vector,MaximumRange: number): boolean;
+	BeginDeferredActorSpawnFromClass(ActorClass: UnrealEngineClass,SpawnTransform: Transform,CollisionHandlingOverride: ESpawnActorCollisionHandlingMethod,Owner: Actor): Actor;
+	BeginSpawningActorFromBlueprint(Blueprint: Blueprint,SpawnTransform: Transform,bNoCollisionFail: boolean): Actor;
+	BeginSpawningActorFromClass(ActorClass: UnrealEngineClass,SpawnTransform: Transform,bNoCollisionFail: boolean,Owner: Actor): Actor;
+	Blueprint_PredictProjectilePath_Advanced(PredictParams: PredictProjectilePathParams,PredictResult?: PredictProjectilePathResult): {PredictResult: PredictProjectilePathResult, $: boolean};
+	Blueprint_PredictProjectilePath_ByObjectType(OutHit?: HitResult,OutPathPositions?: Vector[],OutLastTraceDestination?: Vector,StartPos?: Vector,LaunchVelocity?: Vector,bTracePath?: boolean,ProjectileRadius?: number,ObjectTypes?: EObjectTypeQuery[],bTraceComplex?: boolean,ActorsToIgnore?: Actor[],DrawDebugType?: EDrawDebugTrace,DrawDebugTime?: number,SimFrequency?: number,MaxSimTime?: number,OverrideGravityZ?: number): {OutHit: HitResult, OutPathPositions: Vector[], OutLastTraceDestination: Vector, $: boolean};
+	Blueprint_PredictProjectilePath_ByTraceChannel(OutHit?: HitResult,OutPathPositions?: Vector[],OutLastTraceDestination?: Vector,StartPos?: Vector,LaunchVelocity?: Vector,bTracePath?: boolean,ProjectileRadius?: number,TraceChannel?: ECollisionChannel,bTraceComplex?: boolean,ActorsToIgnore?: Actor[],DrawDebugType?: EDrawDebugTrace,DrawDebugTime?: number,SimFrequency?: number,MaxSimTime?: number,OverrideGravityZ?: number): {OutHit: HitResult, OutPathPositions: Vector[], OutLastTraceDestination: Vector, $: boolean};
+	BlueprintSuggestProjectileVelocity(TossVelocity?: Vector,StartLocation?: Vector,EndLocation?: Vector,LaunchSpeed?: number,OverrideGravityZ?: number,TraceOption?: ESuggestProjVelocityTraceOption,CollisionRadius?: number,bFavorHighArc?: boolean,bDrawDebug?: boolean): {TossVelocity: Vector, $: boolean};
+	ClearSoundMixClassOverride(InSoundMixModifier: SoundMix,InSoundClass: SoundClass,FadeOutTime: number): void;
+	ClearSoundMixModifiers(): void;
+	CreatePlayer(ControllerId: number,bSpawnPlayerController: boolean): PlayerController;
+	CreateSound2D(Sound: SoundBase,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,ConcurrencySettings: SoundConcurrency,bPersistAcrossLevelTransition: boolean,bAutoDestroy: boolean): AudioComponent;
+	DeactivateReverbEffect(TagName: string): void;
+	FlushLevelStreaming(): void;
+	GetAccurateRealTime(Seconds?: number,PartialSeconds?: number): {Seconds: number, PartialSeconds: number};
+	GetActorOfClass(ActorClass: UnrealEngineClass): Actor;
+	GetAllActorsOfClass(ActorClass: UnrealEngineClass,OutActors?: Actor[]): {OutActors: Actor[]};
+	GetAllActorsOfClassWithTag(ActorClass: UnrealEngineClass,Tag: string,OutActors?: Actor[]): {OutActors: Actor[]};
+	GetAllActorsWithInterface(Interface: UnrealEngineClass,OutActors?: Actor[]): {OutActors: Actor[]};
+	GetAllActorsWithTag(Tag: string,OutActors?: Actor[]): {OutActors: Actor[]};
+	GetAudioTimeSeconds(): number;
+	GetCurrentLevelName(bRemovePrefixString: boolean): string;
+	GetCurrentReverbEffect(): ReverbEffect;
+	GetEnableWorldRendering(): boolean;
+	GetGameInstance(): GameInstance;
+	GetGameMode(): GameModeBase;
+	GetGameState(): GameStateBase;
+	GetGlobalTimeDilation(): number;
+	GetMaxAudioChannelCount(): number;
+	GetPlayerCameraManager(PlayerIndex: number): PlayerCameraManager;
+	GetPlayerCharacter(PlayerIndex: number): Character;
+	GetPlayerController(PlayerIndex: number): PlayerController;
+	GetPlayerControllerFromID(ControllerId: number): PlayerController;
+	GetPlayerPawn(PlayerIndex: number): Pawn;
+	GetRealTimeSeconds(): number;
+	GetStreamingLevel(PackageName: string): LevelStreaming;
+	GetTimeSeconds(): number;
+	GetUnpausedTimeSeconds(): number;
+	GetViewportMouseCaptureMode(): EMouseCaptureMode;
+	GetWorldDeltaSeconds(): number;
+	GetWorldOriginLocation(): IntVector;
+	GrassOverlappingSphereCount(StaticMesh: StaticMesh,CenterPosition: Vector,Radius: number): number;
+	IsGamePaused(): boolean;
+	LoadStreamLevel(LevelName: string,bMakeVisibleAfterLoad: boolean,bShouldBlockOnLoad: boolean,LatentInfo: LatentActionInfo): void;
+	OpenLevel(LevelName: string,bAbsolute: boolean,Options: string): void;
+	PlayDialogue2D(Dialogue: DialogueWave,Context: DialogueContext,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number): void;
+	PlayDialogueAtLocation(Dialogue: DialogueWave,Context: DialogueContext,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation): void;
+	PlaySound2D(Sound: SoundBase,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,ConcurrencySettings: SoundConcurrency,OwningActor: Actor): void;
+	PlaySoundAtLocation(Sound: SoundBase,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,ConcurrencySettings: SoundConcurrency,OwningActor: Actor): void;
+	PlayWorldCameraShake(Shake: UnrealEngineClass,Epicenter: Vector,InnerRadius: number,OuterRadius: number,Falloff: number,bOrientShakeTowardsEpicenter: boolean): void;
+	PopSoundMixModifier(InSoundMixModifier: SoundMix): void;
+	PushSoundMixModifier(InSoundMixModifier: SoundMix): void;
+	RebaseLocalOriginOntoZero(WorldLocation: Vector): Vector;
+	RebaseZeroOriginOntoLocal(WorldLocation: Vector): Vector;
+	SetBaseSoundMix(InSoundMix: SoundMix): void;
+	SetEnableWorldRendering(bEnable: boolean): void;
+	SetGamePaused(bPaused: boolean): boolean;
+	SetGlobalListenerFocusParameters(FocusAzimuthScale: number,NonFocusAzimuthScale: number,FocusDistanceScale: number,NonFocusDistanceScale: number,FocusVolumeScale: number,NonFocusVolumeScale: number,FocusPriorityScale: number,NonFocusPriorityScale: number): void;
+	SetGlobalPitchModulation(PitchModulation: number,TimeSec: number): void;
+	SetGlobalTimeDilation(TimeDilation: number): void;
+	SetMaxAudioChannelsScaled(MaxChannelCountScale: number): void;
+	SetSoundMixClassOverride(InSoundMixModifier: SoundMix,InSoundClass: SoundClass,Volume: number,Pitch: number,FadeInTime: number,bApplyToChildren: boolean): void;
+	SetViewportMouseCaptureMode(MouseCaptureMode: EMouseCaptureMode): void;
+	SetWorldOriginLocation(NewLocation: IntVector): void;
+	SpawnDecalAtLocation(DecalMaterial: MaterialInterface,DecalSize: Vector,Location: Vector,Rotation: Rotator,LifeSpan: number): DecalComponent;
+	SpawnDialogue2D(Dialogue: DialogueWave,Context: DialogueContext,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,bAutoDestroy: boolean): AudioComponent;
+	SpawnDialogueAtLocation(Dialogue: DialogueWave,Context: DialogueContext,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,bAutoDestroy: boolean): AudioComponent;
+	SpawnEmitterAtLocation(EmitterTemplate: ParticleSystem,Location: Vector,Rotation: Rotator,Scale: Vector,bAutoDestroy: boolean,PoolingMethod: EPSCPoolMethod): ParticleSystemComponent;
+	SpawnForceFeedbackAtLocation(ForceFeedbackEffect: ForceFeedbackEffect,Location: Vector,Rotation: Rotator,bLooping: boolean,IntensityMultiplier: number,StartTime: number,AttenuationSettings: ForceFeedbackAttenuation,bAutoDestroy: boolean): ForceFeedbackComponent;
+	SpawnSound2D(Sound: SoundBase,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,ConcurrencySettings: SoundConcurrency,bPersistAcrossLevelTransition: boolean,bAutoDestroy: boolean): AudioComponent;
+	SpawnSoundAtLocation(Sound: SoundBase,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,ConcurrencySettings: SoundConcurrency,bAutoDestroy: boolean): AudioComponent;
+	SuggestProjectileVelocity_CustomArc(OutLaunchVelocity?: Vector,StartPos?: Vector,EndPos?: Vector,OverrideGravityZ?: number,ArcParam?: number): {OutLaunchVelocity: Vector, $: boolean};
+	UnloadStreamLevel(LevelName: string,LatentInfo: LatentActionInfo,bShouldBlockOnUnload: boolean): void;
+	FoliageOverlappingBoxCount(StaticMesh: StaticMesh,Box: Box): number;
+	FoliageOverlappingSphereCount(StaticMesh: StaticMesh,CenterPosition: Vector,Radius: number): number;
+	GetMousePositionOnViewport(): Vector2D;
+	GetViewportScale(): number;
+	GetViewportSize(): Vector2D;
+	GetViewportWidgetGeometry(): Geometry;
+	RemoveAllWidgets(): void;
+	Create(WidgetType: UnrealEngineClass,OwningPlayer: PlayerController): UserWidget;
+	GetAllWidgetsOfClass(FoundWidgets?: UserWidget[],WidgetClass?: UnrealEngineClass,TopLevelOnly?: boolean): {FoundWidgets: UserWidget[]};
+	GetAllWidgetsWithInterface(FoundWidgets?: UserWidget[],Interface?: UnrealEngineClass,TopLevelOnly?: boolean): {FoundWidgets: UserWidget[]};
+	GetSafeZonePadding(SafePadding?: Vector4,SafePaddingScale?: Vector2D,SpillOverPadding?: Vector4): {SafePadding: Vector4, SafePaddingScale: Vector2D, SpillOverPadding: Vector4};
+	SetHardwareCursor(CursorShape: EMouseCursor,CursorName: string,HotSpot: Vector2D): boolean;
+	AbsoluteToViewport(AbsoluteDesktopCoordinate: Vector2D,PixelPosition?: Vector2D,ViewportPosition?: Vector2D): {PixelPosition: Vector2D, ViewportPosition: Vector2D};
+	LocalToViewport(Geometry: Geometry,LocalCoordinate: Vector2D,PixelPosition?: Vector2D,ViewportPosition?: Vector2D): {PixelPosition: Vector2D, ViewportPosition: Vector2D};
+	ScreenToViewport(ScreenPosition: Vector2D,ViewportPosition?: Vector2D): {ViewportPosition: Vector2D};
+	ScreenToWidgetAbsolute(ScreenPosition: Vector2D,AbsoluteCoordinate?: Vector2D): {AbsoluteCoordinate: Vector2D};
+	ScreenToWidgetLocal(Geometry: Geometry,ScreenPosition: Vector2D,LocalCoordinate?: Vector2D): {LocalCoordinate: Vector2D};
+	AddMasterSubmixEffect(SubmixEffectPreset: SoundEffectSubmixPreset): void;
+	AddSourceEffectToPresetChain(PresetChain: SoundEffectSourcePresetChain,Entry: SourceEffectChainEntry): void;
+	ClearMasterSubmixEffects(): void;
+	GetMagnitudeForFrequencies(Frequencies: number[],Magnitudes?: number[],SubmixToAnalyze?: SoundSubmix): {Magnitudes: number[]};
+	GetNumberOfEntriesInSourceEffectChain(PresetChain: SoundEffectSourcePresetChain): number;
+	GetPhaseForFrequencies(Frequencies: number[],Phases?: number[],SubmixToAnalyze?: SoundSubmix): {Phases: number[]};
+	PauseRecordingOutput(SubmixToPause: SoundSubmix): void;
+	RemoveMasterSubmixEffect(SubmixEffectPreset: SoundEffectSubmixPreset): void;
+	RemoveSourceEffectFromPresetChain(PresetChain: SoundEffectSourcePresetChain,EntryIndex: number): void;
+	ResumeRecordingOutput(SubmixToPause: SoundSubmix): void;
+	SetBypassSourceEffectChainEntry(PresetChain: SoundEffectSourcePresetChain,EntryIndex: number,bBypassed: boolean): void;
+	StartAnalyzingOutput(SubmixToAnalyze: SoundSubmix,FFTSize: EFFTSize,InterpolationMethod: EFFTPeakInterpolationMethod,WindowType: EFFTWindowType,HopSize: number): void;
+	StartRecordingOutput(ExpectedDuration: number,SubmixToRecord: SoundSubmix): void;
+	StopAnalyzingOutput(SubmixToStopAnalyzing: SoundSubmix): void;
+	StopRecordingOutput(ExportType: EAudioRecordingExportType,Name: string,Path: string,SubmixToRecord: SoundSubmix,ExistingSoundWaveToOverwrite: SoundWave): SoundWave;
+	GetDeviceWorldPose(XRDeviceId: XRDeviceId,bIsTracked?: boolean,Orientation?: Rotator,bHasPositionalTracking?: boolean,Position?: Vector): {bIsTracked: boolean, Orientation: Rotator, bHasPositionalTracking: boolean, Position: Vector};
+	GetTrackingToWorldTransform(): Transform;
+	GetWorldToMetersScale(): number;
+	SetWorldToMetersScale(NewScale: number): void;
+	GetAllActorsOfClassMatchingTagQuery(ActorClass: UnrealEngineClass,GameplayTagQuery: GameplayTagQuery,OutActors?: Actor[]): {OutActors: Actor[]};
+	static EditorDestroyActor(World: World,Actor: Actor,bShouldModifyLevel: boolean): boolean;
+	static ExportNavigation(InWorld: World,Path: string): string;
+	static GetDefaultBrush(World: World): Brush;
+	static InvalidateModelGeometry(World: World,InLevel: Level): void;
+	static RemoveLevelInstance(World: World): void;
+	static GetActors(WorldContextObject: UObject,ActorLayer: ActorLayer): Actor[];
+	static BeginPlay(World: World): void;
+	static DestroyWorld(World: World): void;
+	static InitializeActorsForPlay(World: World,URL: URL): void;
+	static GenerateNavigation(InWorld: World,NavData: RecastNavMesh): void;
+	static GetAllActorsOfClassAndTags(WorldContextObject: UObject,ActorClass: UnrealEngineClass,Tags_Accept: string[],Tags_Deny: string[],OutActors?: Actor[]): {OutActors: Actor[]};
+	static GetLevels(World: World): Level[];
+	static GetModel(World: World): Model;
+	static GetWorldBounds(InWorld: World): Box;
+	static IsGameWorld(World: World): boolean;
+	static IsPlayInEditor(World: World): boolean;
+	static IsPlayInPreview(World: World): boolean;
+	static LuminARLineTrace(WorldContextObject: UObject,ScreenPosition: Vector2D,TraceChannels: any,OutHitResults?: ARTraceResult[]): {OutHitResults: ARTraceResult[], $: boolean};
+	static StartLuminARSession(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Configuration: LuminARSessionConfig): void;
+	static TraceChannelTestUtil(WorldContextObject: UObject,BatchOptions: TraceChannelTestBatchOptions,Start: Vector,End: Vector,SphereCapsuleRadius: number,CapsuleHalfHeight: number,BoxHalfSize: Vector,Orientation: Rotator,TraceChannel: ETraceTypeQuery,ObjectTypes: EObjectTypeQuery[],ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],bIgnoreSelf: boolean,DrawDebugType: EDrawDebugTrace,TraceColor: LinearColor,TraceHitColor: LinearColor,DrawTime: number): TraceQueryTestResults;
+	static RunAllFunctionalTests(WorldContextObject: UObject,bNewLog: boolean,bRunLooped: boolean,FailedTestsReproString: string): boolean;
+	static AutomationWaitForLoading(WorldContextObject: UObject,LatentInfo: LatentActionInfo): void;
+	static DisableStatGroup(WorldContextObject: UObject,GroupName: string): void;
+	static EnableStatGroup(WorldContextObject: UObject,GroupName: string): void;
+	static SetScalabilityQualityLevelRelativeToMax(WorldContextObject: UObject,Value: number): void;
+	static SetScalabilityQualityToEpic(WorldContextObject: UObject): void;
+	static SetScalabilityQualityToLow(WorldContextObject: UObject): void;
+	static TakeAutomationScreenshot(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Name: string,Notes: string,Options: AutomationScreenshotOptions): void;
+	static TakeAutomationScreenshotAtCamera(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Camera: CameraActor,NameOverride: string,Notes: string,Options: AutomationScreenshotOptions): void;
+	static TakeAutomationScreenshotOfUI(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Name: string,Options: AutomationScreenshotOptions): void;
+	static GetIsMyTurn(WorldContextObject: UObject,PlayerController: PlayerController,MatchID: string,bIsMyTurn?: boolean): {bIsMyTurn: boolean};
+	static GetMyPlayerIndex(WorldContextObject: UObject,PlayerController: PlayerController,MatchID: string,PlayerIndex?: number): {PlayerIndex: number};
+	static GetPlayerDisplayName(WorldContextObject: UObject,PlayerController: PlayerController,MatchID: string,PlayerIndex: number,PlayerDisplayName?: string): {PlayerDisplayName: string};
+	static RegisterTurnBasedMatchInterfaceObject(WorldContextObject: UObject,PlayerController: PlayerController,UObject: UObject): void;
+	static GetCachedAchievementDescription(WorldContextObject: UObject,PlayerController: PlayerController,AchievementID: string,bFoundID?: boolean,Title?: string,LockedDescription?: string,UnlockedDescription?: string,bHidden?: boolean): {bFoundID: boolean, Title: string, LockedDescription: string, UnlockedDescription: string, bHidden: boolean};
+	static GetCachedAchievementProgress(WorldContextObject: UObject,PlayerController: PlayerController,AchievementID: string,bFoundID?: boolean,Progress?: number): {bFoundID: boolean, Progress: number};
+	static CreateMoveToProxyObject(WorldContextObject: UObject,Pawn: Pawn,Destination: Vector,TargetActor: Actor,AcceptanceRadius: number,bStopOnOverlap: boolean): AIAsyncTaskBlueprintProxy;
+	static SpawnAIFromClass(WorldContextObject: UObject,PawnClass: UnrealEngineClass,BehaviorTree: BehaviorTree,Location: Vector,Rotation: Rotator,bNoCollisionFail: boolean): Pawn;
+	static LogBox(WorldContextObject: UObject,BoxShape: Box,text: string,ObjectColor: LinearColor,LogCategory: string,bAddToMessageLog: boolean): void;
+	static LogLocation(WorldContextObject: UObject,Location: Vector,text: string,ObjectColor: LinearColor,Radius: number,LogCategory: string,bAddToMessageLog: boolean): void;
+	static LogSegment(WorldContextObject: UObject,SegmentStart: Vector,SegmentEnd: Vector,text: string,ObjectColor: LinearColor,Thickness: number,CategoryName: string,bAddToMessageLog: boolean): void;
+	static LogText(WorldContextObject: UObject,text: string,LogCategory: string,bAddToMessageLog: boolean): void;
+	static BoxOverlapActors(WorldContextObject: UObject,BoxPos: Vector,BoxExtent: Vector,ObjectTypes: EObjectTypeQuery[],ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
+	static BoxOverlapComponents(WorldContextObject: UObject,BoxPos: Vector,Extent: Vector,ObjectTypes: EObjectTypeQuery[],ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
+	static BoxTraceMulti(WorldContextObject: UObject,Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
+	static BoxTraceMultiByProfile(WorldContextObject: UObject,Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
+	static BoxTraceMultiForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
+	static BoxTraceSingle(WorldContextObject: UObject,Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
+	static BoxTraceSingleByProfile(WorldContextObject: UObject,Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
+	static BoxTraceSingleForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,HalfSize: Vector,Orientation: Rotator,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
+	static CapsuleOverlapActors(WorldContextObject: UObject,CapsulePos: Vector,Radius: number,HalfHeight: number,ObjectTypes: EObjectTypeQuery[],ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
+	static CapsuleOverlapComponents(WorldContextObject: UObject,CapsulePos: Vector,Radius: number,HalfHeight: number,ObjectTypes: EObjectTypeQuery[],ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
+	static CapsuleTraceMulti(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
+	static CapsuleTraceMultiByProfile(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
+	static CapsuleTraceMultiForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
+	static CapsuleTraceSingle(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
+	static CapsuleTraceSingleByProfile(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
+	static CapsuleTraceSingleForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,HalfHeight: number,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
+	static Delay(WorldContextObject: UObject,Duration: number,LatentInfo: LatentActionInfo): void;
+	static DrawDebugArrow(WorldContextObject: UObject,LineStart: Vector,LineEnd: Vector,ArrowSize: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
+	static DrawDebugBox(WorldContextObject: UObject,Center: Vector,Extent: Vector,LineColor: LinearColor,Rotation: Rotator,Duration: number,Thickness: number): void;
+	static DrawDebugCapsule(WorldContextObject: UObject,Center: Vector,HalfHeight: number,Radius: number,Rotation: Rotator,LineColor: LinearColor,Duration: number,Thickness: number): void;
+	static DrawDebugCircle(WorldContextObject: UObject,Center: Vector,Radius: number,NumSegments: number,LineColor: LinearColor,Duration: number,Thickness: number,YAxis: Vector,ZAxis: Vector,bDrawAxis: boolean): void;
+	static DrawDebugCone(WorldContextObject: UObject,Origin: Vector,Direction: Vector,Length: number,AngleWidth: number,AngleHeight: number,NumSides: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
+	static DrawDebugConeInDegrees(WorldContextObject: UObject,Origin: Vector,Direction: Vector,Length: number,AngleWidth: number,AngleHeight: number,NumSides: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
+	static DrawDebugCoordinateSystem(WorldContextObject: UObject,AxisLoc: Vector,AxisRot: Rotator,Scale: number,Duration: number,Thickness: number): void;
+	static DrawDebugCylinder(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,Segments: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
+	static DrawDebugFloatHistoryLocation(WorldContextObject: UObject,FloatHistory: DebugFloatHistory,DrawLocation: Vector,DrawSize: Vector2D,DrawColor: LinearColor,Duration: number): void;
+	static DrawDebugFloatHistoryTransform(WorldContextObject: UObject,FloatHistory: DebugFloatHistory,DrawTransform: Transform,DrawSize: Vector2D,DrawColor: LinearColor,Duration: number): void;
+	static DrawDebugFrustum(WorldContextObject: UObject,FrustumTransform: Transform,FrustumColor: LinearColor,Duration: number,Thickness: number): void;
+	static DrawDebugLine(WorldContextObject: UObject,LineStart: Vector,LineEnd: Vector,LineColor: LinearColor,Duration: number,Thickness: number): void;
+	static DrawDebugPlane(WorldContextObject: UObject,PlaneCoordinates: Plane,Location: Vector,Size: number,PlaneColor: LinearColor,Duration: number): void;
+	static DrawDebugPoint(WorldContextObject: UObject,Position: Vector,Size: number,PointColor: LinearColor,Duration: number): void;
+	static DrawDebugSphere(WorldContextObject: UObject,Center: Vector,Radius: number,Segments: number,LineColor: LinearColor,Duration: number,Thickness: number): void;
+	static DrawDebugString(WorldContextObject: UObject,TextLocation: Vector,text: string,TestBaseActor: Actor,TextColor: LinearColor,Duration: number): void;
+	static ExecuteConsoleCommand(WorldContextObject: UObject,Command: string,SpecificPlayer: PlayerController): void;
+	static FlushDebugStrings(WorldContextObject: UObject): void;
+	static FlushPersistentDebugLines(WorldContextObject: UObject): void;
+	static GetGameTimeInSeconds(WorldContextObject: UObject): number;
+	static IsDedicatedServer(WorldContextObject: UObject): boolean;
+	static IsServer(WorldContextObject: UObject): boolean;
+	static IsStandalone(WorldContextObject: UObject): boolean;
+	static K2_ClearAndInvalidateTimerHandle(WorldContextObject: UObject,Handle?: TimerHandle): {Handle: TimerHandle};
+	static K2_ClearTimerHandle(WorldContextObject: UObject,Handle: TimerHandle): void;
+	static K2_GetTimerElapsedTimeHandle(WorldContextObject: UObject,Handle: TimerHandle): number;
+	static K2_GetTimerRemainingTimeHandle(WorldContextObject: UObject,Handle: TimerHandle): number;
+	static K2_IsTimerActiveHandle(WorldContextObject: UObject,Handle: TimerHandle): boolean;
+	static K2_IsTimerPausedHandle(WorldContextObject: UObject,Handle: TimerHandle): boolean;
+	static K2_PauseTimerHandle(WorldContextObject: UObject,Handle: TimerHandle): void;
+	static K2_TimerExistsHandle(WorldContextObject: UObject,Handle: TimerHandle): boolean;
+	static K2_UnPauseTimerHandle(WorldContextObject: UObject,Handle: TimerHandle): void;
+	static LineTraceMulti(WorldContextObject: UObject,Start: Vector,End: Vector,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
+	static LineTraceMultiByProfile(WorldContextObject: UObject,Start: Vector,End: Vector,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
+	static LineTraceMultiForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
+	static LineTraceSingle(WorldContextObject: UObject,Start: Vector,End: Vector,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
+	static LineTraceSingleByProfile(WorldContextObject: UObject,Start: Vector,End: Vector,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
+	static LineTraceSingleForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
+	static LoadAsset(WorldContextObject: UObject,Asset: UObject,OnLoaded: UnrealEngineDelegate<(Loaded: UObject) => void>,LatentInfo: LatentActionInfo): void;
+	static LoadAssetClass(WorldContextObject: UObject,AssetClass: Class,OnLoaded: UnrealEngineDelegate<(Loaded: UnrealEngineClass) => void>,LatentInfo: LatentActionInfo): void;
+	static PrintString(WorldContextObject: UObject,inString: string,bPrintToScreen: boolean,bPrintToLog: boolean,TextColor: LinearColor,Duration: number): void;
+	static PrintText(WorldContextObject: UObject,InText: string,bPrintToScreen: boolean,bPrintToLog: boolean,TextColor: LinearColor,Duration: number): void;
+	static QuitGame(WorldContextObject: UObject,SpecificPlayer: PlayerController,QuitPreference: EQuitPreference,bIgnorePlatformRestrictions: boolean): void;
+	static RetriggerableDelay(WorldContextObject: UObject,Duration: number,LatentInfo: LatentActionInfo): void;
+	static SetSuppressViewportTransitionMessage(WorldContextObject: UObject,bState: boolean): void;
+	static SphereOverlapActors(WorldContextObject: UObject,SpherePos: Vector,SphereRadius: number,ObjectTypes: EObjectTypeQuery[],ActorClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
+	static SphereOverlapComponents(WorldContextObject: UObject,SpherePos: Vector,SphereRadius: number,ObjectTypes: EObjectTypeQuery[],ComponentClassFilter: UnrealEngineClass,ActorsToIgnore: Actor[],OutComponents?: PrimitiveComponent[]): {OutComponents: PrimitiveComponent[], $: boolean};
+	static SphereTraceMulti(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
+	static SphereTraceMultiByProfile(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
+	static SphereTraceMultiForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHits?: HitResult[],bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHits: HitResult[], $: boolean};
+	static SphereTraceSingle(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
+	static SphereTraceSingleByProfile(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
+	static SphereTraceSingleForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,Radius: number,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
+	static BeginDrawCanvasToRenderTarget(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,Canvas?: Canvas,Size?: Vector2D,Context?: DrawToRenderTargetContext): {Canvas: Canvas, Size: Vector2D, Context: DrawToRenderTargetContext};
+	static ClearRenderTarget2D(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,ClearColor: LinearColor): void;
+	static ConvertRenderTargetToTexture2DEditorOnly(WorldContextObject: UObject,RenderTarget: TextureRenderTarget2D,Texture: Texture2D): void;
+	static CreateRenderTarget2D(WorldContextObject: UObject,Width: number,Height: number,Format: ETextureRenderTargetFormat,ClearColor: LinearColor): TextureRenderTarget2D;
+	static DrawMaterialToRenderTarget(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,Material: MaterialInterface): void;
+	static EndDrawCanvasToRenderTarget(WorldContextObject: UObject,Context: DrawToRenderTargetContext): void;
+	static ExportRenderTarget(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,FilePath: string,Filename: string): void;
+	static ExportTexture2D(WorldContextObject: UObject,Texture: Texture2D,FilePath: string,Filename: string): void;
+	static ImportBufferAsTexture2D(WorldContextObject: UObject,Buffer: number[]): Texture2D;
+	static ImportFileAsTexture2D(WorldContextObject: UObject,Filename: string): Texture2D;
+	static ReadRenderTargetPixel(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,X: number,Y: number): Color;
+	static ReadRenderTargetRawPixel(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,X: number,Y: number): LinearColor;
+	static ReadRenderTargetRawUV(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,U: number,V: number): LinearColor;
+	static ReadRenderTargetUV(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,U: number,V: number): Color;
+	static MinimumAreaRectangle(WorldContextObject: UObject,InVerts: Vector[],SampleSurfaceNormal: Vector,OutRectCenter?: Vector,OutRectRotation?: Rotator,OutSideLengthX?: number,OutSideLengthY?: number,bDebugDraw?: boolean): {OutRectCenter: Vector, OutRectRotation: Rotator, OutSideLengthX: number, OutSideLengthY: number};
+	static CreateDynamicMaterialInstance(WorldContextObject: UObject,Parent: MaterialInterface,OptionalName: string): MaterialInstanceDynamic;
+	static GetScalarParameterValue(WorldContextObject: UObject,Collection: MaterialParameterCollection,ParameterName: string): number;
+	static GetVectorParameterValue(WorldContextObject: UObject,Collection: MaterialParameterCollection,ParameterName: string): LinearColor;
+	static SetScalarParameterValue(WorldContextObject: UObject,Collection: MaterialParameterCollection,ParameterName: string,ParameterValue: number): void;
+	static SetVectorParameterValue(WorldContextObject: UObject,Collection: MaterialParameterCollection,ParameterName: string,ParameterValue: LinearColor): void;
+	static ActivateReverbEffect(WorldContextObject: UObject,ReverbEffect: ReverbEffect,TagName: string,Priority: number,Volume: number,FadeTime: number): void;
+	static ApplyRadialDamage(WorldContextObject: UObject,BaseDamage: number,Origin: Vector,DamageRadius: number,DamageTypeClass: UnrealEngineClass,IgnoreActors: Actor[],DamageCauser: Actor,InstigatedByController: Controller,bDoFullDamage: boolean,DamagePreventionChannel: ECollisionChannel): boolean;
+	static ApplyRadialDamageWithFalloff(WorldContextObject: UObject,BaseDamage: number,MinimumDamage: number,Origin: Vector,DamageInnerRadius: number,DamageOuterRadius: number,DamageFalloff: number,DamageTypeClass: UnrealEngineClass,IgnoreActors: Actor[],DamageCauser: Actor,InstigatedByController: Controller,DamagePreventionChannel: ECollisionChannel): boolean;
+	static AreAnyListenersWithinRange(WorldContextObject: UObject,Location: Vector,MaximumRange: number): boolean;
+	static BeginDeferredActorSpawnFromClass(WorldContextObject: UObject,ActorClass: UnrealEngineClass,SpawnTransform: Transform,CollisionHandlingOverride: ESpawnActorCollisionHandlingMethod,Owner: Actor): Actor;
+	static BeginSpawningActorFromBlueprint(WorldContextObject: UObject,Blueprint: Blueprint,SpawnTransform: Transform,bNoCollisionFail: boolean): Actor;
+	static BeginSpawningActorFromClass(WorldContextObject: UObject,ActorClass: UnrealEngineClass,SpawnTransform: Transform,bNoCollisionFail: boolean,Owner: Actor): Actor;
+	static Blueprint_PredictProjectilePath_Advanced(WorldContextObject: UObject,PredictParams: PredictProjectilePathParams,PredictResult?: PredictProjectilePathResult): {PredictResult: PredictProjectilePathResult, $: boolean};
+	static Blueprint_PredictProjectilePath_ByObjectType(WorldContextObject: UObject,OutHit?: HitResult,OutPathPositions?: Vector[],OutLastTraceDestination?: Vector,StartPos?: Vector,LaunchVelocity?: Vector,bTracePath?: boolean,ProjectileRadius?: number,ObjectTypes?: EObjectTypeQuery[],bTraceComplex?: boolean,ActorsToIgnore?: Actor[],DrawDebugType?: EDrawDebugTrace,DrawDebugTime?: number,SimFrequency?: number,MaxSimTime?: number,OverrideGravityZ?: number): {OutHit: HitResult, OutPathPositions: Vector[], OutLastTraceDestination: Vector, $: boolean};
+	static Blueprint_PredictProjectilePath_ByTraceChannel(WorldContextObject: UObject,OutHit?: HitResult,OutPathPositions?: Vector[],OutLastTraceDestination?: Vector,StartPos?: Vector,LaunchVelocity?: Vector,bTracePath?: boolean,ProjectileRadius?: number,TraceChannel?: ECollisionChannel,bTraceComplex?: boolean,ActorsToIgnore?: Actor[],DrawDebugType?: EDrawDebugTrace,DrawDebugTime?: number,SimFrequency?: number,MaxSimTime?: number,OverrideGravityZ?: number): {OutHit: HitResult, OutPathPositions: Vector[], OutLastTraceDestination: Vector, $: boolean};
+	static BlueprintSuggestProjectileVelocity(WorldContextObject: UObject,TossVelocity?: Vector,StartLocation?: Vector,EndLocation?: Vector,LaunchSpeed?: number,OverrideGravityZ?: number,TraceOption?: ESuggestProjVelocityTraceOption,CollisionRadius?: number,bFavorHighArc?: boolean,bDrawDebug?: boolean): {TossVelocity: Vector, $: boolean};
+	static ClearSoundMixClassOverride(WorldContextObject: UObject,InSoundMixModifier: SoundMix,InSoundClass: SoundClass,FadeOutTime: number): void;
+	static ClearSoundMixModifiers(WorldContextObject: UObject): void;
+	static CreatePlayer(WorldContextObject: UObject,ControllerId: number,bSpawnPlayerController: boolean): PlayerController;
+	static CreateSound2D(WorldContextObject: UObject,Sound: SoundBase,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,ConcurrencySettings: SoundConcurrency,bPersistAcrossLevelTransition: boolean,bAutoDestroy: boolean): AudioComponent;
+	static DeactivateReverbEffect(WorldContextObject: UObject,TagName: string): void;
+	static FlushLevelStreaming(WorldContextObject: UObject): void;
+	static GetAccurateRealTime(WorldContextObject: UObject,Seconds?: number,PartialSeconds?: number): {Seconds: number, PartialSeconds: number};
+	static GetActorOfClass(WorldContextObject: UObject,ActorClass: UnrealEngineClass): Actor;
+	static GetAllActorsOfClass(WorldContextObject: UObject,ActorClass: UnrealEngineClass,OutActors?: Actor[]): {OutActors: Actor[]};
+	static GetAllActorsOfClassWithTag(WorldContextObject: UObject,ActorClass: UnrealEngineClass,Tag: string,OutActors?: Actor[]): {OutActors: Actor[]};
+	static GetAllActorsWithInterface(WorldContextObject: UObject,Interface: UnrealEngineClass,OutActors?: Actor[]): {OutActors: Actor[]};
+	static GetAllActorsWithTag(WorldContextObject: UObject,Tag: string,OutActors?: Actor[]): {OutActors: Actor[]};
+	static GetAudioTimeSeconds(WorldContextObject: UObject): number;
+	static GetCurrentLevelName(WorldContextObject: UObject,bRemovePrefixString: boolean): string;
+	static GetCurrentReverbEffect(WorldContextObject: UObject): ReverbEffect;
+	static GetEnableWorldRendering(WorldContextObject: UObject): boolean;
+	static GetGameInstance(WorldContextObject: UObject): GameInstance;
+	static GetGameMode(WorldContextObject: UObject): GameModeBase;
+	static GetGameState(WorldContextObject: UObject): GameStateBase;
+	static GetGlobalTimeDilation(WorldContextObject: UObject): number;
+	static GetMaxAudioChannelCount(WorldContextObject: UObject): number;
+	static GetPlayerCameraManager(WorldContextObject: UObject,PlayerIndex: number): PlayerCameraManager;
+	static GetPlayerCharacter(WorldContextObject: UObject,PlayerIndex: number): Character;
+	static GetPlayerController(WorldContextObject: UObject,PlayerIndex: number): PlayerController;
+	static GetPlayerControllerFromID(WorldContextObject: UObject,ControllerId: number): PlayerController;
+	static GetPlayerPawn(WorldContextObject: UObject,PlayerIndex: number): Pawn;
+	static GetRealTimeSeconds(WorldContextObject: UObject): number;
+	static GetStreamingLevel(WorldContextObject: UObject,PackageName: string): LevelStreaming;
+	static GetTimeSeconds(WorldContextObject: UObject): number;
+	static GetUnpausedTimeSeconds(WorldContextObject: UObject): number;
+	static GetViewportMouseCaptureMode(WorldContextObject: UObject): EMouseCaptureMode;
+	static GetWorldDeltaSeconds(WorldContextObject: UObject): number;
+	static GetWorldOriginLocation(WorldContextObject: UObject): IntVector;
+	static GrassOverlappingSphereCount(WorldContextObject: UObject,StaticMesh: StaticMesh,CenterPosition: Vector,Radius: number): number;
+	static IsGamePaused(WorldContextObject: UObject): boolean;
+	static LoadStreamLevel(WorldContextObject: UObject,LevelName: string,bMakeVisibleAfterLoad: boolean,bShouldBlockOnLoad: boolean,LatentInfo: LatentActionInfo): void;
+	static OpenLevel(WorldContextObject: UObject,LevelName: string,bAbsolute: boolean,Options: string): void;
+	static PlayDialogue2D(WorldContextObject: UObject,Dialogue: DialogueWave,Context: DialogueContext,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number): void;
+	static PlayDialogueAtLocation(WorldContextObject: UObject,Dialogue: DialogueWave,Context: DialogueContext,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation): void;
+	static PlaySound2D(WorldContextObject: UObject,Sound: SoundBase,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,ConcurrencySettings: SoundConcurrency,OwningActor: Actor): void;
+	static PlaySoundAtLocation(WorldContextObject: UObject,Sound: SoundBase,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,ConcurrencySettings: SoundConcurrency,OwningActor: Actor): void;
+	static PlayWorldCameraShake(WorldContextObject: UObject,Shake: UnrealEngineClass,Epicenter: Vector,InnerRadius: number,OuterRadius: number,Falloff: number,bOrientShakeTowardsEpicenter: boolean): void;
+	static PopSoundMixModifier(WorldContextObject: UObject,InSoundMixModifier: SoundMix): void;
+	static PushSoundMixModifier(WorldContextObject: UObject,InSoundMixModifier: SoundMix): void;
+	static RebaseLocalOriginOntoZero(WorldContextObject: UObject,WorldLocation: Vector): Vector;
+	static RebaseZeroOriginOntoLocal(WorldContextObject: UObject,WorldLocation: Vector): Vector;
+	static SetBaseSoundMix(WorldContextObject: UObject,InSoundMix: SoundMix): void;
+	static SetEnableWorldRendering(WorldContextObject: UObject,bEnable: boolean): void;
+	static SetGamePaused(WorldContextObject: UObject,bPaused: boolean): boolean;
+	static SetGlobalListenerFocusParameters(WorldContextObject: UObject,FocusAzimuthScale: number,NonFocusAzimuthScale: number,FocusDistanceScale: number,NonFocusDistanceScale: number,FocusVolumeScale: number,NonFocusVolumeScale: number,FocusPriorityScale: number,NonFocusPriorityScale: number): void;
+	static SetGlobalPitchModulation(WorldContextObject: UObject,PitchModulation: number,TimeSec: number): void;
+	static SetGlobalTimeDilation(WorldContextObject: UObject,TimeDilation: number): void;
+	static SetMaxAudioChannelsScaled(WorldContextObject: UObject,MaxChannelCountScale: number): void;
+	static SetSoundMixClassOverride(WorldContextObject: UObject,InSoundMixModifier: SoundMix,InSoundClass: SoundClass,Volume: number,Pitch: number,FadeInTime: number,bApplyToChildren: boolean): void;
+	static SetViewportMouseCaptureMode(WorldContextObject: UObject,MouseCaptureMode: EMouseCaptureMode): void;
+	static SetWorldOriginLocation(WorldContextObject: UObject,NewLocation: IntVector): void;
+	static SpawnDecalAtLocation(WorldContextObject: UObject,DecalMaterial: MaterialInterface,DecalSize: Vector,Location: Vector,Rotation: Rotator,LifeSpan: number): DecalComponent;
+	static SpawnDialogue2D(WorldContextObject: UObject,Dialogue: DialogueWave,Context: DialogueContext,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,bAutoDestroy: boolean): AudioComponent;
+	static SpawnDialogueAtLocation(WorldContextObject: UObject,Dialogue: DialogueWave,Context: DialogueContext,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,bAutoDestroy: boolean): AudioComponent;
+	static SpawnEmitterAtLocation(WorldContextObject: UObject,EmitterTemplate: ParticleSystem,Location: Vector,Rotation: Rotator,Scale: Vector,bAutoDestroy: boolean,PoolingMethod: EPSCPoolMethod): ParticleSystemComponent;
+	static SpawnForceFeedbackAtLocation(WorldContextObject: UObject,ForceFeedbackEffect: ForceFeedbackEffect,Location: Vector,Rotation: Rotator,bLooping: boolean,IntensityMultiplier: number,StartTime: number,AttenuationSettings: ForceFeedbackAttenuation,bAutoDestroy: boolean): ForceFeedbackComponent;
+	static SpawnSound2D(WorldContextObject: UObject,Sound: SoundBase,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,ConcurrencySettings: SoundConcurrency,bPersistAcrossLevelTransition: boolean,bAutoDestroy: boolean): AudioComponent;
+	static SpawnSoundAtLocation(WorldContextObject: UObject,Sound: SoundBase,Location: Vector,Rotation: Rotator,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,AttenuationSettings: SoundAttenuation,ConcurrencySettings: SoundConcurrency,bAutoDestroy: boolean): AudioComponent;
+	static SuggestProjectileVelocity_CustomArc(WorldContextObject: UObject,OutLaunchVelocity?: Vector,StartPos?: Vector,EndPos?: Vector,OverrideGravityZ?: number,ArcParam?: number): {OutLaunchVelocity: Vector, $: boolean};
+	static UnloadStreamLevel(WorldContextObject: UObject,LevelName: string,LatentInfo: LatentActionInfo,bShouldBlockOnUnload: boolean): void;
+	static FoliageOverlappingBoxCount(WorldContextObject: UObject,StaticMesh: StaticMesh,Box: Box): number;
+	static FoliageOverlappingSphereCount(WorldContextObject: UObject,StaticMesh: StaticMesh,CenterPosition: Vector,Radius: number): number;
+	static GetMousePositionOnViewport(WorldContextObject: UObject): Vector2D;
+	static GetViewportScale(WorldContextObject: UObject): number;
+	static GetViewportSize(WorldContextObject: UObject): Vector2D;
+	static GetViewportWidgetGeometry(WorldContextObject: UObject): Geometry;
+	static RemoveAllWidgets(WorldContextObject: UObject): void;
+	static Create(WorldContextObject: UObject,WidgetType: UnrealEngineClass,OwningPlayer: PlayerController): UserWidget;
+	static GetAllWidgetsOfClass(WorldContextObject: UObject,FoundWidgets?: UserWidget[],WidgetClass?: UnrealEngineClass,TopLevelOnly?: boolean): {FoundWidgets: UserWidget[]};
+	static GetAllWidgetsWithInterface(WorldContextObject: UObject,FoundWidgets?: UserWidget[],Interface?: UnrealEngineClass,TopLevelOnly?: boolean): {FoundWidgets: UserWidget[]};
+	static GetSafeZonePadding(WorldContextObject: UObject,SafePadding?: Vector4,SafePaddingScale?: Vector2D,SpillOverPadding?: Vector4): {SafePadding: Vector4, SafePaddingScale: Vector2D, SpillOverPadding: Vector4};
+	static SetHardwareCursor(WorldContextObject: UObject,CursorShape: EMouseCursor,CursorName: string,HotSpot: Vector2D): boolean;
+	static AbsoluteToViewport(WorldContextObject: UObject,AbsoluteDesktopCoordinate: Vector2D,PixelPosition?: Vector2D,ViewportPosition?: Vector2D): {PixelPosition: Vector2D, ViewportPosition: Vector2D};
+	static LocalToViewport(WorldContextObject: UObject,Geometry: Geometry,LocalCoordinate: Vector2D,PixelPosition?: Vector2D,ViewportPosition?: Vector2D): {PixelPosition: Vector2D, ViewportPosition: Vector2D};
+	static ScreenToViewport(WorldContextObject: UObject,ScreenPosition: Vector2D,ViewportPosition?: Vector2D): {ViewportPosition: Vector2D};
+	static ScreenToWidgetAbsolute(WorldContextObject: UObject,ScreenPosition: Vector2D,AbsoluteCoordinate?: Vector2D): {AbsoluteCoordinate: Vector2D};
+	static ScreenToWidgetLocal(WorldContextObject: UObject,Geometry: Geometry,ScreenPosition: Vector2D,LocalCoordinate?: Vector2D): {LocalCoordinate: Vector2D};
+	static AddMasterSubmixEffect(WorldContextObject: UObject,SubmixEffectPreset: SoundEffectSubmixPreset): void;
+	static AddSourceEffectToPresetChain(WorldContextObject: UObject,PresetChain: SoundEffectSourcePresetChain,Entry: SourceEffectChainEntry): void;
+	static ClearMasterSubmixEffects(WorldContextObject: UObject): void;
+	static GetMagnitudeForFrequencies(WorldContextObject: UObject,Frequencies: number[],Magnitudes?: number[],SubmixToAnalyze?: SoundSubmix): {Magnitudes: number[]};
+	static GetNumberOfEntriesInSourceEffectChain(WorldContextObject: UObject,PresetChain: SoundEffectSourcePresetChain): number;
+	static GetPhaseForFrequencies(WorldContextObject: UObject,Frequencies: number[],Phases?: number[],SubmixToAnalyze?: SoundSubmix): {Phases: number[]};
+	static PauseRecordingOutput(WorldContextObject: UObject,SubmixToPause: SoundSubmix): void;
+	static RemoveMasterSubmixEffect(WorldContextObject: UObject,SubmixEffectPreset: SoundEffectSubmixPreset): void;
+	static RemoveSourceEffectFromPresetChain(WorldContextObject: UObject,PresetChain: SoundEffectSourcePresetChain,EntryIndex: number): void;
+	static ResumeRecordingOutput(WorldContextObject: UObject,SubmixToPause: SoundSubmix): void;
+	static SetBypassSourceEffectChainEntry(WorldContextObject: UObject,PresetChain: SoundEffectSourcePresetChain,EntryIndex: number,bBypassed: boolean): void;
+	static StartAnalyzingOutput(WorldContextObject: UObject,SubmixToAnalyze: SoundSubmix,FFTSize: EFFTSize,InterpolationMethod: EFFTPeakInterpolationMethod,WindowType: EFFTWindowType,HopSize: number): void;
+	static StartRecordingOutput(WorldContextObject: UObject,ExpectedDuration: number,SubmixToRecord: SoundSubmix): void;
+	static StopAnalyzingOutput(WorldContextObject: UObject,SubmixToStopAnalyzing: SoundSubmix): void;
+	static StopRecordingOutput(WorldContextObject: UObject,ExportType: EAudioRecordingExportType,Name: string,Path: string,SubmixToRecord: SoundSubmix,ExistingSoundWaveToOverwrite: SoundWave): SoundWave;
+	static GetDeviceWorldPose(WorldContext: UObject,XRDeviceId: XRDeviceId,bIsTracked?: boolean,Orientation?: Rotator,bHasPositionalTracking?: boolean,Position?: Vector): {bIsTracked: boolean, Orientation: Rotator, bHasPositionalTracking: boolean, Position: Vector};
+	static GetTrackingToWorldTransform(WorldContext: UObject): Transform;
+	static GetWorldToMetersScale(WorldContext: UObject): number;
+	static SetWorldToMetersScale(WorldContext: UObject,NewScale: number): void;
+	static GetAllActorsOfClassMatchingTagQuery(WorldContextObject: UObject,ActorClass: UnrealEngineClass,GameplayTagQuery: GameplayTagQuery,OutActors?: Actor[]): {OutActors: Actor[]};
 }
 
-declare class ScrollBarStyle extends SlateWidgetStyle { 
-	HorizontalBackgroundImage: SlateBrush;
-	VerticalBackgroundImage: SlateBrush;
-	VerticalTopSlotImage: SlateBrush;
-	HorizontalTopSlotImage: SlateBrush;
-	VerticalBottomSlotImage: SlateBrush;
-	HorizontalBottomSlotImage: SlateBrush;
-	NormalThumbImage: SlateBrush;
-	HoveredThumbImage: SlateBrush;
-	DraggedThumbImage: SlateBrush;
-	clone() : ScrollBarStyle;
-	static C(Other: UObject | any): ScrollBarStyle;
+declare class Package extends UObject { 
+	static Load(ResourceName: string): Package;
+	static Find(Outer: UObject, ResourceName: string): Package;
+	static GetDefaultObject(): Package;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Package;
+	static C(Other: UObject | any): Package;
+	DeletePackage(): boolean;
+	FindWorldInPackage(): World;
+	SavePackage(Filename: string): boolean;
+	GetLongPackagePath(): string;
+	HasAnyPackageFlags(Flags: number): boolean;
+	LoadPackage(PackageName: string): Package;
+	static DeletePackage(Package: Package): boolean;
+	static FindWorldInPackage(Package: Package): World;
+	static SavePackage(Package: Package,Filename: string): boolean;
+	static GetLongPackagePath(InPackage: Package): string;
+	static HasAnyPackageFlags(Package: Package,Flags: number): boolean;
+	static LoadPackage(InOuter: Package,PackageName: string): Package;
 }
-
-declare class EditableTextBoxStyle extends SlateWidgetStyle { 
-	BackgroundImageNormal: SlateBrush;
-	BackgroundImageHovered: SlateBrush;
-	BackgroundImageFocused: SlateBrush;
-	BackgroundImageReadOnly: SlateBrush;
-	Padding: Margin;
-	Font: SlateFontInfo;
-	ForegroundColor: SlateColor;
-	BackgroundColor: SlateColor;
-	ReadOnlyForegroundColor: SlateColor;
-	HScrollBarPadding: Margin;
-	VScrollBarPadding: Margin;
-	ScrollBarStyle: ScrollBarStyle;
-	clone() : EditableTextBoxStyle;
-	static C(Other: UObject | any): EditableTextBoxStyle;
+
+declare class DirectoryItem { 
+	Name: string;
+	bIsDirectory: boolean;
+	clone() : DirectoryItem;
+	static C(Other: UObject | any): DirectoryItem;
 }
 
-declare class EditableTextBoxWidgetStyle extends SlateWidgetStyleContainerBase { 
-	EditableTextBoxStyle: EditableTextBoxStyle;
-	static Load(ResourceName: string): EditableTextBoxWidgetStyle;
-	static Find(Outer: UObject, ResourceName: string): EditableTextBoxWidgetStyle;
-	static GetDefaultObject(): EditableTextBoxWidgetStyle;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableTextBoxWidgetStyle;
-	static C(Other: UObject | any): EditableTextBoxWidgetStyle;
+declare type EJavascriptEncodingOptions = 'AutoDetect' | 'ForceAnsi' | 'ForceUnicode' | 'ForceUTF8' | 'ForceUTF8WithoutBOM' | 'EJavascriptEncodingOptions_MAX';
+declare var EJavascriptEncodingOptions : { AutoDetect:'AutoDetect',ForceAnsi:'ForceAnsi',ForceUnicode:'ForceUnicode',ForceUTF8:'ForceUTF8',ForceUTF8WithoutBOM:'ForceUTF8WithoutBOM',EJavascriptEncodingOptions_MAX:'EJavascriptEncodingOptions_MAX', };
+declare class GameInstanceSubsystem extends Subsystem { 
+	static Load(ResourceName: string): GameInstanceSubsystem;
+	static Find(Outer: UObject, ResourceName: string): GameInstanceSubsystem;
+	static GetDefaultObject(): GameInstanceSubsystem;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameInstanceSubsystem;
+	static C(Other: UObject | any): GameInstanceSubsystem;
 }
 
-declare class EditableTextStyle extends SlateWidgetStyle { 
-	Font: SlateFontInfo;
-	ColorAndOpacity: SlateColor;
-	BackgroundImageSelected: SlateBrush;
-	BackgroundImageComposing: SlateBrush;
-	CaretImage: SlateBrush;
-	clone() : EditableTextStyle;
-	static C(Other: UObject | any): EditableTextStyle;
+declare class CollisionProfileName { 
+	Name: string;
+	clone() : CollisionProfileName;
+	static C(Other: UObject | any): CollisionProfileName;
 }
 
-declare class EditableTextWidgetStyle extends SlateWidgetStyleContainerBase { 
-	EditableTextStyle: EditableTextStyle;
-	static Load(ResourceName: string): EditableTextWidgetStyle;
-	static Find(Outer: UObject, ResourceName: string): EditableTextWidgetStyle;
-	static GetDefaultObject(): EditableTextWidgetStyle;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableTextWidgetStyle;
-	static C(Other: UObject | any): EditableTextWidgetStyle;
+declare class GenericStruct { 
+	Data: number;
+	clone() : GenericStruct;
+	static C(Other: UObject | any): GenericStruct;
 }
 
-declare class ProgressBarStyle extends SlateWidgetStyle { 
-	BackgroundImage: SlateBrush;
-	FillImage: SlateBrush;
-	MarqueeImage: SlateBrush;
-	clone() : ProgressBarStyle;
-	static C(Other: UObject | any): ProgressBarStyle;
+declare class UObject { 
+	constructor();
+	constructor(Outer: UObject);
+	static Load(ResourceName: string): UObject;
+	static Find(Outer: UObject, ResourceName: string): UObject;
+	static StaticClass: any;
+	static GetClassObject(): Class;
+	static GetDefaultObject(): UObject;
+	static GetDefaultSubobjectByName(Name: string): UObject;
+	static SetDefaultSubobjectClass(Name: string): void;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UObject;
+	ExecuteUbergraph(EntryPoint: number): void;
+	static C(Other: UObject | any): UObject;
+	AddWhitelistedObject(): void;
+	BroadcastAssetCreated(): void;
+	MarkPackageDirty(): boolean;
+	ModifyObject(bAlwaysMarkDirty: boolean): void;
+	OpenEditorForAsset(): boolean;
+	PostEditChange(): void;
+	DestroyUObject(): void;
+	ConvertRelativePathToFull(RelativePath: string): string;
+	CreateEnum(Name: string,DisplayNames: string[],Flags: string[]): Enum;
+	CreatePackage(PackageName: string): Package;
+	Duplicate(Outer: UObject,Name: string): UObject;
+	FindObjectWithOuter(ClassToLookFor: UnrealEngineClass,NameToLookFor: string): UObject;
+	FindPackage(PackageName: string): Package;
+	GetArchetypePathName(): string;
+	GetDir(WhichDir: string): string;
+	GetFields(bIncludeSuper: boolean): Field[];
+	GetFileSize(Filename: string): number;
+	GetName(): string;
+	GetObjectsWithOuter(Results?: UObject[],bIncludeNestedObjects?: boolean,ExclusionFlags?: number,ExclusionInternalFlags?: number): {Results: UObject[]};
+	GetOuter(): UObject;
+	GetOutermost(): UObject;
+	HasAnyFlags(Flags: number): boolean;
+	ReadDirectory(Directory: string,OutItems?: DirectoryItem[]): {OutItems: DirectoryItem[], $: boolean};
+	ReadFile(Filename: string): boolean;
+	ReadStringFromFile(Filename: string): string;
+	SetObjectFlags(Flags: number): void;
+	WriteFile(Filename: string): boolean;
+	WriteStringToFile(Filename: string,Data: string,EncodingOptions: EJavascriptEncodingOptions): boolean;
+	RenameAsset(NewName: string): void;
+	GetDatasmithUserData(): DatasmithAssetUserData;
+	GetDatasmithUserDataKeysAndValuesForValue(StringToMatch: string,OutKeys?: string[],OutValues?: string[]): {OutKeys: string[], OutValues: string[]};
+	GetDatasmithUserDataValueForKey(Key: string): string;
+	RedirectVislog(DestinationOwner: UObject): void;
+	GetGameInstanceSubsystem(Class: UnrealEngineClass): GameInstanceSubsystem;
+	GetLocalPlayerSubsystem(Class: UnrealEngineClass): LocalPlayerSubsystem;
+	Conv_ObjectToText(): string;
+	Conv_ObjectToSoftObjectReference(): UObject;
+	Conv_SoftObjectReferenceToObject(): UObject;
+	Conv_SoftObjectReferenceToString(): string;
+	CreateCopyForUndoBuffer(): void;
+	DoesImplementInterface(Interface: UnrealEngineClass): boolean;
+	EqualEqual_SoftObjectReference(B: UObject): boolean;
+	GetDisplayName(): string;
+	GetObjectName(): string;
+	GetOuterObject(): UObject;
+	GetPathName(): string;
+	GetPrimaryAssetIdFromObject(): PrimaryAssetId;
+	GetPrimaryAssetIdFromSoftObjectReference(): PrimaryAssetId;
+	IsValid(): boolean;
+	IsValidSoftObjectReference(): boolean;
+	K2_ClearTimer(FunctionName: string): void;
+	K2_GetTimerElapsedTime(FunctionName: string): number;
+	K2_GetTimerRemainingTime(FunctionName: string): number;
+	K2_IsTimerActive(FunctionName: string): boolean;
+	K2_IsTimerPaused(FunctionName: string): boolean;
+	K2_PauseTimer(FunctionName: string): void;
+	K2_SetTimer(FunctionName: string,Time: number,bLooping: boolean,InitialStartDelay: number,InitialStartDelayVariance: number): TimerHandle;
+	K2_TimerExists(FunctionName: string): boolean;
+	K2_UnPauseTimer(FunctionName: string): void;
+	LoadAsset_Blocking(): UObject;
+	NotEqual_SoftObjectReference(B: UObject): boolean;
+	SetBoolPropertyByName(PropertyName: string,Value: boolean): void;
+	SetBytePropertyByName(PropertyName: string,Value: number): void;
+	SetClassPropertyByName(PropertyName: string,Value: UnrealEngineClass): void;
+	SetCollisionProfileNameProperty(PropertyName: string,Value: CollisionProfileName): void;
+	SetFloatPropertyByName(PropertyName: string,Value: number): void;
+	SetInt64PropertyByName(PropertyName: string,Value: any): void;
+	SetInterfacePropertyByName(PropertyName: string,Value: any): void;
+	SetIntPropertyByName(PropertyName: string,Value: number): void;
+	SetLinearColorPropertyByName(PropertyName: string,Value: LinearColor): void;
+	SetNamePropertyByName(PropertyName: string,Value: string): void;
+	SetObjectPropertyByName(PropertyName: string,Value: UObject): void;
+	SetRotatorPropertyByName(PropertyName: string,Value: Rotator): void;
+	SetSoftClassPropertyByName(PropertyName: string,Value: Class): void;
+	SetSoftObjectPropertyByName(PropertyName: string,Value: UObject): void;
+	SetStringPropertyByName(PropertyName: string,Value: string): void;
+	SetStructurePropertyByName(PropertyName: string,Value: GenericStruct): void;
+	SetTextPropertyByName(PropertyName: string,Value: string): void;
+	SetTransformPropertyByName(PropertyName: string,Value: Transform): void;
+	SetVectorPropertyByName(PropertyName: string,Value: Vector): void;
+	TransactObject(): void;
+	Conv_ObjectToString(): string;
+	EqualEqual_ObjectObject(B: UObject): boolean;
+	NotEqual_ObjectObject(B: UObject): boolean;
+	SelectObject(B: UObject,bSelectA: boolean): UObject;
+	SetArrayPropertyByName(PropertyName: string,Value: number[]): void;
+	GetObjectClass(): UnrealEngineClass;
+	SetSetPropertyByName(PropertyName: string,Value: any): void;
+	SetMapPropertyByName(PropertyName: string,Value: any): void;
+	static AddWhitelistedObject(InObject: UObject): void;
+	static BroadcastAssetCreated(NewAsset: UObject): void;
+	static MarkPackageDirty(InObject: UObject): boolean;
+	static ModifyObject(UObject: UObject,bAlwaysMarkDirty: boolean): void;
+	static OpenEditorForAsset(Asset: UObject): boolean;
+	static PostEditChange(InObject: UObject): void;
+	static DestroyUObject(UObject: UObject): void;
+	static ConvertRelativePathToFull(UObject: UObject,RelativePath: string): string;
+	static CreateEnum(Outer: UObject,Name: string,DisplayNames: string[],Flags: string[]): Enum;
+	static CreatePackage(Outer: UObject,PackageName: string): Package;
+	static Duplicate(UObject: UObject,Outer: UObject,Name: string): UObject;
+	static FindObjectWithOuter(Outer: UObject,ClassToLookFor: UnrealEngineClass,NameToLookFor: string): UObject;
+	static FindPackage(InOuter: UObject,PackageName: string): Package;
+	static GetArchetypePathName(UObject: UObject): string;
+	static GetDir(UObject: UObject,WhichDir: string): string;
+	static GetFields(UObject: UObject,bIncludeSuper: boolean): Field[];
+	static GetFileSize(UObject: UObject,Filename: string): number;
+	static GetName(UObject: UObject): string;
+	static GetObjectsWithOuter(Outer: UObject,Results?: UObject[],bIncludeNestedObjects?: boolean,ExclusionFlags?: number,ExclusionInternalFlags?: number): {Results: UObject[]};
+	static GetOuter(UObject: UObject): UObject;
+	static GetOutermost(UObject: UObject): UObject;
+	static HasAnyFlags(UObject: UObject,Flags: number): boolean;
+	static ReadDirectory(UObject: UObject,Directory: string,OutItems?: DirectoryItem[]): {OutItems: DirectoryItem[], $: boolean};
+	static ReadFile(UObject: UObject,Filename: string): boolean;
+	static ReadStringFromFile(UObject: UObject,Filename: string): string;
+	static SetObjectFlags(Obj: UObject,Flags: number): void;
+	static WriteFile(UObject: UObject,Filename: string): boolean;
+	static WriteStringToFile(UObject: UObject,Filename: string,Data: string,EncodingOptions: EJavascriptEncodingOptions): boolean;
+	static RenameAsset(Asset: UObject,NewName: string): void;
+	static GetDatasmithUserData(UObject: UObject): DatasmithAssetUserData;
+	static GetDatasmithUserDataKeysAndValuesForValue(UObject: UObject,StringToMatch: string,OutKeys?: string[],OutValues?: string[]): {OutKeys: string[], OutValues: string[]};
+	static GetDatasmithUserDataValueForKey(UObject: UObject,Key: string): string;
+	static RedirectVislog(SourceOwner: UObject,DestinationOwner: UObject): void;
+	static GetGameInstanceSubsystem(ContextObject: UObject,Class: UnrealEngineClass): GameInstanceSubsystem;
+	static GetLocalPlayerSubsystem(ContextObject: UObject,Class: UnrealEngineClass): LocalPlayerSubsystem;
+	static Conv_ObjectToText(InObj: UObject): string;
+	static Conv_ObjectToSoftObjectReference(UObject: UObject): UObject;
+	static Conv_SoftObjectReferenceToObject(softobject: UObject): UObject;
+	static Conv_SoftObjectReferenceToString(SoftObjectReference: UObject): string;
+	static CreateCopyForUndoBuffer(ObjectToModify: UObject): void;
+	static DoesImplementInterface(TestObject: UObject,Interface: UnrealEngineClass): boolean;
+	static EqualEqual_SoftObjectReference(A: UObject,B: UObject): boolean;
+	static GetDisplayName(UObject: UObject): string;
+	static GetObjectName(UObject: UObject): string;
+	static GetOuterObject(UObject: UObject): UObject;
+	static GetPathName(UObject: UObject): string;
+	static GetPrimaryAssetIdFromObject(UObject: UObject): PrimaryAssetId;
+	static GetPrimaryAssetIdFromSoftObjectReference(SoftObjectReference: UObject): PrimaryAssetId;
+	static IsValid(UObject: UObject): boolean;
+	static IsValidSoftObjectReference(SoftObjectReference: UObject): boolean;
+	static K2_ClearTimer(UObject: UObject,FunctionName: string): void;
+	static K2_GetTimerElapsedTime(UObject: UObject,FunctionName: string): number;
+	static K2_GetTimerRemainingTime(UObject: UObject,FunctionName: string): number;
+	static K2_IsTimerActive(UObject: UObject,FunctionName: string): boolean;
+	static K2_IsTimerPaused(UObject: UObject,FunctionName: string): boolean;
+	static K2_PauseTimer(UObject: UObject,FunctionName: string): void;
+	static K2_SetTimer(UObject: UObject,FunctionName: string,Time: number,bLooping: boolean,InitialStartDelay: number,InitialStartDelayVariance: number): TimerHandle;
+	static K2_TimerExists(UObject: UObject,FunctionName: string): boolean;
+	static K2_UnPauseTimer(UObject: UObject,FunctionName: string): void;
+	static LoadAsset_Blocking(Asset: UObject): UObject;
+	static NotEqual_SoftObjectReference(A: UObject,B: UObject): boolean;
+	static SetBoolPropertyByName(UObject: UObject,PropertyName: string,Value: boolean): void;
+	static SetBytePropertyByName(UObject: UObject,PropertyName: string,Value: number): void;
+	static SetClassPropertyByName(UObject: UObject,PropertyName: string,Value: UnrealEngineClass): void;
+	static SetCollisionProfileNameProperty(UObject: UObject,PropertyName: string,Value: CollisionProfileName): void;
+	static SetFloatPropertyByName(UObject: UObject,PropertyName: string,Value: number): void;
+	static SetInt64PropertyByName(UObject: UObject,PropertyName: string,Value: any): void;
+	static SetInterfacePropertyByName(UObject: UObject,PropertyName: string,Value: any): void;
+	static SetIntPropertyByName(UObject: UObject,PropertyName: string,Value: number): void;
+	static SetLinearColorPropertyByName(UObject: UObject,PropertyName: string,Value: LinearColor): void;
+	static SetNamePropertyByName(UObject: UObject,PropertyName: string,Value: string): void;
+	static SetObjectPropertyByName(UObject: UObject,PropertyName: string,Value: UObject): void;
+	static SetRotatorPropertyByName(UObject: UObject,PropertyName: string,Value: Rotator): void;
+	static SetSoftClassPropertyByName(UObject: UObject,PropertyName: string,Value: Class): void;
+	static SetSoftObjectPropertyByName(UObject: UObject,PropertyName: string,Value: UObject): void;
+	static SetStringPropertyByName(UObject: UObject,PropertyName: string,Value: string): void;
+	static SetStructurePropertyByName(UObject: UObject,PropertyName: string,Value: GenericStruct): void;
+	static SetTextPropertyByName(UObject: UObject,PropertyName: string,Value: string): void;
+	static SetTransformPropertyByName(UObject: UObject,PropertyName: string,Value: Transform): void;
+	static SetVectorPropertyByName(UObject: UObject,PropertyName: string,Value: Vector): void;
+	static TransactObject(UObject: UObject): void;
+	static Conv_ObjectToString(InObj: UObject): string;
+	static EqualEqual_ObjectObject(A: UObject,B: UObject): boolean;
+	static NotEqual_ObjectObject(A: UObject,B: UObject): boolean;
+	static SelectObject(A: UObject,B: UObject,bSelectA: boolean): UObject;
+	static SetArrayPropertyByName(UObject: UObject,PropertyName: string,Value: number[]): void;
+	static GetObjectClass(UObject: UObject): UnrealEngineClass;
+	static SetSetPropertyByName(UObject: UObject,PropertyName: string,Value: any): void;
+	static SetMapPropertyByName(UObject: UObject,PropertyName: string,Value: any): void;
 }
 
-declare class ProgressWidgetStyle extends SlateWidgetStyleContainerBase { 
-	ProgressBarStyle: ProgressBarStyle;
-	static Load(ResourceName: string): ProgressWidgetStyle;
-	static Find(Outer: UObject, ResourceName: string): ProgressWidgetStyle;
-	static GetDefaultObject(): ProgressWidgetStyle;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ProgressWidgetStyle;
-	static C(Other: UObject | any): ProgressWidgetStyle;
+declare class GCObjectReferencer extends UObject { 
+	static Load(ResourceName: string): GCObjectReferencer;
+	static Find(Outer: UObject, ResourceName: string): GCObjectReferencer;
+	static GetDefaultObject(): GCObjectReferencer;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GCObjectReferencer;
+	static C(Other: UObject | any): GCObjectReferencer;
 }
 
-declare class ScrollBarWidgetStyle extends SlateWidgetStyleContainerBase { 
-	ScrollBarStyle: ScrollBarStyle;
-	static Load(ResourceName: string): ScrollBarWidgetStyle;
-	static Find(Outer: UObject, ResourceName: string): ScrollBarWidgetStyle;
-	static GetDefaultObject(): ScrollBarWidgetStyle;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ScrollBarWidgetStyle;
-	static C(Other: UObject | any): ScrollBarWidgetStyle;
+declare class TextBuffer extends UObject { 
+	static Load(ResourceName: string): TextBuffer;
+	static Find(Outer: UObject, ResourceName: string): TextBuffer;
+	static GetDefaultObject(): TextBuffer;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextBuffer;
+	static C(Other: UObject | any): TextBuffer;
 }
 
-declare class ScrollBoxStyle extends SlateWidgetStyle { 
-	TopShadowBrush: SlateBrush;
-	BottomShadowBrush: SlateBrush;
-	LeftShadowBrush: SlateBrush;
-	RightShadowBrush: SlateBrush;
-	clone() : ScrollBoxStyle;
-	static C(Other: UObject | any): ScrollBoxStyle;
+declare class ScriptStruct extends Struct { 
+	static Load(ResourceName: string): ScriptStruct;
+	static Find(Outer: UObject, ResourceName: string): ScriptStruct;
+	static GetDefaultObject(): ScriptStruct;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ScriptStruct;
+	static C(Other: UObject | any): ScriptStruct;
 }
 
-declare class ScrollBoxWidgetStyle extends SlateWidgetStyleContainerBase { 
-	ScrollBoxStyle: ScrollBoxStyle;
-	static Load(ResourceName: string): ScrollBoxWidgetStyle;
-	static Find(Outer: UObject, ResourceName: string): ScrollBoxWidgetStyle;
-	static GetDefaultObject(): ScrollBoxWidgetStyle;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ScrollBoxWidgetStyle;
-	static C(Other: UObject | any): ScrollBoxWidgetStyle;
+declare class DelegateFunction extends UFunction { 
+	static Load(ResourceName: string): DelegateFunction;
+	static Find(Outer: UObject, ResourceName: string): DelegateFunction;
+	static GetDefaultObject(): DelegateFunction;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DelegateFunction;
+	static C(Other: UObject | any): DelegateFunction;
 }
 
-declare class SlateSettings extends UObject { 
-	bExplicitCanvasChildZOrder: boolean;
-	static Load(ResourceName: string): SlateSettings;
-	static Find(Outer: UObject, ResourceName: string): SlateSettings;
-	static GetDefaultObject(): SlateSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateSettings;
-	static C(Other: UObject | any): SlateSettings;
+declare class SparseDelegateFunction extends DelegateFunction { 
+	static Load(ResourceName: string): SparseDelegateFunction;
+	static Find(Outer: UObject, ResourceName: string): SparseDelegateFunction;
+	static GetDefaultObject(): SparseDelegateFunction;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SparseDelegateFunction;
+	static C(Other: UObject | any): SparseDelegateFunction;
 }
 
-declare class SpinBoxStyle extends SlateWidgetStyle { 
-	BackgroundBrush: SlateBrush;
-	HoveredBackgroundBrush: SlateBrush;
-	ActiveFillBrush: SlateBrush;
-	InactiveFillBrush: SlateBrush;
-	ArrowsImage: SlateBrush;
-	ForegroundColor: SlateColor;
-	TextPadding: Margin;
-	clone() : SpinBoxStyle;
-	static C(Other: UObject | any): SpinBoxStyle;
+declare class DynamicClass extends Class { 
+	static Load(ResourceName: string): DynamicClass;
+	static Find(Outer: UObject, ResourceName: string): DynamicClass;
+	static GetDefaultObject(): DynamicClass;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DynamicClass;
+	static C(Other: UObject | any): DynamicClass;
 }
 
-declare class SpinBoxWidgetStyle extends SlateWidgetStyleContainerBase { 
-	SpinBoxStyle: SpinBoxStyle;
-	static Load(ResourceName: string): SpinBoxWidgetStyle;
-	static Find(Outer: UObject, ResourceName: string): SpinBoxWidgetStyle;
-	static GetDefaultObject(): SpinBoxWidgetStyle;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpinBoxWidgetStyle;
-	static C(Other: UObject | any): SpinBoxWidgetStyle;
+declare class EnumProperty extends Property { 
+	static Load(ResourceName: string): EnumProperty;
+	static Find(Outer: UObject, ResourceName: string): EnumProperty;
+	static GetDefaultObject(): EnumProperty;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnumProperty;
+	static C(Other: UObject | any): EnumProperty;
 }
 
-declare class TextBlockStyle extends SlateWidgetStyle { 
-	Font: SlateFontInfo;
-	ColorAndOpacity: SlateColor;
-	ShadowOffset: Vector2D;
-	ShadowColorAndOpacity: LinearColor;
-	SelectedBackgroundColor: SlateColor;
-	HighlightColor: LinearColor;
-	HighlightShape: SlateBrush;
-	UnderlineBrush: SlateBrush;
-	clone() : TextBlockStyle;
-	static C(Other: UObject | any): TextBlockStyle;
+declare class LinkerPlaceholderClass extends Class { 
+	static Load(ResourceName: string): LinkerPlaceholderClass;
+	static Find(Outer: UObject, ResourceName: string): LinkerPlaceholderClass;
+	static GetDefaultObject(): LinkerPlaceholderClass;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LinkerPlaceholderClass;
+	static C(Other: UObject | any): LinkerPlaceholderClass;
 }
 
-declare class TextBlockWidgetStyle extends SlateWidgetStyleContainerBase { 
-	TextBlockStyle: TextBlockStyle;
-	static Load(ResourceName: string): TextBlockWidgetStyle;
-	static Find(Outer: UObject, ResourceName: string): TextBlockWidgetStyle;
-	static GetDefaultObject(): TextBlockWidgetStyle;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextBlockWidgetStyle;
-	static C(Other: UObject | any): TextBlockWidgetStyle;
+declare class LinkerPlaceholderExportObject extends UObject { 
+	static Load(ResourceName: string): LinkerPlaceholderExportObject;
+	static Find(Outer: UObject, ResourceName: string): LinkerPlaceholderExportObject;
+	static GetDefaultObject(): LinkerPlaceholderExportObject;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LinkerPlaceholderExportObject;
+	static C(Other: UObject | any): LinkerPlaceholderExportObject;
 }
 
-declare type EColorVisionDeficiency = 'NormalVision' | 'Deuteranope' | 'Protanope' | 'Tritanope' | 'EColorVisionDeficiency_MAX';
-declare var EColorVisionDeficiency : { NormalVision:'NormalVision',Deuteranope:'Deuteranope',Protanope:'Protanope',Tritanope:'Tritanope',EColorVisionDeficiency_MAX:'EColorVisionDeficiency_MAX', };
-declare type ELogTimes = 'None' | 'UTC' | 'SinceGStartTime' | 'Local' | 'ELogTimes_MAX';
-declare var ELogTimes : { None:'None',UTC:'UTC',SinceGStartTime:'SinceGStartTime',Local:'Local',ELogTimes_MAX:'ELogTimes_MAX', };
-declare type EAssetEditorOpenLocation = 'Default' | 'NewWindow' | 'MainWindow' | 'ContentBrowser' | 'LastDockedWindowOrNewWindow' | 'LastDockedWindowOrMainWindow' | 'LastDockedWindowOrContentBrowser' | 'EAssetEditorOpenLocation_MAX';
-declare var EAssetEditorOpenLocation : { Default:'Default',NewWindow:'NewWindow',MainWindow:'MainWindow',ContentBrowser:'ContentBrowser',LastDockedWindowOrNewWindow:'LastDockedWindowOrNewWindow',LastDockedWindowOrMainWindow:'LastDockedWindowOrMainWindow',LastDockedWindowOrContentBrowser:'LastDockedWindowOrContentBrowser',EAssetEditorOpenLocation_MAX:'EAssetEditorOpenLocation_MAX', };
-declare class EditorStyleSettings extends UObject { 
-	bEnableHighDPIAwareness: boolean;
-	ColorVisionDeficiencyPreviewType: EColorVisionDeficiency;
-	ColorVisionDeficiencySeverity: number;
-	bColorVisionDeficiencyCorrection: boolean;
-	bColorVisionDeficiencyCorrectionPreviewWithDeficiency: boolean;
-	SelectionColor: LinearColor;
-	PressedSelectionColor: LinearColor;
-	InactiveSelectionColor: LinearColor;
-	KeyboardFocusColor: LinearColor;
-	EditorWindowBackgroundColor: LinearColor;
-	EditorMainWindowBackgroundOverride: SlateBrush;
-	EditorChildWindowBackgroundOverride: SlateBrush;
-	bResetEditorWindowBackgroundSettings: boolean;
-	bUseSmallToolBarIcons: boolean;
-	bUseGrid: boolean;
-	RegularColor: LinearColor;
-	RuleColor: LinearColor;
-	CenterColor: LinearColor;
-	GridSnapSize: any;
-	bEnableWindowAnimations: boolean;
-	bShowFriendlyNames: boolean;
-	bExpandConfigurationMenus: boolean;
-	bShowProjectMenus: boolean;
-	bShowLaunchMenus: boolean;
-	LogBackgroundColor: LinearColor;
-	LogSelectionBackgroundColor: LinearColor;
-	LogNormalColor: LinearColor;
-	LogCommandColor: LinearColor;
-	LogWarningColor: LinearColor;
-	LogErrorColor: LinearColor;
-	bShowAllAdvancedDetails: boolean;
-	bShowHiddenPropertiesWhilePlaying: boolean;
-	LogFontSize: number;
-	LogTimestampMode: ELogTimes;
-	bPromoteOutputLogWarningsDuringPIE: boolean;
-	AssetEditorOpenLocation: EAssetEditorOpenLocation;
-	bEnableColorizedEditorTabs: boolean;
-	static Load(ResourceName: string): EditorStyleSettings;
-	static Find(Outer: UObject, ResourceName: string): EditorStyleSettings;
-	static GetDefaultObject(): EditorStyleSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorStyleSettings;
-	static C(Other: UObject | any): EditorStyleSettings;
+declare class LinkerPlaceholderFunction extends UFunction { 
+	static Load(ResourceName: string): LinkerPlaceholderFunction;
+	static Find(Outer: UObject, ResourceName: string): LinkerPlaceholderFunction;
+	static GetDefaultObject(): LinkerPlaceholderFunction;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LinkerPlaceholderFunction;
+	static C(Other: UObject | any): LinkerPlaceholderFunction;
 }
 
-declare class MaterialShaderQualitySettings extends UObject { 
-	ForwardSettingMap: any;
-	static Load(ResourceName: string): MaterialShaderQualitySettings;
-	static Find(Outer: UObject, ResourceName: string): MaterialShaderQualitySettings;
-	static GetDefaultObject(): MaterialShaderQualitySettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialShaderQualitySettings;
-	static C(Other: UObject | any): MaterialShaderQualitySettings;
+declare class MetaData extends UObject { 
+	static Load(ResourceName: string): MetaData;
+	static Find(Outer: UObject, ResourceName: string): MetaData;
+	static GetDefaultObject(): MetaData;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MetaData;
+	static C(Other: UObject | any): MetaData;
 }
 
-declare type EMobileCSMQuality = 'NoFiltering' | 'PCF_1x1' | 'PCF_2x2' | 'EMobileCSMQuality_MAX';
-declare var EMobileCSMQuality : { NoFiltering:'NoFiltering',PCF_1x1:'PCF_1x1',PCF_2x2:'PCF_2x2',EMobileCSMQuality_MAX:'EMobileCSMQuality_MAX', };
-declare class MaterialQualityOverrides { 
-	bDiscardQualityDuringCook: boolean;
-	bEnableOverride: boolean;
-	bForceFullyRough: boolean;
-	bForceNonMetal: boolean;
-	bForceDisableLMDirectionality: boolean;
-	bForceLQReflections: boolean;
-	bDisableMaterialNormalCalculation: boolean;
-	MobileCSMQuality: EMobileCSMQuality;
-	clone() : MaterialQualityOverrides;
-	static C(Other: UObject | any): MaterialQualityOverrides;
+declare class ObjectRedirector extends UObject { 
+	static Load(ResourceName: string): ObjectRedirector;
+	static Find(Outer: UObject, ResourceName: string): ObjectRedirector;
+	static GetDefaultObject(): ObjectRedirector;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectRedirector;
+	static C(Other: UObject | any): ObjectRedirector;
 }
 
-declare class ShaderPlatformQualitySettings extends UObject { 
-	QualityOverrides: MaterialQualityOverrides;
-	static Load(ResourceName: string): ShaderPlatformQualitySettings;
-	static Find(Outer: UObject, ResourceName: string): ShaderPlatformQualitySettings;
-	static GetDefaultObject(): ShaderPlatformQualitySettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ShaderPlatformQualitySettings;
-	static C(Other: UObject | any): ShaderPlatformQualitySettings;
+declare class ArrayProperty extends Property { 
+	static Load(ResourceName: string): ArrayProperty;
+	static Find(Outer: UObject, ResourceName: string): ArrayProperty;
+	static GetDefaultObject(): ArrayProperty;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ArrayProperty;
+	static C(Other: UObject | any): ArrayProperty;
 }
 
-declare class MeshDescription extends UObject { 
-	static Load(ResourceName: string): MeshDescription;
-	static Find(Outer: UObject, ResourceName: string): MeshDescription;
-	static GetDefaultObject(): MeshDescription;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshDescription;
-	static C(Other: UObject | any): MeshDescription;
+declare class ObjectPropertyBase extends Property { 
+	static Load(ResourceName: string): ObjectPropertyBase;
+	static Find(Outer: UObject, ResourceName: string): ObjectPropertyBase;
+	static GetDefaultObject(): ObjectPropertyBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectPropertyBase;
+	static C(Other: UObject | any): ObjectPropertyBase;
 }
 
-declare class ClothingAssetFactoryBase extends UObject { 
-	static Load(ResourceName: string): ClothingAssetFactoryBase;
-	static Find(Outer: UObject, ResourceName: string): ClothingAssetFactoryBase;
-	static GetDefaultObject(): ClothingAssetFactoryBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingAssetFactoryBase;
-	static C(Other: UObject | any): ClothingAssetFactoryBase;
+declare class BoolProperty extends Property { 
+	static Load(ResourceName: string): BoolProperty;
+	static Find(Outer: UObject, ResourceName: string): BoolProperty;
+	static GetDefaultObject(): BoolProperty;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BoolProperty;
+	static C(Other: UObject | any): BoolProperty;
 }
 
-declare class AssetRegistryImpl extends UObject { 
-	static Load(ResourceName: string): AssetRegistryImpl;
-	static Find(Outer: UObject, ResourceName: string): AssetRegistryImpl;
-	static GetDefaultObject(): AssetRegistryImpl;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetRegistryImpl;
-	static C(Other: UObject | any): AssetRegistryImpl;
+declare class NumericProperty extends Property { 
+	static Load(ResourceName: string): NumericProperty;
+	static Find(Outer: UObject, ResourceName: string): NumericProperty;
+	static GetDefaultObject(): NumericProperty;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NumericProperty;
+	static C(Other: UObject | any): NumericProperty;
 }
 
-declare class AssetData { 
-	ObjectPath: string;
-	PackageName: string;
-	PackagePath: string;
-	AssetName: string;
-	AssetClass: string;
-	clone() : AssetData;
-	static C(Other: UObject | any): AssetData;
+declare class ByteProperty extends NumericProperty { 
+	static Load(ResourceName: string): ByteProperty;
+	static Find(Outer: UObject, ResourceName: string): ByteProperty;
+	static GetDefaultObject(): ByteProperty;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ByteProperty;
+	static C(Other: UObject | any): ByteProperty;
 }
 
-declare class ARFilter { 
-	PackageNames: string[];
-	PackagePaths: string[];
-	ObjectPaths: string[];
-	ClassNames: string[];
-	RecursiveClassesExclusionSet: any;
-	bRecursivePaths: boolean;
-	bRecursiveClasses: boolean;
-	bIncludeOnlyOnDiskAssets: boolean;
-	clone() : ARFilter;
-	static C(Other: UObject | any): ARFilter;
+declare class ObjectProperty extends ObjectPropertyBase { 
+	static Load(ResourceName: string): ObjectProperty;
+	static Find(Outer: UObject, ResourceName: string): ObjectProperty;
+	static GetDefaultObject(): ObjectProperty;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectProperty;
+	static C(Other: UObject | any): ObjectProperty;
 }
 
-declare class TagAndValue { 
-	Tag: string;
-	Value: string;
-	clone() : TagAndValue;
-	static C(Other: UObject | any): TagAndValue;
+declare class ClassProperty extends ObjectProperty { 
+	static Load(ResourceName: string): ClassProperty;
+	static Find(Outer: UObject, ResourceName: string): ClassProperty;
+	static GetDefaultObject(): ClassProperty;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClassProperty;
+	static C(Other: UObject | any): ClassProperty;
 }
 
-declare class AssetRegistryHelpers extends UObject { 
-	static Load(ResourceName: string): AssetRegistryHelpers;
-	static Find(Outer: UObject, ResourceName: string): AssetRegistryHelpers;
-	static GetDefaultObject(): AssetRegistryHelpers;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetRegistryHelpers;
-	static ToSoftObjectPath(InAssetData: AssetData): SoftObjectPath;
-	static SetFilterTagsAndValues(InFilter: ARFilter,InTagsAndValues: TagAndValue[]): ARFilter;
-	static IsValid(InAssetData: AssetData): boolean;
-	static IsUAsset(InAssetData: AssetData): boolean;
-	static IsRedirector(InAssetData: AssetData): boolean;
-	static IsAssetLoaded(InAssetData: AssetData): boolean;
-	static GetTagValue(InAssetData: AssetData,InTagName: string,OutTagValue?: string): {OutTagValue: string, $: boolean};
-	static GetFullName(InAssetData: AssetData): string;
-	static GetExportTextName(InAssetData: AssetData): string;
-	static GetClass(InAssetData: AssetData): UnrealEngineClass;
-	static GetAsset(InAssetData: AssetData): UObject;
-	static CreateAssetData(InAsset: UObject,bAllowBlueprintClass: boolean): AssetData;
-	static C(Other: UObject | any): AssetRegistryHelpers;
+declare class DelegateProperty extends Property { 
+	static Load(ResourceName: string): DelegateProperty;
+	static Find(Outer: UObject, ResourceName: string): DelegateProperty;
+	static GetDefaultObject(): DelegateProperty;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DelegateProperty;
+	static C(Other: UObject | any): DelegateProperty;
 }
 
-declare class AssetRegistry extends Interface { 
-	static Load(ResourceName: string): AssetRegistry;
-	static Find(Outer: UObject, ResourceName: string): AssetRegistry;
-	static GetDefaultObject(): AssetRegistry;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetRegistry;
-	SearchAllAssets(bSynchronousSearch: boolean): void;
-	ScanPathsSynchronous(InPaths: string[],bForceRescan: boolean): void;
-	ScanModifiedAssetFiles(InFilePaths: string[]): void;
-	ScanFilesSynchronous(InFilePaths: string[],bForceRescan: boolean): void;
-	RunAssetsThroughFilter(AssetDataList?: AssetData[],Filter?: ARFilter): {AssetDataList: AssetData[]};
-	PrioritizeSearchPath(PathToPrioritize: string): void;
-	IsLoadingAssets(): boolean;
-	HasAssets(PackagePath: string,bRecursive: boolean): boolean;
-	GetSubPaths(InBasePath: string,OutPathList?: string[],bInRecurse?: boolean): {OutPathList: string[]};
-	GetAssetsByPath(PackagePath: string,OutAssetData?: AssetData[],bRecursive?: boolean,bIncludeOnlyOnDiskAssets?: boolean): {OutAssetData: AssetData[], $: boolean};
-	GetAssetsByPackageName(PackageName: string,OutAssetData?: AssetData[],bIncludeOnlyOnDiskAssets?: boolean): {OutAssetData: AssetData[], $: boolean};
-	GetAssetsByClass(ClassName: string,OutAssetData?: AssetData[],bSearchSubClasses?: boolean): {OutAssetData: AssetData[], $: boolean};
-	GetAssets(Filter: ARFilter,OutAssetData?: AssetData[]): {OutAssetData: AssetData[], $: boolean};
-	GetAssetByObjectPath(ObjectPath: string,bIncludeOnlyOnDiskAssets: boolean): AssetData;
-	GetAllCachedPaths(OutPathList?: string[]): {OutPathList: string[]};
-	GetAllAssets(OutAssetData?: AssetData[],bIncludeOnlyOnDiskAssets?: boolean): {OutAssetData: AssetData[], $: boolean};
-	static C(Other: UObject | any): AssetRegistry;
+declare class DoubleProperty extends NumericProperty { 
+	static Load(ResourceName: string): DoubleProperty;
+	static Find(Outer: UObject, ResourceName: string): DoubleProperty;
+	static GetDefaultObject(): DoubleProperty;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DoubleProperty;
+	static C(Other: UObject | any): DoubleProperty;
 }
 
-declare class AutoCompleteCommand { 
-	Command: string;
-	Desc: string;
-	clone() : AutoCompleteCommand;
-	static C(Other: UObject | any): AutoCompleteCommand;
+declare class FloatProperty extends NumericProperty { 
+	static Load(ResourceName: string): FloatProperty;
+	static Find(Outer: UObject, ResourceName: string): FloatProperty;
+	static GetDefaultObject(): FloatProperty;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FloatProperty;
+	static C(Other: UObject | any): FloatProperty;
 }
 
-declare class ConsoleSettings extends UObject { 
-	MaxScrollbackSize: number;
-	ManualAutoCompleteList: AutoCompleteCommand[];
-	AutoCompleteMapPaths: string[];
-	BackgroundOpacityPercentage: number;
-	bOrderTopToBottom: boolean;
-	InputColor: Color;
-	HistoryColor: Color;
-	AutoCompleteCommandColor: Color;
-	AutoCompleteCVarColor: Color;
-	AutoCompleteFadedColor: Color;
-	static Load(ResourceName: string): ConsoleSettings;
-	static Find(Outer: UObject, ResourceName: string): ConsoleSettings;
-	static GetDefaultObject(): ConsoleSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ConsoleSettings;
-	static C(Other: UObject | any): ConsoleSettings;
+declare class IntProperty extends NumericProperty { 
+	static Load(ResourceName: string): IntProperty;
+	static Find(Outer: UObject, ResourceName: string): IntProperty;
+	static GetDefaultObject(): IntProperty;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): IntProperty;
+	static C(Other: UObject | any): IntProperty;
 }
 
-declare type ETwoPlayerSplitScreenType = 'Horizontal' | 'Vertical' | 'ETwoPlayerSplitScreenType_MAX';
-declare var ETwoPlayerSplitScreenType : { Horizontal:'Horizontal',Vertical:'Vertical',ETwoPlayerSplitScreenType_MAX:'ETwoPlayerSplitScreenType_MAX', };
-declare type EThreePlayerSplitScreenType = 'FavorTop' | 'FavorBottom' | 'Vertical' | 'EThreePlayerSplitScreenType_MAX';
-declare var EThreePlayerSplitScreenType : { FavorTop:'FavorTop',FavorBottom:'FavorBottom',Vertical:'Vertical',EThreePlayerSplitScreenType_MAX:'EThreePlayerSplitScreenType_MAX', };
-declare type EFourPlayerSplitScreenType = 'Grid' | 'Vertical' | 'EFourPlayerSplitScreenType_MAX';
-declare var EFourPlayerSplitScreenType : { Grid:'Grid',Vertical:'Vertical',EFourPlayerSplitScreenType_MAX:'EFourPlayerSplitScreenType_MAX', };
-declare class GameModeName { 
-	Name: string;
-	GameMode: SoftClassPath;
-	clone() : GameModeName;
-	static C(Other: UObject | any): GameModeName;
+declare class Int16Property extends NumericProperty { 
+	static Load(ResourceName: string): Int16Property;
+	static Find(Outer: UObject, ResourceName: string): Int16Property;
+	static GetDefaultObject(): Int16Property;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Int16Property;
+	static C(Other: UObject | any): Int16Property;
 }
 
-declare class GameMapsSettings extends UObject { 
-	EditorStartupMap: SoftObjectPath;
-	LocalMapOptions: string;
-	TransitionMap: SoftObjectPath;
-	bUseSplitscreen: boolean;
-	TwoPlayerSplitscreenLayout: ETwoPlayerSplitScreenType;
-	ThreePlayerSplitscreenLayout: EThreePlayerSplitScreenType;
-	FourPlayerSplitscreenLayout: EFourPlayerSplitScreenType;
-	bOffsetPlayerGamepadIds: boolean;
-	GameInstanceClass: SoftClassPath;
-	GameDefaultMap: SoftObjectPath;
-	ServerDefaultMap: SoftObjectPath;
-	GlobalDefaultGameMode: SoftClassPath;
-	GlobalDefaultServerGameMode: SoftClassPath;
-	GameModeMapPrefixes: GameModeName[];
-	GameModeClassAliases: GameModeName[];
-	static Load(ResourceName: string): GameMapsSettings;
-	static Find(Outer: UObject, ResourceName: string): GameMapsSettings;
-	static GetDefaultObject(): GameMapsSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameMapsSettings;
-	static C(Other: UObject | any): GameMapsSettings;
+declare class Int64Property extends NumericProperty { 
+	static Load(ResourceName: string): Int64Property;
+	static Find(Outer: UObject, ResourceName: string): Int64Property;
+	static GetDefaultObject(): Int64Property;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Int64Property;
+	static C(Other: UObject | any): Int64Property;
 }
 
-declare class GameNetworkManagerSettings extends UObject { 
-	MinDynamicBandwidth: number;
-	MaxDynamicBandwidth: number;
-	TotalNetBandwidth: number;
-	BadPingThreshold: number;
-	bIsStandbyCheckingEnabled: boolean;
-	StandbyRxCheatTime: number;
-	StandbyTxCheatTime: number;
-	PercentMissingForRxStandby: number;
-	PercentMissingForTxStandby: number;
-	PercentForBadPing: number;
-	JoinInProgressStandbyWaitTime: number;
-	static Load(ResourceName: string): GameNetworkManagerSettings;
-	static Find(Outer: UObject, ResourceName: string): GameNetworkManagerSettings;
-	static GetDefaultObject(): GameNetworkManagerSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameNetworkManagerSettings;
-	static C(Other: UObject | any): GameNetworkManagerSettings;
+declare class Int8Property extends NumericProperty { 
+	static Load(ResourceName: string): Int8Property;
+	static Find(Outer: UObject, ResourceName: string): Int8Property;
+	static GetDefaultObject(): Int8Property;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Int8Property;
+	static C(Other: UObject | any): Int8Property;
 }
 
-declare class GameSessionSettings extends UObject { 
-	MaxSpectators: number;
-	MaxPlayers: number;
-	bRequiresPushToTalk: boolean;
-	static Load(ResourceName: string): GameSessionSettings;
-	static Find(Outer: UObject, ResourceName: string): GameSessionSettings;
-	static GetDefaultObject(): GameSessionSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameSessionSettings;
-	static C(Other: UObject | any): GameSessionSettings;
+declare class InterfaceProperty extends Property { 
+	static Load(ResourceName: string): InterfaceProperty;
+	static Find(Outer: UObject, ResourceName: string): InterfaceProperty;
+	static GetDefaultObject(): InterfaceProperty;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InterfaceProperty;
+	static C(Other: UObject | any): InterfaceProperty;
 }
 
-declare class GeneralEngineSettings extends UObject { 
-	static Load(ResourceName: string): GeneralEngineSettings;
-	static Find(Outer: UObject, ResourceName: string): GeneralEngineSettings;
-	static GetDefaultObject(): GeneralEngineSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeneralEngineSettings;
-	static C(Other: UObject | any): GeneralEngineSettings;
+declare class LazyObjectProperty extends ObjectPropertyBase { 
+	static Load(ResourceName: string): LazyObjectProperty;
+	static Find(Outer: UObject, ResourceName: string): LazyObjectProperty;
+	static GetDefaultObject(): LazyObjectProperty;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LazyObjectProperty;
+	static C(Other: UObject | any): LazyObjectProperty;
 }
 
-declare class GeneralProjectSettings extends UObject { 
-	CompanyName: string;
-	CompanyDistinguishedName: string;
-	CopyrightNotice: string;
-	Description: string;
-	Homepage: string;
-	LicensingTerms: string;
-	PrivacyPolicy: string;
-	ProjectID: Guid;
-	ProjectName: string;
-	ProjectVersion: string;
-	SupportContact: string;
-	ProjectDisplayedTitle: string;
-	ProjectDebugTitleInfo: string;
-	bShouldWindowPreserveAspectRatio: boolean;
-	bUseBorderlessWindow: boolean;
-	bStartInVR: boolean;
-	bStartInAR: boolean;
-	bSupportAR: boolean;
-	bAllowWindowResize: boolean;
-	bAllowClose: boolean;
-	bAllowMaximize: boolean;
-	bAllowMinimize: boolean;
-	static Load(ResourceName: string): GeneralProjectSettings;
-	static Find(Outer: UObject, ResourceName: string): GeneralProjectSettings;
-	static GetDefaultObject(): GeneralProjectSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeneralProjectSettings;
-	static C(Other: UObject | any): GeneralProjectSettings;
+declare class MapProperty extends Property { 
+	static Load(ResourceName: string): MapProperty;
+	static Find(Outer: UObject, ResourceName: string): MapProperty;
+	static GetDefaultObject(): MapProperty;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MapProperty;
+	static C(Other: UObject | any): MapProperty;
 }
 
-declare class HudSettings extends UObject { 
-	bShowHUD: boolean;
-	DebugDisplay: string[];
-	static Load(ResourceName: string): HudSettings;
-	static Find(Outer: UObject, ResourceName: string): HudSettings;
-	static GetDefaultObject(): HudSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HudSettings;
-	static C(Other: UObject | any): HudSettings;
+declare class MulticastDelegateProperty extends Property { 
+	static Load(ResourceName: string): MulticastDelegateProperty;
+	static Find(Outer: UObject, ResourceName: string): MulticastDelegateProperty;
+	static GetDefaultObject(): MulticastDelegateProperty;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MulticastDelegateProperty;
+	static C(Other: UObject | any): MulticastDelegateProperty;
 }
 
-declare class HandlerComponentFactory extends UObject { 
-	static Load(ResourceName: string): HandlerComponentFactory;
-	static Find(Outer: UObject, ResourceName: string): HandlerComponentFactory;
-	static GetDefaultObject(): HandlerComponentFactory;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HandlerComponentFactory;
-	static C(Other: UObject | any): HandlerComponentFactory;
+declare class MulticastInlineDelegateProperty extends MulticastDelegateProperty { 
+	static Load(ResourceName: string): MulticastInlineDelegateProperty;
+	static Find(Outer: UObject, ResourceName: string): MulticastInlineDelegateProperty;
+	static GetDefaultObject(): MulticastInlineDelegateProperty;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MulticastInlineDelegateProperty;
+	static C(Other: UObject | any): MulticastInlineDelegateProperty;
 }
 
-declare class NetAnalyticsDataConfig { 
-	DataName: string;
-	bEnabled: boolean;
-	clone() : NetAnalyticsDataConfig;
-	static C(Other: UObject | any): NetAnalyticsDataConfig;
+declare class MulticastSparseDelegateProperty extends MulticastDelegateProperty { 
+	static Load(ResourceName: string): MulticastSparseDelegateProperty;
+	static Find(Outer: UObject, ResourceName: string): MulticastSparseDelegateProperty;
+	static GetDefaultObject(): MulticastSparseDelegateProperty;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MulticastSparseDelegateProperty;
+	static C(Other: UObject | any): MulticastSparseDelegateProperty;
 }
 
-declare class NetAnalyticsAggregatorConfig extends UObject { 
-	NetAnalyticsData: NetAnalyticsDataConfig[];
-	static Load(ResourceName: string): NetAnalyticsAggregatorConfig;
-	static Find(Outer: UObject, ResourceName: string): NetAnalyticsAggregatorConfig;
-	static GetDefaultObject(): NetAnalyticsAggregatorConfig;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NetAnalyticsAggregatorConfig;
-	static C(Other: UObject | any): NetAnalyticsAggregatorConfig;
+declare class NameProperty extends Property { 
+	static Load(ResourceName: string): NameProperty;
+	static Find(Outer: UObject, ResourceName: string): NameProperty;
+	static GetDefaultObject(): NameProperty;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NameProperty;
+	static C(Other: UObject | any): NameProperty;
+}
+
+declare class SetProperty extends Property { 
+	static Load(ResourceName: string): SetProperty;
+	static Find(Outer: UObject, ResourceName: string): SetProperty;
+	static GetDefaultObject(): SetProperty;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SetProperty;
+	static C(Other: UObject | any): SetProperty;
 }
 
-declare class JsonUtilitiesDummyObject extends UObject { 
-	static Load(ResourceName: string): JsonUtilitiesDummyObject;
-	static Find(Outer: UObject, ResourceName: string): JsonUtilitiesDummyObject;
-	static GetDefaultObject(): JsonUtilitiesDummyObject;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JsonUtilitiesDummyObject;
-	static C(Other: UObject | any): JsonUtilitiesDummyObject;
+declare class SoftObjectProperty extends ObjectPropertyBase { 
+	static Load(ResourceName: string): SoftObjectProperty;
+	static Find(Outer: UObject, ResourceName: string): SoftObjectProperty;
+	static GetDefaultObject(): SoftObjectProperty;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoftObjectProperty;
+	static C(Other: UObject | any): SoftObjectProperty;
 }
 
-declare class PropertyConfigFileDisplayRow extends UObject { 
-	ConfigFileName: string;
-	ExternalProperty: Property;
-	bIsFileWritable: boolean;
-	static Load(ResourceName: string): PropertyConfigFileDisplayRow;
-	static Find(Outer: UObject, ResourceName: string): PropertyConfigFileDisplayRow;
-	static GetDefaultObject(): PropertyConfigFileDisplayRow;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyConfigFileDisplayRow;
-	static C(Other: UObject | any): PropertyConfigFileDisplayRow;
-}
-
-declare class ConfigHierarchyPropertyView extends UObject { 
-	EditProperty: any;
-	ConfigFilePropertyObjects: PropertyConfigFileDisplayRow[];
-	static Load(ResourceName: string): ConfigHierarchyPropertyView;
-	static Find(Outer: UObject, ResourceName: string): ConfigHierarchyPropertyView;
-	static GetDefaultObject(): ConfigHierarchyPropertyView;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ConfigHierarchyPropertyView;
-	static C(Other: UObject | any): ConfigHierarchyPropertyView;
-}
-
-declare type EPIEPreviewDeviceType = 'Unset' | 'Android' | 'IOS' | 'TVOS' | 'MAX';
-declare var EPIEPreviewDeviceType : { Unset:'Unset',Android:'Android',IOS:'IOS',TVOS:'TVOS',MAX:'MAX', };
-declare class PIEPreviewDeviceSpecification extends UObject { 
-	PreviewDeviceType: EPIEPreviewDeviceType;
-	GPUFamily: string;
-	GLVersion: string;
-	VulkanVersion: string;
-	AndroidVersion: string;
-	DeviceMake: string;
-	DeviceModel: string;
-	DeviceBuildNumber: string;
-	UsingHoudini: boolean;
-	static Load(ResourceName: string): PIEPreviewDeviceSpecification;
-	static Find(Outer: UObject, ResourceName: string): PIEPreviewDeviceSpecification;
-	static GetDefaultObject(): PIEPreviewDeviceSpecification;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PIEPreviewDeviceSpecification;
-	static C(Other: UObject | any): PIEPreviewDeviceSpecification;
+declare class SoftClassProperty extends SoftObjectProperty { 
+	static Load(ResourceName: string): SoftClassProperty;
+	static Find(Outer: UObject, ResourceName: string): SoftClassProperty;
+	static GetDefaultObject(): SoftClassProperty;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoftClassProperty;
+	static C(Other: UObject | any): SoftClassProperty;
 }
 
-declare class PIEPreviewSettings extends UObject { 
-	WindowPosX: number;
-	WindowPosY: number;
-	WindowScalingFactor: number;
-	static Load(ResourceName: string): PIEPreviewSettings;
-	static Find(Outer: UObject, ResourceName: string): PIEPreviewSettings;
-	static GetDefaultObject(): PIEPreviewSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PIEPreviewSettings;
-	static C(Other: UObject | any): PIEPreviewSettings;
+declare class StrProperty extends Property { 
+	static Load(ResourceName: string): StrProperty;
+	static Find(Outer: UObject, ResourceName: string): StrProperty;
+	static GetDefaultObject(): StrProperty;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StrProperty;
+	static C(Other: UObject | any): StrProperty;
 }
 
-declare class ClothingAssetCustomData extends UObject { 
-	static Load(ResourceName: string): ClothingAssetCustomData;
-	static Find(Outer: UObject, ResourceName: string): ClothingAssetCustomData;
-	static GetDefaultObject(): ClothingAssetCustomData;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingAssetCustomData;
-	static C(Other: UObject | any): ClothingAssetCustomData;
+declare class StructProperty extends Property { 
+	static Load(ResourceName: string): StructProperty;
+	static Find(Outer: UObject, ResourceName: string): StructProperty;
+	static GetDefaultObject(): StructProperty;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StructProperty;
+	static C(Other: UObject | any): StructProperty;
 }
 
-declare type EClothingWindMethod = 'Legacy' | 'Accurate' | 'EClothingWindMethod_MAX';
-declare var EClothingWindMethod : { Legacy:'Legacy',Accurate:'Accurate',EClothingWindMethod_MAX:'EClothingWindMethod_MAX', };
-declare class ClothConstraintSetup { 
-	Stiffness: number;
-	StiffnessMultiplier: number;
-	StretchLimit: number;
-	CompressionLimit: number;
-	clone() : ClothConstraintSetup;
-	static C(Other: UObject | any): ClothConstraintSetup;
+declare class UInt16Property extends NumericProperty { 
+	static Load(ResourceName: string): UInt16Property;
+	static Find(Outer: UObject, ResourceName: string): UInt16Property;
+	static GetDefaultObject(): UInt16Property;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UInt16Property;
+	static C(Other: UObject | any): UInt16Property;
 }
 
-declare class ClothConfig { 
-	WindMethod: EClothingWindMethod;
-	VerticalConstraintConfig: ClothConstraintSetup;
-	HorizontalConstraintConfig: ClothConstraintSetup;
-	BendConstraintConfig: ClothConstraintSetup;
-	ShearConstraintConfig: ClothConstraintSetup;
-	SelfCollisionRadius: number;
-	SelfCollisionStiffness: number;
-	SelfCollisionCullScale: number;
-	Damping: Vector;
-	Friction: number;
-	WindDragCoefficient: number;
-	WindLiftCoefficient: number;
-	LinearDrag: Vector;
-	AngularDrag: Vector;
-	LinearInertiaScale: Vector;
-	AngularInertiaScale: Vector;
-	CentrifugalInertiaScale: Vector;
-	SolverFrequency: number;
-	StiffnessFrequency: number;
-	GravityScale: number;
-	GravityOverride: Vector;
-	bUseGravityOverride: boolean;
-	TetherStiffness: number;
-	TetherLimit: number;
-	CollisionThickness: number;
-	AnimDriveSpringStiffness: number;
-	AnimDriveDamperStiffness: number;
-	clone() : ClothConfig;
-	static C(Other: UObject | any): ClothConfig;
+declare class UInt32Property extends NumericProperty { 
+	static Load(ResourceName: string): UInt32Property;
+	static Find(Outer: UObject, ResourceName: string): UInt32Property;
+	static GetDefaultObject(): UInt32Property;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UInt32Property;
+	static C(Other: UObject | any): UInt32Property;
 }
 
-declare class ClothVertBoneData { 
-	NumInfluences: number;
-	BoneIndices: any;
-	BoneWeights: number;
-	clone() : ClothVertBoneData;
-	static C(Other: UObject | any): ClothVertBoneData;
+declare class UInt64Property extends NumericProperty { 
+	static Load(ResourceName: string): UInt64Property;
+	static Find(Outer: UObject, ResourceName: string): UInt64Property;
+	static GetDefaultObject(): UInt64Property;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UInt64Property;
+	static C(Other: UObject | any): UInt64Property;
 }
 
-declare class ClothPhysicalMeshData { 
-	Vertices: Vector[];
-	Normals: Vector[];
-	VertexColors: Color[];
-	Indices: any[];
-	MaxDistances: number[];
-	BackstopDistances: number[];
-	BackstopRadiuses: number[];
-	AnimDriveMultipliers: number[];
-	InverseMasses: number[];
-	BoneData: ClothVertBoneData[];
-	MaxBoneWeights: number;
-	NumFixedVerts: number;
-	SelfCollisionIndices: any[];
-	clone() : ClothPhysicalMeshData;
-	static C(Other: UObject | any): ClothPhysicalMeshData;
+declare class WeakObjectProperty extends ObjectPropertyBase { 
+	static Load(ResourceName: string): WeakObjectProperty;
+	static Find(Outer: UObject, ResourceName: string): WeakObjectProperty;
+	static GetDefaultObject(): WeakObjectProperty;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WeakObjectProperty;
+	static C(Other: UObject | any): WeakObjectProperty;
 }
 
-declare class ClothCollisionPrim_Sphere { 
-	BoneIndex: number;
-	Radius: number;
-	LocalPosition: Vector;
-	clone() : ClothCollisionPrim_Sphere;
-	static C(Other: UObject | any): ClothCollisionPrim_Sphere;
+declare class TextProperty extends Property { 
+	static Load(ResourceName: string): TextProperty;
+	static Find(Outer: UObject, ResourceName: string): TextProperty;
+	static GetDefaultObject(): TextProperty;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextProperty;
+	static C(Other: UObject | any): TextProperty;
 }
 
-declare class ClothCollisionPrim_SphereConnection { 
-	SphereIndices: number;
-	clone() : ClothCollisionPrim_SphereConnection;
-	static C(Other: UObject | any): ClothCollisionPrim_SphereConnection;
+declare class InputCoreTypes extends UObject { 
+	static Load(ResourceName: string): InputCoreTypes;
+	static Find(Outer: UObject, ResourceName: string): InputCoreTypes;
+	static GetDefaultObject(): InputCoreTypes;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InputCoreTypes;
+	static C(Other: UObject | any): InputCoreTypes;
 }
 
-declare class ClothCollisionPrim_Convex { 
-	planes: Plane[];
-	BoneIndex: number;
-	clone() : ClothCollisionPrim_Convex;
-	static C(Other: UObject | any): ClothCollisionPrim_Convex;
+declare class FontFaceInterface extends Interface { 
+	static Load(ResourceName: string): FontFaceInterface;
+	static Find(Outer: UObject, ResourceName: string): FontFaceInterface;
+	static GetDefaultObject(): FontFaceInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FontFaceInterface;
+	static C(Other: UObject | any): FontFaceInterface;
 }
 
-declare class ClothCollisionData { 
-	Spheres: ClothCollisionPrim_Sphere[];
-	SphereConnections: ClothCollisionPrim_SphereConnection[];
-	Convexes: ClothCollisionPrim_Convex[];
-	clone() : ClothCollisionData;
-	static C(Other: UObject | any): ClothCollisionData;
+declare class FontProviderInterface extends Interface { 
+	static Load(ResourceName: string): FontProviderInterface;
+	static Find(Outer: UObject, ResourceName: string): FontProviderInterface;
+	static GetDefaultObject(): FontProviderInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FontProviderInterface;
+	static C(Other: UObject | any): FontProviderInterface;
 }
 
-declare type MaskTarget_PhysMesh = 'None' | 'MaxDistance' | 'BackstopDistance' | 'BackstopRadius' | 'AnimDriveMultiplier' | 'MaskTarget_MAX';
-declare var MaskTarget_PhysMesh : { None:'None',MaxDistance:'MaxDistance',BackstopDistance:'BackstopDistance',BackstopRadius:'BackstopRadius',AnimDriveMultiplier:'AnimDriveMultiplier',MaskTarget_MAX:'MaskTarget_MAX', };
-declare class ClothParameterMask_PhysMesh { 
-	MaskName: string;
-	CurrentTarget: MaskTarget_PhysMesh;
-	MaxValue: number;
-	MinValue: number;
-	Values: number[];
-	bEnabled: boolean;
-	clone() : ClothParameterMask_PhysMesh;
-	static C(Other: UObject | any): ClothParameterMask_PhysMesh;
+declare class SlateTypes extends UObject { 
+	static Load(ResourceName: string): SlateTypes;
+	static Find(Outer: UObject, ResourceName: string): SlateTypes;
+	static GetDefaultObject(): SlateTypes;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateTypes;
+	static C(Other: UObject | any): SlateTypes;
 }
 
-declare class ClothLODData { 
-	PhysicalMeshData: ClothPhysicalMeshData;
-	CollisionData: ClothCollisionData;
-	ParameterMasks: ClothParameterMask_PhysMesh[];
-	clone() : ClothLODData;
-	static C(Other: UObject | any): ClothLODData;
+declare class SlateWidgetStyleContainerBase extends UObject { 
+	static Load(ResourceName: string): SlateWidgetStyleContainerBase;
+	static Find(Outer: UObject, ResourceName: string): SlateWidgetStyleContainerBase;
+	static GetDefaultObject(): SlateWidgetStyleContainerBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateWidgetStyleContainerBase;
+	static C(Other: UObject | any): SlateWidgetStyleContainerBase;
 }
 
-declare class ClothingAsset extends ClothingAssetBase { 
-	PhysicsAsset: PhysicsAsset;
-	ClothConfig: ClothConfig;
-	LodData: ClothLODData[];
-	LodMap: number[];
-	UsedBoneNames: string[];
-	UsedBoneIndices: number[];
-	ReferenceBoneIndex: number;
-	CustomData: ClothingAssetCustomData;
-	static Load(ResourceName: string): ClothingAsset;
-	static Find(Outer: UObject, ResourceName: string): ClothingAsset;
-	static GetDefaultObject(): ClothingAsset;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingAsset;
-	static C(Other: UObject | any): ClothingAsset;
+declare class SlateWidgetStyleAsset extends UObject { 
+	CustomStyle: SlateWidgetStyleContainerBase;
+	static Load(ResourceName: string): SlateWidgetStyleAsset;
+	static Find(Outer: UObject, ResourceName: string): SlateWidgetStyleAsset;
+	static GetDefaultObject(): SlateWidgetStyleAsset;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateWidgetStyleAsset;
+	static C(Other: UObject | any): SlateWidgetStyleAsset;
 }
 
-declare class ClothingSimulationFactoryNv extends ClothingSimulationFactory { 
-	static Load(ResourceName: string): ClothingSimulationFactoryNv;
-	static Find(Outer: UObject, ResourceName: string): ClothingSimulationFactoryNv;
-	static GetDefaultObject(): ClothingSimulationFactoryNv;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingSimulationFactoryNv;
-	static C(Other: UObject | any): ClothingSimulationFactoryNv;
+declare class SlateWidgetStyleContainerInterface extends Interface { 
+	static Load(ResourceName: string): SlateWidgetStyleContainerInterface;
+	static Find(Outer: UObject, ResourceName: string): SlateWidgetStyleContainerInterface;
+	static GetDefaultObject(): SlateWidgetStyleContainerInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateWidgetStyleContainerInterface;
+	static C(Other: UObject | any): SlateWidgetStyleContainerInterface;
+}
+
+declare class SlateWidgetStyle { 
+	clone() : SlateWidgetStyle;
+	static C(Other: UObject | any): SlateWidgetStyle;
 }
 
-declare class ClothingSimulationInteractorNv extends ClothingSimulationInteractor { 
-	static Load(ResourceName: string): ClothingSimulationInteractorNv;
-	static Find(Outer: UObject, ResourceName: string): ClothingSimulationInteractorNv;
-	static GetDefaultObject(): ClothingSimulationInteractorNv;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingSimulationInteractorNv;
-	SetAnimDriveSpringStiffness(InStiffness: number): void;
-	SetAnimDriveDamperStiffness(InStiffness: number): void;
-	EnableGravityOverride(InVector: Vector): void;
-	DisableGravityOverride(): void;
-	static C(Other: UObject | any): ClothingSimulationInteractorNv;
+declare class SlateSound { 
+	ResourceObject: UObject;
+	clone() : SlateSound;
+	static C(Other: UObject | any): SlateSound;
 }
 
-declare class ClothingAssetFactory extends ClothingAssetFactoryBase { 
-	static Load(ResourceName: string): ClothingAssetFactory;
-	static Find(Outer: UObject, ResourceName: string): ClothingAssetFactory;
-	static GetDefaultObject(): ClothingAssetFactory;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingAssetFactory;
-	static C(Other: UObject | any): ClothingAssetFactory;
+declare class ButtonStyle extends SlateWidgetStyle { 
+	Normal: SlateBrush;
+	Hovered: SlateBrush;
+	Pressed: SlateBrush;
+	Disabled: SlateBrush;
+	NormalPadding: Margin;
+	PressedPadding: Margin;
+	PressedSlateSound: SlateSound;
+	HoveredSlateSound: SlateSound;
+	PressedSound: string;
+	HoveredSound: string;
+	clone() : ButtonStyle;
+	static C(Other: UObject | any): ButtonStyle;
 }
 
-declare class SoundNode extends UObject { 
-	ChildNodes: SoundNode[];
-	GraphNode: EdGraphNode;
-	static Load(ResourceName: string): SoundNode;
-	static Find(Outer: UObject, ResourceName: string): SoundNode;
-	static GetDefaultObject(): SoundNode;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNode;
-	static C(Other: UObject | any): SoundNode;
+declare class ButtonWidgetStyle extends SlateWidgetStyleContainerBase { 
+	ButtonStyle: ButtonStyle;
+	static Load(ResourceName: string): ButtonWidgetStyle;
+	static Find(Outer: UObject, ResourceName: string): ButtonWidgetStyle;
+	static GetDefaultObject(): ButtonWidgetStyle;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ButtonWidgetStyle;
+	static C(Other: UObject | any): ButtonWidgetStyle;
 }
 
-declare class SoundCue extends SoundBase { 
-	bOverrideAttenuation: boolean;
-	bExcludeFromRandomNodeBranchCulling: boolean;
-	FirstNode: SoundNode;
-	VolumeMultiplier: number;
-	PitchMultiplier: number;
-	AttenuationOverrides: SoundAttenuationSettings;
-	AllNodes: SoundNode[];
-	SoundCueGraph: EdGraph;
-	SubtitlePriority: number;
-	static Load(ResourceName: string): SoundCue;
-	static Find(Outer: UObject, ResourceName: string): SoundCue;
-	static GetDefaultObject(): SoundCue;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCue;
-	static C(Other: UObject | any): SoundCue;
+declare type ESlateCheckBoxType = 'CheckBox' | 'ToggleButton' | 'ESlateCheckBoxType_MAX';
+declare var ESlateCheckBoxType : { CheckBox:'CheckBox',ToggleButton:'ToggleButton',ESlateCheckBoxType_MAX:'ESlateCheckBoxType_MAX', };
+declare class CheckBoxStyle extends SlateWidgetStyle { 
+	CheckBoxType: ESlateCheckBoxType;
+	UncheckedImage: SlateBrush;
+	UncheckedHoveredImage: SlateBrush;
+	UncheckedPressedImage: SlateBrush;
+	CheckedImage: SlateBrush;
+	CheckedHoveredImage: SlateBrush;
+	CheckedPressedImage: SlateBrush;
+	UndeterminedImage: SlateBrush;
+	UndeterminedHoveredImage: SlateBrush;
+	UndeterminedPressedImage: SlateBrush;
+	Padding: Margin;
+	ForegroundColor: SlateColor;
+	BorderBackgroundColor: SlateColor;
+	CheckedSlateSound: SlateSound;
+	UncheckedSlateSound: SlateSound;
+	HoveredSlateSound: SlateSound;
+	CheckedSound: string;
+	UncheckedSound: string;
+	HoveredSound: string;
+	clone() : CheckBoxStyle;
+	static C(Other: UObject | any): CheckBoxStyle;
 }
 
-declare class VREditorAssetContainer extends DataAsset { 
-	DockableWindowCloseSound: SoundBase;
-	DockableWindowOpenSound: SoundBase;
-	DockableWindowDropSound: SoundBase;
-	DockableWindowDragSound: SoundBase;
-	DropFromContentBrowserSound: SoundBase;
-	RadialMenuOpenSound: SoundBase;
-	RadialMenuCloseSound: SoundBase;
-	TeleportSound: SoundBase;
-	ButtonPressSound: SoundCue;
-	AutoScaleSound: SoundBase;
-	GenericHMDMesh: StaticMesh;
-	PlaneMesh: StaticMesh;
-	CylinderMesh: StaticMesh;
-	LaserPointerStartMesh: StaticMesh;
-	LaserPointerMesh: StaticMesh;
-	LaserPointerEndMesh: StaticMesh;
-	LaserPointerHoverMesh: StaticMesh;
-	VivePreControllerMesh: StaticMesh;
-	OculusControllerMesh: StaticMesh;
-	GenericControllerMesh: StaticMesh;
-	TeleportRootMesh: StaticMesh;
-	WindowMesh: StaticMesh;
-	WindowSelectionBarMesh: StaticMesh;
-	WindowCloseButtonMesh: StaticMesh;
-	RadialMenuMainMesh: StaticMesh;
-	RadialMenuPointerMesh: StaticMesh;
-	PointerCursorMesh: StaticMesh;
-	LineSegmentCylinderMesh: StaticMesh;
-	JointSphereMesh: StaticMesh;
-	DockingButtonMesh: StaticMesh;
-	GridMaterial: MaterialInterface;
-	LaserPointerMaterial: MaterialInterface;
-	LaserPointerTranslucentMaterial: MaterialInterface;
-	WorldMovementPostProcessMaterial: Material;
-	TextMaterial: MaterialInterface;
-	VivePreControllerMaterial: MaterialInterface;
-	OculusControllerMaterial: MaterialInterface;
-	TeleportMaterial: MaterialInterface;
-	WindowMaterial: MaterialInterface;
-	WindowTranslucentMaterial: MaterialInterface;
-	LineMaterial: Material;
-	TranslucentTextMaterial: MaterialInterface;
-	TextFont: Font;
-	static Load(ResourceName: string): VREditorAssetContainer;
-	static Find(Outer: UObject, ResourceName: string): VREditorAssetContainer;
-	static GetDefaultObject(): VREditorAssetContainer;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorAssetContainer;
-	static C(Other: UObject | any): VREditorAssetContainer;
+declare class CheckBoxWidgetStyle extends SlateWidgetStyleContainerBase { 
+	CheckBoxStyle: CheckBoxStyle;
+	static Load(ResourceName: string): CheckBoxWidgetStyle;
+	static Find(Outer: UObject, ResourceName: string): CheckBoxWidgetStyle;
+	static GetDefaultObject(): CheckBoxWidgetStyle;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CheckBoxWidgetStyle;
+	static C(Other: UObject | any): CheckBoxWidgetStyle;
 }
 
-declare class EditorWorldExtensionActorData { 
-	Actor: Actor;
-	bValidForPIE: boolean;
-	clone() : EditorWorldExtensionActorData;
-	static C(Other: UObject | any): EditorWorldExtensionActorData;
+declare class ComboButtonStyle extends SlateWidgetStyle { 
+	ButtonStyle: ButtonStyle;
+	DownArrowImage: SlateBrush;
+	MenuBorderBrush: SlateBrush;
+	MenuBorderPadding: Margin;
+	clone() : ComboButtonStyle;
+	static C(Other: UObject | any): ComboButtonStyle;
 }
 
-declare class EditorWorldExtension extends UObject { 
-	ExtensionActors: EditorWorldExtensionActorData[];
-	static Load(ResourceName: string): EditorWorldExtension;
-	static Find(Outer: UObject, ResourceName: string): EditorWorldExtension;
-	static GetDefaultObject(): EditorWorldExtension;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorWorldExtension;
-	static C(Other: UObject | any): EditorWorldExtension;
+declare class ComboBoxStyle extends SlateWidgetStyle { 
+	ComboButtonStyle: ComboButtonStyle;
+	PressedSlateSound: SlateSound;
+	SelectionChangeSlateSound: SlateSound;
+	PressedSound: string;
+	SelectionChangeSound: string;
+	clone() : ComboBoxStyle;
+	static C(Other: UObject | any): ComboBoxStyle;
 }
 
-declare type EHorizTextAligment = 'EHTA_Left' | 'EHTA_Center' | 'EHTA_Right' | 'EHTA_MAX';
-declare var EHorizTextAligment : { EHTA_Left:'EHTA_Left',EHTA_Center:'EHTA_Center',EHTA_Right:'EHTA_Right',EHTA_MAX:'EHTA_MAX', };
-declare type EVerticalTextAligment = 'EVRTA_TextTop' | 'EVRTA_TextCenter' | 'EVRTA_TextBottom' | 'EVRTA_QuadTop' | 'EVRTA_MAX';
-declare var EVerticalTextAligment : { EVRTA_TextTop:'EVRTA_TextTop',EVRTA_TextCenter:'EVRTA_TextCenter',EVRTA_TextBottom:'EVRTA_TextBottom',EVRTA_QuadTop:'EVRTA_QuadTop',EVRTA_MAX:'EVRTA_MAX', };
-declare class TextRenderComponent extends PrimitiveComponent { 
-	text: string;
-	TextMaterial: MaterialInterface;
-	Font: Font;
-	HorizontalAlignment: EHorizTextAligment;
-	VerticalAlignment: EVerticalTextAligment;
-	TextRenderColor: Color;
-	XScale: number;
-	YScale: number;
-	WorldSize: number;
-	InvDefaultSize: number;
-	HorizSpacingAdjust: number;
-	VertSpacingAdjust: number;
-	bAlwaysRenderAsText: boolean;
-	static Load(ResourceName: string): TextRenderComponent;
-	static Find(Outer: UObject, ResourceName: string): TextRenderComponent;
-	static GetDefaultObject(): TextRenderComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextRenderComponent;
-	SetYScale(Value: number): void;
-	SetXScale(Value: number): void;
-	SetWorldSize(Value: number): void;
-	SetVertSpacingAdjust(Value: number): void;
-	SetVerticalAlignment(Value: EVerticalTextAligment): void;
-	SetTextRenderColor(Value: Color): void;
-	SetTextMaterial(Material: MaterialInterface): void;
-	SetText(Value: string): void;
-	SetHorizSpacingAdjust(Value: number): void;
-	SetHorizontalAlignment(Value: EHorizTextAligment): void;
-	SetFont(Value: Font): void;
-	K2_SetText(Value: string): void;
-	GetTextWorldSize(): Vector;
-	GetTextLocalSize(): Vector;
-	static C(Other: UObject | any): TextRenderComponent;
+declare class ComboBoxWidgetStyle extends SlateWidgetStyleContainerBase { 
+	ComboBoxStyle: ComboBoxStyle;
+	static Load(ResourceName: string): ComboBoxWidgetStyle;
+	static Find(Outer: UObject, ResourceName: string): ComboBoxWidgetStyle;
+	static GetDefaultObject(): ComboBoxWidgetStyle;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ComboBoxWidgetStyle;
+	static C(Other: UObject | any): ComboBoxWidgetStyle;
 }
 
-declare class PostProcessComponent extends SceneComponent { 
-	Settings: PostProcessSettings;
-	Priority: number;
-	BlendRadius: number;
-	BlendWeight: number;
-	bEnabled: boolean;
-	bUnbound: boolean;
-	static Load(ResourceName: string): PostProcessComponent;
-	static Find(Outer: UObject, ResourceName: string): PostProcessComponent;
-	static GetDefaultObject(): PostProcessComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PostProcessComponent;
-	static C(Other: UObject | any): PostProcessComponent;
+declare class ComboButtonWidgetStyle extends SlateWidgetStyleContainerBase { 
+	ComboButtonStyle: ComboButtonStyle;
+	static Load(ResourceName: string): ComboButtonWidgetStyle;
+	static Find(Outer: UObject, ResourceName: string): ComboButtonWidgetStyle;
+	static GetDefaultObject(): ComboButtonWidgetStyle;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ComboButtonWidgetStyle;
+	static C(Other: UObject | any): ComboButtonWidgetStyle;
 }
 
-declare class VREditorAvatarActor extends Actor { 
-	HeadMeshComponent: StaticMeshComponent;
-	WorldMovementGridMeshComponent: StaticMeshComponent;
-	WorldMovementGridMID: MaterialInstanceDynamic;
-	WorldMovementGridOpacity: number;
-	bIsDrawingWorldMovementPostProcess: boolean;
-	WorldMovementPostProcessMaterial: MaterialInstanceDynamic;
-	ScaleProgressMeshComponent: StaticMeshComponent;
-	CurrentScaleProgressMeshComponent: StaticMeshComponent;
-	UserScaleIndicatorText: TextRenderComponent;
-	FixedUserScaleMID: MaterialInstanceDynamic;
-	TranslucentFixedUserScaleMID: MaterialInstanceDynamic;
-	CurrentUserScaleMID: MaterialInstanceDynamic;
-	TranslucentCurrentUserScaleMID: MaterialInstanceDynamic;
-	PostProcessComponent: PostProcessComponent;
-	VRMode: VREditorMode;
-	static GetDefaultObject(): VREditorAvatarActor;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorAvatarActor;
-	static C(Other: UObject | any): VREditorAvatarActor;
+declare class FontOutlineSettings { 
+	OutlineSize: number;
+	bSeparateFillAlpha: boolean;
+	bApplyOutlineToDropShadows: boolean;
+	OutlineMaterial: UObject;
+	OutlineColor: LinearColor;
+	clone() : FontOutlineSettings;
+	static C(Other: UObject | any): FontOutlineSettings;
 }
 
-declare class VREditorBaseActor extends Actor { 
-	VRMode: VREditorMode;
-	static GetDefaultObject(): VREditorBaseActor;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorBaseActor;
-	static C(Other: UObject | any): VREditorBaseActor;
+declare class SlateFontInfo { 
+	FontObject: UObject;
+	FontMaterial: UObject;
+	OutlineSettings: FontOutlineSettings;
+	TypefaceFontName: string;
+	Size: number;
+	FontName: string;
+	Hinting: EFontHinting;
+	clone() : SlateFontInfo;
+	static C(Other: UObject | any): SlateFontInfo;
 }
 
-declare type EWidgetSpace = 'World' | 'Screen' | 'EWidgetSpace_MAX';
-declare var EWidgetSpace : { World:'World',Screen:'Screen',EWidgetSpace_MAX:'EWidgetSpace_MAX', };
-declare type EWidgetTimingPolicy = 'RealTime' | 'GameTime' | 'EWidgetTimingPolicy_MAX';
-declare var EWidgetTimingPolicy : { RealTime:'RealTime',GameTime:'GameTime',EWidgetTimingPolicy_MAX:'EWidgetTimingPolicy_MAX', };
-declare type EWidgetBlendMode = 'Opaque' | 'Masked' | 'Transparent' | 'EWidgetBlendMode_MAX';
-declare var EWidgetBlendMode : { Opaque:'Opaque',Masked:'Masked',Transparent:'Transparent',EWidgetBlendMode_MAX:'EWidgetBlendMode_MAX', };
-declare type EWidgetGeometryMode = 'Plane' | 'Cylinder' | 'EWidgetGeometryMode_MAX';
-declare var EWidgetGeometryMode : { Plane:'Plane',Cylinder:'Cylinder',EWidgetGeometryMode_MAX:'EWidgetGeometryMode_MAX', };
-declare class WidgetComponent extends MeshComponent { 
-	Space: EWidgetSpace;
-	TimingPolicy: EWidgetTimingPolicy;
-	WidgetClass: UnrealEngineClass;
-	DrawSize: IntPoint;
-	bManuallyRedraw: boolean;
-	bRedrawRequested: boolean;
-	RedrawTime: number;
-	CurrentDrawSize: IntPoint;
-	bDrawAtDesiredSize: boolean;
-	Pivot: Vector2D;
-	bReceiveHardwareInput: boolean;
-	bWindowFocusable: boolean;
-	bApplyGammaCorrection: boolean;
-	OwnerPlayer: LocalPlayer;
-	BackgroundColor: LinearColor;
-	TintColorAndOpacity: LinearColor;
-	OpacityFromTexture: number;
-	BlendMode: EWidgetBlendMode;
-	bIsTwoSided: boolean;
-	TickWhenOffscreen: boolean;
-	Widget: UserWidget;
-	BodySetup: BodySetup;
-	TranslucentMaterial: MaterialInterface;
-	TranslucentMaterial_OneSided: MaterialInterface;
-	OpaqueMaterial: MaterialInterface;
-	OpaqueMaterial_OneSided: MaterialInterface;
-	MaskedMaterial: MaterialInterface;
-	MaskedMaterial_OneSided: MaterialInterface;
-	RenderTarget: TextureRenderTarget2D;
-	MaterialInstance: MaterialInstanceDynamic;
-	bAddedToScreen: boolean;
-	bEditTimeUsable: boolean;
-	SharedLayerName: string;
-	LayerZOrder: number;
-	GeometryMode: EWidgetGeometryMode;
-	CylinderArcAngle: number;
-	static Load(ResourceName: string): WidgetComponent;
-	static Find(Outer: UObject, ResourceName: string): WidgetComponent;
-	static GetDefaultObject(): WidgetComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetComponent;
-	SetWidget(Widget: UserWidget): void;
-	SetTintColorAndOpacity(NewTintColorAndOpacity: LinearColor): void;
-	SetOwnerPlayer(LocalPlayer: LocalPlayer): void;
-	SetManuallyRedraw(bUseManualRedraw: boolean): void;
-	SetDrawSize(Size: Vector2D): void;
-	SetBackgroundColor(NewBackgroundColor: LinearColor): void;
-	RequestRedraw(): void;
-	GetUserWidgetObject(): UserWidget;
-	GetRenderTarget(): TextureRenderTarget2D;
-	GetOwnerPlayer(): LocalPlayer;
-	GetMaterialInstance(): MaterialInstanceDynamic;
-	GetDrawSize(): Vector2D;
-	static C(Other: UObject | any): WidgetComponent;
+declare class ScrollBarStyle extends SlateWidgetStyle { 
+	HorizontalBackgroundImage: SlateBrush;
+	VerticalBackgroundImage: SlateBrush;
+	VerticalTopSlotImage: SlateBrush;
+	HorizontalTopSlotImage: SlateBrush;
+	VerticalBottomSlotImage: SlateBrush;
+	HorizontalBottomSlotImage: SlateBrush;
+	NormalThumbImage: SlateBrush;
+	HoveredThumbImage: SlateBrush;
+	DraggedThumbImage: SlateBrush;
+	clone() : ScrollBarStyle;
+	static C(Other: UObject | any): ScrollBarStyle;
 }
 
-declare type EVREditorWidgetDrawingPolicy = 'Always' | 'Hovering' | 'EVREditorWidgetDrawingPolicy_MAX';
-declare var EVREditorWidgetDrawingPolicy : { Always:'Always',Hovering:'Hovering',EVREditorWidgetDrawingPolicy_MAX:'EVREditorWidgetDrawingPolicy_MAX', };
-declare class VREditorWidgetComponent extends WidgetComponent { 
-	DrawingPolicy: EVREditorWidgetDrawingPolicy;
-	bIsHovering: boolean;
-	bHasEverDrawn: boolean;
-	static Load(ResourceName: string): VREditorWidgetComponent;
-	static Find(Outer: UObject, ResourceName: string): VREditorWidgetComponent;
-	static GetDefaultObject(): VREditorWidgetComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorWidgetComponent;
-	static C(Other: UObject | any): VREditorWidgetComponent;
+declare class EditableTextBoxStyle extends SlateWidgetStyle { 
+	BackgroundImageNormal: SlateBrush;
+	BackgroundImageHovered: SlateBrush;
+	BackgroundImageFocused: SlateBrush;
+	BackgroundImageReadOnly: SlateBrush;
+	Padding: Margin;
+	Font: SlateFontInfo;
+	ForegroundColor: SlateColor;
+	BackgroundColor: SlateColor;
+	ReadOnlyForegroundColor: SlateColor;
+	HScrollBarPadding: Margin;
+	VScrollBarPadding: Margin;
+	ScrollBarStyle: ScrollBarStyle;
+	clone() : EditableTextBoxStyle;
+	static C(Other: UObject | any): EditableTextBoxStyle;
 }
 
-declare class VREditorFloatingUI extends VREditorBaseActor { 
-	UserWidget: UserWidget;
-	WidgetComponent: VREditorWidgetComponent;
-	WindowMeshComponent: StaticMeshComponent;
-	UserWidgetClass: UnrealEngineClass;
-	static GetDefaultObject(): VREditorFloatingUI;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorFloatingUI;
-	static C(Other: UObject | any): VREditorFloatingUI;
+declare class EditableTextBoxWidgetStyle extends SlateWidgetStyleContainerBase { 
+	EditableTextBoxStyle: EditableTextBoxStyle;
+	static Load(ResourceName: string): EditableTextBoxWidgetStyle;
+	static Find(Outer: UObject, ResourceName: string): EditableTextBoxWidgetStyle;
+	static GetDefaultObject(): EditableTextBoxWidgetStyle;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableTextBoxWidgetStyle;
+	static C(Other: UObject | any): EditableTextBoxWidgetStyle;
 }
 
-declare class VREditorRadialFloatingUI extends VREditorBaseActor { 
-	WidgetComponents: VREditorWidgetComponent[];
-	WindowMeshComponent: StaticMeshComponent;
-	ArrowMeshComponent: StaticMeshComponent;
-	CentralWidgetComponent: VREditorWidgetComponent;
-	static GetDefaultObject(): VREditorRadialFloatingUI;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorRadialFloatingUI;
-	static C(Other: UObject | any): VREditorRadialFloatingUI;
+declare class EditableTextStyle extends SlateWidgetStyle { 
+	Font: SlateFontInfo;
+	ColorAndOpacity: SlateColor;
+	BackgroundImageSelected: SlateBrush;
+	BackgroundImageComposing: SlateBrush;
+	CaretImage: SlateBrush;
+	clone() : EditableTextStyle;
+	static C(Other: UObject | any): EditableTextStyle;
 }
 
-declare class ViewportDragOperation extends UObject { 
-	static Load(ResourceName: string): ViewportDragOperation;
-	static Find(Outer: UObject, ResourceName: string): ViewportDragOperation;
-	static GetDefaultObject(): ViewportDragOperation;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportDragOperation;
-	static C(Other: UObject | any): ViewportDragOperation;
+declare class EditableTextWidgetStyle extends SlateWidgetStyleContainerBase { 
+	EditableTextStyle: EditableTextStyle;
+	static Load(ResourceName: string): EditableTextWidgetStyle;
+	static Find(Outer: UObject, ResourceName: string): EditableTextWidgetStyle;
+	static GetDefaultObject(): EditableTextWidgetStyle;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableTextWidgetStyle;
+	static C(Other: UObject | any): EditableTextWidgetStyle;
 }
 
-declare class ViewportDragOperationComponent extends ActorComponent { 
-	DragOperation: ViewportDragOperation;
-	DragOperationSubclass: UnrealEngineClass;
-	static Load(ResourceName: string): ViewportDragOperationComponent;
-	static Find(Outer: UObject, ResourceName: string): ViewportDragOperationComponent;
-	static GetDefaultObject(): ViewportDragOperationComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportDragOperationComponent;
-	static C(Other: UObject | any): ViewportDragOperationComponent;
+declare class ProgressBarStyle extends SlateWidgetStyle { 
+	BackgroundImage: SlateBrush;
+	FillImage: SlateBrush;
+	MarqueeImage: SlateBrush;
+	clone() : ProgressBarStyle;
+	static C(Other: UObject | any): ProgressBarStyle;
 }
 
-declare class VREditorDockableWindow extends VREditorFloatingUI { 
-	DockButtonMeshComponent: StaticMeshComponent;
-	SelectionBarMeshComponent: StaticMeshComponent;
-	CloseButtonMeshComponent: StaticMeshComponent;
-	DockButtonMID: MaterialInstanceDynamic;
-	SelectionBarMID: MaterialInstanceDynamic;
-	SelectionBarTranslucentMID: MaterialInstanceDynamic;
-	CloseButtonMID: MaterialInstanceDynamic;
-	CloseButtonTranslucentMID: MaterialInstanceDynamic;
-	DragOperationComponent: ViewportDragOperationComponent;
-	static GetDefaultObject(): VREditorDockableWindow;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorDockableWindow;
-	static C(Other: UObject | any): VREditorDockableWindow;
+declare class ProgressWidgetStyle extends SlateWidgetStyleContainerBase { 
+	ProgressBarStyle: ProgressBarStyle;
+	static Load(ResourceName: string): ProgressWidgetStyle;
+	static Find(Outer: UObject, ResourceName: string): ProgressWidgetStyle;
+	static GetDefaultObject(): ProgressWidgetStyle;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ProgressWidgetStyle;
+	static C(Other: UObject | any): ProgressWidgetStyle;
 }
 
-declare class ViewportTransformer extends UObject { 
-	ViewportWorldInteraction: ViewportWorldInteraction;
-	static Load(ResourceName: string): ViewportTransformer;
-	static Find(Outer: UObject, ResourceName: string): ViewportTransformer;
-	static GetDefaultObject(): ViewportTransformer;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportTransformer;
-	Shutdown(): void;
-	ShouldCenterTransformGizmoPivot(): boolean;
-	OnStopDragging(Interactor: ViewportInteractor): void;
-	OnStartDragging(Interactor: ViewportInteractor): void;
-	Init(InitViewportWorldInteraction: ViewportWorldInteraction): void;
-	CanAlignToActors(): boolean;
-	static C(Other: UObject | any): ViewportTransformer;
+declare class ScrollBarWidgetStyle extends SlateWidgetStyleContainerBase { 
+	ScrollBarStyle: ScrollBarStyle;
+	static Load(ResourceName: string): ScrollBarWidgetStyle;
+	static Find(Outer: UObject, ResourceName: string): ScrollBarWidgetStyle;
+	static GetDefaultObject(): ScrollBarWidgetStyle;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ScrollBarWidgetStyle;
+	static C(Other: UObject | any): ScrollBarWidgetStyle;
 }
 
-declare class GizmoHandle { 
-	clone() : GizmoHandle;
-	static C(Other: UObject | any): GizmoHandle;
+declare class ScrollBoxStyle extends SlateWidgetStyle { 
+	TopShadowBrush: SlateBrush;
+	BottomShadowBrush: SlateBrush;
+	LeftShadowBrush: SlateBrush;
+	RightShadowBrush: SlateBrush;
+	clone() : ScrollBoxStyle;
+	static C(Other: UObject | any): ScrollBoxStyle;
 }
 
-declare class GizmoHandleGroup extends SceneComponent { 
-	GizmoMaterial: MaterialInterface;
-	TranslucentGizmoMaterial: MaterialInterface;
-	Handles: GizmoHandle[];
-	OwningTransformGizmoActor: BaseTransformGizmo;
-	DragOperationComponent: ViewportDragOperationComponent;
-	static Load(ResourceName: string): GizmoHandleGroup;
-	static Find(Outer: UObject, ResourceName: string): GizmoHandleGroup;
-	static GetDefaultObject(): GizmoHandleGroup;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoHandleGroup;
-	static C(Other: UObject | any): GizmoHandleGroup;
+declare class ScrollBoxWidgetStyle extends SlateWidgetStyleContainerBase { 
+	ScrollBoxStyle: ScrollBoxStyle;
+	static Load(ResourceName: string): ScrollBoxWidgetStyle;
+	static Find(Outer: UObject, ResourceName: string): ScrollBoxWidgetStyle;
+	static GetDefaultObject(): ScrollBoxWidgetStyle;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ScrollBoxWidgetStyle;
+	static C(Other: UObject | any): ScrollBoxWidgetStyle;
+}
+
+declare class SlateSettings extends UObject { 
+	bExplicitCanvasChildZOrder: boolean;
+	static Load(ResourceName: string): SlateSettings;
+	static Find(Outer: UObject, ResourceName: string): SlateSettings;
+	static GetDefaultObject(): SlateSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateSettings;
+	static C(Other: UObject | any): SlateSettings;
+}
+
+declare class SpinBoxStyle extends SlateWidgetStyle { 
+	BackgroundBrush: SlateBrush;
+	HoveredBackgroundBrush: SlateBrush;
+	ActiveFillBrush: SlateBrush;
+	InactiveFillBrush: SlateBrush;
+	ArrowsImage: SlateBrush;
+	ForegroundColor: SlateColor;
+	TextPadding: Margin;
+	clone() : SpinBoxStyle;
+	static C(Other: UObject | any): SpinBoxStyle;
 }
 
-declare class BaseTransformGizmo extends Actor { 
-	SceneComponent: SceneComponent;
-	AllHandleGroups: GizmoHandleGroup[];
-	WorldInteraction: ViewportWorldInteraction;
-	static GetDefaultObject(): BaseTransformGizmo;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BaseTransformGizmo;
-	static C(Other: UObject | any): BaseTransformGizmo;
+declare class SpinBoxWidgetStyle extends SlateWidgetStyleContainerBase { 
+	SpinBoxStyle: SpinBoxStyle;
+	static Load(ResourceName: string): SpinBoxWidgetStyle;
+	static Find(Outer: UObject, ResourceName: string): SpinBoxWidgetStyle;
+	static GetDefaultObject(): SpinBoxWidgetStyle;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpinBoxWidgetStyle;
+	static C(Other: UObject | any): SpinBoxWidgetStyle;
 }
 
-declare class MouseCursorInteractor extends ViewportInteractor { 
-	static Load(ResourceName: string): MouseCursorInteractor;
-	static Find(Outer: UObject, ResourceName: string): MouseCursorInteractor;
-	static GetDefaultObject(): MouseCursorInteractor;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MouseCursorInteractor;
-	static C(Other: UObject | any): MouseCursorInteractor;
+declare class TextBlockStyle extends SlateWidgetStyle { 
+	Font: SlateFontInfo;
+	ColorAndOpacity: SlateColor;
+	ShadowOffset: Vector2D;
+	ShadowColorAndOpacity: LinearColor;
+	SelectedBackgroundColor: SlateColor;
+	HighlightColor: LinearColor;
+	HighlightShape: SlateBrush;
+	StrikeBrush: SlateBrush;
+	UnderlineBrush: SlateBrush;
+	clone() : TextBlockStyle;
+	static C(Other: UObject | any): TextBlockStyle;
 }
 
-declare class ViewportInteractionAssetContainer extends DataAsset { 
-	GizmoHandleSelectedSound: SoundBase;
-	GizmoHandleDropSound: SoundBase;
-	SelectionChangeSound: SoundBase;
-	SelectionDropSound: SoundBase;
-	SelectionStartDragSound: SoundBase;
-	GridSnapSound: SoundBase;
-	ActorSnapSound: SoundBase;
-	UndoSound: SoundBase;
-	RedoSound: SoundBase;
-	GridMesh: StaticMesh;
-	TranslationHandleMesh: StaticMesh;
-	UniformScaleHandleMesh: StaticMesh;
-	ScaleHandleMesh: StaticMesh;
-	PlaneTranslationHandleMesh: StaticMesh;
-	RotationHandleMesh: StaticMesh;
-	RotationHandleSelectedMesh: StaticMesh;
-	StartRotationIndicatorMesh: StaticMesh;
-	CurrentRotationIndicatorMesh: StaticMesh;
-	FreeRotationHandleMesh: StaticMesh;
-	GridMaterial: MaterialInterface;
-	TransformGizmoMaterial: MaterialInterface;
-	TranslucentTransformGizmoMaterial: MaterialInterface;
-	static Load(ResourceName: string): ViewportInteractionAssetContainer;
-	static Find(Outer: UObject, ResourceName: string): ViewportInteractionAssetContainer;
-	static GetDefaultObject(): ViewportInteractionAssetContainer;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportInteractionAssetContainer;
-	static C(Other: UObject | any): ViewportInteractionAssetContainer;
+declare class TextBlockWidgetStyle extends SlateWidgetStyleContainerBase { 
+	TextBlockStyle: TextBlockStyle;
+	static Load(ResourceName: string): TextBlockWidgetStyle;
+	static Find(Outer: UObject, ResourceName: string): TextBlockWidgetStyle;
+	static GetDefaultObject(): TextBlockWidgetStyle;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextBlockWidgetStyle;
+	static C(Other: UObject | any): TextBlockWidgetStyle;
 }
 
-declare class ViewportWorldInteraction extends EditorWorldExtension { 
-	Interactors: ViewportInteractor[];
-	ViewportTransformer: ViewportTransformer;
-	TransformGizmoActor: BaseTransformGizmo;
-	SnapGridActor: Actor;
-	SnapGridMeshComponent: StaticMeshComponent;
-	SnapGridMID: MaterialInstanceDynamic;
-	DefaultMouseCursorInteractor: MouseCursorInteractor;
-	ActorsToExcludeFromHitTest: any[];
-	AssetContainer: ViewportInteractionAssetContainer;
-	static Load(ResourceName: string): ViewportWorldInteraction;
-	static Find(Outer: UObject, ResourceName: string): ViewportWorldInteraction;
-	static GetDefaultObject(): ViewportWorldInteraction;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportWorldInteraction;
-	static C(Other: UObject | any): ViewportWorldInteraction;
+declare type EColorVisionDeficiency = 'NormalVision' | 'Deuteranope' | 'Protanope' | 'Tritanope' | 'EColorVisionDeficiency_MAX';
+declare var EColorVisionDeficiency : { NormalVision:'NormalVision',Deuteranope:'Deuteranope',Protanope:'Protanope',Tritanope:'Tritanope',EColorVisionDeficiency_MAX:'EColorVisionDeficiency_MAX', };
+declare type ELogTimes = 'None' | 'UTC' | 'SinceGStartTime' | 'Local' | 'ELogTimes_MAX';
+declare var ELogTimes : { None:'None',UTC:'UTC',SinceGStartTime:'SinceGStartTime',Local:'Local',ELogTimes_MAX:'ELogTimes_MAX', };
+declare type EAssetEditorOpenLocation = 'Default' | 'NewWindow' | 'MainWindow' | 'ContentBrowser' | 'LastDockedWindowOrNewWindow' | 'LastDockedWindowOrMainWindow' | 'LastDockedWindowOrContentBrowser' | 'EAssetEditorOpenLocation_MAX';
+declare var EAssetEditorOpenLocation : { Default:'Default',NewWindow:'NewWindow',MainWindow:'MainWindow',ContentBrowser:'ContentBrowser',LastDockedWindowOrNewWindow:'LastDockedWindowOrNewWindow',LastDockedWindowOrMainWindow:'LastDockedWindowOrMainWindow',LastDockedWindowOrContentBrowser:'LastDockedWindowOrContentBrowser',EAssetEditorOpenLocation_MAX:'EAssetEditorOpenLocation_MAX', };
+declare class EditorStyleSettings extends UObject { 
+	bEnableHighDPIAwareness: boolean;
+	ColorVisionDeficiencyPreviewType: EColorVisionDeficiency;
+	ColorVisionDeficiencySeverity: number;
+	bColorVisionDeficiencyCorrection: boolean;
+	bColorVisionDeficiencyCorrectionPreviewWithDeficiency: boolean;
+	SelectionColor: LinearColor;
+	PressedSelectionColor: LinearColor;
+	InactiveSelectionColor: LinearColor;
+	KeyboardFocusColor: LinearColor;
+	EditorWindowBackgroundColor: LinearColor;
+	EditorMainWindowBackgroundOverride: SlateBrush;
+	EditorChildWindowBackgroundOverride: SlateBrush;
+	bResetEditorWindowBackgroundSettings: boolean;
+	bUseSmallToolBarIcons: boolean;
+	bUseGrid: boolean;
+	RegularColor: LinearColor;
+	RuleColor: LinearColor;
+	CenterColor: LinearColor;
+	GridSnapSize: any;
+	bEnableWindowAnimations: boolean;
+	bShowFriendlyNames: boolean;
+	bExpandConfigurationMenus: boolean;
+	bShowProjectMenus: boolean;
+	bShowLaunchMenus: boolean;
+	LogBackgroundColor: LinearColor;
+	LogSelectionBackgroundColor: LinearColor;
+	LogNormalColor: LinearColor;
+	LogCommandColor: LinearColor;
+	LogWarningColor: LinearColor;
+	LogErrorColor: LinearColor;
+	bShowAllAdvancedDetails: boolean;
+	bShowHiddenPropertiesWhilePlaying: boolean;
+	LogFontSize: number;
+	LogTimestampMode: ELogTimes;
+	bPromoteOutputLogWarningsDuringPIE: boolean;
+	AssetEditorOpenLocation: EAssetEditorOpenLocation;
+	bEnableColorizedEditorTabs: boolean;
+	static Load(ResourceName: string): EditorStyleSettings;
+	static Find(Outer: UObject, ResourceName: string): EditorStyleSettings;
+	static GetDefaultObject(): EditorStyleSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorStyleSettings;
+	static C(Other: UObject | any): EditorStyleSettings;
 }
 
-declare class ViewportInteractor extends UObject { 
-	WorldInteraction: ViewportWorldInteraction;
-	OtherInteractor: ViewportInteractor;
-	static Load(ResourceName: string): ViewportInteractor;
-	static Find(Outer: UObject, ResourceName: string): ViewportInteractor;
-	static GetDefaultObject(): ViewportInteractor;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportInteractor;
-	static C(Other: UObject | any): ViewportInteractor;
+declare class MaterialShaderQualitySettings extends UObject { 
+	ForwardSettingMap: any;
+	static Load(ResourceName: string): MaterialShaderQualitySettings;
+	static Find(Outer: UObject, ResourceName: string): MaterialShaderQualitySettings;
+	static GetDefaultObject(): MaterialShaderQualitySettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialShaderQualitySettings;
+	static C(Other: UObject | any): MaterialShaderQualitySettings;
 }
 
-declare class VREditorInteractor extends ViewportInteractor { 
-	VRMode: VREditorMode;
-	static Load(ResourceName: string): VREditorInteractor;
-	static Find(Outer: UObject, ResourceName: string): VREditorInteractor;
-	static GetDefaultObject(): VREditorInteractor;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorInteractor;
-	static C(Other: UObject | any): VREditorInteractor;
+declare type EMobileCSMQuality = 'NoFiltering' | 'PCF_1x1' | 'PCF_2x2' | 'EMobileCSMQuality_MAX';
+declare var EMobileCSMQuality : { NoFiltering:'NoFiltering',PCF_1x1:'PCF_1x1',PCF_2x2:'PCF_2x2',EMobileCSMQuality_MAX:'EMobileCSMQuality_MAX', };
+declare class MaterialQualityOverrides { 
+	bDiscardQualityDuringCook: boolean;
+	bEnableOverride: boolean;
+	bForceFullyRough: boolean;
+	bForceNonMetal: boolean;
+	bForceDisableLMDirectionality: boolean;
+	bForceLQReflections: boolean;
+	bDisableMaterialNormalCalculation: boolean;
+	MobileCSMQuality: EMobileCSMQuality;
+	clone() : MaterialQualityOverrides;
+	static C(Other: UObject | any): MaterialQualityOverrides;
 }
 
-declare type ETrackingStatus = 'NotTracked' | 'InertialOnly' | 'Tracked' | 'ETrackingStatus_MAX';
-declare var ETrackingStatus : { NotTracked:'NotTracked',InertialOnly:'InertialOnly',Tracked:'Tracked',ETrackingStatus_MAX:'ETrackingStatus_MAX', };
-declare class MotionControllerComponent extends PrimitiveComponent { 
-	PlayerIndex: number;
-	Hand: EControllerHand;
-	MotionSource: string;
-	bDisableLowLatencyUpdate: boolean;
-	CurrentTrackingStatus: ETrackingStatus;
-	bDisplayDeviceModel: boolean;
-	DisplayModelSource: string;
-	CustomDisplayMesh: StaticMesh;
-	DisplayMeshMaterialOverrides: MaterialInterface[];
-	DisplayComponent: PrimitiveComponent;
-	static Load(ResourceName: string): MotionControllerComponent;
-	static Find(Outer: UObject, ResourceName: string): MotionControllerComponent;
-	static GetDefaultObject(): MotionControllerComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MotionControllerComponent;
-	SetTrackingSource(NewSource: EControllerHand): void;
-	SetTrackingMotionSource(NewSource: string): void;
-	SetShowDeviceModel(bShowControllerModel: boolean): void;
-	SetDisplayModelSource(NewDisplayModelSource: string): void;
-	SetCustomDisplayMesh(NewDisplayMesh: StaticMesh): void;
-	SetAssociatedPlayerIndex(NewPlayer: number): void;
-	OnMotionControllerUpdated(): void;
-	IsTracked(): boolean;
-	GetTrackingSource(): EControllerHand;
-	GetParameterValue(InName: string,bValueFound?: boolean): {bValueFound: boolean, $: number};
-	static C(Other: UObject | any): MotionControllerComponent;
-	DisableMotionTrackingForComponent(): void;
-	EnableMotionTrackingForComponent(): boolean;
-	IsMotionTrackingEnabledForComponent(): boolean;
-	static DisableMotionTrackingForComponent(MotionControllerComponent: MotionControllerComponent): void;
-	static EnableMotionTrackingForComponent(MotionControllerComponent: MotionControllerComponent): boolean;
-	static IsMotionTrackingEnabledForComponent(MotionControllerComponent: MotionControllerComponent): boolean;
+declare class ShaderPlatformQualitySettings extends UObject { 
+	QualityOverrides: MaterialQualityOverrides;
+	static Load(ResourceName: string): ShaderPlatformQualitySettings;
+	static Find(Outer: UObject, ResourceName: string): ShaderPlatformQualitySettings;
+	static GetDefaultObject(): ShaderPlatformQualitySettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ShaderPlatformQualitySettings;
+	static C(Other: UObject | any): ShaderPlatformQualitySettings;
 }
 
-declare class InterpCurvePointQuat { 
-	InVal: number;
-	OutVal: Quat;
-	ArriveTangent: Quat;
-	LeaveTangent: Quat;
-	InterpMode: EInterpCurveMode;
-	clone() : InterpCurvePointQuat;
-	static C(Other: UObject | any): InterpCurvePointQuat;
+declare class MeshDescription extends UObject { 
+	static Load(ResourceName: string): MeshDescription;
+	static Find(Outer: UObject, ResourceName: string): MeshDescription;
+	static GetDefaultObject(): MeshDescription;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshDescription;
+	static C(Other: UObject | any): MeshDescription;
 }
 
-declare class InterpCurveQuat { 
-	Points: InterpCurvePointQuat[];
-	bIsLooped: boolean;
-	LoopKeyOffset: number;
-	clone() : InterpCurveQuat;
-	static C(Other: UObject | any): InterpCurveQuat;
+declare class ClothingAssetFactoryBase extends UObject { 
+	static Load(ResourceName: string): ClothingAssetFactoryBase;
+	static Find(Outer: UObject, ResourceName: string): ClothingAssetFactoryBase;
+	static GetDefaultObject(): ClothingAssetFactoryBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingAssetFactoryBase;
+	static C(Other: UObject | any): ClothingAssetFactoryBase;
 }
 
-declare class InterpCurvePointFloat { 
-	InVal: number;
-	OutVal: number;
-	ArriveTangent: number;
-	LeaveTangent: number;
-	InterpMode: EInterpCurveMode;
-	clone() : InterpCurvePointFloat;
-	static C(Other: UObject | any): InterpCurvePointFloat;
+declare class AssetRegistryImpl extends UObject { 
+	static Load(ResourceName: string): AssetRegistryImpl;
+	static Find(Outer: UObject, ResourceName: string): AssetRegistryImpl;
+	static GetDefaultObject(): AssetRegistryImpl;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetRegistryImpl;
+	static C(Other: UObject | any): AssetRegistryImpl;
 }
 
-declare class InterpCurveFloat { 
-	Points: InterpCurvePointFloat[];
-	bIsLooped: boolean;
-	LoopKeyOffset: number;
-	clone() : InterpCurveFloat;
-	static C(Other: UObject | any): InterpCurveFloat;
+declare class ARFilter { 
+	PackageNames: string[];
+	PackagePaths: string[];
+	ObjectPaths: string[];
+	ClassNames: string[];
+	RecursiveClassesExclusionSet: any;
+	bRecursivePaths: boolean;
+	bRecursiveClasses: boolean;
+	bIncludeOnlyOnDiskAssets: boolean;
+	clone() : ARFilter;
+	static C(Other: UObject | any): ARFilter;
 }
 
-declare class SplineCurves { 
-	Position: InterpCurveVector;
-	Rotation: InterpCurveQuat;
-	Scale: InterpCurveVector;
-	ReparamTable: InterpCurveFloat;
-	clone() : SplineCurves;
-	static C(Other: UObject | any): SplineCurves;
+declare class TagAndValue { 
+	Tag: string;
+	Value: string;
+	clone() : TagAndValue;
+	static C(Other: UObject | any): TagAndValue;
 }
 
-declare type ESplineCoordinateSpace = 'Local' | 'World' | 'ESplineCoordinateSpace_MAX';
-declare var ESplineCoordinateSpace : { Local:'Local',World:'World',ESplineCoordinateSpace_MAX:'ESplineCoordinateSpace_MAX', };
-declare type ESplinePointType = 'Linear' | 'Curve' | 'Constant' | 'CurveClamped' | 'CurveCustomTangent' | 'ESplinePointType_MAX';
-declare var ESplinePointType : { Linear:'Linear',Curve:'Curve',Constant:'Constant',CurveClamped:'CurveClamped',CurveCustomTangent:'CurveCustomTangent',ESplinePointType_MAX:'ESplinePointType_MAX', };
-declare class SplinePoint { 
-	InputKey: number;
-	Position: Vector;
-	ArriveTangent: Vector;
-	LeaveTangent: Vector;
-	Rotation: Rotator;
-	Scale: Vector;
-	Type: ESplinePointType;
-	clone() : SplinePoint;
-	static C(Other: UObject | any): SplinePoint;
+declare class AssetRegistryHelpers extends UObject { 
+	static Load(ResourceName: string): AssetRegistryHelpers;
+	static Find(Outer: UObject, ResourceName: string): AssetRegistryHelpers;
+	static GetDefaultObject(): AssetRegistryHelpers;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetRegistryHelpers;
+	static ToSoftObjectPath(InAssetData: AssetData): SoftObjectPath;
+	static SetFilterTagsAndValues(InFilter: ARFilter,InTagsAndValues: TagAndValue[]): ARFilter;
+	static IsValid(InAssetData: AssetData): boolean;
+	static IsUAsset(InAssetData: AssetData): boolean;
+	static IsRedirector(InAssetData: AssetData): boolean;
+	static IsAssetLoaded(InAssetData: AssetData): boolean;
+	static GetTagValue(InAssetData: AssetData,InTagName: string,OutTagValue?: string): {OutTagValue: string, $: boolean};
+	static GetFullName(InAssetData: AssetData): string;
+	static GetExportTextName(InAssetData: AssetData): string;
+	static GetClass(InAssetData: AssetData): UnrealEngineClass;
+	static GetAsset(InAssetData: AssetData): UObject;
+	static CreateAssetData(InAsset: UObject,bAllowBlueprintClass: boolean): AssetData;
+	static C(Other: UObject | any): AssetRegistryHelpers;
 }
 
-declare class SplineComponent extends PrimitiveComponent { 
-	SplineCurves: SplineCurves;
-	SplineInfo: InterpCurveVector;
-	SplineRotInfo: InterpCurveQuat;
-	SplineScaleInfo: InterpCurveVector;
-	SplineReparamTable: InterpCurveFloat;
-	bAllowSplineEditingPerInstance: boolean;
-	ReparamStepsPerSegment: number;
-	Duration: number;
-	bStationaryEndpoints: boolean;
-	bSplineHasBeenEdited: boolean;
-	bModifiedByConstructionScript: boolean;
-	bInputSplinePointsToConstructionScript: boolean;
-	bDrawDebug: boolean;
-	bClosedLoop: boolean;
-	bLoopPositionOverride: boolean;
-	LoopPosition: number;
-	DefaultUpVector: Vector;
-	EditorUnselectedSplineSegmentColor: LinearColor;
-	EditorSelectedSplineSegmentColor: LinearColor;
-	bAllowDiscontinuousSpline: boolean;
-	bShouldVisualizeScale: boolean;
-	ScaleVisualizationWidth: number;
-	static Load(ResourceName: string): SplineComponent;
-	static Find(Outer: UObject, ResourceName: string): SplineComponent;
-	static GetDefaultObject(): SplineComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SplineComponent;
-	UpdateSpline(): void;
-	SetWorldLocationAtSplinePoint(PointIndex: number,InLocation: Vector): void;
-	SetUpVectorAtSplinePoint(PointIndex: number,InUpVector: Vector,CoordinateSpace: ESplineCoordinateSpace,bUpdateSpline: boolean): void;
-	SetUnselectedSplineSegmentColor(SegmentColor: LinearColor): void;
-	SetTangentsAtSplinePoint(PointIndex: number,InArriveTangent: Vector,InLeaveTangent: Vector,CoordinateSpace: ESplineCoordinateSpace,bUpdateSpline: boolean): void;
-	SetTangentAtSplinePoint(PointIndex: number,InTangent: Vector,CoordinateSpace: ESplineCoordinateSpace,bUpdateSpline: boolean): void;
-	SetSplineWorldPoints(Points: Vector[]): void;
-	SetSplinePointType(PointIndex: number,Type: ESplinePointType,bUpdateSpline: boolean): void;
-	SetSplinePoints(Points: Vector[],CoordinateSpace: ESplineCoordinateSpace,bUpdateSpline: boolean): void;
-	SetSplineLocalPoints(Points: Vector[]): void;
-	SetSelectedSplineSegmentColor(SegmentColor: LinearColor): void;
-	SetLocationAtSplinePoint(PointIndex: number,InLocation: Vector,CoordinateSpace: ESplineCoordinateSpace,bUpdateSpline: boolean): void;
-	SetDrawDebug(bShow: boolean): void;
-	SetDefaultUpVector(UpVector: Vector,CoordinateSpace: ESplineCoordinateSpace): void;
-	SetClosedLoopAtPosition(bInClosedLoop: boolean,Key: number,bUpdateSpline: boolean): void;
-	SetClosedLoop(bInClosedLoop: boolean,bUpdateSpline: boolean): void;
-	RemoveSplinePoint(index: number,bUpdateSpline: boolean): void;
-	IsClosedLoop(): boolean;
-	GetWorldTangentAtDistanceAlongSpline(Distance: number): Vector;
-	GetWorldRotationAtTime(Time: number,bUseConstantVelocity: boolean): Rotator;
-	GetWorldRotationAtDistanceAlongSpline(Distance: number): Rotator;
-	GetWorldLocationAtTime(Time: number,bUseConstantVelocity: boolean): Vector;
-	GetWorldLocationAtSplinePoint(PointIndex: number): Vector;
-	GetWorldLocationAtDistanceAlongSpline(Distance: number): Vector;
-	GetWorldDirectionAtTime(Time: number,bUseConstantVelocity: boolean): Vector;
-	GetWorldDirectionAtDistanceAlongSpline(Distance: number): Vector;
-	GetUpVectorAtTime(Time: number,CoordinateSpace: ESplineCoordinateSpace,bUseConstantVelocity: boolean): Vector;
-	GetUpVectorAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
-	GetUpVectorAtDistanceAlongSpline(Distance: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
-	GetTransformAtTime(Time: number,CoordinateSpace: ESplineCoordinateSpace,bUseConstantVelocity: boolean,bUseScale: boolean): Transform;
-	GetTransformAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace,bUseScale: boolean): Transform;
-	GetTransformAtDistanceAlongSpline(Distance: number,CoordinateSpace: ESplineCoordinateSpace,bUseScale: boolean): Transform;
-	GetTangentAtTime(Time: number,CoordinateSpace: ESplineCoordinateSpace,bUseConstantVelocity: boolean): Vector;
-	GetTangentAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
-	GetTangentAtDistanceAlongSpline(Distance: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
-	GetSplinePointType(PointIndex: number): ESplinePointType;
-	GetSplineLength(): number;
-	GetScaleAtTime(Time: number,bUseConstantVelocity: boolean): Vector;
-	GetScaleAtSplinePoint(PointIndex: number): Vector;
-	GetScaleAtDistanceAlongSpline(Distance: number): Vector;
-	GetRotationAtTime(Time: number,CoordinateSpace: ESplineCoordinateSpace,bUseConstantVelocity: boolean): Rotator;
-	GetRotationAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace): Rotator;
-	GetRotationAtDistanceAlongSpline(Distance: number,CoordinateSpace: ESplineCoordinateSpace): Rotator;
-	GetRollAtTime(Time: number,CoordinateSpace: ESplineCoordinateSpace,bUseConstantVelocity: boolean): number;
-	GetRollAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace): number;
-	GetRollAtDistanceAlongSpline(Distance: number,CoordinateSpace: ESplineCoordinateSpace): number;
-	GetRightVectorAtTime(Time: number,CoordinateSpace: ESplineCoordinateSpace,bUseConstantVelocity: boolean): Vector;
-	GetRightVectorAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
-	GetRightVectorAtDistanceAlongSpline(Distance: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
-	GetNumberOfSplinePoints(): number;
-	GetLocationAtTime(Time: number,CoordinateSpace: ESplineCoordinateSpace,bUseConstantVelocity: boolean): Vector;
-	GetLocationAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
-	GetLocationAtDistanceAlongSpline(Distance: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
-	GetLocationAndTangentAtSplinePoint(PointIndex: number,Location?: Vector,Tangent?: Vector,CoordinateSpace?: ESplineCoordinateSpace): {Location: Vector, Tangent: Vector};
-	GetLocalLocationAndTangentAtSplinePoint(PointIndex: number,LocalLocation?: Vector,LocalTangent?: Vector): {LocalLocation: Vector, LocalTangent: Vector};
-	GetLeaveTangentAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
-	GetInputKeyAtDistanceAlongSpline(Distance: number): number;
-	GetDistanceAlongSplineAtSplinePoint(PointIndex: number): number;
-	GetDirectionAtTime(Time: number,CoordinateSpace: ESplineCoordinateSpace,bUseConstantVelocity: boolean): Vector;
-	GetDirectionAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
-	GetDirectionAtDistanceAlongSpline(Distance: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
-	GetDefaultUpVector(CoordinateSpace: ESplineCoordinateSpace): Vector;
-	GetArriveTangentAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
-	FindUpVectorClosestToWorldLocation(WorldLocation: Vector,CoordinateSpace: ESplineCoordinateSpace): Vector;
-	FindTransformClosestToWorldLocation(WorldLocation: Vector,CoordinateSpace: ESplineCoordinateSpace,bUseScale: boolean): Transform;
-	FindTangentClosestToWorldLocation(WorldLocation: Vector,CoordinateSpace: ESplineCoordinateSpace): Vector;
-	FindScaleClosestToWorldLocation(WorldLocation: Vector): Vector;
-	FindRotationClosestToWorldLocation(WorldLocation: Vector,CoordinateSpace: ESplineCoordinateSpace): Rotator;
-	FindRollClosestToWorldLocation(WorldLocation: Vector,CoordinateSpace: ESplineCoordinateSpace): number;
-	FindRightVectorClosestToWorldLocation(WorldLocation: Vector,CoordinateSpace: ESplineCoordinateSpace): Vector;
-	FindLocationClosestToWorldLocation(WorldLocation: Vector,CoordinateSpace: ESplineCoordinateSpace): Vector;
-	FindInputKeyClosestToWorldLocation(WorldLocation: Vector): number;
-	FindDirectionClosestToWorldLocation(WorldLocation: Vector,CoordinateSpace: ESplineCoordinateSpace): Vector;
-	ClearSplinePoints(bUpdateSpline: boolean): void;
-	AddSplineWorldPoint(Position: Vector): void;
-	AddSplinePointAtIndex(Position: Vector,index: number,CoordinateSpace: ESplineCoordinateSpace,bUpdateSpline: boolean): void;
-	AddSplinePoint(Position: Vector,CoordinateSpace: ESplineCoordinateSpace,bUpdateSpline: boolean): void;
-	AddSplineLocalPoint(Position: Vector): void;
-	AddPoints(Points: SplinePoint[],bUpdateSpline: boolean): void;
-	AddPoint(Point: SplinePoint,bUpdateSpline: boolean): void;
-	static C(Other: UObject | any): SplineComponent;
+declare class AssetRegistryDependencyOptions { 
+	bIncludeSoftPackageReferences: boolean;
+	bIncludeHardPackageReferences: boolean;
+	bIncludeSearchableNames: boolean;
+	bIncludeSoftManagementReferences: boolean;
+	bIncludeHardManagementReferences: boolean;
+	clone() : AssetRegistryDependencyOptions;
+	static C(Other: UObject | any): AssetRegistryDependencyOptions;
 }
 
-declare class SplineMeshParams { 
-	StartPos: Vector;
-	StartTangent: Vector;
-	StartScale: Vector2D;
-	StartRoll: number;
-	StartOffset: Vector2D;
-	EndPos: Vector;
-	EndTangent: Vector;
-	EndScale: Vector2D;
-	EndRoll: number;
-	EndOffset: Vector2D;
-	clone() : SplineMeshParams;
-	static C(Other: UObject | any): SplineMeshParams;
+declare class AssetRegistry extends Interface { 
+	static Load(ResourceName: string): AssetRegistry;
+	static Find(Outer: UObject, ResourceName: string): AssetRegistry;
+	static GetDefaultObject(): AssetRegistry;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetRegistry;
+	UseFilterToExcludeAssets(AssetDataList?: AssetData[],Filter?: ARFilter): {AssetDataList: AssetData[]};
+	SearchAllAssets(bSynchronousSearch: boolean): void;
+	ScanPathsSynchronous(InPaths: string[],bForceRescan: boolean): void;
+	ScanModifiedAssetFiles(InFilePaths: string[]): void;
+	ScanFilesSynchronous(InFilePaths: string[],bForceRescan: boolean): void;
+	RunAssetsThroughFilter(AssetDataList?: AssetData[],Filter?: ARFilter): {AssetDataList: AssetData[]};
+	PrioritizeSearchPath(PathToPrioritize: string): void;
+	K2_GetReferencers(PackageName: string,ReferenceOptions: AssetRegistryDependencyOptions,OutReferencers?: string[]): {OutReferencers: string[], $: boolean};
+	K2_GetDependencies(PackageName: string,DependencyOptions: AssetRegistryDependencyOptions,OutDependencies?: string[]): {OutDependencies: string[], $: boolean};
+	IsLoadingAssets(): boolean;
+	HasAssets(PackagePath: string,bRecursive: boolean): boolean;
+	GetSubPaths(InBasePath: string,OutPathList?: string[],bInRecurse?: boolean): {OutPathList: string[]};
+	GetAssetsByPath(PackagePath: string,OutAssetData?: AssetData[],bRecursive?: boolean,bIncludeOnlyOnDiskAssets?: boolean): {OutAssetData: AssetData[], $: boolean};
+	GetAssetsByPackageName(PackageName: string,OutAssetData?: AssetData[],bIncludeOnlyOnDiskAssets?: boolean): {OutAssetData: AssetData[], $: boolean};
+	GetAssetsByClass(ClassName: string,OutAssetData?: AssetData[],bSearchSubClasses?: boolean): {OutAssetData: AssetData[], $: boolean};
+	GetAssets(Filter: ARFilter,OutAssetData?: AssetData[]): {OutAssetData: AssetData[], $: boolean};
+	GetAssetByObjectPath(ObjectPath: string,bIncludeOnlyOnDiskAssets: boolean): AssetData;
+	GetAllCachedPaths(OutPathList?: string[]): {OutPathList: string[]};
+	GetAllAssets(OutAssetData?: AssetData[],bIncludeOnlyOnDiskAssets?: boolean): {OutAssetData: AssetData[], $: boolean};
+	static C(Other: UObject | any): AssetRegistry;
 }
 
-declare type ESplineMeshAxis = 'X' | 'Y' | 'Z' | 'ESplineMeshAxis_MAX';
-declare var ESplineMeshAxis : { X:'X',Y:'Y',Z:'Z',ESplineMeshAxis_MAX:'ESplineMeshAxis_MAX', };
-declare class SplineMeshComponent extends StaticMeshComponent { 
-	SplineParams: SplineMeshParams;
-	SplineUpDir: Vector;
-	bAllowSplineEditingPerInstance: boolean;
-	bSmoothInterpRollScale: boolean;
-	ForwardAxis: ESplineMeshAxis;
-	SplineBoundaryMin: number;
-	SplineBoundaryMax: number;
-	BodySetup: BodySetup;
-	CachedMeshBodySetupGuid: Guid;
-	bSelected: boolean;
-	bMeshDirty: boolean;
-	static Load(ResourceName: string): SplineMeshComponent;
-	static Find(Outer: UObject, ResourceName: string): SplineMeshComponent;
-	static GetDefaultObject(): SplineMeshComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SplineMeshComponent;
-	UpdateMesh(): void;
-	SetStartTangent(StartTangent: Vector,bUpdateMesh: boolean): void;
-	SetStartScale(StartScale: Vector2D,bUpdateMesh: boolean): void;
-	SetStartRoll(StartRoll: number,bUpdateMesh: boolean): void;
-	SetStartPosition(StartPos: Vector,bUpdateMesh: boolean): void;
-	SetStartOffset(StartOffset: Vector2D,bUpdateMesh: boolean): void;
-	SetStartAndEnd(StartPos: Vector,StartTangent: Vector,EndPos: Vector,EndTangent: Vector,bUpdateMesh: boolean): void;
-	SetSplineUpDir(InSplineUpDir: Vector,bUpdateMesh: boolean): void;
-	SetForwardAxis(InForwardAxis: ESplineMeshAxis,bUpdateMesh: boolean): void;
-	SetEndTangent(EndTangent: Vector,bUpdateMesh: boolean): void;
-	SetEndScale(EndScale: Vector2D,bUpdateMesh: boolean): void;
-	SetEndRoll(EndRoll: number,bUpdateMesh: boolean): void;
-	SetEndPosition(EndPos: Vector,bUpdateMesh: boolean): void;
-	SetEndOffset(EndOffset: Vector2D,bUpdateMesh: boolean): void;
-	SetBoundaryMin(InBoundaryMin: number,bUpdateMesh: boolean): void;
-	SetBoundaryMax(InBoundaryMax: number,bUpdateMesh: boolean): void;
-	GetStartTangent(): Vector;
-	GetStartScale(): Vector2D;
-	GetStartRoll(): number;
-	GetStartPosition(): Vector;
-	GetStartOffset(): Vector2D;
-	GetSplineUpDir(): Vector;
-	GetForwardAxis(): ESplineMeshAxis;
-	GetEndTangent(): Vector;
-	GetEndScale(): Vector2D;
-	GetEndRoll(): number;
-	GetEndPosition(): Vector;
-	GetEndOffset(): Vector2D;
-	GetBoundaryMin(): number;
-	GetBoundaryMax(): number;
-	static C(Other: UObject | any): SplineMeshComponent;
+declare class AutoCompleteCommand { 
+	Command: string;
+	Desc: string;
+	clone() : AutoCompleteCommand;
+	static C(Other: UObject | any): AutoCompleteCommand;
 }
 
-declare class LightComponentBase extends SceneComponent { 
-	LightGuid: Guid;
-	Brightness: number;
-	Intensity: number;
-	LightColor: Color;
-	bAffectsWorld: boolean;
-	CastShadows: boolean;
-	CastStaticShadows: boolean;
-	CastDynamicShadows: boolean;
-	bAffectTranslucentLighting: boolean;
-	bTransmission: boolean;
-	bCastVolumetricShadow: boolean;
-	IndirectLightingIntensity: number;
-	VolumetricScatteringIntensity: number;
-	StaticEditorTexture: Texture2D;
-	StaticEditorTextureScale: number;
-	DynamicEditorTexture: Texture2D;
-	DynamicEditorTextureScale: number;
-	static Load(ResourceName: string): LightComponentBase;
-	static Find(Outer: UObject, ResourceName: string): LightComponentBase;
-	static GetDefaultObject(): LightComponentBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightComponentBase;
-	SetCastVolumetricShadow(bNewValue: boolean): void;
-	SetCastShadows(bNewValue: boolean): void;
-	GetLightColor(): LinearColor;
-	static C(Other: UObject | any): LightComponentBase;
+declare class ConsoleSettings extends UObject { 
+	MaxScrollbackSize: number;
+	ManualAutoCompleteList: AutoCompleteCommand[];
+	AutoCompleteMapPaths: string[];
+	BackgroundOpacityPercentage: number;
+	bOrderTopToBottom: boolean;
+	InputColor: Color;
+	HistoryColor: Color;
+	AutoCompleteCommandColor: Color;
+	AutoCompleteCVarColor: Color;
+	AutoCompleteFadedColor: Color;
+	static Load(ResourceName: string): ConsoleSettings;
+	static Find(Outer: UObject, ResourceName: string): ConsoleSettings;
+	static GetDefaultObject(): ConsoleSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ConsoleSettings;
+	static C(Other: UObject | any): ConsoleSettings;
 }
 
-declare class TextureLightProfile extends Texture2D { 
-	Brightness: number;
-	TextureMultiplier: number;
-	static Load(ResourceName: string): TextureLightProfile;
-	static Find(Outer: UObject, ResourceName: string): TextureLightProfile;
-	static GetDefaultObject(): TextureLightProfile;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureLightProfile;
-	static C(Other: UObject | any): TextureLightProfile;
+declare type ETwoPlayerSplitScreenType = 'Horizontal' | 'Vertical' | 'ETwoPlayerSplitScreenType_MAX';
+declare var ETwoPlayerSplitScreenType : { Horizontal:'Horizontal',Vertical:'Vertical',ETwoPlayerSplitScreenType_MAX:'ETwoPlayerSplitScreenType_MAX', };
+declare type EThreePlayerSplitScreenType = 'FavorTop' | 'FavorBottom' | 'Vertical' | 'Horizontal' | 'EThreePlayerSplitScreenType_MAX';
+declare var EThreePlayerSplitScreenType : { FavorTop:'FavorTop',FavorBottom:'FavorBottom',Vertical:'Vertical',Horizontal:'Horizontal',EThreePlayerSplitScreenType_MAX:'EThreePlayerSplitScreenType_MAX', };
+declare type EFourPlayerSplitScreenType = 'Grid' | 'Vertical' | 'Horizontal' | 'EFourPlayerSplitScreenType_MAX';
+declare var EFourPlayerSplitScreenType : { Grid:'Grid',Vertical:'Vertical',Horizontal:'Horizontal',EFourPlayerSplitScreenType_MAX:'EFourPlayerSplitScreenType_MAX', };
+declare class GameModeName { 
+	Name: string;
+	GameMode: SoftClassPath;
+	clone() : GameModeName;
+	static C(Other: UObject | any): GameModeName;
 }
 
-declare class LightComponent extends LightComponentBase { 
-	Temperature: number;
-	MaxDrawDistance: number;
-	MaxDistanceFadeRange: number;
-	bUseTemperature: boolean;
-	ShadowMapChannel: number;
-	MinRoughness: number;
-	SpecularScale: number;
-	ShadowResolutionScale: number;
-	ShadowBias: number;
-	ShadowSharpen: number;
-	ContactShadowLength: number;
-	ContactShadowLengthInWS: boolean;
-	InverseSquaredFalloff: boolean;
-	CastTranslucentShadows: boolean;
-	bCastShadowsFromCinematicObjectsOnly: boolean;
-	bAffectDynamicIndirectLighting: boolean;
-	bForceCachedShadowsForMovablePrimitives: boolean;
-	LightingChannels: LightingChannels;
-	LightFunctionMaterial: MaterialInterface;
-	LightFunctionScale: Vector;
-	IESTexture: TextureLightProfile;
-	bUseIESBrightness: boolean;
-	IESBrightnessScale: number;
-	LightFunctionFadeDistance: number;
-	DisabledBrightness: number;
-	bEnableLightShaftBloom: boolean;
-	BloomScale: number;
-	BloomThreshold: number;
-	BloomTint: Color;
-	bUseRayTracedDistanceFieldShadows: boolean;
-	RayStartOffsetDepthScale: number;
-	static Load(ResourceName: string): LightComponent;
-	static Find(Outer: UObject, ResourceName: string): LightComponent;
-	static GetDefaultObject(): LightComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightComponent;
-	SetVolumetricScatteringIntensity(NewIntensity: number): void;
-	SetTransmission(bNewValue: boolean): void;
-	SetTemperature(NewTemperature: number): void;
-	SetShadowBias(NewValue: number): void;
-	SetLightFunctionScale(NewLightFunctionScale: Vector): void;
-	SetLightFunctionMaterial(NewLightFunctionMaterial: MaterialInterface): void;
-	SetLightFunctionFadeDistance(NewLightFunctionFadeDistance: number): void;
-	SetLightFunctionDisabledBrightness(NewValue: number): void;
-	SetLightColor(NewLightColor: LinearColor,bSRGB: boolean): void;
-	SetIntensity(NewIntensity: number): void;
-	SetIndirectLightingIntensity(NewIntensity: number): void;
-	SetIESTexture(NewValue: TextureLightProfile): void;
-	SetForceCachedShadowsForMovablePrimitives(bNewValue: boolean): void;
-	SetEnableLightShaftBloom(bNewValue: boolean): void;
-	SetBloomTint(NewValue: Color): void;
-	SetBloomThreshold(NewValue: number): void;
-	SetBloomScale(NewValue: number): void;
-	SetAffectTranslucentLighting(bNewValue: boolean): void;
-	SetAffectDynamicIndirectLighting(bNewValue: boolean): void;
-	static C(Other: UObject | any): LightComponent;
+declare class GameMapsSettings extends UObject { 
+	EditorStartupMap: SoftObjectPath;
+	LocalMapOptions: string;
+	TransitionMap: SoftObjectPath;
+	bUseSplitscreen: boolean;
+	TwoPlayerSplitscreenLayout: ETwoPlayerSplitScreenType;
+	ThreePlayerSplitscreenLayout: EThreePlayerSplitScreenType;
+	FourPlayerSplitscreenLayout: EFourPlayerSplitScreenType;
+	bOffsetPlayerGamepadIds: boolean;
+	GameInstanceClass: SoftClassPath;
+	GameDefaultMap: SoftObjectPath;
+	ServerDefaultMap: SoftObjectPath;
+	GlobalDefaultGameMode: SoftClassPath;
+	GlobalDefaultServerGameMode: SoftClassPath;
+	GameModeMapPrefixes: GameModeName[];
+	GameModeClassAliases: GameModeName[];
+	static Load(ResourceName: string): GameMapsSettings;
+	static Find(Outer: UObject, ResourceName: string): GameMapsSettings;
+	static GetDefaultObject(): GameMapsSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameMapsSettings;
+	static C(Other: UObject | any): GameMapsSettings;
 }
 
-declare type ELightUnits = 'Unitless' | 'Candelas' | 'Lumens' | 'ELightUnits_MAX';
-declare var ELightUnits : { Unitless:'Unitless',Candelas:'Candelas',Lumens:'Lumens',ELightUnits_MAX:'ELightUnits_MAX', };
-declare class LightmassLightSettings { 
-	IndirectLightingSaturation: number;
-	ShadowExponent: number;
-	bUseAreaShadowsForStationaryLight: boolean;
-	clone() : LightmassLightSettings;
-	static C(Other: UObject | any): LightmassLightSettings;
+declare class GameNetworkManagerSettings extends UObject { 
+	MinDynamicBandwidth: number;
+	MaxDynamicBandwidth: number;
+	TotalNetBandwidth: number;
+	BadPingThreshold: number;
+	bIsStandbyCheckingEnabled: boolean;
+	StandbyRxCheatTime: number;
+	StandbyTxCheatTime: number;
+	PercentMissingForRxStandby: number;
+	PercentMissingForTxStandby: number;
+	PercentForBadPing: number;
+	JoinInProgressStandbyWaitTime: number;
+	static Load(ResourceName: string): GameNetworkManagerSettings;
+	static Find(Outer: UObject, ResourceName: string): GameNetworkManagerSettings;
+	static GetDefaultObject(): GameNetworkManagerSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameNetworkManagerSettings;
+	static C(Other: UObject | any): GameNetworkManagerSettings;
 }
 
-declare class LightmassPointLightSettings extends LightmassLightSettings { 
-	clone() : LightmassPointLightSettings;
-	static C(Other: UObject | any): LightmassPointLightSettings;
+declare class GameSessionSettings extends UObject { 
+	MaxSpectators: number;
+	MaxPlayers: number;
+	bRequiresPushToTalk: boolean;
+	static Load(ResourceName: string): GameSessionSettings;
+	static Find(Outer: UObject, ResourceName: string): GameSessionSettings;
+	static GetDefaultObject(): GameSessionSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameSessionSettings;
+	static C(Other: UObject | any): GameSessionSettings;
 }
 
-declare class LocalLightComponent extends LightComponent { 
-	IntensityUnits: ELightUnits;
-	Radius: number;
-	AttenuationRadius: number;
-	LightmassSettings: LightmassPointLightSettings;
-	static Load(ResourceName: string): LocalLightComponent;
-	static Find(Outer: UObject, ResourceName: string): LocalLightComponent;
-	static GetDefaultObject(): LocalLightComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocalLightComponent;
-	SetAttenuationRadius(NewRadius: number): void;
-	static GetUnitsConversionFactor(SrcUnits: ELightUnits,TargetUnits: ELightUnits,CosHalfConeAngle: number): number;
-	static C(Other: UObject | any): LocalLightComponent;
+declare class GeneralEngineSettings extends UObject { 
+	static Load(ResourceName: string): GeneralEngineSettings;
+	static Find(Outer: UObject, ResourceName: string): GeneralEngineSettings;
+	static GetDefaultObject(): GeneralEngineSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeneralEngineSettings;
+	static C(Other: UObject | any): GeneralEngineSettings;
 }
 
-declare class PointLightComponent extends LocalLightComponent { 
-	bUseInverseSquaredFalloff: boolean;
-	LightFalloffExponent: number;
-	SourceRadius: number;
-	SoftSourceRadius: number;
-	SourceLength: number;
-	static Load(ResourceName: string): PointLightComponent;
-	static Find(Outer: UObject, ResourceName: string): PointLightComponent;
-	static GetDefaultObject(): PointLightComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PointLightComponent;
-	SetSourceRadius(bNewValue: number): void;
-	SetSourceLength(NewValue: number): void;
-	SetSoftSourceRadius(bNewValue: number): void;
-	SetLightFalloffExponent(NewLightFalloffExponent: number): void;
-	static C(Other: UObject | any): PointLightComponent;
+declare class GeneralProjectSettings extends UObject { 
+	CompanyName: string;
+	CompanyDistinguishedName: string;
+	CopyrightNotice: string;
+	Description: string;
+	Homepage: string;
+	LicensingTerms: string;
+	PrivacyPolicy: string;
+	ProjectID: Guid;
+	ProjectName: string;
+	ProjectVersion: string;
+	SupportContact: string;
+	ProjectDisplayedTitle: string;
+	ProjectDebugTitleInfo: string;
+	bShouldWindowPreserveAspectRatio: boolean;
+	bUseBorderlessWindow: boolean;
+	bStartInVR: boolean;
+	bStartInAR: boolean;
+	bSupportAR: boolean;
+	bAllowWindowResize: boolean;
+	bAllowClose: boolean;
+	bAllowMaximize: boolean;
+	bAllowMinimize: boolean;
+	static Load(ResourceName: string): GeneralProjectSettings;
+	static Find(Outer: UObject, ResourceName: string): GeneralProjectSettings;
+	static GetDefaultObject(): GeneralProjectSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeneralProjectSettings;
+	static C(Other: UObject | any): GeneralProjectSettings;
 }
 
-declare class VREditorMotionControllerInteractor extends VREditorInteractor { 
-	MotionControllerComponent: MotionControllerComponent;
-	HandMeshComponent: StaticMeshComponent;
-	LaserSplineComponent: SplineComponent;
-	LaserSplineMeshComponents: SplineMeshComponent[];
-	LaserPointerMID: MaterialInstanceDynamic;
-	TranslucentLaserPointerMID: MaterialInstanceDynamic;
-	HoverMeshComponent: StaticMeshComponent;
-	HoverPointLightComponent: PointLightComponent;
-	HandMeshMID: MaterialInstanceDynamic;
-	static Load(ResourceName: string): VREditorMotionControllerInteractor;
-	static Find(Outer: UObject, ResourceName: string): VREditorMotionControllerInteractor;
-	static GetDefaultObject(): VREditorMotionControllerInteractor;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorMotionControllerInteractor;
-	static C(Other: UObject | any): VREditorMotionControllerInteractor;
+declare class HudSettings extends UObject { 
+	bShowHUD: boolean;
+	DebugDisplay: string[];
+	static Load(ResourceName: string): HudSettings;
+	static Find(Outer: UObject, ResourceName: string): HudSettings;
+	static GetDefaultObject(): HudSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HudSettings;
+	static C(Other: UObject | any): HudSettings;
+}
+
+declare class HandlerComponentFactory extends UObject { 
+	static Load(ResourceName: string): HandlerComponentFactory;
+	static Find(Outer: UObject, ResourceName: string): HandlerComponentFactory;
+	static GetDefaultObject(): HandlerComponentFactory;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HandlerComponentFactory;
+	static C(Other: UObject | any): HandlerComponentFactory;
 }
 
-declare class VRButton { 
-	ButtonWidget: VREditorWidgetComponent;
-	clone() : VRButton;
-	static C(Other: UObject | any): VRButton;
+declare class NetAnalyticsDataConfig { 
+	DataName: string;
+	bEnabled: boolean;
+	clone() : NetAnalyticsDataConfig;
+	static C(Other: UObject | any): NetAnalyticsDataConfig;
 }
 
-declare class VRRadialMenuHandler extends UObject { 
-	static Load(ResourceName: string): VRRadialMenuHandler;
-	static Find(Outer: UObject, ResourceName: string): VRRadialMenuHandler;
-	static GetDefaultObject(): VRRadialMenuHandler;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VRRadialMenuHandler;
-	static C(Other: UObject | any): VRRadialMenuHandler;
+declare class NetAnalyticsAggregatorConfig extends UObject { 
+	NetAnalyticsData: NetAnalyticsDataConfig[];
+	static Load(ResourceName: string): NetAnalyticsAggregatorConfig;
+	static Find(Outer: UObject, ResourceName: string): NetAnalyticsAggregatorConfig;
+	static GetDefaultObject(): NetAnalyticsAggregatorConfig;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NetAnalyticsAggregatorConfig;
+	static C(Other: UObject | any): NetAnalyticsAggregatorConfig;
 }
 
-declare class VREditorUISystem extends UObject { 
-	VRMode: VREditorMode;
-	FloatingUIs: any;
-	PreviewWindowInfo: any;
-	InfoDisplayPanel: VREditorFloatingUI;
-	QuickRadialMenu: VREditorRadialFloatingUI;
-	DraggingUI: VREditorDockableWindow;
-	ColorPickerUI: VREditorDockableWindow;
-	LaserInteractor: VREditorMotionControllerInteractor;
-	UIInteractor: VREditorMotionControllerInteractor;
-	VRButtons: VRButton[];
-	RadialMenuHandler: VRRadialMenuHandler;
-	static Load(ResourceName: string): VREditorUISystem;
-	static Find(Outer: UObject, ResourceName: string): VREditorUISystem;
-	static GetDefaultObject(): VREditorUISystem;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorUISystem;
-	static C(Other: UObject | any): VREditorUISystem;
+declare class PacketHandlerProfileConfig extends UObject { 
+	Components: string[];
+	static Load(ResourceName: string): PacketHandlerProfileConfig;
+	static Find(Outer: UObject, ResourceName: string): PacketHandlerProfileConfig;
+	static GetDefaultObject(): PacketHandlerProfileConfig;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PacketHandlerProfileConfig;
+	static C(Other: UObject | any): PacketHandlerProfileConfig;
 }
 
-declare class VREditorTeleporter extends Actor { 
-	VRMode: VREditorMode;
-	TeleportDirectionMeshComponent: StaticMeshComponent;
-	HMDMeshComponent: StaticMeshComponent;
-	LeftMotionControllerMeshComponent: StaticMeshComponent;
-	RightMotionControllerMeshComponent: StaticMeshComponent;
-	TeleportMID: MaterialInstanceDynamic;
-	InteractorTryingTeleport: ViewportInteractor;
-	static GetDefaultObject(): VREditorTeleporter;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorTeleporter;
-	static C(Other: UObject | any): VREditorTeleporter;
+declare class JsonUtilitiesDummyObject extends UObject { 
+	static Load(ResourceName: string): JsonUtilitiesDummyObject;
+	static Find(Outer: UObject, ResourceName: string): JsonUtilitiesDummyObject;
+	static GetDefaultObject(): JsonUtilitiesDummyObject;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JsonUtilitiesDummyObject;
+	static C(Other: UObject | any): JsonUtilitiesDummyObject;
 }
 
-declare class VREditorPlacement extends UObject { 
-	VRMode: VREditorMode;
-	ViewportWorldInteraction: ViewportWorldInteraction;
-	FloatingUIAssetDraggedFrom: WidgetComponent;
-	PlacingMaterialOrTextureAsset: UObject;
-	static Load(ResourceName: string): VREditorPlacement;
-	static Find(Outer: UObject, ResourceName: string): VREditorPlacement;
-	static GetDefaultObject(): VREditorPlacement;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorPlacement;
-	static C(Other: UObject | any): VREditorPlacement;
+declare type EPIEPreviewDeviceType = 'Unset' | 'Android' | 'IOS' | 'TVOS' | 'Switch' | 'MAX';
+declare var EPIEPreviewDeviceType : { Unset:'Unset',Android:'Android',IOS:'IOS',TVOS:'TVOS',Switch:'Switch',MAX:'MAX', };
+declare class PIEPreviewDeviceSpecification extends UObject { 
+	PreviewDeviceType: EPIEPreviewDeviceType;
+	GPUFamily: string;
+	GLVersion: string;
+	VulkanVersion: string;
+	AndroidVersion: string;
+	DeviceMake: string;
+	DeviceModel: string;
+	DeviceBuildNumber: string;
+	UsingHoudini: boolean;
+	Hardware: string;
+	Chipset: string;
+	static Load(ResourceName: string): PIEPreviewDeviceSpecification;
+	static Find(Outer: UObject, ResourceName: string): PIEPreviewDeviceSpecification;
+	static GetDefaultObject(): PIEPreviewDeviceSpecification;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PIEPreviewDeviceSpecification;
+	static C(Other: UObject | any): PIEPreviewDeviceSpecification;
 }
 
-declare class VREditorMode extends EditorWorldExtension { 
-	AvatarActor: VREditorAvatarActor;
-	UISystem: VREditorUISystem;
-	TeleportActor: VREditorTeleporter;
-	AutoScalerSystem: VREditorAutoScaler;
-	WorldInteraction: ViewportWorldInteraction;
-	PlacementSystem: VREditorPlacement;
-	LeftHandInteractor: VREditorMotionControllerInteractor;
-	RightHandInteractor: VREditorMotionControllerInteractor;
-	AssetContainer: VREditorAssetContainer;
-	static Load(ResourceName: string): VREditorMode;
-	static Find(Outer: UObject, ResourceName: string): VREditorMode;
-	static GetDefaultObject(): VREditorMode;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorMode;
-	static C(Other: UObject | any): VREditorMode;
+declare class BlueprintFunctionLibrary extends UObject { 
+	static Load(ResourceName: string): BlueprintFunctionLibrary;
+	static Find(Outer: UObject, ResourceName: string): BlueprintFunctionLibrary;
+	static GetDefaultObject(): BlueprintFunctionLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintFunctionLibrary;
+	static C(Other: UObject | any): BlueprintFunctionLibrary;
 }
 
-declare class VREditorAutoScaler extends UObject { 
-	VRMode: VREditorMode;
-	static Load(ResourceName: string): VREditorAutoScaler;
-	static Find(Outer: UObject, ResourceName: string): VREditorAutoScaler;
-	static GetDefaultObject(): VREditorAutoScaler;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorAutoScaler;
-	static C(Other: UObject | any): VREditorAutoScaler;
+declare class BlueprintGameplayTagLibrary extends BlueprintFunctionLibrary { 
+	static Load(ResourceName: string): BlueprintGameplayTagLibrary;
+	static Find(Outer: UObject, ResourceName: string): BlueprintGameplayTagLibrary;
+	static GetDefaultObject(): BlueprintGameplayTagLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintGameplayTagLibrary;
+	static RemoveGameplayTag(TagContainer?: GameplayTagContainer,Tag?: GameplayTag): {TagContainer: GameplayTagContainer, $: boolean};
+	static NotEqual_TagTag(A: GameplayTag,B: string): boolean;
+	static NotEqual_TagContainerTagContainer(A: GameplayTagContainer,B: string): boolean;
+	static NotEqual_GameplayTagContainer(A: GameplayTagContainer,B: GameplayTagContainer): boolean;
+	static NotEqual_GameplayTag(A: GameplayTag,B: GameplayTag): boolean;
+	static MatchesTag(TagOne: GameplayTag,TagTwo: GameplayTag,bExactMatch: boolean): boolean;
+	static MatchesAnyTags(TagOne: GameplayTag,OtherContainer: GameplayTagContainer,bExactMatch: boolean): boolean;
+	static MakeLiteralGameplayTagContainer(Value: GameplayTagContainer): GameplayTagContainer;
+	static MakeLiteralGameplayTag(Value: GameplayTag): GameplayTag;
+	static MakeGameplayTagQuery(TagQuery: GameplayTagQuery): GameplayTagQuery;
+	static MakeGameplayTagContainerFromTag(SingleTag: GameplayTag): GameplayTagContainer;
+	static MakeGameplayTagContainerFromArray(GameplayTags: GameplayTag[]): GameplayTagContainer;
+	static IsTagQueryEmpty(TagQuery: GameplayTagQuery): boolean;
+	static IsGameplayTagValid(GameplayTag: GameplayTag): boolean;
+	static HasTag(TagContainer: GameplayTagContainer,Tag: GameplayTag,bExactMatch: boolean): boolean;
+	static HasAnyTags(TagContainer: GameplayTagContainer,OtherContainer: GameplayTagContainer,bExactMatch: boolean): boolean;
+	static HasAllTags(TagContainer: GameplayTagContainer,OtherContainer: GameplayTagContainer,bExactMatch: boolean): boolean;
+	static GetTagName(GameplayTag: GameplayTag): string;
+	static GetNumGameplayTagsInContainer(TagContainer: GameplayTagContainer): number;
+	static GetDebugStringFromGameplayTagContainer(TagContainer: GameplayTagContainer): string;
+	static GetDebugStringFromGameplayTag(GameplayTag: GameplayTag): string;
+	static GetAllActorsOfClassMatchingTagQuery(WorldContextObject: UObject,ActorClass: UnrealEngineClass,GameplayTagQuery: GameplayTagQuery,OutActors?: Actor[]): {OutActors: Actor[]};
+	static EqualEqual_GameplayTagContainer(A: GameplayTagContainer,B: GameplayTagContainer): boolean;
+	static EqualEqual_GameplayTag(A: GameplayTag,B: GameplayTag): boolean;
+	static DoesContainerMatchTagQuery(TagContainer: GameplayTagContainer,TagQuery: GameplayTagQuery): boolean;
+	static BreakGameplayTagContainer(GameplayTagContainer: GameplayTagContainer,GameplayTags?: GameplayTag[]): {GameplayTags: GameplayTag[]};
+	static AppendGameplayTagContainers(InOutTagContainer?: GameplayTagContainer,InTagContainer?: GameplayTagContainer): {InOutTagContainer: GameplayTagContainer};
+	static AddGameplayTag(TagContainer?: GameplayTagContainer,Tag?: GameplayTag): {TagContainer: GameplayTagContainer};
+	static C(Other: UObject | any): BlueprintGameplayTagLibrary;
 }
 
-declare class VREditorBaseUserWidget extends UserWidget { 
-	Owner: any;
-	static Load(ResourceName: string): VREditorBaseUserWidget;
-	static Find(Outer: UObject, ResourceName: string): VREditorBaseUserWidget;
-	static GetDefaultObject(): VREditorBaseUserWidget;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorBaseUserWidget;
-	static C(Other: UObject | any): VREditorBaseUserWidget;
+declare class GameplayTagAssetInterface extends Interface { 
+	static Load(ResourceName: string): GameplayTagAssetInterface;
+	static Find(Outer: UObject, ResourceName: string): GameplayTagAssetInterface;
+	static GetDefaultObject(): GameplayTagAssetInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagAssetInterface;
+	HasMatchingGameplayTag(TagToCheck: GameplayTag): boolean;
+	HasAnyMatchingGameplayTags(TagContainer: GameplayTagContainer): boolean;
+	HasAllMatchingGameplayTags(TagContainer: GameplayTagContainer): boolean;
+	GetOwnedGameplayTags(TagContainer?: GameplayTagContainer): {TagContainer: GameplayTagContainer};
+	static C(Other: UObject | any): GameplayTagAssetInterface;
 }
 
-declare class DockableWindowDragOperation extends ViewportDragOperation { 
-	static Load(ResourceName: string): DockableWindowDragOperation;
-	static Find(Outer: UObject, ResourceName: string): DockableWindowDragOperation;
-	static GetDefaultObject(): DockableWindowDragOperation;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DockableWindowDragOperation;
-	static C(Other: UObject | any): DockableWindowDragOperation;
+declare class EditableGameplayTagQueryExpression extends UObject { 
+	static Load(ResourceName: string): EditableGameplayTagQueryExpression;
+	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQueryExpression;
+	static GetDefaultObject(): EditableGameplayTagQueryExpression;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQueryExpression;
+	static C(Other: UObject | any): EditableGameplayTagQueryExpression;
 }
 
-declare class FloatingText extends Actor { 
-	SceneComponent: SceneComponent;
-	FirstLineComponent: StaticMeshComponent;
-	JointSphereComponent: StaticMeshComponent;
-	SecondLineComponent: StaticMeshComponent;
-	TextComponent: TextRenderComponent;
-	MaskedTextMaterial: MaterialInterface;
-	TranslucentTextMaterial: MaterialInterface;
-	LineMaterial: MaterialInterface;
-	LineMaterialMID: MaterialInstanceDynamic;
-	static GetDefaultObject(): FloatingText;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FloatingText;
-	static C(Other: UObject | any): FloatingText;
+declare class EditableGameplayTagQuery extends UObject { 
+	UserDescription: string;
+	RootExpression: EditableGameplayTagQueryExpression;
+	TagQueryExportText_Helper: GameplayTagQuery;
+	static Load(ResourceName: string): EditableGameplayTagQuery;
+	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQuery;
+	static GetDefaultObject(): EditableGameplayTagQuery;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQuery;
+	static C(Other: UObject | any): EditableGameplayTagQuery;
 }
 
-declare class VISettings extends UObject { 
-	bScaleWorldFromFloor: boolean;
-	bScaleWorldWithDynamicPivot: boolean;
-	bAllowSimultaneousWorldScalingAndRotation: boolean;
-	static Load(ResourceName: string): VISettings;
-	static Find(Outer: UObject, ResourceName: string): VISettings;
-	static GetDefaultObject(): VISettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VISettings;
-	static C(Other: UObject | any): VISettings;
+declare class EditableGameplayTagQueryExpression_AnyTagsMatch extends EditableGameplayTagQueryExpression { 
+	Tags: GameplayTagContainer;
+	static Load(ResourceName: string): EditableGameplayTagQueryExpression_AnyTagsMatch;
+	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQueryExpression_AnyTagsMatch;
+	static GetDefaultObject(): EditableGameplayTagQueryExpression_AnyTagsMatch;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQueryExpression_AnyTagsMatch;
+	static C(Other: UObject | any): EditableGameplayTagQueryExpression_AnyTagsMatch;
 }
 
-declare type EInteractorHand = 'Right' | 'Left' | 'EInteractorHand_MAX';
-declare var EInteractorHand : { Right:'Right',Left:'Left',EInteractorHand_MAX:'EInteractorHand_MAX', };
-declare class VRModeSettings extends VISettings { 
-	bEnableAutoVREditMode: boolean;
-	bAutokeySequences: boolean;
-	InteractorHand: EInteractorHand;
-	bShowWorldMovementGrid: boolean;
-	bShowWorldMovementPostProcess: boolean;
-	bShowWorldScaleProgressBar: boolean;
-	UIBrightness: number;
-	GizmoScale: number;
-	DoubleClickTime: number;
-	TriggerPressedThreshold_Vive: number;
-	TriggerPressedThreshold_Rift: number;
-	static Load(ResourceName: string): VRModeSettings;
-	static Find(Outer: UObject, ResourceName: string): VRModeSettings;
-	static GetDefaultObject(): VRModeSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VRModeSettings;
-	static C(Other: UObject | any): VRModeSettings;
+declare class EditableGameplayTagQueryExpression_AllTagsMatch extends EditableGameplayTagQueryExpression { 
+	Tags: GameplayTagContainer;
+	static Load(ResourceName: string): EditableGameplayTagQueryExpression_AllTagsMatch;
+	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQueryExpression_AllTagsMatch;
+	static GetDefaultObject(): EditableGameplayTagQueryExpression_AllTagsMatch;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQueryExpression_AllTagsMatch;
+	static C(Other: UObject | any): EditableGameplayTagQueryExpression_AllTagsMatch;
 }
 
-declare type ELocalizationTargetConflictStatus = 'Unknown' | 'ConflictsPresent' | 'Clear' | 'ELocalizationTargetConflictStatus_MAX';
-declare var ELocalizationTargetConflictStatus : { Unknown:'Unknown',ConflictsPresent:'ConflictsPresent',Clear:'Clear',ELocalizationTargetConflictStatus_MAX:'ELocalizationTargetConflictStatus_MAX', };
-declare class FilePath { 
-	FilePath: string;
-	clone() : FilePath;
-	static C(Other: UObject | any): FilePath;
+declare class EditableGameplayTagQueryExpression_NoTagsMatch extends EditableGameplayTagQueryExpression { 
+	Tags: GameplayTagContainer;
+	static Load(ResourceName: string): EditableGameplayTagQueryExpression_NoTagsMatch;
+	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQueryExpression_NoTagsMatch;
+	static GetDefaultObject(): EditableGameplayTagQueryExpression_NoTagsMatch;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQueryExpression_NoTagsMatch;
+	static C(Other: UObject | any): EditableGameplayTagQueryExpression_NoTagsMatch;
+}
+
+declare class EditableGameplayTagQueryExpression_AnyExprMatch extends EditableGameplayTagQueryExpression { 
+	Expressions: EditableGameplayTagQueryExpression[];
+	static Load(ResourceName: string): EditableGameplayTagQueryExpression_AnyExprMatch;
+	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQueryExpression_AnyExprMatch;
+	static GetDefaultObject(): EditableGameplayTagQueryExpression_AnyExprMatch;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQueryExpression_AnyExprMatch;
+	static C(Other: UObject | any): EditableGameplayTagQueryExpression_AnyExprMatch;
 }
 
-declare class GatherTextSearchDirectory { 
-	Path: string;
-	clone() : GatherTextSearchDirectory;
-	static C(Other: UObject | any): GatherTextSearchDirectory;
+declare class EditableGameplayTagQueryExpression_AllExprMatch extends EditableGameplayTagQueryExpression { 
+	Expressions: EditableGameplayTagQueryExpression[];
+	static Load(ResourceName: string): EditableGameplayTagQueryExpression_AllExprMatch;
+	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQueryExpression_AllExprMatch;
+	static GetDefaultObject(): EditableGameplayTagQueryExpression_AllExprMatch;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQueryExpression_AllExprMatch;
+	static C(Other: UObject | any): EditableGameplayTagQueryExpression_AllExprMatch;
 }
 
-declare class GatherTextExcludePath { 
-	Pattern: string;
-	clone() : GatherTextExcludePath;
-	static C(Other: UObject | any): GatherTextExcludePath;
+declare class EditableGameplayTagQueryExpression_NoExprMatch extends EditableGameplayTagQueryExpression { 
+	Expressions: EditableGameplayTagQueryExpression[];
+	static Load(ResourceName: string): EditableGameplayTagQueryExpression_NoExprMatch;
+	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQueryExpression_NoExprMatch;
+	static GetDefaultObject(): EditableGameplayTagQueryExpression_NoExprMatch;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQueryExpression_NoExprMatch;
+	static C(Other: UObject | any): EditableGameplayTagQueryExpression_NoExprMatch;
 }
 
-declare class GatherTextFileExtension { 
-	Pattern: string;
-	clone() : GatherTextFileExtension;
-	static C(Other: UObject | any): GatherTextFileExtension;
+declare type EGameplayTagSourceType = 'Native' | 'DefaultTagList' | 'TagList' | 'RestrictedTagList' | 'DataTable' | 'Invalid' | 'EGameplayTagSourceType_MAX';
+declare var EGameplayTagSourceType : { Native:'Native',DefaultTagList:'DefaultTagList',TagList:'TagList',RestrictedTagList:'RestrictedTagList',DataTable:'DataTable',Invalid:'Invalid',EGameplayTagSourceType_MAX:'EGameplayTagSourceType_MAX', };
+declare class TableRowBase { 
+	clone() : TableRowBase;
+	static C(Other: UObject | any): TableRowBase;
 }
 
-declare class GatherTextFromTextFilesConfiguration { 
-	IsEnabled: boolean;
-	SearchDirectories: GatherTextSearchDirectory[];
-	ExcludePathWildcards: GatherTextExcludePath[];
-	FileExtensions: GatherTextFileExtension[];
-	ShouldGatherFromEditorOnlyData: boolean;
-	clone() : GatherTextFromTextFilesConfiguration;
-	static C(Other: UObject | any): GatherTextFromTextFilesConfiguration;
+declare class GameplayTagTableRow extends TableRowBase { 
+	Tag: string;
+	DevComment: string;
+	clone() : GameplayTagTableRow;
+	static C(Other: UObject | any): GameplayTagTableRow;
 }
 
-declare class GatherTextIncludePath { 
-	Pattern: string;
-	clone() : GatherTextIncludePath;
-	static C(Other: UObject | any): GatherTextIncludePath;
+declare class GameplayTagsList extends UObject { 
+	ConfigFileName: string;
+	GameplayTagList: GameplayTagTableRow[];
+	static Load(ResourceName: string): GameplayTagsList;
+	static Find(Outer: UObject, ResourceName: string): GameplayTagsList;
+	static GetDefaultObject(): GameplayTagsList;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsList;
+	static C(Other: UObject | any): GameplayTagsList;
 }
 
-declare class GatherTextFromPackagesConfiguration { 
-	IsEnabled: boolean;
-	IncludePathWildcards: GatherTextIncludePath[];
-	ExcludePathWildcards: GatherTextExcludePath[];
-	FileExtensions: GatherTextFileExtension[];
-	Collections: string[];
-	ShouldGatherFromEditorOnlyData: boolean;
-	SkipGatherCache: boolean;
-	clone() : GatherTextFromPackagesConfiguration;
-	static C(Other: UObject | any): GatherTextFromPackagesConfiguration;
+declare class RestrictedGameplayTagTableRow extends GameplayTagTableRow { 
+	bAllowNonRestrictedChildren: boolean;
+	clone() : RestrictedGameplayTagTableRow;
+	static C(Other: UObject | any): RestrictedGameplayTagTableRow;
 }
 
-declare class MetaDataKeyName { 
-	Name: string;
-	clone() : MetaDataKeyName;
-	static C(Other: UObject | any): MetaDataKeyName;
+declare class RestrictedGameplayTagsList extends UObject { 
+	ConfigFileName: string;
+	RestrictedGameplayTagList: RestrictedGameplayTagTableRow[];
+	static Load(ResourceName: string): RestrictedGameplayTagsList;
+	static Find(Outer: UObject, ResourceName: string): RestrictedGameplayTagsList;
+	static GetDefaultObject(): RestrictedGameplayTagsList;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RestrictedGameplayTagsList;
+	static C(Other: UObject | any): RestrictedGameplayTagsList;
 }
 
-declare class MetaDataTextKeyPattern { 
-	Pattern: string;
-	clone() : MetaDataTextKeyPattern;
-	static C(Other: UObject | any): MetaDataTextKeyPattern;
+declare class GameplayTagSource { 
+	SourceName: string;
+	SourceType: EGameplayTagSourceType;
+	SourceTagList: GameplayTagsList;
+	SourceRestrictedTagList: RestrictedGameplayTagsList;
+	clone() : GameplayTagSource;
+	static C(Other: UObject | any): GameplayTagSource;
 }
 
-declare class MetaDataKeyGatherSpecification { 
-	MetaDataKey: MetaDataKeyName;
-	TextNamespace: string;
-	TextKeyPattern: MetaDataTextKeyPattern;
-	clone() : MetaDataKeyGatherSpecification;
-	static C(Other: UObject | any): MetaDataKeyGatherSpecification;
+declare class DataTable extends UObject { 
+	RowStruct: ScriptStruct;
+	bStripFromClientBuilds: boolean;
+	bIgnoreExtraFields: boolean;
+	bIgnoreMissingFields: boolean;
+	ImportKeyField: string;
+	AssetImportData: AssetImportData;
+	ImportPath: string;
+	RowStructName: string;
+	RowsSerializedWithTags: number[];
+	TemporarilyReferencedObjects: any;
+	static Load(ResourceName: string): DataTable;
+	static Find(Outer: UObject, ResourceName: string): DataTable;
+	static GetDefaultObject(): DataTable;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DataTable;
+	static C(Other: UObject | any): DataTable;
+	GetDataTableAsJSON(InDTExportFlags: number): string;
+	DoesDataTableRowExist(RowName: string): boolean;
+	FillDataTableFromCSVFile(CSVFilePath: string): boolean;
+	FillDataTableFromCSVString(CSVString: string): boolean;
+	FillDataTableFromJSONFile(JSONFilePath: string): boolean;
+	FillDataTableFromJSONString(JsonString: string): boolean;
+	GetDataTableColumnAsString(PropertyName: string): string[];
+	GetDataTableRowFromName(RowName: string,OutRow?: TableRowBase): {OutRow: TableRowBase, $: boolean};
+	GetDataTableRowNames(OutRowNames?: string[]): {OutRowNames: string[]};
+	static GetDataTableAsJSON(InDataTable: DataTable,InDTExportFlags: number): string;
+	static DoesDataTableRowExist(Table: DataTable,RowName: string): boolean;
+	static FillDataTableFromCSVFile(DataTable: DataTable,CSVFilePath: string): boolean;
+	static FillDataTableFromCSVString(DataTable: DataTable,CSVString: string): boolean;
+	static FillDataTableFromJSONFile(DataTable: DataTable,JSONFilePath: string): boolean;
+	static FillDataTableFromJSONString(DataTable: DataTable,JsonString: string): boolean;
+	static GetDataTableColumnAsString(DataTable: DataTable,PropertyName: string): string[];
+	static GetDataTableRowFromName(Table: DataTable,RowName: string,OutRow?: TableRowBase): {OutRow: TableRowBase, $: boolean};
+	static GetDataTableRowNames(Table: DataTable,OutRowNames?: string[]): {OutRowNames: string[]};
 }
 
-declare class GatherTextFromMetaDataConfiguration { 
-	IsEnabled: boolean;
-	IncludePathWildcards: GatherTextIncludePath[];
-	ExcludePathWildcards: GatherTextExcludePath[];
-	KeySpecifications: MetaDataKeyGatherSpecification[];
-	ShouldGatherFromEditorOnlyData: boolean;
-	clone() : GatherTextFromMetaDataConfiguration;
-	static C(Other: UObject | any): GatherTextFromMetaDataConfiguration;
+declare class GameplayTagsManager extends UObject { 
+	TagSources: GameplayTagSource[];
+	GameplayTagTables: DataTable[];
+	static Load(ResourceName: string): GameplayTagsManager;
+	static Find(Outer: UObject, ResourceName: string): GameplayTagsManager;
+	static GetDefaultObject(): GameplayTagsManager;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsManager;
+	static C(Other: UObject | any): GameplayTagsManager;
 }
 
-declare type ELocalizedTextCollapseMode = 'IdenticalTextIdAndSource' | 'IdenticalPackageIdTextIdAndSource' | 'IdenticalNamespaceAndSource' | 'ELocalizedTextCollapseMode_MAX';
-declare var ELocalizedTextCollapseMode : { IdenticalTextIdAndSource:'IdenticalTextIdAndSource',IdenticalPackageIdTextIdAndSource:'IdenticalPackageIdTextIdAndSource',IdenticalNamespaceAndSource:'IdenticalNamespaceAndSource',ELocalizedTextCollapseMode_MAX:'ELocalizedTextCollapseMode_MAX', };
-declare class LocalizationExportingSettings { 
-	CollapseMode: ELocalizedTextCollapseMode;
-	ShouldPersistCommentsOnExport: boolean;
-	ShouldAddSourceLocationsAsComments: boolean;
-	clone() : LocalizationExportingSettings;
-	static C(Other: UObject | any): LocalizationExportingSettings;
+declare class GameplayTagCategoryRemap { 
+	BaseCategory: string;
+	RemapCategories: string[];
+	clone() : GameplayTagCategoryRemap;
+	static C(Other: UObject | any): GameplayTagCategoryRemap;
 }
 
-declare class LocalizationCompilationSettings { 
-	SkipSourceCheck: boolean;
-	clone() : LocalizationCompilationSettings;
-	static C(Other: UObject | any): LocalizationCompilationSettings;
+declare class GameplayTagRedirect { 
+	OldTagName: string;
+	NewTagName: string;
+	clone() : GameplayTagRedirect;
+	static C(Other: UObject | any): GameplayTagRedirect;
 }
 
-declare class DirectoryPath { 
-	Path: string;
-	clone() : DirectoryPath;
-	static C(Other: UObject | any): DirectoryPath;
+declare class RestrictedConfigInfo { 
+	RestrictedConfigName: string;
+	Owners: string[];
+	clone() : RestrictedConfigInfo;
+	static C(Other: UObject | any): RestrictedConfigInfo;
 }
 
-declare class LocalizationImportDialogueSettings { 
-	RawAudioPath: DirectoryPath;
-	ImportedDialogueFolder: string;
-	bImportNativeAsSource: boolean;
-	clone() : LocalizationImportDialogueSettings;
-	static C(Other: UObject | any): LocalizationImportDialogueSettings;
+declare class GameplayTagsSettings extends GameplayTagsList { 
+	ImportTagsFromConfig: boolean;
+	WarnOnInvalidTags: boolean;
+	FastReplication: boolean;
+	InvalidTagCharacters: string;
+	CategoryRemapping: GameplayTagCategoryRemap[];
+	GameplayTagTableList: SoftObjectPath[];
+	GameplayTagRedirects: GameplayTagRedirect[];
+	CommonlyReplicatedTags: string[];
+	NumBitsForContainerSize: number;
+	NetIndexFirstBitSegment: number;
+	RestrictedConfigFiles: RestrictedConfigInfo[];
+	RestrictedTagList: string;
+	static Load(ResourceName: string): GameplayTagsSettings;
+	static Find(Outer: UObject, ResourceName: string): GameplayTagsSettings;
+	static GetDefaultObject(): GameplayTagsSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsSettings;
+	static C(Other: UObject | any): GameplayTagsSettings;
 }
 
-declare class CultureStatistics { 
-	CultureName: string;
-	WordCount: any;
-	clone() : CultureStatistics;
-	static C(Other: UObject | any): CultureStatistics;
+declare class GameplayTagsDeveloperSettings extends UObject { 
+	DeveloperConfigName: string;
+	static Load(ResourceName: string): GameplayTagsDeveloperSettings;
+	static Find(Outer: UObject, ResourceName: string): GameplayTagsDeveloperSettings;
+	static GetDefaultObject(): GameplayTagsDeveloperSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsDeveloperSettings;
+	static C(Other: UObject | any): GameplayTagsDeveloperSettings;
 }
 
-declare class LocalizationTargetSettings { 
-	Name: string;
-	Guid: Guid;
-	ConflictStatus: ELocalizationTargetConflictStatus;
-	TargetDependencies: Guid[];
-	AdditionalManifestDependencies: FilePath[];
-	RequiredModuleNames: string[];
-	GatherFromTextFiles: GatherTextFromTextFilesConfiguration;
-	GatherFromPackages: GatherTextFromPackagesConfiguration;
-	GatherFromMetaData: GatherTextFromMetaDataConfiguration;
-	ExportSettings: LocalizationExportingSettings;
-	CompileSettings: LocalizationCompilationSettings;
-	ImportDialogueSettings: LocalizationImportDialogueSettings;
-	NativeCultureIndex: number;
-	SupportedCulturesStatistics: CultureStatistics[];
-	clone() : LocalizationTargetSettings;
-	static C(Other: UObject | any): LocalizationTargetSettings;
+declare class AbstractNavData extends NavigationData { 
+	static GetDefaultObject(): AbstractNavData;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AbstractNavData;
+	static C(Other: UObject | any): AbstractNavData;
 }
 
-declare class LocalizationTarget extends UObject { 
-	Settings: LocalizationTargetSettings;
-	static Load(ResourceName: string): LocalizationTarget;
-	static Find(Outer: UObject, ResourceName: string): LocalizationTarget;
-	static GetDefaultObject(): LocalizationTarget;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocalizationTarget;
-	static C(Other: UObject | any): LocalizationTarget;
+declare class CrowdManagerBase extends UObject { 
+	static Load(ResourceName: string): CrowdManagerBase;
+	static Find(Outer: UObject, ResourceName: string): CrowdManagerBase;
+	static GetDefaultObject(): CrowdManagerBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CrowdManagerBase;
+	static C(Other: UObject | any): CrowdManagerBase;
 }
 
-declare class LocalizationTargetSet extends UObject { 
-	TargetObjects: LocalizationTarget[];
-	static Load(ResourceName: string): LocalizationTargetSet;
-	static Find(Outer: UObject, ResourceName: string): LocalizationTargetSet;
-	static GetDefaultObject(): LocalizationTargetSet;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocalizationTargetSet;
-	static C(Other: UObject | any): LocalizationTargetSet;
+declare class NavArea_Default extends NavArea { 
+	static Load(ResourceName: string): NavArea_Default;
+	static Find(Outer: UObject, ResourceName: string): NavArea_Default;
+	static GetDefaultObject(): NavArea_Default;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavArea_Default;
+	static C(Other: UObject | any): NavArea_Default;
 }
 
-declare class LocalizationSettings extends UObject { 
-	EngineTargetSet: LocalizationTargetSet;
-	EngineTargetsSettings: LocalizationTargetSettings[];
-	GameTargetSet: LocalizationTargetSet;
-	GameTargetsSettings: LocalizationTargetSettings[];
-	static Load(ResourceName: string): LocalizationSettings;
-	static Find(Outer: UObject, ResourceName: string): LocalizationSettings;
-	static GetDefaultObject(): LocalizationSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocalizationSettings;
-	static C(Other: UObject | any): LocalizationSettings;
+declare class NavArea_LowHeight extends NavArea { 
+	static Load(ResourceName: string): NavArea_LowHeight;
+	static Find(Outer: UObject, ResourceName: string): NavArea_LowHeight;
+	static GetDefaultObject(): NavArea_LowHeight;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavArea_LowHeight;
+	static C(Other: UObject | any): NavArea_LowHeight;
 }
 
-declare class CookerStats extends UObject { 
-	Assets: any[];
-	SizeBefore: number;
-	SizeAfter: number;
-	Path: string;
-	static Load(ResourceName: string): CookerStats;
-	static Find(Outer: UObject, ResourceName: string): CookerStats;
-	static GetDefaultObject(): CookerStats;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CookerStats;
-	static C(Other: UObject | any): CookerStats;
+declare class NavArea_Null extends NavArea { 
+	static Load(ResourceName: string): NavArea_Null;
+	static Find(Outer: UObject, ResourceName: string): NavArea_Null;
+	static GetDefaultObject(): NavArea_Null;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavArea_Null;
+	static C(Other: UObject | any): NavArea_Null;
 }
 
-declare class LightingBuildInfo extends UObject { 
-	UObject: any;
-	LightingTime: number;
-	UnmappedTexelsPercentage: number;
-	UnmappedTexelsMemory: number;
-	TotalTexelMemory: number;
-	LevelName: string;
-	static Load(ResourceName: string): LightingBuildInfo;
-	static Find(Outer: UObject, ResourceName: string): LightingBuildInfo;
-	static GetDefaultObject(): LightingBuildInfo;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightingBuildInfo;
-	static C(Other: UObject | any): LightingBuildInfo;
+declare class NavArea_Obstacle extends NavArea { 
+	static Load(ResourceName: string): NavArea_Obstacle;
+	static Find(Outer: UObject, ResourceName: string): NavArea_Obstacle;
+	static GetDefaultObject(): NavArea_Obstacle;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavArea_Obstacle;
+	static C(Other: UObject | any): NavArea_Obstacle;
 }
 
-declare class PrimitiveStats extends UObject { 
-	UObject: any;
-	Actors: any[];
-	Type: string;
-	Count: number;
-	Sections: number;
-	HWInstances: number;
-	InstSections: number;
-	Triangles: number;
-	InstTriangles: number;
-	ResourceSize: number;
-	VertexColorMem: number;
-	InstVertexColorMem: number;
-	LightsLM: number;
-	LightsOther: number;
-	LightsTotal: number;
-	ObjLightCost: number;
-	LightMapData: number;
-	LMSMResolution: number;
-	RadiusMin: number;
-	RadiusMax: number;
-	RadiusAvg: number;
-	static Load(ResourceName: string): PrimitiveStats;
-	static Find(Outer: UObject, ResourceName: string): PrimitiveStats;
-	static GetDefaultObject(): PrimitiveStats;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PrimitiveStats;
-	static C(Other: UObject | any): PrimitiveStats;
+declare class NavAreaMeta extends NavArea { 
+	static Load(ResourceName: string): NavAreaMeta;
+	static Find(Outer: UObject, ResourceName: string): NavAreaMeta;
+	static GetDefaultObject(): NavAreaMeta;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavAreaMeta;
+	static C(Other: UObject | any): NavAreaMeta;
 }
 
-declare class StaticMeshLightingInfo extends UObject { 
-	StaticMeshActor: any;
-	StaticMesh: any;
-	LevelName: string;
-	TextureMapping: string;
-	bTextureMapping: boolean;
-	bHasLightmapTexCoords: boolean;
-	StaticLightingResolution: number;
-	TextureLightMapMemoryUsage: number;
-	VertexLightMapMemoryUsage: number;
-	LightMapLightCount: number;
-	TextureShadowMapMemoryUsage: number;
-	VertexShadowMapMemoryUsage: number;
-	ShadowMapLightCount: number;
-	static Load(ResourceName: string): StaticMeshLightingInfo;
-	static Find(Outer: UObject, ResourceName: string): StaticMeshLightingInfo;
-	static GetDefaultObject(): StaticMeshLightingInfo;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshLightingInfo;
-	static C(Other: UObject | any): StaticMeshLightingInfo;
+declare class NavAreaMeta_SwitchByAgent extends NavAreaMeta { 
+	Agent0Area: UnrealEngineClass;
+	Agent1Area: UnrealEngineClass;
+	Agent2Area: UnrealEngineClass;
+	Agent3Area: UnrealEngineClass;
+	Agent4Area: UnrealEngineClass;
+	Agent5Area: UnrealEngineClass;
+	Agent6Area: UnrealEngineClass;
+	Agent7Area: UnrealEngineClass;
+	Agent8Area: UnrealEngineClass;
+	Agent9Area: UnrealEngineClass;
+	Agent10Area: UnrealEngineClass;
+	Agent11Area: UnrealEngineClass;
+	Agent12Area: UnrealEngineClass;
+	Agent13Area: UnrealEngineClass;
+	Agent14Area: UnrealEngineClass;
+	Agent15Area: UnrealEngineClass;
+	static Load(ResourceName: string): NavAreaMeta_SwitchByAgent;
+	static Find(Outer: UObject, ResourceName: string): NavAreaMeta_SwitchByAgent;
+	static GetDefaultObject(): NavAreaMeta_SwitchByAgent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavAreaMeta_SwitchByAgent;
+	static C(Other: UObject | any): NavAreaMeta_SwitchByAgent;
 }
 
-declare class TextureStats extends UObject { 
-	Texture: any;
-	Actors: any[];
-	Type: string;
-	MaxDim: Vector2D;
-	CurrentDim: Vector2D;
-	Format: EPixelFormat;
-	Group: TextureGroup;
-	LODBias: number;
-	CurrentKB: number;
-	FullyLoadedKB: number;
-	NumUses: number;
-	LastTimeRendered: number;
-	Path: string;
-	static Load(ResourceName: string): TextureStats;
-	static Find(Outer: UObject, ResourceName: string): TextureStats;
-	static GetDefaultObject(): TextureStats;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureStats;
-	static C(Other: UObject | any): TextureStats;
+declare class NavCollisionCylinder { 
+	Offset: Vector;
+	Radius: number;
+	Height: number;
+	clone() : NavCollisionCylinder;
+	static C(Other: UObject | any): NavCollisionCylinder;
 }
 
-declare class PropertyEntry { 
-	Property: EMaterialProperty;
-	bUseCustomSize: boolean;
-	CustomSize: IntPoint;
-	bUseConstantValue: boolean;
-	ConstantValue: number;
-	clone() : PropertyEntry;
-	static C(Other: UObject | any): PropertyEntry;
+declare class NavCollisionBox { 
+	Offset: Vector;
+	Extent: Vector;
+	clone() : NavCollisionBox;
+	static C(Other: UObject | any): NavCollisionBox;
 }
 
-declare class MaterialOptions extends UObject { 
-	Properties: PropertyEntry[];
-	TextureSize: IntPoint;
-	LODIndices: number[];
-	bUseMeshData: boolean;
-	bUseSpecificUVIndex: boolean;
-	TextureCoordinateIndex: number;
-	static Load(ResourceName: string): MaterialOptions;
-	static Find(Outer: UObject, ResourceName: string): MaterialOptions;
-	static GetDefaultObject(): MaterialOptions;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialOptions;
-	static C(Other: UObject | any): MaterialOptions;
-}
-
-declare class AssetBakeOptions extends UObject { 
-	static Load(ResourceName: string): AssetBakeOptions;
-	static Find(Outer: UObject, ResourceName: string): AssetBakeOptions;
-	static GetDefaultObject(): AssetBakeOptions;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetBakeOptions;
-	static C(Other: UObject | any): AssetBakeOptions;
-}
-
-declare type EMaterialBakeMethod = 'IndividualMaterial' | 'AtlasMaterial' | 'BinnedMaterial' | 'EMaterialBakeMethod_MAX';
-declare var EMaterialBakeMethod : { IndividualMaterial:'IndividualMaterial',AtlasMaterial:'AtlasMaterial',BinnedMaterial:'BinnedMaterial',EMaterialBakeMethod_MAX:'EMaterialBakeMethod_MAX', };
-declare class MaterialMergeOptions extends UObject { 
-	Method: EMaterialBakeMethod;
-	BlendMode: EBlendMode;
-	static Load(ResourceName: string): MaterialMergeOptions;
-	static Find(Outer: UObject, ResourceName: string): MaterialMergeOptions;
-	static GetDefaultObject(): MaterialMergeOptions;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialMergeOptions;
-	static C(Other: UObject | any): MaterialMergeOptions;
+declare class NavCollision extends NavCollisionBase { 
+	CylinderCollision: NavCollisionCylinder[];
+	BoxCollision: NavCollisionBox[];
+	AreaClass: UnrealEngineClass;
+	bGatherConvexGeometry: boolean;
+	bCreateOnClient: boolean;
+	static Load(ResourceName: string): NavCollision;
+	static Find(Outer: UObject, ResourceName: string): NavCollision;
+	static GetDefaultObject(): NavCollision;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavCollision;
+	static C(Other: UObject | any): NavCollision;
 }
 
-declare class BlueprintFunctionLibrary extends UObject { 
-	static Load(ResourceName: string): BlueprintFunctionLibrary;
-	static Find(Outer: UObject, ResourceName: string): BlueprintFunctionLibrary;
-	static GetDefaultObject(): BlueprintFunctionLibrary;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintFunctionLibrary;
-	static C(Other: UObject | any): BlueprintFunctionLibrary;
+declare class NavigationGraph extends NavigationData { 
+	static GetDefaultObject(): NavigationGraph;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationGraph;
+	static C(Other: UObject | any): NavigationGraph;
 }
 
-declare class MaterialInstanceConstant extends MaterialInstance { 
-	ParameterStateId: Guid;
-	static Load(ResourceName: string): MaterialInstanceConstant;
-	static Find(Outer: UObject, ResourceName: string): MaterialInstanceConstant;
-	static GetDefaultObject(): MaterialInstanceConstant;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialInstanceConstant;
-	K2_GetVectorParameterValue(ParameterName: string): LinearColor;
-	K2_GetTextureParameterValue(ParameterName: string): Texture;
-	K2_GetScalarParameterValue(ParameterName: string): number;
-	static C(Other: UObject | any): MaterialInstanceConstant;
-	ClearAllMaterialInstanceParameters(): void;
-	GetMaterialInstanceScalarParameterValue(ParameterName: string): number;
-	GetMaterialInstanceTextureParameterValue(ParameterName: string): Texture;
-	GetMaterialInstanceVectorParameterValue(ParameterName: string): LinearColor;
-	SetMaterialInstanceParent(NewParent: MaterialInterface): void;
-	SetMaterialInstanceScalarParameterValue(ParameterName: string,Value: number): boolean;
-	SetMaterialInstanceTextureParameterValue(ParameterName: string,Value: Texture): boolean;
-	SetMaterialInstanceVectorParameterValue(ParameterName: string,Value: LinearColor): boolean;
-	UpdateMaterialInstance(): void;
-	static ClearAllMaterialInstanceParameters(Instance: MaterialInstanceConstant): void;
-	static GetMaterialInstanceScalarParameterValue(Instance: MaterialInstanceConstant,ParameterName: string): number;
-	static GetMaterialInstanceTextureParameterValue(Instance: MaterialInstanceConstant,ParameterName: string): Texture;
-	static GetMaterialInstanceVectorParameterValue(Instance: MaterialInstanceConstant,ParameterName: string): LinearColor;
-	static SetMaterialInstanceParent(Instance: MaterialInstanceConstant,NewParent: MaterialInterface): void;
-	static SetMaterialInstanceScalarParameterValue(Instance: MaterialInstanceConstant,ParameterName: string,Value: number): boolean;
-	static SetMaterialInstanceTextureParameterValue(Instance: MaterialInstanceConstant,ParameterName: string,Value: Texture): boolean;
-	static SetMaterialInstanceVectorParameterValue(Instance: MaterialInstanceConstant,ParameterName: string,Value: LinearColor): boolean;
-	static UpdateMaterialInstance(Instance: MaterialInstanceConstant): void;
-}
-
-declare class MaterialEditingLibrary extends BlueprintFunctionLibrary { 
-	static Load(ResourceName: string): MaterialEditingLibrary;
-	static Find(Outer: UObject, ResourceName: string): MaterialEditingLibrary;
-	static GetDefaultObject(): MaterialEditingLibrary;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialEditingLibrary;
-	static UpdateMaterialInstance(Instance: MaterialInstanceConstant): void;
-	static UpdateMaterialFunction(MaterialFunction: MaterialFunctionInterface,PreviewMaterial: Material): void;
-	static SetMaterialUsage(Material: Material,Usage: EMaterialUsage,bNeedsRecompile?: boolean): {bNeedsRecompile: boolean, $: boolean};
-	static SetMaterialInstanceVectorParameterValue(Instance: MaterialInstanceConstant,ParameterName: string,Value: LinearColor): boolean;
-	static SetMaterialInstanceTextureParameterValue(Instance: MaterialInstanceConstant,ParameterName: string,Value: Texture): boolean;
-	static SetMaterialInstanceScalarParameterValue(Instance: MaterialInstanceConstant,ParameterName: string,Value: number): boolean;
-	static SetMaterialInstanceParent(Instance: MaterialInstanceConstant,NewParent: MaterialInterface): void;
-	static RecompileMaterial(Material: Material): void;
-	static GetNumMaterialExpressionsInFunction(MaterialFunction: MaterialFunction): number;
-	static GetNumMaterialExpressions(Material: Material): number;
-	static GetMaterialInstanceVectorParameterValue(Instance: MaterialInstanceConstant,ParameterName: string): LinearColor;
-	static GetMaterialInstanceTextureParameterValue(Instance: MaterialInstanceConstant,ParameterName: string): Texture;
-	static GetMaterialInstanceScalarParameterValue(Instance: MaterialInstanceConstant,ParameterName: string): number;
-	static DeleteMaterialExpressionInFunction(MaterialFunction: MaterialFunction,Expression: MaterialExpression): void;
-	static DeleteMaterialExpression(Material: Material,Expression: MaterialExpression): void;
-	static DeleteAllMaterialExpressionsInFunction(MaterialFunction: MaterialFunction): void;
-	static DeleteAllMaterialExpressions(Material: Material): void;
-	static CreateMaterialExpressionInFunction(MaterialFunction: MaterialFunction,ExpressionClass: UnrealEngineClass,NodePosX: number,NodePosY: number): MaterialExpression;
-	static CreateMaterialExpression(Material: Material,ExpressionClass: UnrealEngineClass,NodePosX: number,NodePosY: number): MaterialExpression;
-	static ConnectMaterialProperty(FromExpression: MaterialExpression,FromOutputName: string,Property: EMaterialProperty): boolean;
-	static ConnectMaterialExpressions(FromExpression: MaterialExpression,FromOutputName: string,ToExpression: MaterialExpression,ToInputName: string): boolean;
-	static ClearAllMaterialInstanceParameters(Instance: MaterialInstanceConstant): void;
-	static C(Other: UObject | any): MaterialEditingLibrary;
+declare class NavigationGraphNode extends Actor { 
+	static GetDefaultObject(): NavigationGraphNode;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationGraphNode;
+	static C(Other: UObject | any): NavigationGraphNode;
 }
 
-declare class MaterialEditorSettings extends UObject { 
-	MaliOfflineCompilerPath: FilePath;
-	static Load(ResourceName: string): MaterialEditorSettings;
-	static Find(Outer: UObject, ResourceName: string): MaterialEditorSettings;
-	static GetDefaultObject(): MaterialEditorSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialEditorSettings;
-	static C(Other: UObject | any): MaterialEditorSettings;
+declare class NavGraphNode { 
+	Owner: UObject;
+	clone() : NavGraphNode;
+	static C(Other: UObject | any): NavGraphNode;
 }
 
-declare type EHMDTrackingOrigin = 'Floor' | 'Eye' | 'EHMDTrackingOrigin_MAX';
-declare var EHMDTrackingOrigin : { Floor:'Floor',Eye:'Eye',EHMDTrackingOrigin_MAX:'EHMDTrackingOrigin_MAX', };
-declare type ESpectatorScreenMode = 'Disabled' | 'SingleEyeLetterboxed' | 'Undistorted' | 'Distorted' | 'SingleEye' | 'SingleEyeCroppedToFill' | 'Texture' | 'TexturePlusEye' | 'ESpectatorScreenMode_MAX';
-declare var ESpectatorScreenMode : { Disabled:'Disabled',SingleEyeLetterboxed:'SingleEyeLetterboxed',Undistorted:'Undistorted',Distorted:'Distorted',SingleEye:'SingleEye',SingleEyeCroppedToFill:'SingleEyeCroppedToFill',Texture:'Texture',TexturePlusEye:'TexturePlusEye',ESpectatorScreenMode_MAX:'ESpectatorScreenMode_MAX', };
-declare type EHMDWornState = 'Unknown' | 'Worn' | 'NotWorn' | 'EHMDWornState_MAX';
-declare var EHMDWornState : { Unknown:'Unknown',Worn:'Worn',NotWorn:'NotWorn',EHMDWornState_MAX:'EHMDWornState_MAX', };
-declare type EXRTrackedDeviceType = 'HeadMountedDisplay' | 'Controller' | 'TrackingReference' | 'Other' | 'Invalid' | 'Any' | 'EXRTrackedDeviceType_MAX';
-declare var EXRTrackedDeviceType : { HeadMountedDisplay:'HeadMountedDisplay',Controller:'Controller',TrackingReference:'TrackingReference',Other:'Other',Invalid:'Invalid',Any:'Any',EXRTrackedDeviceType_MAX:'EXRTrackedDeviceType_MAX', };
-declare class HeadMountedDisplayFunctionLibrary extends BlueprintFunctionLibrary { 
-	static Load(ResourceName: string): HeadMountedDisplayFunctionLibrary;
-	static Find(Outer: UObject, ResourceName: string): HeadMountedDisplayFunctionLibrary;
-	static GetDefaultObject(): HeadMountedDisplayFunctionLibrary;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HeadMountedDisplayFunctionLibrary;
-	static UpdateExternalTrackingHMDPosition(ExternalTrackingTransform: Transform): void;
-	static SetWorldToMetersScale(WorldContext: UObject,NewScale: number): void;
-	static SetTrackingOrigin(Origin: EHMDTrackingOrigin): void;
-	static SetSpectatorScreenTexture(InTexture: Texture): void;
-	static SetSpectatorScreenModeTexturePlusEyeLayout(EyeRectMin: Vector2D,EyeRectMax: Vector2D,TextureRectMin: Vector2D,TextureRectMax: Vector2D,bDrawEyeFirst: boolean,bClearBlack: boolean,bUseAlpha: boolean): void;
-	static SetSpectatorScreenMode(Mode: ESpectatorScreenMode): void;
-	static SetClippingPlanes(Near: number,Far: number): void;
-	static ResetOrientationAndPosition(Yaw: number,Options: EOrientPositionSelector): void;
-	static IsSpectatorScreenModeControllable(): boolean;
-	static IsInLowPersistenceMode(): boolean;
-	static IsHeadMountedDisplayEnabled(): boolean;
-	static IsHeadMountedDisplayConnected(): boolean;
-	static IsDeviceTracking(XRDeviceId: XRDeviceId): boolean;
-	static HasValidTrackingPosition(): boolean;
-	static GetWorldToMetersScale(WorldContext: UObject): number;
-	static GetVRFocusState(bUseFocus?: boolean,bHasFocus?: boolean): {bUseFocus: boolean, bHasFocus: boolean};
-	static GetTrackingToWorldTransform(WorldContext: UObject): Transform;
-	static GetTrackingSensorParameters(Origin?: Vector,Rotation?: Rotator,LeftFOV?: number,RightFOV?: number,TopFOV?: number,BottomFOV?: number,Distance?: number,NearPlane?: number,FarPlane?: number,IsActive?: boolean,index?: number): {Origin: Vector, Rotation: Rotator, LeftFOV: number, RightFOV: number, TopFOV: number, BottomFOV: number, Distance: number, NearPlane: number, FarPlane: number, IsActive: boolean};
-	static GetTrackingOrigin(): EHMDTrackingOrigin;
-	static GetScreenPercentage(): number;
-	static GetPositionalTrackingCameraParameters(CameraOrigin?: Vector,CameraRotation?: Rotator,HFOV?: number,VFOV?: number,CameraDistance?: number,NearPlane?: number,FarPlane?: number): {CameraOrigin: Vector, CameraRotation: Rotator, HFOV: number, VFOV: number, CameraDistance: number, NearPlane: number, FarPlane: number};
-	static GetPixelDensity(): number;
-	static GetOrientationAndPosition(DeviceRotation?: Rotator,DevicePosition?: Vector): {DeviceRotation: Rotator, DevicePosition: Vector};
-	static GetNumOfTrackingSensors(): number;
-	static GetHMDWornState(): EHMDWornState;
-	static GetHMDDeviceName(): string;
-	static GetDeviceWorldPose(WorldContext: UObject,XRDeviceId: XRDeviceId,bIsTracked?: boolean,Orientation?: Rotator,bHasPositionalTracking?: boolean,Position?: Vector): {bIsTracked: boolean, Orientation: Rotator, bHasPositionalTracking: boolean, Position: Vector};
-	static GetDevicePose(XRDeviceId: XRDeviceId,bIsTracked?: boolean,Orientation?: Rotator,bHasPositionalTracking?: boolean,Position?: Vector): {bIsTracked: boolean, Orientation: Rotator, bHasPositionalTracking: boolean, Position: Vector};
-	static EnumerateTrackedDevices(SystemId: string,DeviceType: EXRTrackedDeviceType): XRDeviceId[];
-	static EnableLowPersistenceMode(bEnable: boolean): void;
-	static EnableHMD(bEnable: boolean): boolean;
-	static CalibrateExternalTrackingToHMD(ExternalTrackingTransform: Transform): void;
-	static C(Other: UObject | any): HeadMountedDisplayFunctionLibrary;
+declare class NavigationGraphNodeComponent extends SceneComponent { 
+	UNode: NavGraphNode;
+	NextNodeComponent: NavigationGraphNodeComponent;
+	PrevNodeComponent: NavigationGraphNodeComponent;
+	static Load(ResourceName: string): NavigationGraphNodeComponent;
+	static Find(Outer: UObject, ResourceName: string): NavigationGraphNodeComponent;
+	static GetDefaultObject(): NavigationGraphNodeComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationGraphNodeComponent;
+	static C(Other: UObject | any): NavigationGraphNodeComponent;
 }
 
-declare class MotionTrackedDeviceFunctionLibrary extends BlueprintFunctionLibrary { 
-	static Load(ResourceName: string): MotionTrackedDeviceFunctionLibrary;
-	static Find(Outer: UObject, ResourceName: string): MotionTrackedDeviceFunctionLibrary;
-	static GetDefaultObject(): MotionTrackedDeviceFunctionLibrary;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MotionTrackedDeviceFunctionLibrary;
-	static SetIsControllerMotionTrackingEnabledByDefault(Enable: boolean): void;
-	static IsMotionTrackingEnabledForSource(PlayerIndex: number,SourceName: string): boolean;
-	static IsMotionTrackingEnabledForDevice(PlayerIndex: number,Hand: EControllerHand): boolean;
-	static IsMotionTrackingEnabledForComponent(MotionControllerComponent: MotionControllerComponent): boolean;
-	static IsMotionTrackedDeviceCountManagementNecessary(): boolean;
-	static IsMotionSourceTracking(PlayerIndex: number,SourceName: string): boolean;
-	static GetMotionTrackingEnabledControllerCount(): number;
-	static GetMaximumMotionTrackedControllerCount(): number;
-	static GetActiveTrackingSystemName(): string;
-	static EnumerateMotionSources(): string[];
-	static EnableMotionTrackingOfSource(PlayerIndex: number,SourceName: string): boolean;
-	static EnableMotionTrackingOfDevice(PlayerIndex: number,Hand: EControllerHand): boolean;
-	static EnableMotionTrackingForComponent(MotionControllerComponent: MotionControllerComponent): boolean;
-	static DisableMotionTrackingOfSource(PlayerIndex: number,SourceName: string): void;
-	static DisableMotionTrackingOfDevice(PlayerIndex: number,Hand: EControllerHand): void;
-	static DisableMotionTrackingOfControllersForPlayer(PlayerIndex: number): void;
-	static DisableMotionTrackingOfAllControllers(): void;
-	static DisableMotionTrackingForComponent(MotionControllerComponent: MotionControllerComponent): void;
-	static C(Other: UObject | any): MotionTrackedDeviceFunctionLibrary;
+declare class NavigationInvokerComponent extends ActorComponent { 
+	TileGenerationRadius: number;
+	TileRemovalRadius: number;
+	static Load(ResourceName: string): NavigationInvokerComponent;
+	static Find(Outer: UObject, ResourceName: string): NavigationInvokerComponent;
+	static GetDefaultObject(): NavigationInvokerComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationInvokerComponent;
+	static C(Other: UObject | any): NavigationInvokerComponent;
 }
 
-declare class VRNotificationsComponent extends ActorComponent { 
-	HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate: UnrealEngineMulticastDelegate<() => void>;
-	HMDTrackingInitializedDelegate: UnrealEngineMulticastDelegate<() => void>;
-	HMDRecenteredDelegate: UnrealEngineMulticastDelegate<() => void>;
-	HMDLostDelegate: UnrealEngineMulticastDelegate<() => void>;
-	HMDReconnectedDelegate: UnrealEngineMulticastDelegate<() => void>;
-	HMDConnectCanceledDelegate: UnrealEngineMulticastDelegate<() => void>;
-	HMDPutOnHeadDelegate: UnrealEngineMulticastDelegate<() => void>;
-	HMDRemovedFromHeadDelegate: UnrealEngineMulticastDelegate<() => void>;
-	VRControllerRecenteredDelegate: UnrealEngineMulticastDelegate<() => void>;
-	static Load(ResourceName: string): VRNotificationsComponent;
-	static Find(Outer: UObject, ResourceName: string): VRNotificationsComponent;
-	static GetDefaultObject(): VRNotificationsComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VRNotificationsComponent;
-	static C(Other: UObject | any): VRNotificationsComponent;
+declare class NavigationPathGenerator extends Interface { 
+	static Load(ResourceName: string): NavigationPathGenerator;
+	static Find(Outer: UObject, ResourceName: string): NavigationPathGenerator;
+	static GetDefaultObject(): NavigationPathGenerator;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationPathGenerator;
+	static C(Other: UObject | any): NavigationPathGenerator;
 }
 
-declare class XRAssetFunctionLibrary extends BlueprintFunctionLibrary { 
-	static Load(ResourceName: string): XRAssetFunctionLibrary;
-	static Find(Outer: UObject, ResourceName: string): XRAssetFunctionLibrary;
-	static GetDefaultObject(): XRAssetFunctionLibrary;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): XRAssetFunctionLibrary;
-	static AddNamedDeviceVisualizationComponentBlocking(Target: Actor,SystemName: string,DeviceName: string,bManualAttachment: boolean,RelativeTransform: Transform,XRDeviceId?: XRDeviceId): {XRDeviceId: XRDeviceId, $: PrimitiveComponent};
-	static AddDeviceVisualizationComponentBlocking(Target: Actor,XRDeviceId: XRDeviceId,bManualAttachment: boolean,RelativeTransform: Transform): PrimitiveComponent;
-	static C(Other: UObject | any): XRAssetFunctionLibrary;
+declare type ENavDataGatheringModeConfig = 'Invalid' | 'Instant' | 'Lazy' | 'ENavDataGatheringModeConfig_MAX';
+declare var ENavDataGatheringModeConfig : { Invalid:'Invalid',Instant:'Instant',Lazy:'Lazy',ENavDataGatheringModeConfig_MAX:'ENavDataGatheringModeConfig_MAX', };
+declare type FNavigationSystemRunMode = 'InvalidMode' | 'GameMode' | 'EditorMode' | 'SimulationMode' | 'PIEMode' | 'FNavigationSystemRunMode_MAX';
+declare var FNavigationSystemRunMode : { InvalidMode:'InvalidMode',GameMode:'GameMode',EditorMode:'EditorMode',SimulationMode:'SimulationMode',PIEMode:'PIEMode',FNavigationSystemRunMode_MAX:'FNavigationSystemRunMode_MAX', };
+declare class NavMeshBoundsVolume extends Volume { 
+	SupportedAgents: NavAgentSelector;
+	static GetDefaultObject(): NavMeshBoundsVolume;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavMeshBoundsVolume;
+	static C(Other: UObject | any): NavMeshBoundsVolume;
 }
 
-declare class BlueprintAsyncActionBase extends UObject { 
-	static Load(ResourceName: string): BlueprintAsyncActionBase;
-	static Find(Outer: UObject, ResourceName: string): BlueprintAsyncActionBase;
-	static GetDefaultObject(): BlueprintAsyncActionBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintAsyncActionBase;
-	Activate(): void;
-	static C(Other: UObject | any): BlueprintAsyncActionBase;
+declare type ENavigationQueryResult = 'Invalid' | 'Error' | 'Fail' | 'Success' | 'ENavigationQueryResult_MAX';
+declare var ENavigationQueryResult : { Invalid:'Invalid',Error:'Error',Fail:'Fail',Success:'Success',ENavigationQueryResult_MAX:'ENavigationQueryResult_MAX', };
+declare class NavigationSystemV1 extends NavigationSystemBase { 
+	MainNavData: NavigationData;
+	AbstractNavData: NavigationData;
+	CrowdManagerClass: Class;
+	bAutoCreateNavigationData: boolean;
+	bSpawnNavDataInNavBoundsLevel: boolean;
+	bAllowClientSideNavigation: boolean;
+	bShouldDiscardSubLevelNavData: boolean;
+	bTickWhilePaused: boolean;
+	bSupportRebuilding: boolean;
+	bInitialBuildingLocked: boolean;
+	bSkipAgentHeightCheckWhenPickingNavData: boolean;
+	DataGatheringMode: ENavDataGatheringModeConfig;
+	bGenerateNavigationOnlyAroundNavigationInvokers: boolean;
+	ActiveTilesUpdateInterval: number;
+	SupportedAgents: NavDataConfig[];
+	DirtyAreasUpdateFreq: number;
+	NavDataSet: NavigationData[];
+	NavDataRegistrationQueue: NavigationData[];
+	OnNavDataRegisteredEvent: UnrealEngineMulticastDelegate<(NavData: NavigationData) => void>;
+	OnNavigationGenerationFinishedDelegate: UnrealEngineMulticastDelegate<(NavData: NavigationData) => void>;
+	OperationMode: FNavigationSystemRunMode;
+	static Load(ResourceName: string): NavigationSystemV1;
+	static Find(Outer: UObject, ResourceName: string): NavigationSystemV1;
+	static GetDefaultObject(): NavigationSystemV1;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationSystemV1;
+	UnregisterNavigationInvoker(Invoker: Actor): void;
+	static SimpleMoveToLocation(Controller: Controller,Goal: Vector): void;
+	static SimpleMoveToActor(Controller: Controller,Goal: Actor): void;
+	SetMaxSimultaneousTileGenerationJobsCount(MaxNumberOfJobs: number): void;
+	SetGeometryGatheringMode(NewMode: ENavDataGatheringModeConfig): void;
+	ResetMaxSimultaneousTileGenerationJobsCount(): void;
+	RegisterNavigationInvoker(Invoker: Actor,TileGenerationRadius: number,TileRemovalRadius: number): void;
+	static ProjectPointToNavigation(WorldContextObject: UObject,Point: Vector,NavData: NavigationData,FilterClass: UnrealEngineClass,QueryExtent: Vector): Vector;
+	OnNavigationBoundsUpdated(NavVolume: NavMeshBoundsVolume): void;
+	static NavigationRaycast(WorldContextObject: UObject,RayStart: Vector,RayEnd: Vector,HitLocation?: Vector,FilterClass?: UnrealEngineClass,Querier?: Controller): {HitLocation: Vector, $: boolean};
+	K2_ReplaceAreaInOctreeData(UObject: UObject,OldArea: UnrealEngineClass,NewArea: UnrealEngineClass): boolean;
+	static K2_ProjectPointToNavigation(WorldContextObject: UObject,Point: Vector,ProjectedLocation?: Vector,NavData?: NavigationData,FilterClass?: UnrealEngineClass,QueryExtent?: Vector): {ProjectedLocation: Vector, $: boolean};
+	static K2_GetRandomReachablePointInRadius(WorldContextObject: UObject,Origin: Vector,RandomLocation?: Vector,Radius?: number,NavData?: NavigationData,FilterClass?: UnrealEngineClass): {RandomLocation: Vector, $: boolean};
+	static K2_GetRandomPointInNavigableRadius(WorldContextObject: UObject,Origin: Vector,RandomLocation?: Vector,Radius?: number,NavData?: NavigationData,FilterClass?: UnrealEngineClass): {RandomLocation: Vector, $: boolean};
+	static K2_GetRandomLocationInNavigableRadius(WorldContextObject: UObject,Origin: Vector,RandomLocation?: Vector,Radius?: number,NavData?: NavigationData,FilterClass?: UnrealEngineClass): {RandomLocation: Vector, $: boolean};
+	static IsNavigationBeingBuiltOrLocked(WorldContextObject: UObject): boolean;
+	static IsNavigationBeingBuilt(WorldContextObject: UObject): boolean;
+	static GetRandomReachablePointInRadius(WorldContextObject: UObject,Origin: Vector,Radius: number,NavData: NavigationData,FilterClass: UnrealEngineClass): Vector;
+	static GetRandomPointInNavigableRadius(WorldContextObject: UObject,Origin: Vector,Radius: number,NavData: NavigationData,FilterClass: UnrealEngineClass): Vector;
+	static GetPathLength(WorldContextObject: UObject,PathStart: Vector,PathEnd: Vector,PathLength?: number,NavData?: NavigationData,FilterClass?: UnrealEngineClass): {PathLength: number, $: ENavigationQueryResult};
+	static GetPathCost(WorldContextObject: UObject,PathStart: Vector,PathEnd: Vector,PathCost?: number,NavData?: NavigationData,FilterClass?: UnrealEngineClass): {PathCost: number, $: ENavigationQueryResult};
+	static GetNavigationSystem(WorldContextObject: UObject): NavigationSystemV1;
+	static FindPathToLocationSynchronously(WorldContextObject: UObject,PathStart: Vector,PathEnd: Vector,PathfindingContext: Actor,FilterClass: UnrealEngineClass): NavigationPath;
+	static FindPathToActorSynchronously(WorldContextObject: UObject,PathStart: Vector,GoalActor: Actor,TetherDistance: number,PathfindingContext: Actor,FilterClass: UnrealEngineClass): NavigationPath;
+	static C(Other: UObject | any): NavigationSystemV1;
 }
 
-declare class AsyncTask_LoadXRDeviceVisComponent extends BlueprintAsyncActionBase { 
-	OnModelLoaded: UnrealEngineMulticastDelegate<(LoadedComponent: PrimitiveComponent) => void>;
-	OnLoadFailure: UnrealEngineMulticastDelegate<(LoadedComponent: PrimitiveComponent) => void>;
-	SpawnedComponent: PrimitiveComponent;
-	static Load(ResourceName: string): AsyncTask_LoadXRDeviceVisComponent;
-	static Find(Outer: UObject, ResourceName: string): AsyncTask_LoadXRDeviceVisComponent;
-	static GetDefaultObject(): AsyncTask_LoadXRDeviceVisComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AsyncTask_LoadXRDeviceVisComponent;
-	static AddNamedDeviceVisualizationComponentAsync(Target: Actor,SystemName: string,DeviceName: string,bManualAttachment: boolean,RelativeTransform: Transform,XRDeviceId?: XRDeviceId,NewComponent?: PrimitiveComponent): {XRDeviceId: XRDeviceId, NewComponent: PrimitiveComponent, $: AsyncTask_LoadXRDeviceVisComponent};
-	static AddDeviceVisualizationComponentAsync(Target: Actor,XRDeviceId: XRDeviceId,bManualAttachment: boolean,RelativeTransform: Transform,NewComponent?: PrimitiveComponent): {NewComponent: PrimitiveComponent, $: AsyncTask_LoadXRDeviceVisComponent};
-	static C(Other: UObject | any): AsyncTask_LoadXRDeviceVisComponent;
+declare class NavigationSystemModuleConfig extends NavigationSystemConfig { 
+	bStrictlyStatic: boolean;
+	bCreateOnClient: boolean;
+	bAutoSpawnMissingNavData: boolean;
+	bSpawnNavDataInNavBoundsLevel: boolean;
+	static Load(ResourceName: string): NavigationSystemModuleConfig;
+	static Find(Outer: UObject, ResourceName: string): NavigationSystemModuleConfig;
+	static GetDefaultObject(): NavigationSystemModuleConfig;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationSystemModuleConfig;
+	static C(Other: UObject | any): NavigationSystemModuleConfig;
 }
 
-declare class PreviewSceneProfile { 
-	ProfileName: string;
-	bSharedProfile: boolean;
-	DirectionalLightIntensity: number;
-	DirectionalLightColor: LinearColor;
-	SkyLightIntensity: number;
-	bRotateLightingRig: boolean;
-	bShowEnvironment: boolean;
-	bShowFloor: boolean;
-	EnvironmentColor: LinearColor;
-	EnvironmentIntensity: number;
-	EnvironmentCubeMap: TextureCube;
-	EnvironmentCubeMapPath: string;
-	PostProcessingSettings: PostProcessSettings;
-	bPostProcessingEnabled: boolean;
-	LightingRigRotation: number;
-	RotationSpeed: number;
-	DirectionalLightRotation: Rotator;
-	clone() : PreviewSceneProfile;
-	static C(Other: UObject | any): PreviewSceneProfile;
+declare class NavTestRenderingComponent extends PrimitiveComponent { 
+	static Load(ResourceName: string): NavTestRenderingComponent;
+	static Find(Outer: UObject, ResourceName: string): NavTestRenderingComponent;
+	static GetDefaultObject(): NavTestRenderingComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavTestRenderingComponent;
+	static C(Other: UObject | any): NavTestRenderingComponent;
 }
 
-declare class LocalProfiles extends UObject { 
-	Profiles: PreviewSceneProfile[];
-	static Load(ResourceName: string): LocalProfiles;
-	static Find(Outer: UObject, ResourceName: string): LocalProfiles;
-	static GetDefaultObject(): LocalProfiles;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocalProfiles;
-	static C(Other: UObject | any): LocalProfiles;
+declare type ENavCostDisplay = 'TotalCost' | 'HeuristicOnly' | 'RealCostOnly' | 'ENavCostDisplay_MAX';
+declare var ENavCostDisplay : { TotalCost:'TotalCost',HeuristicOnly:'HeuristicOnly',RealCostOnly:'RealCostOnly',ENavCostDisplay_MAX:'ENavCostDisplay_MAX', };
+declare class NavigationTestingActor extends Actor { 
+	CapsuleComponent: CapsuleComponent;
+	EdRenderComp: NavTestRenderingComponent;
+	InvokerComponent: NavigationInvokerComponent;
+	bActAsNavigationInvoker: boolean;
+	NavAgentProps: NavAgentProperties;
+	QueryingExtent: Vector;
+	MyNavData: NavigationData;
+	ProjectedLocation: Vector;
+	bProjectedLocationValid: boolean;
+	bSearchStart: boolean;
+	bBacktracking: boolean;
+	bUseHierarchicalPathfinding: boolean;
+	bGatherDetailedInfo: boolean;
+	bDrawDistanceToWall: boolean;
+	bShowNodePool: boolean;
+	bShowBestPath: boolean;
+	bShowDiffWithPreviousStep: boolean;
+	bShouldBeVisibleInGame: boolean;
+	CostDisplayMode: ENavCostDisplay;
+	TextCanvasOffset: Vector2D;
+	bPathExist: boolean;
+	bPathIsPartial: boolean;
+	bPathSearchOutOfNodes: boolean;
+	PathfindingTime: number;
+	PathCost: number;
+	PathfindingSteps: number;
+	OtherActor: NavigationTestingActor;
+	FilterClass: UnrealEngineClass;
+	ShowStepIndex: number;
+	OffsetFromCornersDistance: number;
+	static GetDefaultObject(): NavigationTestingActor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationTestingActor;
+	static C(Other: UObject | any): NavigationTestingActor;
 }
 
-declare class SharedProfiles extends UObject { 
-	Profiles: PreviewSceneProfile[];
-	static Load(ResourceName: string): SharedProfiles;
-	static Find(Outer: UObject, ResourceName: string): SharedProfiles;
-	static GetDefaultObject(): SharedProfiles;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SharedProfiles;
-	static C(Other: UObject | any): SharedProfiles;
+declare type ENavLinkDirection = 'BothWays' | 'LeftToRight' | 'RightToLeft' | 'ENavLinkDirection_MAX';
+declare var ENavLinkDirection : { BothWays:'BothWays',LeftToRight:'LeftToRight',RightToLeft:'RightToLeft',ENavLinkDirection_MAX:'ENavLinkDirection_MAX', };
+declare class NavigationLinkBase { 
+	LeftProjectHeight: number;
+	MaxFallDownLength: number;
+	Direction: ENavLinkDirection;
+	SnapRadius: number;
+	SnapHeight: number;
+	SupportedAgents: NavAgentSelector;
+	bSupportsAgent0: boolean;
+	bSupportsAgent1: boolean;
+	bSupportsAgent2: boolean;
+	bSupportsAgent3: boolean;
+	bSupportsAgent4: boolean;
+	bSupportsAgent5: boolean;
+	bSupportsAgent6: boolean;
+	bSupportsAgent7: boolean;
+	bSupportsAgent8: boolean;
+	bSupportsAgent9: boolean;
+	bSupportsAgent10: boolean;
+	bSupportsAgent11: boolean;
+	bSupportsAgent12: boolean;
+	bSupportsAgent13: boolean;
+	bSupportsAgent14: boolean;
+	bSupportsAgent15: boolean;
+	Description: string;
+	bUseSnapHeight: boolean;
+	bSnapToCheapestArea: boolean;
+	bCustomFlag0: boolean;
+	bCustomFlag1: boolean;
+	bCustomFlag2: boolean;
+	bCustomFlag3: boolean;
+	bCustomFlag4: boolean;
+	bCustomFlag5: boolean;
+	bCustomFlag6: boolean;
+	bCustomFlag7: boolean;
+	AreaClass: UnrealEngineClass;
+	clone() : NavigationLinkBase;
+	static C(Other: UObject | any): NavigationLinkBase;
 }
 
-declare class AssetViewerSettings extends UObject { 
-	Profiles: PreviewSceneProfile[];
-	static Load(ResourceName: string): AssetViewerSettings;
-	static Find(Outer: UObject, ResourceName: string): AssetViewerSettings;
-	static GetDefaultObject(): AssetViewerSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetViewerSettings;
-	static C(Other: UObject | any): AssetViewerSettings;
+declare class NavigationLink extends NavigationLinkBase { 
+	Left: Vector;
+	Right: Vector;
+	clone() : NavigationLink;
+	static C(Other: UObject | any): NavigationLink;
 }
 
-declare class Manipulator extends Actor { 
-	AssociatedComponent: SceneComponent;
-	StaticMeshComponent: StaticMeshComponent;
-	static GetDefaultObject(): Manipulator;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Manipulator;
-	static C(Other: UObject | any): Manipulator;
+declare class NavLinkComponent extends PrimitiveComponent { 
+	Links: NavigationLink[];
+	static Load(ResourceName: string): NavLinkComponent;
+	static Find(Outer: UObject, ResourceName: string): NavLinkComponent;
+	static GetDefaultObject(): NavLinkComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkComponent;
+	static C(Other: UObject | any): NavLinkComponent;
 }
 
-declare class GameplayTask_ClaimResource extends GameplayTask { 
-	static Load(ResourceName: string): GameplayTask_ClaimResource;
-	static Find(Outer: UObject, ResourceName: string): GameplayTask_ClaimResource;
-	static GetDefaultObject(): GameplayTask_ClaimResource;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTask_ClaimResource;
-	static C(Other: UObject | any): GameplayTask_ClaimResource;
+declare class NavRelevantComponent extends ActorComponent { 
+	bAttachToOwnersRoot: boolean;
+	CachedNavParent: UObject;
+	static Load(ResourceName: string): NavRelevantComponent;
+	static Find(Outer: UObject, ResourceName: string): NavRelevantComponent;
+	static GetDefaultObject(): NavRelevantComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavRelevantComponent;
+	SetNavigationRelevancy(bRelevant: boolean): void;
+	static C(Other: UObject | any): NavRelevantComponent;
 }
 
-declare class GameplayTask_SpawnActor extends GameplayTask { 
-	Success: UnrealEngineMulticastDelegate<(SpawnedActor: Actor) => void>;
-	DidNotSpawn: UnrealEngineMulticastDelegate<(SpawnedActor: Actor) => void>;
-	ClassToSpawn: UnrealEngineClass;
-	static Load(ResourceName: string): GameplayTask_SpawnActor;
-	static Find(Outer: UObject, ResourceName: string): GameplayTask_SpawnActor;
-	static GetDefaultObject(): GameplayTask_SpawnActor;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTask_SpawnActor;
-	FinishSpawningActor(WorldContextObject: UObject,SpawnedActor: Actor): void;
-	BeginSpawningActor(WorldContextObject: UObject,SpawnedActor?: Actor): {SpawnedActor: Actor, $: boolean};
-	static C(Other: UObject | any): GameplayTask_SpawnActor;
+declare class NavLinkCustomComponent extends NavRelevantComponent { 
+	NavLinkUserId: any;
+	EnabledAreaClass: UnrealEngineClass;
+	DisabledAreaClass: UnrealEngineClass;
+	SupportedAgents: NavAgentSelector;
+	LinkRelativeStart: Vector;
+	LinkRelativeEnd: Vector;
+	LinkDirection: ENavLinkDirection;
+	bLinkEnabled: boolean;
+	bNotifyWhenEnabled: boolean;
+	bNotifyWhenDisabled: boolean;
+	bCreateBoxObstacle: boolean;
+	ObstacleOffset: Vector;
+	ObstacleExtent: Vector;
+	ObstacleAreaClass: UnrealEngineClass;
+	BroadcastRadius: number;
+	BroadcastInterval: number;
+	BroadcastChannel: ECollisionChannel;
+	static Load(ResourceName: string): NavLinkCustomComponent;
+	static Find(Outer: UObject, ResourceName: string): NavLinkCustomComponent;
+	static GetDefaultObject(): NavLinkCustomComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkCustomComponent;
+	static C(Other: UObject | any): NavLinkCustomComponent;
 }
 
-declare class GameplayTask_TimeLimitedExecution extends GameplayTask { 
-	OnFinished: UnrealEngineMulticastDelegate<() => void>;
-	OnTimeExpired: UnrealEngineMulticastDelegate<() => void>;
-	static Load(ResourceName: string): GameplayTask_TimeLimitedExecution;
-	static Find(Outer: UObject, ResourceName: string): GameplayTask_TimeLimitedExecution;
-	static GetDefaultObject(): GameplayTask_TimeLimitedExecution;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTask_TimeLimitedExecution;
-	static C(Other: UObject | any): GameplayTask_TimeLimitedExecution;
+declare class NavLinkCustomInterface extends Interface { 
+	static Load(ResourceName: string): NavLinkCustomInterface;
+	static Find(Outer: UObject, ResourceName: string): NavLinkCustomInterface;
+	static GetDefaultObject(): NavLinkCustomInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkCustomInterface;
+	static C(Other: UObject | any): NavLinkCustomInterface;
 }
 
-declare class GameplayTask_WaitDelay extends GameplayTask { 
-	OnFinish: UnrealEngineMulticastDelegate<() => void>;
-	static Load(ResourceName: string): GameplayTask_WaitDelay;
-	static Find(Outer: UObject, ResourceName: string): GameplayTask_WaitDelay;
-	static GetDefaultObject(): GameplayTask_WaitDelay;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTask_WaitDelay;
-	static C(Other: UObject | any): GameplayTask_WaitDelay;
+declare class NavLinkHostInterface extends Interface { 
+	static Load(ResourceName: string): NavLinkHostInterface;
+	static Find(Outer: UObject, ResourceName: string): NavLinkHostInterface;
+	static GetDefaultObject(): NavLinkHostInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkHostInterface;
+	static C(Other: UObject | any): NavLinkHostInterface;
 }
 
-declare class GameplayTaskOwnerInterface extends Interface { 
-	static Load(ResourceName: string): GameplayTaskOwnerInterface;
-	static Find(Outer: UObject, ResourceName: string): GameplayTaskOwnerInterface;
-	static GetDefaultObject(): GameplayTaskOwnerInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTaskOwnerInterface;
-	static C(Other: UObject | any): GameplayTaskOwnerInterface;
+declare class NavLinkRenderingComponent extends PrimitiveComponent { 
+	static Load(ResourceName: string): NavLinkRenderingComponent;
+	static Find(Outer: UObject, ResourceName: string): NavLinkRenderingComponent;
+	static GetDefaultObject(): NavLinkRenderingComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkRenderingComponent;
+	static C(Other: UObject | any): NavLinkRenderingComponent;
 }
 
-declare class BlueprintGameplayTagLibrary extends BlueprintFunctionLibrary { 
-	static Load(ResourceName: string): BlueprintGameplayTagLibrary;
-	static Find(Outer: UObject, ResourceName: string): BlueprintGameplayTagLibrary;
-	static GetDefaultObject(): BlueprintGameplayTagLibrary;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintGameplayTagLibrary;
-	static RemoveGameplayTag(TagContainer?: GameplayTagContainer,Tag?: GameplayTag): {TagContainer: GameplayTagContainer, $: boolean};
-	static NotEqual_TagTag(A: GameplayTag,B: string): boolean;
-	static NotEqual_TagContainerTagContainer(A: GameplayTagContainer,B: string): boolean;
-	static NotEqual_GameplayTagContainer(A: GameplayTagContainer,B: GameplayTagContainer): boolean;
-	static NotEqual_GameplayTag(A: GameplayTag,B: GameplayTag): boolean;
-	static MatchesTag(TagOne: GameplayTag,TagTwo: GameplayTag,bExactMatch: boolean): boolean;
-	static MatchesAnyTags(TagOne: GameplayTag,OtherContainer: GameplayTagContainer,bExactMatch: boolean): boolean;
-	static MakeLiteralGameplayTagContainer(Value: GameplayTagContainer): GameplayTagContainer;
-	static MakeLiteralGameplayTag(Value: GameplayTag): GameplayTag;
-	static MakeGameplayTagQuery(TagQuery: GameplayTagQuery): GameplayTagQuery;
-	static MakeGameplayTagContainerFromTag(SingleTag: GameplayTag): GameplayTagContainer;
-	static MakeGameplayTagContainerFromArray(GameplayTags: GameplayTag[]): GameplayTagContainer;
-	static IsGameplayTagValid(GameplayTag: GameplayTag): boolean;
-	static HasTag(TagContainer: GameplayTagContainer,Tag: GameplayTag,bExactMatch: boolean): boolean;
-	static HasAnyTags(TagContainer: GameplayTagContainer,OtherContainer: GameplayTagContainer,bExactMatch: boolean): boolean;
-	static HasAllTags(TagContainer: GameplayTagContainer,OtherContainer: GameplayTagContainer,bExactMatch: boolean): boolean;
-	static GetTagName(GameplayTag: GameplayTag): string;
-	static GetNumGameplayTagsInContainer(TagContainer: GameplayTagContainer): number;
-	static GetDebugStringFromGameplayTagContainer(TagContainer: GameplayTagContainer): string;
-	static GetDebugStringFromGameplayTag(GameplayTag: GameplayTag): string;
-	static GetAllActorsOfClassMatchingTagQuery(WorldContextObject: UObject,ActorClass: UnrealEngineClass,GameplayTagQuery: GameplayTagQuery,OutActors?: Actor[]): {OutActors: Actor[]};
-	static EqualEqual_GameplayTagContainer(A: GameplayTagContainer,B: GameplayTagContainer): boolean;
-	static EqualEqual_GameplayTag(A: GameplayTag,B: GameplayTag): boolean;
-	static DoesContainerMatchTagQuery(TagContainer: GameplayTagContainer,TagQuery: GameplayTagQuery): boolean;
-	static BreakGameplayTagContainer(GameplayTagContainer: GameplayTagContainer,GameplayTags?: GameplayTag[]): {GameplayTags: GameplayTag[]};
-	static AppendGameplayTagContainers(InOutTagContainer?: GameplayTagContainer,InTagContainer?: GameplayTagContainer): {InOutTagContainer: GameplayTagContainer};
-	static AddGameplayTag(TagContainer?: GameplayTagContainer,Tag?: GameplayTag): {TagContainer: GameplayTagContainer};
-	static C(Other: UObject | any): BlueprintGameplayTagLibrary;
+declare class NavigationSegmentLink extends NavigationLinkBase { 
+	LeftStart: Vector;
+	LeftEnd: Vector;
+	RightStart: Vector;
+	RightEnd: Vector;
+	clone() : NavigationSegmentLink;
+	static C(Other: UObject | any): NavigationSegmentLink;
 }
 
-declare class GameplayTagAssetInterface extends Interface { 
-	static Load(ResourceName: string): GameplayTagAssetInterface;
-	static Find(Outer: UObject, ResourceName: string): GameplayTagAssetInterface;
-	static GetDefaultObject(): GameplayTagAssetInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagAssetInterface;
-	HasMatchingGameplayTag(TagToCheck: GameplayTag): boolean;
-	HasAnyMatchingGameplayTags(TagContainer: GameplayTagContainer): boolean;
-	HasAllMatchingGameplayTags(TagContainer: GameplayTagContainer): boolean;
-	GetOwnedGameplayTags(TagContainer?: GameplayTagContainer): {TagContainer: GameplayTagContainer};
-	static C(Other: UObject | any): GameplayTagAssetInterface;
+declare class NavLinkDefinition extends UObject { 
+	Links: NavigationLink[];
+	SegmentLinks: NavigationSegmentLink[];
+	static Load(ResourceName: string): NavLinkDefinition;
+	static Find(Outer: UObject, ResourceName: string): NavLinkDefinition;
+	static GetDefaultObject(): NavLinkDefinition;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkDefinition;
+	static C(Other: UObject | any): NavLinkDefinition;
 }
 
-declare class EditableGameplayTagQueryExpression extends UObject { 
-	static Load(ResourceName: string): EditableGameplayTagQueryExpression;
-	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQueryExpression;
-	static GetDefaultObject(): EditableGameplayTagQueryExpression;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQueryExpression;
-	static C(Other: UObject | any): EditableGameplayTagQueryExpression;
+declare class NavLinkTrivial extends NavLinkDefinition { 
+	static Load(ResourceName: string): NavLinkTrivial;
+	static Find(Outer: UObject, ResourceName: string): NavLinkTrivial;
+	static GetDefaultObject(): NavLinkTrivial;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkTrivial;
+	static C(Other: UObject | any): NavLinkTrivial;
 }
 
-declare class EditableGameplayTagQuery extends UObject { 
-	UserDescription: string;
-	RootExpression: EditableGameplayTagQueryExpression;
-	TagQueryExportText_Helper: GameplayTagQuery;
-	static Load(ResourceName: string): EditableGameplayTagQuery;
-	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQuery;
-	static GetDefaultObject(): EditableGameplayTagQuery;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQuery;
-	static C(Other: UObject | any): EditableGameplayTagQuery;
+declare class NavMeshRenderingComponent extends PrimitiveComponent { 
+	static Load(ResourceName: string): NavMeshRenderingComponent;
+	static Find(Outer: UObject, ResourceName: string): NavMeshRenderingComponent;
+	static GetDefaultObject(): NavMeshRenderingComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavMeshRenderingComponent;
+	static C(Other: UObject | any): NavMeshRenderingComponent;
 }
 
-declare class EditableGameplayTagQueryExpression_AnyTagsMatch extends EditableGameplayTagQueryExpression { 
-	Tags: GameplayTagContainer;
-	static Load(ResourceName: string): EditableGameplayTagQueryExpression_AnyTagsMatch;
-	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQueryExpression_AnyTagsMatch;
-	static GetDefaultObject(): EditableGameplayTagQueryExpression_AnyTagsMatch;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQueryExpression_AnyTagsMatch;
-	static C(Other: UObject | any): EditableGameplayTagQueryExpression_AnyTagsMatch;
+declare class NavModifierComponent extends NavRelevantComponent { 
+	AreaClass: UnrealEngineClass;
+	FailsafeExtent: Vector;
+	bIncludeAgentHeight: boolean;
+	static Load(ResourceName: string): NavModifierComponent;
+	static Find(Outer: UObject, ResourceName: string): NavModifierComponent;
+	static GetDefaultObject(): NavModifierComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavModifierComponent;
+	SetAreaClass(NewAreaClass: UnrealEngineClass): void;
+	static C(Other: UObject | any): NavModifierComponent;
 }
 
-declare class EditableGameplayTagQueryExpression_AllTagsMatch extends EditableGameplayTagQueryExpression { 
-	Tags: GameplayTagContainer;
-	static Load(ResourceName: string): EditableGameplayTagQueryExpression_AllTagsMatch;
-	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQueryExpression_AllTagsMatch;
-	static GetDefaultObject(): EditableGameplayTagQueryExpression_AllTagsMatch;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQueryExpression_AllTagsMatch;
-	static C(Other: UObject | any): EditableGameplayTagQueryExpression_AllTagsMatch;
+declare class NavModifierVolume extends Volume { 
+	AreaClass: UnrealEngineClass;
+	static GetDefaultObject(): NavModifierVolume;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavModifierVolume;
+	SetAreaClass(NewAreaClass: UnrealEngineClass): void;
+	static C(Other: UObject | any): NavModifierVolume;
 }
 
-declare class EditableGameplayTagQueryExpression_NoTagsMatch extends EditableGameplayTagQueryExpression { 
-	Tags: GameplayTagContainer;
-	static Load(ResourceName: string): EditableGameplayTagQueryExpression_NoTagsMatch;
-	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQueryExpression_NoTagsMatch;
-	static GetDefaultObject(): EditableGameplayTagQueryExpression_NoTagsMatch;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQueryExpression_NoTagsMatch;
-	static C(Other: UObject | any): EditableGameplayTagQueryExpression_NoTagsMatch;
+declare class NavNodeInterface extends Interface { 
+	static Load(ResourceName: string): NavNodeInterface;
+	static Find(Outer: UObject, ResourceName: string): NavNodeInterface;
+	static GetDefaultObject(): NavNodeInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavNodeInterface;
+	static C(Other: UObject | any): NavNodeInterface;
 }
 
-declare class EditableGameplayTagQueryExpression_AnyExprMatch extends EditableGameplayTagQueryExpression { 
-	Expressions: EditableGameplayTagQueryExpression[];
-	static Load(ResourceName: string): EditableGameplayTagQueryExpression_AnyExprMatch;
-	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQueryExpression_AnyExprMatch;
-	static GetDefaultObject(): EditableGameplayTagQueryExpression_AnyExprMatch;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQueryExpression_AnyExprMatch;
-	static C(Other: UObject | any): EditableGameplayTagQueryExpression_AnyExprMatch;
+declare class NavSystemConfigOverride extends Actor { 
+	SpriteComponent: BillboardComponent;
+	NavigationSystemConfig: NavigationSystemConfig;
+	bLoadOnClient: boolean;
+	static GetDefaultObject(): NavSystemConfigOverride;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavSystemConfigOverride;
+	ApplyChanges(): void;
+	static C(Other: UObject | any): NavSystemConfigOverride;
 }
 
-declare class EditableGameplayTagQueryExpression_AllExprMatch extends EditableGameplayTagQueryExpression { 
-	Expressions: EditableGameplayTagQueryExpression[];
-	static Load(ResourceName: string): EditableGameplayTagQueryExpression_AllExprMatch;
-	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQueryExpression_AllExprMatch;
-	static GetDefaultObject(): EditableGameplayTagQueryExpression_AllExprMatch;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQueryExpression_AllExprMatch;
-	static C(Other: UObject | any): EditableGameplayTagQueryExpression_AllExprMatch;
+declare class RecastFilter_UseDefaultArea extends NavigationQueryFilter { 
+	static Load(ResourceName: string): RecastFilter_UseDefaultArea;
+	static Find(Outer: UObject, ResourceName: string): RecastFilter_UseDefaultArea;
+	static GetDefaultObject(): RecastFilter_UseDefaultArea;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RecastFilter_UseDefaultArea;
+	static C(Other: UObject | any): RecastFilter_UseDefaultArea;
 }
 
-declare class EditableGameplayTagQueryExpression_NoExprMatch extends EditableGameplayTagQueryExpression { 
-	Expressions: EditableGameplayTagQueryExpression[];
-	static Load(ResourceName: string): EditableGameplayTagQueryExpression_NoExprMatch;
-	static Find(Outer: UObject, ResourceName: string): EditableGameplayTagQueryExpression_NoExprMatch;
-	static GetDefaultObject(): EditableGameplayTagQueryExpression_NoExprMatch;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGameplayTagQueryExpression_NoExprMatch;
-	static C(Other: UObject | any): EditableGameplayTagQueryExpression_NoExprMatch;
+declare class RecastNavMeshDataChunk extends NavigationDataChunk { 
+	static Load(ResourceName: string): RecastNavMeshDataChunk;
+	static Find(Outer: UObject, ResourceName: string): RecastNavMeshDataChunk;
+	static GetDefaultObject(): RecastNavMeshDataChunk;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RecastNavMeshDataChunk;
+	static C(Other: UObject | any): RecastNavMeshDataChunk;
 }
 
-declare type EGameplayTagSourceType = 'Native' | 'DefaultTagList' | 'TagList' | 'RestrictedTagList' | 'DataTable' | 'Invalid' | 'EGameplayTagSourceType_MAX';
-declare var EGameplayTagSourceType : { Native:'Native',DefaultTagList:'DefaultTagList',TagList:'TagList',RestrictedTagList:'RestrictedTagList',DataTable:'DataTable',Invalid:'Invalid',EGameplayTagSourceType_MAX:'EGameplayTagSourceType_MAX', };
-declare class TableRowBase { 
-	clone() : TableRowBase;
-	static C(Other: UObject | any): TableRowBase;
+declare class PIEPreviewSettings extends UObject { 
+	WindowPosX: number;
+	WindowPosY: number;
+	WindowScalingFactor: number;
+	static Load(ResourceName: string): PIEPreviewSettings;
+	static Find(Outer: UObject, ResourceName: string): PIEPreviewSettings;
+	static GetDefaultObject(): PIEPreviewSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PIEPreviewSettings;
+	static C(Other: UObject | any): PIEPreviewSettings;
 }
 
-declare class GameplayTagTableRow extends TableRowBase { 
-	Tag: string;
-	DevComment: string;
-	clone() : GameplayTagTableRow;
-	static C(Other: UObject | any): GameplayTagTableRow;
+declare class ClothingAssetCustomData extends UObject { 
+	static Load(ResourceName: string): ClothingAssetCustomData;
+	static Find(Outer: UObject, ResourceName: string): ClothingAssetCustomData;
+	static GetDefaultObject(): ClothingAssetCustomData;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingAssetCustomData;
+	static C(Other: UObject | any): ClothingAssetCustomData;
 }
 
-declare class GameplayTagsList extends UObject { 
-	ConfigFileName: string;
-	GameplayTagList: GameplayTagTableRow[];
-	static Load(ResourceName: string): GameplayTagsList;
-	static Find(Outer: UObject, ResourceName: string): GameplayTagsList;
-	static GetDefaultObject(): GameplayTagsList;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsList;
-	static C(Other: UObject | any): GameplayTagsList;
+declare type EClothingWindMethod = 'Legacy' | 'Accurate' | 'EClothingWindMethod_MAX';
+declare var EClothingWindMethod : { Legacy:'Legacy',Accurate:'Accurate',EClothingWindMethod_MAX:'EClothingWindMethod_MAX', };
+declare class ClothConstraintSetup { 
+	Stiffness: number;
+	StiffnessMultiplier: number;
+	StretchLimit: number;
+	CompressionLimit: number;
+	clone() : ClothConstraintSetup;
+	static C(Other: UObject | any): ClothConstraintSetup;
 }
 
-declare class RestrictedGameplayTagTableRow extends GameplayTagTableRow { 
-	bAllowNonRestrictedChildren: boolean;
-	clone() : RestrictedGameplayTagTableRow;
-	static C(Other: UObject | any): RestrictedGameplayTagTableRow;
+declare class ClothConfig { 
+	WindMethod: EClothingWindMethod;
+	VerticalConstraintConfig: ClothConstraintSetup;
+	HorizontalConstraintConfig: ClothConstraintSetup;
+	BendConstraintConfig: ClothConstraintSetup;
+	ShearConstraintConfig: ClothConstraintSetup;
+	SelfCollisionRadius: number;
+	SelfCollisionStiffness: number;
+	SelfCollisionCullScale: number;
+	Damping: Vector;
+	Friction: number;
+	WindDragCoefficient: number;
+	WindLiftCoefficient: number;
+	LinearDrag: Vector;
+	AngularDrag: Vector;
+	LinearInertiaScale: Vector;
+	AngularInertiaScale: Vector;
+	CentrifugalInertiaScale: Vector;
+	SolverFrequency: number;
+	StiffnessFrequency: number;
+	GravityScale: number;
+	GravityOverride: Vector;
+	bUseGravityOverride: boolean;
+	TetherStiffness: number;
+	TetherLimit: number;
+	CollisionThickness: number;
+	AnimDriveSpringStiffness: number;
+	AnimDriveDamperStiffness: number;
+	clone() : ClothConfig;
+	static C(Other: UObject | any): ClothConfig;
 }
 
-declare class RestrictedGameplayTagsList extends UObject { 
-	ConfigFileName: string;
-	RestrictedGameplayTagList: RestrictedGameplayTagTableRow[];
-	static Load(ResourceName: string): RestrictedGameplayTagsList;
-	static Find(Outer: UObject, ResourceName: string): RestrictedGameplayTagsList;
-	static GetDefaultObject(): RestrictedGameplayTagsList;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RestrictedGameplayTagsList;
-	static C(Other: UObject | any): RestrictedGameplayTagsList;
+declare class ClothVertBoneData { 
+	NumInfluences: number;
+	BoneIndices: any;
+	BoneWeights: number;
+	clone() : ClothVertBoneData;
+	static C(Other: UObject | any): ClothVertBoneData;
 }
 
-declare class GameplayTagSource { 
-	SourceName: string;
-	SourceType: EGameplayTagSourceType;
-	SourceTagList: GameplayTagsList;
-	SourceRestrictedTagList: RestrictedGameplayTagsList;
-	clone() : GameplayTagSource;
-	static C(Other: UObject | any): GameplayTagSource;
+declare class ClothPhysicalMeshData { 
+	Vertices: Vector[];
+	Normals: Vector[];
+	VertexColors: Color[];
+	Indices: any[];
+	MaxDistances: number[];
+	BackstopDistances: number[];
+	BackstopRadiuses: number[];
+	AnimDriveMultipliers: number[];
+	InverseMasses: number[];
+	BoneData: ClothVertBoneData[];
+	MaxBoneWeights: number;
+	NumFixedVerts: number;
+	SelfCollisionIndices: any[];
+	clone() : ClothPhysicalMeshData;
+	static C(Other: UObject | any): ClothPhysicalMeshData;
 }
 
-declare class DataTable extends UObject { 
-	RowStruct: ScriptStruct;
-	bStripFromClientBuilds: boolean;
-	AssetImportData: AssetImportData;
-	ImportPath: string;
-	RowStructName: string;
-	RowsSerializedWithTags: number[];
-	TemporarilyReferencedObjects: any;
-	static Load(ResourceName: string): DataTable;
-	static Find(Outer: UObject, ResourceName: string): DataTable;
-	static GetDefaultObject(): DataTable;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DataTable;
-	static C(Other: UObject | any): DataTable;
-	DoesDataTableRowExist(RowName: string): boolean;
-	FillDataTableFromCSVFile(CSVFilePath: string): boolean;
-	FillDataTableFromCSVString(CSVString: string): boolean;
-	FillDataTableFromJSONFile(JSONFilePath: string): boolean;
-	FillDataTableFromJSONString(JsonString: string): boolean;
-	GetDataTableColumnAsString(PropertyName: string): string[];
-	GetDataTableRowFromName(RowName: string,OutRow?: TableRowBase): {OutRow: TableRowBase, $: boolean};
-	GetDataTableRowNames(OutRowNames?: string[]): {OutRowNames: string[]};
-	static DoesDataTableRowExist(Table: DataTable,RowName: string): boolean;
-	static FillDataTableFromCSVFile(DataTable: DataTable,CSVFilePath: string): boolean;
-	static FillDataTableFromCSVString(DataTable: DataTable,CSVString: string): boolean;
-	static FillDataTableFromJSONFile(DataTable: DataTable,JSONFilePath: string): boolean;
-	static FillDataTableFromJSONString(DataTable: DataTable,JsonString: string): boolean;
-	static GetDataTableColumnAsString(DataTable: DataTable,PropertyName: string): string[];
-	static GetDataTableRowFromName(Table: DataTable,RowName: string,OutRow?: TableRowBase): {OutRow: TableRowBase, $: boolean};
-	static GetDataTableRowNames(Table: DataTable,OutRowNames?: string[]): {OutRowNames: string[]};
+declare class ClothCollisionPrim_Sphere { 
+	BoneIndex: number;
+	Radius: number;
+	LocalPosition: Vector;
+	clone() : ClothCollisionPrim_Sphere;
+	static C(Other: UObject | any): ClothCollisionPrim_Sphere;
 }
 
-declare class GameplayTagsManager extends UObject { 
-	TagSources: GameplayTagSource[];
-	RestrictedGameplayTagTables: DataTable[];
-	GameplayTagTables: DataTable[];
-	static Load(ResourceName: string): GameplayTagsManager;
-	static Find(Outer: UObject, ResourceName: string): GameplayTagsManager;
-	static GetDefaultObject(): GameplayTagsManager;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsManager;
-	static C(Other: UObject | any): GameplayTagsManager;
+declare class ClothCollisionPrim_SphereConnection { 
+	SphereIndices: number;
+	clone() : ClothCollisionPrim_SphereConnection;
+	static C(Other: UObject | any): ClothCollisionPrim_SphereConnection;
 }
 
-declare class GameplayTagCategoryRemap { 
-	BaseCategory: string;
-	RemapCategories: string[];
-	clone() : GameplayTagCategoryRemap;
-	static C(Other: UObject | any): GameplayTagCategoryRemap;
+declare class ClothCollisionPrim_Convex { 
+	Planes: Plane[];
+	BoneIndex: number;
+	clone() : ClothCollisionPrim_Convex;
+	static C(Other: UObject | any): ClothCollisionPrim_Convex;
 }
 
-declare class GameplayTagRedirect { 
-	OldTagName: string;
-	NewTagName: string;
-	clone() : GameplayTagRedirect;
-	static C(Other: UObject | any): GameplayTagRedirect;
+declare class ClothCollisionData { 
+	Spheres: ClothCollisionPrim_Sphere[];
+	SphereConnections: ClothCollisionPrim_SphereConnection[];
+	Convexes: ClothCollisionPrim_Convex[];
+	clone() : ClothCollisionData;
+	static C(Other: UObject | any): ClothCollisionData;
 }
 
-declare class RestrictedConfigInfo { 
-	RestrictedConfigName: string;
-	Owners: string[];
-	clone() : RestrictedConfigInfo;
-	static C(Other: UObject | any): RestrictedConfigInfo;
+declare type MaskTarget_PhysMesh = 'None' | 'MaxDistance' | 'BackstopDistance' | 'BackstopRadius' | 'AnimDriveMultiplier' | 'MaskTarget_MAX';
+declare var MaskTarget_PhysMesh : { None:'None',MaxDistance:'MaxDistance',BackstopDistance:'BackstopDistance',BackstopRadius:'BackstopRadius',AnimDriveMultiplier:'AnimDriveMultiplier',MaskTarget_MAX:'MaskTarget_MAX', };
+declare class ClothParameterMask_PhysMesh { 
+	MaskName: string;
+	CurrentTarget: MaskTarget_PhysMesh;
+	MaxValue: number;
+	MinValue: number;
+	Values: number[];
+	bEnabled: boolean;
+	clone() : ClothParameterMask_PhysMesh;
+	static C(Other: UObject | any): ClothParameterMask_PhysMesh;
 }
 
-declare class GameplayTagsSettings extends GameplayTagsList { 
-	ImportTagsFromConfig: boolean;
-	WarnOnInvalidTags: boolean;
-	CategoryRemapping: GameplayTagCategoryRemap[];
-	FastReplication: boolean;
-	GameplayTagTableList: SoftObjectPath[];
-	GameplayTagRedirects: GameplayTagRedirect[];
-	CommonlyReplicatedTags: string[];
-	NumBitsForContainerSize: number;
-	NetIndexFirstBitSegment: number;
-	RestrictedConfigFiles: RestrictedConfigInfo[];
-	RestrictedTagList: string;
-	static Load(ResourceName: string): GameplayTagsSettings;
-	static Find(Outer: UObject, ResourceName: string): GameplayTagsSettings;
-	static GetDefaultObject(): GameplayTagsSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsSettings;
-	static C(Other: UObject | any): GameplayTagsSettings;
+declare class ClothLODData { 
+	PhysicalMeshData: ClothPhysicalMeshData;
+	CollisionData: ClothCollisionData;
+	ParameterMasks: ClothParameterMask_PhysMesh[];
+	clone() : ClothLODData;
+	static C(Other: UObject | any): ClothLODData;
 }
 
-declare class GameplayTagsDeveloperSettings extends UObject { 
-	DeveloperConfigName: string;
-	static Load(ResourceName: string): GameplayTagsDeveloperSettings;
-	static Find(Outer: UObject, ResourceName: string): GameplayTagsDeveloperSettings;
-	static GetDefaultObject(): GameplayTagsDeveloperSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsDeveloperSettings;
-	static C(Other: UObject | any): GameplayTagsDeveloperSettings;
+declare class ClothingAsset extends ClothingAssetBase { 
+	PhysicsAsset: PhysicsAsset;
+	ClothConfig: ClothConfig;
+	LodData: ClothLODData[];
+	LodMap: number[];
+	UsedBoneNames: string[];
+	UsedBoneIndices: number[];
+	ReferenceBoneIndex: number;
+	CustomData: ClothingAssetCustomData;
+	static Load(ResourceName: string): ClothingAsset;
+	static Find(Outer: UObject, ResourceName: string): ClothingAsset;
+	static GetDefaultObject(): ClothingAsset;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingAsset;
+	static C(Other: UObject | any): ClothingAsset;
 }
 
-declare class GameplayDebuggerNetPack { 
-	clone() : GameplayDebuggerNetPack;
-	static C(Other: UObject | any): GameplayDebuggerNetPack;
+declare class ClothingSimulationFactoryNv extends ClothingSimulationFactory { 
+	static Load(ResourceName: string): ClothingSimulationFactoryNv;
+	static Find(Outer: UObject, ResourceName: string): ClothingSimulationFactoryNv;
+	static GetDefaultObject(): ClothingSimulationFactoryNv;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingSimulationFactoryNv;
+	static C(Other: UObject | any): ClothingSimulationFactoryNv;
 }
 
-declare class GameplayDebuggerDebugActor { 
-	Actor: Actor;
-	ActorName: string;
-	SyncCounter: number;
-	clone() : GameplayDebuggerDebugActor;
-	static C(Other: UObject | any): GameplayDebuggerDebugActor;
+declare class ClothingSimulationInteractorNv extends ClothingSimulationInteractor { 
+	static Load(ResourceName: string): ClothingSimulationInteractorNv;
+	static Find(Outer: UObject, ResourceName: string): ClothingSimulationInteractorNv;
+	static GetDefaultObject(): ClothingSimulationInteractorNv;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingSimulationInteractorNv;
+	SetAnimDriveSpringStiffness(InStiffness: number): void;
+	SetAnimDriveDamperStiffness(InStiffness: number): void;
+	EnableGravityOverride(InVector: Vector): void;
+	DisableGravityOverride(): void;
+	static C(Other: UObject | any): ClothingSimulationInteractorNv;
+}
+
+declare class ClothingAssetFactory extends ClothingAssetFactoryBase { 
+	static Load(ResourceName: string): ClothingAssetFactory;
+	static Find(Outer: UObject, ResourceName: string): ClothingAssetFactory;
+	static GetDefaultObject(): ClothingAssetFactory;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClothingAssetFactory;
+	static C(Other: UObject | any): ClothingAssetFactory;
 }
 
-declare class GameplayDebuggerRenderingComponent extends PrimitiveComponent { 
-	static Load(ResourceName: string): GameplayDebuggerRenderingComponent;
-	static Find(Outer: UObject, ResourceName: string): GameplayDebuggerRenderingComponent;
-	static GetDefaultObject(): GameplayDebuggerRenderingComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayDebuggerRenderingComponent;
-	static C(Other: UObject | any): GameplayDebuggerRenderingComponent;
+declare type EMovieSceneCaptureProtocolState = 'Idle' | 'Initialized' | 'Capturing' | 'Finalizing' | 'EMovieSceneCaptureProtocolState_MAX';
+declare var EMovieSceneCaptureProtocolState : { Idle:'Idle',Initialized:'Initialized',Capturing:'Capturing',Finalizing:'Finalizing',EMovieSceneCaptureProtocolState_MAX:'EMovieSceneCaptureProtocolState_MAX', };
+declare class MovieSceneCaptureProtocolBase extends UObject { 
+	State: EMovieSceneCaptureProtocolState;
+	static Load(ResourceName: string): MovieSceneCaptureProtocolBase;
+	static Find(Outer: UObject, ResourceName: string): MovieSceneCaptureProtocolBase;
+	static GetDefaultObject(): MovieSceneCaptureProtocolBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCaptureProtocolBase;
+	IsCapturing(): boolean;
+	GetState(): EMovieSceneCaptureProtocolState;
+	static C(Other: UObject | any): MovieSceneCaptureProtocolBase;
 }
 
-declare class GameplayDebuggerCategoryReplicator extends Actor { 
-	OwnerPC: PlayerController;
-	bIsEnabled: boolean;
-	ReplicatedData: GameplayDebuggerNetPack;
-	DebugActor: GameplayDebuggerDebugActor;
-	RenderingComp: GameplayDebuggerRenderingComponent;
-	static GetDefaultObject(): GameplayDebuggerCategoryReplicator;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayDebuggerCategoryReplicator;
-	ServerSetEnabled(bEnable: boolean): void;
-	ServerSetDebugActor(Actor: Actor): void;
-	ServerSetCategoryEnabled(CategoryId: number,bEnable: boolean): void;
-	ServerSendExtensionInputEvent(ExtensionId: number,HandlerId: number): void;
-	ServerSendCategoryInputEvent(CategoryId: number,HandlerId: number): void;
-	static C(Other: UObject | any): GameplayDebuggerCategoryReplicator;
-}
-
-declare type EGameplayDebuggerOverrideMode = 'Enable' | 'Disable' | 'UseDefault' | 'EGameplayDebuggerOverrideMode_MAX';
-declare var EGameplayDebuggerOverrideMode : { Enable:'Enable',Disable:'Disable',UseDefault:'UseDefault',EGameplayDebuggerOverrideMode_MAX:'EGameplayDebuggerOverrideMode_MAX', };
-declare class GameplayDebuggerInputConfig { 
-	ConfigName: string;
-	Key: Key;
-	bModShift: boolean;
-	bModCtrl: boolean;
-	bModAlt: boolean;
-	bModCmd: boolean;
-	clone() : GameplayDebuggerInputConfig;
-	static C(Other: UObject | any): GameplayDebuggerInputConfig;
+declare class MovieSceneAudioCaptureProtocolBase extends MovieSceneCaptureProtocolBase { 
+	static Load(ResourceName: string): MovieSceneAudioCaptureProtocolBase;
+	static Find(Outer: UObject, ResourceName: string): MovieSceneAudioCaptureProtocolBase;
+	static GetDefaultObject(): MovieSceneAudioCaptureProtocolBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneAudioCaptureProtocolBase;
+	static C(Other: UObject | any): MovieSceneAudioCaptureProtocolBase;
 }
 
-declare class GameplayDebuggerCategoryConfig { 
-	CategoryName: string;
-	SlotIdx: number;
-	ActiveInGame: EGameplayDebuggerOverrideMode;
-	ActiveInSimulate: EGameplayDebuggerOverrideMode;
-	Hidden: EGameplayDebuggerOverrideMode;
-	bOverrideSlotIdx: boolean;
-	InputHandlers: GameplayDebuggerInputConfig[];
-	clone() : GameplayDebuggerCategoryConfig;
-	static C(Other: UObject | any): GameplayDebuggerCategoryConfig;
-}
-
-declare class GameplayDebuggerExtensionConfig { 
-	ExtensionName: string;
-	UseExtension: EGameplayDebuggerOverrideMode;
-	InputHandlers: GameplayDebuggerInputConfig[];
-	clone() : GameplayDebuggerExtensionConfig;
-	static C(Other: UObject | any): GameplayDebuggerExtensionConfig;
-}
-
-declare class GameplayDebuggerConfig extends UObject { 
-	ActivationKey: Key;
-	CategoryRowNextKey: Key;
-	CategoryRowPrevKey: Key;
-	CategorySlot0: Key;
-	CategorySlot1: Key;
-	CategorySlot2: Key;
-	CategorySlot3: Key;
-	CategorySlot4: Key;
-	CategorySlot5: Key;
-	CategorySlot6: Key;
-	CategorySlot7: Key;
-	CategorySlot8: Key;
-	CategorySlot9: Key;
-	DebugCanvasPaddingLeft: number;
-	DebugCanvasPaddingRight: number;
-	DebugCanvasPaddingTop: number;
-	DebugCanvasPaddingBottom: number;
-	Categories: GameplayDebuggerCategoryConfig[];
-	Extensions: GameplayDebuggerExtensionConfig[];
-	static Load(ResourceName: string): GameplayDebuggerConfig;
-	static Find(Outer: UObject, ResourceName: string): GameplayDebuggerConfig;
-	static GetDefaultObject(): GameplayDebuggerConfig;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayDebuggerConfig;
-	static C(Other: UObject | any): GameplayDebuggerConfig;
-}
-
-declare class GameplayDebuggerPlayerData { 
-	Controller: GameplayDebuggerLocalController;
-	InputComponent: InputComponent;
-	Replicator: GameplayDebuggerCategoryReplicator;
-	clone() : GameplayDebuggerPlayerData;
-	static C(Other: UObject | any): GameplayDebuggerPlayerData;
-}
-
-declare class GameplayDebuggerPlayerManager extends Actor { 
-	PlayerData: GameplayDebuggerPlayerData[];
-	PendingRegistrations: GameplayDebuggerCategoryReplicator[];
-	static GetDefaultObject(): GameplayDebuggerPlayerManager;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayDebuggerPlayerManager;
-	static C(Other: UObject | any): GameplayDebuggerPlayerManager;
-}
-
-declare class GameplayDebuggerLocalController extends UObject { 
-	CachedReplicator: GameplayDebuggerCategoryReplicator;
-	CachedPlayerManager: GameplayDebuggerPlayerManager;
-	DebugActorCandidate: Actor;
-	static Load(ResourceName: string): GameplayDebuggerLocalController;
-	static Find(Outer: UObject, ResourceName: string): GameplayDebuggerLocalController;
-	static GetDefaultObject(): GameplayDebuggerLocalController;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayDebuggerLocalController;
-	static C(Other: UObject | any): GameplayDebuggerLocalController;
-}
-
-declare class AIBlueprintHelperLibrary extends BlueprintFunctionLibrary { 
-	static Load(ResourceName: string): AIBlueprintHelperLibrary;
-	static Find(Outer: UObject, ResourceName: string): AIBlueprintHelperLibrary;
-	static GetDefaultObject(): AIBlueprintHelperLibrary;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIBlueprintHelperLibrary;
-	static UnlockAIResourcesWithAnimation(AnimInstance: AnimInstance,bUnlockMovement: boolean,UnlockAILogic: boolean): void;
-	static SpawnAIFromClass(WorldContextObject: UObject,PawnClass: UnrealEngineClass,BehaviorTree: BehaviorTree,Location: Vector,Rotation: Rotator,bNoCollisionFail: boolean): Pawn;
-	static SimpleMoveToLocation(Controller: Controller,Goal: Vector): void;
-	static SimpleMoveToActor(Controller: Controller,Goal: Actor): void;
-	static SendAIMessage(Target: Pawn,Message: string,MessageSource: UObject,bSuccess: boolean): void;
-	static LockAIResourcesWithAnimation(AnimInstance: AnimInstance,bLockMovement: boolean,LockAILogic: boolean): void;
-	static IsValidAIRotation(Rotation: Rotator): boolean;
-	static IsValidAILocation(Location: Vector): boolean;
-	static IsValidAIDirection(DirectionVector: Vector): boolean;
-	static GetCurrentPath(Controller: Controller): NavigationPath;
-	static GetBlackboard(Target: Actor): BlackboardComponent;
-	static GetAIController(ControlledActor: Actor): AIController;
-	static CreateMoveToProxyObject(WorldContextObject: UObject,Pawn: Pawn,Destination: Vector,TargetActor: Actor,AcceptanceRadius: number,bStopOnOverlap: boolean): AIAsyncTaskBlueprintProxy;
-	static C(Other: UObject | any): AIBlueprintHelperLibrary;
+declare class NullAudioCaptureProtocol extends MovieSceneAudioCaptureProtocolBase { 
+	static Load(ResourceName: string): NullAudioCaptureProtocol;
+	static Find(Outer: UObject, ResourceName: string): NullAudioCaptureProtocol;
+	static GetDefaultObject(): NullAudioCaptureProtocol;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NullAudioCaptureProtocol;
+	static C(Other: UObject | any): NullAudioCaptureProtocol;
 }
 
-declare class AIDataProvider extends UObject { 
-	static Load(ResourceName: string): AIDataProvider;
-	static Find(Outer: UObject, ResourceName: string): AIDataProvider;
-	static GetDefaultObject(): AIDataProvider;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIDataProvider;
-	static C(Other: UObject | any): AIDataProvider;
+declare class MasterAudioSubmixCaptureProtocol extends MovieSceneAudioCaptureProtocolBase { 
+	Filename: string;
+	static Load(ResourceName: string): MasterAudioSubmixCaptureProtocol;
+	static Find(Outer: UObject, ResourceName: string): MasterAudioSubmixCaptureProtocol;
+	static GetDefaultObject(): MasterAudioSubmixCaptureProtocol;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MasterAudioSubmixCaptureProtocol;
+	static C(Other: UObject | any): MasterAudioSubmixCaptureProtocol;
 }
 
-declare class AIDataProvider_QueryParams extends AIDataProvider { 
-	ParamName: string;
-	FloatValue: number;
-	IntValue: number;
-	BoolValue: boolean;
-	static Load(ResourceName: string): AIDataProvider_QueryParams;
-	static Find(Outer: UObject, ResourceName: string): AIDataProvider_QueryParams;
-	static GetDefaultObject(): AIDataProvider_QueryParams;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIDataProvider_QueryParams;
-	static C(Other: UObject | any): AIDataProvider_QueryParams;
-}
-
-declare class AIDataProvider_Random extends AIDataProvider_QueryParams { 
-	Min: number;
-	Max: number;
-	bInteger: boolean;
-	static Load(ResourceName: string): AIDataProvider_Random;
-	static Find(Outer: UObject, ResourceName: string): AIDataProvider_Random;
-	static GetDefaultObject(): AIDataProvider_Random;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIDataProvider_Random;
-	static C(Other: UObject | any): AIDataProvider_Random;
+declare class MovieSceneImageCaptureProtocolBase extends MovieSceneCaptureProtocolBase { 
+	static Load(ResourceName: string): MovieSceneImageCaptureProtocolBase;
+	static Find(Outer: UObject, ResourceName: string): MovieSceneImageCaptureProtocolBase;
+	static GetDefaultObject(): MovieSceneImageCaptureProtocolBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneImageCaptureProtocolBase;
+	static C(Other: UObject | any): MovieSceneImageCaptureProtocolBase;
 }
 
-declare class AIHotSpotManager extends UObject { 
-	static Load(ResourceName: string): AIHotSpotManager;
-	static Find(Outer: UObject, ResourceName: string): AIHotSpotManager;
-	static GetDefaultObject(): AIHotSpotManager;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIHotSpotManager;
-	static C(Other: UObject | any): AIHotSpotManager;
+declare class CompositionGraphCapturePasses { 
+	Value: string[];
+	clone() : CompositionGraphCapturePasses;
+	static C(Other: UObject | any): CompositionGraphCapturePasses;
 }
 
-declare class AIPerceptionListenerInterface extends Interface { 
-	static Load(ResourceName: string): AIPerceptionListenerInterface;
-	static Find(Outer: UObject, ResourceName: string): AIPerceptionListenerInterface;
-	static GetDefaultObject(): AIPerceptionListenerInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIPerceptionListenerInterface;
-	static C(Other: UObject | any): AIPerceptionListenerInterface;
-}
-
-declare class AIPerceptionStimuliSourceComponent extends ActorComponent { 
-	bAutoRegisterAsSource: boolean;
-	RegisterAsSourceForSenses: UnrealEngineClass[];
-	static Load(ResourceName: string): AIPerceptionStimuliSourceComponent;
-	static Find(Outer: UObject, ResourceName: string): AIPerceptionStimuliSourceComponent;
-	static GetDefaultObject(): AIPerceptionStimuliSourceComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIPerceptionStimuliSourceComponent;
-	UnregisterFromSense(SenseClass: UnrealEngineClass): void;
-	UnregisterFromPerceptionSystem(): void;
-	RegisterWithPerceptionSystem(): void;
-	RegisterForSense(SenseClass: UnrealEngineClass): void;
-	static C(Other: UObject | any): AIPerceptionStimuliSourceComponent;
-}
-
-declare class AIResourceInterface extends Interface { 
-	static Load(ResourceName: string): AIResourceInterface;
-	static Find(Outer: UObject, ResourceName: string): AIResourceInterface;
-	static GetDefaultObject(): AIResourceInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIResourceInterface;
-	static C(Other: UObject | any): AIResourceInterface;
-}
-
-declare class AIResource_Movement extends GameplayTaskResource { 
-	static Load(ResourceName: string): AIResource_Movement;
-	static Find(Outer: UObject, ResourceName: string): AIResource_Movement;
-	static GetDefaultObject(): AIResource_Movement;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIResource_Movement;
-	static C(Other: UObject | any): AIResource_Movement;
-}
-
-declare class AIResource_Logic extends GameplayTaskResource { 
-	static Load(ResourceName: string): AIResource_Logic;
-	static Find(Outer: UObject, ResourceName: string): AIResource_Logic;
-	static GetDefaultObject(): AIResource_Logic;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIResource_Logic;
-	static C(Other: UObject | any): AIResource_Logic;
-}
-
-declare type EUserDefinedStructureStatus = 'UDSS_UpToDate' | 'UDSS_Dirty' | 'UDSS_Error' | 'UDSS_Duplicate' | 'UDSS_MAX';
-declare var EUserDefinedStructureStatus : { UDSS_UpToDate:'UDSS_UpToDate',UDSS_Dirty:'UDSS_Dirty',UDSS_Error:'UDSS_Error',UDSS_Duplicate:'UDSS_Duplicate',UDSS_MAX:'UDSS_MAX', };
-declare class UserDefinedStruct extends ScriptStruct { 
-	PrimaryStruct: any;
-	ErrorMessage: string;
-	EditorData: UObject;
-	Status: EUserDefinedStructureStatus;
-	Guid: Guid;
-	static Load(ResourceName: string): UserDefinedStruct;
-	static Find(Outer: UObject, ResourceName: string): UserDefinedStruct;
-	static GetDefaultObject(): UserDefinedStruct;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserDefinedStruct;
-	static C(Other: UObject | any): UserDefinedStruct;
-}
-
-declare class AISense_Blueprint extends AISense { 
-	ListenerDataType: UnrealEngineClass;
-	ListenerContainer: AIPerceptionComponent[];
-	UnprocessedEvents: AISenseEvent[];
-	static Load(ResourceName: string): AISense_Blueprint;
-	static Find(Outer: UObject, ResourceName: string): AISense_Blueprint;
-	static GetDefaultObject(): AISense_Blueprint;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense_Blueprint;
-	OnUpdate(EventsToProcess: AISenseEvent[]): number;
-	OnListenerUpdated(ActorListener: Actor,PerceptionComponent: AIPerceptionComponent): void;
-	OnListenerUnregistered(ActorListener: Actor,PerceptionComponent: AIPerceptionComponent): void;
-	OnListenerRegistered(ActorListener: Actor,PerceptionComponent: AIPerceptionComponent): void;
-	K2_OnNewPawn(NewPawn: Pawn): void;
-	GetAllListenerComponents(ListenerComponents?: AIPerceptionComponent[]): {ListenerComponents: AIPerceptionComponent[]};
-	GetAllListenerActors(ListenerActors?: Actor[]): {ListenerActors: Actor[]};
-	static C(Other: UObject | any): AISense_Blueprint;
-}
-
-declare class AIDamageEvent { 
-	Amount: number;
-	Location: Vector;
-	HitLocation: Vector;
-	DamagedActor: Actor;
-	Instigator: Actor;
-	clone() : AIDamageEvent;
-	static C(Other: UObject | any): AIDamageEvent;
-}
-
-declare class AISense_Damage extends AISense { 
-	RegisteredEvents: AIDamageEvent[];
-	static Load(ResourceName: string): AISense_Damage;
-	static Find(Outer: UObject, ResourceName: string): AISense_Damage;
-	static GetDefaultObject(): AISense_Damage;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense_Damage;
-	static ReportDamageEvent(WorldContextObject: UObject,DamagedActor: Actor,Instigator: Actor,DamageAmount: number,EventLocation: Vector,HitLocation: Vector): void;
-	static C(Other: UObject | any): AISense_Damage;
-}
-
-declare class AINoiseEvent { 
-	NoiseLocation: Vector;
-	Loudness: number;
-	MaxRange: number;
-	Instigator: Actor;
-	Tag: string;
-	clone() : AINoiseEvent;
-	static C(Other: UObject | any): AINoiseEvent;
-}
-
-declare class AISense_Hearing extends AISense { 
-	NoiseEvents: AINoiseEvent[];
-	SpeedOfSoundSq: number;
-	static Load(ResourceName: string): AISense_Hearing;
-	static Find(Outer: UObject, ResourceName: string): AISense_Hearing;
-	static GetDefaultObject(): AISense_Hearing;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense_Hearing;
-	static ReportNoiseEvent(WorldContextObject: UObject,NoiseLocation: Vector,Loudness: number,Instigator: Actor,MaxRange: number,Tag: string): void;
-	static C(Other: UObject | any): AISense_Hearing;
-}
-
-declare class AIPredictionEvent { 
-	Requestor: Actor;
-	PredictedActor: Actor;
-	clone() : AIPredictionEvent;
-	static C(Other: UObject | any): AIPredictionEvent;
-}
-
-declare class AISense_Prediction extends AISense { 
-	RegisteredEvents: AIPredictionEvent[];
-	static Load(ResourceName: string): AISense_Prediction;
-	static Find(Outer: UObject, ResourceName: string): AISense_Prediction;
-	static GetDefaultObject(): AISense_Prediction;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense_Prediction;
-	static RequestPawnPredictionEvent(Requestor: Pawn,PredictedActor: Actor,PredictionTime: number): void;
-	static RequestControllerPredictionEvent(Requestor: AIController,PredictedActor: Actor,PredictionTime: number): void;
-	static C(Other: UObject | any): AISense_Prediction;
-}
-
-declare class AISense_Sight extends AISense { 
-	MaxTracesPerTick: number;
-	MinQueriesPerTimeSliceCheck: number;
-	MaxTimeSlicePerTick: any;
-	HighImportanceQueryDistanceThreshold: number;
-	MaxQueryImportance: number;
-	SightLimitQueryImportance: number;
-	static Load(ResourceName: string): AISense_Sight;
-	static Find(Outer: UObject, ResourceName: string): AISense_Sight;
-	static GetDefaultObject(): AISense_Sight;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense_Sight;
-	static C(Other: UObject | any): AISense_Sight;
-}
-
-declare class AITeamStimulusEvent { 
-	Broadcaster: Actor;
-	Enemy: Actor;
-	clone() : AITeamStimulusEvent;
-	static C(Other: UObject | any): AITeamStimulusEvent;
-}
-
-declare class AISense_Team extends AISense { 
-	RegisteredEvents: AITeamStimulusEvent[];
-	static Load(ResourceName: string): AISense_Team;
-	static Find(Outer: UObject, ResourceName: string): AISense_Team;
-	static GetDefaultObject(): AISense_Team;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense_Team;
-	static C(Other: UObject | any): AISense_Team;
-}
-
-declare class AITouchEvent { 
-	TouchReceiver: Actor;
-	OtherActor: Actor;
-	clone() : AITouchEvent;
-	static C(Other: UObject | any): AITouchEvent;
-}
-
-declare class AISense_Touch extends AISense { 
-	RegisteredEvents: AITouchEvent[];
-	static Load(ResourceName: string): AISense_Touch;
-	static Find(Outer: UObject, ResourceName: string): AISense_Touch;
-	static GetDefaultObject(): AISense_Touch;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense_Touch;
-	static C(Other: UObject | any): AISense_Touch;
-}
-
-declare class AISenseBlueprintListener extends UserDefinedStruct { 
-	static Load(ResourceName: string): AISenseBlueprintListener;
-	static Find(Outer: UObject, ResourceName: string): AISenseBlueprintListener;
-	static GetDefaultObject(): AISenseBlueprintListener;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseBlueprintListener;
-	static C(Other: UObject | any): AISenseBlueprintListener;
-}
-
-declare class AISenseConfig_Blueprint extends AISenseConfig { 
-	Implementation: UnrealEngineClass;
-	static Load(ResourceName: string): AISenseConfig_Blueprint;
-	static Find(Outer: UObject, ResourceName: string): AISenseConfig_Blueprint;
-	static GetDefaultObject(): AISenseConfig_Blueprint;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig_Blueprint;
-	static C(Other: UObject | any): AISenseConfig_Blueprint;
-}
-
-declare class AISenseConfig_Damage extends AISenseConfig { 
-	Implementation: UnrealEngineClass;
-	static Load(ResourceName: string): AISenseConfig_Damage;
-	static Find(Outer: UObject, ResourceName: string): AISenseConfig_Damage;
-	static GetDefaultObject(): AISenseConfig_Damage;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig_Damage;
-	static C(Other: UObject | any): AISenseConfig_Damage;
-}
-
-declare class AISenseAffiliationFilter { 
-	bDetectEnemies: boolean;
-	bDetectNeutrals: boolean;
-	bDetectFriendlies: boolean;
-	clone() : AISenseAffiliationFilter;
-	static C(Other: UObject | any): AISenseAffiliationFilter;
-}
-
-declare class AISenseConfig_Hearing extends AISenseConfig { 
-	Implementation: UnrealEngineClass;
-	HearingRange: number;
-	LoSHearingRange: number;
-	bUseLoSHearing: boolean;
-	DetectionByAffiliation: AISenseAffiliationFilter;
-	static Load(ResourceName: string): AISenseConfig_Hearing;
-	static Find(Outer: UObject, ResourceName: string): AISenseConfig_Hearing;
-	static GetDefaultObject(): AISenseConfig_Hearing;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig_Hearing;
-	static C(Other: UObject | any): AISenseConfig_Hearing;
-}
-
-declare class AISenseConfig_Prediction extends AISenseConfig { 
-	static Load(ResourceName: string): AISenseConfig_Prediction;
-	static Find(Outer: UObject, ResourceName: string): AISenseConfig_Prediction;
-	static GetDefaultObject(): AISenseConfig_Prediction;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig_Prediction;
-	static C(Other: UObject | any): AISenseConfig_Prediction;
-}
-
-declare class AISenseConfig_Sight extends AISenseConfig { 
-	Implementation: UnrealEngineClass;
-	SightRadius: number;
-	LoseSightRadius: number;
-	PeripheralVisionAngleDegrees: number;
-	DetectionByAffiliation: AISenseAffiliationFilter;
-	AutoSuccessRangeFromLastSeenLocation: number;
-	static Load(ResourceName: string): AISenseConfig_Sight;
-	static Find(Outer: UObject, ResourceName: string): AISenseConfig_Sight;
-	static GetDefaultObject(): AISenseConfig_Sight;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig_Sight;
-	static C(Other: UObject | any): AISenseConfig_Sight;
-}
-
-declare class AISenseConfig_Team extends AISenseConfig { 
-	static Load(ResourceName: string): AISenseConfig_Team;
-	static Find(Outer: UObject, ResourceName: string): AISenseConfig_Team;
-	static GetDefaultObject(): AISenseConfig_Team;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig_Team;
-	static C(Other: UObject | any): AISenseConfig_Team;
-}
-
-declare class AISenseConfig_Touch extends AISenseConfig { 
-	static Load(ResourceName: string): AISenseConfig_Touch;
-	static Find(Outer: UObject, ResourceName: string): AISenseConfig_Touch;
-	static GetDefaultObject(): AISenseConfig_Touch;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig_Touch;
-	static C(Other: UObject | any): AISenseConfig_Touch;
-}
-
-declare class AISenseEvent_Damage extends AISenseEvent { 
-	Event: AIDamageEvent;
-	static Load(ResourceName: string): AISenseEvent_Damage;
-	static Find(Outer: UObject, ResourceName: string): AISenseEvent_Damage;
-	static GetDefaultObject(): AISenseEvent_Damage;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseEvent_Damage;
-	static C(Other: UObject | any): AISenseEvent_Damage;
-}
-
-declare class AISenseEvent_Hearing extends AISenseEvent { 
-	Event: AINoiseEvent;
-	static Load(ResourceName: string): AISenseEvent_Hearing;
-	static Find(Outer: UObject, ResourceName: string): AISenseEvent_Hearing;
-	static GetDefaultObject(): AISenseEvent_Hearing;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseEvent_Hearing;
-	static C(Other: UObject | any): AISenseEvent_Hearing;
-}
-
-declare class AISightTargetInterface extends Interface { 
-	static Load(ResourceName: string): AISightTargetInterface;
-	static Find(Outer: UObject, ResourceName: string): AISightTargetInterface;
-	static GetDefaultObject(): AISightTargetInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISightTargetInterface;
-	static C(Other: UObject | any): AISightTargetInterface;
+declare type EHDRCaptureGamut = 'HCGM_Rec709' | 'HCGM_P3DCI' | 'HCGM_Rec2020' | 'HCGM_ACES' | 'HCGM_ACEScg' | 'HCGM_Linear' | 'HCGM_MAX';
+declare var EHDRCaptureGamut : { HCGM_Rec709:'HCGM_Rec709',HCGM_P3DCI:'HCGM_P3DCI',HCGM_Rec2020:'HCGM_Rec2020',HCGM_ACES:'HCGM_ACES',HCGM_ACEScg:'HCGM_ACEScg',HCGM_Linear:'HCGM_Linear',HCGM_MAX:'HCGM_MAX', };
+declare class CompositionGraphCaptureProtocol extends MovieSceneImageCaptureProtocolBase { 
+	IncludeRenderPasses: CompositionGraphCapturePasses;
+	bCaptureFramesInHDR: boolean;
+	HDRCompressionQuality: number;
+	CaptureGamut: EHDRCaptureGamut;
+	PostProcessingMaterial: SoftObjectPath;
+	bDisableScreenPercentage: boolean;
+	PostProcessingMaterialPtr: MaterialInterface;
+	static Load(ResourceName: string): CompositionGraphCaptureProtocol;
+	static Find(Outer: UObject, ResourceName: string): CompositionGraphCaptureProtocol;
+	static GetDefaultObject(): CompositionGraphCaptureProtocol;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CompositionGraphCaptureProtocol;
+	static C(Other: UObject | any): CompositionGraphCaptureProtocol;
 }
 
-declare class BehaviorTreeTemplateInfo { 
-	Asset: BehaviorTree;
-	Template: BTCompositeNode;
-	clone() : BehaviorTreeTemplateInfo;
-	static C(Other: UObject | any): BehaviorTreeTemplateInfo;
+declare class FrameGrabberProtocol extends MovieSceneImageCaptureProtocolBase { 
+	static Load(ResourceName: string): FrameGrabberProtocol;
+	static Find(Outer: UObject, ResourceName: string): FrameGrabberProtocol;
+	static GetDefaultObject(): FrameGrabberProtocol;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FrameGrabberProtocol;
+	static C(Other: UObject | any): FrameGrabberProtocol;
 }
 
-declare class BehaviorTreeManager extends UObject { 
-	MaxDebuggerSteps: number;
-	LoadedTemplates: BehaviorTreeTemplateInfo[];
-	ActiveComponents: BehaviorTreeComponent[];
-	static Load(ResourceName: string): BehaviorTreeManager;
-	static Find(Outer: UObject, ResourceName: string): BehaviorTreeManager;
-	static GetDefaultObject(): BehaviorTreeManager;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeManager;
-	static C(Other: UObject | any): BehaviorTreeManager;
+declare class ImageSequenceProtocol extends FrameGrabberProtocol { 
+	static Load(ResourceName: string): ImageSequenceProtocol;
+	static Find(Outer: UObject, ResourceName: string): ImageSequenceProtocol;
+	static GetDefaultObject(): ImageSequenceProtocol;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImageSequenceProtocol;
+	static C(Other: UObject | any): ImageSequenceProtocol;
 }
 
-declare class EnvQueryNode extends UObject { 
-	VerNum: number;
-	static Load(ResourceName: string): EnvQueryNode;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryNode;
-	static GetDefaultObject(): EnvQueryNode;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryNode;
-	static C(Other: UObject | any): EnvQueryNode;
+declare class CompressedImageSequenceProtocol extends ImageSequenceProtocol { 
+	CompressionQuality: number;
+	static Load(ResourceName: string): CompressedImageSequenceProtocol;
+	static Find(Outer: UObject, ResourceName: string): CompressedImageSequenceProtocol;
+	static GetDefaultObject(): CompressedImageSequenceProtocol;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CompressedImageSequenceProtocol;
+	static C(Other: UObject | any): CompressedImageSequenceProtocol;
 }
 
-declare class EnvQueryItemType extends UObject { 
-	static Load(ResourceName: string): EnvQueryItemType;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryItemType;
-	static GetDefaultObject(): EnvQueryItemType;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryItemType;
-	static C(Other: UObject | any): EnvQueryItemType;
+declare class ImageSequenceProtocol_BMP extends ImageSequenceProtocol { 
+	static Load(ResourceName: string): ImageSequenceProtocol_BMP;
+	static Find(Outer: UObject, ResourceName: string): ImageSequenceProtocol_BMP;
+	static GetDefaultObject(): ImageSequenceProtocol_BMP;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImageSequenceProtocol_BMP;
+	static C(Other: UObject | any): ImageSequenceProtocol_BMP;
 }
 
-declare class EnvQueryGenerator extends EnvQueryNode { 
-	OptionName: string;
-	ItemType: UnrealEngineClass;
-	bAutoSortTests: boolean;
-	static Load(ResourceName: string): EnvQueryGenerator;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator;
-	static GetDefaultObject(): EnvQueryGenerator;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator;
-	static C(Other: UObject | any): EnvQueryGenerator;
+declare class ImageSequenceProtocol_PNG extends CompressedImageSequenceProtocol { 
+	static Load(ResourceName: string): ImageSequenceProtocol_PNG;
+	static Find(Outer: UObject, ResourceName: string): ImageSequenceProtocol_PNG;
+	static GetDefaultObject(): ImageSequenceProtocol_PNG;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImageSequenceProtocol_PNG;
+	static C(Other: UObject | any): ImageSequenceProtocol_PNG;
 }
 
-declare type EEnvTestPurpose = 'Filter' | 'Score' | 'FilterAndScore' | 'EEnvTestPurpose_MAX';
-declare var EEnvTestPurpose : { Filter:'Filter',Score:'Score',FilterAndScore:'FilterAndScore',EEnvTestPurpose_MAX:'EEnvTestPurpose_MAX', };
-declare type EEnvTestFilterOperator = 'AllPass' | 'AnyPass' | 'EEnvTestFilterOperator_MAX';
-declare var EEnvTestFilterOperator : { AllPass:'AllPass',AnyPass:'AnyPass',EEnvTestFilterOperator_MAX:'EEnvTestFilterOperator_MAX', };
-declare type EEnvTestScoreOperator = 'AverageScore' | 'MinScore' | 'MaxScore' | 'EEnvTestScoreOperator_MAX';
-declare var EEnvTestScoreOperator : { AverageScore:'AverageScore',MinScore:'MinScore',MaxScore:'MaxScore',EEnvTestScoreOperator_MAX:'EEnvTestScoreOperator_MAX', };
-declare type EEnvTestFilterType = 'Minimum' | 'Maximum' | 'Range' | 'Match' | 'EEnvTestFilterType_MAX';
-declare var EEnvTestFilterType : { Minimum:'Minimum',Maximum:'Maximum',Range:'Range',Match:'Match',EEnvTestFilterType_MAX:'EEnvTestFilterType_MAX', };
-declare class AIDataProviderValue { 
-	CachedProperty: Property;
-	DataBinding: AIDataProvider;
-	DataField: string;
-	clone() : AIDataProviderValue;
-	static C(Other: UObject | any): AIDataProviderValue;
+declare class ImageSequenceProtocol_JPG extends CompressedImageSequenceProtocol { 
+	static Load(ResourceName: string): ImageSequenceProtocol_JPG;
+	static Find(Outer: UObject, ResourceName: string): ImageSequenceProtocol_JPG;
+	static GetDefaultObject(): ImageSequenceProtocol_JPG;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImageSequenceProtocol_JPG;
+	static C(Other: UObject | any): ImageSequenceProtocol_JPG;
 }
 
-declare class AIDataProviderTypedValue extends AIDataProviderValue { 
-	PropertyType: UnrealEngineClass;
-	clone() : AIDataProviderTypedValue;
-	static C(Other: UObject | any): AIDataProviderTypedValue;
+declare class ImageSequenceProtocol_EXR extends ImageSequenceProtocol { 
+	bCompressed: boolean;
+	CaptureGamut: EHDRCaptureGamut;
+	static Load(ResourceName: string): ImageSequenceProtocol_EXR;
+	static Find(Outer: UObject, ResourceName: string): ImageSequenceProtocol_EXR;
+	static GetDefaultObject(): ImageSequenceProtocol_EXR;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImageSequenceProtocol_EXR;
+	static C(Other: UObject | any): ImageSequenceProtocol_EXR;
 }
 
-declare class AIDataProviderBoolValue extends AIDataProviderTypedValue { 
-	DefaultValue: boolean;
-	clone() : AIDataProviderBoolValue;
-	static C(Other: UObject | any): AIDataProviderBoolValue;
+declare class MovieSceneCaptureInterface extends Interface { 
+	static Load(ResourceName: string): MovieSceneCaptureInterface;
+	static Find(Outer: UObject, ResourceName: string): MovieSceneCaptureInterface;
+	static GetDefaultObject(): MovieSceneCaptureInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCaptureInterface;
+	static C(Other: UObject | any): MovieSceneCaptureInterface;
 }
 
-declare class AIDataProviderFloatValue extends AIDataProviderTypedValue { 
-	DefaultValue: number;
-	clone() : AIDataProviderFloatValue;
-	static C(Other: UObject | any): AIDataProviderFloatValue;
+declare class DirectoryPath { 
+	Path: string;
+	clone() : DirectoryPath;
+	static C(Other: UObject | any): DirectoryPath;
 }
 
-declare type EEnvTestScoreEquation = 'Linear' | 'Square' | 'InverseLinear' | 'SquareRoot' | 'Constant' | 'EEnvTestScoreEquation_MAX';
-declare var EEnvTestScoreEquation : { Linear:'Linear',Square:'Square',InverseLinear:'InverseLinear',SquareRoot:'SquareRoot',Constant:'Constant',EEnvTestScoreEquation_MAX:'EEnvTestScoreEquation_MAX', };
-declare type EEnvQueryTestClamping = 'None' | 'SpecifiedValue' | 'FilterThreshold' | 'EEnvQueryTestClamping_MAX';
-declare var EEnvQueryTestClamping : { None:'None',SpecifiedValue:'SpecifiedValue',FilterThreshold:'FilterThreshold',EEnvQueryTestClamping_MAX:'EEnvQueryTestClamping_MAX', };
-declare type EEQSNormalizationType = 'Absolute' | 'RelativeToScores' | 'EEQSNormalizationType_MAX';
-declare var EEQSNormalizationType : { Absolute:'Absolute',RelativeToScores:'RelativeToScores',EEQSNormalizationType_MAX:'EEQSNormalizationType_MAX', };
-declare class EnvQueryTest extends EnvQueryNode { 
-	TestOrder: number;
-	TestPurpose: EEnvTestPurpose;
-	TestComment: string;
-	MultipleContextFilterOp: EEnvTestFilterOperator;
-	MultipleContextScoreOp: EEnvTestScoreOperator;
-	FilterType: EEnvTestFilterType;
-	BoolValue: AIDataProviderBoolValue;
-	FloatValueMin: AIDataProviderFloatValue;
-	FloatValueMax: AIDataProviderFloatValue;
-	ScoringEquation: EEnvTestScoreEquation;
-	ClampMinType: EEnvQueryTestClamping;
-	ClampMaxType: EEnvQueryTestClamping;
-	NormalizationType: EEQSNormalizationType;
-	ScoreClampMin: AIDataProviderFloatValue;
-	ScoreClampMax: AIDataProviderFloatValue;
-	ScoringFactor: AIDataProviderFloatValue;
-	ReferenceValue: AIDataProviderFloatValue;
-	bDefineReferenceValue: boolean;
-	bWorkOnFloatValues: boolean;
-	static Load(ResourceName: string): EnvQueryTest;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryTest;
-	static GetDefaultObject(): EnvQueryTest;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest;
-	static C(Other: UObject | any): EnvQueryTest;
+declare class CaptureResolution { 
+	ResX: number;
+	ResY: number;
+	clone() : CaptureResolution;
+	static C(Other: UObject | any): CaptureResolution;
 }
 
-declare class EnvQueryOption extends UObject { 
-	Generator: EnvQueryGenerator;
-	Tests: EnvQueryTest[];
-	static Load(ResourceName: string): EnvQueryOption;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryOption;
-	static GetDefaultObject(): EnvQueryOption;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryOption;
-	static C(Other: UObject | any): EnvQueryOption;
+declare class MovieSceneCaptureSettings { 
+	OutputDirectory: DirectoryPath;
+	GameModeOverride: UnrealEngineClass;
+	OutputFormat: string;
+	bOverwriteExisting: boolean;
+	bUseRelativeFrameNumbers: boolean;
+	HandleFrames: number;
+	MovieExtension: string;
+	ZeroPadFrameNumbers: number;
+	FrameRate: FrameRate;
+	bUseCustomFrameRate: boolean;
+	CustomFrameRate: FrameRate;
+	Resolution: CaptureResolution;
+	bEnableTextureStreaming: boolean;
+	bCinematicEngineScalability: boolean;
+	bCinematicMode: boolean;
+	bAllowMovement: boolean;
+	bAllowTurning: boolean;
+	bShowPlayer: boolean;
+	bShowHUD: boolean;
+	bUsePathTracer: boolean;
+	PathTracerSamplePerPixel: number;
+	clone() : MovieSceneCaptureSettings;
+	static C(Other: UObject | any): MovieSceneCaptureSettings;
 }
 
-declare class EnvQuery extends DataAsset { 
-	EdGraph: EdGraph;
-	QueryName: string;
-	Options: EnvQueryOption[];
-	static Load(ResourceName: string): EnvQuery;
-	static Find(Outer: UObject, ResourceName: string): EnvQuery;
-	static GetDefaultObject(): EnvQuery;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQuery;
-	static C(Other: UObject | any): EnvQuery;
+declare class MovieSceneCapture extends UObject { 
+	ImageCaptureProtocolType: SoftClassPath;
+	AudioCaptureProtocolType: SoftClassPath;
+	ImageCaptureProtocol: MovieSceneImageCaptureProtocolBase;
+	AudioCaptureProtocol: MovieSceneAudioCaptureProtocolBase;
+	Settings: MovieSceneCaptureSettings;
+	bUseSeparateProcess: boolean;
+	bCloseEditorWhenCaptureStarts: boolean;
+	AdditionalCommandLineArguments: string;
+	InheritedCommandLineArguments: string;
+	static Load(ResourceName: string): MovieSceneCapture;
+	static Find(Outer: UObject, ResourceName: string): MovieSceneCapture;
+	static GetDefaultObject(): MovieSceneCapture;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCapture;
+	SetImageCaptureProtocolType(ProtocolType: UnrealEngineClass): void;
+	SetAudioCaptureProtocolType(ProtocolType: UnrealEngineClass): void;
+	GetImageCaptureProtocol(): MovieSceneCaptureProtocolBase;
+	GetAudioCaptureProtocol(): MovieSceneCaptureProtocolBase;
+	static C(Other: UObject | any): MovieSceneCapture;
 }
 
-declare class EnvQueryInstanceCache { 
-	Template: EnvQuery;
-	clone() : EnvQueryInstanceCache;
-	static C(Other: UObject | any): EnvQueryInstanceCache;
+declare class LevelCapture extends MovieSceneCapture { 
+	bAutoStartCapture: boolean;
+	PrerequisiteActorId: Guid;
+	static Load(ResourceName: string): LevelCapture;
+	static Find(Outer: UObject, ResourceName: string): LevelCapture;
+	static GetDefaultObject(): LevelCapture;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelCapture;
+	static C(Other: UObject | any): LevelCapture;
 }
 
-declare class EnvQueryContext extends UObject { 
-	static Load(ResourceName: string): EnvQueryContext;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryContext;
-	static GetDefaultObject(): EnvQueryContext;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryContext;
-	static C(Other: UObject | any): EnvQueryContext;
+declare class MovieSceneCaptureEnvironment extends UObject { 
+	static Load(ResourceName: string): MovieSceneCaptureEnvironment;
+	static Find(Outer: UObject, ResourceName: string): MovieSceneCaptureEnvironment;
+	static GetDefaultObject(): MovieSceneCaptureEnvironment;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCaptureEnvironment;
+	static IsCaptureInProgress(): boolean;
+	static GetCaptureFrameNumber(): number;
+	static GetCaptureElapsedTime(): number;
+	static FindImageCaptureProtocol(): MovieSceneImageCaptureProtocolBase;
+	static FindAudioCaptureProtocol(): MovieSceneAudioCaptureProtocolBase;
+	static C(Other: UObject | any): MovieSceneCaptureEnvironment;
 }
 
-declare type EEnvQueryStatus = 'Processing' | 'Success' | 'Failed' | 'Aborted' | 'OwnerLost' | 'MissingParam' | 'EEnvQueryStatus_MAX';
-declare var EEnvQueryStatus : { Processing:'Processing',Success:'Success',Failed:'Failed',Aborted:'Aborted',OwnerLost:'OwnerLost',MissingParam:'MissingParam',EEnvQueryStatus_MAX:'EEnvQueryStatus_MAX', };
-declare class EnvQueryInstanceBlueprintWrapper extends UObject { 
-	QueryID: number;
-	ItemType: UnrealEngineClass;
-	OptionIndex: number;
-	OnQueryFinishedEvent: UnrealEngineMulticastDelegate<(QueryInstance: EnvQueryInstanceBlueprintWrapper, QueryStatus: EEnvQueryStatus) => void>;
-	static Load(ResourceName: string): EnvQueryInstanceBlueprintWrapper;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryInstanceBlueprintWrapper;
-	static GetDefaultObject(): EnvQueryInstanceBlueprintWrapper;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryInstanceBlueprintWrapper;
-	SetNamedParam(ParamName: string,Value: number): void;
-	GetResultsAsLocations(): Vector[];
-	GetResultsAsActors(): Actor[];
-	GetItemScore(ItemIndex: number): number;
-	static C(Other: UObject | any): EnvQueryInstanceBlueprintWrapper;
+declare class CapturedPixelsID { 
+	Identifiers: any;
+	clone() : CapturedPixelsID;
+	static C(Other: UObject | any): CapturedPixelsID;
 }
 
-declare type EEnvQueryRunMode = 'SingleResult' | 'RandomBest5Pct' | 'RandomBest25Pct' | 'AllMatching' | 'EEnvQueryRunMode_MAX';
-declare var EEnvQueryRunMode : { SingleResult:'SingleResult',RandomBest5Pct:'RandomBest5Pct',RandomBest25Pct:'RandomBest25Pct',AllMatching:'AllMatching',EEnvQueryRunMode_MAX:'EEnvQueryRunMode_MAX', };
-declare class EnvQueryManager extends UObject { 
-	InstanceCache: EnvQueryInstanceCache[];
-	LocalContexts: EnvQueryContext[];
-	GCShieldedWrappers: EnvQueryInstanceBlueprintWrapper[];
-	MaxAllowedTestingTime: number;
-	bTestQueriesUsingBreadth: boolean;
-	QueryCountWarningThreshold: number;
-	QueryCountWarningInterval: any;
-	static Load(ResourceName: string): EnvQueryManager;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryManager;
-	static GetDefaultObject(): EnvQueryManager;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryManager;
-	static RunEQSQuery(WorldContextObject: UObject,QueryTemplate: EnvQuery,Querier: UObject,RunMode: EEnvQueryRunMode,WrapperClass: UnrealEngineClass): EnvQueryInstanceBlueprintWrapper;
-	static C(Other: UObject | any): EnvQueryManager;
+declare class CapturedPixels { 
+	clone() : CapturedPixels;
+	static C(Other: UObject | any): CapturedPixels;
 }
 
-declare class NavLocalGridManager extends UObject { 
-	static Load(ResourceName: string): NavLocalGridManager;
-	static Find(Outer: UObject, ResourceName: string): NavLocalGridManager;
-	static GetDefaultObject(): NavLocalGridManager;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLocalGridManager;
-	static SetLocalNavigationGridDensity(WorldContextObject: UObject,CellSize: number): boolean;
-	static RemoveLocalNavigationGrid(WorldContextObject: UObject,GridId: number,bRebuildGrids: boolean): void;
-	static FindLocalNavigationGridPath(WorldContextObject: UObject,Start: Vector,End: Vector,PathPoints?: Vector[]): {PathPoints: Vector[], $: boolean};
-	static AddLocalNavigationGridForPoints(WorldContextObject: UObject,Locations: Vector[],Radius2D: number,Height: number,bRebuildGrids: boolean): number;
-	static AddLocalNavigationGridForPoint(WorldContextObject: UObject,Location: Vector,Radius2D: number,Height: number,bRebuildGrids: boolean): number;
-	static AddLocalNavigationGridForCapsule(WorldContextObject: UObject,Location: Vector,CapsuleRadius: number,CapsuleHalfHeight: number,Radius2D: number,Height: number,bRebuildGrids: boolean): number;
-	static AddLocalNavigationGridForBox(WorldContextObject: UObject,Location: Vector,Extent: Vector,Rotation: Rotator,Radius2D: number,Height: number,bRebuildGrids: boolean): number;
-	static C(Other: UObject | any): NavLocalGridManager;
+declare class FrameMetrics { 
+	TotalElapsedTime: number;
+	FrameDelta: number;
+	FrameNumber: number;
+	NumDroppedFrames: number;
+	clone() : FrameMetrics;
+	static C(Other: UObject | any): FrameMetrics;
 }
 
-declare class AISystem extends AISystemBase { 
-	PerceptionSystemClassName: SoftClassPath;
-	HotSpotManagerClassName: SoftClassPath;
-	AcceptanceRadius: number;
-	PathfollowingRegularPathPointAcceptanceRadius: number;
-	PathfollowingNavLinkAcceptanceRadius: number;
-	bFinishMoveOnGoalOverlap: boolean;
-	bAcceptPartialPaths: boolean;
-	bAllowStrafing: boolean;
-	bEnableBTAITasks: boolean;
-	bAllowControllersAsEQSQuerier: boolean;
-	bEnableDebuggerPlugin: boolean;
-	DefaultSightCollisionChannel: ECollisionChannel;
-	BehaviorTreeManager: BehaviorTreeManager;
-	EnvironmentQueryManager: EnvQueryManager;
-	PerceptionSystem: AIPerceptionSystem;
-	AllProxyObjects: AIAsyncTaskBlueprintProxy[];
-	HotSpotManager: AIHotSpotManager;
-	NavLocalGrids: NavLocalGridManager;
-	static Load(ResourceName: string): AISystem;
-	static Find(Outer: UObject, ResourceName: string): AISystem;
-	static GetDefaultObject(): AISystem;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISystem;
-	AILoggingVerbose(): void;
-	AIIgnorePlayers(): void;
-	static C(Other: UObject | any): AISystem;
+declare class UserDefinedCaptureProtocol extends MovieSceneImageCaptureProtocolBase { 
+	World: World;
+	static Load(ResourceName: string): UserDefinedCaptureProtocol;
+	static Find(Outer: UObject, ResourceName: string): UserDefinedCaptureProtocol;
+	static GetDefaultObject(): UserDefinedCaptureProtocol;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserDefinedCaptureProtocol;
+	StopCapturingFinalPixels(): void;
+	StartCapturingFinalPixels(StreamID: CapturedPixelsID): void;
+	ResolveBuffer(Buffer: Texture,BufferID: CapturedPixelsID): void;
+	OnWarmUp(): void;
+	OnTick(): void;
+	OnStartCapture(): void;
+	OnSetup(): boolean;
+	OnPreTick(): void;
+	OnPixelsReceived(Pixels: CapturedPixels,ID: CapturedPixelsID,FrameMetrics: FrameMetrics): void;
+	OnPauseCapture(): void;
+	OnFinalize(): void;
+	OnCaptureFrame(): void;
+	OnCanFinalize(): boolean;
+	OnBeginFinalize(): void;
+	GetCurrentFrameMetrics(): FrameMetrics;
+	GenerateFilename(InFrameMetrics: FrameMetrics): string;
+	static C(Other: UObject | any): UserDefinedCaptureProtocol;
 }
 
-declare class AITask extends GameplayTask { 
-	OwnerController: AIController;
-	static Load(ResourceName: string): AITask;
-	static Find(Outer: UObject, ResourceName: string): AITask;
-	static GetDefaultObject(): AITask;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AITask;
-	static C(Other: UObject | any): AITask;
-}
-
-declare class AITask_LockLogic extends AITask { 
-	static Load(ResourceName: string): AITask_LockLogic;
-	static Find(Outer: UObject, ResourceName: string): AITask_LockLogic;
-	static GetDefaultObject(): AITask_LockLogic;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AITask_LockLogic;
-	static C(Other: UObject | any): AITask_LockLogic;
-}
-
-declare class AIMoveRequest { 
-	GoalActor: Actor;
-	clone() : AIMoveRequest;
-	static C(Other: UObject | any): AIMoveRequest;
-}
-
-declare type EAIOptionFlag = 'Default' | 'Enable' | 'Disable' | 'MAX';
-declare var EAIOptionFlag : { Default:'Default',Enable:'Enable',Disable:'Disable',MAX:'MAX', };
-declare class AITask_MoveTo extends AITask { 
-	OnRequestFailed: UnrealEngineMulticastDelegate<() => void>;
-	OnMoveFinished: UnrealEngineMulticastDelegate<(Result: EPathFollowingResult, AIController: AIController) => void>;
-	MoveRequest: AIMoveRequest;
-	static Load(ResourceName: string): AITask_MoveTo;
-	static Find(Outer: UObject, ResourceName: string): AITask_MoveTo;
-	static GetDefaultObject(): AITask_MoveTo;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AITask_MoveTo;
-	static AIMoveTo(Controller: AIController,GoalLocation: Vector,GoalActor: Actor,AcceptanceRadius: number,StopOnOverlap: EAIOptionFlag,AcceptPartialPath: EAIOptionFlag,bUsePathfinding: boolean,bLockAILogic: boolean,bUseContinuosGoalTracking: boolean): AITask_MoveTo;
-	static C(Other: UObject | any): AITask_MoveTo;
-}
-
-declare class AITask_RunEQS extends AITask { 
-	static Load(ResourceName: string): AITask_RunEQS;
-	static Find(Outer: UObject, ResourceName: string): AITask_RunEQS;
-	static GetDefaultObject(): AITask_RunEQS;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AITask_RunEQS;
-	static RunEQS(Controller: AIController,QueryTemplate: EnvQuery): AITask_RunEQS;
-	static C(Other: UObject | any): AITask_RunEQS;
-}
-
-declare class BehaviorTreeTypes extends UObject { 
-	static Load(ResourceName: string): BehaviorTreeTypes;
-	static Find(Outer: UObject, ResourceName: string): BehaviorTreeTypes;
-	static GetDefaultObject(): BehaviorTreeTypes;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeTypes;
-	static C(Other: UObject | any): BehaviorTreeTypes;
-}
-
-declare class BlackboardKeyType_Bool extends BlackboardKeyType { 
-	static Load(ResourceName: string): BlackboardKeyType_Bool;
-	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Bool;
-	static GetDefaultObject(): BlackboardKeyType_Bool;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Bool;
-	static C(Other: UObject | any): BlackboardKeyType_Bool;
-}
-
-declare class BlackboardKeyType_Class extends BlackboardKeyType { 
-	BaseClass: UnrealEngineClass;
-	static Load(ResourceName: string): BlackboardKeyType_Class;
-	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Class;
-	static GetDefaultObject(): BlackboardKeyType_Class;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Class;
-	static C(Other: UObject | any): BlackboardKeyType_Class;
-}
-
-declare class BlackboardKeyType_Enum extends BlackboardKeyType { 
-	EnumType: Enum;
-	EnumName: string;
-	bIsEnumNameValid: boolean;
-	static Load(ResourceName: string): BlackboardKeyType_Enum;
-	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Enum;
-	static GetDefaultObject(): BlackboardKeyType_Enum;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Enum;
-	static C(Other: UObject | any): BlackboardKeyType_Enum;
-}
-
-declare class BlackboardKeyType_Float extends BlackboardKeyType { 
-	static Load(ResourceName: string): BlackboardKeyType_Float;
-	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Float;
-	static GetDefaultObject(): BlackboardKeyType_Float;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Float;
-	static C(Other: UObject | any): BlackboardKeyType_Float;
-}
-
-declare class BlackboardKeyType_Int extends BlackboardKeyType { 
-	static Load(ResourceName: string): BlackboardKeyType_Int;
-	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Int;
-	static GetDefaultObject(): BlackboardKeyType_Int;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Int;
-	static C(Other: UObject | any): BlackboardKeyType_Int;
-}
-
-declare class BlackboardKeyType_Name extends BlackboardKeyType { 
-	static Load(ResourceName: string): BlackboardKeyType_Name;
-	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Name;
-	static GetDefaultObject(): BlackboardKeyType_Name;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Name;
-	static C(Other: UObject | any): BlackboardKeyType_Name;
-}
-
-declare class BlackboardKeyType_NativeEnum extends BlackboardKeyType { 
-	EnumName: string;
-	EnumType: Enum;
-	static Load(ResourceName: string): BlackboardKeyType_NativeEnum;
-	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_NativeEnum;
-	static GetDefaultObject(): BlackboardKeyType_NativeEnum;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_NativeEnum;
-	static C(Other: UObject | any): BlackboardKeyType_NativeEnum;
-}
-
-declare class BlackboardKeyType_Object extends BlackboardKeyType { 
-	BaseClass: UnrealEngineClass;
-	static Load(ResourceName: string): BlackboardKeyType_Object;
-	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Object;
-	static GetDefaultObject(): BlackboardKeyType_Object;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Object;
-	static C(Other: UObject | any): BlackboardKeyType_Object;
-}
-
-declare class BlackboardKeyType_Rotator extends BlackboardKeyType { 
-	static Load(ResourceName: string): BlackboardKeyType_Rotator;
-	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Rotator;
-	static GetDefaultObject(): BlackboardKeyType_Rotator;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Rotator;
-	static C(Other: UObject | any): BlackboardKeyType_Rotator;
-}
-
-declare class BlackboardKeyType_String extends BlackboardKeyType { 
-	StringValue: string;
-	static Load(ResourceName: string): BlackboardKeyType_String;
-	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_String;
-	static GetDefaultObject(): BlackboardKeyType_String;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_String;
-	static C(Other: UObject | any): BlackboardKeyType_String;
-}
-
-declare class BlackboardKeyType_Vector extends BlackboardKeyType { 
-	static Load(ResourceName: string): BlackboardKeyType_Vector;
-	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Vector;
-	static GetDefaultObject(): BlackboardKeyType_Vector;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Vector;
-	static C(Other: UObject | any): BlackboardKeyType_Vector;
-}
-
-declare class BTComposite_Selector extends BTCompositeNode { 
-	static Load(ResourceName: string): BTComposite_Selector;
-	static Find(Outer: UObject, ResourceName: string): BTComposite_Selector;
-	static GetDefaultObject(): BTComposite_Selector;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTComposite_Selector;
-	static C(Other: UObject | any): BTComposite_Selector;
-}
-
-declare class BTComposite_Sequence extends BTCompositeNode { 
-	static Load(ResourceName: string): BTComposite_Sequence;
-	static Find(Outer: UObject, ResourceName: string): BTComposite_Sequence;
-	static GetDefaultObject(): BTComposite_Sequence;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTComposite_Sequence;
-	static C(Other: UObject | any): BTComposite_Sequence;
-}
-
-declare type EBTParallelMode = 'AbortBackground' | 'WaitForBackground' | 'EBTParallelMode_MAX';
-declare var EBTParallelMode : { AbortBackground:'AbortBackground',WaitForBackground:'WaitForBackground',EBTParallelMode_MAX:'EBTParallelMode_MAX', };
-declare class BTComposite_SimpleParallel extends BTCompositeNode { 
-	FinishMode: EBTParallelMode;
-	static Load(ResourceName: string): BTComposite_SimpleParallel;
-	static Find(Outer: UObject, ResourceName: string): BTComposite_SimpleParallel;
-	static GetDefaultObject(): BTComposite_SimpleParallel;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTComposite_SimpleParallel;
-	static C(Other: UObject | any): BTComposite_SimpleParallel;
-}
-
-declare class BTDecorator_BlackboardBase extends BTDecorator { 
-	BlackboardKey: BlackboardKeySelector;
-	static Load(ResourceName: string): BTDecorator_BlackboardBase;
-	static Find(Outer: UObject, ResourceName: string): BTDecorator_BlackboardBase;
-	static GetDefaultObject(): BTDecorator_BlackboardBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_BlackboardBase;
-	static C(Other: UObject | any): BTDecorator_BlackboardBase;
-}
-
-declare type EBTBlackboardRestart = 'ValueChange' | 'ResultChange' | 'EBTBlackboardRestart_MAX';
-declare var EBTBlackboardRestart : { ValueChange:'ValueChange',ResultChange:'ResultChange',EBTBlackboardRestart_MAX:'EBTBlackboardRestart_MAX', };
-declare type EBasicKeyOperation = 'Set' | 'NotSet' | 'EBasicKeyOperation_MAX';
-declare var EBasicKeyOperation : { Set:'Set',NotSet:'NotSet',EBasicKeyOperation_MAX:'EBasicKeyOperation_MAX', };
-declare type EArithmeticKeyOperation = 'Equal' | 'NotEqual' | 'Less' | 'LessOrEqual' | 'Greater' | 'GreaterOrEqual' | 'EArithmeticKeyOperation_MAX';
-declare var EArithmeticKeyOperation : { Equal:'Equal',NotEqual:'NotEqual',Less:'Less',LessOrEqual:'LessOrEqual',Greater:'Greater',GreaterOrEqual:'GreaterOrEqual',EArithmeticKeyOperation_MAX:'EArithmeticKeyOperation_MAX', };
-declare type ETextKeyOperation = 'Equal' | 'NotEqual' | 'Contain' | 'NotContain' | 'ETextKeyOperation_MAX';
-declare var ETextKeyOperation : { Equal:'Equal',NotEqual:'NotEqual',Contain:'Contain',NotContain:'NotContain',ETextKeyOperation_MAX:'ETextKeyOperation_MAX', };
-declare class BTDecorator_Blackboard extends BTDecorator_BlackboardBase { 
-	IntValue: number;
-	FloatValue: number;
-	StringValue: string;
-	CachedDescription: string;
-	OperationType: number;
-	NotifyObserver: EBTBlackboardRestart;
-	BasicOperation: EBasicKeyOperation;
-	ArithmeticOperation: EArithmeticKeyOperation;
-	TextOperation: ETextKeyOperation;
-	static Load(ResourceName: string): BTDecorator_Blackboard;
-	static Find(Outer: UObject, ResourceName: string): BTDecorator_Blackboard;
-	static GetDefaultObject(): BTDecorator_Blackboard;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_Blackboard;
-	static C(Other: UObject | any): BTDecorator_Blackboard;
-}
-
-declare type EBTNodeResult = 'Succeeded' | 'Failed' | 'Aborted' | 'InProgress' | 'EBTNodeResult_MAX';
-declare var EBTNodeResult : { Succeeded:'Succeeded',Failed:'Failed',Aborted:'Aborted',InProgress:'InProgress',EBTNodeResult_MAX:'EBTNodeResult_MAX', };
-declare class BTDecorator_BlueprintBase extends BTDecorator { 
-	AIOwner: AIController;
-	ActorOwner: Actor;
-	ObservedKeyNames: string[];
-	bShowPropertyDetails: boolean;
-	bCheckConditionOnlyBlackBoardChanges: boolean;
-	bIsObservingBB: boolean;
-	static Load(ResourceName: string): BTDecorator_BlueprintBase;
-	static Find(Outer: UObject, ResourceName: string): BTDecorator_BlueprintBase;
-	static GetDefaultObject(): BTDecorator_BlueprintBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_BlueprintBase;
-	ReceiveTickAI(OwnerController: AIController,ControlledPawn: Pawn,DeltaSeconds: number): void;
-	ReceiveTick(OwnerActor: Actor,DeltaSeconds: number): void;
-	ReceiveObserverDeactivatedAI(OwnerController: AIController,ControlledPawn: Pawn): void;
-	ReceiveObserverDeactivated(OwnerActor: Actor): void;
-	ReceiveObserverActivatedAI(OwnerController: AIController,ControlledPawn: Pawn): void;
-	ReceiveObserverActivated(OwnerActor: Actor): void;
-	ReceiveExecutionStartAI(OwnerController: AIController,ControlledPawn: Pawn): void;
-	ReceiveExecutionStart(OwnerActor: Actor): void;
-	ReceiveExecutionFinishAI(OwnerController: AIController,ControlledPawn: Pawn,NodeResult: EBTNodeResult): void;
-	ReceiveExecutionFinish(OwnerActor: Actor,NodeResult: EBTNodeResult): void;
-	PerformConditionCheckAI(OwnerController: AIController,ControlledPawn: Pawn): boolean;
-	PerformConditionCheck(OwnerActor: Actor): boolean;
-	IsDecoratorObserverActive(): boolean;
-	IsDecoratorExecutionActive(): boolean;
-	static C(Other: UObject | any): BTDecorator_BlueprintBase;
-}
-
-declare type EGameplayContainerMatchType = 'Any' | 'All' | 'EGameplayContainerMatchType_MAX';
-declare var EGameplayContainerMatchType : { Any:'Any',All:'All',EGameplayContainerMatchType_MAX:'EGameplayContainerMatchType_MAX', };
-declare class BTDecorator_CheckGameplayTagsOnActor extends BTDecorator { 
-	ActorToCheck: BlackboardKeySelector;
-	TagsToMatch: EGameplayContainerMatchType;
-	GameplayTags: GameplayTagContainer;
-	CachedDescription: string;
-	static Load(ResourceName: string): BTDecorator_CheckGameplayTagsOnActor;
-	static Find(Outer: UObject, ResourceName: string): BTDecorator_CheckGameplayTagsOnActor;
-	static GetDefaultObject(): BTDecorator_CheckGameplayTagsOnActor;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_CheckGameplayTagsOnActor;
-	static C(Other: UObject | any): BTDecorator_CheckGameplayTagsOnActor;
-}
-
-declare type EBlackBoardEntryComparison = 'Equal' | 'NotEqual' | 'EBlackBoardEntryComparison_MAX';
-declare var EBlackBoardEntryComparison : { Equal:'Equal',NotEqual:'NotEqual',EBlackBoardEntryComparison_MAX:'EBlackBoardEntryComparison_MAX', };
-declare class BTDecorator_CompareBBEntries extends BTDecorator { 
-	Operator: EBlackBoardEntryComparison;
-	BlackboardKeyA: BlackboardKeySelector;
-	BlackboardKeyB: BlackboardKeySelector;
-	static Load(ResourceName: string): BTDecorator_CompareBBEntries;
-	static Find(Outer: UObject, ResourceName: string): BTDecorator_CompareBBEntries;
-	static GetDefaultObject(): BTDecorator_CompareBBEntries;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_CompareBBEntries;
-	static C(Other: UObject | any): BTDecorator_CompareBBEntries;
-}
-
-declare class BTDecorator_ConditionalLoop extends BTDecorator_Blackboard { 
-	static Load(ResourceName: string): BTDecorator_ConditionalLoop;
-	static Find(Outer: UObject, ResourceName: string): BTDecorator_ConditionalLoop;
-	static GetDefaultObject(): BTDecorator_ConditionalLoop;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_ConditionalLoop;
-	static C(Other: UObject | any): BTDecorator_ConditionalLoop;
-}
-
-declare class BTDecorator_ConeCheck extends BTDecorator { 
-	ConeHalfAngle: number;
-	ConeOrigin: BlackboardKeySelector;
-	ConeDirection: BlackboardKeySelector;
-	Observed: BlackboardKeySelector;
-	static Load(ResourceName: string): BTDecorator_ConeCheck;
-	static Find(Outer: UObject, ResourceName: string): BTDecorator_ConeCheck;
-	static GetDefaultObject(): BTDecorator_ConeCheck;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_ConeCheck;
-	static C(Other: UObject | any): BTDecorator_ConeCheck;
-}
-
-declare class BTDecorator_Cooldown extends BTDecorator { 
-	CoolDownTime: number;
-	static Load(ResourceName: string): BTDecorator_Cooldown;
-	static Find(Outer: UObject, ResourceName: string): BTDecorator_Cooldown;
-	static GetDefaultObject(): BTDecorator_Cooldown;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_Cooldown;
-	static C(Other: UObject | any): BTDecorator_Cooldown;
-}
-
-declare type EPathExistanceQueryType = 'NavmeshRaycast2D' | 'HierarchicalQuery' | 'RegularPathFinding' | 'EPathExistanceQueryType_MAX';
-declare var EPathExistanceQueryType : { NavmeshRaycast2D:'NavmeshRaycast2D',HierarchicalQuery:'HierarchicalQuery',RegularPathFinding:'RegularPathFinding',EPathExistanceQueryType_MAX:'EPathExistanceQueryType_MAX', };
-declare class BTDecorator_DoesPathExist extends BTDecorator { 
-	BlackboardKeyA: BlackboardKeySelector;
-	BlackboardKeyB: BlackboardKeySelector;
-	bUseSelf: boolean;
-	PathQueryType: EPathExistanceQueryType;
-	FilterClass: UnrealEngineClass;
-	static Load(ResourceName: string): BTDecorator_DoesPathExist;
-	static Find(Outer: UObject, ResourceName: string): BTDecorator_DoesPathExist;
-	static GetDefaultObject(): BTDecorator_DoesPathExist;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_DoesPathExist;
-	static C(Other: UObject | any): BTDecorator_DoesPathExist;
-}
-
-declare class BTDecorator_ForceSuccess extends BTDecorator { 
-	static Load(ResourceName: string): BTDecorator_ForceSuccess;
-	static Find(Outer: UObject, ResourceName: string): BTDecorator_ForceSuccess;
-	static GetDefaultObject(): BTDecorator_ForceSuccess;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_ForceSuccess;
-	static C(Other: UObject | any): BTDecorator_ForceSuccess;
-}
-
-declare type FAIDistanceType = 'Distance3D' | 'Distance2D' | 'DistanceZ' | 'MAX';
-declare var FAIDistanceType : { Distance3D:'Distance3D',Distance2D:'Distance2D',DistanceZ:'DistanceZ',MAX:'MAX', };
-declare class BTDecorator_IsAtLocation extends BTDecorator_BlackboardBase { 
-	AcceptableRadius: number;
-	ParametrizedAcceptableRadius: AIDataProviderFloatValue;
-	GeometricDistanceType: FAIDistanceType;
-	bUseParametrizedRadius: boolean;
-	bUseNavAgentGoalLocation: boolean;
-	bPathFindingBasedTest: boolean;
-	static Load(ResourceName: string): BTDecorator_IsAtLocation;
-	static Find(Outer: UObject, ResourceName: string): BTDecorator_IsAtLocation;
-	static GetDefaultObject(): BTDecorator_IsAtLocation;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_IsAtLocation;
-	static C(Other: UObject | any): BTDecorator_IsAtLocation;
-}
-
-declare class BTDecorator_IsBBEntryOfClass extends BTDecorator_BlackboardBase { 
-	TestClass: UnrealEngineClass;
-	static Load(ResourceName: string): BTDecorator_IsBBEntryOfClass;
-	static Find(Outer: UObject, ResourceName: string): BTDecorator_IsBBEntryOfClass;
-	static GetDefaultObject(): BTDecorator_IsBBEntryOfClass;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_IsBBEntryOfClass;
-	static C(Other: UObject | any): BTDecorator_IsBBEntryOfClass;
-}
-
-declare class BTDecorator_KeepInCone extends BTDecorator { 
-	ConeHalfAngle: number;
-	ConeOrigin: BlackboardKeySelector;
-	Observed: BlackboardKeySelector;
-	bUseSelfAsOrigin: boolean;
-	bUseSelfAsObserved: boolean;
-	static Load(ResourceName: string): BTDecorator_KeepInCone;
-	static Find(Outer: UObject, ResourceName: string): BTDecorator_KeepInCone;
-	static GetDefaultObject(): BTDecorator_KeepInCone;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_KeepInCone;
-	static C(Other: UObject | any): BTDecorator_KeepInCone;
-}
-
-declare class BTDecorator_Loop extends BTDecorator { 
-	NumLoops: number;
-	bInfiniteLoop: boolean;
-	InfiniteLoopTimeoutTime: number;
-	static Load(ResourceName: string): BTDecorator_Loop;
-	static Find(Outer: UObject, ResourceName: string): BTDecorator_Loop;
-	static GetDefaultObject(): BTDecorator_Loop;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_Loop;
-	static C(Other: UObject | any): BTDecorator_Loop;
-}
-
-declare class BTDecorator_ReachedMoveGoal extends BTDecorator { 
-	static Load(ResourceName: string): BTDecorator_ReachedMoveGoal;
-	static Find(Outer: UObject, ResourceName: string): BTDecorator_ReachedMoveGoal;
-	static GetDefaultObject(): BTDecorator_ReachedMoveGoal;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_ReachedMoveGoal;
-	static C(Other: UObject | any): BTDecorator_ReachedMoveGoal;
-}
-
-declare class BTDecorator_SetTagCooldown extends BTDecorator { 
-	CooldownTag: GameplayTag;
-	CooldownDuration: number;
-	bAddToExistingDuration: boolean;
-	static Load(ResourceName: string): BTDecorator_SetTagCooldown;
-	static Find(Outer: UObject, ResourceName: string): BTDecorator_SetTagCooldown;
-	static GetDefaultObject(): BTDecorator_SetTagCooldown;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_SetTagCooldown;
-	static C(Other: UObject | any): BTDecorator_SetTagCooldown;
-}
-
-declare class BTDecorator_TagCooldown extends BTDecorator { 
-	CooldownTag: GameplayTag;
-	CooldownDuration: number;
-	bAddToExistingDuration: boolean;
-	bActivatesCooldown: boolean;
-	static Load(ResourceName: string): BTDecorator_TagCooldown;
-	static Find(Outer: UObject, ResourceName: string): BTDecorator_TagCooldown;
-	static GetDefaultObject(): BTDecorator_TagCooldown;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_TagCooldown;
-	static C(Other: UObject | any): BTDecorator_TagCooldown;
-}
-
-declare class BTDecorator_TimeLimit extends BTDecorator { 
-	TimeLimit: number;
-	static Load(ResourceName: string): BTDecorator_TimeLimit;
-	static Find(Outer: UObject, ResourceName: string): BTDecorator_TimeLimit;
-	static GetDefaultObject(): BTDecorator_TimeLimit;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_TimeLimit;
-	static C(Other: UObject | any): BTDecorator_TimeLimit;
-}
-
-declare class BTFunctionLibrary extends BlueprintFunctionLibrary { 
-	static Load(ResourceName: string): BTFunctionLibrary;
-	static Find(Outer: UObject, ResourceName: string): BTFunctionLibrary;
-	static GetDefaultObject(): BTFunctionLibrary;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTFunctionLibrary;
-	static StopUsingExternalEvent(NodeOwner: BTNode): void;
-	static StartUsingExternalEvent(NodeOwner: BTNode,OwningActor: Actor): void;
-	static SetBlackboardValueAsVector(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: Vector): void;
-	static SetBlackboardValueAsString(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: string): void;
-	static SetBlackboardValueAsRotator(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: Rotator): void;
-	static SetBlackboardValueAsObject(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: UObject): void;
-	static SetBlackboardValueAsName(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: string): void;
-	static SetBlackboardValueAsInt(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: number): void;
-	static SetBlackboardValueAsFloat(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: number): void;
-	static SetBlackboardValueAsEnum(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: number): void;
-	static SetBlackboardValueAsClass(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: UnrealEngineClass): void;
-	static SetBlackboardValueAsBool(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: boolean): void;
-	static GetOwnersBlackboard(NodeOwner: BTNode): BlackboardComponent;
-	static GetOwnerComponent(NodeOwner: BTNode): BehaviorTreeComponent;
-	static GetBlackboardValueAsVector(NodeOwner: BTNode,Key: BlackboardKeySelector): Vector;
-	static GetBlackboardValueAsString(NodeOwner: BTNode,Key: BlackboardKeySelector): string;
-	static GetBlackboardValueAsRotator(NodeOwner: BTNode,Key: BlackboardKeySelector): Rotator;
-	static GetBlackboardValueAsObject(NodeOwner: BTNode,Key: BlackboardKeySelector): UObject;
-	static GetBlackboardValueAsName(NodeOwner: BTNode,Key: BlackboardKeySelector): string;
-	static GetBlackboardValueAsInt(NodeOwner: BTNode,Key: BlackboardKeySelector): number;
-	static GetBlackboardValueAsFloat(NodeOwner: BTNode,Key: BlackboardKeySelector): number;
-	static GetBlackboardValueAsEnum(NodeOwner: BTNode,Key: BlackboardKeySelector): number;
-	static GetBlackboardValueAsClass(NodeOwner: BTNode,Key: BlackboardKeySelector): UnrealEngineClass;
-	static GetBlackboardValueAsBool(NodeOwner: BTNode,Key: BlackboardKeySelector): boolean;
-	static GetBlackboardValueAsActor(NodeOwner: BTNode,Key: BlackboardKeySelector): Actor;
-	static ClearBlackboardValueAsVector(NodeOwner: BTNode,Key: BlackboardKeySelector): void;
-	static ClearBlackboardValue(NodeOwner: BTNode,Key: BlackboardKeySelector): void;
-	static C(Other: UObject | any): BTFunctionLibrary;
+declare class UserDefinedImageCaptureProtocol extends UserDefinedCaptureProtocol { 
+	Format: EDesiredImageFormat;
+	bEnableCompression: boolean;
+	CompressionQuality: number;
+	static Load(ResourceName: string): UserDefinedImageCaptureProtocol;
+	static Find(Outer: UObject, ResourceName: string): UserDefinedImageCaptureProtocol;
+	static GetDefaultObject(): UserDefinedImageCaptureProtocol;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserDefinedImageCaptureProtocol;
+	WriteImageToDisk(PixelData: CapturedPixels,StreamID: CapturedPixelsID,FrameMetrics: FrameMetrics,bCopyImageData: boolean): void;
+	GenerateFilenameForCurrentFrame(): string;
+	GenerateFilenameForBuffer(Buffer: Texture,StreamID: CapturedPixelsID): string;
+	static C(Other: UObject | any): UserDefinedImageCaptureProtocol;
 }
 
-declare class BTService_BlackboardBase extends BTService { 
-	BlackboardKey: BlackboardKeySelector;
-	static Load(ResourceName: string): BTService_BlackboardBase;
-	static Find(Outer: UObject, ResourceName: string): BTService_BlackboardBase;
-	static GetDefaultObject(): BTService_BlackboardBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTService_BlackboardBase;
-	static C(Other: UObject | any): BTService_BlackboardBase;
+declare class VideoCaptureProtocol extends FrameGrabberProtocol { 
+	bUseCompression: boolean;
+	CompressionQuality: number;
+	static Load(ResourceName: string): VideoCaptureProtocol;
+	static Find(Outer: UObject, ResourceName: string): VideoCaptureProtocol;
+	static GetDefaultObject(): VideoCaptureProtocol;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VideoCaptureProtocol;
+	static C(Other: UObject | any): VideoCaptureProtocol;
 }
 
-declare class BTService_BlueprintBase extends BTService { 
-	AIOwner: AIController;
-	ActorOwner: Actor;
-	bShowPropertyDetails: boolean;
-	bShowEventDetails: boolean;
-	static Load(ResourceName: string): BTService_BlueprintBase;
-	static Find(Outer: UObject, ResourceName: string): BTService_BlueprintBase;
-	static GetDefaultObject(): BTService_BlueprintBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTService_BlueprintBase;
-	ReceiveTickAI(OwnerController: AIController,ControlledPawn: Pawn,DeltaSeconds: number): void;
-	ReceiveTick(OwnerActor: Actor,DeltaSeconds: number): void;
-	ReceiveSearchStartAI(OwnerController: AIController,ControlledPawn: Pawn): void;
-	ReceiveSearchStart(OwnerActor: Actor): void;
-	ReceiveDeactivationAI(OwnerController: AIController,ControlledPawn: Pawn): void;
-	ReceiveDeactivation(OwnerActor: Actor): void;
-	ReceiveActivationAI(OwnerController: AIController,ControlledPawn: Pawn): void;
-	ReceiveActivation(OwnerActor: Actor): void;
-	IsServiceActive(): boolean;
-	static C(Other: UObject | any): BTService_BlueprintBase;
-}
-
-declare class BTService_DefaultFocus extends BTService_BlackboardBase { 
-	FocusPriority: number;
-	static Load(ResourceName: string): BTService_DefaultFocus;
-	static Find(Outer: UObject, ResourceName: string): BTService_DefaultFocus;
-	static GetDefaultObject(): BTService_DefaultFocus;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTService_DefaultFocus;
-	static C(Other: UObject | any): BTService_DefaultFocus;
-}
-
-declare type EAIParamType = 'Float' | 'Int' | 'Bool' | 'MAX';
-declare var EAIParamType : { Float:'Float',Int:'Int',Bool:'Bool',MAX:'MAX', };
-declare class AIDynamicParam { 
-	ParamName: string;
-	ParamType: EAIParamType;
-	Value: number;
-	BBKey: BlackboardKeySelector;
-	clone() : AIDynamicParam;
-	static C(Other: UObject | any): AIDynamicParam;
+declare class LevelSequenceBurnInInitSettings extends UObject { 
+	static Load(ResourceName: string): LevelSequenceBurnInInitSettings;
+	static Find(Outer: UObject, ResourceName: string): LevelSequenceBurnInInitSettings;
+	static GetDefaultObject(): LevelSequenceBurnInInitSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelSequenceBurnInInitSettings;
+	static C(Other: UObject | any): LevelSequenceBurnInInitSettings;
 }
 
-declare class EQSParametrizedQueryExecutionRequest { 
-	QueryTemplate: EnvQuery;
-	QueryConfig: AIDynamicParam[];
-	EQSQueryBlackboardKey: BlackboardKeySelector;
-	RunMode: EEnvQueryRunMode;
-	bUseBBKeyForQueryTemplate: boolean;
-	clone() : EQSParametrizedQueryExecutionRequest;
-	static C(Other: UObject | any): EQSParametrizedQueryExecutionRequest;
+declare class LevelSequenceBurnInOptions extends UObject { 
+	bUseBurnIn: boolean;
+	BurnInClass: SoftClassPath;
+	Settings: LevelSequenceBurnInInitSettings;
+	static Load(ResourceName: string): LevelSequenceBurnInOptions;
+	static Find(Outer: UObject, ResourceName: string): LevelSequenceBurnInOptions;
+	static GetDefaultObject(): LevelSequenceBurnInOptions;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelSequenceBurnInOptions;
+	SetBurnIn(InBurnInClass: SoftClassPath): void;
+	static C(Other: UObject | any): LevelSequenceBurnInOptions;
 }
 
-declare class BTService_RunEQS extends BTService_BlackboardBase { 
-	EQSRequest: EQSParametrizedQueryExecutionRequest;
-	static Load(ResourceName: string): BTService_RunEQS;
-	static Find(Outer: UObject, ResourceName: string): BTService_RunEQS;
-	static GetDefaultObject(): BTService_RunEQS;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTService_RunEQS;
-	static C(Other: UObject | any): BTService_RunEQS;
+declare class AutomatedLevelSequenceCapture extends MovieSceneCapture { 
+	LevelSequenceAsset: SoftObjectPath;
+	ShotName: string;
+	bUseCustomStartFrame: boolean;
+	CustomStartFrame: FrameNumber;
+	bUseCustomEndFrame: boolean;
+	CustomEndFrame: FrameNumber;
+	WarmUpFrameCount: number;
+	DelayBeforeWarmUp: number;
+	DelayBeforeShotWarmUp: number;
+	DelayEveryFrame: number;
+	BurnInOptions: LevelSequenceBurnInOptions;
+	bWriteEditDecisionList: boolean;
+	bWriteFinalCutProXML: boolean;
+	LevelSequenceActor: any;
+	static Load(ResourceName: string): AutomatedLevelSequenceCapture;
+	static Find(Outer: UObject, ResourceName: string): AutomatedLevelSequenceCapture;
+	static GetDefaultObject(): AutomatedLevelSequenceCapture;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomatedLevelSequenceCapture;
+	static C(Other: UObject | any): AutomatedLevelSequenceCapture;
 }
 
-declare class BTTask_BlackboardBase extends BTTaskNode { 
-	BlackboardKey: BlackboardKeySelector;
-	static Load(ResourceName: string): BTTask_BlackboardBase;
-	static Find(Outer: UObject, ResourceName: string): BTTask_BlackboardBase;
-	static GetDefaultObject(): BTTask_BlackboardBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_BlackboardBase;
-	static C(Other: UObject | any): BTTask_BlackboardBase;
+declare class MovieSceneTangentData { 
+	ArriveTangent: number;
+	LeaveTangent: number;
+	TangentWeightMode: ERichCurveTangentWeightMode;
+	ArriveTangentWeight: number;
+	LeaveTangentWeight: number;
+	clone() : MovieSceneTangentData;
+	static C(Other: UObject | any): MovieSceneTangentData;
 }
 
-declare class BTTask_BlueprintBase extends BTTaskNode { 
-	AIOwner: AIController;
-	ActorOwner: Actor;
-	bShowPropertyDetails: boolean;
-	static Load(ResourceName: string): BTTask_BlueprintBase;
-	static Find(Outer: UObject, ResourceName: string): BTTask_BlueprintBase;
-	static GetDefaultObject(): BTTask_BlueprintBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_BlueprintBase;
-	SetFinishOnMessageWithId(MessageName: string,RequestID: number): void;
-	SetFinishOnMessage(MessageName: string): void;
-	ReceiveTickAI(OwnerController: AIController,ControlledPawn: Pawn,DeltaSeconds: number): void;
-	ReceiveTick(OwnerActor: Actor,DeltaSeconds: number): void;
-	ReceiveExecuteAI(OwnerController: AIController,ControlledPawn: Pawn): void;
-	ReceiveExecute(OwnerActor: Actor): void;
-	ReceiveAbortAI(OwnerController: AIController,ControlledPawn: Pawn): void;
-	ReceiveAbort(OwnerActor: Actor): void;
-	IsTaskExecuting(): boolean;
-	IsTaskAborting(): boolean;
-	FinishExecute(bSuccess: boolean): void;
-	FinishAbort(): void;
-	static C(Other: UObject | any): BTTask_BlueprintBase;
-}
-
-declare class BTTask_FinishWithResult extends BTTaskNode { 
-	Result: EBTNodeResult;
-	static Load(ResourceName: string): BTTask_FinishWithResult;
-	static Find(Outer: UObject, ResourceName: string): BTTask_FinishWithResult;
-	static GetDefaultObject(): BTTask_FinishWithResult;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_FinishWithResult;
-	static C(Other: UObject | any): BTTask_FinishWithResult;
-}
-
-declare class BTTask_GameplayTaskBase extends BTTaskNode { 
-	bWaitForGameplayTask: boolean;
-	static Load(ResourceName: string): BTTask_GameplayTaskBase;
-	static Find(Outer: UObject, ResourceName: string): BTTask_GameplayTaskBase;
-	static GetDefaultObject(): BTTask_GameplayTaskBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_GameplayTaskBase;
-	static C(Other: UObject | any): BTTask_GameplayTaskBase;
-}
-
-declare class BTTask_MakeNoise extends BTTaskNode { 
-	Loudnes: number;
-	static Load(ResourceName: string): BTTask_MakeNoise;
-	static Find(Outer: UObject, ResourceName: string): BTTask_MakeNoise;
-	static GetDefaultObject(): BTTask_MakeNoise;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_MakeNoise;
-	static C(Other: UObject | any): BTTask_MakeNoise;
-}
-
-declare class BTTask_MoveTo extends BTTask_BlackboardBase { 
-	AcceptableRadius: number;
-	FilterClass: UnrealEngineClass;
-	ObservedBlackboardValueTolerance: number;
-	bObserveBlackboardValue: boolean;
-	bAllowStrafe: boolean;
-	bAllowPartialPath: boolean;
-	bTrackMovingGoal: boolean;
-	bProjectGoalLocation: boolean;
-	bReachTestIncludesAgentRadius: boolean;
-	bReachTestIncludesGoalRadius: boolean;
-	bStopOnOverlap: boolean;
-	bStopOnOverlapNeedsUpdate: boolean;
-	static Load(ResourceName: string): BTTask_MoveTo;
-	static Find(Outer: UObject, ResourceName: string): BTTask_MoveTo;
-	static GetDefaultObject(): BTTask_MoveTo;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_MoveTo;
-	static C(Other: UObject | any): BTTask_MoveTo;
-}
-
-declare class BTTask_MoveDirectlyToward extends BTTask_MoveTo { 
-	bDisablePathUpdateOnGoalLocationChange: boolean;
-	bProjectVectorGoalToNavigation: boolean;
-	bUpdatedDeprecatedProperties: boolean;
-	static Load(ResourceName: string): BTTask_MoveDirectlyToward;
-	static Find(Outer: UObject, ResourceName: string): BTTask_MoveDirectlyToward;
-	static GetDefaultObject(): BTTask_MoveDirectlyToward;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_MoveDirectlyToward;
-	static C(Other: UObject | any): BTTask_MoveDirectlyToward;
-}
-
-declare class BTTask_PawnActionBase extends BTTaskNode { 
-	static Load(ResourceName: string): BTTask_PawnActionBase;
-	static Find(Outer: UObject, ResourceName: string): BTTask_PawnActionBase;
-	static GetDefaultObject(): BTTask_PawnActionBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_PawnActionBase;
-	static C(Other: UObject | any): BTTask_PawnActionBase;
-}
-
-declare class BTTask_PlayAnimation extends BTTaskNode { 
-	AnimationToPlay: AnimationAsset;
-	bLooping: boolean;
-	bNonBlocking: boolean;
-	MyOwnerComp: BehaviorTreeComponent;
-	CachedSkelMesh: SkeletalMeshComponent;
-	static Load(ResourceName: string): BTTask_PlayAnimation;
-	static Find(Outer: UObject, ResourceName: string): BTTask_PlayAnimation;
-	static GetDefaultObject(): BTTask_PlayAnimation;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_PlayAnimation;
-	static C(Other: UObject | any): BTTask_PlayAnimation;
-}
-
-declare class BTTask_PlaySound extends BTTaskNode { 
-	SoundToPlay: SoundCue;
-	static Load(ResourceName: string): BTTask_PlaySound;
-	static Find(Outer: UObject, ResourceName: string): BTTask_PlaySound;
-	static GetDefaultObject(): BTTask_PlaySound;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_PlaySound;
-	static C(Other: UObject | any): BTTask_PlaySound;
-}
-
-declare class BTTask_PushPawnAction extends BTTask_PawnActionBase { 
-	Action: PawnAction;
-	static Load(ResourceName: string): BTTask_PushPawnAction;
-	static Find(Outer: UObject, ResourceName: string): BTTask_PushPawnAction;
-	static GetDefaultObject(): BTTask_PushPawnAction;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_PushPawnAction;
-	static C(Other: UObject | any): BTTask_PushPawnAction;
-}
-
-declare class BTTask_RotateToFaceBBEntry extends BTTask_BlackboardBase { 
-	Precision: number;
-	static Load(ResourceName: string): BTTask_RotateToFaceBBEntry;
-	static Find(Outer: UObject, ResourceName: string): BTTask_RotateToFaceBBEntry;
-	static GetDefaultObject(): BTTask_RotateToFaceBBEntry;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_RotateToFaceBBEntry;
-	static C(Other: UObject | any): BTTask_RotateToFaceBBEntry;
-}
-
-declare class BTTask_RunBehavior extends BTTaskNode { 
-	BehaviorAsset: BehaviorTree;
-	static Load(ResourceName: string): BTTask_RunBehavior;
-	static Find(Outer: UObject, ResourceName: string): BTTask_RunBehavior;
-	static GetDefaultObject(): BTTask_RunBehavior;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_RunBehavior;
-	static C(Other: UObject | any): BTTask_RunBehavior;
-}
-
-declare class BTTask_RunBehaviorDynamic extends BTTaskNode { 
-	InjectionTag: GameplayTag;
-	DefaultBehaviorAsset: BehaviorTree;
-	BehaviorAsset: BehaviorTree;
-	static Load(ResourceName: string): BTTask_RunBehaviorDynamic;
-	static Find(Outer: UObject, ResourceName: string): BTTask_RunBehaviorDynamic;
-	static GetDefaultObject(): BTTask_RunBehaviorDynamic;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_RunBehaviorDynamic;
-	static C(Other: UObject | any): BTTask_RunBehaviorDynamic;
-}
-
-declare class EnvNamedValue { 
-	ParamName: string;
-	ParamType: EAIParamType;
+declare class MovieSceneFloatValue { 
 	Value: number;
-	clone() : EnvNamedValue;
-	static C(Other: UObject | any): EnvNamedValue;
-}
-
-declare class BTTask_RunEQSQuery extends BTTask_BlackboardBase { 
-	QueryTemplate: EnvQuery;
-	QueryParams: EnvNamedValue[];
-	QueryConfig: AIDynamicParam[];
-	RunMode: EEnvQueryRunMode;
-	EQSQueryBlackboardKey: BlackboardKeySelector;
-	bUseBBKey: boolean;
-	EQSRequest: EQSParametrizedQueryExecutionRequest;
-	static Load(ResourceName: string): BTTask_RunEQSQuery;
-	static Find(Outer: UObject, ResourceName: string): BTTask_RunEQSQuery;
-	static GetDefaultObject(): BTTask_RunEQSQuery;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_RunEQSQuery;
-	static C(Other: UObject | any): BTTask_RunEQSQuery;
-}
-
-declare class BTTask_SetTagCooldown extends BTTaskNode { 
-	CooldownTag: GameplayTag;
-	bAddToExistingDuration: boolean;
-	CooldownDuration: number;
-	static Load(ResourceName: string): BTTask_SetTagCooldown;
-	static Find(Outer: UObject, ResourceName: string): BTTask_SetTagCooldown;
-	static GetDefaultObject(): BTTask_SetTagCooldown;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_SetTagCooldown;
-	static C(Other: UObject | any): BTTask_SetTagCooldown;
-}
-
-declare class BTTask_Wait extends BTTaskNode { 
-	WaitTime: number;
-	RandomDeviation: number;
-	static Load(ResourceName: string): BTTask_Wait;
-	static Find(Outer: UObject, ResourceName: string): BTTask_Wait;
-	static GetDefaultObject(): BTTask_Wait;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_Wait;
-	static C(Other: UObject | any): BTTask_Wait;
+	InterpMode: ERichCurveInterpMode;
+	TangentMode: ERichCurveTangentMode;
+	Tangent: MovieSceneTangentData;
+	clone() : MovieSceneFloatValue;
+	static C(Other: UObject | any): MovieSceneFloatValue;
 }
 
-declare class BTTask_WaitBlackboardTime extends BTTask_Wait { 
-	BlackboardKey: BlackboardKeySelector;
-	static Load(ResourceName: string): BTTask_WaitBlackboardTime;
-	static Find(Outer: UObject, ResourceName: string): BTTask_WaitBlackboardTime;
-	static GetDefaultObject(): BTTask_WaitBlackboardTime;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_WaitBlackboardTime;
-	static C(Other: UObject | any): BTTask_WaitBlackboardTime;
+declare class FloatChannelKeyProxy extends UObject { 
+	Time: FrameNumber;
+	Value: MovieSceneFloatValue;
+	static Load(ResourceName: string): FloatChannelKeyProxy;
+	static Find(Outer: UObject, ResourceName: string): FloatChannelKeyProxy;
+	static GetDefaultObject(): FloatChannelKeyProxy;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FloatChannelKeyProxy;
+	static C(Other: UObject | any): FloatChannelKeyProxy;
 }
 
-declare class CrowdAgentInterface extends Interface { 
-	static Load(ResourceName: string): CrowdAgentInterface;
-	static Find(Outer: UObject, ResourceName: string): CrowdAgentInterface;
-	static GetDefaultObject(): CrowdAgentInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CrowdAgentInterface;
-	static C(Other: UObject | any): CrowdAgentInterface;
+declare class K2Node extends EdGraphNode { 
+	static Load(ResourceName: string): K2Node;
+	static Find(Outer: UObject, ResourceName: string): K2Node;
+	static GetDefaultObject(): K2Node;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node;
+	static C(Other: UObject | any): K2Node;
 }
 
-declare class CrowdFollowingComponent extends PathFollowingComponent { 
-	CharacterMovement: CharacterMovementComponent;
-	CrowdAgentMoveDirection: Vector;
-	AvoidanceGroup: NavAvoidanceMask;
-	GroupsToAvoid: NavAvoidanceMask;
-	GroupsToIgnore: NavAvoidanceMask;
-	static Load(ResourceName: string): CrowdFollowingComponent;
-	static Find(Outer: UObject, ResourceName: string): CrowdFollowingComponent;
-	static GetDefaultObject(): CrowdFollowingComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CrowdFollowingComponent;
-	SuspendCrowdSteering(bSuspend: boolean): void;
-	static C(Other: UObject | any): CrowdFollowingComponent;
+declare type EMovieSceneObjectBindingSpace = 'Local' | 'Root' | 'EMovieSceneObjectBindingSpace_MAX';
+declare var EMovieSceneObjectBindingSpace : { Local:'Local',Root:'Root',EMovieSceneObjectBindingSpace_MAX:'EMovieSceneObjectBindingSpace_MAX', };
+declare class MovieSceneObjectBindingID { 
+	SequenceID: number;
+	Space: EMovieSceneObjectBindingSpace;
+	Guid: Guid;
+	clone() : MovieSceneObjectBindingID;
+	static C(Other: UObject | any): MovieSceneObjectBindingID;
 }
 
-declare class CrowdManagerBase extends UObject { 
-	static Load(ResourceName: string): CrowdManagerBase;
-	static Find(Outer: UObject, ResourceName: string): CrowdManagerBase;
-	static GetDefaultObject(): CrowdManagerBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CrowdManagerBase;
-	static C(Other: UObject | any): CrowdManagerBase;
+declare class K2Node_GetSequenceBinding extends K2Node { 
+	SourceSequence: SoftObjectPath;
+	Binding: MovieSceneObjectBindingID;
+	static Load(ResourceName: string): K2Node_GetSequenceBinding;
+	static Find(Outer: UObject, ResourceName: string): K2Node_GetSequenceBinding;
+	static GetDefaultObject(): K2Node_GetSequenceBinding;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_GetSequenceBinding;
+	static C(Other: UObject | any): K2Node_GetSequenceBinding;
 }
 
-declare class CrowdAvoidanceConfig { 
-	VelocityBias: number;
-	DesiredVelocityWeight: number;
-	CurrentVelocityWeight: number;
-	SideBiasWeight: number;
-	ImpactTimeWeight: number;
-	ImpactTimeRange: number;
-	CustomPatternIdx: number;
-	AdaptiveDivisions: number;
-	AdaptiveRings: number;
-	AdaptiveDepth: number;
-	clone() : CrowdAvoidanceConfig;
-	static C(Other: UObject | any): CrowdAvoidanceConfig;
+declare class MovieSceneToolsPropertyTrackSettings { 
+	ComponentName: string;
+	PropertyName: string;
+	clone() : MovieSceneToolsPropertyTrackSettings;
+	static C(Other: UObject | any): MovieSceneToolsPropertyTrackSettings;
 }
 
-declare class CrowdAvoidanceSamplingPattern { 
-	Angles: number[];
-	Radii: number[];
-	clone() : CrowdAvoidanceSamplingPattern;
-	static C(Other: UObject | any): CrowdAvoidanceSamplingPattern;
+declare class MovieSceneToolsFbxSettings { 
+	FbxPropertyName: string;
+	PropertyPath: MovieSceneToolsPropertyTrackSettings;
+	clone() : MovieSceneToolsFbxSettings;
+	static C(Other: UObject | any): MovieSceneToolsFbxSettings;
 }
 
-declare class CrowdManager extends CrowdManagerBase { 
-	MyNavData: NavigationData;
-	AvoidanceConfig: CrowdAvoidanceConfig[];
-	SamplingPatterns: CrowdAvoidanceSamplingPattern[];
-	MaxAgents: number;
-	MaxAgentRadius: number;
-	MaxAvoidedAgents: number;
-	MaxAvoidedWalls: number;
-	NavmeshCheckInterval: number;
-	PathOptimizationInterval: number;
-	SeparationDirClamp: number;
-	PathOffsetRadiusMultiplier: number;
-	bResolveCollisions: boolean;
-	static Load(ResourceName: string): CrowdManager;
-	static Find(Outer: UObject, ResourceName: string): CrowdManager;
-	static GetDefaultObject(): CrowdManager;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CrowdManager;
-	static C(Other: UObject | any): CrowdManager;
-}
-
-declare class DetourCrowdAIController extends AIController { 
-	static GetDefaultObject(): DetourCrowdAIController;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DetourCrowdAIController;
-	static C(Other: UObject | any): DetourCrowdAIController;
-}
-
-declare class EnvQueryContext_BlueprintBase extends EnvQueryContext { 
-	static Load(ResourceName: string): EnvQueryContext_BlueprintBase;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryContext_BlueprintBase;
-	static GetDefaultObject(): EnvQueryContext_BlueprintBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryContext_BlueprintBase;
-	ProvideSingleLocation(QuerierObject: UObject,QuerierActor: Actor,ResultingLocation?: Vector): {ResultingLocation: Vector};
-	ProvideSingleActor(QuerierObject: UObject,QuerierActor: Actor,ResultingActor?: Actor): {ResultingActor: Actor};
-	ProvideLocationsSet(QuerierObject: UObject,QuerierActor: Actor,ResultingLocationSet?: Vector[]): {ResultingLocationSet: Vector[]};
-	ProvideActorsSet(QuerierObject: UObject,QuerierActor: Actor,ResultingActorsSet?: Actor[]): {ResultingActorsSet: Actor[]};
-	static C(Other: UObject | any): EnvQueryContext_BlueprintBase;
-}
-
-declare class EnvQueryContext_Item extends EnvQueryContext { 
-	static Load(ResourceName: string): EnvQueryContext_Item;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryContext_Item;
-	static GetDefaultObject(): EnvQueryContext_Item;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryContext_Item;
-	static C(Other: UObject | any): EnvQueryContext_Item;
-}
-
-declare class EnvQueryContext_Querier extends EnvQueryContext { 
-	static Load(ResourceName: string): EnvQueryContext_Querier;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryContext_Querier;
-	static GetDefaultObject(): EnvQueryContext_Querier;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryContext_Querier;
-	static C(Other: UObject | any): EnvQueryContext_Querier;
-}
-
-declare class EnvQueryDebugHelpers extends UObject { 
-	static Load(ResourceName: string): EnvQueryDebugHelpers;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryDebugHelpers;
-	static GetDefaultObject(): EnvQueryDebugHelpers;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryDebugHelpers;
-	static C(Other: UObject | any): EnvQueryDebugHelpers;
-}
-
-declare class EnvQueryGenerator_ActorsOfClass extends EnvQueryGenerator { 
-	SearchedActorClass: UnrealEngineClass;
-	GenerateOnlyActorsInRadius: AIDataProviderBoolValue;
-	SearchRadius: AIDataProviderFloatValue;
-	SearchCenter: UnrealEngineClass;
-	static Load(ResourceName: string): EnvQueryGenerator_ActorsOfClass;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_ActorsOfClass;
-	static GetDefaultObject(): EnvQueryGenerator_ActorsOfClass;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_ActorsOfClass;
-	static C(Other: UObject | any): EnvQueryGenerator_ActorsOfClass;
-}
-
-declare class EnvQueryGenerator_BlueprintBase extends EnvQueryGenerator { 
-	GeneratorsActionDescription: string;
-	Context: UnrealEngineClass;
-	GeneratedItemType: UnrealEngineClass;
-	static Load(ResourceName: string): EnvQueryGenerator_BlueprintBase;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_BlueprintBase;
-	static GetDefaultObject(): EnvQueryGenerator_BlueprintBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_BlueprintBase;
-	GetQuerier(): UObject;
-	DoItemGeneration(ContextLocations: Vector[]): void;
-	AddGeneratedVector(GeneratedVector: Vector): void;
-	AddGeneratedActor(GeneratedActor: Actor): void;
-	static C(Other: UObject | any): EnvQueryGenerator_BlueprintBase;
-}
-
-declare class EnvQueryGenerator_Composite extends EnvQueryGenerator { 
-	Generators: EnvQueryGenerator[];
-	bAllowDifferentItemTypes: boolean;
-	bHasMatchingItemType: boolean;
-	ForcedItemType: UnrealEngineClass;
-	static Load(ResourceName: string): EnvQueryGenerator_Composite;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_Composite;
-	static GetDefaultObject(): EnvQueryGenerator_Composite;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_Composite;
-	static C(Other: UObject | any): EnvQueryGenerator_Composite;
-}
-
-declare type EEnvTraceShape = 'Line' | 'Box' | 'Sphere' | 'Capsule' | 'EEnvTraceShape_MAX';
-declare var EEnvTraceShape : { Line:'Line',Box:'Box',Sphere:'Sphere',Capsule:'Capsule',EEnvTraceShape_MAX:'EEnvTraceShape_MAX', };
-declare type EEnvQueryTrace = 'None' | 'Navigation' | 'Geometry' | 'NavigationOverLedges' | 'EEnvQueryTrace_MAX';
-declare var EEnvQueryTrace : { None:'None',Navigation:'Navigation',Geometry:'Geometry',NavigationOverLedges:'NavigationOverLedges',EEnvQueryTrace_MAX:'EEnvQueryTrace_MAX', };
-declare class EnvTraceData { 
-	VersionNum: number;
-	NavigationFilter: UnrealEngineClass;
-	ProjectDown: number;
-	ProjectUp: number;
-	ExtentX: number;
-	ExtentY: number;
-	ExtentZ: number;
-	PostProjectionVerticalOffset: number;
-	TraceChannel: ETraceTypeQuery;
-	SerializedChannel: ECollisionChannel;
-	TraceShape: EEnvTraceShape;
-	TraceMode: EEnvQueryTrace;
-	bTraceComplex: boolean;
-	bOnlyBlockingHits: boolean;
-	bCanTraceOnNavMesh: boolean;
-	bCanTraceOnGeometry: boolean;
-	bCanDisableTrace: boolean;
-	bCanProjectDown: boolean;
-	clone() : EnvTraceData;
-	static C(Other: UObject | any): EnvTraceData;
-}
-
-declare class EnvQueryGenerator_ProjectedPoints extends EnvQueryGenerator { 
-	ProjectionData: EnvTraceData;
-	static Load(ResourceName: string): EnvQueryGenerator_ProjectedPoints;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_ProjectedPoints;
-	static GetDefaultObject(): EnvQueryGenerator_ProjectedPoints;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_ProjectedPoints;
-	static C(Other: UObject | any): EnvQueryGenerator_ProjectedPoints;
-}
-
-declare class EnvQueryGenerator_Cone extends EnvQueryGenerator_ProjectedPoints { 
-	AlignedPointsDistance: AIDataProviderFloatValue;
-	ConeDegrees: AIDataProviderFloatValue;
-	AngleStep: AIDataProviderFloatValue;
-	Range: AIDataProviderFloatValue;
-	CenterActor: UnrealEngineClass;
-	bIncludeContextLocation: boolean;
-	static Load(ResourceName: string): EnvQueryGenerator_Cone;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_Cone;
-	static GetDefaultObject(): EnvQueryGenerator_Cone;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_Cone;
-	static C(Other: UObject | any): EnvQueryGenerator_Cone;
-}
-
-declare class EnvQueryGenerator_CurrentLocation extends EnvQueryGenerator { 
-	QueryContext: UnrealEngineClass;
-	static Load(ResourceName: string): EnvQueryGenerator_CurrentLocation;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_CurrentLocation;
-	static GetDefaultObject(): EnvQueryGenerator_CurrentLocation;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_CurrentLocation;
-	static C(Other: UObject | any): EnvQueryGenerator_CurrentLocation;
-}
-
-declare class AIDataProviderIntValue extends AIDataProviderTypedValue { 
-	DefaultValue: number;
-	clone() : AIDataProviderIntValue;
-	static C(Other: UObject | any): AIDataProviderIntValue;
-}
-
-declare type EEnvDirection = 'TwoPoints' | 'Rotation' | 'EEnvDirection_MAX';
-declare var EEnvDirection : { TwoPoints:'TwoPoints',Rotation:'Rotation',EEnvDirection_MAX:'EEnvDirection_MAX', };
-declare class EnvDirection { 
-	LineFrom: UnrealEngineClass;
-	LineTo: UnrealEngineClass;
-	Rotation: UnrealEngineClass;
-	DirMode: EEnvDirection;
-	clone() : EnvDirection;
-	static C(Other: UObject | any): EnvDirection;
-}
-
-declare class EnvQueryGenerator_Donut extends EnvQueryGenerator_ProjectedPoints { 
-	InnerRadius: AIDataProviderFloatValue;
-	OuterRadius: AIDataProviderFloatValue;
-	NumberOfRings: AIDataProviderIntValue;
-	PointsPerRing: AIDataProviderIntValue;
-	ArcDirection: EnvDirection;
-	ArcAngle: AIDataProviderFloatValue;
-	bUseSpiralPattern: boolean;
-	Center: UnrealEngineClass;
-	bDefineArc: boolean;
-	static Load(ResourceName: string): EnvQueryGenerator_Donut;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_Donut;
-	static GetDefaultObject(): EnvQueryGenerator_Donut;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_Donut;
-	static C(Other: UObject | any): EnvQueryGenerator_Donut;
-}
-
-declare type EPointOnCircleSpacingMethod = 'BySpaceBetween' | 'ByNumberOfPoints' | 'EPointOnCircleSpacingMethod_MAX';
-declare var EPointOnCircleSpacingMethod : { BySpaceBetween:'BySpaceBetween',ByNumberOfPoints:'ByNumberOfPoints',EPointOnCircleSpacingMethod_MAX:'EPointOnCircleSpacingMethod_MAX', };
-declare class EnvQueryGenerator_OnCircle extends EnvQueryGenerator_ProjectedPoints { 
-	CircleRadius: AIDataProviderFloatValue;
-	SpaceBetween: AIDataProviderFloatValue;
-	NumberOfPoints: AIDataProviderIntValue;
-	PointOnCircleSpacingMethod: EPointOnCircleSpacingMethod;
-	ArcDirection: EnvDirection;
-	ArcAngle: AIDataProviderFloatValue;
-	AngleRadians: number;
-	CircleCenter: UnrealEngineClass;
-	bIgnoreAnyContextActorsWhenGeneratingCircle: boolean;
-	CircleCenterZOffset: AIDataProviderFloatValue;
-	TraceData: EnvTraceData;
-	bDefineArc: boolean;
-	static Load(ResourceName: string): EnvQueryGenerator_OnCircle;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_OnCircle;
-	static GetDefaultObject(): EnvQueryGenerator_OnCircle;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_OnCircle;
-	static C(Other: UObject | any): EnvQueryGenerator_OnCircle;
-}
-
-declare class EnvQueryGenerator_SimpleGrid extends EnvQueryGenerator_ProjectedPoints { 
-	GridSize: AIDataProviderFloatValue;
-	SpaceBetween: AIDataProviderFloatValue;
-	GenerateAround: UnrealEngineClass;
-	static Load(ResourceName: string): EnvQueryGenerator_SimpleGrid;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_SimpleGrid;
-	static GetDefaultObject(): EnvQueryGenerator_SimpleGrid;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_SimpleGrid;
-	static C(Other: UObject | any): EnvQueryGenerator_SimpleGrid;
-}
-
-declare class EnvQueryGenerator_PathingGrid extends EnvQueryGenerator_SimpleGrid { 
-	PathToItem: AIDataProviderBoolValue;
-	NavigationFilter: UnrealEngineClass;
-	ScanRangeMultiplier: AIDataProviderFloatValue;
-	static Load(ResourceName: string): EnvQueryGenerator_PathingGrid;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_PathingGrid;
-	static GetDefaultObject(): EnvQueryGenerator_PathingGrid;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_PathingGrid;
-	static C(Other: UObject | any): EnvQueryGenerator_PathingGrid;
-}
-
-declare class EnvQueryItemType_VectorBase extends EnvQueryItemType { 
-	static Load(ResourceName: string): EnvQueryItemType_VectorBase;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryItemType_VectorBase;
-	static GetDefaultObject(): EnvQueryItemType_VectorBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryItemType_VectorBase;
-	static C(Other: UObject | any): EnvQueryItemType_VectorBase;
-}
-
-declare class EnvQueryItemType_ActorBase extends EnvQueryItemType_VectorBase { 
-	static Load(ResourceName: string): EnvQueryItemType_ActorBase;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryItemType_ActorBase;
-	static GetDefaultObject(): EnvQueryItemType_ActorBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryItemType_ActorBase;
-	static C(Other: UObject | any): EnvQueryItemType_ActorBase;
-}
-
-declare class EnvQueryItemType_Actor extends EnvQueryItemType_ActorBase { 
-	static Load(ResourceName: string): EnvQueryItemType_Actor;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryItemType_Actor;
-	static GetDefaultObject(): EnvQueryItemType_Actor;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryItemType_Actor;
-	static C(Other: UObject | any): EnvQueryItemType_Actor;
-}
-
-declare class EnvQueryItemType_Direction extends EnvQueryItemType_VectorBase { 
-	static Load(ResourceName: string): EnvQueryItemType_Direction;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryItemType_Direction;
-	static GetDefaultObject(): EnvQueryItemType_Direction;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryItemType_Direction;
-	static C(Other: UObject | any): EnvQueryItemType_Direction;
-}
-
-declare class EnvQueryItemType_Point extends EnvQueryItemType_VectorBase { 
-	static Load(ResourceName: string): EnvQueryItemType_Point;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryItemType_Point;
-	static GetDefaultObject(): EnvQueryItemType_Point;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryItemType_Point;
-	static C(Other: UObject | any): EnvQueryItemType_Point;
-}
-
-declare type EEnvTestDistance = 'Distance3D' | 'Distance2D' | 'DistanceZ' | 'DistanceAbsoluteZ' | 'EEnvTestDistance_MAX';
-declare var EEnvTestDistance : { Distance3D:'Distance3D',Distance2D:'Distance2D',DistanceZ:'DistanceZ',DistanceAbsoluteZ:'DistanceAbsoluteZ',EEnvTestDistance_MAX:'EEnvTestDistance_MAX', };
-declare class EnvQueryTest_Distance extends EnvQueryTest { 
-	TestMode: EEnvTestDistance;
-	DistanceTo: UnrealEngineClass;
-	static Load(ResourceName: string): EnvQueryTest_Distance;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Distance;
-	static GetDefaultObject(): EnvQueryTest_Distance;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Distance;
-	static C(Other: UObject | any): EnvQueryTest_Distance;
-}
-
-declare type EEnvTestDot = 'Dot3D' | 'Dot2D' | 'EEnvTestDot_MAX';
-declare var EEnvTestDot : { Dot3D:'Dot3D',Dot2D:'Dot2D',EEnvTestDot_MAX:'EEnvTestDot_MAX', };
-declare class EnvQueryTest_Dot extends EnvQueryTest { 
-	LineA: EnvDirection;
-	LineB: EnvDirection;
-	TestMode: EEnvTestDot;
-	bAbsoluteValue: boolean;
-	static Load(ResourceName: string): EnvQueryTest_Dot;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Dot;
-	static GetDefaultObject(): EnvQueryTest_Dot;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Dot;
-	static C(Other: UObject | any): EnvQueryTest_Dot;
-}
-
-declare class EnvQueryTest_GameplayTags extends EnvQueryTest { 
-	TagQueryToMatch: GameplayTagQuery;
-	bUpdatedToUseQuery: boolean;
-	TagsToMatch: EGameplayContainerMatchType;
-	GameplayTags: GameplayTagContainer;
-	static Load(ResourceName: string): EnvQueryTest_GameplayTags;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_GameplayTags;
-	static GetDefaultObject(): EnvQueryTest_GameplayTags;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_GameplayTags;
-	static C(Other: UObject | any): EnvQueryTest_GameplayTags;
-}
-
-declare type EEnvOverlapShape = 'Box' | 'Sphere' | 'Capsule' | 'EEnvOverlapShape_MAX';
-declare var EEnvOverlapShape : { Box:'Box',Sphere:'Sphere',Capsule:'Capsule',EEnvOverlapShape_MAX:'EEnvOverlapShape_MAX', };
-declare class EnvOverlapData { 
-	ExtentX: number;
-	ExtentY: number;
-	ExtentZ: number;
-	ShapeOffset: Vector;
-	OverlapChannel: ECollisionChannel;
-	OverlapShape: EEnvOverlapShape;
-	bOnlyBlockingHits: boolean;
-	bOverlapComplex: boolean;
-	clone() : EnvOverlapData;
-	static C(Other: UObject | any): EnvOverlapData;
-}
-
-declare class EnvQueryTest_Overlap extends EnvQueryTest { 
-	OverlapData: EnvOverlapData;
-	static Load(ResourceName: string): EnvQueryTest_Overlap;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Overlap;
-	static GetDefaultObject(): EnvQueryTest_Overlap;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Overlap;
-	static C(Other: UObject | any): EnvQueryTest_Overlap;
-}
-
-declare type EEnvTestPathfinding = 'PathExist' | 'PathCost' | 'PathLength' | 'EEnvTestPathfinding_MAX';
-declare var EEnvTestPathfinding : { PathExist:'PathExist',PathCost:'PathCost',PathLength:'PathLength',EEnvTestPathfinding_MAX:'EEnvTestPathfinding_MAX', };
-declare class EnvQueryTest_Pathfinding extends EnvQueryTest { 
-	TestMode: EEnvTestPathfinding;
-	Context: UnrealEngineClass;
-	PathFromContext: AIDataProviderBoolValue;
-	SkipUnreachable: AIDataProviderBoolValue;
-	FilterClass: UnrealEngineClass;
-	static Load(ResourceName: string): EnvQueryTest_Pathfinding;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Pathfinding;
-	static GetDefaultObject(): EnvQueryTest_Pathfinding;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Pathfinding;
-	static C(Other: UObject | any): EnvQueryTest_Pathfinding;
-}
-
-declare class EnvQueryTest_PathfindingBatch extends EnvQueryTest_Pathfinding { 
-	ScanRangeMultiplier: AIDataProviderFloatValue;
-	static Load(ResourceName: string): EnvQueryTest_PathfindingBatch;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_PathfindingBatch;
-	static GetDefaultObject(): EnvQueryTest_PathfindingBatch;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_PathfindingBatch;
-	static C(Other: UObject | any): EnvQueryTest_PathfindingBatch;
-}
-
-declare class EnvQueryTest_Project extends EnvQueryTest { 
-	ProjectionData: EnvTraceData;
-	static Load(ResourceName: string): EnvQueryTest_Project;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Project;
-	static GetDefaultObject(): EnvQueryTest_Project;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Project;
-	static C(Other: UObject | any): EnvQueryTest_Project;
-}
-
-declare class EnvQueryTest_Random extends EnvQueryTest { 
-	static Load(ResourceName: string): EnvQueryTest_Random;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Random;
-	static GetDefaultObject(): EnvQueryTest_Random;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Random;
-	static C(Other: UObject | any): EnvQueryTest_Random;
-}
-
-declare class EnvQueryTest_Trace extends EnvQueryTest { 
-	TraceData: EnvTraceData;
-	TraceFromContext: AIDataProviderBoolValue;
-	ItemHeightOffset: AIDataProviderFloatValue;
-	ContextHeightOffset: AIDataProviderFloatValue;
-	Context: UnrealEngineClass;
-	static Load(ResourceName: string): EnvQueryTest_Trace;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Trace;
-	static GetDefaultObject(): EnvQueryTest_Trace;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Trace;
-	static C(Other: UObject | any): EnvQueryTest_Trace;
-}
-
-declare class EnvQueryTypes extends UObject { 
-	static Load(ResourceName: string): EnvQueryTypes;
-	static Find(Outer: UObject, ResourceName: string): EnvQueryTypes;
-	static GetDefaultObject(): EnvQueryTypes;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTypes;
-	static C(Other: UObject | any): EnvQueryTypes;
-}
-
-declare class EQSQueryResultSourceInterface extends Interface { 
-	static Load(ResourceName: string): EQSQueryResultSourceInterface;
-	static Find(Outer: UObject, ResourceName: string): EQSQueryResultSourceInterface;
-	static GetDefaultObject(): EQSQueryResultSourceInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EQSQueryResultSourceInterface;
-	static C(Other: UObject | any): EQSQueryResultSourceInterface;
-}
-
-declare class EQSRenderingComponent extends PrimitiveComponent { 
-	static Load(ResourceName: string): EQSRenderingComponent;
-	static Find(Outer: UObject, ResourceName: string): EQSRenderingComponent;
-	static GetDefaultObject(): EQSRenderingComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EQSRenderingComponent;
-	static C(Other: UObject | any): EQSRenderingComponent;
-}
-
-declare type EEnvQueryHightlightMode = 'All' | 'Best5Pct' | 'Best25Pct' | 'EEnvQueryHightlightMode_MAX';
-declare var EEnvQueryHightlightMode : { All:'All',Best5Pct:'Best5Pct',Best25Pct:'Best25Pct',EEnvQueryHightlightMode_MAX:'EEnvQueryHightlightMode_MAX', };
-declare class EQSTestingPawn extends Character { 
-	QueryTemplate: EnvQuery;
-	QueryParams: EnvNamedValue[];
-	QueryConfig: AIDynamicParam[];
-	TimeLimitPerStep: number;
-	StepToDebugDraw: number;
-	HighlightMode: EEnvQueryHightlightMode;
-	bDrawLabels: boolean;
-	bDrawFailedItems: boolean;
-	bReRunQueryOnlyOnFinishedMove: boolean;
-	bShouldBeVisibleInGame: boolean;
-	bTickDuringGame: boolean;
-	QueryingMode: EEnvQueryRunMode;
-	NavAgentProperties: NavAgentProperties;
-	EdRenderComp: EQSRenderingComponent;
-	static GetDefaultObject(): EQSTestingPawn;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EQSTestingPawn;
-	static C(Other: UObject | any): EQSTestingPawn;
+declare class MovieSceneToolsProjectSettings extends UObject { 
+	DefaultStartTime: number;
+	DefaultDuration: number;
+	ShotDirectory: string;
+	ShotPrefix: string;
+	FirstShotNumber: any;
+	ShotIncrement: any;
+	ShotNumDigits: any;
+	TakeNumDigits: any;
+	FirstTakeNumber: any;
+	TakeSeparator: string;
+	SubSequenceSeparator: string;
+	FbxSettings: MovieSceneToolsFbxSettings[];
+	static Load(ResourceName: string): MovieSceneToolsProjectSettings;
+	static Find(Outer: UObject, ResourceName: string): MovieSceneToolsProjectSettings;
+	static GetDefaultObject(): MovieSceneToolsProjectSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneToolsProjectSettings;
+	static C(Other: UObject | any): MovieSceneToolsProjectSettings;
 }
 
-declare class GenericTeamAgentInterface extends Interface { 
-	static Load(ResourceName: string): GenericTeamAgentInterface;
-	static Find(Outer: UObject, ResourceName: string): GenericTeamAgentInterface;
-	static GetDefaultObject(): GenericTeamAgentInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenericTeamAgentInterface;
-	static C(Other: UObject | any): GenericTeamAgentInterface;
+declare type EThumbnailQuality = 'Draft' | 'Normal' | 'Best' | 'EThumbnailQuality_MAX';
+declare var EThumbnailQuality : { Draft:'Draft',Normal:'Normal',Best:'Best',EThumbnailQuality_MAX:'EThumbnailQuality_MAX', };
+declare class MovieSceneUserThumbnailSettings extends UObject { 
+	bDrawThumbnails: boolean;
+	bDrawSingleThumbnails: boolean;
+	ThumbnailSize: IntPoint;
+	Quality: EThumbnailQuality;
+	static Load(ResourceName: string): MovieSceneUserThumbnailSettings;
+	static Find(Outer: UObject, ResourceName: string): MovieSceneUserThumbnailSettings;
+	static GetDefaultObject(): MovieSceneUserThumbnailSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneUserThumbnailSettings;
+	static C(Other: UObject | any): MovieSceneUserThumbnailSettings;
 }
 
-declare class GridPathAIController extends AIController { 
-	static GetDefaultObject(): GridPathAIController;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GridPathAIController;
-	static C(Other: UObject | any): GridPathAIController;
+declare class MovieSceneUserImportFBXSettings extends UObject { 
+	bMatchByNameOnly: boolean;
+	bForceFrontXAxis: boolean;
+	bCreateCameras: boolean;
+	bReduceKeys: boolean;
+	ReduceKeysTolerance: number;
+	static Load(ResourceName: string): MovieSceneUserImportFBXSettings;
+	static Find(Outer: UObject, ResourceName: string): MovieSceneUserImportFBXSettings;
+	static GetDefaultObject(): MovieSceneUserImportFBXSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneUserImportFBXSettings;
+	static C(Other: UObject | any): MovieSceneUserImportFBXSettings;
 }
 
-declare class GridPathFollowingComponent extends PathFollowingComponent { 
-	GridManager: NavLocalGridManager;
-	static Load(ResourceName: string): GridPathFollowingComponent;
-	static Find(Outer: UObject, ResourceName: string): GridPathFollowingComponent;
-	static GetDefaultObject(): GridPathFollowingComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GridPathFollowingComponent;
-	static C(Other: UObject | any): GridPathFollowingComponent;
+declare class MovieSceneCopyableBinding extends UObject { 
+	SpawnableObjectTemplate: UObject;
+	Tracks: MovieSceneTrack[];
+	Binding: MovieSceneBinding;
+	Spawnable: MovieSceneSpawnable;
+	Possessable: MovieScenePossessable;
+	static Load(ResourceName: string): MovieSceneCopyableBinding;
+	static Find(Outer: UObject, ResourceName: string): MovieSceneCopyableBinding;
+	static GetDefaultObject(): MovieSceneCopyableBinding;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCopyableBinding;
+	static C(Other: UObject | any): MovieSceneCopyableBinding;
 }
 
-declare class NavFilter_AIControllerDefault extends NavigationQueryFilter { 
-	static Load(ResourceName: string): NavFilter_AIControllerDefault;
-	static Find(Outer: UObject, ResourceName: string): NavFilter_AIControllerDefault;
-	static GetDefaultObject(): NavFilter_AIControllerDefault;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavFilter_AIControllerDefault;
-	static C(Other: UObject | any): NavFilter_AIControllerDefault;
+declare class MovieSceneCopyableTrack extends UObject { 
+	Track: MovieSceneTrack;
+	bIsAMasterTrack: boolean;
+	static Load(ResourceName: string): MovieSceneCopyableTrack;
+	static Find(Outer: UObject, ResourceName: string): MovieSceneCopyableTrack;
+	static GetDefaultObject(): MovieSceneCopyableTrack;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCopyableTrack;
+	static C(Other: UObject | any): MovieSceneCopyableTrack;
 }
 
-declare type ENavLinkDirection = 'BothWays' | 'LeftToRight' | 'RightToLeft' | 'ENavLinkDirection_MAX';
-declare var ENavLinkDirection : { BothWays:'BothWays',LeftToRight:'LeftToRight',RightToLeft:'RightToLeft',ENavLinkDirection_MAX:'ENavLinkDirection_MAX', };
-declare class NavigationLinkBase { 
-	LeftProjectHeight: number;
-	MaxFallDownLength: number;
-	Direction: ENavLinkDirection;
-	SnapRadius: number;
-	SnapHeight: number;
-	SupportedAgents: NavAgentSelector;
-	bSupportsAgent0: boolean;
-	bSupportsAgent1: boolean;
-	bSupportsAgent2: boolean;
-	bSupportsAgent3: boolean;
-	bSupportsAgent4: boolean;
-	bSupportsAgent5: boolean;
-	bSupportsAgent6: boolean;
-	bSupportsAgent7: boolean;
-	bSupportsAgent8: boolean;
-	bSupportsAgent9: boolean;
-	bSupportsAgent10: boolean;
-	bSupportsAgent11: boolean;
-	bSupportsAgent12: boolean;
-	bSupportsAgent13: boolean;
-	bSupportsAgent14: boolean;
-	bSupportsAgent15: boolean;
-	Description: string;
-	bUseSnapHeight: boolean;
-	bSnapToCheapestArea: boolean;
-	bCustomFlag0: boolean;
-	bCustomFlag1: boolean;
-	bCustomFlag2: boolean;
-	bCustomFlag3: boolean;
-	bCustomFlag4: boolean;
-	bCustomFlag5: boolean;
-	bCustomFlag6: boolean;
-	bCustomFlag7: boolean;
-	AreaClass: UnrealEngineClass;
-	clone() : NavigationLinkBase;
-	static C(Other: UObject | any): NavigationLinkBase;
+declare class Exporter extends UObject { 
+	SupportedClass: UnrealEngineClass;
+	ExportRootScope: UObject;
+	FormatExtension: string[];
+	FormatDescription: string[];
+	PreferredFormatIndex: number;
+	TextIndent: number;
+	bText: boolean;
+	bSelectedOnly: boolean;
+	bForceFileOperations: boolean;
+	ExportTask: AssetExportTask;
+	static Load(ResourceName: string): Exporter;
+	static Find(Outer: UObject, ResourceName: string): Exporter;
+	static GetDefaultObject(): Exporter;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Exporter;
+	ScriptRunAssetExportTask(Task: AssetExportTask): boolean;
+	static RunAssetExportTasks(ExportTasks: AssetExportTask[]): boolean;
+	static RunAssetExportTask(Task: AssetExportTask): boolean;
+	static C(Other: UObject | any): Exporter;
 }
 
-declare class NavigationLink extends NavigationLinkBase { 
-	Left: Vector;
-	Right: Vector;
-	clone() : NavigationLink;
-	static C(Other: UObject | any): NavigationLink;
+declare class AssetExportTask extends UObject { 
+	UObject: UObject;
+	Exporter: Exporter;
+	Filename: string;
+	bSelected: boolean;
+	bReplaceIdentical: boolean;
+	bPrompt: boolean;
+	bAutomated: boolean;
+	bUseFileArchive: boolean;
+	bWriteEmptyFiles: boolean;
+	IgnoreObjectList: UObject[];
+	Options: UObject;
+	Errors: string[];
+	static Load(ResourceName: string): AssetExportTask;
+	static Find(Outer: UObject, ResourceName: string): AssetExportTask;
+	static GetDefaultObject(): AssetExportTask;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetExportTask;
+	static C(Other: UObject | any): AssetExportTask;
 }
 
-declare class NavigationSegmentLink extends NavigationLinkBase { 
-	LeftStart: Vector;
-	LeftEnd: Vector;
-	RightStart: Vector;
-	RightEnd: Vector;
-	clone() : NavigationSegmentLink;
-	static C(Other: UObject | any): NavigationSegmentLink;
+declare class SequencerExportTask extends AssetExportTask { 
+	SequencerContext: UObject;
+	static Load(ResourceName: string): SequencerExportTask;
+	static Find(Outer: UObject, ResourceName: string): SequencerExportTask;
+	static GetDefaultObject(): SequencerExportTask;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequencerExportTask;
+	static C(Other: UObject | any): SequencerExportTask;
 }
 
-declare class NavRelevantComponent extends ActorComponent { 
-	bAttachToOwnersRoot: boolean;
-	CachedNavParent: UObject;
-	static Load(ResourceName: string): NavRelevantComponent;
-	static Find(Outer: UObject, ResourceName: string): NavRelevantComponent;
-	static GetDefaultObject(): NavRelevantComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavRelevantComponent;
-	SetNavigationRelevancy(bRelevant: boolean): void;
-	static C(Other: UObject | any): NavRelevantComponent;
+declare class MovieSceneSectionEvalOptions { 
+	bCanEditCompletionMode: boolean;
+	CompletionMode: EMovieSceneCompletionMode;
+	clone() : MovieSceneSectionEvalOptions;
+	static C(Other: UObject | any): MovieSceneSectionEvalOptions;
 }
 
-declare class NavLinkCustomComponent extends NavRelevantComponent { 
-	NavLinkUserId: any;
-	EnabledAreaClass: UnrealEngineClass;
-	DisabledAreaClass: UnrealEngineClass;
-	LinkRelativeStart: Vector;
-	LinkRelativeEnd: Vector;
-	LinkDirection: ENavLinkDirection;
-	bLinkEnabled: boolean;
-	bNotifyWhenEnabled: boolean;
-	bNotifyWhenDisabled: boolean;
-	bCreateBoxObstacle: boolean;
-	ObstacleOffset: Vector;
-	ObstacleExtent: Vector;
-	ObstacleAreaClass: UnrealEngineClass;
-	BroadcastRadius: number;
-	BroadcastInterval: number;
-	BroadcastChannel: ECollisionChannel;
-	static Load(ResourceName: string): NavLinkCustomComponent;
-	static Find(Outer: UObject, ResourceName: string): NavLinkCustomComponent;
-	static GetDefaultObject(): NavLinkCustomComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkCustomComponent;
-	static C(Other: UObject | any): NavLinkCustomComponent;
+declare class MovieSceneEasingSettings { 
+	AutoEaseInDuration: number;
+	AutoEaseOutDuration: number;
+	EaseIn: any;
+	bManualEaseIn: boolean;
+	ManualEaseInDuration: number;
+	EaseOut: any;
+	bManualEaseOut: boolean;
+	ManualEaseOutDuration: number;
+	AutoEaseInTime: number;
+	AutoEaseOutTime: number;
+	ManualEaseInTime: number;
+	ManualEaseOutTime: number;
+	clone() : MovieSceneEasingSettings;
+	static C(Other: UObject | any): MovieSceneEasingSettings;
 }
 
-declare class NavLinkRenderingComponent extends PrimitiveComponent { 
-	static Load(ResourceName: string): NavLinkRenderingComponent;
-	static Find(Outer: UObject, ResourceName: string): NavLinkRenderingComponent;
-	static GetDefaultObject(): NavLinkRenderingComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkRenderingComponent;
-	static C(Other: UObject | any): NavLinkRenderingComponent;
+declare type EMovieSceneBlendType = 'Absolute' | 'Additive' | 'Relative' | 'EMovieSceneBlendType_MAX';
+declare var EMovieSceneBlendType : { Absolute:'Absolute',Additive:'Additive',Relative:'Relative',EMovieSceneBlendType_MAX:'EMovieSceneBlendType_MAX', };
+declare class OptionalMovieSceneBlendType { 
+	BlendType: EMovieSceneBlendType;
+	bIsValid: boolean;
+	clone() : OptionalMovieSceneBlendType;
+	static C(Other: UObject | any): OptionalMovieSceneBlendType;
 }
 
-declare class NavLinkProxy extends Actor { 
-	PointLinks: NavigationLink[];
-	SegmentLinks: NavigationSegmentLink[];
-	SmartLinkComp: NavLinkCustomComponent;
-	bSmartLinkIsRelevant: boolean;
-	EdRenderComp: NavLinkRenderingComponent;
-	SpriteComponent: BillboardComponent;
-	OnSmartLinkReached: UnrealEngineMulticastDelegate<(MovingActor: Actor, DestinationPoint: Vector) => void>;
-	static GetDefaultObject(): NavLinkProxy;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkProxy;
-	SetSmartLinkEnabled(bEnabled: boolean): void;
-	ResumePathFollowing(Agent: Actor): void;
-	ReceiveSmartLinkReached(Agent: Actor,Destination: Vector): void;
-	IsSmartLinkEnabled(): boolean;
-	HasMovingAgents(): boolean;
-	static C(Other: UObject | any): NavLinkProxy;
-}
-
-declare class PathFollowingManager extends UObject { 
-	static Load(ResourceName: string): PathFollowingManager;
-	static Find(Outer: UObject, ResourceName: string): PathFollowingManager;
-	static GetDefaultObject(): PathFollowingManager;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PathFollowingManager;
-	static C(Other: UObject | any): PathFollowingManager;
-}
-
-declare class PawnAction_BlueprintBase extends PawnAction { 
-	static Load(ResourceName: string): PawnAction_BlueprintBase;
-	static Find(Outer: UObject, ResourceName: string): PawnAction_BlueprintBase;
-	static GetDefaultObject(): PawnAction_BlueprintBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnAction_BlueprintBase;
-	ActionTick(ControlledPawn: Pawn,DeltaSeconds: number): void;
-	ActionStart(ControlledPawn: Pawn): void;
-	ActionResume(ControlledPawn: Pawn): void;
-	ActionPause(ControlledPawn: Pawn): void;
-	ActionFinished(ControlledPawn: Pawn,WithResult: EPawnActionResult): void;
-	static C(Other: UObject | any): PawnAction_BlueprintBase;
-}
-
-declare class PawnAction_Move extends PawnAction { 
-	GoalActor: Actor;
-	GoalLocation: Vector;
-	AcceptableRadius: number;
-	FilterClass: UnrealEngineClass;
-	bAllowStrafe: boolean;
-	bFinishOnOverlap: boolean;
-	bUsePathfinding: boolean;
-	bAllowPartialPath: boolean;
-	bProjectGoalToNavigation: boolean;
-	bUpdatePathToGoal: boolean;
-	bAbortChildActionOnPathChange: boolean;
-	static Load(ResourceName: string): PawnAction_Move;
-	static Find(Outer: UObject, ResourceName: string): PawnAction_Move;
-	static GetDefaultObject(): PawnAction_Move;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnAction_Move;
-	static C(Other: UObject | any): PawnAction_Move;
-}
-
-declare type EPawnActionFailHandling = 'RequireSuccess' | 'IgnoreFailure' | 'EPawnActionFailHandling_MAX';
-declare var EPawnActionFailHandling : { RequireSuccess:'RequireSuccess',IgnoreFailure:'IgnoreFailure',EPawnActionFailHandling_MAX:'EPawnActionFailHandling_MAX', };
-declare class PawnAction_Repeat extends PawnAction { 
-	ActionToRepeat: PawnAction;
-	RecentActionCopy: PawnAction;
-	ChildFailureHandlingMode: EPawnActionFailHandling;
-	static Load(ResourceName: string): PawnAction_Repeat;
-	static Find(Outer: UObject, ResourceName: string): PawnAction_Repeat;
-	static GetDefaultObject(): PawnAction_Repeat;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnAction_Repeat;
-	static C(Other: UObject | any): PawnAction_Repeat;
-}
-
-declare class PawnAction_Sequence extends PawnAction { 
-	ActionSequence: PawnAction[];
-	ChildFailureHandlingMode: EPawnActionFailHandling;
-	RecentActionCopy: PawnAction;
-	static Load(ResourceName: string): PawnAction_Sequence;
-	static Find(Outer: UObject, ResourceName: string): PawnAction_Sequence;
-	static GetDefaultObject(): PawnAction_Sequence;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnAction_Sequence;
-	static C(Other: UObject | any): PawnAction_Sequence;
-}
-
-declare class PawnAction_Wait extends PawnAction { 
-	TimeToWait: number;
-	static Load(ResourceName: string): PawnAction_Wait;
-	static Find(Outer: UObject, ResourceName: string): PawnAction_Wait;
-	static GetDefaultObject(): PawnAction_Wait;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnAction_Wait;
-	static C(Other: UObject | any): PawnAction_Wait;
-}
-
-declare class PawnSensingComponent extends ActorComponent { 
-	HearingThreshold: number;
-	LOSHearingThreshold: number;
-	SightRadius: number;
-	SensingInterval: number;
-	HearingMaxSoundAge: number;
-	bEnableSensingUpdates: boolean;
-	bOnlySensePlayers: boolean;
-	bSeePawns: boolean;
-	bHearNoises: boolean;
-	OnSeePawn: UnrealEngineMulticastDelegate<(Pawn: Pawn) => void>;
-	OnHearNoise: UnrealEngineMulticastDelegate<(Instigator: Pawn, Location: Vector, Volume: number) => void>;
-	PeripheralVisionAngle: number;
-	PeripheralVisionCosine: number;
-	static Load(ResourceName: string): PawnSensingComponent;
-	static Find(Outer: UObject, ResourceName: string): PawnSensingComponent;
-	static GetDefaultObject(): PawnSensingComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnSensingComponent;
-	SetSensingUpdatesEnabled(bEnabled: boolean): void;
-	SetSensingInterval(NewSensingInterval: number): void;
-	SetPeripheralVisionAngle(NewPeripheralVisionAngle: number): void;
-	GetPeripheralVisionCosine(): number;
-	GetPeripheralVisionAngle(): number;
-	static C(Other: UObject | any): PawnSensingComponent;
-}
-
-declare class VisualLoggerExtension extends UObject { 
-	static Load(ResourceName: string): VisualLoggerExtension;
-	static Find(Outer: UObject, ResourceName: string): VisualLoggerExtension;
-	static GetDefaultObject(): VisualLoggerExtension;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VisualLoggerExtension;
-	static C(Other: UObject | any): VisualLoggerExtension;
+declare class MovieSceneSection extends MovieSceneSignedObject { 
+	EvalOptions: MovieSceneSectionEvalOptions;
+	Easing: MovieSceneEasingSettings;
+	SectionRange: MovieSceneFrameRange;
+	TimecodeSource: MovieSceneTimecodeSource;
+	PreRollFrames: FrameNumber;
+	PostRollFrames: FrameNumber;
+	RowIndex: number;
+	OverlapPriority: number;
+	bIsActive: boolean;
+	bIsLocked: boolean;
+	StartTime: number;
+	EndTime: number;
+	PrerollTime: number;
+	PostrollTime: number;
+	bIsInfinite: boolean;
+	bSupportsInfiniteRange: boolean;
+	BlendType: OptionalMovieSceneBlendType;
+	static Load(ResourceName: string): MovieSceneSection;
+	static Find(Outer: UObject, ResourceName: string): MovieSceneSection;
+	static GetDefaultObject(): MovieSceneSection;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneSection;
+	SetRowIndex(NewRowIndex: number): void;
+	SetPreRollFrames(InPreRollFrames: number): void;
+	SetPostRollFrames(InPostRollFrames: number): void;
+	SetOverlapPriority(NewPriority: number): void;
+	SetIsLocked(bInIsLocked: boolean): void;
+	SetIsActive(bInIsActive: boolean): void;
+	IsLocked(): boolean;
+	IsActive(): boolean;
+	GetRowIndex(): number;
+	GetPreRollFrames(): number;
+	GetPostRollFrames(): number;
+	GetOverlapPriority(): number;
+	static C(Other: UObject | any): MovieSceneSection;
 }
 
-declare class AbstractNavData extends NavigationData { 
-	static GetDefaultObject(): AbstractNavData;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AbstractNavData;
-	static C(Other: UObject | any): AbstractNavData;
+declare class MovieSceneTransformMask { 
+	mask: any;
+	clone() : MovieSceneTransformMask;
+	static C(Other: UObject | any): MovieSceneTransformMask;
 }
 
-declare class NavArea_Default extends NavArea { 
-	static Load(ResourceName: string): NavArea_Default;
-	static Find(Outer: UObject, ResourceName: string): NavArea_Default;
-	static GetDefaultObject(): NavArea_Default;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavArea_Default;
-	static C(Other: UObject | any): NavArea_Default;
+declare class MovieSceneChannel { 
+	clone() : MovieSceneChannel;
+	static C(Other: UObject | any): MovieSceneChannel;
 }
 
-declare class NavArea_LowHeight extends NavArea { 
-	static Load(ResourceName: string): NavArea_LowHeight;
-	static Find(Outer: UObject, ResourceName: string): NavArea_LowHeight;
-	static GetDefaultObject(): NavArea_LowHeight;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavArea_LowHeight;
-	static C(Other: UObject | any): NavArea_LowHeight;
+declare class KeyHandleLookupTable { 
+	clone() : KeyHandleLookupTable;
+	static C(Other: UObject | any): KeyHandleLookupTable;
 }
 
-declare class NavArea_Null extends NavArea { 
-	static Load(ResourceName: string): NavArea_Null;
-	static Find(Outer: UObject, ResourceName: string): NavArea_Null;
-	static GetDefaultObject(): NavArea_Null;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavArea_Null;
-	static C(Other: UObject | any): NavArea_Null;
+declare class MovieSceneKeyHandleMap extends KeyHandleLookupTable { 
+	clone() : MovieSceneKeyHandleMap;
+	static C(Other: UObject | any): MovieSceneKeyHandleMap;
 }
 
-declare class NavArea_Obstacle extends NavArea { 
-	static Load(ResourceName: string): NavArea_Obstacle;
-	static Find(Outer: UObject, ResourceName: string): NavArea_Obstacle;
-	static GetDefaultObject(): NavArea_Obstacle;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavArea_Obstacle;
-	static C(Other: UObject | any): NavArea_Obstacle;
+declare class MovieSceneFloatChannel extends MovieSceneChannel { 
+	PreInfinityExtrap: ERichCurveExtrapolation;
+	PostInfinityExtrap: ERichCurveExtrapolation;
+	Times: FrameNumber[];
+	Values: MovieSceneFloatValue[];
+	DefaultValue: number;
+	bHasDefaultValue: boolean;
+	KeyHandles: MovieSceneKeyHandleMap;
+	TickResolution: FrameRate;
+	clone() : MovieSceneFloatChannel;
+	static C(Other: UObject | any): MovieSceneFloatChannel;
 }
 
-declare class NavAreaMeta extends NavArea { 
-	static Load(ResourceName: string): NavAreaMeta;
-	static Find(Outer: UObject, ResourceName: string): NavAreaMeta;
-	static GetDefaultObject(): NavAreaMeta;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavAreaMeta;
-	static C(Other: UObject | any): NavAreaMeta;
+declare type EShow3DTrajectory = 'EST_OnlyWhenSelected' | 'EST_Always' | 'EST_Never' | 'EST_MAX';
+declare var EShow3DTrajectory : { EST_OnlyWhenSelected:'EST_OnlyWhenSelected',EST_Always:'EST_Always',EST_Never:'EST_Never',EST_MAX:'EST_MAX', };
+declare class MovieScene3DTransformSection extends MovieSceneSection { 
+	TransformMask: MovieSceneTransformMask;
+	Translation: MovieSceneFloatChannel;
+	Rotation: MovieSceneFloatChannel;
+	Scale: MovieSceneFloatChannel;
+	ManualWeight: MovieSceneFloatChannel;
+	bUseQuaternionInterpolation: boolean;
+	Show3DTrajectory: EShow3DTrajectory;
+	static Load(ResourceName: string): MovieScene3DTransformSection;
+	static Find(Outer: UObject, ResourceName: string): MovieScene3DTransformSection;
+	static GetDefaultObject(): MovieScene3DTransformSection;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScene3DTransformSection;
+	static C(Other: UObject | any): MovieScene3DTransformSection;
 }
 
-declare class NavAreaMeta_SwitchByAgent extends NavAreaMeta { 
-	Agent0Area: UnrealEngineClass;
-	Agent1Area: UnrealEngineClass;
-	Agent2Area: UnrealEngineClass;
-	Agent3Area: UnrealEngineClass;
-	Agent4Area: UnrealEngineClass;
-	Agent5Area: UnrealEngineClass;
-	Agent6Area: UnrealEngineClass;
-	Agent7Area: UnrealEngineClass;
-	Agent8Area: UnrealEngineClass;
-	Agent9Area: UnrealEngineClass;
-	Agent10Area: UnrealEngineClass;
-	Agent11Area: UnrealEngineClass;
-	Agent12Area: UnrealEngineClass;
-	Agent13Area: UnrealEngineClass;
-	Agent14Area: UnrealEngineClass;
-	Agent15Area: UnrealEngineClass;
-	static Load(ResourceName: string): NavAreaMeta_SwitchByAgent;
-	static Find(Outer: UObject, ResourceName: string): NavAreaMeta_SwitchByAgent;
-	static GetDefaultObject(): NavAreaMeta_SwitchByAgent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavAreaMeta_SwitchByAgent;
-	static C(Other: UObject | any): NavAreaMeta_SwitchByAgent;
+declare class SequencerKeyActor extends Actor { 
+	KeyMeshComponent: StaticMeshComponent;
+	AssociatedActor: Actor;
+	TrackSection: MovieScene3DTransformSection;
+	KeyTime: number;
+	static GetDefaultObject(): SequencerKeyActor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequencerKeyActor;
+	static C(Other: UObject | any): SequencerKeyActor;
 }
 
-declare class NavCollisionCylinder { 
-	Offset: Vector;
-	Radius: number;
-	Height: number;
-	clone() : NavCollisionCylinder;
-	static C(Other: UObject | any): NavCollisionCylinder;
+declare class MovieSceneKeyStructType extends ScriptStruct { 
+	SourceTimesProperty: ArrayProperty;
+	SourceValuesProperty: ArrayProperty;
+	DestTimeProperty: StructProperty;
+	DestValueProperty: Property;
+	static Load(ResourceName: string): MovieSceneKeyStructType;
+	static Find(Outer: UObject, ResourceName: string): MovieSceneKeyStructType;
+	static GetDefaultObject(): MovieSceneKeyStructType;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneKeyStructType;
+	static C(Other: UObject | any): MovieSceneKeyStructType;
 }
 
-declare class NavCollisionBox { 
-	Offset: Vector;
-	Extent: Vector;
-	clone() : NavCollisionBox;
-	static C(Other: UObject | any): NavCollisionBox;
+declare class SequencerMeshTrail extends Actor { 
+	static GetDefaultObject(): SequencerMeshTrail;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequencerMeshTrail;
+	static C(Other: UObject | any): SequencerMeshTrail;
 }
 
-declare class NavCollision extends NavCollisionBase { 
-	CylinderCollision: NavCollisionCylinder[];
-	BoxCollision: NavCollisionBox[];
-	AreaClass: UnrealEngineClass;
-	bGatherConvexGeometry: boolean;
-	static Load(ResourceName: string): NavCollision;
-	static Find(Outer: UObject, ResourceName: string): NavCollision;
-	static GetDefaultObject(): NavCollision;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavCollision;
-	static C(Other: UObject | any): NavCollision;
+declare class SequencerSettingsContainer extends UObject { 
+	static Load(ResourceName: string): SequencerSettingsContainer;
+	static Find(Outer: UObject, ResourceName: string): SequencerSettingsContainer;
+	static GetDefaultObject(): SequencerSettingsContainer;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequencerSettingsContainer;
+	static C(Other: UObject | any): SequencerSettingsContainer;
 }
 
-declare class NavigationGraph extends NavigationData { 
-	static GetDefaultObject(): NavigationGraph;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationGraph;
-	static C(Other: UObject | any): NavigationGraph;
+declare type EAutoChangeMode = 'AutoKey' | 'AutoTrack' | 'All' | 'None' | 'EAutoChangeMode_MAX';
+declare var EAutoChangeMode : { AutoKey:'AutoKey',AutoTrack:'AutoTrack',All:'All',None:'None',EAutoChangeMode_MAX:'EAutoChangeMode_MAX', };
+declare type EAllowEditsMode = 'AllEdits' | 'AllowSequencerEditsOnly' | 'AllowLevelEditsOnly' | 'EAllowEditsMode_MAX';
+declare var EAllowEditsMode : { AllEdits:'AllEdits',AllowSequencerEditsOnly:'AllowSequencerEditsOnly',AllowLevelEditsOnly:'AllowLevelEditsOnly',EAllowEditsMode_MAX:'EAllowEditsMode_MAX', };
+declare type EKeyGroupMode = 'KeyChanged' | 'KeyGroup' | 'KeyAll' | 'EKeyGroupMode_MAX';
+declare var EKeyGroupMode : { KeyChanged:'KeyChanged',KeyGroup:'KeyGroup',KeyAll:'KeyAll',EKeyGroupMode_MAX:'EKeyGroupMode_MAX', };
+declare type EMovieSceneKeyInterpolation = 'Auto' | 'User' | 'Break' | 'Linear' | 'Constant' | 'EMovieSceneKeyInterpolation_MAX';
+declare var EMovieSceneKeyInterpolation : { Auto:'Auto',User:'User',Break:'Break',Linear:'Linear',Constant:'Constant',EMovieSceneKeyInterpolation_MAX:'EMovieSceneKeyInterpolation_MAX', };
+declare type ESequencerSpawnPosition = 'SSP_Origin' | 'SSP_PlaceInFrontOfCamera' | 'SSP_MAX';
+declare var ESequencerSpawnPosition : { SSP_Origin:'SSP_Origin',SSP_PlaceInFrontOfCamera:'SSP_PlaceInFrontOfCamera',SSP_MAX:'SSP_MAX', };
+declare type ESequencerZoomPosition = 'SZP_CurrentTime' | 'SZP_MousePosition' | 'SZP_MAX';
+declare var ESequencerZoomPosition : { SZP_CurrentTime:'SZP_CurrentTime',SZP_MousePosition:'SZP_MousePosition',SZP_MAX:'SZP_MAX', };
+declare type ESequencerLoopMode = 'SLM_NoLoop' | 'SLM_Loop' | 'SLM_LoopSelectionRange' | 'SLM_MAX';
+declare var ESequencerLoopMode : { SLM_NoLoop:'SLM_NoLoop',SLM_Loop:'SLM_Loop',SLM_LoopSelectionRange:'SLM_LoopSelectionRange',SLM_MAX:'SLM_MAX', };
+declare type EFrameNumberDisplayFormats = 'NonDropFrameTimecode' | 'DropFrameTimecode' | 'Seconds' | 'Frames' | 'MAX_Count' | 'EFrameNumberDisplayFormats_MAX';
+declare var EFrameNumberDisplayFormats : { NonDropFrameTimecode:'NonDropFrameTimecode',DropFrameTimecode:'DropFrameTimecode',Seconds:'Seconds',Frames:'Frames',MAX_Count:'MAX_Count',EFrameNumberDisplayFormats_MAX:'EFrameNumberDisplayFormats_MAX', };
+declare class SequencerSettings extends UObject { 
+	AutoChangeMode: EAutoChangeMode;
+	AllowEditsMode: EAllowEditsMode;
+	KeyGroupMode: EKeyGroupMode;
+	bKeyInterpPropertiesOnly: boolean;
+	KeyInterpolation: EMovieSceneKeyInterpolation;
+	bAutoSetTrackDefaults: boolean;
+	SpawnPosition: ESequencerSpawnPosition;
+	bCreateSpawnableCameras: boolean;
+	bShowRangeSlider: boolean;
+	bIsSnapEnabled: boolean;
+	bSnapKeyTimesToInterval: boolean;
+	bSnapKeyTimesToKeys: boolean;
+	bSnapSectionTimesToInterval: boolean;
+	bSnapSectionTimesToSections: boolean;
+	bSnapKeysAndSectionsToPlayRange: boolean;
+	bSnapPlayTimeToKeys: boolean;
+	bSnapPlayTimeToInterval: boolean;
+	bSnapPlayTimeToPressedKey: boolean;
+	bSnapPlayTimeToDraggedKey: boolean;
+	bSnapCurveValueToInterval: boolean;
+	bLabelBrowserVisible: boolean;
+	bShowSelectedNodesOnly: boolean;
+	bRewindOnRecord: boolean;
+	ZoomPosition: ESequencerZoomPosition;
+	bAutoScrollEnabled: boolean;
+	bLinkCurveEditorTimeRange: boolean;
+	bSynchronizeCurveEditorSelection: boolean;
+	bIsolateCurveEditorToSelection: boolean;
+	LoopMode: ESequencerLoopMode;
+	bKeepCursorInPlayRangeWhileScrubbing: boolean;
+	bKeepCursorInPlayRange: boolean;
+	bKeepPlayRangeInSectionBounds: boolean;
+	ZeroPadFrames: number;
+	bShowCombinedKeyframes: boolean;
+	bInfiniteKeyAreas: boolean;
+	bShowChannelColors: boolean;
+	bActivateRealtimeViewports: boolean;
+	bEvaluateSubSequencesInIsolation: boolean;
+	bRerunConstructionScripts: boolean;
+	bShowDebugVisualization: boolean;
+	bVisualizePreAndPostRoll: boolean;
+	bCompileDirectorOnEvaluate: boolean;
+	TrajectoryPathCap: any;
+	bShowOutlinerInfoColumn: boolean;
+	FrameNumberDisplayFormat: EFrameNumberDisplayFormats;
+	static Load(ResourceName: string): SequencerSettings;
+	static Find(Outer: UObject, ResourceName: string): SequencerSettings;
+	static GetDefaultObject(): SequencerSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequencerSettings;
+	static C(Other: UObject | any): SequencerSettings;
+}
+
+declare class SequencerTrackFilterExtension extends UObject { 
+	static Load(ResourceName: string): SequencerTrackFilterExtension;
+	static Find(Outer: UObject, ResourceName: string): SequencerTrackFilterExtension;
+	static GetDefaultObject(): SequencerTrackFilterExtension;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequencerTrackFilterExtension;
+	static C(Other: UObject | any): SequencerTrackFilterExtension;
 }
 
-declare class NavigationGraphNode extends Actor { 
-	static GetDefaultObject(): NavigationGraphNode;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationGraphNode;
-	static C(Other: UObject | any): NavigationGraphNode;
+declare class SoundNode extends UObject { 
+	ChildNodes: SoundNode[];
+	GraphNode: EdGraphNode;
+	static Load(ResourceName: string): SoundNode;
+	static Find(Outer: UObject, ResourceName: string): SoundNode;
+	static GetDefaultObject(): SoundNode;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNode;
+	static C(Other: UObject | any): SoundNode;
 }
 
-declare class NavGraphNode { 
-	Owner: UObject;
-	clone() : NavGraphNode;
-	static C(Other: UObject | any): NavGraphNode;
+declare class SoundCue extends SoundBase { 
+	bOverrideAttenuation: boolean;
+	bExcludeFromRandomNodeBranchCulling: boolean;
+	FirstNode: SoundNode;
+	VolumeMultiplier: number;
+	PitchMultiplier: number;
+	AttenuationOverrides: SoundAttenuationSettings;
+	AllNodes: SoundNode[];
+	SoundCueGraph: EdGraph;
+	SubtitlePriority: number;
+	bHasPlayWhenSilent: boolean;
+	static Load(ResourceName: string): SoundCue;
+	static Find(Outer: UObject, ResourceName: string): SoundCue;
+	static GetDefaultObject(): SoundCue;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCue;
+	static C(Other: UObject | any): SoundCue;
 }
 
-declare class NavigationGraphNodeComponent extends SceneComponent { 
-	UNode: NavGraphNode;
-	NextNodeComponent: NavigationGraphNodeComponent;
-	PrevNodeComponent: NavigationGraphNodeComponent;
-	static Load(ResourceName: string): NavigationGraphNodeComponent;
-	static Find(Outer: UObject, ResourceName: string): NavigationGraphNodeComponent;
-	static GetDefaultObject(): NavigationGraphNodeComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationGraphNodeComponent;
-	static C(Other: UObject | any): NavigationGraphNodeComponent;
+declare class VREditorAssetContainer extends DataAsset { 
+	DockableWindowCloseSound: SoundBase;
+	DockableWindowOpenSound: SoundBase;
+	DockableWindowDropSound: SoundBase;
+	DockableWindowDragSound: SoundBase;
+	DropFromContentBrowserSound: SoundBase;
+	RadialMenuOpenSound: SoundBase;
+	RadialMenuCloseSound: SoundBase;
+	TeleportSound: SoundBase;
+	ButtonPressSound: SoundCue;
+	AutoScaleSound: SoundBase;
+	GenericHMDMesh: StaticMesh;
+	PlaneMesh: StaticMesh;
+	CylinderMesh: StaticMesh;
+	LaserPointerStartMesh: StaticMesh;
+	LaserPointerMesh: StaticMesh;
+	LaserPointerEndMesh: StaticMesh;
+	LaserPointerHoverMesh: StaticMesh;
+	VivePreControllerMesh: StaticMesh;
+	OculusControllerMesh: StaticMesh;
+	GenericControllerMesh: StaticMesh;
+	TeleportRootMesh: StaticMesh;
+	WindowMesh: StaticMesh;
+	WindowSelectionBarMesh: StaticMesh;
+	WindowCloseButtonMesh: StaticMesh;
+	RadialMenuMainMesh: StaticMesh;
+	RadialMenuPointerMesh: StaticMesh;
+	PointerCursorMesh: StaticMesh;
+	LineSegmentCylinderMesh: StaticMesh;
+	JointSphereMesh: StaticMesh;
+	DockingButtonMesh: StaticMesh;
+	GridMaterial: MaterialInterface;
+	LaserPointerMaterial: MaterialInterface;
+	LaserPointerTranslucentMaterial: MaterialInterface;
+	WorldMovementPostProcessMaterial: Material;
+	TextMaterial: MaterialInterface;
+	VivePreControllerMaterial: MaterialInterface;
+	OculusControllerMaterial: MaterialInterface;
+	TeleportMaterial: MaterialInterface;
+	WindowMaterial: MaterialInterface;
+	WindowTranslucentMaterial: MaterialInterface;
+	LineMaterial: Material;
+	TranslucentTextMaterial: MaterialInterface;
+	TextFont: Font;
+	static Load(ResourceName: string): VREditorAssetContainer;
+	static Find(Outer: UObject, ResourceName: string): VREditorAssetContainer;
+	static GetDefaultObject(): VREditorAssetContainer;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorAssetContainer;
+	static C(Other: UObject | any): VREditorAssetContainer;
 }
 
-declare class NavigationInvokerComponent extends ActorComponent { 
-	TileGenerationRadius: number;
-	TileRemovalRadius: number;
-	static Load(ResourceName: string): NavigationInvokerComponent;
-	static Find(Outer: UObject, ResourceName: string): NavigationInvokerComponent;
-	static GetDefaultObject(): NavigationInvokerComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationInvokerComponent;
-	static C(Other: UObject | any): NavigationInvokerComponent;
+declare class EditorWorldExtensionActorData { 
+	Actor: Actor;
+	bValidForPIE: boolean;
+	clone() : EditorWorldExtensionActorData;
+	static C(Other: UObject | any): EditorWorldExtensionActorData;
 }
 
-declare class NavigationPathGenerator extends Interface { 
-	static Load(ResourceName: string): NavigationPathGenerator;
-	static Find(Outer: UObject, ResourceName: string): NavigationPathGenerator;
-	static GetDefaultObject(): NavigationPathGenerator;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationPathGenerator;
-	static C(Other: UObject | any): NavigationPathGenerator;
+declare class EditorWorldExtension extends UObject { 
+	ExtensionActors: EditorWorldExtensionActorData[];
+	static Load(ResourceName: string): EditorWorldExtension;
+	static Find(Outer: UObject, ResourceName: string): EditorWorldExtension;
+	static GetDefaultObject(): EditorWorldExtension;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorWorldExtension;
+	static C(Other: UObject | any): EditorWorldExtension;
 }
 
-declare type ENavDataGatheringModeConfig = 'Invalid' | 'Instant' | 'Lazy' | 'ENavDataGatheringModeConfig_MAX';
-declare var ENavDataGatheringModeConfig : { Invalid:'Invalid',Instant:'Instant',Lazy:'Lazy',ENavDataGatheringModeConfig_MAX:'ENavDataGatheringModeConfig_MAX', };
-declare type FNavigationSystemRunMode = 'InvalidMode' | 'GameMode' | 'EditorMode' | 'SimulationMode' | 'PIEMode' | 'FNavigationSystemRunMode_MAX';
-declare var FNavigationSystemRunMode : { InvalidMode:'InvalidMode',GameMode:'GameMode',EditorMode:'EditorMode',SimulationMode:'SimulationMode',PIEMode:'PIEMode',FNavigationSystemRunMode_MAX:'FNavigationSystemRunMode_MAX', };
-declare class NavMeshBoundsVolume extends Volume { 
-	SupportedAgents: NavAgentSelector;
-	static GetDefaultObject(): NavMeshBoundsVolume;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavMeshBoundsVolume;
-	static C(Other: UObject | any): NavMeshBoundsVolume;
+declare type EHorizTextAligment = 'EHTA_Left' | 'EHTA_Center' | 'EHTA_Right' | 'EHTA_MAX';
+declare var EHorizTextAligment : { EHTA_Left:'EHTA_Left',EHTA_Center:'EHTA_Center',EHTA_Right:'EHTA_Right',EHTA_MAX:'EHTA_MAX', };
+declare type EVerticalTextAligment = 'EVRTA_TextTop' | 'EVRTA_TextCenter' | 'EVRTA_TextBottom' | 'EVRTA_QuadTop' | 'EVRTA_MAX';
+declare var EVerticalTextAligment : { EVRTA_TextTop:'EVRTA_TextTop',EVRTA_TextCenter:'EVRTA_TextCenter',EVRTA_TextBottom:'EVRTA_TextBottom',EVRTA_QuadTop:'EVRTA_QuadTop',EVRTA_MAX:'EVRTA_MAX', };
+declare class TextRenderComponent extends PrimitiveComponent { 
+	text: string;
+	TextMaterial: MaterialInterface;
+	Font: Font;
+	HorizontalAlignment: EHorizTextAligment;
+	VerticalAlignment: EVerticalTextAligment;
+	TextRenderColor: Color;
+	XScale: number;
+	YScale: number;
+	WorldSize: number;
+	InvDefaultSize: number;
+	HorizSpacingAdjust: number;
+	VertSpacingAdjust: number;
+	bAlwaysRenderAsText: boolean;
+	static Load(ResourceName: string): TextRenderComponent;
+	static Find(Outer: UObject, ResourceName: string): TextRenderComponent;
+	static GetDefaultObject(): TextRenderComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextRenderComponent;
+	SetYScale(Value: number): void;
+	SetXScale(Value: number): void;
+	SetWorldSize(Value: number): void;
+	SetVertSpacingAdjust(Value: number): void;
+	SetVerticalAlignment(Value: EVerticalTextAligment): void;
+	SetTextRenderColor(Value: Color): void;
+	SetTextMaterial(Material: MaterialInterface): void;
+	SetText(Value: string): void;
+	SetHorizSpacingAdjust(Value: number): void;
+	SetHorizontalAlignment(Value: EHorizTextAligment): void;
+	SetFont(Value: Font): void;
+	K2_SetText(Value: string): void;
+	GetTextWorldSize(): Vector;
+	GetTextLocalSize(): Vector;
+	static C(Other: UObject | any): TextRenderComponent;
 }
 
-declare type ENavigationQueryResult = 'Invalid' | 'Error' | 'Fail' | 'Success' | 'ENavigationQueryResult_MAX';
-declare var ENavigationQueryResult : { Invalid:'Invalid',Error:'Error',Fail:'Fail',Success:'Success',ENavigationQueryResult_MAX:'ENavigationQueryResult_MAX', };
-declare class NavigationSystemV1 extends NavigationSystemBase { 
-	MainNavData: NavigationData;
-	AbstractNavData: NavigationData;
-	CrowdManagerClass: UnrealEngineClass;
-	bAutoCreateNavigationData: boolean;
-	bSpawnNavDataInNavBoundsLevel: boolean;
-	bAllowClientSideNavigation: boolean;
-	bShouldDiscardSubLevelNavData: boolean;
-	bTickWhilePaused: boolean;
-	bSupportRebuilding: boolean;
-	bInitialBuildingLocked: boolean;
-	bSkipAgentHeightCheckWhenPickingNavData: boolean;
-	DataGatheringMode: ENavDataGatheringModeConfig;
-	bGenerateNavigationOnlyAroundNavigationInvokers: boolean;
-	ActiveTilesUpdateInterval: number;
-	SupportedAgents: NavDataConfig[];
-	DirtyAreasUpdateFreq: number;
-	NavDataSet: NavigationData[];
-	NavDataRegistrationQueue: NavigationData[];
-	OnNavDataRegisteredEvent: UnrealEngineMulticastDelegate<(NavData: NavigationData) => void>;
-	OnNavigationGenerationFinishedDelegate: UnrealEngineMulticastDelegate<(NavData: NavigationData) => void>;
-	OperationMode: FNavigationSystemRunMode;
-	static Load(ResourceName: string): NavigationSystemV1;
-	static Find(Outer: UObject, ResourceName: string): NavigationSystemV1;
-	static GetDefaultObject(): NavigationSystemV1;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationSystemV1;
-	UnregisterNavigationInvoker(Invoker: Actor): void;
-	static SimpleMoveToLocation(Controller: Controller,Goal: Vector): void;
-	static SimpleMoveToActor(Controller: Controller,Goal: Actor): void;
-	SetMaxSimultaneousTileGenerationJobsCount(MaxNumberOfJobs: number): void;
-	SetGeometryGatheringMode(NewMode: ENavDataGatheringModeConfig): void;
-	ResetMaxSimultaneousTileGenerationJobsCount(): void;
-	RegisterNavigationInvoker(Invoker: Actor,TileGenerationRadius: number,TileRemovalRadius: number): void;
-	static ProjectPointToNavigation(WorldContextObject: UObject,Point: Vector,NavData: NavigationData,FilterClass: UnrealEngineClass,QueryExtent: Vector): Vector;
-	OnNavigationBoundsUpdated(NavVolume: NavMeshBoundsVolume): void;
-	static NavigationRaycast(WorldContextObject: UObject,RayStart: Vector,RayEnd: Vector,HitLocation?: Vector,FilterClass?: UnrealEngineClass,Querier?: Controller): {HitLocation: Vector, $: boolean};
-	static K2_ProjectPointToNavigation(WorldContextObject: UObject,Point: Vector,ProjectedLocation?: Vector,NavData?: NavigationData,FilterClass?: UnrealEngineClass,QueryExtent?: Vector): {ProjectedLocation: Vector, $: boolean};
-	static K2_GetRandomReachablePointInRadius(WorldContextObject: UObject,Origin: Vector,RandomLocation?: Vector,Radius?: number,NavData?: NavigationData,FilterClass?: UnrealEngineClass): {RandomLocation: Vector, $: boolean};
-	static K2_GetRandomPointInNavigableRadius(WorldContextObject: UObject,Origin: Vector,RandomLocation?: Vector,Radius?: number,NavData?: NavigationData,FilterClass?: UnrealEngineClass): {RandomLocation: Vector, $: boolean};
-	static IsNavigationBeingBuiltOrLocked(WorldContextObject: UObject): boolean;
-	static IsNavigationBeingBuilt(WorldContextObject: UObject): boolean;
-	static GetRandomReachablePointInRadius(WorldContextObject: UObject,Origin: Vector,Radius: number,NavData: NavigationData,FilterClass: UnrealEngineClass): Vector;
-	static GetRandomPointInNavigableRadius(WorldContextObject: UObject,Origin: Vector,Radius: number,NavData: NavigationData,FilterClass: UnrealEngineClass): Vector;
-	static GetPathLength(WorldContextObject: UObject,PathStart: Vector,PathEnd: Vector,PathLength?: number,NavData?: NavigationData,FilterClass?: UnrealEngineClass): {PathLength: number, $: ENavigationQueryResult};
-	static GetPathCost(WorldContextObject: UObject,PathStart: Vector,PathEnd: Vector,PathCost?: number,NavData?: NavigationData,FilterClass?: UnrealEngineClass): {PathCost: number, $: ENavigationQueryResult};
-	static GetNavigationSystem(WorldContextObject: UObject): NavigationSystemV1;
-	static FindPathToLocationSynchronously(WorldContextObject: UObject,PathStart: Vector,PathEnd: Vector,PathfindingContext: Actor,FilterClass: UnrealEngineClass): NavigationPath;
-	static FindPathToActorSynchronously(WorldContextObject: UObject,PathStart: Vector,GoalActor: Actor,TetherDistance: number,PathfindingContext: Actor,FilterClass: UnrealEngineClass): NavigationPath;
-	static C(Other: UObject | any): NavigationSystemV1;
+declare class PostProcessComponent extends SceneComponent { 
+	Settings: PostProcessSettings;
+	Priority: number;
+	BlendRadius: number;
+	BlendWeight: number;
+	bEnabled: boolean;
+	bUnbound: boolean;
+	static Load(ResourceName: string): PostProcessComponent;
+	static Find(Outer: UObject, ResourceName: string): PostProcessComponent;
+	static GetDefaultObject(): PostProcessComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PostProcessComponent;
+	static C(Other: UObject | any): PostProcessComponent;
 }
 
-declare class NavigationSystemModuleConfig extends NavigationSystemConfig { 
-	bStrictlyStatic: boolean;
-	bCreateOnClient: boolean;
-	bAutoSpawnMissingNavData: boolean;
-	bSpawnNavDataInNavBoundsLevel: boolean;
-	static Load(ResourceName: string): NavigationSystemModuleConfig;
-	static Find(Outer: UObject, ResourceName: string): NavigationSystemModuleConfig;
-	static GetDefaultObject(): NavigationSystemModuleConfig;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationSystemModuleConfig;
-	static C(Other: UObject | any): NavigationSystemModuleConfig;
+declare class VREditorAvatarActor extends Actor { 
+	HeadMeshComponent: StaticMeshComponent;
+	WorldMovementGridMeshComponent: StaticMeshComponent;
+	WorldMovementGridMID: MaterialInstanceDynamic;
+	WorldMovementGridOpacity: number;
+	bIsDrawingWorldMovementPostProcess: boolean;
+	WorldMovementPostProcessMaterial: MaterialInstanceDynamic;
+	ScaleProgressMeshComponent: StaticMeshComponent;
+	CurrentScaleProgressMeshComponent: StaticMeshComponent;
+	UserScaleIndicatorText: TextRenderComponent;
+	FixedUserScaleMID: MaterialInstanceDynamic;
+	TranslucentFixedUserScaleMID: MaterialInstanceDynamic;
+	CurrentUserScaleMID: MaterialInstanceDynamic;
+	TranslucentCurrentUserScaleMID: MaterialInstanceDynamic;
+	PostProcessComponent: PostProcessComponent;
+	VRMode: VREditorMode;
+	static GetDefaultObject(): VREditorAvatarActor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorAvatarActor;
+	static C(Other: UObject | any): VREditorAvatarActor;
+}
+
+declare class VREditorBaseActor extends Actor { 
+	VRMode: VREditorMode;
+	static GetDefaultObject(): VREditorBaseActor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorBaseActor;
+	static C(Other: UObject | any): VREditorBaseActor;
 }
 
-declare class NavTestRenderingComponent extends PrimitiveComponent { 
-	static Load(ResourceName: string): NavTestRenderingComponent;
-	static Find(Outer: UObject, ResourceName: string): NavTestRenderingComponent;
-	static GetDefaultObject(): NavTestRenderingComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavTestRenderingComponent;
-	static C(Other: UObject | any): NavTestRenderingComponent;
+declare class VREditorFloatingUICreationContext { 
+	WidgetClass: UnrealEngineClass;
+	PanelID: string;
+	PanelSpawnOffset: Transform;
+	PanelSize: Vector2D;
+	PanelMesh: StaticMesh;
+	EditorUISize: number;
+	bHideWindowHandles: boolean;
+	clone() : VREditorFloatingUICreationContext;
+	static C(Other: UObject | any): VREditorFloatingUICreationContext;
 }
 
-declare type ENavCostDisplay = 'TotalCost' | 'HeuristicOnly' | 'RealCostOnly' | 'ENavCostDisplay_MAX';
-declare var ENavCostDisplay : { TotalCost:'TotalCost',HeuristicOnly:'HeuristicOnly',RealCostOnly:'RealCostOnly',ENavCostDisplay_MAX:'ENavCostDisplay_MAX', };
-declare class NavigationTestingActor extends Actor { 
-	CapsuleComponent: CapsuleComponent;
-	EdRenderComp: NavTestRenderingComponent;
-	InvokerComponent: NavigationInvokerComponent;
-	bActAsNavigationInvoker: boolean;
-	NavAgentProps: NavAgentProperties;
-	QueryingExtent: Vector;
-	MyNavData: NavigationData;
-	ProjectedLocation: Vector;
-	bProjectedLocationValid: boolean;
-	bSearchStart: boolean;
-	bUseHierarchicalPathfinding: boolean;
-	bGatherDetailedInfo: boolean;
-	bDrawDistanceToWall: boolean;
-	bShowNodePool: boolean;
-	bShowBestPath: boolean;
-	bShowDiffWithPreviousStep: boolean;
-	bShouldBeVisibleInGame: boolean;
-	CostDisplayMode: ENavCostDisplay;
-	TextCanvasOffset: Vector2D;
-	bPathExist: boolean;
-	bPathIsPartial: boolean;
-	bPathSearchOutOfNodes: boolean;
-	PathfindingTime: number;
-	PathCost: number;
-	PathfindingSteps: number;
-	OtherActor: NavigationTestingActor;
-	FilterClass: UnrealEngineClass;
-	ShowStepIndex: number;
-	OffsetFromCornersDistance: number;
-	static GetDefaultObject(): NavigationTestingActor;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationTestingActor;
-	static C(Other: UObject | any): NavigationTestingActor;
+declare type EWidgetSpace = 'World' | 'Screen' | 'EWidgetSpace_MAX';
+declare var EWidgetSpace : { World:'World',Screen:'Screen',EWidgetSpace_MAX:'EWidgetSpace_MAX', };
+declare type EWidgetTimingPolicy = 'RealTime' | 'GameTime' | 'EWidgetTimingPolicy_MAX';
+declare var EWidgetTimingPolicy : { RealTime:'RealTime',GameTime:'GameTime',EWidgetTimingPolicy_MAX:'EWidgetTimingPolicy_MAX', };
+declare type EWindowVisibility = 'Visible' | 'SelfHitTestInvisible' | 'EWindowVisibility_MAX';
+declare var EWindowVisibility : { Visible:'Visible',SelfHitTestInvisible:'SelfHitTestInvisible',EWindowVisibility_MAX:'EWindowVisibility_MAX', };
+declare type EWidgetBlendMode = 'Opaque' | 'Masked' | 'Transparent' | 'EWidgetBlendMode_MAX';
+declare var EWidgetBlendMode : { Opaque:'Opaque',Masked:'Masked',Transparent:'Transparent',EWidgetBlendMode_MAX:'EWidgetBlendMode_MAX', };
+declare type EWidgetGeometryMode = 'Plane' | 'Cylinder' | 'EWidgetGeometryMode_MAX';
+declare var EWidgetGeometryMode : { Plane:'Plane',Cylinder:'Cylinder',EWidgetGeometryMode_MAX:'EWidgetGeometryMode_MAX', };
+declare class WidgetComponent extends MeshComponent { 
+	Space: EWidgetSpace;
+	TimingPolicy: EWidgetTimingPolicy;
+	WidgetClass: UnrealEngineClass;
+	DrawSize: IntPoint;
+	bManuallyRedraw: boolean;
+	bRedrawRequested: boolean;
+	RedrawTime: number;
+	CurrentDrawSize: IntPoint;
+	bDrawAtDesiredSize: boolean;
+	Pivot: Vector2D;
+	bReceiveHardwareInput: boolean;
+	bWindowFocusable: boolean;
+	WindowVisibility: EWindowVisibility;
+	bApplyGammaCorrection: boolean;
+	OwnerPlayer: LocalPlayer;
+	BackgroundColor: LinearColor;
+	TintColorAndOpacity: LinearColor;
+	OpacityFromTexture: number;
+	BlendMode: EWidgetBlendMode;
+	bIsTwoSided: boolean;
+	TickWhenOffscreen: boolean;
+	Widget: UserWidget;
+	BodySetup: BodySetup;
+	TranslucentMaterial: MaterialInterface;
+	TranslucentMaterial_OneSided: MaterialInterface;
+	OpaqueMaterial: MaterialInterface;
+	OpaqueMaterial_OneSided: MaterialInterface;
+	MaskedMaterial: MaterialInterface;
+	MaskedMaterial_OneSided: MaterialInterface;
+	RenderTarget: TextureRenderTarget2D;
+	MaterialInstance: MaterialInstanceDynamic;
+	bAddedToScreen: boolean;
+	bEditTimeUsable: boolean;
+	SharedLayerName: string;
+	LayerZOrder: number;
+	GeometryMode: EWidgetGeometryMode;
+	CylinderArcAngle: number;
+	static Load(ResourceName: string): WidgetComponent;
+	static Find(Outer: UObject, ResourceName: string): WidgetComponent;
+	static GetDefaultObject(): WidgetComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetComponent;
+	SetWindowVisibility(InVisibility: EWindowVisibility): void;
+	SetWindowFocusable(bInWindowFocusable: boolean): void;
+	SetWidgetSpace(NewSpace: EWidgetSpace): void;
+	SetWidget(Widget: UserWidget): void;
+	SetTwoSided(bWantTwoSided: boolean): void;
+	SetTintColorAndOpacity(NewTintColorAndOpacity: LinearColor): void;
+	SetTickWhenOffscreen(bWantTickWhenOffscreen: boolean): void;
+	SetRedrawTime(InRedrawTime: number): void;
+	SetPivot(InPivot: Vector2D): void;
+	SetOwnerPlayer(LocalPlayer: LocalPlayer): void;
+	SetManuallyRedraw(bUseManualRedraw: boolean): void;
+	SetGeometryMode(InGeometryMode: EWidgetGeometryMode): void;
+	SetDrawSize(Size: Vector2D): void;
+	SetDrawAtDesiredSize(bInDrawAtDesiredSize: boolean): void;
+	SetCylinderArcAngle(InCylinderArcAngle: number): void;
+	SetBackgroundColor(NewBackgroundColor: LinearColor): void;
+	RequestRedraw(): void;
+	GetWindowVisiblility(): EWindowVisibility;
+	GetWindowFocusable(): boolean;
+	GetWidgetSpace(): EWidgetSpace;
+	GetUserWidgetObject(): UserWidget;
+	GetTwoSided(): boolean;
+	GetTickWhenOffscreen(): boolean;
+	GetRenderTarget(): TextureRenderTarget2D;
+	GetRedrawTime(): number;
+	GetPivot(): Vector2D;
+	GetOwnerPlayer(): LocalPlayer;
+	GetMaterialInstance(): MaterialInstanceDynamic;
+	GetManuallyRedraw(): boolean;
+	GetGeometryMode(): EWidgetGeometryMode;
+	GetDrawSize(): Vector2D;
+	GetDrawAtDesiredSize(): boolean;
+	GetCylinderArcAngle(): number;
+	GetCurrentDrawSize(): Vector2D;
+	static C(Other: UObject | any): WidgetComponent;
 }
 
-declare class NavLinkComponent extends PrimitiveComponent { 
-	Links: NavigationLink[];
-	static Load(ResourceName: string): NavLinkComponent;
-	static Find(Outer: UObject, ResourceName: string): NavLinkComponent;
-	static GetDefaultObject(): NavLinkComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkComponent;
-	static C(Other: UObject | any): NavLinkComponent;
+declare type EVREditorWidgetDrawingPolicy = 'Always' | 'Hovering' | 'EVREditorWidgetDrawingPolicy_MAX';
+declare var EVREditorWidgetDrawingPolicy : { Always:'Always',Hovering:'Hovering',EVREditorWidgetDrawingPolicy_MAX:'EVREditorWidgetDrawingPolicy_MAX', };
+declare class VREditorWidgetComponent extends WidgetComponent { 
+	DrawingPolicy: EVREditorWidgetDrawingPolicy;
+	bIsHovering: boolean;
+	bHasEverDrawn: boolean;
+	static Load(ResourceName: string): VREditorWidgetComponent;
+	static Find(Outer: UObject, ResourceName: string): VREditorWidgetComponent;
+	static GetDefaultObject(): VREditorWidgetComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorWidgetComponent;
+	static C(Other: UObject | any): VREditorWidgetComponent;
 }
 
-declare class NavLinkCustomInterface extends Interface { 
-	static Load(ResourceName: string): NavLinkCustomInterface;
-	static Find(Outer: UObject, ResourceName: string): NavLinkCustomInterface;
-	static GetDefaultObject(): NavLinkCustomInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkCustomInterface;
-	static C(Other: UObject | any): NavLinkCustomInterface;
+declare class VREditorFloatingUI extends VREditorBaseActor { 
+	CreationContext: VREditorFloatingUICreationContext;
+	UserWidget: UserWidget;
+	WidgetComponent: VREditorWidgetComponent;
+	WindowMeshComponent: StaticMeshComponent;
+	UserWidgetClass: UnrealEngineClass;
+	static GetDefaultObject(): VREditorFloatingUI;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorFloatingUI;
+	static C(Other: UObject | any): VREditorFloatingUI;
 }
 
-declare class NavLinkHostInterface extends Interface { 
-	static Load(ResourceName: string): NavLinkHostInterface;
-	static Find(Outer: UObject, ResourceName: string): NavLinkHostInterface;
-	static GetDefaultObject(): NavLinkHostInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkHostInterface;
-	static C(Other: UObject | any): NavLinkHostInterface;
+declare class VREditorRadialFloatingUI extends VREditorBaseActor { 
+	WidgetComponents: VREditorWidgetComponent[];
+	WindowMeshComponent: StaticMeshComponent;
+	ArrowMeshComponent: StaticMeshComponent;
+	CentralWidgetComponent: VREditorWidgetComponent;
+	static GetDefaultObject(): VREditorRadialFloatingUI;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorRadialFloatingUI;
+	static C(Other: UObject | any): VREditorRadialFloatingUI;
 }
 
-declare class NavLinkDefinition extends UObject { 
-	Links: NavigationLink[];
-	SegmentLinks: NavigationSegmentLink[];
-	static Load(ResourceName: string): NavLinkDefinition;
-	static Find(Outer: UObject, ResourceName: string): NavLinkDefinition;
-	static GetDefaultObject(): NavLinkDefinition;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkDefinition;
-	static C(Other: UObject | any): NavLinkDefinition;
+declare class ViewportDragOperation extends UObject { 
+	static Load(ResourceName: string): ViewportDragOperation;
+	static Find(Outer: UObject, ResourceName: string): ViewportDragOperation;
+	static GetDefaultObject(): ViewportDragOperation;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportDragOperation;
+	static C(Other: UObject | any): ViewportDragOperation;
 }
 
-declare class NavLinkTrivial extends NavLinkDefinition { 
-	static Load(ResourceName: string): NavLinkTrivial;
-	static Find(Outer: UObject, ResourceName: string): NavLinkTrivial;
-	static GetDefaultObject(): NavLinkTrivial;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkTrivial;
-	static C(Other: UObject | any): NavLinkTrivial;
+declare class ViewportDragOperationComponent extends ActorComponent { 
+	DragOperation: ViewportDragOperation;
+	DragOperationSubclass: UnrealEngineClass;
+	static Load(ResourceName: string): ViewportDragOperationComponent;
+	static Find(Outer: UObject, ResourceName: string): ViewportDragOperationComponent;
+	static GetDefaultObject(): ViewportDragOperationComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportDragOperationComponent;
+	static C(Other: UObject | any): ViewportDragOperationComponent;
 }
 
-declare class NavMeshRenderingComponent extends PrimitiveComponent { 
-	static Load(ResourceName: string): NavMeshRenderingComponent;
-	static Find(Outer: UObject, ResourceName: string): NavMeshRenderingComponent;
-	static GetDefaultObject(): NavMeshRenderingComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavMeshRenderingComponent;
-	static C(Other: UObject | any): NavMeshRenderingComponent;
+declare class VREditorDockableWindow extends VREditorFloatingUI { 
+	DockButtonMeshComponent: StaticMeshComponent;
+	SelectionBarMeshComponent: StaticMeshComponent;
+	CloseButtonMeshComponent: StaticMeshComponent;
+	DockButtonMID: MaterialInstanceDynamic;
+	SelectionBarMID: MaterialInstanceDynamic;
+	SelectionBarTranslucentMID: MaterialInstanceDynamic;
+	CloseButtonMID: MaterialInstanceDynamic;
+	CloseButtonTranslucentMID: MaterialInstanceDynamic;
+	DragOperationComponent: ViewportDragOperationComponent;
+	static GetDefaultObject(): VREditorDockableWindow;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorDockableWindow;
+	static C(Other: UObject | any): VREditorDockableWindow;
 }
 
-declare class NavModifierComponent extends NavRelevantComponent { 
-	AreaClass: UnrealEngineClass;
-	FailsafeExtent: Vector;
-	bIncludeAgentHeight: boolean;
-	static Load(ResourceName: string): NavModifierComponent;
-	static Find(Outer: UObject, ResourceName: string): NavModifierComponent;
-	static GetDefaultObject(): NavModifierComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavModifierComponent;
-	SetAreaClass(NewAreaClass: UnrealEngineClass): void;
-	static C(Other: UObject | any): NavModifierComponent;
+declare class ViewportTransformer extends UObject { 
+	ViewportWorldInteraction: ViewportWorldInteraction;
+	static Load(ResourceName: string): ViewportTransformer;
+	static Find(Outer: UObject, ResourceName: string): ViewportTransformer;
+	static GetDefaultObject(): ViewportTransformer;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportTransformer;
+	Shutdown(): void;
+	ShouldCenterTransformGizmoPivot(): boolean;
+	OnStopDragging(Interactor: ViewportInteractor): void;
+	OnStartDragging(Interactor: ViewportInteractor): void;
+	Init(InitViewportWorldInteraction: ViewportWorldInteraction): void;
+	CanAlignToActors(): boolean;
+	static C(Other: UObject | any): ViewportTransformer;
 }
 
-declare class NavModifierVolume extends Volume { 
-	AreaClass: UnrealEngineClass;
-	static GetDefaultObject(): NavModifierVolume;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavModifierVolume;
-	SetAreaClass(NewAreaClass: UnrealEngineClass): void;
-	static C(Other: UObject | any): NavModifierVolume;
+declare class GizmoHandle { 
+	clone() : GizmoHandle;
+	static C(Other: UObject | any): GizmoHandle;
 }
 
-declare class NavNodeInterface extends Interface { 
-	static Load(ResourceName: string): NavNodeInterface;
-	static Find(Outer: UObject, ResourceName: string): NavNodeInterface;
-	static GetDefaultObject(): NavNodeInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavNodeInterface;
-	static C(Other: UObject | any): NavNodeInterface;
+declare class GizmoHandleGroup extends SceneComponent { 
+	GizmoMaterial: MaterialInterface;
+	TranslucentGizmoMaterial: MaterialInterface;
+	Handles: GizmoHandle[];
+	OwningTransformGizmoActor: BaseTransformGizmo;
+	DragOperationComponent: ViewportDragOperationComponent;
+	static Load(ResourceName: string): GizmoHandleGroup;
+	static Find(Outer: UObject, ResourceName: string): GizmoHandleGroup;
+	static GetDefaultObject(): GizmoHandleGroup;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoHandleGroup;
+	static C(Other: UObject | any): GizmoHandleGroup;
+}
+
+declare class BaseTransformGizmo extends Actor { 
+	SceneComponent: SceneComponent;
+	AllHandleGroups: GizmoHandleGroup[];
+	WorldInteraction: ViewportWorldInteraction;
+	static GetDefaultObject(): BaseTransformGizmo;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BaseTransformGizmo;
+	static C(Other: UObject | any): BaseTransformGizmo;
 }
 
-declare class NavSystemConfigOverride extends Actor { 
-	SpriteComponent: BillboardComponent;
-	NavigationSystemConfig: NavigationSystemConfig;
-	bLoadOnClient: boolean;
-	static GetDefaultObject(): NavSystemConfigOverride;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavSystemConfigOverride;
-	ApplyChanges(): void;
-	static C(Other: UObject | any): NavSystemConfigOverride;
+declare class MouseCursorInteractor extends ViewportInteractor { 
+	static Load(ResourceName: string): MouseCursorInteractor;
+	static Find(Outer: UObject, ResourceName: string): MouseCursorInteractor;
+	static GetDefaultObject(): MouseCursorInteractor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MouseCursorInteractor;
+	static C(Other: UObject | any): MouseCursorInteractor;
 }
 
-declare class RecastFilter_UseDefaultArea extends NavigationQueryFilter { 
-	static Load(ResourceName: string): RecastFilter_UseDefaultArea;
-	static Find(Outer: UObject, ResourceName: string): RecastFilter_UseDefaultArea;
-	static GetDefaultObject(): RecastFilter_UseDefaultArea;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RecastFilter_UseDefaultArea;
-	static C(Other: UObject | any): RecastFilter_UseDefaultArea;
+declare class ViewportInteractionAssetContainer extends DataAsset { 
+	GizmoHandleSelectedSound: SoundBase;
+	GizmoHandleDropSound: SoundBase;
+	SelectionChangeSound: SoundBase;
+	SelectionDropSound: SoundBase;
+	SelectionStartDragSound: SoundBase;
+	GridSnapSound: SoundBase;
+	ActorSnapSound: SoundBase;
+	UndoSound: SoundBase;
+	RedoSound: SoundBase;
+	GridMesh: StaticMesh;
+	TranslationHandleMesh: StaticMesh;
+	UniformScaleHandleMesh: StaticMesh;
+	ScaleHandleMesh: StaticMesh;
+	PlaneTranslationHandleMesh: StaticMesh;
+	RotationHandleMesh: StaticMesh;
+	RotationHandleSelectedMesh: StaticMesh;
+	StartRotationIndicatorMesh: StaticMesh;
+	CurrentRotationIndicatorMesh: StaticMesh;
+	FreeRotationHandleMesh: StaticMesh;
+	GridMaterial: MaterialInterface;
+	TransformGizmoMaterial: MaterialInterface;
+	TranslucentTransformGizmoMaterial: MaterialInterface;
+	static Load(ResourceName: string): ViewportInteractionAssetContainer;
+	static Find(Outer: UObject, ResourceName: string): ViewportInteractionAssetContainer;
+	static GetDefaultObject(): ViewportInteractionAssetContainer;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportInteractionAssetContainer;
+	static C(Other: UObject | any): ViewportInteractionAssetContainer;
 }
 
-declare class RecastNavMeshDataChunk extends NavigationDataChunk { 
-	static Load(ResourceName: string): RecastNavMeshDataChunk;
-	static Find(Outer: UObject, ResourceName: string): RecastNavMeshDataChunk;
-	static GetDefaultObject(): RecastNavMeshDataChunk;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RecastNavMeshDataChunk;
-	static C(Other: UObject | any): RecastNavMeshDataChunk;
+declare class ViewportWorldInteraction extends EditorWorldExtension { 
+	Interactors: ViewportInteractor[];
+	ViewportTransformer: ViewportTransformer;
+	TransformGizmoActor: BaseTransformGizmo;
+	SnapGridActor: Actor;
+	SnapGridMeshComponent: StaticMeshComponent;
+	SnapGridMID: MaterialInstanceDynamic;
+	DefaultMouseCursorInteractor: MouseCursorInteractor;
+	ActorsToExcludeFromHitTest: any[];
+	AssetContainer: ViewportInteractionAssetContainer;
+	static Load(ResourceName: string): ViewportWorldInteraction;
+	static Find(Outer: UObject, ResourceName: string): ViewportWorldInteraction;
+	static GetDefaultObject(): ViewportWorldInteraction;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportWorldInteraction;
+	SetRoomTransformForNextFrame(NewRoomTransform: Transform): void;
+	SetHeadTransform(NewHeadTransform: Transform): void;
+	RemoveInteractor(Interactor: ViewportInteractor): void;
+	GetWorldScaleFactor(): number;
+	GetTransformGizmoActor(): BaseTransformGizmo;
+	GetRoomTransform(): Transform;
+	GetRoomSpaceHeadTransform(): Transform;
+	GetInteractors(): ViewportInteractor[];
+	GetHeadTransform(): Transform;
+	AddInteractor(Interactor: ViewportInteractor): void;
+	AddActorToExcludeFromHitTests(ActorToExcludeFromHitTests: Actor): void;
+	static C(Other: UObject | any): ViewportWorldInteraction;
 }
 
-declare type ETimezoneSetting = 'InternationalDateLineWest' | 'CoordinatedUniversalTimeNeg11' | 'Samoa' | 'Hawaii' | 'Alaska' | 'PacificTime_USCAN' | 'BajaCalifornia' | 'MountainTime_USCAN' | 'Chihuahua_LaPaz_Mazatlan' | 'Arizona' | 'Saskatchewan' | 'CentralAmerica' | 'CentralTime_USCAN' | 'Guadalajara_MexicoCity_Monterrey' | 'EasternTime_USCAN' | 'Bogota_Lima_Quito' | 'Indiana_US' | 'Caracas' | 'AtlanticTime_Canada' | 'Cuiaba' | 'Santiago' | 'Georgetown_LaPaz_Manaus_SanJuan' | 'Asuncion' | 'Newfoundland' | 'Brasilia' | 'Greenland' | 'Montevideo' | 'Cayenne_Fortaleza' | 'BuenosAires' | 'MidAtlantic' | 'CoordinatedUniversalTimeNeg02' | 'Azores' | 'CaboVerdeIs' | 'Dublin_Edinburgh_Lisbon_London' | 'Monrovia_Reykjavik' | 'Casablanca' | 'UTC' | 'Belgrade_Bratislava_Budapest_Ljubljana_Prague' | 'Sarajevo_Skopje_Warsaw_Zagreb' | 'Brussels_Copenhagen_Madrid_Paris' | 'WestCentralAfrica' | 'Amsterdam_Berlin_Bern_Rome_Stockholm_Vienna' | 'Windhoek' | 'Minsk' | 'Cairo' | 'Helsinki_Kyiv_Riga_Sofia_Tallinn_Vilnius' | 'Athens_Bucharest' | 'Jerusalem' | 'Amman' | 'Beirut' | 'Harare_Pretoria' | 'Damascus' | 'Istanbul' | 'Kuwait_Riyadh' | 'Baghdad' | 'Nairobi' | 'Kaliningrad' | 'Tehran' | 'Moscow_StPetersburg_Volgograd' | 'AbuDhabi_Muscat' | 'Baku' | 'Yerevan' | 'Tbilisi' | 'PortLouis' | 'Kabul' | 'Tashkent' | 'Islamabad_Karachi' | 'Chennai_Kolkata_Mumbai_NewDelhi' | 'SriJayawardenepura' | 'Kathmandu' | 'Ekaterinburg' | 'Astana' | 'Dhaka' | 'Yangon_Rangoon' | 'Novosibirsk' | 'Bangkok_Hanoi_Jakarta' | 'Krasnoyarsk' | 'Beijing_Chongqing_HongKong_Urumqi' | 'KualaLumpur_Singapore' | 'Taipei' | 'Perth' | 'Ulaanbaatar' | 'Irkutsk' | 'Seoul' | 'Osaka_Sapporo_Tokyo' | 'Darwin' | 'Adelaide' | 'Yakutsk' | 'Canberra_Melbourne_Sydney' | 'Brisbane' | 'Hobart' | 'Guam_PortMoresby' | 'Vladivostok' | 'SolomonIs_NewCaledonia' | 'Magadan' | 'Fiji' | 'Auckland_Wellington' | 'CoordinatedUniversalTime12' | 'Nukualofa' | 'LocalTime' | 'ETimezoneSetting_MAX';
-declare var ETimezoneSetting : { InternationalDateLineWest:'InternationalDateLineWest',CoordinatedUniversalTimeNeg11:'CoordinatedUniversalTimeNeg11',Samoa:'Samoa',Hawaii:'Hawaii',Alaska:'Alaska',PacificTime_USCAN:'PacificTime_USCAN',BajaCalifornia:'BajaCalifornia',MountainTime_USCAN:'MountainTime_USCAN',Chihuahua_LaPaz_Mazatlan:'Chihuahua_LaPaz_Mazatlan',Arizona:'Arizona',Saskatchewan:'Saskatchewan',CentralAmerica:'CentralAmerica',CentralTime_USCAN:'CentralTime_USCAN',Guadalajara_MexicoCity_Monterrey:'Guadalajara_MexicoCity_Monterrey',EasternTime_USCAN:'EasternTime_USCAN',Bogota_Lima_Quito:'Bogota_Lima_Quito',Indiana_US:'Indiana_US',Caracas:'Caracas',AtlanticTime_Canada:'AtlanticTime_Canada',Cuiaba:'Cuiaba',Santiago:'Santiago',Georgetown_LaPaz_Manaus_SanJuan:'Georgetown_LaPaz_Manaus_SanJuan',Asuncion:'Asuncion',Newfoundland:'Newfoundland',Brasilia:'Brasilia',Greenland:'Greenland',Montevideo:'Montevideo',Cayenne_Fortaleza:'Cayenne_Fortaleza',BuenosAires:'BuenosAires',MidAtlantic:'MidAtlantic',CoordinatedUniversalTimeNeg02:'CoordinatedUniversalTimeNeg02',Azores:'Azores',CaboVerdeIs:'CaboVerdeIs',Dublin_Edinburgh_Lisbon_London:'Dublin_Edinburgh_Lisbon_London',Monrovia_Reykjavik:'Monrovia_Reykjavik',Casablanca:'Casablanca',UTC:'UTC',Belgrade_Bratislava_Budapest_Ljubljana_Prague:'Belgrade_Bratislava_Budapest_Ljubljana_Prague',Sarajevo_Skopje_Warsaw_Zagreb:'Sarajevo_Skopje_Warsaw_Zagreb',Brussels_Copenhagen_Madrid_Paris:'Brussels_Copenhagen_Madrid_Paris',WestCentralAfrica:'WestCentralAfrica',Amsterdam_Berlin_Bern_Rome_Stockholm_Vienna:'Amsterdam_Berlin_Bern_Rome_Stockholm_Vienna',Windhoek:'Windhoek',Minsk:'Minsk',Cairo:'Cairo',Helsinki_Kyiv_Riga_Sofia_Tallinn_Vilnius:'Helsinki_Kyiv_Riga_Sofia_Tallinn_Vilnius',Athens_Bucharest:'Athens_Bucharest',Jerusalem:'Jerusalem',Amman:'Amman',Beirut:'Beirut',Harare_Pretoria:'Harare_Pretoria',Damascus:'Damascus',Istanbul:'Istanbul',Kuwait_Riyadh:'Kuwait_Riyadh',Baghdad:'Baghdad',Nairobi:'Nairobi',Kaliningrad:'Kaliningrad',Tehran:'Tehran',Moscow_StPetersburg_Volgograd:'Moscow_StPetersburg_Volgograd',AbuDhabi_Muscat:'AbuDhabi_Muscat',Baku:'Baku',Yerevan:'Yerevan',Tbilisi:'Tbilisi',PortLouis:'PortLouis',Kabul:'Kabul',Tashkent:'Tashkent',Islamabad_Karachi:'Islamabad_Karachi',Chennai_Kolkata_Mumbai_NewDelhi:'Chennai_Kolkata_Mumbai_NewDelhi',SriJayawardenepura:'SriJayawardenepura',Kathmandu:'Kathmandu',Ekaterinburg:'Ekaterinburg',Astana:'Astana',Dhaka:'Dhaka',Yangon_Rangoon:'Yangon_Rangoon',Novosibirsk:'Novosibirsk',Bangkok_Hanoi_Jakarta:'Bangkok_Hanoi_Jakarta',Krasnoyarsk:'Krasnoyarsk',Beijing_Chongqing_HongKong_Urumqi:'Beijing_Chongqing_HongKong_Urumqi',KualaLumpur_Singapore:'KualaLumpur_Singapore',Taipei:'Taipei',Perth:'Perth',Ulaanbaatar:'Ulaanbaatar',Irkutsk:'Irkutsk',Seoul:'Seoul',Osaka_Sapporo_Tokyo:'Osaka_Sapporo_Tokyo',Darwin:'Darwin',Adelaide:'Adelaide',Yakutsk:'Yakutsk',Canberra_Melbourne_Sydney:'Canberra_Melbourne_Sydney',Brisbane:'Brisbane',Hobart:'Hobart',Guam_PortMoresby:'Guam_PortMoresby',Vladivostok:'Vladivostok',SolomonIs_NewCaledonia:'SolomonIs_NewCaledonia',Magadan:'Magadan',Fiji:'Fiji',Auckland_Wellington:'Auckland_Wellington',CoordinatedUniversalTime12:'CoordinatedUniversalTime12',Nukualofa:'Nukualofa',LocalTime:'LocalTime',ETimezoneSetting_MAX:'ETimezoneSetting_MAX', };
-declare class InternationalizationSettingsModel extends UObject { 
-	DisplayTimezone: ETimezoneSetting;
-	static Load(ResourceName: string): InternationalizationSettingsModel;
-	static Find(Outer: UObject, ResourceName: string): InternationalizationSettingsModel;
-	static GetDefaultObject(): InternationalizationSettingsModel;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InternationalizationSettingsModel;
-	static C(Other: UObject | any): InternationalizationSettingsModel;
+declare type EViewportInteractionDraggingMode = 'Nothing' | 'TransformablesWithGizmo' | 'TransformablesAtLaserImpact' | 'AssistingDrag' | 'TransformablesFreely' | 'World' | 'Interactable' | 'Material' | 'EViewportInteractionDraggingMode_MAX';
+declare var EViewportInteractionDraggingMode : { Nothing:'Nothing',TransformablesWithGizmo:'TransformablesWithGizmo',TransformablesAtLaserImpact:'TransformablesAtLaserImpact',AssistingDrag:'AssistingDrag',TransformablesFreely:'TransformablesFreely',World:'World',Interactable:'Interactable',Material:'Material',EViewportInteractionDraggingMode_MAX:'EViewportInteractionDraggingMode_MAX', };
+declare class ViewportActionKeyInput { 
+	ActionType: string;
+	Event: EInputEvent;
+	bIsInputCaptured: boolean;
+	clone() : ViewportActionKeyInput;
+	static C(Other: UObject | any): ViewportActionKeyInput;
 }
 
-declare class ActorTransformer extends ViewportTransformer { 
-	static Load(ResourceName: string): ActorTransformer;
-	static Find(Outer: UObject, ResourceName: string): ActorTransformer;
-	static GetDefaultObject(): ActorTransformer;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorTransformer;
-	static C(Other: UObject | any): ActorTransformer;
+declare class ViewportInteractor extends UObject { 
+	KeyToActionMap: any;
+	WorldInteraction: ViewportWorldInteraction;
+	OtherInteractor: ViewportInteractor;
+	static Load(ResourceName: string): ViewportInteractor;
+	static Find(Outer: UObject, ResourceName: string): ViewportInteractor;
+	static GetDefaultObject(): ViewportInteractor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportInteractor;
+	Tick(DeltaTime: number): void;
+	Shutdown(): void;
+	SetDraggingMode(NewDraggingMode: EViewportInteractionDraggingMode): void;
+	IsHoveringOverGizmo(): boolean;
+	HandleInputKey_BP(Action: ViewportActionKeyInput,Key: Key,Event: EInputEvent,bOutWasHandled?: boolean): {bOutWasHandled: boolean};
+	HandleInputAxis_BP(Action: ViewportActionKeyInput,Key: Key,Delta: number,DeltaTime: number,bOutWasHandled?: boolean): {bOutWasHandled: boolean};
+	GetWorldInteraction(): ViewportWorldInteraction;
+	GetTransformAndForwardVector(OutHandTransform?: Transform,OutForwardVector?: Vector): {OutHandTransform: Transform, OutForwardVector: Vector, $: boolean};
+	GetTransform(): Transform;
+	GetOtherInteractor(): ViewportInteractor;
+	GetLaserPointer(LaserPointerStart?: Vector,LaserPointerEnd?: Vector,bEvenIfBlocked?: boolean,LaserLengthOverride?: number): {LaserPointerStart: Vector, LaserPointerEnd: Vector, $: boolean};
+	GetHoverLocation(): Vector;
+	GetDraggingMode(): EViewportInteractionDraggingMode;
+	static C(Other: UObject | any): ViewportInteractor;
 }
 
-declare class ViewportInteractableInterface extends Interface { 
-	static Load(ResourceName: string): ViewportInteractableInterface;
-	static Find(Outer: UObject, ResourceName: string): ViewportInteractableInterface;
-	static GetDefaultObject(): ViewportInteractableInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportInteractableInterface;
-	static C(Other: UObject | any): ViewportInteractableInterface;
+declare type ETrackingStatus = 'NotTracked' | 'InertialOnly' | 'Tracked' | 'ETrackingStatus_MAX';
+declare var ETrackingStatus : { NotTracked:'NotTracked',InertialOnly:'InertialOnly',Tracked:'Tracked',ETrackingStatus_MAX:'ETrackingStatus_MAX', };
+declare class MotionControllerComponent extends PrimitiveComponent { 
+	PlayerIndex: number;
+	Hand: EControllerHand;
+	MotionSource: string;
+	bDisableLowLatencyUpdate: boolean;
+	CurrentTrackingStatus: ETrackingStatus;
+	bDisplayDeviceModel: boolean;
+	DisplayModelSource: string;
+	CustomDisplayMesh: StaticMesh;
+	DisplayMeshMaterialOverrides: MaterialInterface[];
+	DisplayComponent: PrimitiveComponent;
+	static Load(ResourceName: string): MotionControllerComponent;
+	static Find(Outer: UObject, ResourceName: string): MotionControllerComponent;
+	static GetDefaultObject(): MotionControllerComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MotionControllerComponent;
+	SetTrackingSource(NewSource: EControllerHand): void;
+	SetTrackingMotionSource(NewSource: string): void;
+	SetShowDeviceModel(bShowControllerModel: boolean): void;
+	SetDisplayModelSource(NewDisplayModelSource: string): void;
+	SetCustomDisplayMesh(NewDisplayMesh: StaticMesh): void;
+	SetAssociatedPlayerIndex(NewPlayer: number): void;
+	OnMotionControllerUpdated(): void;
+	IsTracked(): boolean;
+	GetTrackingSource(): EControllerHand;
+	GetParameterValue(InName: string,bValueFound?: boolean): {bValueFound: boolean, $: number};
+	GetHandJointPosition(jointIndex: number,bValueFound?: boolean): {bValueFound: boolean, $: Vector};
+	static C(Other: UObject | any): MotionControllerComponent;
+	DisableMotionTrackingForComponent(): void;
+	EnableMotionTrackingForComponent(): boolean;
+	IsMotionTrackingEnabledForComponent(): boolean;
+	static DisableMotionTrackingForComponent(MotionControllerComponent: MotionControllerComponent): void;
+	static EnableMotionTrackingForComponent(MotionControllerComponent: MotionControllerComponent): boolean;
+	static IsMotionTrackingEnabledForComponent(MotionControllerComponent: MotionControllerComponent): boolean;
 }
 
-declare class TranslationDragOperation extends ViewportDragOperation { 
-	static Load(ResourceName: string): TranslationDragOperation;
-	static Find(Outer: UObject, ResourceName: string): TranslationDragOperation;
-	static GetDefaultObject(): TranslationDragOperation;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TranslationDragOperation;
-	static C(Other: UObject | any): TranslationDragOperation;
+declare class InterpCurvePointQuat { 
+	InVal: number;
+	OutVal: Quat;
+	ArriveTangent: Quat;
+	LeaveTangent: Quat;
+	InterpMode: EInterpCurveMode;
+	clone() : InterpCurvePointQuat;
+	static C(Other: UObject | any): InterpCurvePointQuat;
 }
 
-declare class PlaneTranslationDragOperation extends ViewportDragOperation { 
-	static Load(ResourceName: string): PlaneTranslationDragOperation;
-	static Find(Outer: UObject, ResourceName: string): PlaneTranslationDragOperation;
-	static GetDefaultObject(): PlaneTranslationDragOperation;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlaneTranslationDragOperation;
-	static C(Other: UObject | any): PlaneTranslationDragOperation;
+declare class InterpCurveQuat { 
+	Points: InterpCurvePointQuat[];
+	bIsLooped: boolean;
+	LoopKeyOffset: number;
+	clone() : InterpCurveQuat;
+	static C(Other: UObject | any): InterpCurveQuat;
 }
 
-declare class RotateOnAngleDragOperation extends ViewportDragOperation { 
-	static Load(ResourceName: string): RotateOnAngleDragOperation;
-	static Find(Outer: UObject, ResourceName: string): RotateOnAngleDragOperation;
-	static GetDefaultObject(): RotateOnAngleDragOperation;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RotateOnAngleDragOperation;
-	static C(Other: UObject | any): RotateOnAngleDragOperation;
+declare class InterpCurvePointFloat { 
+	InVal: number;
+	OutVal: number;
+	ArriveTangent: number;
+	LeaveTangent: number;
+	InterpMode: EInterpCurveMode;
+	clone() : InterpCurvePointFloat;
+	static C(Other: UObject | any): InterpCurvePointFloat;
 }
 
-declare class ScaleDragOperation extends ViewportDragOperation { 
-	static Load(ResourceName: string): ScaleDragOperation;
-	static Find(Outer: UObject, ResourceName: string): ScaleDragOperation;
-	static GetDefaultObject(): ScaleDragOperation;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ScaleDragOperation;
-	static C(Other: UObject | any): ScaleDragOperation;
+declare class InterpCurveFloat { 
+	Points: InterpCurvePointFloat[];
+	bIsLooped: boolean;
+	LoopKeyOffset: number;
+	clone() : InterpCurveFloat;
+	static C(Other: UObject | any): InterpCurveFloat;
 }
 
-declare class UniformScaleDragOperation extends ViewportDragOperation { 
-	static Load(ResourceName: string): UniformScaleDragOperation;
-	static Find(Outer: UObject, ResourceName: string): UniformScaleDragOperation;
-	static GetDefaultObject(): UniformScaleDragOperation;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UniformScaleDragOperation;
-	static C(Other: UObject | any): UniformScaleDragOperation;
+declare class SplineMetadata extends UObject { 
+	static Load(ResourceName: string): SplineMetadata;
+	static Find(Outer: UObject, ResourceName: string): SplineMetadata;
+	static GetDefaultObject(): SplineMetadata;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SplineMetadata;
+	static C(Other: UObject | any): SplineMetadata;
 }
 
-declare class AxisGizmoHandleGroup extends GizmoHandleGroup { 
-	static Load(ResourceName: string): AxisGizmoHandleGroup;
-	static Find(Outer: UObject, ResourceName: string): AxisGizmoHandleGroup;
-	static GetDefaultObject(): AxisGizmoHandleGroup;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AxisGizmoHandleGroup;
-	static C(Other: UObject | any): AxisGizmoHandleGroup;
+declare class SplineCurves { 
+	Position: InterpCurveVector;
+	Rotation: InterpCurveQuat;
+	Scale: InterpCurveVector;
+	ReparamTable: InterpCurveFloat;
+	MetaData: SplineMetadata;
+	clone() : SplineCurves;
+	static C(Other: UObject | any): SplineCurves;
 }
 
-declare class GizmoHandleMeshComponent extends StaticMeshComponent { 
-	static Load(ResourceName: string): GizmoHandleMeshComponent;
-	static Find(Outer: UObject, ResourceName: string): GizmoHandleMeshComponent;
-	static GetDefaultObject(): GizmoHandleMeshComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoHandleMeshComponent;
-	static C(Other: UObject | any): GizmoHandleMeshComponent;
+declare type ESplineCoordinateSpace = 'Local' | 'World' | 'ESplineCoordinateSpace_MAX';
+declare var ESplineCoordinateSpace : { Local:'Local',World:'World',ESplineCoordinateSpace_MAX:'ESplineCoordinateSpace_MAX', };
+declare type ESplinePointType = 'Linear' | 'Curve' | 'Constant' | 'CurveClamped' | 'CurveCustomTangent' | 'ESplinePointType_MAX';
+declare var ESplinePointType : { Linear:'Linear',Curve:'Curve',Constant:'Constant',CurveClamped:'CurveClamped',CurveCustomTangent:'CurveCustomTangent',ESplinePointType_MAX:'ESplinePointType_MAX', };
+declare class SplinePoint { 
+	InputKey: number;
+	Position: Vector;
+	ArriveTangent: Vector;
+	LeaveTangent: Vector;
+	Rotation: Rotator;
+	Scale: Vector;
+	Type: ESplinePointType;
+	clone() : SplinePoint;
+	static C(Other: UObject | any): SplinePoint;
+}
+
+declare class SplineComponent extends PrimitiveComponent { 
+	SplineCurves: SplineCurves;
+	SplineInfo: InterpCurveVector;
+	SplineRotInfo: InterpCurveQuat;
+	SplineScaleInfo: InterpCurveVector;
+	SplineReparamTable: InterpCurveFloat;
+	bAllowSplineEditingPerInstance: boolean;
+	ReparamStepsPerSegment: number;
+	Duration: number;
+	bStationaryEndpoints: boolean;
+	bSplineHasBeenEdited: boolean;
+	bModifiedByConstructionScript: boolean;
+	bInputSplinePointsToConstructionScript: boolean;
+	bDrawDebug: boolean;
+	bClosedLoop: boolean;
+	bLoopPositionOverride: boolean;
+	LoopPosition: number;
+	DefaultUpVector: Vector;
+	EditorUnselectedSplineSegmentColor: LinearColor;
+	EditorSelectedSplineSegmentColor: LinearColor;
+	bAllowDiscontinuousSpline: boolean;
+	bShouldVisualizeScale: boolean;
+	ScaleVisualizationWidth: number;
+	static Load(ResourceName: string): SplineComponent;
+	static Find(Outer: UObject, ResourceName: string): SplineComponent;
+	static GetDefaultObject(): SplineComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SplineComponent;
+	UpdateSpline(): void;
+	SetWorldLocationAtSplinePoint(PointIndex: number,InLocation: Vector): void;
+	SetUpVectorAtSplinePoint(PointIndex: number,InUpVector: Vector,CoordinateSpace: ESplineCoordinateSpace,bUpdateSpline: boolean): void;
+	SetUnselectedSplineSegmentColor(SegmentColor: LinearColor): void;
+	SetTangentsAtSplinePoint(PointIndex: number,InArriveTangent: Vector,InLeaveTangent: Vector,CoordinateSpace: ESplineCoordinateSpace,bUpdateSpline: boolean): void;
+	SetTangentAtSplinePoint(PointIndex: number,InTangent: Vector,CoordinateSpace: ESplineCoordinateSpace,bUpdateSpline: boolean): void;
+	SetSplineWorldPoints(Points: Vector[]): void;
+	SetSplinePointType(PointIndex: number,Type: ESplinePointType,bUpdateSpline: boolean): void;
+	SetSplinePoints(Points: Vector[],CoordinateSpace: ESplineCoordinateSpace,bUpdateSpline: boolean): void;
+	SetSplineLocalPoints(Points: Vector[]): void;
+	SetSelectedSplineSegmentColor(SegmentColor: LinearColor): void;
+	SetLocationAtSplinePoint(PointIndex: number,InLocation: Vector,CoordinateSpace: ESplineCoordinateSpace,bUpdateSpline: boolean): void;
+	SetDrawDebug(bShow: boolean): void;
+	SetDefaultUpVector(UpVector: Vector,CoordinateSpace: ESplineCoordinateSpace): void;
+	SetClosedLoopAtPosition(bInClosedLoop: boolean,Key: number,bUpdateSpline: boolean): void;
+	SetClosedLoop(bInClosedLoop: boolean,bUpdateSpline: boolean): void;
+	RemoveSplinePoint(index: number,bUpdateSpline: boolean): void;
+	IsClosedLoop(): boolean;
+	GetWorldTangentAtDistanceAlongSpline(Distance: number): Vector;
+	GetWorldRotationAtTime(Time: number,bUseConstantVelocity: boolean): Rotator;
+	GetWorldRotationAtDistanceAlongSpline(Distance: number): Rotator;
+	GetWorldLocationAtTime(Time: number,bUseConstantVelocity: boolean): Vector;
+	GetWorldLocationAtSplinePoint(PointIndex: number): Vector;
+	GetWorldLocationAtDistanceAlongSpline(Distance: number): Vector;
+	GetWorldDirectionAtTime(Time: number,bUseConstantVelocity: boolean): Vector;
+	GetWorldDirectionAtDistanceAlongSpline(Distance: number): Vector;
+	GetUpVectorAtTime(Time: number,CoordinateSpace: ESplineCoordinateSpace,bUseConstantVelocity: boolean): Vector;
+	GetUpVectorAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
+	GetUpVectorAtDistanceAlongSpline(Distance: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
+	GetTransformAtTime(Time: number,CoordinateSpace: ESplineCoordinateSpace,bUseConstantVelocity: boolean,bUseScale: boolean): Transform;
+	GetTransformAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace,bUseScale: boolean): Transform;
+	GetTransformAtDistanceAlongSpline(Distance: number,CoordinateSpace: ESplineCoordinateSpace,bUseScale: boolean): Transform;
+	GetTangentAtTime(Time: number,CoordinateSpace: ESplineCoordinateSpace,bUseConstantVelocity: boolean): Vector;
+	GetTangentAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
+	GetTangentAtDistanceAlongSpline(Distance: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
+	GetSplinePointType(PointIndex: number): ESplinePointType;
+	GetSplineLength(): number;
+	GetScaleAtTime(Time: number,bUseConstantVelocity: boolean): Vector;
+	GetScaleAtSplinePoint(PointIndex: number): Vector;
+	GetScaleAtDistanceAlongSpline(Distance: number): Vector;
+	GetRotationAtTime(Time: number,CoordinateSpace: ESplineCoordinateSpace,bUseConstantVelocity: boolean): Rotator;
+	GetRotationAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace): Rotator;
+	GetRotationAtDistanceAlongSpline(Distance: number,CoordinateSpace: ESplineCoordinateSpace): Rotator;
+	GetRollAtTime(Time: number,CoordinateSpace: ESplineCoordinateSpace,bUseConstantVelocity: boolean): number;
+	GetRollAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace): number;
+	GetRollAtDistanceAlongSpline(Distance: number,CoordinateSpace: ESplineCoordinateSpace): number;
+	GetRightVectorAtTime(Time: number,CoordinateSpace: ESplineCoordinateSpace,bUseConstantVelocity: boolean): Vector;
+	GetRightVectorAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
+	GetRightVectorAtDistanceAlongSpline(Distance: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
+	GetNumberOfSplinePoints(): number;
+	GetLocationAtTime(Time: number,CoordinateSpace: ESplineCoordinateSpace,bUseConstantVelocity: boolean): Vector;
+	GetLocationAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
+	GetLocationAtDistanceAlongSpline(Distance: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
+	GetLocationAndTangentAtSplinePoint(PointIndex: number,Location?: Vector,Tangent?: Vector,CoordinateSpace?: ESplineCoordinateSpace): {Location: Vector, Tangent: Vector};
+	GetLocalLocationAndTangentAtSplinePoint(PointIndex: number,LocalLocation?: Vector,LocalTangent?: Vector): {LocalLocation: Vector, LocalTangent: Vector};
+	GetLeaveTangentAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
+	GetInputKeyAtDistanceAlongSpline(Distance: number): number;
+	GetFloatPropertyAtSplinePoint(index: number,PropertyName: string): number;
+	GetDistanceAlongSplineAtSplinePoint(PointIndex: number): number;
+	GetDirectionAtTime(Time: number,CoordinateSpace: ESplineCoordinateSpace,bUseConstantVelocity: boolean): Vector;
+	GetDirectionAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
+	GetDirectionAtDistanceAlongSpline(Distance: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
+	GetDefaultUpVector(CoordinateSpace: ESplineCoordinateSpace): Vector;
+	GetArriveTangentAtSplinePoint(PointIndex: number,CoordinateSpace: ESplineCoordinateSpace): Vector;
+	FindUpVectorClosestToWorldLocation(WorldLocation: Vector,CoordinateSpace: ESplineCoordinateSpace): Vector;
+	FindTransformClosestToWorldLocation(WorldLocation: Vector,CoordinateSpace: ESplineCoordinateSpace,bUseScale: boolean): Transform;
+	FindTangentClosestToWorldLocation(WorldLocation: Vector,CoordinateSpace: ESplineCoordinateSpace): Vector;
+	FindScaleClosestToWorldLocation(WorldLocation: Vector): Vector;
+	FindRotationClosestToWorldLocation(WorldLocation: Vector,CoordinateSpace: ESplineCoordinateSpace): Rotator;
+	FindRollClosestToWorldLocation(WorldLocation: Vector,CoordinateSpace: ESplineCoordinateSpace): number;
+	FindRightVectorClosestToWorldLocation(WorldLocation: Vector,CoordinateSpace: ESplineCoordinateSpace): Vector;
+	FindLocationClosestToWorldLocation(WorldLocation: Vector,CoordinateSpace: ESplineCoordinateSpace): Vector;
+	FindInputKeyClosestToWorldLocation(WorldLocation: Vector): number;
+	FindDirectionClosestToWorldLocation(WorldLocation: Vector,CoordinateSpace: ESplineCoordinateSpace): Vector;
+	ClearSplinePoints(bUpdateSpline: boolean): void;
+	AddSplineWorldPoint(Position: Vector): void;
+	AddSplinePointAtIndex(Position: Vector,index: number,CoordinateSpace: ESplineCoordinateSpace,bUpdateSpline: boolean): void;
+	AddSplinePoint(Position: Vector,CoordinateSpace: ESplineCoordinateSpace,bUpdateSpline: boolean): void;
+	AddSplineLocalPoint(Position: Vector): void;
+	AddPoints(Points: SplinePoint[],bUpdateSpline: boolean): void;
+	AddPoint(Point: SplinePoint,bUpdateSpline: boolean): void;
+	static C(Other: UObject | any): SplineComponent;
 }
 
-declare class UniformScaleGizmoHandleGroup extends GizmoHandleGroup { 
-	static Load(ResourceName: string): UniformScaleGizmoHandleGroup;
-	static Find(Outer: UObject, ResourceName: string): UniformScaleGizmoHandleGroup;
-	static GetDefaultObject(): UniformScaleGizmoHandleGroup;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UniformScaleGizmoHandleGroup;
-	static C(Other: UObject | any): UniformScaleGizmoHandleGroup;
+declare class SplineMeshParams { 
+	StartPos: Vector;
+	StartTangent: Vector;
+	StartScale: Vector2D;
+	StartRoll: number;
+	StartOffset: Vector2D;
+	EndPos: Vector;
+	EndTangent: Vector;
+	EndScale: Vector2D;
+	EndRoll: number;
+	EndOffset: Vector2D;
+	clone() : SplineMeshParams;
+	static C(Other: UObject | any): SplineMeshParams;
 }
 
-declare class PivotTranslationGizmoHandleGroup extends AxisGizmoHandleGroup { 
-	static Load(ResourceName: string): PivotTranslationGizmoHandleGroup;
-	static Find(Outer: UObject, ResourceName: string): PivotTranslationGizmoHandleGroup;
-	static GetDefaultObject(): PivotTranslationGizmoHandleGroup;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PivotTranslationGizmoHandleGroup;
-	static C(Other: UObject | any): PivotTranslationGizmoHandleGroup;
+declare type ESplineMeshAxis = 'X' | 'Y' | 'Z' | 'ESplineMeshAxis_MAX';
+declare var ESplineMeshAxis : { X:'X',Y:'Y',Z:'Z',ESplineMeshAxis_MAX:'ESplineMeshAxis_MAX', };
+declare class SplineMeshComponent extends StaticMeshComponent { 
+	SplineParams: SplineMeshParams;
+	SplineUpDir: Vector;
+	bAllowSplineEditingPerInstance: boolean;
+	bSmoothInterpRollScale: boolean;
+	ForwardAxis: ESplineMeshAxis;
+	SplineBoundaryMin: number;
+	SplineBoundaryMax: number;
+	BodySetup: BodySetup;
+	CachedMeshBodySetupGuid: Guid;
+	bSelected: boolean;
+	bMeshDirty: boolean;
+	static Load(ResourceName: string): SplineMeshComponent;
+	static Find(Outer: UObject, ResourceName: string): SplineMeshComponent;
+	static GetDefaultObject(): SplineMeshComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SplineMeshComponent;
+	UpdateMesh(): void;
+	SetStartTangent(StartTangent: Vector,bUpdateMesh: boolean): void;
+	SetStartScale(StartScale: Vector2D,bUpdateMesh: boolean): void;
+	SetStartRoll(StartRoll: number,bUpdateMesh: boolean): void;
+	SetStartPosition(StartPos: Vector,bUpdateMesh: boolean): void;
+	SetStartOffset(StartOffset: Vector2D,bUpdateMesh: boolean): void;
+	SetStartAndEnd(StartPos: Vector,StartTangent: Vector,EndPos: Vector,EndTangent: Vector,bUpdateMesh: boolean): void;
+	SetSplineUpDir(InSplineUpDir: Vector,bUpdateMesh: boolean): void;
+	SetForwardAxis(InForwardAxis: ESplineMeshAxis,bUpdateMesh: boolean): void;
+	SetEndTangent(EndTangent: Vector,bUpdateMesh: boolean): void;
+	SetEndScale(EndScale: Vector2D,bUpdateMesh: boolean): void;
+	SetEndRoll(EndRoll: number,bUpdateMesh: boolean): void;
+	SetEndPosition(EndPos: Vector,bUpdateMesh: boolean): void;
+	SetEndOffset(EndOffset: Vector2D,bUpdateMesh: boolean): void;
+	SetBoundaryMin(InBoundaryMin: number,bUpdateMesh: boolean): void;
+	SetBoundaryMax(InBoundaryMax: number,bUpdateMesh: boolean): void;
+	GetStartTangent(): Vector;
+	GetStartScale(): Vector2D;
+	GetStartRoll(): number;
+	GetStartPosition(): Vector;
+	GetStartOffset(): Vector2D;
+	GetSplineUpDir(): Vector;
+	GetForwardAxis(): ESplineMeshAxis;
+	GetEndTangent(): Vector;
+	GetEndScale(): Vector2D;
+	GetEndRoll(): number;
+	GetEndPosition(): Vector;
+	GetEndOffset(): Vector2D;
+	GetBoundaryMin(): number;
+	GetBoundaryMax(): number;
+	static C(Other: UObject | any): SplineMeshComponent;
 }
 
-declare class PivotScaleGizmoHandleGroup extends AxisGizmoHandleGroup { 
-	static Load(ResourceName: string): PivotScaleGizmoHandleGroup;
-	static Find(Outer: UObject, ResourceName: string): PivotScaleGizmoHandleGroup;
-	static GetDefaultObject(): PivotScaleGizmoHandleGroup;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PivotScaleGizmoHandleGroup;
-	static C(Other: UObject | any): PivotScaleGizmoHandleGroup;
+declare class LightComponentBase extends SceneComponent { 
+	LightGuid: Guid;
+	Brightness: number;
+	Intensity: number;
+	LightColor: Color;
+	bAffectsWorld: boolean;
+	CastShadows: boolean;
+	CastStaticShadows: boolean;
+	CastDynamicShadows: boolean;
+	bAffectTranslucentLighting: boolean;
+	bTransmission: boolean;
+	bCastVolumetricShadow: boolean;
+	bCastRaytracedShadow: boolean;
+	bAffectReflection: boolean;
+	bAffectGlobalIllumination: boolean;
+	IndirectLightingIntensity: number;
+	VolumetricScatteringIntensity: number;
+	SamplesPerPixel: number;
+	StaticEditorTexture: Texture2D;
+	StaticEditorTextureScale: number;
+	DynamicEditorTexture: Texture2D;
+	DynamicEditorTextureScale: number;
+	static Load(ResourceName: string): LightComponentBase;
+	static Find(Outer: UObject, ResourceName: string): LightComponentBase;
+	static GetDefaultObject(): LightComponentBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightComponentBase;
+	SetSamplesPerPixel(NewValue: number): void;
+	SetCastVolumetricShadow(bNewValue: boolean): void;
+	SetCastShadows(bNewValue: boolean): void;
+	SetCastRaytracedShadow(bNewValue: boolean): void;
+	SetAffectReflection(bNewValue: boolean): void;
+	SetAffectGlobalIllumination(bNewValue: boolean): void;
+	GetLightColor(): LinearColor;
+	static C(Other: UObject | any): LightComponentBase;
 }
 
-declare class PivotPlaneTranslationGizmoHandleGroup extends AxisGizmoHandleGroup { 
-	static Load(ResourceName: string): PivotPlaneTranslationGizmoHandleGroup;
-	static Find(Outer: UObject, ResourceName: string): PivotPlaneTranslationGizmoHandleGroup;
-	static GetDefaultObject(): PivotPlaneTranslationGizmoHandleGroup;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PivotPlaneTranslationGizmoHandleGroup;
-	static C(Other: UObject | any): PivotPlaneTranslationGizmoHandleGroup;
+declare class TextureLightProfile extends Texture2D { 
+	Brightness: number;
+	TextureMultiplier: number;
+	static Load(ResourceName: string): TextureLightProfile;
+	static Find(Outer: UObject, ResourceName: string): TextureLightProfile;
+	static GetDefaultObject(): TextureLightProfile;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureLightProfile;
+	static C(Other: UObject | any): TextureLightProfile;
 }
 
-declare class PivotRotationGizmoHandleGroup extends AxisGizmoHandleGroup { 
-	RootFullRotationHandleComponent: SceneComponent;
-	FullRotationHandleMeshComponent: GizmoHandleMeshComponent;
-	StartRotationIndicatorMeshComponent: GizmoHandleMeshComponent;
-	RootStartRotationIdicatorComponent: SceneComponent;
-	DeltaRotationIndicatorMeshComponent: GizmoHandleMeshComponent;
-	RootDeltaRotationIndicatorComponent: SceneComponent;
-	static Load(ResourceName: string): PivotRotationGizmoHandleGroup;
-	static Find(Outer: UObject, ResourceName: string): PivotRotationGizmoHandleGroup;
-	static GetDefaultObject(): PivotRotationGizmoHandleGroup;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PivotRotationGizmoHandleGroup;
-	static C(Other: UObject | any): PivotRotationGizmoHandleGroup;
+declare class LightComponent extends LightComponentBase { 
+	Temperature: number;
+	MaxDrawDistance: number;
+	MaxDistanceFadeRange: number;
+	bUseTemperature: boolean;
+	ShadowMapChannel: number;
+	MinRoughness: number;
+	SpecularScale: number;
+	ShadowResolutionScale: number;
+	ShadowBias: number;
+	ShadowSlopeBias: number;
+	ShadowSharpen: number;
+	ContactShadowLength: number;
+	ContactShadowLengthInWS: boolean;
+	InverseSquaredFalloff: boolean;
+	CastTranslucentShadows: boolean;
+	bCastShadowsFromCinematicObjectsOnly: boolean;
+	bAffectDynamicIndirectLighting: boolean;
+	bForceCachedShadowsForMovablePrimitives: boolean;
+	LightingChannels: LightingChannels;
+	LightFunctionMaterial: MaterialInterface;
+	LightFunctionScale: Vector;
+	IESTexture: TextureLightProfile;
+	bUseIESBrightness: boolean;
+	IESBrightnessScale: number;
+	LightFunctionFadeDistance: number;
+	DisabledBrightness: number;
+	bEnableLightShaftBloom: boolean;
+	BloomScale: number;
+	BloomThreshold: number;
+	BloomTint: Color;
+	bUseRayTracedDistanceFieldShadows: boolean;
+	RayStartOffsetDepthScale: number;
+	static Load(ResourceName: string): LightComponent;
+	static Find(Outer: UObject, ResourceName: string): LightComponent;
+	static GetDefaultObject(): LightComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightComponent;
+	SetVolumetricScatteringIntensity(NewIntensity: number): void;
+	SetUseIESBrightness(bNewValue: boolean): void;
+	SetTransmission(bNewValue: boolean): void;
+	SetTemperature(NewTemperature: number): void;
+	SetSpecularScale(NewValue: number): void;
+	SetShadowSlopeBias(NewValue: number): void;
+	SetShadowBias(NewValue: number): void;
+	SetLightFunctionScale(NewLightFunctionScale: Vector): void;
+	SetLightFunctionMaterial(NewLightFunctionMaterial: MaterialInterface): void;
+	SetLightFunctionFadeDistance(NewLightFunctionFadeDistance: number): void;
+	SetLightFunctionDisabledBrightness(NewValue: number): void;
+	SetLightColor(NewLightColor: LinearColor,bSRGB: boolean): void;
+	SetIntensity(NewIntensity: number): void;
+	SetIndirectLightingIntensity(NewIntensity: number): void;
+	SetIESTexture(NewValue: TextureLightProfile): void;
+	SetIESBrightnessScale(NewValue: number): void;
+	SetForceCachedShadowsForMovablePrimitives(bNewValue: boolean): void;
+	SetEnableLightShaftBloom(bNewValue: boolean): void;
+	SetBloomTint(NewValue: Color): void;
+	SetBloomThreshold(NewValue: number): void;
+	SetBloomScale(NewValue: number): void;
+	SetAffectTranslucentLighting(bNewValue: boolean): void;
+	SetAffectDynamicIndirectLighting(bNewValue: boolean): void;
+	static C(Other: UObject | any): LightComponent;
 }
 
-declare class StretchGizmoHandleGroup extends GizmoHandleGroup { 
-	static Load(ResourceName: string): StretchGizmoHandleGroup;
-	static Find(Outer: UObject, ResourceName: string): StretchGizmoHandleGroup;
-	static GetDefaultObject(): StretchGizmoHandleGroup;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StretchGizmoHandleGroup;
-	static C(Other: UObject | any): StretchGizmoHandleGroup;
+declare type ELightUnits = 'Unitless' | 'Candelas' | 'Lumens' | 'ELightUnits_MAX';
+declare var ELightUnits : { Unitless:'Unitless',Candelas:'Candelas',Lumens:'Lumens',ELightUnits_MAX:'ELightUnits_MAX', };
+declare class LightmassLightSettings { 
+	IndirectLightingSaturation: number;
+	ShadowExponent: number;
+	bUseAreaShadowsForStationaryLight: boolean;
+	clone() : LightmassLightSettings;
+	static C(Other: UObject | any): LightmassLightSettings;
 }
 
-declare class PivotTransformGizmo extends BaseTransformGizmo { 
-	UniformScaleGizmoHandleGroup: UniformScaleGizmoHandleGroup;
-	TranslationGizmoHandleGroup: PivotTranslationGizmoHandleGroup;
-	ScaleGizmoHandleGroup: PivotScaleGizmoHandleGroup;
-	PlaneTranslationGizmoHandleGroup: PivotPlaneTranslationGizmoHandleGroup;
-	RotationGizmoHandleGroup: PivotRotationGizmoHandleGroup;
-	StretchGizmoHandleGroup: StretchGizmoHandleGroup;
-	LastDraggingHandle: ActorComponent;
-	static GetDefaultObject(): PivotTransformGizmo;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PivotTransformGizmo;
-	static C(Other: UObject | any): PivotTransformGizmo;
+declare class LightmassPointLightSettings extends LightmassLightSettings { 
+	clone() : LightmassPointLightSettings;
+	static C(Other: UObject | any): LightmassPointLightSettings;
 }
 
-declare class StretchGizmoHandleDragOperation extends ViewportDragOperation { 
-	static Load(ResourceName: string): StretchGizmoHandleDragOperation;
-	static Find(Outer: UObject, ResourceName: string): StretchGizmoHandleDragOperation;
-	static GetDefaultObject(): StretchGizmoHandleDragOperation;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StretchGizmoHandleDragOperation;
-	static C(Other: UObject | any): StretchGizmoHandleDragOperation;
+declare class LocalLightComponent extends LightComponent { 
+	IntensityUnits: ELightUnits;
+	Radius: number;
+	AttenuationRadius: number;
+	LightmassSettings: LightmassPointLightSettings;
+	static Load(ResourceName: string): LocalLightComponent;
+	static Find(Outer: UObject, ResourceName: string): LocalLightComponent;
+	static GetDefaultObject(): LocalLightComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocalLightComponent;
+	SetIntensityUnits(NewIntensityUnits: ELightUnits): void;
+	SetAttenuationRadius(NewRadius: number): void;
+	static GetUnitsConversionFactor(SrcUnits: ELightUnits,TargetUnits: ELightUnits,CosHalfConeAngle: number): number;
+	static C(Other: UObject | any): LocalLightComponent;
 }
 
-declare class MovieSceneCopyableBinding extends UObject { 
-	SpawnableObjectTemplate: UObject;
-	Tracks: MovieSceneTrack[];
-	Binding: MovieSceneBinding;
-	Spawnable: MovieSceneSpawnable;
-	Possessable: MovieScenePossessable;
-	static Load(ResourceName: string): MovieSceneCopyableBinding;
-	static Find(Outer: UObject, ResourceName: string): MovieSceneCopyableBinding;
-	static GetDefaultObject(): MovieSceneCopyableBinding;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCopyableBinding;
-	static C(Other: UObject | any): MovieSceneCopyableBinding;
+declare class PointLightComponent extends LocalLightComponent { 
+	bUseInverseSquaredFalloff: boolean;
+	LightFalloffExponent: number;
+	SourceRadius: number;
+	SoftSourceRadius: number;
+	SourceLength: number;
+	static Load(ResourceName: string): PointLightComponent;
+	static Find(Outer: UObject, ResourceName: string): PointLightComponent;
+	static GetDefaultObject(): PointLightComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PointLightComponent;
+	SetSourceRadius(bNewValue: number): void;
+	SetSourceLength(NewValue: number): void;
+	SetSoftSourceRadius(bNewValue: number): void;
+	SetLightFalloffExponent(NewLightFalloffExponent: number): void;
+	static C(Other: UObject | any): PointLightComponent;
 }
 
-declare class Exporter extends UObject { 
-	SupportedClass: UnrealEngineClass;
-	ExportRootScope: UObject;
-	FormatExtension: string[];
-	FormatDescription: string[];
-	PreferredFormatIndex: number;
-	TextIndent: number;
-	bText: boolean;
-	bSelectedOnly: boolean;
-	bForceFileOperations: boolean;
-	ExportTask: AssetExportTask;
-	static Load(ResourceName: string): Exporter;
-	static Find(Outer: UObject, ResourceName: string): Exporter;
-	static GetDefaultObject(): Exporter;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Exporter;
-	ScriptRunAssetExportTask(Task: AssetExportTask): boolean;
-	static RunAssetExportTasks(ExportTasks: AssetExportTask[]): boolean;
-	static RunAssetExportTask(Task: AssetExportTask): boolean;
-	static C(Other: UObject | any): Exporter;
+declare type EControllerType = 'Laser' | 'AssistingLaser' | 'UI' | 'Navigation' | 'Unknown' | 'EControllerType_MAX';
+declare var EControllerType : { Laser:'Laser',AssistingLaser:'AssistingLaser',UI:'UI',Navigation:'Navigation',Unknown:'Unknown',EControllerType_MAX:'EControllerType_MAX', };
+declare class VREditorTeleporter extends Actor { 
+	VRMode: VREditorMode;
+	TeleportDirectionMeshComponent: StaticMeshComponent;
+	HMDMeshComponent: StaticMeshComponent;
+	LeftMotionControllerMeshComponent: StaticMeshComponent;
+	RightMotionControllerMeshComponent: StaticMeshComponent;
+	TeleportMID: MaterialInstanceDynamic;
+	InteractorTryingTeleport: ViewportInteractor;
+	static GetDefaultObject(): VREditorTeleporter;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorTeleporter;
+	TeleportDone(): void;
+	StopAiming(): void;
+	StartTeleport(): void;
+	StartAiming(Interactor: ViewportInteractor): void;
+	Shutdown(): void;
+	SetVisibility(bVisible: boolean): void;
+	SetColor(Color: LinearColor): void;
+	IsTeleporting(): boolean;
+	IsAiming(): boolean;
+	Init(InMode: VREditorMode): void;
+	GetVRMode(): VREditorMode;
+	GetSlideDelta(Interactor: VREditorInteractor,Axis: boolean): number;
+	GetInteractorTryingTeleport(): ViewportInteractor;
+	DoTeleport(): void;
+	static C(Other: UObject | any): VREditorTeleporter;
 }
 
-declare class AssetExportTask extends UObject { 
-	UObject: UObject;
-	Exporter: Exporter;
-	Filename: string;
-	bSelected: boolean;
-	bReplaceIdentical: boolean;
-	bPrompt: boolean;
-	bAutomated: boolean;
-	bUseFileArchive: boolean;
-	bWriteEmptyFiles: boolean;
-	IgnoreObjectList: UObject[];
-	Options: UObject;
-	Errors: string[];
-	static Load(ResourceName: string): AssetExportTask;
-	static Find(Outer: UObject, ResourceName: string): AssetExportTask;
-	static GetDefaultObject(): AssetExportTask;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetExportTask;
-	static C(Other: UObject | any): AssetExportTask;
+declare class VREditorInteractor extends ViewportInteractor { 
+	MotionControllerComponent: MotionControllerComponent;
+	HandMeshComponent: StaticMeshComponent;
+	LaserSplineComponent: SplineComponent;
+	LaserSplineMeshComponents: SplineMeshComponent[];
+	LaserPointerMID: MaterialInstanceDynamic;
+	TranslucentLaserPointerMID: MaterialInstanceDynamic;
+	HoverMeshComponent: StaticMeshComponent;
+	HoverPointLightComponent: PointLightComponent;
+	HandMeshMID: MaterialInstanceDynamic;
+	ControllerType: EControllerType;
+	OverrideControllerType: EControllerType;
+	ControllerMotionSource: string;
+	VRMode: VREditorMode;
+	static Load(ResourceName: string): VREditorInteractor;
+	static Find(Outer: UObject, ResourceName: string): VREditorInteractor;
+	static GetDefaultObject(): VREditorInteractor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorInteractor;
+	TryOverrideControllerType(InControllerType: EControllerType): boolean;
+	SetupComponent(OwningActor: Actor): void;
+	SetForceShowLaser(bInForceShow: boolean): void;
+	SetForceLaserColor(InColor: LinearColor): void;
+	SetControllerType(InControllerType: EControllerType): void;
+	SetControllerHandSide(InControllerHandSide: string): void;
+	IsTouchingTrackpad(): boolean;
+	IsHoveringOverUI(): boolean;
+	IsClickingOnUI(): boolean;
+	Init(InVRMode: VREditorMode): void;
+	GetTrackpadPosition(): Vector2D;
+	GetTeleportActor(): VREditorTeleporter;
+	GetSlideDelta(): number;
+	GetSelectAndMoveTriggerValue(): number;
+	GetMotionControllerComponent(): MotionControllerComponent;
+	GetLastTrackpadPosition(): Vector2D;
+	GetLaserStart(): Vector;
+	GetLaserEnd(): Vector;
+	GetHMDDeviceType(): string;
+	GetControllerType(): EControllerType;
+	GetControllerSide(): EControllerHand;
+	static C(Other: UObject | any): VREditorInteractor;
 }
 
-declare class SequencerExportTask extends AssetExportTask { 
-	SequencerContext: UObject;
-	static Load(ResourceName: string): SequencerExportTask;
-	static Find(Outer: UObject, ResourceName: string): SequencerExportTask;
-	static GetDefaultObject(): SequencerExportTask;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequencerExportTask;
-	static C(Other: UObject | any): SequencerExportTask;
+declare class VRButton { 
+	ButtonWidget: VREditorWidgetComponent;
+	clone() : VRButton;
+	static C(Other: UObject | any): VRButton;
 }
 
-declare class MovieSceneSectionEvalOptions { 
-	bCanEditCompletionMode: boolean;
-	CompletionMode: EMovieSceneCompletionMode;
-	clone() : MovieSceneSectionEvalOptions;
-	static C(Other: UObject | any): MovieSceneSectionEvalOptions;
+declare class VRRadialMenuHandler extends UObject { 
+	static Load(ResourceName: string): VRRadialMenuHandler;
+	static Find(Outer: UObject, ResourceName: string): VRRadialMenuHandler;
+	static GetDefaultObject(): VRRadialMenuHandler;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VRRadialMenuHandler;
+	static C(Other: UObject | any): VRRadialMenuHandler;
 }
 
-declare class MovieSceneEasingSettings { 
-	AutoEaseInDuration: number;
-	AutoEaseOutDuration: number;
-	EaseIn: any;
-	bManualEaseIn: boolean;
-	ManualEaseInDuration: number;
-	EaseOut: any;
-	bManualEaseOut: boolean;
-	ManualEaseOutDuration: number;
-	AutoEaseInTime: number;
-	AutoEaseOutTime: number;
-	ManualEaseInTime: number;
-	ManualEaseOutTime: number;
-	clone() : MovieSceneEasingSettings;
-	static C(Other: UObject | any): MovieSceneEasingSettings;
+declare class VREditorUISystem extends UObject { 
+	VRMode: VREditorMode;
+	FloatingUIs: any;
+	PreviewWindowInfo: any;
+	InfoDisplayPanel: VREditorFloatingUI;
+	QuickRadialMenu: VREditorRadialFloatingUI;
+	DraggingUI: VREditorDockableWindow;
+	ColorPickerUI: VREditorDockableWindow;
+	LaserInteractor: VREditorInteractor;
+	UIInteractor: VREditorInteractor;
+	VRButtons: VRButton[];
+	RadialMenuHandler: VRRadialMenuHandler;
+	static Load(ResourceName: string): VREditorUISystem;
+	static Find(Outer: UObject, ResourceName: string): VREditorUISystem;
+	static GetDefaultObject(): VREditorUISystem;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorUISystem;
+	static C(Other: UObject | any): VREditorUISystem;
 }
 
-declare type EMovieSceneBlendType = 'Absolute' | 'Additive' | 'Relative' | 'EMovieSceneBlendType_MAX';
-declare var EMovieSceneBlendType : { Absolute:'Absolute',Additive:'Additive',Relative:'Relative',EMovieSceneBlendType_MAX:'EMovieSceneBlendType_MAX', };
-declare class OptionalMovieSceneBlendType { 
-	BlendType: EMovieSceneBlendType;
-	bIsValid: boolean;
-	clone() : OptionalMovieSceneBlendType;
-	static C(Other: UObject | any): OptionalMovieSceneBlendType;
+declare class VREditorPlacement extends UObject { 
+	VRMode: VREditorMode;
+	ViewportWorldInteraction: ViewportWorldInteraction;
+	FloatingUIAssetDraggedFrom: WidgetComponent;
+	PlacingMaterialOrTextureAsset: UObject;
+	static Load(ResourceName: string): VREditorPlacement;
+	static Find(Outer: UObject, ResourceName: string): VREditorPlacement;
+	static GetDefaultObject(): VREditorPlacement;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorPlacement;
+	static C(Other: UObject | any): VREditorPlacement;
 }
 
-declare class MovieSceneSection extends MovieSceneSignedObject { 
-	EvalOptions: MovieSceneSectionEvalOptions;
-	Easing: MovieSceneEasingSettings;
-	SectionRange: MovieSceneFrameRange;
-	TimecodeSource: MovieSceneTimecodeSource;
-	PreRollFrames: FrameNumber;
-	PostRollFrames: FrameNumber;
-	RowIndex: number;
-	OverlapPriority: number;
-	bIsActive: boolean;
-	bIsLocked: boolean;
-	StartTime: number;
-	EndTime: number;
-	PrerollTime: number;
-	PostrollTime: number;
-	bIsInfinite: boolean;
-	bSupportsInfiniteRange: boolean;
-	BlendType: OptionalMovieSceneBlendType;
-	static Load(ResourceName: string): MovieSceneSection;
-	static Find(Outer: UObject, ResourceName: string): MovieSceneSection;
-	static GetDefaultObject(): MovieSceneSection;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneSection;
-	static C(Other: UObject | any): MovieSceneSection;
+declare class VREditorMode extends EditorWorldExtension { 
+	AvatarActor: VREditorAvatarActor;
+	UISystem: VREditorUISystem;
+	TeleportActor: VREditorTeleporter;
+	AutoScalerSystem: VREditorAutoScaler;
+	WorldInteraction: ViewportWorldInteraction;
+	PlacementSystem: VREditorPlacement;
+	Interactors: VREditorInteractor[];
+	AssetContainer: VREditorAssetContainer;
+	static Load(ResourceName: string): VREditorMode;
+	static Find(Outer: UObject, ResourceName: string): VREditorMode;
+	static GetDefaultObject(): VREditorMode;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorMode;
+	GetWorldScaleFactor(): number;
+	static C(Other: UObject | any): VREditorMode;
+}
+
+declare class VREditorAutoScaler extends UObject { 
+	VRMode: VREditorMode;
+	static Load(ResourceName: string): VREditorAutoScaler;
+	static Find(Outer: UObject, ResourceName: string): VREditorAutoScaler;
+	static GetDefaultObject(): VREditorAutoScaler;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorAutoScaler;
+	static C(Other: UObject | any): VREditorAutoScaler;
 }
 
-declare class MovieSceneTransformMask { 
-	mask: any;
-	clone() : MovieSceneTransformMask;
-	static C(Other: UObject | any): MovieSceneTransformMask;
+declare class VREditorBaseUserWidget extends UserWidget { 
+	Owner: any;
+	static Load(ResourceName: string): VREditorBaseUserWidget;
+	static Find(Outer: UObject, ResourceName: string): VREditorBaseUserWidget;
+	static GetDefaultObject(): VREditorBaseUserWidget;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorBaseUserWidget;
+	static C(Other: UObject | any): VREditorBaseUserWidget;
 }
 
-declare class MovieSceneChannel { 
-	clone() : MovieSceneChannel;
-	static C(Other: UObject | any): MovieSceneChannel;
+declare class DockableWindowDragOperation extends ViewportDragOperation { 
+	static Load(ResourceName: string): DockableWindowDragOperation;
+	static Find(Outer: UObject, ResourceName: string): DockableWindowDragOperation;
+	static GetDefaultObject(): DockableWindowDragOperation;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DockableWindowDragOperation;
+	static C(Other: UObject | any): DockableWindowDragOperation;
 }
 
-declare class MovieSceneTangentData { 
-	ArriveTangent: number;
-	LeaveTangent: number;
-	TangentWeightMode: ERichCurveTangentWeightMode;
-	ArriveTangentWeight: number;
-	LeaveTangentWeight: number;
-	clone() : MovieSceneTangentData;
-	static C(Other: UObject | any): MovieSceneTangentData;
+declare class VREditorFloatingCameraUI extends VREditorFloatingUI { 
+	LinkedActor: any;
+	static GetDefaultObject(): VREditorFloatingCameraUI;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VREditorFloatingCameraUI;
+	static C(Other: UObject | any): VREditorFloatingCameraUI;
 }
 
-declare class MovieSceneFloatValue { 
-	Value: number;
-	InterpMode: ERichCurveInterpMode;
-	TangentMode: ERichCurveTangentMode;
-	Tangent: MovieSceneTangentData;
-	clone() : MovieSceneFloatValue;
-	static C(Other: UObject | any): MovieSceneFloatValue;
+declare class FloatingText extends Actor { 
+	SceneComponent: SceneComponent;
+	FirstLineComponent: StaticMeshComponent;
+	JointSphereComponent: StaticMeshComponent;
+	SecondLineComponent: StaticMeshComponent;
+	TextComponent: TextRenderComponent;
+	MaskedTextMaterial: MaterialInterface;
+	TranslucentTextMaterial: MaterialInterface;
+	LineMaterial: MaterialInterface;
+	LineMaterialMID: MaterialInstanceDynamic;
+	static GetDefaultObject(): FloatingText;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FloatingText;
+	static C(Other: UObject | any): FloatingText;
 }
 
-declare class KeyHandleLookupTable { 
-	clone() : KeyHandleLookupTable;
-	static C(Other: UObject | any): KeyHandleLookupTable;
+declare class VISettings extends UObject { 
+	bScaleWorldFromFloor: boolean;
+	bScaleWorldWithDynamicPivot: boolean;
+	bAllowSimultaneousWorldScalingAndRotation: boolean;
+	static Load(ResourceName: string): VISettings;
+	static Find(Outer: UObject, ResourceName: string): VISettings;
+	static GetDefaultObject(): VISettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VISettings;
+	static C(Other: UObject | any): VISettings;
 }
 
-declare class MovieSceneKeyHandleMap extends KeyHandleLookupTable { 
-	clone() : MovieSceneKeyHandleMap;
-	static C(Other: UObject | any): MovieSceneKeyHandleMap;
+declare type EInteractorHand = 'Right' | 'Left' | 'EInteractorHand_MAX';
+declare var EInteractorHand : { Right:'Right',Left:'Left',EInteractorHand_MAX:'EInteractorHand_MAX', };
+declare class VRModeSettings extends VISettings { 
+	bEnableAutoVREditMode: boolean;
+	bAutokeySequences: boolean;
+	InteractorHand: EInteractorHand;
+	bShowWorldMovementGrid: boolean;
+	bShowWorldMovementPostProcess: boolean;
+	bShowWorldScaleProgressBar: boolean;
+	UIBrightness: number;
+	GizmoScale: number;
+	DoubleClickTime: number;
+	TriggerPressedThreshold_Vive: number;
+	TriggerPressedThreshold_Rift: number;
+	InteractorClass: Class;
+	TeleporterClass: UnrealEngineClass;
+	static Load(ResourceName: string): VRModeSettings;
+	static Find(Outer: UObject, ResourceName: string): VRModeSettings;
+	static GetDefaultObject(): VRModeSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VRModeSettings;
+	static C(Other: UObject | any): VRModeSettings;
 }
 
-declare class MovieSceneFloatChannel extends MovieSceneChannel { 
-	PreInfinityExtrap: ERichCurveExtrapolation;
-	PostInfinityExtrap: ERichCurveExtrapolation;
-	Times: FrameNumber[];
-	Values: MovieSceneFloatValue[];
-	DefaultValue: number;
-	bHasDefaultValue: boolean;
-	KeyHandles: MovieSceneKeyHandleMap;
-	TickResolution: FrameRate;
-	clone() : MovieSceneFloatChannel;
-	static C(Other: UObject | any): MovieSceneFloatChannel;
+declare class VRScoutingInteractor extends VREditorInteractor { 
+	FlyingIndicatorComponent: StaticMeshComponent;
+	static Load(ResourceName: string): VRScoutingInteractor;
+	static Find(Outer: UObject, ResourceName: string): VRScoutingInteractor;
+	static GetDefaultObject(): VRScoutingInteractor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VRScoutingInteractor;
+	static GetSelectedActors(): Actor[];
+	static C(Other: UObject | any): VRScoutingInteractor;
 }
 
-declare type EShow3DTrajectory = 'EST_OnlyWhenSelected' | 'EST_Always' | 'EST_Never' | 'EST_MAX';
-declare var EShow3DTrajectory : { EST_OnlyWhenSelected:'EST_OnlyWhenSelected',EST_Always:'EST_Always',EST_Never:'EST_Never',EST_MAX:'EST_MAX', };
-declare class MovieScene3DTransformSection extends MovieSceneSection { 
-	TransformMask: MovieSceneTransformMask;
-	Translation: MovieSceneFloatChannel;
-	Rotation: MovieSceneFloatChannel;
-	Scale: MovieSceneFloatChannel;
-	ManualWeight: MovieSceneFloatChannel;
-	bUseQuaternionInterpolation: boolean;
-	Show3DTrajectory: EShow3DTrajectory;
-	static Load(ResourceName: string): MovieScene3DTransformSection;
-	static Find(Outer: UObject, ResourceName: string): MovieScene3DTransformSection;
-	static GetDefaultObject(): MovieScene3DTransformSection;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScene3DTransformSection;
-	static C(Other: UObject | any): MovieScene3DTransformSection;
+declare class ActorTransformer extends ViewportTransformer { 
+	static Load(ResourceName: string): ActorTransformer;
+	static Find(Outer: UObject, ResourceName: string): ActorTransformer;
+	static GetDefaultObject(): ActorTransformer;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorTransformer;
+	static C(Other: UObject | any): ActorTransformer;
 }
 
-declare class SequencerKeyActor extends Actor { 
-	KeyMeshComponent: StaticMeshComponent;
-	AssociatedActor: Actor;
-	TrackSection: MovieScene3DTransformSection;
-	KeyTime: number;
-	static GetDefaultObject(): SequencerKeyActor;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequencerKeyActor;
-	static C(Other: UObject | any): SequencerKeyActor;
+declare class ViewportInteractableInterface extends Interface { 
+	static Load(ResourceName: string): ViewportInteractableInterface;
+	static Find(Outer: UObject, ResourceName: string): ViewportInteractableInterface;
+	static GetDefaultObject(): ViewportInteractableInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ViewportInteractableInterface;
+	static C(Other: UObject | any): ViewportInteractableInterface;
 }
 
-declare class SequencerMeshTrail extends Actor { 
-	static GetDefaultObject(): SequencerMeshTrail;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequencerMeshTrail;
-	static C(Other: UObject | any): SequencerMeshTrail;
+declare class TranslationDragOperation extends ViewportDragOperation { 
+	static Load(ResourceName: string): TranslationDragOperation;
+	static Find(Outer: UObject, ResourceName: string): TranslationDragOperation;
+	static GetDefaultObject(): TranslationDragOperation;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TranslationDragOperation;
+	static C(Other: UObject | any): TranslationDragOperation;
 }
 
-declare class SequencerSettingsContainer extends UObject { 
-	static Load(ResourceName: string): SequencerSettingsContainer;
-	static Find(Outer: UObject, ResourceName: string): SequencerSettingsContainer;
-	static GetDefaultObject(): SequencerSettingsContainer;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequencerSettingsContainer;
-	static C(Other: UObject | any): SequencerSettingsContainer;
+declare class PlaneTranslationDragOperation extends ViewportDragOperation { 
+	static Load(ResourceName: string): PlaneTranslationDragOperation;
+	static Find(Outer: UObject, ResourceName: string): PlaneTranslationDragOperation;
+	static GetDefaultObject(): PlaneTranslationDragOperation;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlaneTranslationDragOperation;
+	static C(Other: UObject | any): PlaneTranslationDragOperation;
 }
 
-declare type EAutoChangeMode = 'AutoKey' | 'AutoTrack' | 'All' | 'None' | 'EAutoChangeMode_MAX';
-declare var EAutoChangeMode : { AutoKey:'AutoKey',AutoTrack:'AutoTrack',All:'All',None:'None',EAutoChangeMode_MAX:'EAutoChangeMode_MAX', };
-declare type EAllowEditsMode = 'AllEdits' | 'AllowSequencerEditsOnly' | 'AllowLevelEditsOnly' | 'EAllowEditsMode_MAX';
-declare var EAllowEditsMode : { AllEdits:'AllEdits',AllowSequencerEditsOnly:'AllowSequencerEditsOnly',AllowLevelEditsOnly:'AllowLevelEditsOnly',EAllowEditsMode_MAX:'EAllowEditsMode_MAX', };
-declare type EKeyGroupMode = 'KeyChanged' | 'KeyGroup' | 'KeyAll' | 'EKeyGroupMode_MAX';
-declare var EKeyGroupMode : { KeyChanged:'KeyChanged',KeyGroup:'KeyGroup',KeyAll:'KeyAll',EKeyGroupMode_MAX:'EKeyGroupMode_MAX', };
-declare type EMovieSceneKeyInterpolation = 'Auto' | 'User' | 'Break' | 'Linear' | 'Constant' | 'EMovieSceneKeyInterpolation_MAX';
-declare var EMovieSceneKeyInterpolation : { Auto:'Auto',User:'User',Break:'Break',Linear:'Linear',Constant:'Constant',EMovieSceneKeyInterpolation_MAX:'EMovieSceneKeyInterpolation_MAX', };
-declare type ESequencerSpawnPosition = 'SSP_Origin' | 'SSP_PlaceInFrontOfCamera' | 'SSP_MAX';
-declare var ESequencerSpawnPosition : { SSP_Origin:'SSP_Origin',SSP_PlaceInFrontOfCamera:'SSP_PlaceInFrontOfCamera',SSP_MAX:'SSP_MAX', };
-declare type ESequencerZoomPosition = 'SZP_CurrentTime' | 'SZP_MousePosition' | 'SZP_MAX';
-declare var ESequencerZoomPosition : { SZP_CurrentTime:'SZP_CurrentTime',SZP_MousePosition:'SZP_MousePosition',SZP_MAX:'SZP_MAX', };
-declare type ESequencerLoopMode = 'SLM_NoLoop' | 'SLM_Loop' | 'SLM_LoopSelectionRange' | 'SLM_MAX';
-declare var ESequencerLoopMode : { SLM_NoLoop:'SLM_NoLoop',SLM_Loop:'SLM_Loop',SLM_LoopSelectionRange:'SLM_LoopSelectionRange',SLM_MAX:'SLM_MAX', };
-declare type EFrameNumberDisplayFormats = 'NonDropFrameTimecode' | 'DropFrameTimecode' | 'Seconds' | 'Frames' | 'MAX_Count' | 'EFrameNumberDisplayFormats_MAX';
-declare var EFrameNumberDisplayFormats : { NonDropFrameTimecode:'NonDropFrameTimecode',DropFrameTimecode:'DropFrameTimecode',Seconds:'Seconds',Frames:'Frames',MAX_Count:'MAX_Count',EFrameNumberDisplayFormats_MAX:'EFrameNumberDisplayFormats_MAX', };
-declare type ECurveEditorCurveVisibility = 'AllCurves' | 'SelectedCurves' | 'AnimatedCurves' | 'ECurveEditorCurveVisibility_MAX';
-declare var ECurveEditorCurveVisibility : { AllCurves:'AllCurves',SelectedCurves:'SelectedCurves',AnimatedCurves:'AnimatedCurves',ECurveEditorCurveVisibility_MAX:'ECurveEditorCurveVisibility_MAX', };
-declare class SequencerSettings extends UObject { 
-	AutoChangeMode: EAutoChangeMode;
-	AllowEditsMode: EAllowEditsMode;
-	KeyGroupMode: EKeyGroupMode;
-	bKeyInterpPropertiesOnly: boolean;
-	KeyInterpolation: EMovieSceneKeyInterpolation;
-	bAutoSetTrackDefaults: boolean;
-	SpawnPosition: ESequencerSpawnPosition;
-	bCreateSpawnableCameras: boolean;
-	bShowRangeSlider: boolean;
-	bIsSnapEnabled: boolean;
-	bSnapKeyTimesToInterval: boolean;
-	bSnapKeyTimesToKeys: boolean;
-	bSnapSectionTimesToInterval: boolean;
-	bSnapSectionTimesToSections: boolean;
-	bSnapPlayTimeToKeys: boolean;
-	bSnapPlayTimeToInterval: boolean;
-	bSnapPlayTimeToPressedKey: boolean;
-	bSnapPlayTimeToDraggedKey: boolean;
-	bSnapCurveValueToInterval: boolean;
-	bLabelBrowserVisible: boolean;
-	bShowSelectedNodesOnly: boolean;
-	bRewindOnRecord: boolean;
-	ZoomPosition: ESequencerZoomPosition;
-	bAutoScrollEnabled: boolean;
-	bLinkCurveEditorTimeRange: boolean;
-	LoopMode: ESequencerLoopMode;
-	bKeepCursorInPlayRangeWhileScrubbing: boolean;
-	bKeepCursorInPlayRange: boolean;
-	bKeepPlayRangeInSectionBounds: boolean;
-	ZeroPadFrames: number;
-	bShowCombinedKeyframes: boolean;
-	bInfiniteKeyAreas: boolean;
-	bShowChannelColors: boolean;
-	bAllowPossessionOfPIEViewports: boolean;
-	bActivateRealtimeViewports: boolean;
-	bEvaluateSubSequencesInIsolation: boolean;
-	bRerunConstructionScripts: boolean;
-	bShowDebugVisualization: boolean;
-	bVisualizePreAndPostRoll: boolean;
-	bCompileDirectorOnEvaluate: boolean;
-	TrajectoryPathCap: any;
-	FrameNumberDisplayFormat: EFrameNumberDisplayFormats;
-	CurveVisibility: ECurveEditorCurveVisibility;
-	static Load(ResourceName: string): SequencerSettings;
-	static Find(Outer: UObject, ResourceName: string): SequencerSettings;
-	static GetDefaultObject(): SequencerSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequencerSettings;
-	static C(Other: UObject | any): SequencerSettings;
+declare class RotateOnAngleDragOperation extends ViewportDragOperation { 
+	static Load(ResourceName: string): RotateOnAngleDragOperation;
+	static Find(Outer: UObject, ResourceName: string): RotateOnAngleDragOperation;
+	static GetDefaultObject(): RotateOnAngleDragOperation;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RotateOnAngleDragOperation;
+	static C(Other: UObject | any): RotateOnAngleDragOperation;
 }
 
-declare type EMovieSceneCaptureProtocolState = 'Idle' | 'Initialized' | 'Capturing' | 'Finalizing' | 'EMovieSceneCaptureProtocolState_MAX';
-declare var EMovieSceneCaptureProtocolState : { Idle:'Idle',Initialized:'Initialized',Capturing:'Capturing',Finalizing:'Finalizing',EMovieSceneCaptureProtocolState_MAX:'EMovieSceneCaptureProtocolState_MAX', };
-declare class MovieSceneCaptureProtocolBase extends UObject { 
-	State: EMovieSceneCaptureProtocolState;
-	bFrameRequested: boolean;
-	static Load(ResourceName: string): MovieSceneCaptureProtocolBase;
-	static Find(Outer: UObject, ResourceName: string): MovieSceneCaptureProtocolBase;
-	static GetDefaultObject(): MovieSceneCaptureProtocolBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCaptureProtocolBase;
-	IsCapturing(): boolean;
-	GetState(): EMovieSceneCaptureProtocolState;
-	static C(Other: UObject | any): MovieSceneCaptureProtocolBase;
+declare class ScaleDragOperation extends ViewportDragOperation { 
+	static Load(ResourceName: string): ScaleDragOperation;
+	static Find(Outer: UObject, ResourceName: string): ScaleDragOperation;
+	static GetDefaultObject(): ScaleDragOperation;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ScaleDragOperation;
+	static C(Other: UObject | any): ScaleDragOperation;
+}
+
+declare class UniformScaleDragOperation extends ViewportDragOperation { 
+	static Load(ResourceName: string): UniformScaleDragOperation;
+	static Find(Outer: UObject, ResourceName: string): UniformScaleDragOperation;
+	static GetDefaultObject(): UniformScaleDragOperation;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UniformScaleDragOperation;
+	static C(Other: UObject | any): UniformScaleDragOperation;
+}
+
+declare class AxisGizmoHandleGroup extends GizmoHandleGroup { 
+	static Load(ResourceName: string): AxisGizmoHandleGroup;
+	static Find(Outer: UObject, ResourceName: string): AxisGizmoHandleGroup;
+	static GetDefaultObject(): AxisGizmoHandleGroup;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AxisGizmoHandleGroup;
+	static C(Other: UObject | any): AxisGizmoHandleGroup;
+}
+
+declare class GizmoHandleMeshComponent extends StaticMeshComponent { 
+	static Load(ResourceName: string): GizmoHandleMeshComponent;
+	static Find(Outer: UObject, ResourceName: string): GizmoHandleMeshComponent;
+	static GetDefaultObject(): GizmoHandleMeshComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GizmoHandleMeshComponent;
+	static C(Other: UObject | any): GizmoHandleMeshComponent;
 }
 
-declare class MovieSceneAudioCaptureProtocolBase extends MovieSceneCaptureProtocolBase { 
-	static Load(ResourceName: string): MovieSceneAudioCaptureProtocolBase;
-	static Find(Outer: UObject, ResourceName: string): MovieSceneAudioCaptureProtocolBase;
-	static GetDefaultObject(): MovieSceneAudioCaptureProtocolBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneAudioCaptureProtocolBase;
-	static C(Other: UObject | any): MovieSceneAudioCaptureProtocolBase;
+declare class UniformScaleGizmoHandleGroup extends GizmoHandleGroup { 
+	static Load(ResourceName: string): UniformScaleGizmoHandleGroup;
+	static Find(Outer: UObject, ResourceName: string): UniformScaleGizmoHandleGroup;
+	static GetDefaultObject(): UniformScaleGizmoHandleGroup;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UniformScaleGizmoHandleGroup;
+	static C(Other: UObject | any): UniformScaleGizmoHandleGroup;
 }
 
-declare class NullAudioCaptureProtocol extends MovieSceneAudioCaptureProtocolBase { 
-	static Load(ResourceName: string): NullAudioCaptureProtocol;
-	static Find(Outer: UObject, ResourceName: string): NullAudioCaptureProtocol;
-	static GetDefaultObject(): NullAudioCaptureProtocol;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NullAudioCaptureProtocol;
-	static C(Other: UObject | any): NullAudioCaptureProtocol;
+declare class PivotTranslationGizmoHandleGroup extends AxisGizmoHandleGroup { 
+	static Load(ResourceName: string): PivotTranslationGizmoHandleGroup;
+	static Find(Outer: UObject, ResourceName: string): PivotTranslationGizmoHandleGroup;
+	static GetDefaultObject(): PivotTranslationGizmoHandleGroup;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PivotTranslationGizmoHandleGroup;
+	static C(Other: UObject | any): PivotTranslationGizmoHandleGroup;
 }
 
-declare class MasterAudioSubmixCaptureProtocol extends MovieSceneAudioCaptureProtocolBase { 
-	Filename: string;
-	static Load(ResourceName: string): MasterAudioSubmixCaptureProtocol;
-	static Find(Outer: UObject, ResourceName: string): MasterAudioSubmixCaptureProtocol;
-	static GetDefaultObject(): MasterAudioSubmixCaptureProtocol;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MasterAudioSubmixCaptureProtocol;
-	static C(Other: UObject | any): MasterAudioSubmixCaptureProtocol;
+declare class PivotScaleGizmoHandleGroup extends AxisGizmoHandleGroup { 
+	static Load(ResourceName: string): PivotScaleGizmoHandleGroup;
+	static Find(Outer: UObject, ResourceName: string): PivotScaleGizmoHandleGroup;
+	static GetDefaultObject(): PivotScaleGizmoHandleGroup;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PivotScaleGizmoHandleGroup;
+	static C(Other: UObject | any): PivotScaleGizmoHandleGroup;
 }
 
-declare class MovieSceneImageCaptureProtocolBase extends MovieSceneCaptureProtocolBase { 
-	static Load(ResourceName: string): MovieSceneImageCaptureProtocolBase;
-	static Find(Outer: UObject, ResourceName: string): MovieSceneImageCaptureProtocolBase;
-	static GetDefaultObject(): MovieSceneImageCaptureProtocolBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneImageCaptureProtocolBase;
-	static C(Other: UObject | any): MovieSceneImageCaptureProtocolBase;
+declare class PivotPlaneTranslationGizmoHandleGroup extends AxisGizmoHandleGroup { 
+	static Load(ResourceName: string): PivotPlaneTranslationGizmoHandleGroup;
+	static Find(Outer: UObject, ResourceName: string): PivotPlaneTranslationGizmoHandleGroup;
+	static GetDefaultObject(): PivotPlaneTranslationGizmoHandleGroup;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PivotPlaneTranslationGizmoHandleGroup;
+	static C(Other: UObject | any): PivotPlaneTranslationGizmoHandleGroup;
 }
 
-declare class CompositionGraphCapturePasses { 
-	Value: string[];
-	clone() : CompositionGraphCapturePasses;
-	static C(Other: UObject | any): CompositionGraphCapturePasses;
+declare class PivotRotationGizmoHandleGroup extends AxisGizmoHandleGroup { 
+	RootFullRotationHandleComponent: SceneComponent;
+	FullRotationHandleMeshComponent: GizmoHandleMeshComponent;
+	StartRotationIndicatorMeshComponent: GizmoHandleMeshComponent;
+	RootStartRotationIdicatorComponent: SceneComponent;
+	DeltaRotationIndicatorMeshComponent: GizmoHandleMeshComponent;
+	RootDeltaRotationIndicatorComponent: SceneComponent;
+	static Load(ResourceName: string): PivotRotationGizmoHandleGroup;
+	static Find(Outer: UObject, ResourceName: string): PivotRotationGizmoHandleGroup;
+	static GetDefaultObject(): PivotRotationGizmoHandleGroup;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PivotRotationGizmoHandleGroup;
+	static C(Other: UObject | any): PivotRotationGizmoHandleGroup;
 }
 
-declare type EHDRCaptureGamut = 'HCGM_Rec709' | 'HCGM_P3DCI' | 'HCGM_Rec2020' | 'HCGM_ACES' | 'HCGM_ACEScg' | 'HCGM_Linear' | 'HCGM_MAX';
-declare var EHDRCaptureGamut : { HCGM_Rec709:'HCGM_Rec709',HCGM_P3DCI:'HCGM_P3DCI',HCGM_Rec2020:'HCGM_Rec2020',HCGM_ACES:'HCGM_ACES',HCGM_ACEScg:'HCGM_ACEScg',HCGM_Linear:'HCGM_Linear',HCGM_MAX:'HCGM_MAX', };
-declare class CompositionGraphCaptureProtocol extends MovieSceneImageCaptureProtocolBase { 
-	IncludeRenderPasses: CompositionGraphCapturePasses;
-	bCaptureFramesInHDR: boolean;
-	HDRCompressionQuality: number;
-	CaptureGamut: EHDRCaptureGamut;
-	PostProcessingMaterial: SoftObjectPath;
-	bDisableScreenPercentage: boolean;
-	PostProcessingMaterialPtr: MaterialInterface;
-	static Load(ResourceName: string): CompositionGraphCaptureProtocol;
-	static Find(Outer: UObject, ResourceName: string): CompositionGraphCaptureProtocol;
-	static GetDefaultObject(): CompositionGraphCaptureProtocol;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CompositionGraphCaptureProtocol;
-	static C(Other: UObject | any): CompositionGraphCaptureProtocol;
+declare class StretchGizmoHandleGroup extends GizmoHandleGroup { 
+	static Load(ResourceName: string): StretchGizmoHandleGroup;
+	static Find(Outer: UObject, ResourceName: string): StretchGizmoHandleGroup;
+	static GetDefaultObject(): StretchGizmoHandleGroup;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StretchGizmoHandleGroup;
+	static C(Other: UObject | any): StretchGizmoHandleGroup;
 }
 
-declare class FrameGrabberProtocol extends MovieSceneImageCaptureProtocolBase { 
-	static Load(ResourceName: string): FrameGrabberProtocol;
-	static Find(Outer: UObject, ResourceName: string): FrameGrabberProtocol;
-	static GetDefaultObject(): FrameGrabberProtocol;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FrameGrabberProtocol;
-	static C(Other: UObject | any): FrameGrabberProtocol;
+declare class PivotTransformGizmo extends BaseTransformGizmo { 
+	UniformScaleGizmoHandleGroup: UniformScaleGizmoHandleGroup;
+	TranslationGizmoHandleGroup: PivotTranslationGizmoHandleGroup;
+	ScaleGizmoHandleGroup: PivotScaleGizmoHandleGroup;
+	PlaneTranslationGizmoHandleGroup: PivotPlaneTranslationGizmoHandleGroup;
+	RotationGizmoHandleGroup: PivotRotationGizmoHandleGroup;
+	StretchGizmoHandleGroup: StretchGizmoHandleGroup;
+	LastDraggingHandle: ActorComponent;
+	static GetDefaultObject(): PivotTransformGizmo;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PivotTransformGizmo;
+	static C(Other: UObject | any): PivotTransformGizmo;
 }
 
-declare class ImageSequenceProtocol extends FrameGrabberProtocol { 
-	static Load(ResourceName: string): ImageSequenceProtocol;
-	static Find(Outer: UObject, ResourceName: string): ImageSequenceProtocol;
-	static GetDefaultObject(): ImageSequenceProtocol;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImageSequenceProtocol;
-	static C(Other: UObject | any): ImageSequenceProtocol;
+declare class StretchGizmoHandleDragOperation extends ViewportDragOperation { 
+	static Load(ResourceName: string): StretchGizmoHandleDragOperation;
+	static Find(Outer: UObject, ResourceName: string): StretchGizmoHandleDragOperation;
+	static GetDefaultObject(): StretchGizmoHandleDragOperation;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StretchGizmoHandleDragOperation;
+	static C(Other: UObject | any): StretchGizmoHandleDragOperation;
 }
 
-declare class CompressedImageSequenceProtocol extends ImageSequenceProtocol { 
-	CompressionQuality: number;
-	static Load(ResourceName: string): CompressedImageSequenceProtocol;
-	static Find(Outer: UObject, ResourceName: string): CompressedImageSequenceProtocol;
-	static GetDefaultObject(): CompressedImageSequenceProtocol;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CompressedImageSequenceProtocol;
-	static C(Other: UObject | any): CompressedImageSequenceProtocol;
+declare type ELocalizationTargetConflictStatus = 'Unknown' | 'ConflictsPresent' | 'Clear' | 'ELocalizationTargetConflictStatus_MAX';
+declare var ELocalizationTargetConflictStatus : { Unknown:'Unknown',ConflictsPresent:'ConflictsPresent',Clear:'Clear',ELocalizationTargetConflictStatus_MAX:'ELocalizationTargetConflictStatus_MAX', };
+declare class FilePath { 
+	FilePath: string;
+	clone() : FilePath;
+	static C(Other: UObject | any): FilePath;
 }
 
-declare class ImageSequenceProtocol_BMP extends ImageSequenceProtocol { 
-	static Load(ResourceName: string): ImageSequenceProtocol_BMP;
-	static Find(Outer: UObject, ResourceName: string): ImageSequenceProtocol_BMP;
-	static GetDefaultObject(): ImageSequenceProtocol_BMP;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImageSequenceProtocol_BMP;
-	static C(Other: UObject | any): ImageSequenceProtocol_BMP;
+declare type ELocalizationGatherPathRoot = 'Auto' | 'Engine' | 'Project' | 'ELocalizationGatherPathRoot_MAX';
+declare var ELocalizationGatherPathRoot : { Auto:'Auto',Engine:'Engine',Project:'Project',ELocalizationGatherPathRoot_MAX:'ELocalizationGatherPathRoot_MAX', };
+declare class GatherTextSearchDirectory { 
+	PathRoot: ELocalizationGatherPathRoot;
+	Path: string;
+	clone() : GatherTextSearchDirectory;
+	static C(Other: UObject | any): GatherTextSearchDirectory;
 }
 
-declare class ImageSequenceProtocol_PNG extends CompressedImageSequenceProtocol { 
-	static Load(ResourceName: string): ImageSequenceProtocol_PNG;
-	static Find(Outer: UObject, ResourceName: string): ImageSequenceProtocol_PNG;
-	static GetDefaultObject(): ImageSequenceProtocol_PNG;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImageSequenceProtocol_PNG;
-	static C(Other: UObject | any): ImageSequenceProtocol_PNG;
+declare class GatherTextExcludePath { 
+	PathRoot: ELocalizationGatherPathRoot;
+	Pattern: string;
+	clone() : GatherTextExcludePath;
+	static C(Other: UObject | any): GatherTextExcludePath;
 }
 
-declare class ImageSequenceProtocol_JPG extends CompressedImageSequenceProtocol { 
-	static Load(ResourceName: string): ImageSequenceProtocol_JPG;
-	static Find(Outer: UObject, ResourceName: string): ImageSequenceProtocol_JPG;
-	static GetDefaultObject(): ImageSequenceProtocol_JPG;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImageSequenceProtocol_JPG;
-	static C(Other: UObject | any): ImageSequenceProtocol_JPG;
+declare class GatherTextFileExtension { 
+	Pattern: string;
+	clone() : GatherTextFileExtension;
+	static C(Other: UObject | any): GatherTextFileExtension;
 }
 
-declare class ImageSequenceProtocol_EXR extends ImageSequenceProtocol { 
-	bCompressed: boolean;
-	CaptureGamut: EHDRCaptureGamut;
-	static Load(ResourceName: string): ImageSequenceProtocol_EXR;
-	static Find(Outer: UObject, ResourceName: string): ImageSequenceProtocol_EXR;
-	static GetDefaultObject(): ImageSequenceProtocol_EXR;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImageSequenceProtocol_EXR;
-	static C(Other: UObject | any): ImageSequenceProtocol_EXR;
+declare class GatherTextFromTextFilesConfiguration { 
+	IsEnabled: boolean;
+	SearchDirectories: GatherTextSearchDirectory[];
+	ExcludePathWildcards: GatherTextExcludePath[];
+	FileExtensions: GatherTextFileExtension[];
+	ShouldGatherFromEditorOnlyData: boolean;
+	clone() : GatherTextFromTextFilesConfiguration;
+	static C(Other: UObject | any): GatherTextFromTextFilesConfiguration;
 }
 
-declare class MovieSceneCaptureInterface extends Interface { 
-	static Load(ResourceName: string): MovieSceneCaptureInterface;
-	static Find(Outer: UObject, ResourceName: string): MovieSceneCaptureInterface;
-	static GetDefaultObject(): MovieSceneCaptureInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCaptureInterface;
-	static C(Other: UObject | any): MovieSceneCaptureInterface;
+declare class GatherTextIncludePath { 
+	PathRoot: ELocalizationGatherPathRoot;
+	Pattern: string;
+	clone() : GatherTextIncludePath;
+	static C(Other: UObject | any): GatherTextIncludePath;
 }
 
-declare class CaptureResolution { 
-	ResX: number;
-	ResY: number;
-	clone() : CaptureResolution;
-	static C(Other: UObject | any): CaptureResolution;
+declare class GatherTextFromPackagesConfiguration { 
+	IsEnabled: boolean;
+	IncludePathWildcards: GatherTextIncludePath[];
+	ExcludePathWildcards: GatherTextExcludePath[];
+	FileExtensions: GatherTextFileExtension[];
+	Collections: string[];
+	ShouldGatherFromEditorOnlyData: boolean;
+	SkipGatherCache: boolean;
+	clone() : GatherTextFromPackagesConfiguration;
+	static C(Other: UObject | any): GatherTextFromPackagesConfiguration;
 }
 
-declare class MovieSceneCaptureSettings { 
-	OutputDirectory: DirectoryPath;
-	GameModeOverride: UnrealEngineClass;
-	OutputFormat: string;
-	bOverwriteExisting: boolean;
-	bUseRelativeFrameNumbers: boolean;
-	HandleFrames: number;
-	ZeroPadFrameNumbers: number;
-	FrameRate: FrameRate;
-	Resolution: CaptureResolution;
-	bEnableTextureStreaming: boolean;
-	bCinematicEngineScalability: boolean;
-	bCinematicMode: boolean;
-	bAllowMovement: boolean;
-	bAllowTurning: boolean;
-	bShowPlayer: boolean;
-	bShowHUD: boolean;
-	clone() : MovieSceneCaptureSettings;
-	static C(Other: UObject | any): MovieSceneCaptureSettings;
+declare class MetaDataKeyName { 
+	Name: string;
+	clone() : MetaDataKeyName;
+	static C(Other: UObject | any): MetaDataKeyName;
 }
 
-declare class MovieSceneCapture extends UObject { 
-	ImageCaptureProtocolType: SoftClassPath;
-	AudioCaptureProtocolType: SoftClassPath;
-	ImageCaptureProtocol: MovieSceneImageCaptureProtocolBase;
-	AudioCaptureProtocol: MovieSceneAudioCaptureProtocolBase;
-	Settings: MovieSceneCaptureSettings;
-	bUseSeparateProcess: boolean;
-	bCloseEditorWhenCaptureStarts: boolean;
-	AdditionalCommandLineArguments: string;
-	InheritedCommandLineArguments: string;
-	static Load(ResourceName: string): MovieSceneCapture;
-	static Find(Outer: UObject, ResourceName: string): MovieSceneCapture;
-	static GetDefaultObject(): MovieSceneCapture;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCapture;
-	SetImageCaptureProtocolType(ProtocolType: UnrealEngineClass): void;
-	SetAudioCaptureProtocolType(ProtocolType: UnrealEngineClass): void;
-	GetImageCaptureProtocol(): MovieSceneCaptureProtocolBase;
-	GetAudioCaptureProtocol(): MovieSceneCaptureProtocolBase;
-	static C(Other: UObject | any): MovieSceneCapture;
+declare class MetaDataTextKeyPattern { 
+	Pattern: string;
+	clone() : MetaDataTextKeyPattern;
+	static C(Other: UObject | any): MetaDataTextKeyPattern;
+}
+
+declare class MetaDataKeyGatherSpecification { 
+	MetaDataKey: MetaDataKeyName;
+	TextNamespace: string;
+	TextKeyPattern: MetaDataTextKeyPattern;
+	clone() : MetaDataKeyGatherSpecification;
+	static C(Other: UObject | any): MetaDataKeyGatherSpecification;
 }
 
-declare class LevelCapture extends MovieSceneCapture { 
-	bAutoStartCapture: boolean;
-	PrerequisiteActorId: Guid;
-	static Load(ResourceName: string): LevelCapture;
-	static Find(Outer: UObject, ResourceName: string): LevelCapture;
-	static GetDefaultObject(): LevelCapture;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelCapture;
-	static C(Other: UObject | any): LevelCapture;
+declare class GatherTextFromMetaDataConfiguration { 
+	IsEnabled: boolean;
+	IncludePathWildcards: GatherTextIncludePath[];
+	ExcludePathWildcards: GatherTextExcludePath[];
+	KeySpecifications: MetaDataKeyGatherSpecification[];
+	ShouldGatherFromEditorOnlyData: boolean;
+	clone() : GatherTextFromMetaDataConfiguration;
+	static C(Other: UObject | any): GatherTextFromMetaDataConfiguration;
 }
 
-declare class MovieSceneCaptureEnvironment extends UObject { 
-	static Load(ResourceName: string): MovieSceneCaptureEnvironment;
-	static Find(Outer: UObject, ResourceName: string): MovieSceneCaptureEnvironment;
-	static GetDefaultObject(): MovieSceneCaptureEnvironment;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCaptureEnvironment;
-	static IsCaptureInProgress(): boolean;
-	static GetCaptureFrameNumber(): number;
-	static GetCaptureElapsedTime(): number;
-	static FindImageCaptureProtocol(): MovieSceneImageCaptureProtocolBase;
-	static FindAudioCaptureProtocol(): MovieSceneAudioCaptureProtocolBase;
-	static C(Other: UObject | any): MovieSceneCaptureEnvironment;
+declare type ELocalizedTextCollapseMode = 'IdenticalTextIdAndSource' | 'IdenticalPackageIdTextIdAndSource' | 'IdenticalNamespaceAndSource' | 'ELocalizedTextCollapseMode_MAX';
+declare var ELocalizedTextCollapseMode : { IdenticalTextIdAndSource:'IdenticalTextIdAndSource',IdenticalPackageIdTextIdAndSource:'IdenticalPackageIdTextIdAndSource',IdenticalNamespaceAndSource:'IdenticalNamespaceAndSource',ELocalizedTextCollapseMode_MAX:'ELocalizedTextCollapseMode_MAX', };
+declare class LocalizationExportingSettings { 
+	CollapseMode: ELocalizedTextCollapseMode;
+	ShouldPersistCommentsOnExport: boolean;
+	ShouldAddSourceLocationsAsComments: boolean;
+	clone() : LocalizationExportingSettings;
+	static C(Other: UObject | any): LocalizationExportingSettings;
 }
 
-declare class FrameMetrics { 
-	TotalElapsedTime: number;
-	FrameDelta: number;
-	FrameNumber: number;
-	NumDroppedFrames: number;
-	clone() : FrameMetrics;
-	static C(Other: UObject | any): FrameMetrics;
+declare class LocalizationCompilationSettings { 
+	SkipSourceCheck: boolean;
+	ValidateFormatPatterns: boolean;
+	ValidateSafeWhitespace: boolean;
+	clone() : LocalizationCompilationSettings;
+	static C(Other: UObject | any): LocalizationCompilationSettings;
 }
 
-declare class UserDefinedCaptureProtocol extends MovieSceneImageCaptureProtocolBase { 
-	World: World;
-	static Load(ResourceName: string): UserDefinedCaptureProtocol;
-	static Find(Outer: UObject, ResourceName: string): UserDefinedCaptureProtocol;
-	static GetDefaultObject(): UserDefinedCaptureProtocol;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserDefinedCaptureProtocol;
-	StopCapturingFinalPixels(): void;
-	StartCapturingFinalPixels(StreamName: string): void;
-	PushBufferToStream(Buffer: Texture,StreamName: string): void;
-	OnWarmUp(): void;
-	OnTick(): void;
-	OnStartCapture(): void;
-	OnSetup(): boolean;
-	OnPreTick(): void;
-	OnPauseCapture(): void;
-	OnFinalize(): void;
-	OnCaptureFrame(): void;
-	OnCanFinalize(): boolean;
-	OnBeginFinalize(): void;
-	GetCurrentFrameMetrics(): FrameMetrics;
-	GenerateFilename(InFrameMetrics: FrameMetrics): string;
-	static C(Other: UObject | any): UserDefinedCaptureProtocol;
+declare class LocalizationImportDialogueSettings { 
+	RawAudioPath: DirectoryPath;
+	ImportedDialogueFolder: string;
+	bImportNativeAsSource: boolean;
+	clone() : LocalizationImportDialogueSettings;
+	static C(Other: UObject | any): LocalizationImportDialogueSettings;
 }
 
-declare class CapturedPixels { 
-	clone() : CapturedPixels;
-	static C(Other: UObject | any): CapturedPixels;
+declare class CultureStatistics { 
+	CultureName: string;
+	WordCount: any;
+	clone() : CultureStatistics;
+	static C(Other: UObject | any): CultureStatistics;
 }
 
-declare class UserDefinedImageCaptureProtocol extends UserDefinedCaptureProtocol { 
-	Format: EDesiredImageFormat;
-	bEnableCompression: boolean;
-	CompressionQuality: number;
-	static Load(ResourceName: string): UserDefinedImageCaptureProtocol;
-	static Find(Outer: UObject, ResourceName: string): UserDefinedImageCaptureProtocol;
-	static GetDefaultObject(): UserDefinedImageCaptureProtocol;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserDefinedImageCaptureProtocol;
-	WriteImageToDisk(PixelData: CapturedPixels,StreamName: string,FrameMetrics: FrameMetrics,bCopyImageData: boolean): void;
-	GenerateFilenameForCurrentFrame(): string;
-	GenerateFilenameForBuffer(Buffer: Texture,StreamName: string): string;
-	static C(Other: UObject | any): UserDefinedImageCaptureProtocol;
+declare class LocalizationTargetSettings { 
+	Name: string;
+	Guid: Guid;
+	ConflictStatus: ELocalizationTargetConflictStatus;
+	TargetDependencies: Guid[];
+	AdditionalManifestDependencies: FilePath[];
+	RequiredModuleNames: string[];
+	GatherFromTextFiles: GatherTextFromTextFilesConfiguration;
+	GatherFromPackages: GatherTextFromPackagesConfiguration;
+	GatherFromMetaData: GatherTextFromMetaDataConfiguration;
+	ExportSettings: LocalizationExportingSettings;
+	CompileSettings: LocalizationCompilationSettings;
+	ImportDialogueSettings: LocalizationImportDialogueSettings;
+	NativeCultureIndex: number;
+	SupportedCulturesStatistics: CultureStatistics[];
+	clone() : LocalizationTargetSettings;
+	static C(Other: UObject | any): LocalizationTargetSettings;
 }
 
-declare class VideoCaptureProtocol extends FrameGrabberProtocol { 
-	bUseCompression: boolean;
-	CompressionQuality: number;
-	VideoCodec: string;
-	static Load(ResourceName: string): VideoCaptureProtocol;
-	static Find(Outer: UObject, ResourceName: string): VideoCaptureProtocol;
-	static GetDefaultObject(): VideoCaptureProtocol;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VideoCaptureProtocol;
-	static C(Other: UObject | any): VideoCaptureProtocol;
+declare class LocalizationTarget extends UObject { 
+	Settings: LocalizationTargetSettings;
+	static Load(ResourceName: string): LocalizationTarget;
+	static Find(Outer: UObject, ResourceName: string): LocalizationTarget;
+	static GetDefaultObject(): LocalizationTarget;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocalizationTarget;
+	static C(Other: UObject | any): LocalizationTarget;
 }
 
-declare class CurveEditorKeyProxy extends Interface { 
-	static Load(ResourceName: string): CurveEditorKeyProxy;
-	static Find(Outer: UObject, ResourceName: string): CurveEditorKeyProxy;
-	static GetDefaultObject(): CurveEditorKeyProxy;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveEditorKeyProxy;
-	static C(Other: UObject | any): CurveEditorKeyProxy;
-}
-
-declare type ECurveEditorTangentVisibility = 'AllTangents' | 'SelectedKeys' | 'NoTangents' | 'ECurveEditorTangentVisibility_MAX';
-declare var ECurveEditorTangentVisibility : { AllTangents:'AllTangents',SelectedKeys:'SelectedKeys',NoTangents:'NoTangents',ECurveEditorTangentVisibility_MAX:'ECurveEditorTangentVisibility_MAX', };
-declare class CurveEditorSettings extends UObject { 
-	bAutoFrameCurveEditor: boolean;
-	bShowCurveEditorCurveToolTips: boolean;
-	TangentVisibility: ECurveEditorTangentVisibility;
-	static Load(ResourceName: string): CurveEditorSettings;
-	static Find(Outer: UObject, ResourceName: string): CurveEditorSettings;
-	static GetDefaultObject(): CurveEditorSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveEditorSettings;
-	static C(Other: UObject | any): CurveEditorSettings;
-}
-
-declare class CameraRig_Crane extends Actor { 
-	CranePitch: number;
-	CraneYaw: number;
-	CraneArmLength: number;
-	bLockMountPitch: boolean;
-	bLockMountYaw: boolean;
-	TransformComponent: SceneComponent;
-	CraneYawControl: SceneComponent;
-	CranePitchControl: SceneComponent;
-	CraneCameraMount: SceneComponent;
-	PreviewMesh_CraneArm: StaticMeshComponent;
-	PreviewMesh_CraneBase: StaticMeshComponent;
-	PreviewMesh_CraneMount: StaticMeshComponent;
-	PreviewMesh_CraneCounterWeight: StaticMeshComponent;
-	static GetDefaultObject(): CameraRig_Crane;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraRig_Crane;
-	static C(Other: UObject | any): CameraRig_Crane;
-}
-
-declare class CameraRig_Rail extends Actor { 
-	CurrentPositionOnRail: number;
-	bLockOrientationToRail: boolean;
-	TransformComponent: SceneComponent;
-	RailSplineComponent: SplineComponent;
-	RailCameraMount: SceneComponent;
-	PreviewMesh_Rail: SplineMeshComponent;
-	PreviewRailMeshSegments: SplineMeshComponent[];
-	PreviewRailStaticMesh: StaticMesh;
-	PreviewMesh_Mount: StaticMeshComponent;
-	static GetDefaultObject(): CameraRig_Rail;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraRig_Rail;
-	static C(Other: UObject | any): CameraRig_Rail;
-}
-
-declare class CameraLookatTrackingSettings { 
-	bEnableLookAtTracking: boolean;
-	bDrawDebugLookAtTrackingPosition: boolean;
-	LookAtTrackingInterpSpeed: number;
-	ActorToTrack: Actor;
-	RelativeOffset: Vector;
-	bAllowRoll: boolean;
-	clone() : CameraLookatTrackingSettings;
-	static C(Other: UObject | any): CameraLookatTrackingSettings;
-}
-
-declare class CameraFilmbackSettings { 
-	SensorWidth: number;
-	SensorHeight: number;
-	SensorAspectRatio: number;
-	clone() : CameraFilmbackSettings;
-	static C(Other: UObject | any): CameraFilmbackSettings;
-}
-
-declare class CameraLensSettings { 
-	MinFocalLength: number;
-	MaxFocalLength: number;
-	MinFStop: number;
-	MaxFStop: number;
-	MinimumFocusDistance: number;
-	DiaphragmBladeCount: number;
-	clone() : CameraLensSettings;
-	static C(Other: UObject | any): CameraLensSettings;
-}
-
-declare type ECameraFocusMethod = 'None' | 'Manual' | 'Tracking' | 'ECameraFocusMethod_MAX';
-declare var ECameraFocusMethod : { None:'None',Manual:'Manual',Tracking:'Tracking',ECameraFocusMethod_MAX:'ECameraFocusMethod_MAX', };
-declare class CameraTrackingFocusSettings { 
-	ActorToTrack: Actor;
-	RelativeOffset: Vector;
-	bDrawDebugTrackingFocusPoint: boolean;
-	clone() : CameraTrackingFocusSettings;
-	static C(Other: UObject | any): CameraTrackingFocusSettings;
-}
-
-declare class CameraFocusSettings { 
-	FocusMethod: ECameraFocusMethod;
-	ManualFocusDistance: number;
-	TrackingFocusSettings: CameraTrackingFocusSettings;
-	bDrawDebugFocusPlane: boolean;
-	DebugFocusPlaneColor: Color;
-	bSmoothFocusChanges: boolean;
-	FocusSmoothingInterpSpeed: number;
-	FocusOffset: number;
-	clone() : CameraFocusSettings;
-	static C(Other: UObject | any): CameraFocusSettings;
-}
-
-declare class NamedFilmbackPreset { 
-	Name: string;
-	FilmbackSettings: CameraFilmbackSettings;
-	clone() : NamedFilmbackPreset;
-	static C(Other: UObject | any): NamedFilmbackPreset;
+declare class LocalizationTargetSet extends UObject { 
+	TargetObjects: LocalizationTarget[];
+	static Load(ResourceName: string): LocalizationTargetSet;
+	static Find(Outer: UObject, ResourceName: string): LocalizationTargetSet;
+	static GetDefaultObject(): LocalizationTargetSet;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocalizationTargetSet;
+	static C(Other: UObject | any): LocalizationTargetSet;
 }
 
-declare class NamedLensPreset { 
-	Name: string;
-	LensSettings: CameraLensSettings;
-	clone() : NamedLensPreset;
-	static C(Other: UObject | any): NamedLensPreset;
-}
-
-declare class CineCameraComponent extends CameraComponent { 
-	FilmbackSettings: CameraFilmbackSettings;
-	LensSettings: CameraLensSettings;
-	FocusSettings: CameraFocusSettings;
-	CurrentFocalLength: number;
-	CurrentAperture: number;
-	CurrentFocusDistance: number;
-	CurrentHorizontalFOV: number;
-	FocusPlaneVisualizationMesh: StaticMesh;
-	FocusPlaneVisualizationMaterial: Material;
-	DebugFocusPlaneComponent: StaticMeshComponent;
-	DebugFocusPlaneMID: MaterialInstanceDynamic;
-	FilmbackPresets: NamedFilmbackPreset[];
-	LensPresets: NamedLensPreset[];
-	DefaultFilmbackPresetName: string;
-	DefaultLensPresetName: string;
-	DefaultLensFocalLength: number;
-	DefaultLensFStop: number;
-	static Load(ResourceName: string): CineCameraComponent;
-	static Find(Outer: UObject, ResourceName: string): CineCameraComponent;
-	static GetDefaultObject(): CineCameraComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CineCameraComponent;
-	SetLensPresetByName(InPresetName: string): void;
-	SetFilmbackPresetByName(InPresetName: string): void;
-	GetVerticalFieldOfView(): number;
-	GetLensPresetName(): string;
-	GetHorizontalFieldOfView(): number;
-	GetFilmbackPresetName(): string;
-	static C(Other: UObject | any): CineCameraComponent;
-}
-
-declare class CineCameraActor extends CameraActor { 
-	LookatTrackingSettings: CameraLookatTrackingSettings;
-	static GetDefaultObject(): CineCameraActor;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CineCameraActor;
-	GetCineCameraComponent(): CineCameraComponent;
-	static C(Other: UObject | any): CineCameraActor;
+declare class LocalizationSettings extends UObject { 
+	EngineTargetSet: LocalizationTargetSet;
+	EngineTargetsSettings: LocalizationTargetSettings[];
+	GameTargetSet: LocalizationTargetSet;
+	GameTargetsSettings: LocalizationTargetSettings[];
+	static Load(ResourceName: string): LocalizationSettings;
+	static Find(Outer: UObject, ResourceName: string): LocalizationSettings;
+	static GetDefaultObject(): LocalizationSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocalizationSettings;
+	static C(Other: UObject | any): LocalizationSettings;
 }
 
-declare class LevelSequenceBurnInInitSettings extends UObject { 
-	static Load(ResourceName: string): LevelSequenceBurnInInitSettings;
-	static Find(Outer: UObject, ResourceName: string): LevelSequenceBurnInInitSettings;
-	static GetDefaultObject(): LevelSequenceBurnInInitSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelSequenceBurnInInitSettings;
-	static C(Other: UObject | any): LevelSequenceBurnInInitSettings;
+declare class MeshReconstructorBase extends UObject { 
+	static Load(ResourceName: string): MeshReconstructorBase;
+	static Find(Outer: UObject, ResourceName: string): MeshReconstructorBase;
+	static GetDefaultObject(): MeshReconstructorBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshReconstructorBase;
+	StopReconstruction(): void;
+	StartReconstruction(): void;
+	PauseReconstruction(): void;
+	IsReconstructionStarted(): boolean;
+	IsReconstructionPaused(): boolean;
+	DisconnectMRMesh(): void;
+	ConnectMRMesh(Mesh: MRMeshComponent): void;
+	static C(Other: UObject | any): MeshReconstructorBase;
+}
+
+declare type EMeshTrackerVertexColorMode = 'None' | 'Confidence' | 'Block' | 'EMeshTrackerVertexColorMode_MAX';
+declare var EMeshTrackerVertexColorMode : { None:'None',Confidence:'Confidence',Block:'Block',EMeshTrackerVertexColorMode_MAX:'EMeshTrackerVertexColorMode_MAX', };
+declare class MockDataMeshTrackerComponent extends SceneComponent { 
+	OnMeshTrackerUpdated: UnrealEngineMulticastDelegate<(index: number, Vertices: Vector[], Triangles: number[], Normals: Vector[], Confidence: number[]) => void>;
+	ScanWorld: boolean;
+	RequestNormals: boolean;
+	RequestVertexConfidence: boolean;
+	VertexColorMode: EMeshTrackerVertexColorMode;
+	BlockVertexColors: Color[];
+	VertexColorFromConfidenceZero: LinearColor;
+	VertexColorFromConfidenceOne: LinearColor;
+	UpdateInterval: number;
+	MRMesh: MRMeshComponent;
+	static Load(ResourceName: string): MockDataMeshTrackerComponent;
+	static Find(Outer: UObject, ResourceName: string): MockDataMeshTrackerComponent;
+	static GetDefaultObject(): MockDataMeshTrackerComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MockDataMeshTrackerComponent;
+	DisconnectMRMesh(InMRMeshPtr: MRMeshComponent): void;
+	ConnectMRMesh(InMRMeshPtr: MRMeshComponent): void;
+	static C(Other: UObject | any): MockDataMeshTrackerComponent;
+}
+
+declare type EARWorldMappingState = 'NotAvailable' | 'StillMappingNotRelocalizable' | 'StillMappingRelocalizable' | 'Mapped' | 'EARWorldMappingState_MAX';
+declare var EARWorldMappingState : { NotAvailable:'NotAvailable',StillMappingNotRelocalizable:'StillMappingNotRelocalizable',StillMappingRelocalizable:'StillMappingRelocalizable',Mapped:'Mapped',EARWorldMappingState_MAX:'EARWorldMappingState_MAX', };
+declare type EARTrackingQualityReason = 'None' | 'Initializing' | 'Relocalizing' | 'ExcessiveMotion' | 'InsufficientFeatures' | 'EARTrackingQualityReason_MAX';
+declare var EARTrackingQualityReason : { None:'None',Initializing:'Initializing',Relocalizing:'Relocalizing',ExcessiveMotion:'ExcessiveMotion',InsufficientFeatures:'InsufficientFeatures',EARTrackingQualityReason_MAX:'EARTrackingQualityReason_MAX', };
+declare type EARTrackingQuality = 'NotTracking' | 'OrientationOnly' | 'OrientationAndPosition' | 'EARTrackingQuality_MAX';
+declare var EARTrackingQuality : { NotTracking:'NotTracking',OrientationOnly:'OrientationOnly',OrientationAndPosition:'OrientationAndPosition',EARTrackingQuality_MAX:'EARTrackingQuality_MAX', };
+declare type EARTextureType = 'CameraImage' | 'CameraDepth' | 'EnvironmentCapture' | 'EARTextureType_MAX';
+declare var EARTextureType : { CameraImage:'CameraImage',CameraDepth:'CameraDepth',EnvironmentCapture:'EnvironmentCapture',EARTextureType_MAX:'EARTextureType_MAX', };
+declare class ARTexture extends Texture { 
+	TextureType: EARTextureType;
+	Timestamp: number;
+	ExternalTextureGuid: Guid;
+	Size: Vector2D;
+	static Load(ResourceName: string): ARTexture;
+	static Find(Outer: UObject, ResourceName: string): ARTexture;
+	static GetDefaultObject(): ARTexture;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTexture;
+	static C(Other: UObject | any): ARTexture;
+}
+
+declare class ARTextureCameraImage extends ARTexture { 
+	static Load(ResourceName: string): ARTextureCameraImage;
+	static Find(Outer: UObject, ResourceName: string): ARTextureCameraImage;
+	static GetDefaultObject(): ARTextureCameraImage;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTextureCameraImage;
+	static C(Other: UObject | any): ARTextureCameraImage;
+}
+
+declare class ARLightEstimate extends UObject { 
+	static Load(ResourceName: string): ARLightEstimate;
+	static Find(Outer: UObject, ResourceName: string): ARLightEstimate;
+	static GetDefaultObject(): ARLightEstimate;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARLightEstimate;
+	static C(Other: UObject | any): ARLightEstimate;
+}
+
+declare type EARDepthQuality = 'Unkown' | 'Low' | 'High' | 'EARDepthQuality_MAX';
+declare var EARDepthQuality : { Unkown:'Unkown',Low:'Low',High:'High',EARDepthQuality_MAX:'EARDepthQuality_MAX', };
+declare type EARDepthAccuracy = 'Unkown' | 'Approximate' | 'Accurate' | 'EARDepthAccuracy_MAX';
+declare var EARDepthAccuracy : { Unkown:'Unkown',Approximate:'Approximate',Accurate:'Accurate',EARDepthAccuracy_MAX:'EARDepthAccuracy_MAX', };
+declare class ARTextureCameraDepth extends ARTexture { 
+	DepthQuality: EARDepthQuality;
+	DepthAccuracy: EARDepthAccuracy;
+	bIsTemporallySmoothed: boolean;
+	static Load(ResourceName: string): ARTextureCameraDepth;
+	static Find(Outer: UObject, ResourceName: string): ARTextureCameraDepth;
+	static GetDefaultObject(): ARTextureCameraDepth;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTextureCameraDepth;
+	static C(Other: UObject | any): ARTextureCameraDepth;
+}
+
+declare type EARSessionStatus = 'NotStarted' | 'Running' | 'NotSupported' | 'FatalError' | 'PermissionNotGranted' | 'UnsupportedConfiguration' | 'Other' | 'EARSessionStatus_MAX';
+declare var EARSessionStatus : { NotStarted:'NotStarted',Running:'Running',NotSupported:'NotSupported',FatalError:'FatalError',PermissionNotGranted:'PermissionNotGranted',UnsupportedConfiguration:'UnsupportedConfiguration',Other:'Other',EARSessionStatus_MAX:'EARSessionStatus_MAX', };
+declare class ARSessionStatus { 
+	AdditionalInfo: string;
+	Status: EARSessionStatus;
+	clone() : ARSessionStatus;
+	static C(Other: UObject | any): ARSessionStatus;
+	static GetARSessionStatus(): ARSessionStatus;
+}
+
+declare class ARSkeletonDefinition { 
+	NumJoints: number;
+	JointNames: string[];
+	ParentIndices: number[];
+	clone() : ARSkeletonDefinition;
+	static C(Other: UObject | any): ARSkeletonDefinition;
+}
+
+declare type EARJointTransformSpace = 'Model' | 'ParentJoint' | 'EARJointTransformSpace_MAX';
+declare var EARJointTransformSpace : { Model:'Model',ParentJoint:'ParentJoint',EARJointTransformSpace_MAX:'EARJointTransformSpace_MAX', };
+declare class ARPose3D { 
+	SkeletonDefinition: ARSkeletonDefinition;
+	JointTransforms: Transform[];
+	IsJointTracked: boolean[];
+	JointTransformSpace: EARJointTransformSpace;
+	clone() : ARPose3D;
+	static C(Other: UObject | any): ARPose3D;
+}
+
+declare class ARTrackedPose extends ARTrackedGeometry { 
+	static Load(ResourceName: string): ARTrackedPose;
+	static Find(Outer: UObject, ResourceName: string): ARTrackedPose;
+	static GetDefaultObject(): ARTrackedPose;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTrackedPose;
+	GetTrackedPoseData(): ARPose3D;
+	static C(Other: UObject | any): ARTrackedPose;
+}
+
+declare class ARTrackedPoint extends ARTrackedGeometry { 
+	static Load(ResourceName: string): ARTrackedPoint;
+	static Find(Outer: UObject, ResourceName: string): ARTrackedPoint;
+	static GetDefaultObject(): ARTrackedPoint;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTrackedPoint;
+	static C(Other: UObject | any): ARTrackedPoint;
+}
+
+declare type EARPlaneOrientation = 'Horizontal' | 'Vertical' | 'Diagonal' | 'EARPlaneOrientation_MAX';
+declare var EARPlaneOrientation : { Horizontal:'Horizontal',Vertical:'Vertical',Diagonal:'Diagonal',EARPlaneOrientation_MAX:'EARPlaneOrientation_MAX', };
+declare class ARPlaneGeometry extends ARTrackedGeometry { 
+	Orientation: EARPlaneOrientation;
+	Center: Vector;
+	Extent: Vector;
+	SubsumedBy: ARPlaneGeometry;
+	static Load(ResourceName: string): ARPlaneGeometry;
+	static Find(Outer: UObject, ResourceName: string): ARPlaneGeometry;
+	static GetDefaultObject(): ARPlaneGeometry;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARPlaneGeometry;
+	GetSubsumedBy(): ARPlaneGeometry;
+	GetOrientation(): EARPlaneOrientation;
+	GetExtent(): Vector;
+	GetCenter(): Vector;
+	GetBoundaryPolygonInLocalSpace(): Vector[];
+	static C(Other: UObject | any): ARPlaneGeometry;
+}
+
+declare class ARTrackedImage extends ARTrackedGeometry { 
+	DetectedImage: ARCandidateImage;
+	EstimatedSize: Vector2D;
+	static Load(ResourceName: string): ARTrackedImage;
+	static Find(Outer: UObject, ResourceName: string): ARTrackedImage;
+	static GetDefaultObject(): ARTrackedImage;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTrackedImage;
+	GetEstimateSize(): Vector2D;
+	GetDetectedImage(): ARCandidateImage;
+	static C(Other: UObject | any): ARTrackedImage;
+}
+
+declare class AREnvironmentCaptureProbeTexture extends TextureCube { 
+	TextureType: EARTextureType;
+	Timestamp: number;
+	ExternalTextureGuid: Guid;
+	Size: Vector2D;
+	static Load(ResourceName: string): AREnvironmentCaptureProbeTexture;
+	static Find(Outer: UObject, ResourceName: string): AREnvironmentCaptureProbeTexture;
+	static GetDefaultObject(): AREnvironmentCaptureProbeTexture;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AREnvironmentCaptureProbeTexture;
+	static C(Other: UObject | any): AREnvironmentCaptureProbeTexture;
+}
+
+declare class AREnvironmentCaptureProbe extends ARTrackedGeometry { 
+	EnvironmentCaptureTexture: AREnvironmentCaptureProbeTexture;
+	static Load(ResourceName: string): AREnvironmentCaptureProbe;
+	static Find(Outer: UObject, ResourceName: string): AREnvironmentCaptureProbe;
+	static GetDefaultObject(): AREnvironmentCaptureProbe;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AREnvironmentCaptureProbe;
+	GetExtent(): Vector;
+	GetEnvironmentCaptureTexture(): AREnvironmentCaptureProbeTexture;
+	static C(Other: UObject | any): AREnvironmentCaptureProbe;
+}
+
+declare class ARPose2D { 
+	SkeletonDefinition: ARSkeletonDefinition;
+	JointLocations: Vector2D[];
+	IsJointTracked: boolean[];
+	clone() : ARPose2D;
+	static C(Other: UObject | any): ARPose2D;
+}
+
+declare class ARBlueprintLibrary extends BlueprintFunctionLibrary { 
+	static Load(ResourceName: string): ARBlueprintLibrary;
+	static Find(Outer: UObject, ResourceName: string): ARBlueprintLibrary;
+	static GetDefaultObject(): ARBlueprintLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARBlueprintLibrary;
+	static UnpinComponent(ComponentToUnpin: SceneComponent): void;
+	static StopARSession(): void;
+	static StartARSession(SessionConfig: ARSessionConfig): void;
+	static SetAlignmentTransform(InAlignmentTransform: Transform): void;
+	static RemovePin(PinToRemove: ARPin): void;
+	static PinComponentToTraceResult(ComponentToPin: SceneComponent,TraceResult: ARTraceResult,DebugName: string): ARPin;
+	static PinComponent(ComponentToPin: SceneComponent,PinToWorldTransform: Transform,TrackedGeometry: ARTrackedGeometry,DebugName: string): ARPin;
+	static PauseARSession(): void;
+	static LineTraceTrackedObjects3D(Start: Vector,End: Vector,bTestFeaturePoints: boolean,bTestGroundPlane: boolean,bTestPlaneExtents: boolean,bTestPlaneBoundaryPolygon: boolean): ARTraceResult[];
+	static LineTraceTrackedObjects(ScreenCoord: Vector2D,bTestFeaturePoints: boolean,bTestGroundPlane: boolean,bTestPlaneExtents: boolean,bTestPlaneBoundaryPolygon: boolean): ARTraceResult[];
+	static IsSessionTypeSupported(SessionType: EARSessionType): boolean;
+	static IsSessionTrackingFeatureSupported(SessionType: EARSessionType,SessionTrackingFeature: EARSessionTrackingFeature): boolean;
+	static IsARSupported(): boolean;
+	static GetWorldMappingStatus(): EARWorldMappingState;
+	static GetTrackingQualityReason(): EARTrackingQualityReason;
+	static GetTrackingQuality(): EARTrackingQuality;
+	static GetSupportedVideoFormats(SessionType: EARSessionType): ARVideoFormat[];
+	static GetSessionConfig(): ARSessionConfig;
+	static GetPointCloud(): Vector[];
+	static GetPersonSegmentationImage(): ARTextureCameraImage;
+	static GetPersonSegmentationDepthImage(): ARTextureCameraImage;
+	static GetCurrentLightEstimate(): ARLightEstimate;
+	static GetCameraImage(): ARTextureCameraImage;
+	static GetCameraDepth(): ARTextureCameraDepth;
+	static GetARSessionStatus(): ARSessionStatus;
+	static GetAllTrackedPoses(): ARTrackedPose[];
+	static GetAllTrackedPoints(): ARTrackedPoint[];
+	static GetAllTrackedPlanes(): ARPlaneGeometry[];
+	static GetAllTrackedImages(): ARTrackedImage[];
+	static GetAllTrackedEnvironmentCaptureProbes(): AREnvironmentCaptureProbe[];
+	static GetAllTracked2DPoses(): ARPose2D[];
+	static GetAllPins(): ARPin[];
+	static GetAllGeometries(): ARTrackedGeometry[];
+	static DebugDrawTrackedGeometry(TrackedGeometry: ARTrackedGeometry,WorldContextObject: UObject,Color: LinearColor,OutlineThickness: number,PersistForSeconds: number): void;
+	static DebugDrawPin(ARPin: ARPin,WorldContextObject: UObject,Color: LinearColor,Scale: number,PersistForSeconds: number): void;
+	static AddRuntimeCandidateImage(SessionConfig: ARSessionConfig,CandidateTexture: Texture2D,FriendlyName: string,PhysicalWidth: number): ARCandidateImage;
+	static AddManualEnvironmentCaptureProbe(Location: Vector,Extent: Vector): boolean;
+	static C(Other: UObject | any): ARBlueprintLibrary;
+}
+
+declare class ARTraceResultLibrary extends BlueprintFunctionLibrary { 
+	static Load(ResourceName: string): ARTraceResultLibrary;
+	static Find(Outer: UObject, ResourceName: string): ARTraceResultLibrary;
+	static GetDefaultObject(): ARTraceResultLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTraceResultLibrary;
+	static GetTrackedGeometry(TraceResult: ARTraceResult): ARTrackedGeometry;
+	static GetTraceChannel(TraceResult: ARTraceResult): EARLineTraceChannels;
+	static GetLocalToWorldTransform(TraceResult: ARTraceResult): Transform;
+	static GetLocalToTrackingTransform(TraceResult: ARTraceResult): Transform;
+	static GetDistanceFromCamera(TraceResult: ARTraceResult): number;
+	static C(Other: UObject | any): ARTraceResultLibrary;
 }
 
-declare class LevelSequenceBurnInOptions extends UObject { 
-	bUseBurnIn: boolean;
-	BurnInClass: SoftClassPath;
-	Settings: LevelSequenceBurnInInitSettings;
-	static Load(ResourceName: string): LevelSequenceBurnInOptions;
-	static Find(Outer: UObject, ResourceName: string): LevelSequenceBurnInOptions;
-	static GetDefaultObject(): LevelSequenceBurnInOptions;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelSequenceBurnInOptions;
-	SetBurnIn(InBurnInClass: SoftClassPath): void;
-	static C(Other: UObject | any): LevelSequenceBurnInOptions;
+declare class BlueprintAsyncActionBase extends UObject { 
+	static Load(ResourceName: string): BlueprintAsyncActionBase;
+	static Find(Outer: UObject, ResourceName: string): BlueprintAsyncActionBase;
+	static GetDefaultObject(): BlueprintAsyncActionBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintAsyncActionBase;
+	Activate(): void;
+	static C(Other: UObject | any): BlueprintAsyncActionBase;
 }
 
-declare class AutomatedLevelSequenceCapture extends MovieSceneCapture { 
-	LevelSequenceAsset: SoftObjectPath;
-	bUseCustomStartFrame: boolean;
-	CustomStartFrame: FrameNumber;
-	bUseCustomEndFrame: boolean;
-	CustomEndFrame: FrameNumber;
-	WarmUpFrameCount: number;
-	DelayBeforeWarmUp: number;
-	DelayBeforeShotWarmUp: number;
-	BurnInOptions: LevelSequenceBurnInOptions;
-	bWriteEditDecisionList: boolean;
-	bWriteFinalCutProXML: boolean;
-	LevelSequenceActor: any;
-	static Load(ResourceName: string): AutomatedLevelSequenceCapture;
-	static Find(Outer: UObject, ResourceName: string): AutomatedLevelSequenceCapture;
-	static GetDefaultObject(): AutomatedLevelSequenceCapture;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomatedLevelSequenceCapture;
-	static C(Other: UObject | any): AutomatedLevelSequenceCapture;
+declare class ARBaseAsyncTaskBlueprintProxy extends BlueprintAsyncActionBase { 
+	static Load(ResourceName: string): ARBaseAsyncTaskBlueprintProxy;
+	static Find(Outer: UObject, ResourceName: string): ARBaseAsyncTaskBlueprintProxy;
+	static GetDefaultObject(): ARBaseAsyncTaskBlueprintProxy;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARBaseAsyncTaskBlueprintProxy;
+	static C(Other: UObject | any): ARBaseAsyncTaskBlueprintProxy;
+}
+
+declare class ARSaveWorldAsyncTaskBlueprintProxy extends ARBaseAsyncTaskBlueprintProxy { 
+	OnSuccess: UnrealEngineMulticastDelegate<(SavedWorld: number[]) => void>;
+	OnFailed: UnrealEngineMulticastDelegate<(SavedWorld: number[]) => void>;
+	static Load(ResourceName: string): ARSaveWorldAsyncTaskBlueprintProxy;
+	static Find(Outer: UObject, ResourceName: string): ARSaveWorldAsyncTaskBlueprintProxy;
+	static GetDefaultObject(): ARSaveWorldAsyncTaskBlueprintProxy;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARSaveWorldAsyncTaskBlueprintProxy;
+	static ARSaveWorld(WorldContextObject: UObject): ARSaveWorldAsyncTaskBlueprintProxy;
+	static C(Other: UObject | any): ARSaveWorldAsyncTaskBlueprintProxy;
+}
+
+declare class ARGetCandidateObjectAsyncTaskBlueprintProxy extends ARBaseAsyncTaskBlueprintProxy { 
+	OnSuccess: UnrealEngineMulticastDelegate<(SavedObject: ARCandidateObject) => void>;
+	OnFailed: UnrealEngineMulticastDelegate<(SavedObject: ARCandidateObject) => void>;
+	static Load(ResourceName: string): ARGetCandidateObjectAsyncTaskBlueprintProxy;
+	static Find(Outer: UObject, ResourceName: string): ARGetCandidateObjectAsyncTaskBlueprintProxy;
+	static GetDefaultObject(): ARGetCandidateObjectAsyncTaskBlueprintProxy;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARGetCandidateObjectAsyncTaskBlueprintProxy;
+	static ARGetCandidateObject(WorldContextObject: UObject,Location: Vector,Extent: Vector): ARGetCandidateObjectAsyncTaskBlueprintProxy;
+	static C(Other: UObject | any): ARGetCandidateObjectAsyncTaskBlueprintProxy;
+}
+
+declare class ARBasicLightEstimate extends ARLightEstimate { 
+	AmbientIntensityLumens: number;
+	AmbientColorTemperatureKelvin: number;
+	AmbientColor: LinearColor;
+	static Load(ResourceName: string): ARBasicLightEstimate;
+	static Find(Outer: UObject, ResourceName: string): ARBasicLightEstimate;
+	static GetDefaultObject(): ARBasicLightEstimate;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARBasicLightEstimate;
+	GetAmbientIntensityLumens(): number;
+	GetAmbientColorTemperatureKelvin(): number;
+	GetAmbientColor(): LinearColor;
+	static C(Other: UObject | any): ARBasicLightEstimate;
+}
+
+declare class AROriginActor extends Actor { 
+	static GetDefaultObject(): AROriginActor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AROriginActor;
+	static C(Other: UObject | any): AROriginActor;
+}
+
+declare class GameMode extends GameModeBase { 
+	MatchState: string;
+	bDelayedStart: boolean;
+	NumSpectators: number;
+	NumPlayers: number;
+	NumBots: number;
+	MinRespawnDelay: number;
+	NumTravellingPlayers: number;
+	EngineMessageClass: UnrealEngineClass;
+	InactivePlayerArray: PlayerState[];
+	InactivePlayerStateLifeSpan: number;
+	MaxInactivePlayers: number;
+	bHandleDedicatedServerReplays: boolean;
+	static GetDefaultObject(): GameMode;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameMode;
+	StartMatch(): void;
+	SetBandwidthLimit(AsyncIOBandwidthLimit: number): void;
+	Say(Msg: string): void;
+	RestartGame(): void;
+	ReadyToStartMatch(): boolean;
+	ReadyToEndMatch(): boolean;
+	K2_OnSetMatchState(NewState: string): void;
+	IsMatchInProgress(): boolean;
+	HasMatchEnded(): boolean;
+	GetMatchState(): string;
+	EndMatch(): void;
+	AbortMatch(): void;
+	static C(Other: UObject | any): GameMode;
+}
+
+declare class GameState extends GameStateBase { 
+	MatchState: string;
+	PreviousMatchState: string;
+	ElapsedTime: number;
+	static GetDefaultObject(): GameState;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameState;
+	OnRep_MatchState(): void;
+	OnRep_ElapsedTime(): void;
+	static C(Other: UObject | any): GameState;
+}
+
+declare class ARSharedWorldGameState extends GameState { 
+	PreviewImageData: number[];
+	ARWorldData: number[];
+	PreviewImageBytesTotal: number;
+	ARWorldBytesTotal: number;
+	PreviewImageBytesDelivered: number;
+	ARWorldBytesDelivered: number;
+	static GetDefaultObject(): ARSharedWorldGameState;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARSharedWorldGameState;
+	K2_OnARWorldMapIsReady(): void;
+	static C(Other: UObject | any): ARSharedWorldGameState;
+}
+
+declare class ARSharedWorldGameMode extends GameMode { 
+	BufferSizePerChunk: number;
+	static GetDefaultObject(): ARSharedWorldGameMode;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARSharedWorldGameMode;
+	SetPreviewImageData(ImageData: number[]): void;
+	SetARWorldSharingIsReady(): void;
+	SetARSharedWorldData(ARWorldData: number[]): void;
+	GetARSharedWorldGameState(): ARSharedWorldGameState;
+	static C(Other: UObject | any): ARSharedWorldGameMode;
+}
+
+declare class ARSharedWorldPlayerController extends PlayerController { 
+	static GetDefaultObject(): ARSharedWorldPlayerController;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARSharedWorldPlayerController;
+	ServerMarkReadyForReceiving(): void;
+	ClientUpdatePreviewImageData(Offset: number,Buffer: number[]): void;
+	ClientUpdateARWorldData(Offset: number,Buffer: number[]): void;
+	ClientInitSharedWorld(PreviewImageSize: number,ARWorldDataSize: number): void;
+	static C(Other: UObject | any): ARSharedWorldPlayerController;
+}
+
+declare type ESkyLightSourceType = 'SLS_CapturedScene' | 'SLS_SpecifiedCubemap' | 'SLS_MAX';
+declare var ESkyLightSourceType : { SLS_CapturedScene:'SLS_CapturedScene',SLS_SpecifiedCubemap:'SLS_SpecifiedCubemap',SLS_MAX:'SLS_MAX', };
+declare type EOcclusionCombineMode = 'OCM_Minimum' | 'OCM_Multiply' | 'OCM_MAX';
+declare var EOcclusionCombineMode : { OCM_Minimum:'OCM_Minimum',OCM_Multiply:'OCM_Multiply',OCM_MAX:'OCM_MAX', };
+declare class SkyLightComponent extends LightComponentBase { 
+	SourceType: ESkyLightSourceType;
+	CubeMap: TextureCube;
+	SourceCubemapAngle: number;
+	CubemapResolution: number;
+	SkyDistanceThreshold: number;
+	bCaptureEmissiveOnly: boolean;
+	bLowerHemisphereIsBlack: boolean;
+	LowerHemisphereColor: LinearColor;
+	OcclusionMaxDistance: number;
+	Contrast: number;
+	OcclusionExponent: number;
+	MinOcclusion: number;
+	OcclusionTint: Color;
+	OcclusionCombineMode: EOcclusionCombineMode;
+	BlendDestinationCubemap: TextureCube;
+	static Load(ResourceName: string): SkyLightComponent;
+	static Find(Outer: UObject, ResourceName: string): SkyLightComponent;
+	static GetDefaultObject(): SkyLightComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkyLightComponent;
+	SetVolumetricScatteringIntensity(NewIntensity: number): void;
+	SetOcclusionTint(InTint: Color): void;
+	SetOcclusionExponent(InOcclusionExponent: number): void;
+	SetOcclusionContrast(InOcclusionContrast: number): void;
+	SetMinOcclusion(InMinOcclusion: number): void;
+	SetLowerHemisphereColor(InLowerHemisphereColor: LinearColor): void;
+	SetLightColor(NewLightColor: LinearColor): void;
+	SetIntensity(NewIntensity: number): void;
+	SetIndirectLightingIntensity(NewIntensity: number): void;
+	SetCubemapBlend(SourceCubemap: TextureCube,DestinationCubemap: TextureCube,InBlendFraction: number): void;
+	SetCubemap(NewCubemap: TextureCube): void;
+	RecaptureSky(): void;
+	static C(Other: UObject | any): SkyLightComponent;
+}
+
+declare class SkyLight extends Info { 
+	LightComponent: SkyLightComponent;
+	bEnabled: boolean;
+	static GetDefaultObject(): SkyLight;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkyLight;
+	OnRep_bEnabled(): void;
+	static C(Other: UObject | any): SkyLight;
+}
+
+declare class ARSkyLight extends SkyLight { 
+	CaptureProbe: AREnvironmentCaptureProbe;
+	static GetDefaultObject(): ARSkyLight;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARSkyLight;
+	SetEnvironmentCaptureProbe(InCaptureProbe: AREnvironmentCaptureProbe): void;
+	static C(Other: UObject | any): ARSkyLight;
+}
+
+declare class ARTraceResultDummy extends UObject { 
+	static Load(ResourceName: string): ARTraceResultDummy;
+	static Find(Outer: UObject, ResourceName: string): ARTraceResultDummy;
+	static GetDefaultObject(): ARTraceResultDummy;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTraceResultDummy;
+	static C(Other: UObject | any): ARTraceResultDummy;
+}
+
+declare type EAREye = 'LeftEye' | 'RightEye' | 'EAREye_MAX';
+declare var EAREye : { LeftEye:'LeftEye',RightEye:'RightEye',EAREye_MAX:'EAREye_MAX', };
+declare type EARFaceBlendShape = 'EyeBlinkLeft' | 'EyeLookDownLeft' | 'EyeLookInLeft' | 'EyeLookOutLeft' | 'EyeLookUpLeft' | 'EyeSquintLeft' | 'EyeWideLeft' | 'EyeBlinkRight' | 'EyeLookDownRight' | 'EyeLookInRight' | 'EyeLookOutRight' | 'EyeLookUpRight' | 'EyeSquintRight' | 'EyeWideRight' | 'JawForward' | 'JawLeft' | 'JawRight' | 'JawOpen' | 'MouthClose' | 'MouthFunnel' | 'MouthPucker' | 'MouthLeft' | 'MouthRight' | 'MouthSmileLeft' | 'MouthSmileRight' | 'MouthFrownLeft' | 'MouthFrownRight' | 'MouthDimpleLeft' | 'MouthDimpleRight' | 'MouthStretchLeft' | 'MouthStretchRight' | 'MouthRollLower' | 'MouthRollUpper' | 'MouthShrugLower' | 'MouthShrugUpper' | 'MouthPressLeft' | 'MouthPressRight' | 'MouthLowerDownLeft' | 'MouthLowerDownRight' | 'MouthUpperUpLeft' | 'MouthUpperUpRight' | 'BrowDownLeft' | 'BrowDownRight' | 'BrowInnerUp' | 'BrowOuterUpLeft' | 'BrowOuterUpRight' | 'CheekPuff' | 'CheekSquintLeft' | 'CheekSquintRight' | 'NoseSneerLeft' | 'NoseSneerRight' | 'TongueOut' | 'HeadYaw' | 'HeadPitch' | 'HeadRoll' | 'LeftEyeYaw' | 'LeftEyePitch' | 'LeftEyeRoll' | 'RightEyeYaw' | 'RightEyePitch' | 'RightEyeRoll' | 'MAX';
+declare var EARFaceBlendShape : { EyeBlinkLeft:'EyeBlinkLeft',EyeLookDownLeft:'EyeLookDownLeft',EyeLookInLeft:'EyeLookInLeft',EyeLookOutLeft:'EyeLookOutLeft',EyeLookUpLeft:'EyeLookUpLeft',EyeSquintLeft:'EyeSquintLeft',EyeWideLeft:'EyeWideLeft',EyeBlinkRight:'EyeBlinkRight',EyeLookDownRight:'EyeLookDownRight',EyeLookInRight:'EyeLookInRight',EyeLookOutRight:'EyeLookOutRight',EyeLookUpRight:'EyeLookUpRight',EyeSquintRight:'EyeSquintRight',EyeWideRight:'EyeWideRight',JawForward:'JawForward',JawLeft:'JawLeft',JawRight:'JawRight',JawOpen:'JawOpen',MouthClose:'MouthClose',MouthFunnel:'MouthFunnel',MouthPucker:'MouthPucker',MouthLeft:'MouthLeft',MouthRight:'MouthRight',MouthSmileLeft:'MouthSmileLeft',MouthSmileRight:'MouthSmileRight',MouthFrownLeft:'MouthFrownLeft',MouthFrownRight:'MouthFrownRight',MouthDimpleLeft:'MouthDimpleLeft',MouthDimpleRight:'MouthDimpleRight',MouthStretchLeft:'MouthStretchLeft',MouthStretchRight:'MouthStretchRight',MouthRollLower:'MouthRollLower',MouthRollUpper:'MouthRollUpper',MouthShrugLower:'MouthShrugLower',MouthShrugUpper:'MouthShrugUpper',MouthPressLeft:'MouthPressLeft',MouthPressRight:'MouthPressRight',MouthLowerDownLeft:'MouthLowerDownLeft',MouthLowerDownRight:'MouthLowerDownRight',MouthUpperUpLeft:'MouthUpperUpLeft',MouthUpperUpRight:'MouthUpperUpRight',BrowDownLeft:'BrowDownLeft',BrowDownRight:'BrowDownRight',BrowInnerUp:'BrowInnerUp',BrowOuterUpLeft:'BrowOuterUpLeft',BrowOuterUpRight:'BrowOuterUpRight',CheekPuff:'CheekPuff',CheekSquintLeft:'CheekSquintLeft',CheekSquintRight:'CheekSquintRight',NoseSneerLeft:'NoseSneerLeft',NoseSneerRight:'NoseSneerRight',TongueOut:'TongueOut',HeadYaw:'HeadYaw',HeadPitch:'HeadPitch',HeadRoll:'HeadRoll',LeftEyeYaw:'LeftEyeYaw',LeftEyePitch:'LeftEyePitch',LeftEyeRoll:'LeftEyeRoll',RightEyeYaw:'RightEyeYaw',RightEyePitch:'RightEyePitch',RightEyeRoll:'RightEyeRoll',MAX:'MAX', };
+declare class ARFaceGeometry extends ARTrackedGeometry { 
+	LookAtTarget: Vector;
+	bIsTracked: boolean;
+	BlendShapes: any;
+	static Load(ResourceName: string): ARFaceGeometry;
+	static Find(Outer: UObject, ResourceName: string): ARFaceGeometry;
+	static GetDefaultObject(): ARFaceGeometry;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARFaceGeometry;
+	GetWorldSpaceEyeTransform(Eye: EAREye): Transform;
+	GetLocalSpaceEyeTransform(Eye: EAREye): Transform;
+	GetBlendShapeValue(BlendShape: EARFaceBlendShape): number;
+	GetBlendShapes(): any;
+	static C(Other: UObject | any): ARFaceGeometry;
+}
+
+declare class ARTrackedObject extends ARTrackedGeometry { 
+	DetectedObject: ARCandidateObject;
+	static Load(ResourceName: string): ARTrackedObject;
+	static Find(Outer: UObject, ResourceName: string): ARTrackedObject;
+	static GetDefaultObject(): ARTrackedObject;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTrackedObject;
+	GetDetectedObject(): ARCandidateObject;
+	static C(Other: UObject | any): ARTrackedObject;
+}
+
+declare class ARTrackableNotifyComponent extends ActorComponent { 
+	OnAddTrackedGeometry: UnrealEngineMulticastDelegate<(TrackedGeometry: ARTrackedGeometry) => void>;
+	OnUpdateTrackedGeometry: UnrealEngineMulticastDelegate<(TrackedGeometry: ARTrackedGeometry) => void>;
+	OnRemoveTrackedGeometry: UnrealEngineMulticastDelegate<(TrackedGeometry: ARTrackedGeometry) => void>;
+	OnAddTrackedPlane: UnrealEngineMulticastDelegate<(TrackedPlane: ARPlaneGeometry) => void>;
+	OnUpdateTrackedPlane: UnrealEngineMulticastDelegate<(TrackedPlane: ARPlaneGeometry) => void>;
+	OnRemoveTrackedPlane: UnrealEngineMulticastDelegate<(TrackedPlane: ARPlaneGeometry) => void>;
+	OnAddTrackedPoint: UnrealEngineMulticastDelegate<(TrackedPoint: ARTrackedPoint) => void>;
+	OnUpdateTrackedPoint: UnrealEngineMulticastDelegate<(TrackedPoint: ARTrackedPoint) => void>;
+	OnRemoveTrackedPoint: UnrealEngineMulticastDelegate<(TrackedPoint: ARTrackedPoint) => void>;
+	OnAddTrackedImage: UnrealEngineMulticastDelegate<(TrackedImage: ARTrackedImage) => void>;
+	OnUpdateTrackedImage: UnrealEngineMulticastDelegate<(TrackedImage: ARTrackedImage) => void>;
+	OnRemoveTrackedImage: UnrealEngineMulticastDelegate<(TrackedImage: ARTrackedImage) => void>;
+	OnAddTrackedFace: UnrealEngineMulticastDelegate<(TrackedFace: ARFaceGeometry) => void>;
+	OnUpdateTrackedFace: UnrealEngineMulticastDelegate<(TrackedFace: ARFaceGeometry) => void>;
+	OnRemoveTrackedFace: UnrealEngineMulticastDelegate<(TrackedFace: ARFaceGeometry) => void>;
+	OnAddTrackedEnvProbe: UnrealEngineMulticastDelegate<(TrackedEnvProbe: AREnvironmentCaptureProbe) => void>;
+	OnUpdateTrackedEnvProbe: UnrealEngineMulticastDelegate<(TrackedEnvProbe: AREnvironmentCaptureProbe) => void>;
+	OnRemoveTrackedEnvProbe: UnrealEngineMulticastDelegate<(TrackedEnvProbe: AREnvironmentCaptureProbe) => void>;
+	OnAddTrackedObject: UnrealEngineMulticastDelegate<(TrackedObject: ARTrackedObject) => void>;
+	OnUpdateTrackedObject: UnrealEngineMulticastDelegate<(TrackedObject: ARTrackedObject) => void>;
+	OnRemoveTrackedObject: UnrealEngineMulticastDelegate<(TrackedObject: ARTrackedObject) => void>;
+	static Load(ResourceName: string): ARTrackableNotifyComponent;
+	static Find(Outer: UObject, ResourceName: string): ARTrackableNotifyComponent;
+	static GetDefaultObject(): ARTrackableNotifyComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTrackableNotifyComponent;
+	static C(Other: UObject | any): ARTrackableNotifyComponent;
+}
+
+declare class ARTypesDummyClass extends UObject { 
+	static Load(ResourceName: string): ARTypesDummyClass;
+	static Find(Outer: UObject, ResourceName: string): ARTypesDummyClass;
+	static GetDefaultObject(): ARTypesDummyClass;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ARTypesDummyClass;
+	static C(Other: UObject | any): ARTypesDummyClass;
+}
+
+declare type EHMDTrackingOrigin = 'Floor' | 'Eye' | 'Stage' | 'EHMDTrackingOrigin_MAX';
+declare var EHMDTrackingOrigin : { Floor:'Floor',Eye:'Eye',Stage:'Stage',EHMDTrackingOrigin_MAX:'EHMDTrackingOrigin_MAX', };
+declare type ESpectatorScreenMode = 'Disabled' | 'SingleEyeLetterboxed' | 'Undistorted' | 'Distorted' | 'SingleEye' | 'SingleEyeCroppedToFill' | 'Texture' | 'TexturePlusEye' | 'ESpectatorScreenMode_MAX';
+declare var ESpectatorScreenMode : { Disabled:'Disabled',SingleEyeLetterboxed:'SingleEyeLetterboxed',Undistorted:'Undistorted',Distorted:'Distorted',SingleEye:'SingleEye',SingleEyeCroppedToFill:'SingleEyeCroppedToFill',Texture:'Texture',TexturePlusEye:'TexturePlusEye',ESpectatorScreenMode_MAX:'ESpectatorScreenMode_MAX', };
+declare type EHMDWornState = 'Unknown' | 'Worn' | 'NotWorn' | 'EHMDWornState_MAX';
+declare var EHMDWornState : { Unknown:'Unknown',Worn:'Worn',NotWorn:'NotWorn',EHMDWornState_MAX:'EHMDWornState_MAX', };
+declare type EXRTrackedDeviceType = 'HeadMountedDisplay' | 'Controller' | 'TrackingReference' | 'Other' | 'Invalid' | 'Any' | 'EXRTrackedDeviceType_MAX';
+declare var EXRTrackedDeviceType : { HeadMountedDisplay:'HeadMountedDisplay',Controller:'Controller',TrackingReference:'TrackingReference',Other:'Other',Invalid:'Invalid',Any:'Any',EXRTrackedDeviceType_MAX:'EXRTrackedDeviceType_MAX', };
+declare class HeadMountedDisplayFunctionLibrary extends BlueprintFunctionLibrary { 
+	static Load(ResourceName: string): HeadMountedDisplayFunctionLibrary;
+	static Find(Outer: UObject, ResourceName: string): HeadMountedDisplayFunctionLibrary;
+	static GetDefaultObject(): HeadMountedDisplayFunctionLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HeadMountedDisplayFunctionLibrary;
+	static UpdateExternalTrackingHMDPosition(ExternalTrackingTransform: Transform): void;
+	static SetWorldToMetersScale(WorldContext: UObject,NewScale: number): void;
+	static SetTrackingOrigin(Origin: EHMDTrackingOrigin): void;
+	static SetSpectatorScreenTexture(InTexture: Texture): void;
+	static SetSpectatorScreenModeTexturePlusEyeLayout(EyeRectMin: Vector2D,EyeRectMax: Vector2D,TextureRectMin: Vector2D,TextureRectMax: Vector2D,bDrawEyeFirst: boolean,bClearBlack: boolean,bUseAlpha: boolean): void;
+	static SetSpectatorScreenMode(Mode: ESpectatorScreenMode): void;
+	static SetClippingPlanes(Near: number,Far: number): void;
+	static ResetOrientationAndPosition(Yaw: number,Options: EOrientPositionSelector): void;
+	static IsSpectatorScreenModeControllable(): boolean;
+	static IsInLowPersistenceMode(): boolean;
+	static IsHeadMountedDisplayEnabled(): boolean;
+	static IsHeadMountedDisplayConnected(): boolean;
+	static IsDeviceTracking(XRDeviceId: XRDeviceId): boolean;
+	static HasValidTrackingPosition(): boolean;
+	static GetWorldToMetersScale(WorldContext: UObject): number;
+	static GetVRFocusState(bUseFocus?: boolean,bHasFocus?: boolean): {bUseFocus: boolean, bHasFocus: boolean};
+	static GetTrackingToWorldTransform(WorldContext: UObject): Transform;
+	static GetTrackingSensorParameters(Origin?: Vector,Rotation?: Rotator,LeftFOV?: number,RightFOV?: number,TopFOV?: number,BottomFOV?: number,Distance?: number,NearPlane?: number,FarPlane?: number,IsActive?: boolean,index?: number): {Origin: Vector, Rotation: Rotator, LeftFOV: number, RightFOV: number, TopFOV: number, BottomFOV: number, Distance: number, NearPlane: number, FarPlane: number, IsActive: boolean};
+	static GetTrackingOrigin(): EHMDTrackingOrigin;
+	static GetScreenPercentage(): number;
+	static GetPositionalTrackingCameraParameters(CameraOrigin?: Vector,CameraRotation?: Rotator,HFOV?: number,VFOV?: number,CameraDistance?: number,NearPlane?: number,FarPlane?: number): {CameraOrigin: Vector, CameraRotation: Rotator, HFOV: number, VFOV: number, CameraDistance: number, NearPlane: number, FarPlane: number};
+	static GetPixelDensity(): number;
+	static GetOrientationAndPosition(DeviceRotation?: Rotator,DevicePosition?: Vector): {DeviceRotation: Rotator, DevicePosition: Vector};
+	static GetNumOfTrackingSensors(): number;
+	static GetHMDWornState(): EHMDWornState;
+	static GetHMDDeviceName(): string;
+	static GetDeviceWorldPose(WorldContext: UObject,XRDeviceId: XRDeviceId,bIsTracked?: boolean,Orientation?: Rotator,bHasPositionalTracking?: boolean,Position?: Vector): {bIsTracked: boolean, Orientation: Rotator, bHasPositionalTracking: boolean, Position: Vector};
+	static GetDevicePose(XRDeviceId: XRDeviceId,bIsTracked?: boolean,Orientation?: Rotator,bHasPositionalTracking?: boolean,Position?: Vector): {bIsTracked: boolean, Orientation: Rotator, bHasPositionalTracking: boolean, Position: Vector};
+	static EnumerateTrackedDevices(SystemId: string,DeviceType: EXRTrackedDeviceType): XRDeviceId[];
+	static EnableLowPersistenceMode(bEnable: boolean): void;
+	static EnableHMD(bEnable: boolean): boolean;
+	static CalibrateExternalTrackingToHMD(ExternalTrackingTransform: Transform): void;
+	static C(Other: UObject | any): HeadMountedDisplayFunctionLibrary;
+}
+
+declare class MotionTrackedDeviceFunctionLibrary extends BlueprintFunctionLibrary { 
+	static Load(ResourceName: string): MotionTrackedDeviceFunctionLibrary;
+	static Find(Outer: UObject, ResourceName: string): MotionTrackedDeviceFunctionLibrary;
+	static GetDefaultObject(): MotionTrackedDeviceFunctionLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MotionTrackedDeviceFunctionLibrary;
+	static SetIsControllerMotionTrackingEnabledByDefault(Enable: boolean): void;
+	static IsMotionTrackingEnabledForSource(PlayerIndex: number,SourceName: string): boolean;
+	static IsMotionTrackingEnabledForDevice(PlayerIndex: number,Hand: EControllerHand): boolean;
+	static IsMotionTrackingEnabledForComponent(MotionControllerComponent: MotionControllerComponent): boolean;
+	static IsMotionTrackedDeviceCountManagementNecessary(): boolean;
+	static IsMotionSourceTracking(PlayerIndex: number,SourceName: string): boolean;
+	static GetMotionTrackingEnabledControllerCount(): number;
+	static GetMaximumMotionTrackedControllerCount(): number;
+	static GetActiveTrackingSystemName(): string;
+	static EnumerateMotionSources(): string[];
+	static EnableMotionTrackingOfSource(PlayerIndex: number,SourceName: string): boolean;
+	static EnableMotionTrackingOfDevice(PlayerIndex: number,Hand: EControllerHand): boolean;
+	static EnableMotionTrackingForComponent(MotionControllerComponent: MotionControllerComponent): boolean;
+	static DisableMotionTrackingOfSource(PlayerIndex: number,SourceName: string): void;
+	static DisableMotionTrackingOfDevice(PlayerIndex: number,Hand: EControllerHand): void;
+	static DisableMotionTrackingOfControllersForPlayer(PlayerIndex: number): void;
+	static DisableMotionTrackingOfAllControllers(): void;
+	static DisableMotionTrackingForComponent(MotionControllerComponent: MotionControllerComponent): void;
+	static C(Other: UObject | any): MotionTrackedDeviceFunctionLibrary;
 }
 
-declare class FloatChannelKeyProxy extends UObject { 
-	Time: FrameNumber;
-	Value: MovieSceneFloatValue;
-	static Load(ResourceName: string): FloatChannelKeyProxy;
-	static Find(Outer: UObject, ResourceName: string): FloatChannelKeyProxy;
-	static GetDefaultObject(): FloatChannelKeyProxy;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FloatChannelKeyProxy;
-	static C(Other: UObject | any): FloatChannelKeyProxy;
+declare class VRNotificationsComponent extends ActorComponent { 
+	HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate: UnrealEngineMulticastDelegate<() => void>;
+	HMDTrackingInitializedDelegate: UnrealEngineMulticastDelegate<() => void>;
+	HMDRecenteredDelegate: UnrealEngineMulticastDelegate<() => void>;
+	HMDLostDelegate: UnrealEngineMulticastDelegate<() => void>;
+	HMDReconnectedDelegate: UnrealEngineMulticastDelegate<() => void>;
+	HMDConnectCanceledDelegate: UnrealEngineMulticastDelegate<() => void>;
+	HMDPutOnHeadDelegate: UnrealEngineMulticastDelegate<() => void>;
+	HMDRemovedFromHeadDelegate: UnrealEngineMulticastDelegate<() => void>;
+	VRControllerRecenteredDelegate: UnrealEngineMulticastDelegate<() => void>;
+	static Load(ResourceName: string): VRNotificationsComponent;
+	static Find(Outer: UObject, ResourceName: string): VRNotificationsComponent;
+	static GetDefaultObject(): VRNotificationsComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VRNotificationsComponent;
+	static C(Other: UObject | any): VRNotificationsComponent;
 }
 
-declare class K2Node extends EdGraphNode { 
-	static Load(ResourceName: string): K2Node;
-	static Find(Outer: UObject, ResourceName: string): K2Node;
-	static GetDefaultObject(): K2Node;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node;
-	static C(Other: UObject | any): K2Node;
+declare class XRAssetFunctionLibrary extends BlueprintFunctionLibrary { 
+	static Load(ResourceName: string): XRAssetFunctionLibrary;
+	static Find(Outer: UObject, ResourceName: string): XRAssetFunctionLibrary;
+	static GetDefaultObject(): XRAssetFunctionLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): XRAssetFunctionLibrary;
+	static AddNamedDeviceVisualizationComponentBlocking(Target: Actor,SystemName: string,DeviceName: string,bManualAttachment: boolean,RelativeTransform: Transform,XRDeviceId?: XRDeviceId): {XRDeviceId: XRDeviceId, $: PrimitiveComponent};
+	static AddDeviceVisualizationComponentBlocking(Target: Actor,XRDeviceId: XRDeviceId,bManualAttachment: boolean,RelativeTransform: Transform): PrimitiveComponent;
+	static C(Other: UObject | any): XRAssetFunctionLibrary;
 }
 
-declare type EMovieSceneObjectBindingSpace = 'Local' | 'Root' | 'EMovieSceneObjectBindingSpace_MAX';
-declare var EMovieSceneObjectBindingSpace : { Local:'Local',Root:'Root',EMovieSceneObjectBindingSpace_MAX:'EMovieSceneObjectBindingSpace_MAX', };
-declare class MovieSceneObjectBindingID { 
-	SequenceID: number;
-	Space: EMovieSceneObjectBindingSpace;
-	Guid: Guid;
-	clone() : MovieSceneObjectBindingID;
-	static C(Other: UObject | any): MovieSceneObjectBindingID;
+declare class AsyncTask_LoadXRDeviceVisComponent extends BlueprintAsyncActionBase { 
+	OnModelLoaded: UnrealEngineMulticastDelegate<(LoadedComponent: PrimitiveComponent) => void>;
+	OnLoadFailure: UnrealEngineMulticastDelegate<(LoadedComponent: PrimitiveComponent) => void>;
+	SpawnedComponent: PrimitiveComponent;
+	static Load(ResourceName: string): AsyncTask_LoadXRDeviceVisComponent;
+	static Find(Outer: UObject, ResourceName: string): AsyncTask_LoadXRDeviceVisComponent;
+	static GetDefaultObject(): AsyncTask_LoadXRDeviceVisComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AsyncTask_LoadXRDeviceVisComponent;
+	static AddNamedDeviceVisualizationComponentAsync(Target: Actor,SystemName: string,DeviceName: string,bManualAttachment: boolean,RelativeTransform: Transform,XRDeviceId?: XRDeviceId,NewComponent?: PrimitiveComponent): {XRDeviceId: XRDeviceId, NewComponent: PrimitiveComponent, $: AsyncTask_LoadXRDeviceVisComponent};
+	static AddDeviceVisualizationComponentAsync(Target: Actor,XRDeviceId: XRDeviceId,bManualAttachment: boolean,RelativeTransform: Transform,NewComponent?: PrimitiveComponent): {NewComponent: PrimitiveComponent, $: AsyncTask_LoadXRDeviceVisComponent};
+	static C(Other: UObject | any): AsyncTask_LoadXRDeviceVisComponent;
 }
 
-declare class K2Node_GetSequenceBinding extends K2Node { 
-	SourceSequence: SoftObjectPath;
-	Binding: MovieSceneObjectBindingID;
-	static Load(ResourceName: string): K2Node_GetSequenceBinding;
-	static Find(Outer: UObject, ResourceName: string): K2Node_GetSequenceBinding;
-	static GetDefaultObject(): K2Node_GetSequenceBinding;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_GetSequenceBinding;
-	static C(Other: UObject | any): K2Node_GetSequenceBinding;
+declare class CookerStats extends UObject { 
+	Assets: any[];
+	SizeBefore: number;
+	SizeAfter: number;
+	Path: string;
+	static Load(ResourceName: string): CookerStats;
+	static Find(Outer: UObject, ResourceName: string): CookerStats;
+	static GetDefaultObject(): CookerStats;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CookerStats;
+	static C(Other: UObject | any): CookerStats;
 }
 
-declare class GetSequenceBindingGuidMapping { 
-	PinName: string;
-	Guid: Guid;
-	clone() : GetSequenceBindingGuidMapping;
-	static C(Other: UObject | any): GetSequenceBindingGuidMapping;
+declare class LightingBuildInfo extends UObject { 
+	UObject: any;
+	LightingTime: number;
+	UnmappedTexelsPercentage: number;
+	UnmappedTexelsMemory: number;
+	TotalTexelMemory: number;
+	LevelName: string;
+	static Load(ResourceName: string): LightingBuildInfo;
+	static Find(Outer: UObject, ResourceName: string): LightingBuildInfo;
+	static GetDefaultObject(): LightingBuildInfo;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightingBuildInfo;
+	static C(Other: UObject | any): LightingBuildInfo;
 }
 
-declare class K2Node_GetSequenceBindings extends K2Node { 
-	BindingGuids: GetSequenceBindingGuidMapping[];
-	Sequence: MovieSceneSequence;
-	static Load(ResourceName: string): K2Node_GetSequenceBindings;
-	static Find(Outer: UObject, ResourceName: string): K2Node_GetSequenceBindings;
-	static GetDefaultObject(): K2Node_GetSequenceBindings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_GetSequenceBindings;
-	static C(Other: UObject | any): K2Node_GetSequenceBindings;
+declare class PrimitiveStats extends UObject { 
+	UObject: any;
+	Actors: any[];
+	Type: string;
+	Count: number;
+	Sections: number;
+	HWInstances: number;
+	InstSections: number;
+	Triangles: number;
+	InstTriangles: number;
+	ResourceSize: number;
+	VertexColorMem: number;
+	InstVertexColorMem: number;
+	LightsLM: number;
+	LightsOther: number;
+	LightsTotal: number;
+	ObjLightCost: number;
+	LightMapData: number;
+	LMSMResolution: number;
+	RadiusMin: number;
+	RadiusMax: number;
+	RadiusAvg: number;
+	static Load(ResourceName: string): PrimitiveStats;
+	static Find(Outer: UObject, ResourceName: string): PrimitiveStats;
+	static GetDefaultObject(): PrimitiveStats;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PrimitiveStats;
+	static C(Other: UObject | any): PrimitiveStats;
 }
 
-declare class MovieSceneToolsPropertyTrackSettings { 
-	ComponentName: string;
-	PropertyName: string;
-	clone() : MovieSceneToolsPropertyTrackSettings;
-	static C(Other: UObject | any): MovieSceneToolsPropertyTrackSettings;
+declare class StaticMeshLightingInfo extends UObject { 
+	StaticMeshActor: any;
+	StaticMesh: any;
+	LevelName: string;
+	TextureMapping: string;
+	bTextureMapping: boolean;
+	bHasLightmapTexCoords: boolean;
+	StaticLightingResolution: number;
+	TextureLightMapMemoryUsage: number;
+	VertexLightMapMemoryUsage: number;
+	LightMapLightCount: number;
+	TextureShadowMapMemoryUsage: number;
+	VertexShadowMapMemoryUsage: number;
+	ShadowMapLightCount: number;
+	static Load(ResourceName: string): StaticMeshLightingInfo;
+	static Find(Outer: UObject, ResourceName: string): StaticMeshLightingInfo;
+	static GetDefaultObject(): StaticMeshLightingInfo;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshLightingInfo;
+	static C(Other: UObject | any): StaticMeshLightingInfo;
 }
 
-declare class MovieSceneToolsFbxSettings { 
-	FbxPropertyName: string;
-	PropertyPath: MovieSceneToolsPropertyTrackSettings;
-	clone() : MovieSceneToolsFbxSettings;
-	static C(Other: UObject | any): MovieSceneToolsFbxSettings;
+declare class TextureStats extends UObject { 
+	Texture: any;
+	Actors: any[];
+	Type: string;
+	MaxDim: Vector2D;
+	CurrentDim: Vector2D;
+	Format: EPixelFormat;
+	Group: TextureGroup;
+	LODBias: number;
+	CurrentKB: number;
+	FullyLoadedKB: number;
+	NumUses: number;
+	LastTimeRendered: number;
+	Path: string;
+	static Load(ResourceName: string): TextureStats;
+	static Find(Outer: UObject, ResourceName: string): TextureStats;
+	static GetDefaultObject(): TextureStats;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureStats;
+	static C(Other: UObject | any): TextureStats;
 }
 
-declare class MovieSceneToolsProjectSettings extends UObject { 
-	DefaultStartTime: number;
-	DefaultDuration: number;
-	ShotDirectory: string;
-	ShotPrefix: string;
-	FirstShotNumber: any;
-	ShotIncrement: any;
-	ShotNumDigits: any;
-	TakeNumDigits: any;
-	FirstTakeNumber: any;
-	TakeSeparator: string;
-	SubSequenceSeparator: string;
-	FbxSettings: MovieSceneToolsFbxSettings[];
-	static Load(ResourceName: string): MovieSceneToolsProjectSettings;
-	static Find(Outer: UObject, ResourceName: string): MovieSceneToolsProjectSettings;
-	static GetDefaultObject(): MovieSceneToolsProjectSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneToolsProjectSettings;
-	static C(Other: UObject | any): MovieSceneToolsProjectSettings;
+declare class PreviewSceneProfile { 
+	ProfileName: string;
+	bSharedProfile: boolean;
+	bUseSkyLighting: boolean;
+	DirectionalLightIntensity: number;
+	DirectionalLightColor: LinearColor;
+	SkyLightIntensity: number;
+	bRotateLightingRig: boolean;
+	bShowEnvironment: boolean;
+	bShowFloor: boolean;
+	EnvironmentColor: LinearColor;
+	EnvironmentIntensity: number;
+	EnvironmentCubeMap: TextureCube;
+	EnvironmentCubeMapPath: string;
+	bPostProcessingEnabled: boolean;
+	PostProcessingSettings: PostProcessSettings;
+	LightingRigRotation: number;
+	RotationSpeed: number;
+	DirectionalLightRotation: Rotator;
+	clone() : PreviewSceneProfile;
+	static C(Other: UObject | any): PreviewSceneProfile;
 }
 
-declare type EThumbnailQuality = 'Draft' | 'Normal' | 'Best' | 'EThumbnailQuality_MAX';
-declare var EThumbnailQuality : { Draft:'Draft',Normal:'Normal',Best:'Best',EThumbnailQuality_MAX:'EThumbnailQuality_MAX', };
-declare class MovieSceneUserThumbnailSettings extends UObject { 
-	bDrawThumbnails: boolean;
-	bDrawSingleThumbnails: boolean;
-	ThumbnailSize: IntPoint;
-	Quality: EThumbnailQuality;
-	static Load(ResourceName: string): MovieSceneUserThumbnailSettings;
-	static Find(Outer: UObject, ResourceName: string): MovieSceneUserThumbnailSettings;
-	static GetDefaultObject(): MovieSceneUserThumbnailSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneUserThumbnailSettings;
-	static C(Other: UObject | any): MovieSceneUserThumbnailSettings;
+declare class LocalProfiles extends UObject { 
+	Profiles: PreviewSceneProfile[];
+	static Load(ResourceName: string): LocalProfiles;
+	static Find(Outer: UObject, ResourceName: string): LocalProfiles;
+	static GetDefaultObject(): LocalProfiles;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocalProfiles;
+	static C(Other: UObject | any): LocalProfiles;
 }
 
-declare class MovieSceneUserImportFBXSettings extends UObject { 
-	bMatchByNameOnly: boolean;
-	bForceFrontXAxis: boolean;
-	bCreateCameras: boolean;
-	bReduceKeys: boolean;
-	ReduceKeysTolerance: number;
-	static Load(ResourceName: string): MovieSceneUserImportFBXSettings;
-	static Find(Outer: UObject, ResourceName: string): MovieSceneUserImportFBXSettings;
-	static GetDefaultObject(): MovieSceneUserImportFBXSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneUserImportFBXSettings;
-	static C(Other: UObject | any): MovieSceneUserImportFBXSettings;
+declare class SharedProfiles extends UObject { 
+	Profiles: PreviewSceneProfile[];
+	static Load(ResourceName: string): SharedProfiles;
+	static Find(Outer: UObject, ResourceName: string): SharedProfiles;
+	static GetDefaultObject(): SharedProfiles;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SharedProfiles;
+	static C(Other: UObject | any): SharedProfiles;
 }
 
-declare class K2Node_ConstructObjectFromClass extends K2Node { 
-	static Load(ResourceName: string): K2Node_ConstructObjectFromClass;
-	static Find(Outer: UObject, ResourceName: string): K2Node_ConstructObjectFromClass;
-	static GetDefaultObject(): K2Node_ConstructObjectFromClass;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_ConstructObjectFromClass;
-	static C(Other: UObject | any): K2Node_ConstructObjectFromClass;
+declare class AssetViewerSettings extends UObject { 
+	Profiles: PreviewSceneProfile[];
+	static Load(ResourceName: string): AssetViewerSettings;
+	static Find(Outer: UObject, ResourceName: string): AssetViewerSettings;
+	static GetDefaultObject(): AssetViewerSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetViewerSettings;
+	static C(Other: UObject | any): AssetViewerSettings;
 }
 
diff --git a/Examples/Content/Scripts/typings/_part_1_ue.d.ts b/Examples/Content/Scripts/typings/_part_1_ue.d.ts
index 2bd8c98..ca2a497 100644
--- a/Examples/Content/Scripts/typings/_part_1_ue.d.ts
+++ b/Examples/Content/Scripts/typings/_part_1_ue.d.ts
@@ -1,273 +1,349 @@
-declare class K2Node_CreateDragDropOperation extends K2Node_ConstructObjectFromClass { 
-	static Load(ResourceName: string): K2Node_CreateDragDropOperation;
-	static Find(Outer: UObject, ResourceName: string): K2Node_CreateDragDropOperation;
-	static GetDefaultObject(): K2Node_CreateDragDropOperation;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_CreateDragDropOperation;
-	static C(Other: UObject | any): K2Node_CreateDragDropOperation;
-}
-
-declare class K2Node_CreateWidget extends K2Node_ConstructObjectFromClass { 
-	static Load(ResourceName: string): K2Node_CreateWidget;
-	static Find(Outer: UObject, ResourceName: string): K2Node_CreateWidget;
-	static GetDefaultObject(): K2Node_CreateWidget;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_CreateWidget;
-	static C(Other: UObject | any): K2Node_CreateWidget;
-}
-
-declare class AutomatedAssetImportData extends UObject { 
-	GroupName: string;
-	Filenames: string[];
-	DestinationPath: string;
-	FactoryName: string;
-	bReplaceExisting: boolean;
-	bSkipReadOnly: boolean;
-	Factory: Factory;
-	LevelToLoad: string;
-	static Load(ResourceName: string): AutomatedAssetImportData;
-	static Find(Outer: UObject, ResourceName: string): AutomatedAssetImportData;
-	static GetDefaultObject(): AutomatedAssetImportData;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomatedAssetImportData;
-	static C(Other: UObject | any): AutomatedAssetImportData;
-}
-
-declare class AssetImportTask extends UObject { 
-	Filename: string;
-	DestinationPath: string;
-	DestinationName: string;
-	bReplaceExisting: boolean;
-	bAutomated: boolean;
-	bSave: boolean;
-	Options: UObject;
-	ImportedObjectPaths: string[];
-	Result: UObject;
-	static Load(ResourceName: string): AssetImportTask;
-	static Find(Outer: UObject, ResourceName: string): AssetImportTask;
-	static GetDefaultObject(): AssetImportTask;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetImportTask;
-	static C(Other: UObject | any): AssetImportTask;
-}
-
-declare class Factory extends UObject { 
-	bCreateNew: boolean;
-	SupportedClass: UnrealEngineClass;
-	ContextClass: UnrealEngineClass;
-	Formats: string[];
-	bEditAfterNew: boolean;
-	bEditorImport: boolean;
-	bText: boolean;
-	ImportPriority: number;
-	AutomatedImportData: AutomatedAssetImportData;
-	AssetImportTask: AssetImportTask;
-	OverwriteYesOrNoToAllState: number;
-	static Load(ResourceName: string): Factory;
-	static Find(Outer: UObject, ResourceName: string): Factory;
-	static GetDefaultObject(): Factory;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Factory;
-	ScriptFactoryCreateFile(InTask: AssetImportTask): boolean;
-	ScriptFactoryCanImport(Filename: string): boolean;
-	static C(Other: UObject | any): Factory;
-}
-
-declare class SlateVectorArtDataFactory extends Factory { 
-	static Load(ResourceName: string): SlateVectorArtDataFactory;
-	static Find(Outer: UObject, ResourceName: string): SlateVectorArtDataFactory;
-	static GetDefaultObject(): SlateVectorArtDataFactory;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateVectorArtDataFactory;
-	static C(Other: UObject | any): SlateVectorArtDataFactory;
-}
-
-declare class DeveloperSettings extends UObject { 
-	static Load(ResourceName: string): DeveloperSettings;
-	static Find(Outer: UObject, ResourceName: string): DeveloperSettings;
-	static GetDefaultObject(): DeveloperSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DeveloperSettings;
-	static C(Other: UObject | any): DeveloperSettings;
-}
-
-declare type EPropertyBindingPermissionLevel = 'Allow' | 'PreventAndWarn' | 'PreventAndError' | 'EPropertyBindingPermissionLevel_MAX';
-declare var EPropertyBindingPermissionLevel : { Allow:'Allow',PreventAndWarn:'PreventAndWarn',PreventAndError:'PreventAndError',EPropertyBindingPermissionLevel_MAX:'EPropertyBindingPermissionLevel_MAX', };
-declare class WidgetCompilerOptions { 
-	bCookSlowConstructionWidgetTree: boolean;
-	bWidgetSupportsDynamicCreation: boolean;
-	bAllowBlueprintTick: boolean;
-	bAllowBlueprintPaint: boolean;
-	PropertyBindingRule: EPropertyBindingPermissionLevel;
-	Rules: Class[];
-	clone() : WidgetCompilerOptions;
-	static C(Other: UObject | any): WidgetCompilerOptions;
-}
-
-declare class BaseWidgetBlueprint extends Blueprint { 
-	WidgetTree: WidgetTree;
-	static Load(ResourceName: string): BaseWidgetBlueprint;
-	static Find(Outer: UObject, ResourceName: string): BaseWidgetBlueprint;
-	static GetDefaultObject(): BaseWidgetBlueprint;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BaseWidgetBlueprint;
-	static C(Other: UObject | any): BaseWidgetBlueprint;
-}
-
-declare class EditorPropertyPathSegment { 
-	struct: Struct;
-	MemberName: string;
-	MemberGuid: Guid;
-	IsProperty: boolean;
-	clone() : EditorPropertyPathSegment;
-	static C(Other: UObject | any): EditorPropertyPathSegment;
-}
-
-declare class EditorPropertyPath { 
-	Segments: EditorPropertyPathSegment[];
-	clone() : EditorPropertyPath;
-	static C(Other: UObject | any): EditorPropertyPath;
-}
-
-declare type EBindingKind = 'Function' | 'Property' | 'EBindingKind_MAX';
-declare var EBindingKind : { Function:'Function',Property:'Property',EBindingKind_MAX:'EBindingKind_MAX', };
-declare class DelegateEditorBinding { 
-	ObjectName: string;
-	PropertyName: string;
-	FunctionName: string;
-	SourceProperty: string;
-	SourcePath: EditorPropertyPath;
-	MemberGuid: Guid;
-	Kind: EBindingKind;
-	clone() : DelegateEditorBinding;
-	static C(Other: UObject | any): DelegateEditorBinding;
-}
-
-declare class WidgetAnimation_DEPRECATED { 
-	MovieScene: MovieScene;
-	AnimationBindings: WidgetAnimationBinding[];
-	clone() : WidgetAnimation_DEPRECATED;
-	static C(Other: UObject | any): WidgetAnimation_DEPRECATED;
-}
-
-declare type EWidgetSupportsDynamicCreation = 'Default' | 'Yes' | 'No' | 'EWidgetSupportsDynamicCreation_MAX';
-declare var EWidgetSupportsDynamicCreation : { Default:'Default',Yes:'Yes',No:'No',EWidgetSupportsDynamicCreation_MAX:'EWidgetSupportsDynamicCreation_MAX', };
-declare type EWidgetCompileTimeTickPrediction = 'WontTick' | 'OnDemand' | 'WillTick' | 'EWidgetCompileTimeTickPrediction_MAX';
-declare var EWidgetCompileTimeTickPrediction : { WontTick:'WontTick',OnDemand:'OnDemand',WillTick:'WillTick',EWidgetCompileTimeTickPrediction_MAX:'EWidgetCompileTimeTickPrediction_MAX', };
-declare class WidgetBlueprint extends BaseWidgetBlueprint { 
-	Bindings: DelegateEditorBinding[];
-	AnimationData: WidgetAnimation_DEPRECATED[];
-	Animations: WidgetAnimation[];
-	PaletteCategory: string;
-	bForceSlowConstructionPath: boolean;
-	SupportDynamicCreation: EWidgetSupportsDynamicCreation;
-	InclusiveWidgets: number;
-	TickFrequency: EWidgetTickFrequency;
-	TickPrediction: EWidgetCompileTimeTickPrediction;
-	TickPredictionReason: string;
-	PropertyBindings: number;
-	static Load(ResourceName: string): WidgetBlueprint;
-	static Find(Outer: UObject, ResourceName: string): WidgetBlueprint;
-	static GetDefaultObject(): WidgetBlueprint;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetBlueprint;
-	static C(Other: UObject | any): WidgetBlueprint;
-}
-
-declare class DirectoryWidgetCompilerOptions { 
-	Directory: DirectoryPath;
-	IgnoredWidgets: WidgetBlueprint[];
-	Options: WidgetCompilerOptions;
-	clone() : DirectoryWidgetCompilerOptions;
-	static C(Other: UObject | any): DirectoryWidgetCompilerOptions;
-}
-
-declare class DebugResolution { 
-	Width: number;
-	Height: number;
-	Description: string;
-	Color: LinearColor;
-	clone() : DebugResolution;
-	static C(Other: UObject | any): DebugResolution;
-}
-
-declare class UMGEditorProjectSettings extends DeveloperSettings { 
-	DefaultCompilerOptions: WidgetCompilerOptions;
-	DirectoryCompilerOptions: DirectoryWidgetCompilerOptions[];
-	bShowWidgetsFromEngineContent: boolean;
-	bShowWidgetsFromDeveloperContent: boolean;
-	CategoriesToHide: string[];
-	WidgetClassesToHide: SoftClassPath[];
-	DebugResolutions: DebugResolution[];
-	Version: number;
-	bCookSlowConstructionWidgetTree: boolean;
-	bWidgetSupportsDynamicCreation: boolean;
-	static Load(ResourceName: string): UMGEditorProjectSettings;
-	static Find(Outer: UObject, ResourceName: string): UMGEditorProjectSettings;
-	static GetDefaultObject(): UMGEditorProjectSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UMGEditorProjectSettings;
-	static C(Other: UObject | any): UMGEditorProjectSettings;
-}
-
-declare class WidgetBlueprintFactory extends Factory { 
-	BlueprintType: EBlueprintType;
-	ParentClass: UnrealEngineClass;
-	static Load(ResourceName: string): WidgetBlueprintFactory;
-	static Find(Outer: UObject, ResourceName: string): WidgetBlueprintFactory;
-	static GetDefaultObject(): WidgetBlueprintFactory;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetBlueprintFactory;
-	static C(Other: UObject | any): WidgetBlueprintFactory;
-}
-
-declare class WidgetCompilerRule extends UObject { 
-	static Load(ResourceName: string): WidgetCompilerRule;
-	static Find(Outer: UObject, ResourceName: string): WidgetCompilerRule;
-	static GetDefaultObject(): WidgetCompilerRule;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetCompilerRule;
-	static C(Other: UObject | any): WidgetCompilerRule;
-}
-
-declare class WidgetDesignerSettings extends DeveloperSettings { 
-	GridSnapEnabled: boolean;
-	GridSnapSize: number;
-	bLockToPanelOnDragByDefault: boolean;
-	bShowOutlines: boolean;
-	bExecutePreConstructEvent: boolean;
-	bRespectLocks: boolean;
-	static Load(ResourceName: string): WidgetDesignerSettings;
-	static Find(Outer: UObject, ResourceName: string): WidgetDesignerSettings;
-	static GetDefaultObject(): WidgetDesignerSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetDesignerSettings;
-	static C(Other: UObject | any): WidgetDesignerSettings;
-}
-
-declare class BlueprintCallableFunctionRedirect { 
-	ClassName: string;
-	OldFunctionName: string;
-	NewFunctionName: string;
-	BlueprintParamName: string;
-	ClassParamName: string;
-	clone() : BlueprintCallableFunctionRedirect;
-	static C(Other: UObject | any): BlueprintCallableFunctionRedirect;
-}
-
-declare class EdGraphSchema_K2 extends EdGraphSchema { 
-	EditoronlyBPFunctionRedirects: BlueprintCallableFunctionRedirect[];
-	static Load(ResourceName: string): EdGraphSchema_K2;
-	static Find(Outer: UObject, ResourceName: string): EdGraphSchema_K2;
-	static GetDefaultObject(): EdGraphSchema_K2;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdGraphSchema_K2;
-	static C(Other: UObject | any): EdGraphSchema_K2;
-}
-
-declare class WidgetGraphSchema extends EdGraphSchema_K2 { 
-	static Load(ResourceName: string): WidgetGraphSchema;
-	static Find(Outer: UObject, ResourceName: string): WidgetGraphSchema;
-	static GetDefaultObject(): WidgetGraphSchema;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetGraphSchema;
-	static C(Other: UObject | any): WidgetGraphSchema;
+declare class PropertyEntry { 
+	Property: EMaterialProperty;
+	bUseCustomSize: boolean;
+	CustomSize: IntPoint;
+	bUseConstantValue: boolean;
+	ConstantValue: number;
+	clone() : PropertyEntry;
+	static C(Other: UObject | any): PropertyEntry;
+}
+
+declare class MaterialOptions extends UObject { 
+	Properties: PropertyEntry[];
+	TextureSize: IntPoint;
+	LODIndices: number[];
+	bUseMeshData: boolean;
+	bUseSpecificUVIndex: boolean;
+	TextureCoordinateIndex: number;
+	static Load(ResourceName: string): MaterialOptions;
+	static Find(Outer: UObject, ResourceName: string): MaterialOptions;
+	static GetDefaultObject(): MaterialOptions;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialOptions;
+	static C(Other: UObject | any): MaterialOptions;
+}
+
+declare class AssetBakeOptions extends UObject { 
+	static Load(ResourceName: string): AssetBakeOptions;
+	static Find(Outer: UObject, ResourceName: string): AssetBakeOptions;
+	static GetDefaultObject(): AssetBakeOptions;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetBakeOptions;
+	static C(Other: UObject | any): AssetBakeOptions;
+}
+
+declare type EMaterialBakeMethod = 'IndividualMaterial' | 'AtlasMaterial' | 'BinnedMaterial' | 'EMaterialBakeMethod_MAX';
+declare var EMaterialBakeMethod : { IndividualMaterial:'IndividualMaterial',AtlasMaterial:'AtlasMaterial',BinnedMaterial:'BinnedMaterial',EMaterialBakeMethod_MAX:'EMaterialBakeMethod_MAX', };
+declare class MaterialMergeOptions extends UObject { 
+	Method: EMaterialBakeMethod;
+	BlendMode: EBlendMode;
+	static Load(ResourceName: string): MaterialMergeOptions;
+	static Find(Outer: UObject, ResourceName: string): MaterialMergeOptions;
+	static GetDefaultObject(): MaterialMergeOptions;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialMergeOptions;
+	static C(Other: UObject | any): MaterialMergeOptions;
+}
+
+declare class MaterialInstanceConstant extends MaterialInstance { 
+	ParameterStateId: Guid;
+	static Load(ResourceName: string): MaterialInstanceConstant;
+	static Find(Outer: UObject, ResourceName: string): MaterialInstanceConstant;
+	static GetDefaultObject(): MaterialInstanceConstant;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialInstanceConstant;
+	K2_GetVectorParameterValue(ParameterName: string): LinearColor;
+	K2_GetTextureParameterValue(ParameterName: string): Texture;
+	K2_GetScalarParameterValue(ParameterName: string): number;
+	static C(Other: UObject | any): MaterialInstanceConstant;
+	ClearAllMaterialInstanceParameters(): void;
+	GetMaterialInstanceScalarParameterValue(ParameterName: string): number;
+	GetMaterialInstanceStaticSwitchParameterValue(ParameterName: string): boolean;
+	GetMaterialInstanceTextureParameterValue(ParameterName: string): Texture;
+	GetMaterialInstanceVectorParameterValue(ParameterName: string): LinearColor;
+	SetMaterialInstanceParent(NewParent: MaterialInterface): void;
+	SetMaterialInstanceScalarParameterValue(ParameterName: string,Value: number): boolean;
+	SetMaterialInstanceTextureParameterValue(ParameterName: string,Value: Texture): boolean;
+	SetMaterialInstanceVectorParameterValue(ParameterName: string,Value: LinearColor): boolean;
+	UpdateMaterialInstance(): void;
+	static ClearAllMaterialInstanceParameters(Instance: MaterialInstanceConstant): void;
+	static GetMaterialInstanceScalarParameterValue(Instance: MaterialInstanceConstant,ParameterName: string): number;
+	static GetMaterialInstanceStaticSwitchParameterValue(Instance: MaterialInstanceConstant,ParameterName: string): boolean;
+	static GetMaterialInstanceTextureParameterValue(Instance: MaterialInstanceConstant,ParameterName: string): Texture;
+	static GetMaterialInstanceVectorParameterValue(Instance: MaterialInstanceConstant,ParameterName: string): LinearColor;
+	static SetMaterialInstanceParent(Instance: MaterialInstanceConstant,NewParent: MaterialInterface): void;
+	static SetMaterialInstanceScalarParameterValue(Instance: MaterialInstanceConstant,ParameterName: string,Value: number): boolean;
+	static SetMaterialInstanceTextureParameterValue(Instance: MaterialInstanceConstant,ParameterName: string,Value: Texture): boolean;
+	static SetMaterialInstanceVectorParameterValue(Instance: MaterialInstanceConstant,ParameterName: string,Value: LinearColor): boolean;
+	static UpdateMaterialInstance(Instance: MaterialInstanceConstant): void;
+}
+
+declare class MaterialEditingLibrary extends BlueprintFunctionLibrary { 
+	static Load(ResourceName: string): MaterialEditingLibrary;
+	static Find(Outer: UObject, ResourceName: string): MaterialEditingLibrary;
+	static GetDefaultObject(): MaterialEditingLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialEditingLibrary;
+	static UpdateMaterialInstance(Instance: MaterialInstanceConstant): void;
+	static UpdateMaterialFunction(MaterialFunction: MaterialFunctionInterface,PreviewMaterial: Material): void;
+	static SetMaterialUsage(Material: Material,Usage: EMaterialUsage,bNeedsRecompile?: boolean): {bNeedsRecompile: boolean, $: boolean};
+	static SetMaterialInstanceVectorParameterValue(Instance: MaterialInstanceConstant,ParameterName: string,Value: LinearColor): boolean;
+	static SetMaterialInstanceTextureParameterValue(Instance: MaterialInstanceConstant,ParameterName: string,Value: Texture): boolean;
+	static SetMaterialInstanceScalarParameterValue(Instance: MaterialInstanceConstant,ParameterName: string,Value: number): boolean;
+	static SetMaterialInstanceParent(Instance: MaterialInstanceConstant,NewParent: MaterialInterface): void;
+	static RecompileMaterial(Material: Material): void;
+	static LayoutMaterialFunctionExpressions(MaterialFunction: MaterialFunction): void;
+	static LayoutMaterialExpressions(Material: Material): void;
+	static HasMaterialUsage(Material: Material,Usage: EMaterialUsage): boolean;
+	GetVectorParameterSource(Material: MaterialInterface,ParameterName: string,ParameterSource?: SoftObjectPath): {ParameterSource: SoftObjectPath, $: boolean};
+	static GetVectorParameterNames(Material: MaterialInterface,ParameterNames?: string[]): {ParameterNames: string[]};
+	GetTextureParameterSource(Material: MaterialInterface,ParameterName: string,ParameterSource?: SoftObjectPath): {ParameterSource: SoftObjectPath, $: boolean};
+	static GetTextureParameterNames(Material: MaterialInterface,ParameterNames?: string[]): {ParameterNames: string[]};
+	GetStaticSwitchParameterSource(Material: MaterialInterface,ParameterName: string,ParameterSource?: SoftObjectPath): {ParameterSource: SoftObjectPath, $: boolean};
+	static GetStaticSwitchParameterNames(Material: MaterialInterface,ParameterNames?: string[]): {ParameterNames: string[]};
+	GetScalarParameterSource(Material: MaterialInterface,ParameterName: string,ParameterSource?: SoftObjectPath): {ParameterSource: SoftObjectPath, $: boolean};
+	static GetScalarParameterNames(Material: MaterialInterface,ParameterNames?: string[]): {ParameterNames: string[]};
+	static GetNumMaterialExpressionsInFunction(MaterialFunction: MaterialFunction): number;
+	static GetNumMaterialExpressions(Material: Material): number;
+	static GetMaterialInstanceVectorParameterValue(Instance: MaterialInstanceConstant,ParameterName: string): LinearColor;
+	static GetMaterialInstanceTextureParameterValue(Instance: MaterialInstanceConstant,ParameterName: string): Texture;
+	static GetMaterialInstanceStaticSwitchParameterValue(Instance: MaterialInstanceConstant,ParameterName: string): boolean;
+	static GetMaterialInstanceScalarParameterValue(Instance: MaterialInstanceConstant,ParameterName: string): number;
+	static GetMaterialDefaultVectorParameterValue(Material: Material,ParameterName: string): LinearColor;
+	static GetMaterialDefaultTextureParameterValue(Material: Material,ParameterName: string): Texture;
+	static GetMaterialDefaultStaticSwitchParameterValue(Material: Material,ParameterName: string): boolean;
+	static GetMaterialDefaultScalarParameterValue(Material: Material,ParameterName: string): number;
+	static GetChildInstances(Parent: MaterialInterface,ChildInstances?: AssetData[]): {ChildInstances: AssetData[]};
+	static DeleteMaterialExpressionInFunction(MaterialFunction: MaterialFunction,Expression: MaterialExpression): void;
+	static DeleteMaterialExpression(Material: Material,Expression: MaterialExpression): void;
+	static DeleteAllMaterialExpressionsInFunction(MaterialFunction: MaterialFunction): void;
+	static DeleteAllMaterialExpressions(Material: Material): void;
+	static CreateMaterialExpressionInFunction(MaterialFunction: MaterialFunction,ExpressionClass: UnrealEngineClass,NodePosX: number,NodePosY: number): MaterialExpression;
+	static CreateMaterialExpression(Material: Material,ExpressionClass: UnrealEngineClass,NodePosX: number,NodePosY: number): MaterialExpression;
+	static ConnectMaterialProperty(FromExpression: MaterialExpression,FromOutputName: string,Property: EMaterialProperty): boolean;
+	static ConnectMaterialExpressions(FromExpression: MaterialExpression,FromOutputName: string,ToExpression: MaterialExpression,ToInputName: string): boolean;
+	static ClearAllMaterialInstanceParameters(Instance: MaterialInstanceConstant): void;
+	static C(Other: UObject | any): MaterialEditingLibrary;
+}
+
+declare class MaterialEditorSettings extends UObject { 
+	MaliOfflineCompilerPath: FilePath;
+	static Load(ResourceName: string): MaterialEditorSettings;
+	static Find(Outer: UObject, ResourceName: string): MaterialEditorSettings;
+	static GetDefaultObject(): MaterialEditorSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialEditorSettings;
+	static C(Other: UObject | any): MaterialEditorSettings;
+}
+
+declare class CurveEditorFilterBase extends UObject { 
+	static Load(ResourceName: string): CurveEditorFilterBase;
+	static Find(Outer: UObject, ResourceName: string): CurveEditorFilterBase;
+	static GetDefaultObject(): CurveEditorFilterBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveEditorFilterBase;
+	static C(Other: UObject | any): CurveEditorFilterBase;
+}
+
+declare class CurveEditorBakeFilter extends CurveEditorFilterBase { 
+	bUseSnapRateForInterval: boolean;
+	BakeInterval: number;
+	static Load(ResourceName: string): CurveEditorBakeFilter;
+	static Find(Outer: UObject, ResourceName: string): CurveEditorBakeFilter;
+	static GetDefaultObject(): CurveEditorBakeFilter;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveEditorBakeFilter;
+	static C(Other: UObject | any): CurveEditorBakeFilter;
+}
+
+declare class CurveEditorEulerFilter extends CurveEditorFilterBase { 
+	static Load(ResourceName: string): CurveEditorEulerFilter;
+	static Find(Outer: UObject, ResourceName: string): CurveEditorEulerFilter;
+	static GetDefaultObject(): CurveEditorEulerFilter;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveEditorEulerFilter;
+	static C(Other: UObject | any): CurveEditorEulerFilter;
+}
+
+declare class CurveEditorKeyProxy extends Interface { 
+	static Load(ResourceName: string): CurveEditorKeyProxy;
+	static Find(Outer: UObject, ResourceName: string): CurveEditorKeyProxy;
+	static GetDefaultObject(): CurveEditorKeyProxy;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveEditorKeyProxy;
+	static C(Other: UObject | any): CurveEditorKeyProxy;
+}
+
+declare class CurveEditorReduceFilter extends CurveEditorFilterBase { 
+	Tolerance: number;
+	static Load(ResourceName: string): CurveEditorReduceFilter;
+	static Find(Outer: UObject, ResourceName: string): CurveEditorReduceFilter;
+	static GetDefaultObject(): CurveEditorReduceFilter;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveEditorReduceFilter;
+	static C(Other: UObject | any): CurveEditorReduceFilter;
+}
+
+declare type ECurveEditorTangentVisibility = 'AllTangents' | 'SelectedKeys' | 'NoTangents' | 'ECurveEditorTangentVisibility_MAX';
+declare var ECurveEditorTangentVisibility : { AllTangents:'AllTangents',SelectedKeys:'SelectedKeys',NoTangents:'NoTangents',ECurveEditorTangentVisibility_MAX:'ECurveEditorTangentVisibility_MAX', };
+declare type ECurveEditorZoomPosition = 'CurrentTime' | 'MousePosition' | 'ECurveEditorZoomPosition_MAX';
+declare var ECurveEditorZoomPosition : { CurrentTime:'CurrentTime',MousePosition:'MousePosition',ECurveEditorZoomPosition_MAX:'ECurveEditorZoomPosition_MAX', };
+declare class CurveEditorSettings extends UObject { 
+	bAutoFrameCurveEditor: boolean;
+	bShowCurveEditorCurveToolTips: boolean;
+	TangentVisibility: ECurveEditorTangentVisibility;
+	ZoomPosition: ECurveEditorZoomPosition;
+	static Load(ResourceName: string): CurveEditorSettings;
+	static Find(Outer: UObject, ResourceName: string): CurveEditorSettings;
+	static GetDefaultObject(): CurveEditorSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveEditorSettings;
+	static C(Other: UObject | any): CurveEditorSettings;
+}
+
+declare class RichCurveKeyProxy extends UObject { 
+	Value: RichCurveKey;
+	static Load(ResourceName: string): RichCurveKeyProxy;
+	static Find(Outer: UObject, ResourceName: string): RichCurveKeyProxy;
+	static GetDefaultObject(): RichCurveKeyProxy;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RichCurveKeyProxy;
+	static C(Other: UObject | any): RichCurveKeyProxy;
+}
+
+declare class CameraRig_Crane extends Actor { 
+	CranePitch: number;
+	CraneYaw: number;
+	CraneArmLength: number;
+	bLockMountPitch: boolean;
+	bLockMountYaw: boolean;
+	TransformComponent: SceneComponent;
+	CraneYawControl: SceneComponent;
+	CranePitchControl: SceneComponent;
+	CraneCameraMount: SceneComponent;
+	PreviewMesh_CraneArm: StaticMeshComponent;
+	PreviewMesh_CraneBase: StaticMeshComponent;
+	PreviewMesh_CraneMount: StaticMeshComponent;
+	PreviewMesh_CraneCounterWeight: StaticMeshComponent;
+	static GetDefaultObject(): CameraRig_Crane;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraRig_Crane;
+	static C(Other: UObject | any): CameraRig_Crane;
+}
+
+declare class CameraRig_Rail extends Actor { 
+	CurrentPositionOnRail: number;
+	bLockOrientationToRail: boolean;
+	TransformComponent: SceneComponent;
+	RailSplineComponent: SplineComponent;
+	RailCameraMount: SceneComponent;
+	PreviewMesh_Rail: SplineMeshComponent;
+	PreviewRailMeshSegments: SplineMeshComponent[];
+	PreviewRailStaticMesh: StaticMesh;
+	PreviewMesh_Mount: StaticMeshComponent;
+	static GetDefaultObject(): CameraRig_Rail;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraRig_Rail;
+	static C(Other: UObject | any): CameraRig_Rail;
+}
+
+declare class CameraLookatTrackingSettings { 
+	bEnableLookAtTracking: boolean;
+	bDrawDebugLookAtTrackingPosition: boolean;
+	LookAtTrackingInterpSpeed: number;
+	ActorToTrack: Actor;
+	RelativeOffset: Vector;
+	bAllowRoll: boolean;
+	clone() : CameraLookatTrackingSettings;
+	static C(Other: UObject | any): CameraLookatTrackingSettings;
+}
+
+declare class CameraFilmbackSettings { 
+	SensorWidth: number;
+	SensorHeight: number;
+	SensorAspectRatio: number;
+	clone() : CameraFilmbackSettings;
+	static C(Other: UObject | any): CameraFilmbackSettings;
+}
+
+declare class CameraLensSettings { 
+	MinFocalLength: number;
+	MaxFocalLength: number;
+	MinFStop: number;
+	MaxFStop: number;
+	MinimumFocusDistance: number;
+	DiaphragmBladeCount: number;
+	clone() : CameraLensSettings;
+	static C(Other: UObject | any): CameraLensSettings;
+}
+
+declare type ECameraFocusMethod = 'None' | 'Manual' | 'Tracking' | 'ECameraFocusMethod_MAX';
+declare var ECameraFocusMethod : { None:'None',Manual:'Manual',Tracking:'Tracking',ECameraFocusMethod_MAX:'ECameraFocusMethod_MAX', };
+declare class CameraTrackingFocusSettings { 
+	ActorToTrack: Actor;
+	RelativeOffset: Vector;
+	bDrawDebugTrackingFocusPoint: boolean;
+	clone() : CameraTrackingFocusSettings;
+	static C(Other: UObject | any): CameraTrackingFocusSettings;
+}
+
+declare class CameraFocusSettings { 
+	FocusMethod: ECameraFocusMethod;
+	ManualFocusDistance: number;
+	TrackingFocusSettings: CameraTrackingFocusSettings;
+	bDrawDebugFocusPlane: boolean;
+	DebugFocusPlaneColor: Color;
+	bSmoothFocusChanges: boolean;
+	FocusSmoothingInterpSpeed: number;
+	FocusOffset: number;
+	clone() : CameraFocusSettings;
+	static C(Other: UObject | any): CameraFocusSettings;
+}
+
+declare class NamedFilmbackPreset { 
+	Name: string;
+	FilmbackSettings: CameraFilmbackSettings;
+	clone() : NamedFilmbackPreset;
+	static C(Other: UObject | any): NamedFilmbackPreset;
 }
 
-declare class WidgetSlotPair extends UObject { 
-	WidgetName: string;
-	SlotPropertyNames: string[];
-	SlotPropertyValues: string[];
-	static Load(ResourceName: string): WidgetSlotPair;
-	static Find(Outer: UObject, ResourceName: string): WidgetSlotPair;
-	static GetDefaultObject(): WidgetSlotPair;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetSlotPair;
-	static C(Other: UObject | any): WidgetSlotPair;
+declare class NamedLensPreset { 
+	Name: string;
+	LensSettings: CameraLensSettings;
+	clone() : NamedLensPreset;
+	static C(Other: UObject | any): NamedLensPreset;
+}
+
+declare class CineCameraComponent extends CameraComponent { 
+	FilmbackSettings: CameraFilmbackSettings;
+	LensSettings: CameraLensSettings;
+	FocusSettings: CameraFocusSettings;
+	CurrentFocalLength: number;
+	CurrentAperture: number;
+	CurrentFocusDistance: number;
+	CurrentHorizontalFOV: number;
+	FocusPlaneVisualizationMesh: StaticMesh;
+	FocusPlaneVisualizationMaterial: Material;
+	DebugFocusPlaneComponent: StaticMeshComponent;
+	DebugFocusPlaneMID: MaterialInstanceDynamic;
+	FilmbackPresets: NamedFilmbackPreset[];
+	LensPresets: NamedLensPreset[];
+	DefaultFilmbackPresetName: string;
+	DefaultLensPresetName: string;
+	DefaultLensFocalLength: number;
+	DefaultLensFStop: number;
+	static Load(ResourceName: string): CineCameraComponent;
+	static Find(Outer: UObject, ResourceName: string): CineCameraComponent;
+	static GetDefaultObject(): CineCameraComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CineCameraComponent;
+	SetLensPresetByName(InPresetName: string): void;
+	SetFilmbackPresetByName(InPresetName: string): void;
+	GetVerticalFieldOfView(): number;
+	GetLensPresetName(): string;
+	GetHorizontalFieldOfView(): number;
+	GetFilmbackPresetName(): string;
+	static C(Other: UObject | any): CineCameraComponent;
+}
+
+declare class CineCameraActor extends CameraActor { 
+	LookatTrackingSettings: CameraLookatTrackingSettings;
+	static GetDefaultObject(): CineCameraActor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CineCameraActor;
+	GetCineCameraComponent(): CineCameraComponent;
+	static C(Other: UObject | any): CineCameraActor;
+}
+
+declare class AudioGenerator extends UObject { 
+	static Load(ResourceName: string): AudioGenerator;
+	static Find(Outer: UObject, ResourceName: string): AudioGenerator;
+	static GetDefaultObject(): AudioGenerator;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioGenerator;
+	static C(Other: UObject | any): AudioGenerator;
 }
 
 declare class AudioMixerBlueprintLibrary extends BlueprintFunctionLibrary { 
@@ -276,13 +352,17 @@ declare class AudioMixerBlueprintLibrary extends BlueprintFunctionLibrary {
 	static GetDefaultObject(): AudioMixerBlueprintLibrary;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioMixerBlueprintLibrary;
 	static StopRecordingOutput(WorldContextObject: UObject,ExportType: EAudioRecordingExportType,Name: string,Path: string,SubmixToRecord: SoundSubmix,ExistingSoundWaveToOverwrite: SoundWave): SoundWave;
+	static StopAnalyzingOutput(WorldContextObject: UObject,SubmixToStopAnalyzing: SoundSubmix): void;
 	static StartRecordingOutput(WorldContextObject: UObject,ExpectedDuration: number,SubmixToRecord: SoundSubmix): void;
+	static StartAnalyzingOutput(WorldContextObject: UObject,SubmixToAnalyze: SoundSubmix,FFTSize: EFFTSize,InterpolationMethod: EFFTPeakInterpolationMethod,WindowType: EFFTWindowType,HopSize: number): void;
 	static SetBypassSourceEffectChainEntry(WorldContextObject: UObject,PresetChain: SoundEffectSourcePresetChain,EntryIndex: number,bBypassed: boolean): void;
 	static ResumeRecordingOutput(WorldContextObject: UObject,SubmixToPause: SoundSubmix): void;
 	static RemoveSourceEffectFromPresetChain(WorldContextObject: UObject,PresetChain: SoundEffectSourcePresetChain,EntryIndex: number): void;
 	static RemoveMasterSubmixEffect(WorldContextObject: UObject,SubmixEffectPreset: SoundEffectSubmixPreset): void;
 	static PauseRecordingOutput(WorldContextObject: UObject,SubmixToPause: SoundSubmix): void;
+	static GetPhaseForFrequencies(WorldContextObject: UObject,Frequencies: number[],Phases?: number[],SubmixToAnalyze?: SoundSubmix): {Phases: number[]};
 	static GetNumberOfEntriesInSourceEffectChain(WorldContextObject: UObject,PresetChain: SoundEffectSourcePresetChain): number;
+	static GetMagnitudeForFrequencies(WorldContextObject: UObject,Frequencies: number[],Magnitudes?: number[],SubmixToAnalyze?: SoundSubmix): {Magnitudes: number[]};
 	static ClearMasterSubmixEffects(WorldContextObject: UObject): void;
 	static AddSourceEffectToPresetChain(WorldContextObject: UObject,PresetChain: SoundEffectSourcePresetChain,Entry: SourceEffectChainEntry): void;
 	static AddMasterSubmixEffect(WorldContextObject: UObject,SubmixEffectPreset: SoundEffectSubmixPreset): void;
@@ -374,6 +454,35 @@ declare class SubmixEffectReverbPreset extends SoundEffectSubmixPreset {
 	static C(Other: UObject | any): SubmixEffectReverbPreset;
 }
 
+declare class SubmixEffectReverbFastSettings { 
+	Density: number;
+	Diffusion: number;
+	Gain: number;
+	GainHF: number;
+	DecayTime: number;
+	DecayHFRatio: number;
+	ReflectionsGain: number;
+	ReflectionsDelay: number;
+	LateGain: number;
+	LateDelay: number;
+	AirAbsorptionGainHF: number;
+	WetLevel: number;
+	DryLevel: number;
+	clone() : SubmixEffectReverbFastSettings;
+	static C(Other: UObject | any): SubmixEffectReverbFastSettings;
+}
+
+declare class SubmixEffectReverbFastPreset extends SoundEffectSubmixPreset { 
+	Settings: SubmixEffectReverbFastSettings;
+	static Load(ResourceName: string): SubmixEffectReverbFastPreset;
+	static Find(Outer: UObject, ResourceName: string): SubmixEffectReverbFastPreset;
+	static GetDefaultObject(): SubmixEffectReverbFastPreset;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubmixEffectReverbFastPreset;
+	SetSettingsWithReverbEffect(InReverbEffect: ReverbEffect,WetLevel: number,DryLevel: number): void;
+	SetSettings(InSettings: SubmixEffectReverbFastSettings): void;
+	static C(Other: UObject | any): SubmixEffectReverbFastPreset;
+}
+
 declare class SoundWaveProcedural extends SoundWave { 
 	static Load(ResourceName: string): SoundWaveProcedural;
 	static Find(Outer: UObject, ResourceName: string): SoundWaveProcedural;
@@ -382,14 +491,6 @@ declare class SoundWaveProcedural extends SoundWave {
 	static C(Other: UObject | any): SoundWaveProcedural;
 }
 
-declare class SynthSound extends SoundWaveProcedural { 
-	static Load(ResourceName: string): SynthSound;
-	static Find(Outer: UObject, ResourceName: string): SynthSound;
-	static GetDefaultObject(): SynthSound;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SynthSound;
-	static C(Other: UObject | any): SynthSound;
-}
-
 declare class SynthComponent extends SceneComponent { 
 	bAutoDestroy: boolean;
 	bStopWhenOwnerDestroyed: boolean;
@@ -399,11 +500,13 @@ declare class SynthComponent extends SceneComponent {
 	AttenuationSettings: SoundAttenuation;
 	AttenuationOverrides: SoundAttenuationSettings;
 	ConcurrencySettings: SoundConcurrency;
+	ConcurrencySet: any;
 	SoundClass: SoundClass;
 	SourceEffectChain: SoundEffectSourcePresetChain;
 	SoundSubmix: SoundSubmix;
 	SoundSubmixSends: SoundSubmixSendInfo[];
 	BusSends: SoundSourceBusSendInfo[];
+	Modulation: SoundModulation;
 	PreEffectBusSends: SoundSourceBusSendInfo[];
 	bIsUISound: boolean;
 	bIsPreviewSound: boolean;
@@ -424,6 +527,15 @@ declare class SynthComponent extends SceneComponent {
 	static C(Other: UObject | any): SynthComponent;
 }
 
+declare class SynthSound extends SoundWaveProcedural { 
+	OwningSynthComponent: SynthComponent;
+	static Load(ResourceName: string): SynthSound;
+	static Find(Outer: UObject, ResourceName: string): SynthSound;
+	static GetDefaultObject(): SynthSound;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SynthSound;
+	static C(Other: UObject | any): SynthSound;
+}
+
 declare type EHardwareClass = 'Unspecified' | 'Desktop' | 'Mobile' | 'EHardwareClass_MAX';
 declare var EHardwareClass : { Unspecified:'Unspecified',Desktop:'Desktop',Mobile:'Mobile',EHardwareClass_MAX:'EHardwareClass_MAX', };
 declare type EGraphicsPreset = 'Unspecified' | 'Maximum' | 'Scalable' | 'EGraphicsPreset_MAX';
@@ -602,6 +714,7 @@ declare class Border extends ContentWidget {
 	BrushColor: LinearColor;
 	BrushColorDelegate: UnrealEngineDelegate<() => LinearColor>;
 	DesiredSizeScale: Vector2D;
+	bFlipForRightToLeftFlowDirection: boolean;
 	OnMouseButtonDownEvent: UnrealEngineDelegate<(MyGeometry: Geometry, MouseEvent: UPointerEvent) => EventReply>;
 	OnMouseButtonUpEvent: UnrealEngineDelegate<(MyGeometry: Geometry, MouseEvent: UPointerEvent) => EventReply>;
 	OnMouseMoveEvent: UnrealEngineDelegate<(MyGeometry: Geometry, MouseEvent: UPointerEvent) => EventReply>;
@@ -636,8 +749,8 @@ declare class BrushBinding extends PropertyBinding {
 
 declare type EButtonClickMethod = 'DownAndUp' | 'MouseDown' | 'MouseUp' | 'PreciseClick' | 'EButtonClickMethod_MAX';
 declare var EButtonClickMethod : { DownAndUp:'DownAndUp',MouseDown:'MouseDown',MouseUp:'MouseUp',PreciseClick:'PreciseClick',EButtonClickMethod_MAX:'EButtonClickMethod_MAX', };
-declare type EButtonTouchMethod = 'DownAndUp' | 'PreciseTap' | 'EButtonTouchMethod_MAX';
-declare var EButtonTouchMethod : { DownAndUp:'DownAndUp',PreciseTap:'PreciseTap',EButtonTouchMethod_MAX:'EButtonTouchMethod_MAX', };
+declare type EButtonTouchMethod = 'DownAndUp' | 'Down' | 'PreciseTap' | 'EButtonTouchMethod_MAX';
+declare var EButtonTouchMethod : { DownAndUp:'DownAndUp',Down:'Down',PreciseTap:'PreciseTap',EButtonTouchMethod_MAX:'EButtonTouchMethod_MAX', };
 declare type EButtonPressMethod = 'DownAndUp' | 'ButtonPress' | 'ButtonRelease' | 'EButtonPressMethod_MAX';
 declare var EButtonPressMethod : { DownAndUp:'DownAndUp',ButtonPress:'ButtonPress',ButtonRelease:'ButtonRelease',EButtonPressMethod_MAX:'EButtonPressMethod_MAX', };
 declare class Button extends ContentWidget { 
@@ -786,6 +899,8 @@ declare class TableRowStyle extends SlateWidgetStyle {
 	DropIndicator_Above: SlateBrush;
 	DropIndicator_Onto: SlateBrush;
 	DropIndicator_Below: SlateBrush;
+	ActiveHighlightedBrush: SlateBrush;
+	InactiveHighlightedBrush: SlateBrush;
 	clone() : TableRowStyle;
 	static C(Other: UObject | any): TableRowStyle;
 }
@@ -812,9 +927,11 @@ declare class ComboBoxString extends Widget {
 	static GetDefaultObject(): ComboBoxString;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ComboBoxString;
 	SetSelectedOption(Option: string): void;
+	SetSelectedIndex(index: number): void;
 	RemoveOption(Option: string): boolean;
 	RefreshOptions(): void;
 	GetSelectedOption(): string;
+	GetSelectedIndex(): number;
 	GetOptionCount(): number;
 	GetOptionAtIndex(index: number): string;
 	FindOptionIndex(Option: string): number;
@@ -826,8 +943,14 @@ declare class ComboBoxString extends Widget {
 
 declare type EDynamicBoxType = 'Horizontal' | 'Vertical' | 'Wrap' | 'Overlay' | 'EDynamicBoxType_MAX';
 declare var EDynamicBoxType : { Horizontal:'Horizontal',Vertical:'Vertical',Wrap:'Wrap',Overlay:'Overlay',EDynamicBoxType_MAX:'EDynamicBoxType_MAX', };
-declare class DynamicEntryBox extends Widget { 
-	NumDesignerPreviewEntries: number;
+declare class UserWidgetPool { 
+	ActiveWidgets: UserWidget[];
+	InactiveWidgets: UserWidget[];
+	clone() : UserWidgetPool;
+	static C(Other: UObject | any): UserWidgetPool;
+}
+
+declare class DynamicEntryBoxBase extends Widget { 
 	EntryBoxType: EDynamicBoxType;
 	EntrySpacing: Vector2D;
 	SpacingPattern: Vector2D[];
@@ -835,16 +958,26 @@ declare class DynamicEntryBox extends Widget {
 	EntryHorizontalAlignment: EHorizontalAlignment;
 	EntryVerticalAlignment: EVerticalAlignment;
 	MaxElementSize: number;
+	EntryWidgetPool: UserWidgetPool;
+	static Load(ResourceName: string): DynamicEntryBoxBase;
+	static Find(Outer: UObject, ResourceName: string): DynamicEntryBoxBase;
+	static GetDefaultObject(): DynamicEntryBoxBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DynamicEntryBoxBase;
+	SetEntrySpacing(InEntrySpacing: Vector2D): void;
+	GetNumEntries(): number;
+	GetAllEntries(): UserWidget[];
+	static C(Other: UObject | any): DynamicEntryBoxBase;
+}
+
+declare class DynamicEntryBox extends DynamicEntryBoxBase { 
+	NumDesignerPreviewEntries: number;
 	EntryWidgetClass: UnrealEngineClass;
 	static Load(ResourceName: string): DynamicEntryBox;
 	static Find(Outer: UObject, ResourceName: string): DynamicEntryBox;
 	static GetDefaultObject(): DynamicEntryBox;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DynamicEntryBox;
-	SetEntrySpacing(InEntrySpacing: Vector2D): void;
 	Reset(bDeleteWidgets: boolean): void;
 	RemoveEntry(EntryWidget: UserWidget): void;
-	GetNumEntries(): number;
-	GetAllEntries(): UserWidget[];
 	BP_CreateEntryOfClass(EntryClass: UnrealEngineClass): UserWidget;
 	BP_CreateEntry(): UserWidget;
 	static C(Other: UObject | any): DynamicEntryBox;
@@ -1007,7 +1140,7 @@ declare class GridPanel extends PanelWidget {
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GridPanel;
 	SetRowFill(ColumnIndex: number,Coefficient: number): void;
 	SetColumnFill(ColumnIndex: number,Coefficient: number): void;
-	AddChildToGrid(Content: Widget): GridSlot;
+	AddChildToGrid(Content: Widget,InRow: number,InColumn: number): GridSlot;
 	static C(Other: UObject | any): GridPanel;
 }
 
@@ -1026,6 +1159,7 @@ declare class UImage extends Widget {
 	BrushDelegate: UnrealEngineDelegate<() => SlateBrush>;
 	ColorAndOpacity: LinearColor;
 	ColorAndOpacityDelegate: UnrealEngineDelegate<() => LinearColor>;
+	bFlipForRightToLeftFlowDirection: boolean;
 	OnMouseButtonDownEvent: UnrealEngineDelegate<(MyGeometry: Geometry, MouseEvent: UPointerEvent) => EventReply>;
 	static Load(ResourceName: string): UImage;
 	static Find(Outer: UObject, ResourceName: string): UImage;
@@ -1035,9 +1169,11 @@ declare class UImage extends Widget {
 	SetColorAndOpacity(InColorAndOpacity: LinearColor): void;
 	SetBrushTintColor(TintColor: SlateColor): void;
 	SetBrushSize(DesiredSize: Vector2D): void;
+	SetBrushResourceObject(ResourceObject: UObject): void;
 	SetBrushFromTextureDynamic(Texture: Texture2DDynamic,bMatchSize: boolean): void;
 	SetBrushFromTexture(Texture: Texture2D,bMatchSize: boolean): void;
 	SetBrushFromSoftTexture(SoftTexture: Texture2D,bMatchSize: boolean): void;
+	SetBrushFromSoftMaterial(SoftMaterial: MaterialInterface): void;
 	SetBrushFromMaterial(Material: MaterialInterface): void;
 	SetBrushFromAsset(Asset: SlateBrushAsset): void;
 	SetBrush(InBrush: SlateBrush): void;
@@ -1054,7 +1190,9 @@ declare class InputChord {
 	clone() : InputChord;
 	static C(Other: UObject | any): InputChord;
 	EqualEqual_InputChordInputChord(B: InputChord): boolean;
+	InputChord_GetDisplayName(): string;
 	static EqualEqual_InputChordInputChord(A: InputChord,B: InputChord): boolean;
+	static InputChord_GetDisplayName(Key: InputChord): string;
 }
 
 declare class InputKeySelector extends Widget { 
@@ -1108,17 +1246,7 @@ declare class InvalidationBox extends ContentWidget {
 	static C(Other: UObject | any): InvalidationBox;
 }
 
-declare class NativeUserListEntry extends Interface { 
-	static Load(ResourceName: string): NativeUserListEntry;
-	static Find(Outer: UObject, ResourceName: string): NativeUserListEntry;
-	static GetDefaultObject(): NativeUserListEntry;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NativeUserListEntry;
-	IsListItemSelected(): boolean;
-	IsListItemExpanded(): boolean;
-	static C(Other: UObject | any): NativeUserListEntry;
-}
-
-declare class UserListEntry extends NativeUserListEntry { 
+declare class UserListEntry extends Interface { 
 	static Load(ResourceName: string): UserListEntry;
 	static Find(Outer: UObject, ResourceName: string): UserListEntry;
 	static GetDefaultObject(): UserListEntry;
@@ -1129,27 +1257,44 @@ declare class UserListEntry extends NativeUserListEntry {
 	static C(Other: UObject | any): UserListEntry;
 }
 
+declare class UserListEntryLibrary extends BlueprintFunctionLibrary { 
+	static Load(ResourceName: string): UserListEntryLibrary;
+	static Find(Outer: UObject, ResourceName: string): UserListEntryLibrary;
+	static GetDefaultObject(): UserListEntryLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserListEntryLibrary;
+	static C(Other: UObject | any): UserListEntryLibrary;
+}
+
 declare class UserObjectListEntry extends UserListEntry { 
 	static Load(ResourceName: string): UserObjectListEntry;
 	static Find(Outer: UObject, ResourceName: string): UserObjectListEntry;
 	static GetDefaultObject(): UserObjectListEntry;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserObjectListEntry;
 	OnListItemObjectSet(ListItemObject: UObject): void;
-	GetListItemObject(): UObject;
 	static C(Other: UObject | any): UserObjectListEntry;
 }
 
+declare class UserObjectListEntryLibrary extends BlueprintFunctionLibrary { 
+	static Load(ResourceName: string): UserObjectListEntryLibrary;
+	static Find(Outer: UObject, ResourceName: string): UserObjectListEntryLibrary;
+	static GetDefaultObject(): UserObjectListEntryLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserObjectListEntryLibrary;
+	static C(Other: UObject | any): UserObjectListEntryLibrary;
+}
+
 declare class ListViewBase extends Widget { 
 	EntryWidgetClass: UnrealEngineClass;
 	BP_OnEntryGenerated: UnrealEngineMulticastDelegate<(Widget: UserWidget) => void>;
 	BP_OnEntryReleased: UnrealEngineMulticastDelegate<(Widget: UserWidget) => void>;
 	NumDesignerPreviewEntries: number;
+	EntryWidgetPool: UserWidgetPool;
 	static Load(ResourceName: string): ListViewBase;
 	static Find(Outer: UObject, ResourceName: string): ListViewBase;
 	static GetDefaultObject(): ListViewBase;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ListViewBase;
 	ScrollToTop(): void;
 	ScrollToBottom(): void;
+	RequestRefresh(): void;
 	RegenerateAllEntries(): void;
 	GetDisplayedEntryWidgets(): UserWidget[];
 	static C(Other: UObject | any): ListViewBase;
@@ -1163,8 +1308,11 @@ declare class ListView extends ListViewBase {
 	SelectionMode: ESelectionMode;
 	ConsumeMouseWheel: EConsumeMouseWheel;
 	bClearSelectionOnClick: boolean;
+	bIsFocusable: boolean;
 	EntrySpacing: number;
+	bReturnFocusToSelection: boolean;
 	ListItems: UObject[];
+	BP_OnEntryInitialized: UnrealEngineMulticastDelegate<(Item: UObject, Widget: UserWidget) => void>;
 	BP_OnItemClicked: UnrealEngineMulticastDelegate<(Item: UObject) => void>;
 	BP_OnItemDoubleClicked: UnrealEngineMulticastDelegate<(Item: UObject) => void>;
 	BP_OnItemIsHoveredChanged: UnrealEngineMulticastDelegate<(Item: UObject, bIsHovered: boolean) => void>;
@@ -1177,6 +1325,7 @@ declare class ListView extends ListViewBase {
 	SetSelectionMode(SelectionMode: ESelectionMode): void;
 	SetSelectedIndex(index: number): void;
 	ScrollIndexIntoView(index: number): void;
+	RemoveItem(Item: UObject): void;
 	NavigateToIndex(index: number): void;
 	IsRefreshPending(): boolean;
 	GetNumItems(): number;
@@ -1213,6 +1362,7 @@ declare class MenuAnchor extends ContentWidget {
 	MenuClass: UnrealEngineClass;
 	OnGetMenuContentEvent: UnrealEngineDelegate<() => Widget>;
 	PLACEMENT: EMenuPlacement;
+	bFitInWindow: boolean;
 	ShouldDeferPaintingAfterWindowContent: boolean;
 	UseApplicationMenuStack: boolean;
 	OnMenuOpenChanged: UnrealEngineMulticastDelegate<(bIsOpen: boolean) => void>;
@@ -1222,10 +1372,12 @@ declare class MenuAnchor extends ContentWidget {
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MenuAnchor;
 	ToggleOpen(bFocusOnOpen: boolean): void;
 	ShouldOpenDueToClick(): boolean;
+	SetPlacement(InPlacement: EMenuPlacement): void;
 	Open(bFocusMenu: boolean): void;
 	IsOpen(): boolean;
 	HasOpenSubMenus(): boolean;
 	GetMenuPosition(): Vector2D;
+	FitInWindow(bFit: boolean): void;
 	Close(): void;
 	static C(Other: UObject | any): MenuAnchor;
 }
@@ -1269,6 +1421,7 @@ declare class MovieSceneNameableTrack extends MovieSceneTrack {
 
 declare class MovieScenePropertyTrack extends MovieSceneNameableTrack { 
 	UniqueTrackName: string;
+	SectionToKey: MovieSceneSection;
 	PropertyName: string;
 	PropertyPath: string;
 	Sections: MovieSceneSection[];
@@ -1363,9 +1516,12 @@ declare class MultiLineEditableText extends TextLayoutWidget {
 	static Find(Outer: UObject, ResourceName: string): MultiLineEditableText;
 	static GetDefaultObject(): MultiLineEditableText;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MultiLineEditableText;
+	SetWidgetStyle(InWidgetStyle: TextBlockStyle): void;
 	SetText(InText: string): void;
 	SetIsReadOnly(bReadOnly: boolean): void;
+	SetHintText(InHintText: string): void;
 	GetText(): string;
+	GetHintText(): string;
 	static C(Other: UObject | any): MultiLineEditableText;
 }
 
@@ -1390,10 +1546,13 @@ declare class MultiLineEditableTextBox extends TextLayoutWidget {
 	static Find(Outer: UObject, ResourceName: string): MultiLineEditableTextBox;
 	static GetDefaultObject(): MultiLineEditableTextBox;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MultiLineEditableTextBox;
+	SetTextStyle(InTextStyle: TextBlockStyle): void;
 	SetText(InText: string): void;
 	SetIsReadOnly(bReadOnly: boolean): void;
+	SetHintText(InHintText: string): void;
 	SetError(InError: string): void;
 	GetText(): string;
+	GetHintText(): string;
 	static C(Other: UObject | any): MultiLineEditableTextBox;
 }
 
@@ -1488,13 +1647,28 @@ declare class RichTextBlock extends TextLayoutWidget {
 	text: string;
 	TextStyleSet: DataTable;
 	DecoratorClasses: UnrealEngineClass[];
+	bOverrideDefaultStyle: boolean;
+	DefaultTextStyleOverride: TextBlockStyle;
+	MinDesiredWidth: number;
 	InstanceDecorators: RichTextBlockDecorator[];
 	static Load(ResourceName: string): RichTextBlock;
 	static Find(Outer: UObject, ResourceName: string): RichTextBlock;
 	static GetDefaultObject(): RichTextBlock;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RichTextBlock;
+	SetTextStyleSet(NewTextStyleSet: DataTable): void;
 	SetText(InText: string): void;
+	SetMinDesiredWidth(InMinDesiredWidth: number): void;
+	SetJustification(InJustification: ETextJustify): void;
+	SetDefaultTextStyle(InDefaultTextStyle: TextBlockStyle): void;
+	SetDefaultStrikeBrush(InStrikeBrush?: SlateBrush): {InStrikeBrush: SlateBrush};
+	SetDefaultShadowOffset(InShadowOffset: Vector2D): void;
+	SetDefaultShadowColorAndOpacity(InShadowColorAndOpacity: LinearColor): void;
+	SetDefaultFont(InFontInfo: SlateFontInfo): void;
+	SetDefaultColorAndOpacity(InColorAndOpacity: SlateColor): void;
+	SetAutoWrapText(InAutoTextWrap: boolean): void;
+	GetText(): string;
 	GetDecoratorByClass(DecoratorClass: UnrealEngineClass): RichTextBlockDecorator;
+	ClearAllDefaultStyleOverrides(): void;
 	static C(Other: UObject | any): RichTextBlock;
 }
 
@@ -1574,8 +1748,10 @@ declare class ScrollBar extends Widget {
 	WidgetStyle: ScrollBarStyle;
 	Style: SlateWidgetStyleAsset;
 	bAlwaysShowScrollbar: boolean;
+	bAlwaysShowScrollbarTrack: boolean;
 	Orientation: EOrientation;
 	Thickness: Vector2D;
+	Padding: Margin;
 	static Load(ResourceName: string): ScrollBar;
 	static Find(Outer: UObject, ResourceName: string): ScrollBar;
 	static GetDefaultObject(): ScrollBar;
@@ -1595,7 +1771,9 @@ declare class ScrollBox extends PanelWidget {
 	ScrollBarVisibility: ESlateVisibility;
 	ConsumeMouseWheel: EConsumeMouseWheel;
 	ScrollbarThickness: Vector2D;
+	ScrollbarPadding: Margin;
 	AlwaysShowScrollbar: boolean;
+	AlwaysShowScrollbarTrack: boolean;
 	AllowOverscroll: boolean;
 	NavigationDestination: EDescendantScrollDestination;
 	NavigationScrollPadding: number;
@@ -1608,31 +1786,21 @@ declare class ScrollBox extends PanelWidget {
 	SetScrollOffset(NewScrollOffset: number): void;
 	SetScrollBarVisibility(NewScrollBarVisibility: ESlateVisibility): void;
 	SetScrollbarThickness(NewScrollbarThickness: Vector2D): void;
+	SetScrollbarPadding(NewScrollbarPadding: Margin): void;
 	SetOrientation(NewOrientation: EOrientation): void;
+	SetConsumeMouseWheel(NewConsumeMouseWheel: EConsumeMouseWheel): void;
 	SetAlwaysShowScrollbar(NewAlwaysShowScrollbar: boolean): void;
 	SetAllowOverscroll(NewAllowOverscroll: boolean): void;
 	ScrollWidgetIntoView(WidgetToFind: Widget,AnimateScroll: boolean,ScrollDestination: EDescendantScrollDestination): void;
 	ScrollToStart(): void;
 	ScrollToEnd(): void;
 	GetViewOffsetFraction(): number;
+	GetScrollOffsetOfEnd(): number;
 	GetScrollOffset(): number;
+	EndInertialScrolling(): void;
 	static C(Other: UObject | any): ScrollBox;
 }
 
-declare class ScrollBoxSlot extends PanelSlot { 
-	Padding: Margin;
-	HorizontalAlignment: EHorizontalAlignment;
-	VerticalAlignment: EVerticalAlignment;
-	static Load(ResourceName: string): ScrollBoxSlot;
-	static Find(Outer: UObject, ResourceName: string): ScrollBoxSlot;
-	static GetDefaultObject(): ScrollBoxSlot;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ScrollBoxSlot;
-	SetVerticalAlignment(InVerticalAlignment: EVerticalAlignment): void;
-	SetPadding(InPadding: Margin): void;
-	SetHorizontalAlignment(InHorizontalAlignment: EHorizontalAlignment): void;
-	static C(Other: UObject | any): ScrollBoxSlot;
-}
-
 declare class SizeBox extends ContentWidget { 
 	bOverride_WidthOverride: boolean;
 	bOverride_HeightOverride: boolean;
@@ -1640,6 +1808,7 @@ declare class SizeBox extends ContentWidget {
 	bOverride_MinDesiredHeight: boolean;
 	bOverride_MaxDesiredWidth: boolean;
 	bOverride_MaxDesiredHeight: boolean;
+	bOverride_MinAspectRatio: boolean;
 	bOverride_MaxAspectRatio: boolean;
 	WidthOverride: number;
 	HeightOverride: number;
@@ -1647,6 +1816,7 @@ declare class SizeBox extends ContentWidget {
 	MinDesiredHeight: number;
 	MaxDesiredWidth: number;
 	MaxDesiredHeight: number;
+	MinAspectRatio: number;
 	MaxAspectRatio: number;
 	static Load(ResourceName: string): SizeBox;
 	static Find(Outer: UObject, ResourceName: string): SizeBox;
@@ -1655,6 +1825,7 @@ declare class SizeBox extends ContentWidget {
 	SetWidthOverride(InWidthOverride: number): void;
 	SetMinDesiredWidth(InMinDesiredWidth: number): void;
 	SetMinDesiredHeight(InMinDesiredHeight: number): void;
+	SetMinAspectRatio(InMinAspectRatio: number): void;
 	SetMaxDesiredWidth(InMaxDesiredWidth: number): void;
 	SetMaxDesiredHeight(InMaxDesiredHeight: number): void;
 	SetMaxAspectRatio(InMaxAspectRatio: number): void;
@@ -1662,6 +1833,7 @@ declare class SizeBox extends ContentWidget {
 	ClearWidthOverride(): void;
 	ClearMinDesiredWidth(): void;
 	ClearMinDesiredHeight(): void;
+	ClearMinAspectRatio(): void;
 	ClearMaxDesiredWidth(): void;
 	ClearMaxDesiredHeight(): void;
 	ClearMaxAspectRatio(): void;
@@ -1688,6 +1860,10 @@ declare class SlateBlueprintLibrary extends BlueprintFunctionLibrary {
 	static Find(Outer: UObject, ResourceName: string): SlateBlueprintLibrary;
 	static GetDefaultObject(): SlateBlueprintLibrary;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateBlueprintLibrary;
+	static TransformVectorLocalToAbsolute(Geometry: Geometry,LocalVector: Vector2D): Vector2D;
+	static TransformVectorAbsoluteToLocal(Geometry: Geometry,AbsoluteVector: Vector2D): Vector2D;
+	static TransformScalarLocalToAbsolute(Geometry: Geometry,LocalScalar: number): number;
+	static TransformScalarAbsoluteToLocal(Geometry: Geometry,AbsoluteScalar: number): number;
 	static ScreenToWidgetLocal(WorldContextObject: UObject,Geometry: Geometry,ScreenPosition: Vector2D,LocalCoordinate?: Vector2D): {LocalCoordinate: Vector2D};
 	static ScreenToWidgetAbsolute(WorldContextObject: UObject,ScreenPosition: Vector2D,AbsoluteCoordinate?: Vector2D): {AbsoluteCoordinate: Vector2D};
 	static ScreenToViewport(WorldContextObject: UObject,ScreenPosition: Vector2D,ViewportPosition?: Vector2D): {ViewportPosition: Vector2D};
@@ -1745,6 +1921,8 @@ declare class SliderStyle extends SlateWidgetStyle {
 declare class Slider extends Widget { 
 	Value: number;
 	ValueDelegate: UnrealEngineDelegate<() => number>;
+	MinValue: number;
+	MaxValue: number;
 	WidgetStyle: SliderStyle;
 	Orientation: EOrientation;
 	SliderBarColor: LinearColor;
@@ -1768,9 +1946,12 @@ declare class Slider extends Widget {
 	SetStepSize(InValue: number): void;
 	SetSliderHandleColor(InValue: LinearColor): void;
 	SetSliderBarColor(InValue: LinearColor): void;
+	SetMinValue(InValue: number): void;
+	SetMaxValue(InValue: number): void;
 	SetLocked(InValue: boolean): void;
 	SetIndentHandle(InValue: boolean): void;
 	GetValue(): number;
+	GetNormalizedValue(): number;
 	static C(Other: UObject | any): Slider;
 }
 
@@ -1847,17 +2028,20 @@ declare class TextBlock extends TextLayoutWidget {
 	ColorAndOpacity: SlateColor;
 	ColorAndOpacityDelegate: UnrealEngineDelegate<() => SlateColor>;
 	Font: SlateFontInfo;
+	StrikeBrush: SlateBrush;
 	ShadowOffset: Vector2D;
 	ShadowColorAndOpacity: LinearColor;
 	ShadowColorAndOpacityDelegate: UnrealEngineDelegate<() => LinearColor>;
 	MinDesiredWidth: number;
 	bWrapWithInvalidationPanel: boolean;
 	bAutoWrapText: boolean;
+	bSimpleTextMode: boolean;
 	static Load(ResourceName: string): TextBlock;
 	static Find(Outer: UObject, ResourceName: string): TextBlock;
 	static GetDefaultObject(): TextBlock;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextBlock;
 	SetText(InText: string): void;
+	SetStrikeBrush(InStrikeBrush: SlateBrush): void;
 	SetShadowOffset(InShadowOffset: Vector2D): void;
 	SetShadowColorAndOpacity(InShadowColorAndOpacity: LinearColor): void;
 	SetOpacity(InOpacity: number): void;
@@ -1930,7 +2114,7 @@ declare class UniformGridPanel extends PanelWidget {
 	SetSlotPadding(InSlotPadding: Margin): void;
 	SetMinDesiredSlotWidth(InMinDesiredSlotWidth: number): void;
 	SetMinDesiredSlotHeight(InMinDesiredSlotHeight: number): void;
-	AddChildToUniformGrid(Content: Widget): UniformGridSlot;
+	AddChildToUniformGrid(Content: Widget,InRow: number,InColumn: number): UniformGridSlot;
 	static C(Other: UObject | any): UniformGridPanel;
 }
 
@@ -1967,6 +2151,35 @@ declare class VisibilityBinding extends PropertyBinding {
 	static C(Other: UObject | any): VisibilityBinding;
 }
 
+declare class BlueprintWidgetAnimationDelegateBinding { 
+	Action: EWidgetAnimationEvent;
+	AnimationToBind: string;
+	FunctionNameToBind: string;
+	UserTag: string;
+	clone() : BlueprintWidgetAnimationDelegateBinding;
+	static C(Other: UObject | any): BlueprintWidgetAnimationDelegateBinding;
+}
+
+declare class WidgetAnimationDelegateBinding extends DynamicBlueprintBinding { 
+	WidgetAnimationDelegateBindings: BlueprintWidgetAnimationDelegateBinding[];
+	static Load(ResourceName: string): WidgetAnimationDelegateBinding;
+	static Find(Outer: UObject, ResourceName: string): WidgetAnimationDelegateBinding;
+	static GetDefaultObject(): WidgetAnimationDelegateBinding;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetAnimationDelegateBinding;
+	static C(Other: UObject | any): WidgetAnimationDelegateBinding;
+}
+
+declare class WidgetAnimationPlayCallbackProxy extends UObject { 
+	Finished: UnrealEngineMulticastDelegate<() => void>;
+	static Load(ResourceName: string): WidgetAnimationPlayCallbackProxy;
+	static Find(Outer: UObject, ResourceName: string): WidgetAnimationPlayCallbackProxy;
+	static GetDefaultObject(): WidgetAnimationPlayCallbackProxy;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetAnimationPlayCallbackProxy;
+	static CreatePlayAnimationTimeRangeProxyObject(Result?: UMGSequencePlayer,Widget?: UserWidget,InAnimation?: WidgetAnimation,StartAtTime?: number,EndAtTime?: number,NumLoopsToPlay?: number,PlayMode?: EUMGSequencePlayMode,PlaybackSpeed?: number): {Result: UMGSequencePlayer, $: WidgetAnimationPlayCallbackProxy};
+	static CreatePlayAnimationProxyObject(Result?: UMGSequencePlayer,Widget?: UserWidget,InAnimation?: WidgetAnimation,StartAtTime?: number,NumLoopsToPlay?: number,PlayMode?: EUMGSequencePlayMode,PlaybackSpeed?: number): {Result: UMGSequencePlayer, $: WidgetAnimationPlayCallbackProxy};
+	static C(Other: UObject | any): WidgetAnimationPlayCallbackProxy;
+}
+
 declare class WidgetBinding extends PropertyBinding { 
 	static Load(ResourceName: string): WidgetBinding;
 	static Find(Outer: UObject, ResourceName: string): WidgetBinding;
@@ -1986,11 +2199,13 @@ declare class EventGraphFastCallPair {
 declare class BlueprintGeneratedClass extends Class { 
 	NumReplicatedProperties: number;
 	bHasNativizedParent: boolean;
+	bHasCookedComponentInstancingData: boolean;
 	DynamicBindingObjects: DynamicBlueprintBinding[];
 	ComponentTemplates: ActorComponent[];
 	Timelines: TimelineTemplate[];
 	SimpleConstructionScript: SimpleConstructionScript;
 	InheritableComponentHandler: InheritableComponentHandler;
+	UberGraphFramePointerProperty: StructProperty;
 	UberGraphFunction: UFunction;
 	FastCallPairs: EventGraphFastCallPair[];
 	OverridenArchetypeForCDO: UObject;
@@ -2003,6 +2218,8 @@ declare class BlueprintGeneratedClass extends Class {
 	static C(Other: UObject | any): BlueprintGeneratedClass;
 }
 
+declare type EBindingKind = 'Function' | 'Property' | 'EBindingKind_MAX';
+declare var EBindingKind : { Function:'Function',Property:'Property',EBindingKind_MAX:'EBindingKind_MAX', };
 declare class DelegateRuntimeBinding { 
 	ObjectName: string;
 	PropertyName: string;
@@ -2016,6 +2233,7 @@ declare class DelegateRuntimeBinding {
 declare class WidgetBlueprintGeneratedClass extends BlueprintGeneratedClass { 
 	WidgetTree: WidgetTree;
 	bCookSlowConstructionWidgetTree: boolean;
+	bCanCallPreConstruct: boolean;
 	bAllowTemplate: boolean;
 	bAllowDynamicCreation: boolean;
 	bValidTemplate: boolean;
@@ -2060,6 +2278,7 @@ declare class WidgetBlueprintLibrary extends BlueprintFunctionLibrary {
 	static SetInputMode_GameAndUI(Target: PlayerController,InWidgetToFocus: Widget,bLockMouseToViewport: boolean,bHideCursorDuringCapture: boolean): void;
 	static SetHardwareCursor(WorldContextObject: UObject,CursorShape: EMouseCursor,CursorName: string,HotSpot: Vector2D): boolean;
 	static SetFocusToGameViewport(): void;
+	static SetColorVisionDeficiencyType(Type: EColorVisionDeficiency,Severity: number,CorrectDeficiency: boolean,ShowCorrectionWithDeficiency: boolean): void;
 	static SetBrushResourceToTexture(Brush?: SlateBrush,Texture?: Texture2D): {Brush: SlateBrush};
 	static SetBrushResourceToMaterial(Brush?: SlateBrush,Material?: MaterialInterface): {Brush: SlateBrush};
 	static RestorePreviousWindowTitleBarState(): void;
@@ -2083,13 +2302,13 @@ declare class WidgetBlueprintLibrary extends BlueprintFunctionLibrary {
 	static GetBrushResourceAsTexture2D(Brush: SlateBrush): Texture2D;
 	static GetBrushResourceAsMaterial(Brush: SlateBrush): MaterialInterface;
 	static GetBrushResource(Brush: SlateBrush): UObject;
-	static GetAllWidgetsWithInterface(WorldContextObject: UObject,Interface: UnrealEngineClass,FoundWidgets?: UserWidget[],TopLevelOnly?: boolean): {FoundWidgets: UserWidget[]};
+	static GetAllWidgetsWithInterface(WorldContextObject: UObject,FoundWidgets?: UserWidget[],Interface?: UnrealEngineClass,TopLevelOnly?: boolean): {FoundWidgets: UserWidget[]};
 	static GetAllWidgetsOfClass(WorldContextObject: UObject,FoundWidgets?: UserWidget[],WidgetClass?: UnrealEngineClass,TopLevelOnly?: boolean): {FoundWidgets: UserWidget[]};
 	static EndDragDrop(Reply?: EventReply): {Reply: EventReply, $: EventReply};
 	static DrawTextFormatted(Context?: PaintContext,text?: string,Position?: Vector2D,Font?: Font,FontSize?: number,FontTypeFace?: string,Tint?: LinearColor): {Context: PaintContext};
 	static DrawText(Context?: PaintContext,inString?: string,Position?: Vector2D,Tint?: LinearColor): {Context: PaintContext};
-	static DrawLines(Context?: PaintContext,Points?: Vector2D[],Tint?: LinearColor,bAntiAlias?: boolean): {Context: PaintContext};
-	static DrawLine(Context?: PaintContext,PositionA?: Vector2D,PositionB?: Vector2D,Tint?: LinearColor,bAntiAlias?: boolean): {Context: PaintContext};
+	static DrawLines(Context?: PaintContext,Points?: Vector2D[],Tint?: LinearColor,bAntiAlias?: boolean,Thickness?: number): {Context: PaintContext};
+	static DrawLine(Context?: PaintContext,PositionA?: Vector2D,PositionB?: Vector2D,Tint?: LinearColor,bAntiAlias?: boolean,Thickness?: number): {Context: PaintContext};
 	static DrawBox(Context?: PaintContext,Position?: Vector2D,Size?: Vector2D,Brush?: SlateBrushAsset,Tint?: LinearColor): {Context: PaintContext};
 	static DismissAllMenus(): void;
 	static DetectDragIfPressed(UPointerEvent: UPointerEvent,WidgetDetectingDrag: Widget,DragKey: Key): EventReply;
@@ -2152,6 +2371,7 @@ declare class WidgetLayoutLibrary extends BlueprintFunctionLibrary {
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetLayoutLibrary;
 	static SlotAsVerticalBoxSlot(Widget: Widget): VerticalBoxSlot;
 	static SlotAsUniformGridSlot(Widget: Widget): UniformGridSlot;
+	static SlotAsScrollBoxSlot(Widget: Widget): ScrollBoxSlot;
 	static SlotAsOverlaySlot(Widget: Widget): OverlaySlot;
 	static SlotAsHorizontalBoxSlot(Widget: Widget): HorizontalBoxSlot;
 	static SlotAsGridSlot(Widget: Widget): GridSlot;
@@ -2252,7 +2472,7 @@ declare class WrapBox extends PanelWidget {
 	static GetDefaultObject(): WrapBox;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WrapBox;
 	SetInnerSlotPadding(InPadding: Vector2D): void;
-	AddChildWrapBox(Content: Widget): WrapBoxSlot;
+	AddChildToWrapBox(Content: Widget): WrapBoxSlot;
 	static C(Other: UObject | any): WrapBox;
 }
 
@@ -2306,6 +2526,14 @@ declare class SourceControlHelpers extends UObject {
 	static C(Other: UObject | any): SourceControlHelpers;
 }
 
+declare class BlueprintCompilerExtension extends UObject { 
+	static Load(ResourceName: string): BlueprintCompilerExtension;
+	static Find(Outer: UObject, ResourceName: string): BlueprintCompilerExtension;
+	static GetDefaultObject(): BlueprintCompilerExtension;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintCompilerExtension;
+	static C(Other: UObject | any): BlueprintCompilerExtension;
+}
+
 declare class FavoritedBlueprintPaletteItem { 
 	clone() : FavoritedBlueprintPaletteItem;
 	static C(Other: UObject | any): FavoritedBlueprintPaletteItem;
@@ -2342,6 +2570,24 @@ declare class K2Node_AsyncAction extends K2Node_BaseAsyncTask {
 	static C(Other: UObject | any): K2Node_AsyncAction;
 }
 
+declare type EditConditionTestEnum = 'First' | 'Second' | 'EditConditionTestEnum_MAX';
+declare var EditConditionTestEnum : { First:'First',Second:'Second',EditConditionTestEnum_MAX:'EditConditionTestEnum_MAX', };
+declare type EditConditionByteEnum = 'First' | 'Second' | 'EditConditionByteEnum_MAX';
+declare var EditConditionByteEnum : { First:'First',Second:'Second',EditConditionByteEnum_MAX:'EditConditionByteEnum_MAX', };
+declare class EditConditionTestObject extends UObject { 
+	BoolProperty: boolean;
+	EnumProperty: EditConditionTestEnum;
+	ByteEnumProperty: EditConditionByteEnum;
+	DoubleProperty: any;
+	IntegerProperty: number;
+	UintBitfieldProperty: boolean;
+	static Load(ResourceName: string): EditConditionTestObject;
+	static Find(Outer: UObject, ResourceName: string): EditConditionTestObject;
+	static GetDefaultObject(): EditConditionTestObject;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditConditionTestObject;
+	static C(Other: UObject | any): EditConditionTestObject;
+}
+
 declare type EBlueprintPinStyleType = 'BPST_Original' | 'BPST_VariantA' | 'BPST_MAX';
 declare var EBlueprintPinStyleType : { BPST_Original:'BPST_Original',BPST_VariantA:'BPST_VariantA',BPST_MAX:'BPST_MAX', };
 declare type EGraphPanningMouseButton = 'Right' | 'Middle' | 'Both' | 'EGraphPanningMouseButton_MAX';
@@ -2370,6 +2616,7 @@ declare class GraphEditorSettings extends UObject {
 	BytePinTypeColor: LinearColor;
 	ClassPinTypeColor: LinearColor;
 	IntPinTypeColor: LinearColor;
+	Int64PinTypeColor: LinearColor;
 	FloatPinTypeColor: LinearColor;
 	NamePinTypeColor: LinearColor;
 	SoftObjectPinTypeColor: LinearColor;
@@ -2418,6 +2665,25 @@ declare class GraphEditorSettings extends UObject {
 	static C(Other: UObject | any): GraphEditorSettings;
 }
 
+declare class BlueprintCallableFunctionRedirect { 
+	ClassName: string;
+	OldFunctionName: string;
+	NewFunctionName: string;
+	BlueprintParamName: string;
+	ClassParamName: string;
+	clone() : BlueprintCallableFunctionRedirect;
+	static C(Other: UObject | any): BlueprintCallableFunctionRedirect;
+}
+
+declare class EdGraphSchema_K2 extends EdGraphSchema { 
+	EditoronlyBPFunctionRedirects: BlueprintCallableFunctionRedirect[];
+	static Load(ResourceName: string): EdGraphSchema_K2;
+	static Find(Outer: UObject, ResourceName: string): EdGraphSchema_K2;
+	static GetDefaultObject(): EdGraphSchema_K2;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdGraphSchema_K2;
+	static C(Other: UObject | any): EdGraphSchema_K2;
+}
+
 declare class AnimationConduitGraphSchema extends EdGraphSchema_K2 { 
 	static Load(ResourceName: string): AnimationConduitGraphSchema;
 	static Find(Outer: UObject, ResourceName: string): AnimationConduitGraphSchema;
@@ -2463,37 +2729,7 @@ declare class AnimGraphNode_Base extends K2Node {
 	static C(Other: UObject | any): AnimGraphNode_Base;
 }
 
-declare type EPostCopyOperation = 'None' | 'LogicalNegateBool' | 'EPostCopyOperation_MAX';
-declare var EPostCopyOperation : { None:'None',LogicalNegateBool:'LogicalNegateBool',EPostCopyOperation_MAX:'EPostCopyOperation_MAX', };
-declare type ECopyType = 'MemCopy' | 'BoolProperty' | 'StructProperty' | 'ObjectProperty' | 'ECopyType_MAX';
-declare var ECopyType : { MemCopy:'MemCopy',BoolProperty:'BoolProperty',StructProperty:'StructProperty',ObjectProperty:'ObjectProperty',ECopyType_MAX:'ECopyType_MAX', };
-declare class ExposedValueCopyRecord { 
-	SourceProperty: Property;
-	SourcePropertyName: string;
-	SourceSubPropertyName: string;
-	SourceArrayIndex: number;
-	DestProperty: Property;
-	DestArrayIndex: number;
-	Size: number;
-	bInstanceIsTarget: boolean;
-	PostCopyOperation: EPostCopyOperation;
-	CopyType: ECopyType;
-	CachedSourceProperty: Property;
-	CachedSourceStructSubProperty: Property;
-	clone() : ExposedValueCopyRecord;
-	static C(Other: UObject | any): ExposedValueCopyRecord;
-}
-
-declare class ExposedValueHandler { 
-	BoundFunction: string;
-	CopyRecords: ExposedValueCopyRecord[];
-	UFunction: UFunction;
-	clone() : ExposedValueHandler;
-	static C(Other: UObject | any): ExposedValueHandler;
-}
-
 declare class AnimNode_Base { 
-	EvaluateGraphExposedInputs: ExposedValueHandler;
 	clone() : AnimNode_Base;
 	static C(Other: UObject | any): AnimNode_Base;
 }
@@ -2512,6 +2748,8 @@ declare class PoseLink extends PoseLinkBase {
 
 declare class AnimNode_Root extends AnimNode_Base { 
 	Result: PoseLink;
+	Name: string;
+	Group: string;
 	clone() : AnimNode_Root;
 	static C(Other: UObject | any): AnimNode_Root;
 }
@@ -2690,9 +2928,9 @@ declare class AnimGraphNode_BlendSpaceBase extends AnimGraphNode_AssetPlayerBase
 }
 
 declare class AnimNode_AssetPlayerBase extends AnimNode_Base { 
-	bIgnoreForRelevancyTest: boolean;
 	GroupIndex: number;
 	GroupRole: EAnimGroupRole;
+	bIgnoreForRelevancyTest: boolean;
 	BlendWeight: number;
 	InternalTimeAccumulator: number;
 	clone() : AnimNode_AssetPlayerBase;
@@ -2762,33 +3000,15 @@ declare class BlendSpaceBase extends AnimationAsset {
 	static C(Other: UObject | any): BlendSpaceBase;
 }
 
-declare class BlendFilter { 
-	clone() : BlendFilter;
-	static C(Other: UObject | any): BlendFilter;
-}
-
-declare class BlendSampleData { 
-	SampleDataIndex: number;
-	Animation: AnimSequence;
-	TotalWeight: number;
-	Time: number;
-	PreviousTime: number;
-	SamplePlayRate: number;
-	clone() : BlendSampleData;
-	static C(Other: UObject | any): BlendSampleData;
-}
-
 declare class AnimNode_BlendSpacePlayer extends AnimNode_AssetPlayerBase { 
 	X: number;
 	Y: number;
 	Z: number;
 	PlayRate: number;
 	bLoop: boolean;
+	bResetPlayTimeWhenBlendSpaceChanges: boolean;
 	StartPosition: number;
 	BlendSpace: BlendSpaceBase;
-	bResetPlayTimeWhenBlendSpaceChanges: boolean;
-	BlendFilter: BlendFilter;
-	BlendSampleDataCache: BlendSampleData[];
 	PreviousBlendSpace: BlendSpaceBase;
 	clone() : AnimNode_BlendSpacePlayer;
 	static C(Other: UObject | any): AnimNode_BlendSpacePlayer;
@@ -2797,16 +3017,11 @@ declare class AnimNode_BlendSpacePlayer extends AnimNode_AssetPlayerBase {
 declare class AnimNode_AimOffsetLookAt extends AnimNode_BlendSpacePlayer { 
 	BasePose: PoseLink;
 	LODThreshold: number;
-	bIsLODEnabled: boolean;
-	LookAtLocation: Vector;
 	SourceSocketName: string;
 	PivotSocketName: string;
+	LookAtLocation: Vector;
 	SocketAxis: Vector;
 	Alpha: number;
-	SocketBoneReference: BoneReference;
-	SocketLocalTransform: Transform;
-	PivotSocketBoneReference: BoneReference;
-	PivotSocketLocalTransform: Transform;
 	clone() : AnimNode_AimOffsetLookAt;
 	static C(Other: UObject | any): AnimNode_AimOffsetLookAt;
 }
@@ -2864,7 +3079,6 @@ declare class InputScaleBiasClamp {
 	bMapRange: boolean;
 	bClampResult: boolean;
 	bInterpResult: boolean;
-	bInitialized: boolean;
 	InRange: InputRange;
 	OutRange: InputRange;
 	Scale: number;
@@ -2873,7 +3087,6 @@ declare class InputScaleBiasClamp {
 	ClampMax: number;
 	InterpSpeedIncreasing: number;
 	InterpSpeedDecreasing: number;
-	InterpolatedResult: number;
 	clone() : InputScaleBiasClamp;
 	static C(Other: UObject | any): InputScaleBiasClamp;
 }
@@ -2893,8 +3106,6 @@ declare class AnimNode_SkeletalControlBase extends AnimNode_Base {
 	static C(Other: UObject | any): AnimNode_SkeletalControlBase;
 }
 
-declare type AnimPhysSimSpaceType = 'Component' | 'Actor' | 'World' | 'RootRelative' | 'BoneRelative' | 'AnimPhysSimSpaceType_MAX';
-declare var AnimPhysSimSpaceType : { Component:'Component',Actor:'Actor',World:'World',RootRelative:'RootRelative',BoneRelative:'BoneRelative',AnimPhysSimSpaceType_MAX:'AnimPhysSimSpaceType_MAX', };
 declare type AnimPhysLinearConstraintType = 'Free' | 'Limited' | 'AnimPhysLinearConstraintType_MAX';
 declare var AnimPhysLinearConstraintType : { Free:'Free',Limited:'Limited',AnimPhysLinearConstraintType_MAX:'AnimPhysLinearConstraintType_MAX', };
 declare type AnimPhysAngularConstraintType = 'Angular' | 'Cone' | 'AnimPhysAngularConstraintType_MAX';
@@ -2909,26 +3120,18 @@ declare class AnimPhysConstraintSetup {
 	LinearAxesMax: Vector;
 	AngularConstraintType: AnimPhysAngularConstraintType;
 	TwistAxis: AnimPhysTwistAxis;
+	AngularTargetAxis: AnimPhysTwistAxis;
 	ConeAngle: number;
 	AngularXAngle: number;
 	AngularYAngle: number;
 	AngularZAngle: number;
 	AngularLimitsMin: Vector;
 	AngularLimitsMax: Vector;
-	AngularTargetAxis: AnimPhysTwistAxis;
 	AngularTarget: Vector;
-	bLinearFullyLocked: boolean;
 	clone() : AnimPhysConstraintSetup;
 	static C(Other: UObject | any): AnimPhysConstraintSetup;
 }
 
-declare class AnimPhysPlanarLimit { 
-	DrivingBone: BoneReference;
-	PlaneTransform: Transform;
-	clone() : AnimPhysPlanarLimit;
-	static C(Other: UObject | any): AnimPhysPlanarLimit;
-}
-
 declare type ESphericalLimitType = 'Inner' | 'Outer' | 'ESphericalLimitType_MAX';
 declare var ESphericalLimitType : { Inner:'Inner',Outer:'Outer',ESphericalLimitType_MAX:'ESphericalLimitType_MAX', };
 declare class AnimPhysSphericalLimit { 
@@ -2940,47 +3143,80 @@ declare class AnimPhysSphericalLimit {
 	static C(Other: UObject | any): AnimPhysSphericalLimit;
 }
 
+declare class AnimPhysPlanarLimit { 
+	DrivingBone: BoneReference;
+	PlaneTransform: Transform;
+	clone() : AnimPhysPlanarLimit;
+	static C(Other: UObject | any): AnimPhysPlanarLimit;
+}
+
 declare type AnimPhysCollisionType = 'CoM' | 'CustomSphere' | 'InnerSphere' | 'OuterSphere' | 'AnimPhysCollisionType_MAX';
 declare var AnimPhysCollisionType : { CoM:'CoM',CustomSphere:'CustomSphere',InnerSphere:'InnerSphere',OuterSphere:'OuterSphere',AnimPhysCollisionType_MAX:'AnimPhysCollisionType_MAX', };
+declare type AnimPhysSimSpaceType = 'Component' | 'Actor' | 'World' | 'RootRelative' | 'BoneRelative' | 'AnimPhysSimSpaceType_MAX';
+declare var AnimPhysSimSpaceType : { Component:'Component',Actor:'Actor',World:'World',RootRelative:'RootRelative',BoneRelative:'BoneRelative',AnimPhysSimSpaceType_MAX:'AnimPhysSimSpaceType_MAX', };
+declare type ERotationComponent = 'EulerX' | 'EulerY' | 'EulerZ' | 'QuaternionAngle' | 'SwingAngle' | 'TwistAngle' | 'ERotationComponent_MAX';
+declare var ERotationComponent : { EulerX:'EulerX',EulerY:'EulerY',EulerZ:'EulerZ',QuaternionAngle:'QuaternionAngle',SwingAngle:'SwingAngle',TwistAngle:'TwistAngle',ERotationComponent_MAX:'ERotationComponent_MAX', };
+declare type EEasingFuncType = 'Linear' | 'Sinusoidal' | 'Cubic' | 'QuadraticInOut' | 'CubicInOut' | 'HermiteCubic' | 'QuarticInOut' | 'QuinticInOut' | 'CircularIn' | 'CircularOut' | 'CircularInOut' | 'ExpIn' | 'ExpOut' | 'ExpInOut' | 'CustomCurve' | 'EEasingFuncType_MAX';
+declare var EEasingFuncType : { Linear:'Linear',Sinusoidal:'Sinusoidal',Cubic:'Cubic',QuadraticInOut:'QuadraticInOut',CubicInOut:'CubicInOut',HermiteCubic:'HermiteCubic',QuarticInOut:'QuarticInOut',QuinticInOut:'QuinticInOut',CircularIn:'CircularIn',CircularOut:'CircularOut',CircularInOut:'CircularInOut',ExpIn:'ExpIn',ExpOut:'ExpOut',ExpInOut:'ExpInOut',CustomCurve:'CustomCurve',EEasingFuncType_MAX:'EEasingFuncType_MAX', };
+declare class RotationRetargetingInfo { 
+	bEnabled: boolean;
+	Source: Transform;
+	Target: Transform;
+	RotationComponent: ERotationComponent;
+	TwistAxis: Vector;
+	bUseAbsoluteAngle: boolean;
+	SourceMinimum: number;
+	SourceMaximum: number;
+	TargetMinimum: number;
+	TargetMaximum: number;
+	EasingType: EEasingFuncType;
+	CustomCurve: RuntimeFloatCurve;
+	bFlipEasing: boolean;
+	EasingWeight: number;
+	bClamp: boolean;
+	clone() : RotationRetargetingInfo;
+	static C(Other: UObject | any): RotationRetargetingInfo;
+}
+
 declare class AnimNode_AnimDynamics extends AnimNode_SkeletalControlBase { 
-	SimulationSpace: AnimPhysSimSpaceType;
+	LinearDampingOverride: number;
+	AngularDampingOverride: number;
 	RelativeSpaceBone: BoneReference;
-	bChain: boolean;
 	BoundBone: BoneReference;
 	ChainEnd: BoneReference;
 	BoxExtents: Vector;
 	LocalJointOffset: Vector;
 	GravityScale: number;
 	GravityOverride: Vector;
-	bUseGravityOverride: boolean;
-	bLinearSpring: boolean;
-	bAngularSpring: boolean;
 	LinearSpringConstant: number;
 	AngularSpringConstant: number;
-	bEnableWind: boolean;
-	bWindWasEnabled: boolean;
 	WindScale: number;
 	ComponentLinearAccScale: Vector;
 	ComponentLinearVelScale: Vector;
 	ComponentAppliedLinearAccClamp: Vector;
-	bOverrideLinearDamping: boolean;
-	LinearDampingOverride: number;
-	bOverrideAngularDamping: boolean;
-	AngularDampingOverride: number;
-	bOverrideAngularBias: boolean;
 	AngularBiasOverride: number;
-	bDoUpdate: boolean;
-	bDoEval: boolean;
 	NumSolverIterationsPreUpdate: number;
 	NumSolverIterationsPostUpdate: number;
 	ConstraintSetup: AnimPhysConstraintSetup;
-	bUsePlanarLimit: boolean;
-	PlanarLimits: AnimPhysPlanarLimit[];
-	bUseSphericalLimits: boolean;
 	SphericalLimits: AnimPhysSphericalLimit[];
-	CollisionType: AnimPhysCollisionType;
 	SphereCollisionRadius: number;
 	ExternalForce: Vector;
+	PlanarLimits: AnimPhysPlanarLimit[];
+	CollisionType: AnimPhysCollisionType;
+	SimulationSpace: AnimPhysSimSpaceType;
+	bUseSphericalLimits: boolean;
+	bUsePlanarLimit: boolean;
+	bDoUpdate: boolean;
+	bDoEval: boolean;
+	bOverrideLinearDamping: boolean;
+	bOverrideAngularBias: boolean;
+	bOverrideAngularDamping: boolean;
+	bEnableWind: boolean;
+	bUseGravityOverride: boolean;
+	bLinearSpring: boolean;
+	bAngularSpring: boolean;
+	bChain: boolean;
+	RetargetingSettings: RotationRetargetingInfo;
 	clone() : AnimNode_AnimDynamics;
 	static C(Other: UObject | any): AnimNode_AnimDynamics;
 }
@@ -3007,12 +3243,11 @@ declare class AnimNode_ApplyAdditive extends AnimNode_Base {
 	Alpha: number;
 	AlphaScaleBias: InputScaleBias;
 	LODThreshold: number;
-	ActualAlpha: number;
-	AlphaInputType: EAnimAlphaInputType;
-	bAlphaBoolEnabled: boolean;
 	AlphaBoolBlend: InputAlphaBoolBlend;
 	AlphaCurveName: string;
 	AlphaScaleBiasClamp: InputScaleBiasClamp;
+	AlphaInputType: EAnimAlphaInputType;
+	bAlphaBoolEnabled: boolean;
 	clone() : AnimNode_ApplyAdditive;
 	static C(Other: UObject | any): AnimNode_ApplyAdditive;
 }
@@ -3056,7 +3291,6 @@ declare class AnimNode_ApplyMeshSpaceAdditive extends AnimNode_Base {
 	Alpha: number;
 	AlphaScaleBias: InputScaleBias;
 	LODThreshold: number;
-	ActualAlpha: number;
 	clone() : AnimNode_ApplyMeshSpaceAdditive;
 	static C(Other: UObject | any): AnimNode_ApplyMeshSpaceAdditive;
 }
@@ -3085,13 +3319,10 @@ declare var EBoneControlSpace : { BCS_WorldSpace:'BCS_WorldSpace',BCS_ComponentS
 declare class AnimNode_BlendBoneByChannel extends AnimNode_Base { 
 	A: PoseLink;
 	B: PoseLink;
+	BoneDefinitions: BlendBoneByChannelEntry[];
 	Alpha: number;
 	AlphaScaleBias: InputScaleBias;
-	BoneDefinitions: BlendBoneByChannelEntry[];
 	TransformsSpace: EBoneControlSpace;
-	InternalBlendAlpha: number;
-	bBIsRelevant: boolean;
-	ValidBoneEntries: BlendBoneByChannelEntry[];
 	clone() : AnimNode_BlendBoneByChannel;
 	static C(Other: UObject | any): AnimNode_BlendBoneByChannel;
 }
@@ -3117,14 +3348,9 @@ declare class AnimNode_BlendListBase extends AnimNode_Base {
 	BlendPose: PoseLink[];
 	BlendTime: number[];
 	BlendType: EAlphaBlendOption;
+	bResetChildOnActivation: boolean;
 	CustomBlendCurve: CurveFloat;
 	BlendProfile: BlendProfile;
-	Blends: AlphaBlend[];
-	BlendWeights: number[];
-	RemainingBlendTimes: number[];
-	LastActiveChildIndex: number;
-	PerBoneSampleData: BlendSampleData[];
-	bResetChildOnActivation: boolean;
 	clone() : AnimNode_BlendListBase;
 	static C(Other: UObject | any): AnimNode_BlendListBase;
 }
@@ -3209,18 +3435,19 @@ declare type EDrivenBoneModificationMode = 'AddToInput' | 'ReplaceComponent' | '
 declare var EDrivenBoneModificationMode : { AddToInput:'AddToInput',ReplaceComponent:'ReplaceComponent',AddToRefPose:'AddToRefPose',EDrivenBoneModificationMode_MAX:'EDrivenBoneModificationMode_MAX', };
 declare class AnimNode_BoneDrivenController extends AnimNode_SkeletalControlBase { 
 	SourceBone: BoneReference;
-	SourceComponent: EComponentType;
 	DrivingCurve: CurveFloat;
 	Multiplier: number;
-	bUseRange: boolean;
 	RangeMin: number;
 	RangeMax: number;
 	RemappedMin: number;
 	RemappedMax: number;
-	DestinationMode: EDrivenDestinationMode;
 	ParameterName: string;
 	TargetBone: BoneReference;
 	TargetComponent: EComponentType;
+	DestinationMode: EDrivenDestinationMode;
+	ModificationMode: EDrivenBoneModificationMode;
+	SourceComponent: EComponentType;
+	bUseRange: boolean;
 	bAffectTargetTranslationX: boolean;
 	bAffectTargetTranslationY: boolean;
 	bAffectTargetTranslationZ: boolean;
@@ -3230,7 +3457,6 @@ declare class AnimNode_BoneDrivenController extends AnimNode_SkeletalControlBase
 	bAffectTargetScaleX: boolean;
 	bAffectTargetScaleY: boolean;
 	bAffectTargetScaleZ: boolean;
-	ModificationMode: EDrivenBoneModificationMode;
 	clone() : AnimNode_BoneDrivenController;
 	static C(Other: UObject | any): AnimNode_BoneDrivenController;
 }
@@ -3415,19 +3641,29 @@ declare class AnimGraphNode_CurveSource extends AnimGraphNode_Base {
 	static C(Other: UObject | any): AnimGraphNode_CurveSource;
 }
 
+declare class AnimGraphNode_CustomProperty extends AnimGraphNode_Base { 
+	KnownExposableProperties: string[];
+	ExposedPropertyNames: string[];
+	static Load(ResourceName: string): AnimGraphNode_CustomProperty;
+	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_CustomProperty;
+	static GetDefaultObject(): AnimGraphNode_CustomProperty;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_CustomProperty;
+	static C(Other: UObject | any): AnimGraphNode_CustomProperty;
+}
+
 declare type EBoneRotationSource = 'BRS_KeepComponentSpaceRotation' | 'BRS_KeepLocalSpaceRotation' | 'BRS_CopyFromTarget' | 'BRS_MAX';
 declare var EBoneRotationSource : { BRS_KeepComponentSpaceRotation:'BRS_KeepComponentSpaceRotation',BRS_KeepLocalSpaceRotation:'BRS_KeepLocalSpaceRotation',BRS_CopyFromTarget:'BRS_CopyFromTarget',BRS_MAX:'BRS_MAX', };
 declare class AnimNode_Fabrik extends AnimNode_SkeletalControlBase { 
 	EffectorTransform: Transform;
-	EffectorTransformSpace: EBoneControlSpace;
-	EffectorTransformBone: BoneReference;
 	EffectorTarget: BoneSocketTarget;
-	EffectorRotationSource: EBoneRotationSource;
 	TipBone: BoneReference;
 	RootBone: BoneReference;
 	Precision: number;
 	MaxIterations: number;
+	EffectorTransformSpace: EBoneControlSpace;
+	EffectorRotationSource: EBoneRotationSource;
 	bEnableDebugDraw: boolean;
+	EffectorTransformBone: BoneReference;
 	clone() : AnimNode_Fabrik;
 	static C(Other: UObject | any): AnimNode_Fabrik;
 }
@@ -3486,6 +3722,57 @@ declare class AnimGraphNode_IdentityPose extends AnimGraphNode_RefPoseBase {
 	static C(Other: UObject | any): AnimGraphNode_IdentityPose;
 }
 
+declare class AnimGraphNode_SubInstanceBase extends AnimGraphNode_CustomProperty { 
+	static Load(ResourceName: string): AnimGraphNode_SubInstanceBase;
+	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_SubInstanceBase;
+	static GetDefaultObject(): AnimGraphNode_SubInstanceBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_SubInstanceBase;
+	static C(Other: UObject | any): AnimGraphNode_SubInstanceBase;
+}
+
+declare class AnimNode_CustomProperty extends AnimNode_Base { 
+	SourcePropertyNames: string[];
+	DestPropertyNames: string[];
+	TargetInstance: UObject;
+	SourceProperties: Property[];
+	DestProperties: Property[];
+	clone() : AnimNode_CustomProperty;
+	static C(Other: UObject | any): AnimNode_CustomProperty;
+}
+
+declare class AnimNode_SubInstance extends AnimNode_CustomProperty { 
+	InputPoses: PoseLink[];
+	InputPoseNames: string[];
+	InstanceClass: UnrealEngineClass;
+	Tag: string;
+	clone() : AnimNode_SubInstance;
+	static C(Other: UObject | any): AnimNode_SubInstance;
+}
+
+declare class AnimLayerInterface extends Interface { 
+	static Load(ResourceName: string): AnimLayerInterface;
+	static Find(Outer: UObject, ResourceName: string): AnimLayerInterface;
+	static GetDefaultObject(): AnimLayerInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimLayerInterface;
+	static C(Other: UObject | any): AnimLayerInterface;
+}
+
+declare class AnimNode_Layer extends AnimNode_SubInstance { 
+	Interface: UnrealEngineClass;
+	Layer: string;
+	clone() : AnimNode_Layer;
+	static C(Other: UObject | any): AnimNode_Layer;
+}
+
+declare class AnimGraphNode_Layer extends AnimGraphNode_SubInstanceBase { 
+	UNode: AnimNode_Layer;
+	static Load(ResourceName: string): AnimGraphNode_Layer;
+	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_Layer;
+	static GetDefaultObject(): AnimGraphNode_Layer;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_Layer;
+	static C(Other: UObject | any): AnimGraphNode_Layer;
+}
+
 declare class BranchFilter { 
 	BoneName: string;
 	BlendDepth: number;
@@ -3514,9 +3801,9 @@ declare class AnimNode_LayeredBoneBlend extends AnimNode_Base {
 	LayerSetup: InputBlendPose[];
 	BlendWeights: number[];
 	bMeshSpaceRotationBlend: boolean;
+	bMeshSpaceScaleBlend: boolean;
 	CurveBlendOption: ECurveBlendOption;
 	bBlendRootMotionBasedOnRootBone: boolean;
-	bHasRelevantPoses: boolean;
 	LODThreshold: number;
 	PerBoneBlendWeights: PerBoneBlendWeight[];
 	SkeletonGuid: Guid;
@@ -3538,25 +3825,19 @@ declare class AnimLegIKDefinition {
 	IKFootBone: BoneReference;
 	FKFootBone: BoneReference;
 	NumBonesInLimb: number;
+	MinRotationAngle: number;
 	FootBoneForwardAxis: EAxis;
 	HingeRotationAxis: EAxis;
 	bEnableRotationLimit: boolean;
-	MinRotationAngle: number;
 	bEnableKneeTwistCorrection: boolean;
 	clone() : AnimLegIKDefinition;
 	static C(Other: UObject | any): AnimLegIKDefinition;
 }
 
-declare class AnimLegIKData { 
-	clone() : AnimLegIKData;
-	static C(Other: UObject | any): AnimLegIKData;
-}
-
 declare class AnimNode_LegIK extends AnimNode_SkeletalControlBase { 
 	ReachPrecision: number;
 	MaxIterations: number;
 	LegsDefinition: AnimLegIKDefinition[];
-	LegsData: AnimLegIKData[];
 	clone() : AnimNode_LegIK;
 	static C(Other: UObject | any): AnimNode_LegIK;
 }
@@ -3593,8 +3874,6 @@ declare class AnimGraphNode_LocalToComponentSpace extends AnimGraphNode_Base {
 	static C(Other: UObject | any): AnimGraphNode_LocalToComponentSpace;
 }
 
-declare type EAxisOption = 'X' | 'Y' | 'Z' | 'X_Neg' | 'Y_Neg' | 'Z_Neg' | 'Custom' | 'EAxisOption_MAX';
-declare var EAxisOption : { X:'X',Y:'Y',Z:'Z',X_Neg:'X_Neg',Y_Neg:'Y_Neg',Z_Neg:'Z_Neg',Custom:'Custom',EAxisOption_MAX:'EAxisOption_MAX', };
 declare class Axis { 
 	Axis: Vector;
 	bInLocalSpace: boolean;
@@ -3604,23 +3883,25 @@ declare class Axis {
 
 declare type EInterpolationBlend = 'Linear' | 'Cubic' | 'Sinusoidal' | 'EaseInOutExponent2' | 'EaseInOutExponent3' | 'EaseInOutExponent4' | 'EaseInOutExponent5' | 'MAX';
 declare var EInterpolationBlend : { Linear:'Linear',Cubic:'Cubic',Sinusoidal:'Sinusoidal',EaseInOutExponent2:'EaseInOutExponent2',EaseInOutExponent3:'EaseInOutExponent3',EaseInOutExponent4:'EaseInOutExponent4',EaseInOutExponent5:'EaseInOutExponent5',MAX:'MAX', };
+declare type EAxisOption = 'X' | 'Y' | 'Z' | 'X_Neg' | 'Y_Neg' | 'Z_Neg' | 'Custom' | 'EAxisOption_MAX';
+declare var EAxisOption : { X:'X',Y:'Y',Z:'Z',X_Neg:'X_Neg',Y_Neg:'Y_Neg',Z_Neg:'Z_Neg',Custom:'Custom',EAxisOption_MAX:'EAxisOption_MAX', };
 declare class AnimNode_LookAt extends AnimNode_SkeletalControlBase { 
 	BoneToModify: BoneReference;
-	LookAtBone: BoneReference;
-	LookAtSocket: string;
 	LookAtTarget: BoneSocketTarget;
 	LookAtLocation: Vector;
-	LookAtAxis: EAxisOption;
-	CustomLookAtAxis: Vector;
 	LookAt_Axis: Axis;
 	bUseLookUpAxis: boolean;
-	LookUpAxis: EAxisOption;
-	CustomLookUpAxis: Vector;
+	InterpolationType: EInterpolationBlend;
 	LookUp_Axis: Axis;
 	LookAtClamp: number;
-	InterpolationType: EInterpolationBlend;
 	InterpolationTime: number;
 	InterpolationTriggerThreashold: number;
+	LookAtBone: BoneReference;
+	LookAtSocket: string;
+	LookAtAxis: EAxisOption;
+	CustomLookAtAxis: Vector;
+	LookUpAxis: EAxisOption;
+	CustomLookUpAxis: Vector;
 	clone() : AnimNode_LookAt;
 	static C(Other: UObject | any): AnimNode_LookAt;
 }
@@ -3695,11 +3976,10 @@ declare type EModifyCurveApplyMode = 'Add' | 'Scale' | 'Blend' | 'WeightedMoving
 declare var EModifyCurveApplyMode : { Add:'Add',Scale:'Scale',Blend:'Blend',WeightedMovingAverage:'WeightedMovingAverage',RemapCurve:'RemapCurve',EModifyCurveApplyMode_MAX:'EModifyCurveApplyMode_MAX', };
 declare class AnimNode_ModifyCurve extends AnimNode_Base { 
 	SourcePose: PoseLink;
-	ApplyMode: EModifyCurveApplyMode;
 	CurveValues: number[];
-	LastCurveValues: number[];
 	CurveNames: string[];
 	Alpha: number;
+	ApplyMode: EModifyCurveApplyMode;
 	clone() : AnimNode_ModifyCurve;
 	static C(Other: UObject | any): AnimNode_ModifyCurve;
 }
@@ -3716,9 +3996,9 @@ declare class AnimGraphNode_ModifyCurve extends AnimGraphNode_Base {
 declare class AnimNode_MultiWayBlend extends AnimNode_Base { 
 	Poses: PoseLink[];
 	DesiredAlphas: number[];
+	AlphaScaleBias: InputScaleBias;
 	bAdditiveNode: boolean;
 	bNormalizeAlpha: boolean;
-	AlphaScaleBias: InputScaleBias;
 	clone() : AnimNode_MultiWayBlend;
 	static C(Other: UObject | any): AnimNode_MultiWayBlend;
 }
@@ -3799,27 +4079,6 @@ declare class AnimGraphNode_PoseByName extends AnimGraphNode_AssetPlayerBase {
 	static C(Other: UObject | any): AnimGraphNode_PoseByName;
 }
 
-declare type ERBFFunctionType = 'Gaussian' | 'Exponential' | 'Linear' | 'Cubic' | 'Quintic' | 'ERBFFunctionType_MAX';
-declare var ERBFFunctionType : { Gaussian:'Gaussian',Exponential:'Exponential',Linear:'Linear',Cubic:'Cubic',Quintic:'Quintic',ERBFFunctionType_MAX:'ERBFFunctionType_MAX', };
-declare type ERBFDistanceMethod = 'Euclidean' | 'Quaternion' | 'SwingAngle' | 'ERBFDistanceMethod_MAX';
-declare var ERBFDistanceMethod : { Euclidean:'Euclidean',Quaternion:'Quaternion',SwingAngle:'SwingAngle',ERBFDistanceMethod_MAX:'ERBFDistanceMethod_MAX', };
-declare type EBoneAxis = 'BA_X' | 'BA_Y' | 'BA_Z' | 'BA_MAX';
-declare var EBoneAxis : { BA_X:'BA_X',BA_Y:'BA_Y',BA_Z:'BA_Z',BA_MAX:'BA_MAX', };
-declare class RBFParams { 
-	TargetDimensions: number;
-	Radius: number;
-	UFunction: ERBFFunctionType;
-	DistanceMethod: ERBFDistanceMethod;
-	TwistAxis: EBoneAxis;
-	WeightThreshold: number;
-	clone() : RBFParams;
-	static C(Other: UObject | any): RBFParams;
-}
-
-declare type EPoseDriverSource = 'Rotation' | 'Translation' | 'EPoseDriverSource_MAX';
-declare var EPoseDriverSource : { Rotation:'Rotation',Translation:'Translation',EPoseDriverSource_MAX:'EPoseDriverSource_MAX', };
-declare type EPoseDriverOutput = 'DrivePoses' | 'DriveCurves' | 'EPoseDriverOutput_MAX';
-declare var EPoseDriverOutput : { DrivePoses:'DrivePoses',DriveCurves:'DriveCurves',EPoseDriverOutput_MAX:'EPoseDriverOutput_MAX', };
 declare class PoseDriverTransform { 
 	TargetTranslation: Vector;
 	TargetRotation: Rotator;
@@ -3827,39 +4086,72 @@ declare class PoseDriverTransform {
 	static C(Other: UObject | any): PoseDriverTransform;
 }
 
+declare type ERBFDistanceMethod = 'Euclidean' | 'Quaternion' | 'SwingAngle' | 'DefaultMethod' | 'ERBFDistanceMethod_MAX';
+declare var ERBFDistanceMethod : { Euclidean:'Euclidean',Quaternion:'Quaternion',SwingAngle:'SwingAngle',DefaultMethod:'DefaultMethod',ERBFDistanceMethod_MAX:'ERBFDistanceMethod_MAX', };
+declare type ERBFFunctionType = 'Gaussian' | 'Exponential' | 'Linear' | 'Cubic' | 'Quintic' | 'DefaultFunction' | 'ERBFFunctionType_MAX';
+declare var ERBFFunctionType : { Gaussian:'Gaussian',Exponential:'Exponential',Linear:'Linear',Cubic:'Cubic',Quintic:'Quintic',DefaultFunction:'DefaultFunction',ERBFFunctionType_MAX:'ERBFFunctionType_MAX', };
 declare class PoseDriverTarget { 
 	BoneTransforms: PoseDriverTransform[];
 	TargetRotation: Rotator;
 	TargetScale: number;
+	DistanceMethod: ERBFDistanceMethod;
+	FunctionType: ERBFFunctionType;
 	bApplyCustomCurve: boolean;
 	CustomCurve: RichCurve;
 	DrivenName: string;
+	bIsHidden: boolean;
 	clone() : PoseDriverTarget;
 	static C(Other: UObject | any): PoseDriverTarget;
 }
 
+declare type EBoneAxis = 'BA_X' | 'BA_Y' | 'BA_Z' | 'BA_MAX';
+declare var EBoneAxis : { BA_X:'BA_X',BA_Y:'BA_Y',BA_Z:'BA_Z',BA_MAX:'BA_MAX', };
+declare type ERBFNormalizeMethod = 'OnlyNormalizeAboveOne' | 'AlwaysNormalize' | 'NormalizeWithinMedian' | 'ERBFNormalizeMethod_MAX';
+declare var ERBFNormalizeMethod : { OnlyNormalizeAboveOne:'OnlyNormalizeAboveOne',AlwaysNormalize:'AlwaysNormalize',NormalizeWithinMedian:'NormalizeWithinMedian',ERBFNormalizeMethod_MAX:'ERBFNormalizeMethod_MAX', };
+declare class RBFParams { 
+	TargetDimensions: number;
+	Radius: number;
+	UFunction: ERBFFunctionType;
+	DistanceMethod: ERBFDistanceMethod;
+	TwistAxis: EBoneAxis;
+	WeightThreshold: number;
+	NormalizeMethod: ERBFNormalizeMethod;
+	MedianReference: Vector;
+	MedianMin: number;
+	MedianMax: number;
+	clone() : RBFParams;
+	static C(Other: UObject | any): RBFParams;
+}
+
 declare type EPoseDriverType = 'SwingAndTwist' | 'SwingOnly' | 'Translation' | 'EPoseDriverType_MAX';
 declare var EPoseDriverType : { SwingAndTwist:'SwingAndTwist',SwingOnly:'SwingOnly',Translation:'Translation',EPoseDriverType_MAX:'EPoseDriverType_MAX', };
+declare type EPoseDriverSource = 'Rotation' | 'Translation' | 'EPoseDriverSource_MAX';
+declare var EPoseDriverSource : { Rotation:'Rotation',Translation:'Translation',EPoseDriverSource_MAX:'EPoseDriverSource_MAX', };
+declare type EPoseDriverOutput = 'DrivePoses' | 'DriveCurves' | 'EPoseDriverOutput_MAX';
+declare var EPoseDriverOutput : { DrivePoses:'DrivePoses',DriveCurves:'DriveCurves',EPoseDriverOutput_MAX:'EPoseDriverOutput_MAX', };
 declare class AnimNode_PoseDriver extends AnimNode_PoseHandler { 
 	SourcePose: PoseLink;
 	SourceBones: BoneReference[];
-	bOnlyDriveSelectedBones: boolean;
 	OnlyDriveBones: BoneReference[];
+	PoseTargets: PoseDriverTarget[];
 	EvalSpaceBone: BoneReference;
 	RBFParams: RBFParams;
-	DriveSource: EPoseDriverSource;
-	DriveOutput: EPoseDriverOutput;
-	PoseTargets: PoseDriverTarget[];
 	SourceBone: BoneReference;
 	TwistAxis: EBoneAxis;
 	Type: EPoseDriverType;
 	RadialScaling: number;
+	DriveSource: EPoseDriverSource;
+	DriveOutput: EPoseDriverOutput;
+	bOnlyDriveSelectedBones: boolean;
 	clone() : AnimNode_PoseDriver;
 	static C(Other: UObject | any): AnimNode_PoseDriver;
 }
 
 declare class AnimGraphNode_PoseDriver extends AnimGraphNode_PoseHandler { 
 	UNode: AnimNode_PoseDriver;
+	AxisLength: number;
+	ConeSubdivision: number;
+	bDrawDebugCones: boolean;
 	LastPreviewComponent: SkeletalMeshComponent;
 	static Load(ResourceName: string): AnimGraphNode_PoseDriver;
 	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_PoseDriver;
@@ -3871,9 +4163,9 @@ declare class AnimGraphNode_PoseDriver extends AnimGraphNode_PoseHandler {
 declare type ESnapshotSourceMode = 'NamedSnapshot' | 'SnapshotPin' | 'ESnapshotSourceMode_MAX';
 declare var ESnapshotSourceMode : { NamedSnapshot:'NamedSnapshot',SnapshotPin:'SnapshotPin',ESnapshotSourceMode_MAX:'ESnapshotSourceMode_MAX', };
 declare class AnimNode_PoseSnapshot extends AnimNode_Base { 
-	Mode: ESnapshotSourceMode;
 	SnapshotName: string;
 	Snapshot: PoseSnapshot;
+	Mode: ESnapshotSourceMode;
 	clone() : AnimNode_PoseSnapshot;
 	static C(Other: UObject | any): AnimNode_PoseSnapshot;
 }
@@ -3900,8 +4192,8 @@ declare class RandomPlayerSequenceEntry {
 }
 
 declare class AnimNode_RandomPlayer extends AnimNode_Base { 
-	bShuffleMode: boolean;
 	Entries: RandomPlayerSequenceEntry[];
+	bShuffleMode: boolean;
 	clone() : AnimNode_RandomPlayer;
 	static C(Other: UObject | any): AnimNode_RandomPlayer;
 }
@@ -3938,14 +4230,16 @@ declare class AnimNode_RigidBody extends AnimNode_SkeletalControlBase {
 	ComponentLinearAccScale: Vector;
 	ComponentLinearVelScale: Vector;
 	ComponentAppliedLinearAccClamp: Vector;
+	CachedBoundsScale: number;
+	BaseBoneRef: BoneReference;
 	OverlapChannel: ECollisionChannel;
-	bEnableWorldGeometry: boolean;
 	SimulationSpace: ESimulationSpace;
-	BaseBoneRef: BoneReference;
+	bForceDisableCollisionBetweenConstraintBodies: boolean;
+	bEnableWorldGeometry: boolean;
 	bOverrideWorldGravity: boolean;
-	CachedBoundsScale: number;
 	bTransferBoneVelocities: boolean;
 	bFreezeIncomingPoseOnStart: boolean;
+	bClampLinearTranslationLimitToRefPose: boolean;
 	bComponentSpaceSimulation: boolean;
 	clone() : AnimNode_RigidBody;
 	static C(Other: UObject | any): AnimNode_RigidBody;
@@ -3960,6 +4254,72 @@ declare class AnimGraphNode_RigidBody extends AnimGraphNode_SkeletalControlBase
 	static C(Other: UObject | any): AnimGraphNode_RigidBody;
 }
 
+declare class ChaosPhysicalMaterial extends UObject { 
+	Friction: number;
+	Restitution: number;
+	SleepingLinearVelocityThreshold: number;
+	SleepingAngularVelocityThreshold: number;
+	static Load(ResourceName: string): ChaosPhysicalMaterial;
+	static Find(Outer: UObject, ResourceName: string): ChaosPhysicalMaterial;
+	static GetDefaultObject(): ChaosPhysicalMaterial;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ChaosPhysicalMaterial;
+	static C(Other: UObject | any): ChaosPhysicalMaterial;
+}
+
+declare type EObjectStateTypeEnum = 'Chaos_Object_Sleeping' | 'Chaos_Object_Kinematic' | 'Chaos_Object_Static' | 'Chaos_Object_Dynamic' | 'Chaos_Object_UserDefined' | 'Chaos_Max';
+declare var EObjectStateTypeEnum : { Chaos_Object_Sleeping:'Chaos_Object_Sleeping',Chaos_Object_Kinematic:'Chaos_Object_Kinematic',Chaos_Object_Static:'Chaos_Object_Static',Chaos_Object_Dynamic:'Chaos_Object_Dynamic',Chaos_Object_UserDefined:'Chaos_Object_UserDefined',Chaos_Max:'Chaos_Max', };
+declare type ECollisionTypeEnum = 'Chaos_Volumetric' | 'Chaos_Surface_Volumetric' | 'Chaos_Max';
+declare var ECollisionTypeEnum : { Chaos_Volumetric:'Chaos_Volumetric',Chaos_Surface_Volumetric:'Chaos_Surface_Volumetric',Chaos_Max:'Chaos_Max', };
+declare type EInitialVelocityTypeEnum = 'Chaos_Initial_Velocity_User_Defined' | 'Chaos_Initial_Velocity_None' | 'Chaos_Max';
+declare var EInitialVelocityTypeEnum : { Chaos_Initial_Velocity_User_Defined:'Chaos_Initial_Velocity_User_Defined',Chaos_Initial_Velocity_None:'Chaos_Initial_Velocity_None',Chaos_Max:'Chaos_Max', };
+declare class AnimNode_RigidBody_Chaos extends AnimNode_SkeletalControlBase { 
+	OverridePhysicsAsset: PhysicsAsset;
+	PhysicalMaterial: ChaosPhysicalMaterial;
+	bSimulating: boolean;
+	NumIterations: number;
+	bNotifyCollisions: boolean;
+	ObjectType: EObjectStateTypeEnum;
+	Density: number;
+	MinMass: number;
+	MaxMass: number;
+	CollisionType: ECollisionTypeEnum;
+	ImplicitShapeParticlesPerUnitArea: number;
+	ImplicitShapeMinNumParticles: number;
+	ImplicitShapeMaxNumParticles: number;
+	MinLevelSetResolution: number;
+	MaxLevelSetResolution: number;
+	CollisionGroup: number;
+	InitialVelocityType: EInitialVelocityTypeEnum;
+	InitialLinearVelocity: Vector;
+	InitialAngularVelocity: Vector;
+	OverrideWorldGravity: Vector;
+	ExternalForce: Vector;
+	ComponentLinearAccScale: Vector;
+	ComponentLinearVelScale: Vector;
+	ComponentAppliedLinearAccClamp: Vector;
+	CachedBoundsScale: number;
+	BaseBoneRef: BoneReference;
+	OverlapChannel: ECollisionChannel;
+	SimulationSpace: ESimulationSpace;
+	bForceDisableCollisionBetweenConstraintBodies: boolean;
+	bEnableWorldGeometry: boolean;
+	bOverrideWorldGravity: boolean;
+	bTransferBoneVelocities: boolean;
+	bFreezeIncomingPoseOnStart: boolean;
+	bClampLinearTranslationLimitToRefPose: boolean;
+	clone() : AnimNode_RigidBody_Chaos;
+	static C(Other: UObject | any): AnimNode_RigidBody_Chaos;
+}
+
+declare class AnimGraphNode_RigidBody_Chaos extends AnimGraphNode_SkeletalControlBase { 
+	UNode: AnimNode_RigidBody_Chaos;
+	static Load(ResourceName: string): AnimGraphNode_RigidBody_Chaos;
+	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_RigidBody_Chaos;
+	static GetDefaultObject(): AnimGraphNode_RigidBody_Chaos;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_RigidBody_Chaos;
+	static C(Other: UObject | any): AnimGraphNode_RigidBody_Chaos;
+}
+
 declare class AnimGraphNode_Root extends AnimGraphNode_Base { 
 	UNode: AnimNode_Root;
 	static Load(ResourceName: string): AnimGraphNode_Root;
@@ -3976,8 +4336,6 @@ declare class AnimNode_RotateRootBone extends AnimNode_Base {
 	PitchScaleBiasClamp: InputScaleBiasClamp;
 	YawScaleBiasClamp: InputScaleBiasClamp;
 	MeshToComponent: Rotator;
-	ActualPitch: number;
-	ActualYaw: number;
 	clone() : AnimNode_RotateRootBone;
 	static C(Other: UObject | any): AnimNode_RotateRootBone;
 }
@@ -4013,15 +4371,13 @@ declare class AnimGraphNode_RotationMultiplier extends AnimGraphNode_SkeletalCon
 declare class AnimNode_RotationOffsetBlendSpace extends AnimNode_BlendSpacePlayer { 
 	BasePose: PoseLink;
 	LODThreshold: number;
-	bIsLODEnabled: boolean;
-	AlphaInputType: EAnimAlphaInputType;
 	Alpha: number;
 	AlphaScaleBias: InputScaleBias;
-	ActualAlpha: number;
-	bAlphaBoolEnabled: boolean;
 	AlphaBoolBlend: InputAlphaBoolBlend;
 	AlphaCurveName: string;
 	AlphaScaleBiasClamp: InputScaleBiasClamp;
+	AlphaInputType: EAnimAlphaInputType;
+	bAlphaBoolEnabled: boolean;
 	clone() : AnimNode_RotationOffsetBlendSpace;
 	static C(Other: UObject | any): AnimNode_RotationOffsetBlendSpace;
 }
@@ -4038,7 +4394,6 @@ declare class AnimGraphNode_RotationOffsetBlendSpace extends AnimGraphNode_Blend
 declare class AnimNode_SaveCachedPose extends AnimNode_Base { 
 	Pose: PoseLink;
 	CachePoseName: string;
-	GlobalWeight: number;
 	clone() : AnimNode_SaveCachedPose;
 	static C(Other: UObject | any): AnimNode_SaveCachedPose;
 }
@@ -4060,12 +4415,10 @@ declare class AnimNode_ScaleChainLength extends AnimNode_Base {
 	DefaultChainLength: number;
 	ChainStartBone: BoneReference;
 	ChainEndBone: BoneReference;
-	ChainInitialLength: EScaleChainInitialLength;
 	TargetLocation: Vector;
 	Alpha: number;
-	ActualAlpha: number;
 	AlphaScaleBias: InputScaleBias;
-	bBoneIndicesCached: boolean;
+	ChainInitialLength: EScaleChainInitialLength;
 	clone() : AnimNode_ScaleChainLength;
 	static C(Other: UObject | any): AnimNode_ScaleChainLength;
 }
@@ -4086,9 +4439,8 @@ declare class AnimNode_SequenceEvaluator extends AnimNode_AssetPlayerBase {
 	ExplicitTime: number;
 	bShouldLoop: boolean;
 	bTeleportToExplicitTime: boolean;
-	StartPosition: number;
 	ReinitializationBehavior: ESequenceEvalReinit;
-	bReinitialized: boolean;
+	StartPosition: number;
 	clone() : AnimNode_SequenceEvaluator;
 	static C(Other: UObject | any): AnimNode_SequenceEvaluator;
 }
@@ -4104,11 +4456,11 @@ declare class AnimGraphNode_SequenceEvaluator extends AnimGraphNode_AssetPlayerB
 
 declare class AnimNode_SequencePlayer extends AnimNode_AssetPlayerBase { 
 	Sequence: AnimSequenceBase;
-	bLoopAnimation: boolean;
 	PlayRateBasis: number;
 	PlayRate: number;
 	PlayRateScaleBiasClamp: InputScaleBiasClamp;
 	StartPosition: number;
+	bLoopAnimation: boolean;
 	clone() : AnimNode_SequencePlayer;
 	static C(Other: UObject | any): AnimNode_SequencePlayer;
 }
@@ -4141,13 +4493,6 @@ declare class AnimGraphNode_Slot extends AnimGraphNode_Base {
 
 declare type ESplineBoneAxis = 'X' | 'Y' | 'Z' | 'ESplineBoneAxis_MAX';
 declare var ESplineBoneAxis : { X:'X',Y:'Y',Z:'Z',ESplineBoneAxis_MAX:'ESplineBoneAxis_MAX', };
-declare class SplineIKCachedBoneData { 
-	Bone: BoneReference;
-	RefSkeletonIndex: number;
-	clone() : SplineIKCachedBoneData;
-	static C(Other: UObject | any): SplineIKCachedBoneData;
-}
-
 declare class AnimNode_SplineIK extends AnimNode_SkeletalControlBase { 
 	StartBone: BoneReference;
 	EndBone: BoneReference;
@@ -4161,11 +4506,6 @@ declare class AnimNode_SplineIK extends AnimNode_SkeletalControlBase {
 	TwistBlend: AlphaBlend;
 	Stretch: number;
 	Offset: number;
-	BoneSpline: SplineCurves;
-	OriginalSplineLength: number;
-	CachedBoneReferences: SplineIKCachedBoneData[];
-	CachedBoneLengths: number[];
-	CachedOffsetRotations: Quat[];
 	clone() : AnimNode_SplineIK;
 	static C(Other: UObject | any): AnimNode_SplineIK;
 }
@@ -4181,12 +4521,12 @@ declare class AnimGraphNode_SplineIK extends AnimGraphNode_SkeletalControlBase {
 
 declare class AnimNode_SpringBone extends AnimNode_SkeletalControlBase { 
 	SpringBone: BoneReference;
-	bLimitDisplacement: boolean;
 	MaxDisplacement: number;
 	SpringStiffness: number;
 	SpringDamping: number;
 	ErrorResetThresh: number;
 	bNoZSpring: boolean;
+	bLimitDisplacement: boolean;
 	bTranslateX: boolean;
 	bTranslateY: boolean;
 	bTranslateZ: boolean;
@@ -4211,8 +4551,6 @@ declare class AnimNode_StateMachine extends AnimNode_Base {
 	MaxTransitionsPerFrame: number;
 	bSkipFirstUpdateTransition: boolean;
 	bReinitializeOnBecomingRelevant: boolean;
-	CurrentState: number;
-	ElapsedTime: number;
 	clone() : AnimNode_StateMachine;
 	static C(Other: UObject | any): AnimNode_StateMachine;
 }
@@ -4227,12 +4565,36 @@ declare class AnimGraphNode_StateMachine extends AnimGraphNode_StateMachineBase
 }
 
 declare class AnimNode_SubInput extends AnimNode_Base { 
+	Name: string;
+	Graph: string;
+	InputPose: PoseLink;
 	clone() : AnimNode_SubInput;
 	static C(Other: UObject | any): AnimNode_SubInput;
 }
 
+declare class AnimBlueprintFunctionPinInfo { 
+	Name: string;
+	Type: EdGraphPinType;
+	clone() : AnimBlueprintFunctionPinInfo;
+	static C(Other: UObject | any): AnimBlueprintFunctionPinInfo;
+}
+
+declare class MemberReference { 
+	MemberParent: UObject;
+	MemberScope: string;
+	MemberName: string;
+	MemberGuid: Guid;
+	bSelfContext: boolean;
+	bWasDeprecated: boolean;
+	clone() : MemberReference;
+	static C(Other: UObject | any): MemberReference;
+}
+
 declare class AnimGraphNode_SubInput extends AnimGraphNode_Base { 
 	UNode: AnimNode_SubInput;
+	Inputs: AnimBlueprintFunctionPinInfo[];
+	FunctionReference: MemberReference;
+	InputPoseIndex: number;
 	static Load(ResourceName: string): AnimGraphNode_SubInput;
 	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_SubInput;
 	static GetDefaultObject(): AnimGraphNode_SubInput;
@@ -4240,23 +4602,8 @@ declare class AnimGraphNode_SubInput extends AnimGraphNode_Base {
 	static C(Other: UObject | any): AnimGraphNode_SubInput;
 }
 
-declare class AnimNode_SubInstance extends AnimNode_Base { 
-	InPose: PoseLink;
-	InstanceClass: UnrealEngineClass;
-	Tag: string;
-	InstanceToRun: AnimInstance;
-	InstanceProperties: Property[];
-	SubInstanceProperties: Property[];
-	SourcePropertyNames: string[];
-	DestPropertyNames: string[];
-	clone() : AnimNode_SubInstance;
-	static C(Other: UObject | any): AnimNode_SubInstance;
-}
-
-declare class AnimGraphNode_SubInstance extends AnimGraphNode_Base { 
+declare class AnimGraphNode_SubInstance extends AnimGraphNode_SubInstanceBase { 
 	UNode: AnimNode_SubInstance;
-	KnownExposableProperties: string[];
-	ExposedPropertyNames: string[];
 	static Load(ResourceName: string): AnimGraphNode_SubInstance;
 	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_SubInstance;
 	static GetDefaultObject(): AnimGraphNode_SubInstance;
@@ -4287,7 +4634,7 @@ declare class AnimNode_Trail extends AnimNode_SkeletalControlBase {
 	bShowLimit: boolean;
 	DebugLifeTime: number;
 	TrailRelaxation: number;
-	UnwindingSize: any;
+	MaxDeltaTime: number;
 	RelaxationSpeedScale: number;
 	TrailRelaxationSpeed: RuntimeFloatCurve;
 	RelaxationSpeedScaleInputProcessor: InputScaleBiasClamp;
@@ -4317,10 +4664,9 @@ declare var EEvaluatorDataSource : { EDS_SourcePose:'EDS_SourcePose',EDS_Destina
 declare type EEvaluatorMode = 'EM_Standard' | 'EM_Freeze' | 'EM_DelayedFreeze' | 'EM_MAX';
 declare var EEvaluatorMode : { EM_Standard:'EM_Standard',EM_Freeze:'EM_Freeze',EM_DelayedFreeze:'EM_DelayedFreeze',EM_MAX:'EM_MAX', };
 declare class AnimNode_TransitionPoseEvaluator extends AnimNode_Base { 
+	FramesToCachePose: number;
 	DataSource: EEvaluatorDataSource;
 	EvaluatorMode: EEvaluatorMode;
-	FramesToCachePose: number;
-	CacheFramesRemaining: number;
 	clone() : AnimNode_TransitionPoseEvaluator;
 	static C(Other: UObject | any): AnimNode_TransitionPoseEvaluator;
 }
@@ -4370,23 +4716,23 @@ declare class AnimGraphNode_TwistCorrectiveNode extends AnimGraphNode_SkeletalCo
 
 declare class AnimNode_TwoBoneIK extends AnimNode_SkeletalControlBase { 
 	IKBone: BoneReference;
-	bAllowStretching: boolean;
 	StartStretchRatio: number;
 	MaxStretchScale: number;
 	StretchLimits: Vector2D;
-	bTakeRotationFromEffectorSpace: boolean;
-	bMaintainEffectorRelRot: boolean;
-	EffectorLocationSpace: EBoneControlSpace;
+	bNoTwist: boolean;
+	JointTargetSpaceBoneName: string;
 	EffectorSpaceBoneName: string;
 	EffectorLocation: Vector;
 	EffectorTarget: BoneSocketTarget;
-	JointTargetLocationSpace: EBoneControlSpace;
 	JointTargetLocation: Vector;
-	JointTargetSpaceBoneName: string;
 	JointTarget: BoneSocketTarget;
-	bAllowTwist: boolean;
 	TwistAxis: Axis;
-	bNoTwist: boolean;
+	EffectorLocationSpace: EBoneControlSpace;
+	JointTargetLocationSpace: EBoneControlSpace;
+	bAllowStretching: boolean;
+	bTakeRotationFromEffectorSpace: boolean;
+	bMaintainEffectorRelRot: boolean;
+	bAllowTwist: boolean;
 	clone() : AnimNode_TwoBoneIK;
 	static C(Other: UObject | any): AnimNode_TwoBoneIK;
 }
@@ -4405,16 +4751,13 @@ declare class AnimNode_TwoWayBlend extends AnimNode_Base {
 	A: PoseLink;
 	B: PoseLink;
 	AlphaInputType: EAnimAlphaInputType;
+	bAlphaBoolEnabled: boolean;
+	bResetChildOnActivation: boolean;
 	Alpha: number;
 	AlphaScaleBias: InputScaleBias;
-	bAlphaBoolEnabled: boolean;
 	AlphaBoolBlend: InputAlphaBoolBlend;
 	AlphaCurveName: string;
 	AlphaScaleBiasClamp: InputScaleBiasClamp;
-	InternalBlendAlpha: number;
-	bAIsRelevant: boolean;
-	bBIsRelevant: boolean;
-	bResetChildOnActivation: boolean;
 	clone() : AnimNode_TwoWayBlend;
 	static C(Other: UObject | any): AnimNode_TwoWayBlend;
 }
@@ -4564,17 +4907,6 @@ declare class AnimStateTransitionNode extends AnimStateNodeBase {
 	static C(Other: UObject | any): AnimStateTransitionNode;
 }
 
-declare class MemberReference { 
-	MemberParent: UObject;
-	MemberScope: string;
-	MemberName: string;
-	MemberGuid: Guid;
-	bSelfContext: boolean;
-	bWasDeprecated: boolean;
-	clone() : MemberReference;
-	static C(Other: UObject | any): MemberReference;
-}
-
 declare class K2Node_CallFunction extends K2Node { 
 	bIsPureFunc: boolean;
 	bIsConstFunc: boolean;
@@ -4699,6 +5031,7 @@ declare class BlueprintEditorSettings extends UObject {
 	bSplitContextTargetSettings: boolean;
 	bExposeAllMemberComponentFunctions: boolean;
 	bShowContextualFavorites: boolean;
+	bExposeDeprecatedFunctions: boolean;
 	bCompactCallOnMemberNodes: boolean;
 	bFlattenFavoritesMenus: boolean;
 	bFavorPureCastNodes: boolean;
@@ -4998,6 +5331,8 @@ declare class KismetUserDeclaredFunctionMetadata {
 	Keywords: string;
 	CompactNodeTitle: string;
 	InstanceTitleColor: LinearColor;
+	DeprecationMessage: string;
+	bIsDeprecated: boolean;
 	bCallInEditor: boolean;
 	HasLatentFunctions: any;
 	clone() : KismetUserDeclaredFunctionMetadata;
@@ -5026,6 +5361,14 @@ declare class K2Node_Composite extends K2Node_Tunnel {
 	static C(Other: UObject | any): K2Node_Composite;
 }
 
+declare class K2Node_ConstructObjectFromClass extends K2Node { 
+	static Load(ResourceName: string): K2Node_ConstructObjectFromClass;
+	static Find(Outer: UObject, ResourceName: string): K2Node_ConstructObjectFromClass;
+	static GetDefaultObject(): K2Node_ConstructObjectFromClass;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_ConstructObjectFromClass;
+	static C(Other: UObject | any): K2Node_ConstructObjectFromClass;
+}
+
 declare class K2Node_ConvertAsset extends K2Node { 
 	static Load(ResourceName: string): K2Node_ConvertAsset;
 	static Find(Outer: UObject, ResourceName: string): K2Node_ConvertAsset;
@@ -5053,6 +5396,8 @@ declare class K2Node_CreateDelegate extends K2Node {
 }
 
 declare class K2Node_CustomEvent extends K2Node_Event { 
+	DeprecationMessage: string;
+	bIsDeprecated: boolean;
 	bCallInEditor: boolean;
 	static Load(ResourceName: string): K2Node_CustomEvent;
 	static Find(Outer: UObject, ResourceName: string): K2Node_CustomEvent;
@@ -5291,6 +5636,39 @@ declare class K2Node_GetNumEnumEntries extends K2Node {
 	static C(Other: UObject | any): K2Node_GetNumEnumEntries;
 }
 
+declare class K2Node_GetSubsystem extends K2Node { 
+	CustomClass: UnrealEngineClass;
+	static Load(ResourceName: string): K2Node_GetSubsystem;
+	static Find(Outer: UObject, ResourceName: string): K2Node_GetSubsystem;
+	static GetDefaultObject(): K2Node_GetSubsystem;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_GetSubsystem;
+	static C(Other: UObject | any): K2Node_GetSubsystem;
+}
+
+declare class K2Node_GetSubsystemFromPC extends K2Node_GetSubsystem { 
+	static Load(ResourceName: string): K2Node_GetSubsystemFromPC;
+	static Find(Outer: UObject, ResourceName: string): K2Node_GetSubsystemFromPC;
+	static GetDefaultObject(): K2Node_GetSubsystemFromPC;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_GetSubsystemFromPC;
+	static C(Other: UObject | any): K2Node_GetSubsystemFromPC;
+}
+
+declare class K2Node_GetEngineSubsystem extends K2Node_GetSubsystem { 
+	static Load(ResourceName: string): K2Node_GetEngineSubsystem;
+	static Find(Outer: UObject, ResourceName: string): K2Node_GetEngineSubsystem;
+	static GetDefaultObject(): K2Node_GetEngineSubsystem;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_GetEngineSubsystem;
+	static C(Other: UObject | any): K2Node_GetEngineSubsystem;
+}
+
+declare class K2Node_GetEditorSubsystem extends K2Node_GetSubsystem { 
+	static Load(ResourceName: string): K2Node_GetEditorSubsystem;
+	static Find(Outer: UObject, ResourceName: string): K2Node_GetEditorSubsystem;
+	static GetDefaultObject(): K2Node_GetEditorSubsystem;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_GetEditorSubsystem;
+	static C(Other: UObject | any): K2Node_GetEditorSubsystem;
+}
+
 declare class K2Node_IfThenElse extends K2Node { 
 	static Load(ResourceName: string): K2Node_IfThenElse;
 	static Find(Outer: UObject, ResourceName: string): K2Node_IfThenElse;
@@ -5771,17 +6149,28 @@ declare class AnimSequencerInstance extends AnimCustomInstance {
 	static C(Other: UObject | any): AnimSequencerInstance;
 }
 
+declare class PositionHistory { 
+	Positions: Vector[];
+	Range: number;
+	clone() : PositionHistory;
+	static C(Other: UObject | any): PositionHistory;
+}
+
 declare class KismetAnimationLibrary extends BlueprintFunctionLibrary { 
 	static Load(ResourceName: string): KismetAnimationLibrary;
 	static Find(Outer: UObject, ResourceName: string): KismetAnimationLibrary;
 	static GetDefaultObject(): KismetAnimationLibrary;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetAnimationLibrary;
 	static K2_TwoBoneIK(RootPos: Vector,JointPos: Vector,EndPos: Vector,JointTarget: Vector,Effector: Vector,OutJointPos?: Vector,OutEndPos?: Vector,bAllowStretching?: boolean,StartStretchRatio?: number,MaxStretchScale?: number): {OutJointPos: Vector, OutEndPos: Vector};
+	static K2_StartProfilingTimer(): void;
 	static K2_MakePerlinNoiseVectorAndRemap(X: number,Y: number,Z: number,RangeOutMinX: number,RangeOutMaxX: number,RangeOutMinY: number,RangeOutMaxY: number,RangeOutMinZ: number,RangeOutMaxZ: number): Vector;
 	static K2_MakePerlinNoiseAndRemap(Value: number,RangeOutMin: number,RangeOutMax: number): number;
 	static K2_LookAt(CurrentTransform: Transform,TargetPosition: Vector,LookAtVector: Vector,bUseUpVector: boolean,UpVector: Vector,ClampConeInDegree: number): Transform;
+	static K2_EndProfilingTimer(bLog: boolean,LogPrefix: string): number;
 	static K2_DistanceBetweenTwoSocketsAndMapRange(Component: SkeletalMeshComponent,SocketOrBoneNameA: string,SocketSpaceA: ERelativeTransformSpace,SocketOrBoneNameB: string,SocketSpaceB: ERelativeTransformSpace,bRemapRange: boolean,InRangeMin: number,InRangeMax: number,OutRangeMin: number,OutRangeMax: number): number;
 	static K2_DirectionBetweenSockets(Component: SkeletalMeshComponent,SocketOrBoneNameFrom: string,SocketOrBoneNameTo: string): Vector;
+	static K2_CalculateVelocityFromSockets(DeltaSeconds: number,Component: SkeletalMeshComponent,SocketOrBoneName: string,ReferenceSocketOrBone: string,SocketSpace: ERelativeTransformSpace,OffsetInBoneSpace: Vector,History?: PositionHistory,NumberOfSamples?: number,VelocityMin?: number,VelocityMax?: number,EasingType?: EEasingFuncType,CustomCurve?: RuntimeFloatCurve): {History: PositionHistory, $: number};
+	static K2_CalculateVelocityFromPositionHistory(DeltaSeconds: number,Position: Vector,History?: PositionHistory,NumberOfSamples?: number,VelocityMin?: number,VelocityMax?: number): {History: PositionHistory, $: number};
 	static C(Other: UObject | any): KismetAnimationLibrary;
 }
 
@@ -5824,6 +6213,8 @@ declare class MovieScene3DConstraintSection extends MovieSceneSection {
 	static Find(Outer: UObject, ResourceName: string): MovieScene3DConstraintSection;
 	static GetDefaultObject(): MovieScene3DConstraintSection;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScene3DConstraintSection;
+	SetConstraintBindingID(InConstraintBindingID: MovieSceneObjectBindingID): void;
+	GetConstraintBindingID(): MovieSceneObjectBindingID;
 	static C(Other: UObject | any): MovieScene3DConstraintSection;
 }
 
@@ -5941,6 +6332,7 @@ declare class MovieSceneActorReferenceTrack extends MovieScenePropertyTrack {
 
 declare class MovieSceneAudioSection extends MovieSceneSection { 
 	Sound: SoundBase;
+	StartFrameOffset: FrameNumber;
 	StartOffset: number;
 	AudioStartTime: number;
 	AudioDilationFactor: number;
@@ -5957,6 +6349,10 @@ declare class MovieSceneAudioSection extends MovieSceneSection {
 	static Find(Outer: UObject, ResourceName: string): MovieSceneAudioSection;
 	static GetDefaultObject(): MovieSceneAudioSection;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneAudioSection;
+	SetStartOffset(InStartOffset: FrameNumber): void;
+	SetSound(InSound: SoundBase): void;
+	GetStartOffset(): FrameNumber;
+	GetSound(): SoundBase;
 	static C(Other: UObject | any): MovieSceneAudioSection;
 }
 
@@ -6069,6 +6465,8 @@ declare class MovieSceneCameraCutSection extends MovieSceneSection {
 	static Find(Outer: UObject, ResourceName: string): MovieSceneCameraCutSection;
 	static GetDefaultObject(): MovieSceneCameraCutSection;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCameraCutSection;
+	SetCameraBindingID(InCameraBindingID: MovieSceneObjectBindingID): void;
+	GetCameraBindingID(): MovieSceneObjectBindingID;
 	static C(Other: UObject | any): MovieSceneCameraCutSection;
 }
 
@@ -6136,6 +6534,8 @@ declare class MovieSceneSubSection extends MovieSceneSection {
 	static Find(Outer: UObject, ResourceName: string): MovieSceneSubSection;
 	static GetDefaultObject(): MovieSceneSubSection;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneSubSection;
+	SetSequence(Sequence: MovieSceneSequence): void;
+	GetSequence(): MovieSceneSequence;
 	static C(Other: UObject | any): MovieSceneSubSection;
 }
 
@@ -6147,6 +6547,8 @@ declare class MovieSceneCinematicShotSection extends MovieSceneSubSection {
 	static Find(Outer: UObject, ResourceName: string): MovieSceneCinematicShotSection;
 	static GetDefaultObject(): MovieSceneCinematicShotSection;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneCinematicShotSection;
+	SetShotDisplayName(InShotDisplayName: string): void;
+	GetShotDisplayName(): string;
 	static C(Other: UObject | any): MovieSceneCinematicShotSection;
 }
 
@@ -6225,6 +6627,9 @@ declare class MovieSceneEventSectionBase extends MovieSceneSection {
 
 declare class MovieSceneEvent { 
 	FunctionName: string;
+	SoftBlueprintPath: Blueprint;
+	GraphGuid: Guid;
+	CachedFunctionEntry: any;
 	FunctionEntry: any;
 	clone() : MovieSceneEvent;
 	static C(Other: UObject | any): MovieSceneEvent;
@@ -6383,6 +6788,10 @@ declare class MovieSceneLevelVisibilitySection extends MovieSceneSection {
 	static Find(Outer: UObject, ResourceName: string): MovieSceneLevelVisibilitySection;
 	static GetDefaultObject(): MovieSceneLevelVisibilitySection;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneLevelVisibilitySection;
+	SetVisibility(InVisibility: ELevelVisibility): void;
+	SetLevelNames(InLevelNames: string[]): void;
+	GetVisibility(): ELevelVisibility;
+	GetLevelNames(): string[];
 	static C(Other: UObject | any): MovieSceneLevelVisibilitySection;
 }
 
@@ -6413,6 +6822,40 @@ declare class MovieSceneComponentMaterialTrack extends MovieSceneMaterialTrack {
 	static C(Other: UObject | any): MovieSceneComponentMaterialTrack;
 }
 
+declare class MovieSceneObjectPathChannelKeyValue { 
+	SoftPtr: UObject;
+	HardPtr: UObject;
+	clone() : MovieSceneObjectPathChannelKeyValue;
+	static C(Other: UObject | any): MovieSceneObjectPathChannelKeyValue;
+}
+
+declare class MovieSceneObjectPathChannel extends MovieSceneChannel { 
+	PropertyClass: UnrealEngineClass;
+	Times: FrameNumber[];
+	Values: MovieSceneObjectPathChannelKeyValue[];
+	DefaultValue: MovieSceneObjectPathChannelKeyValue;
+	clone() : MovieSceneObjectPathChannel;
+	static C(Other: UObject | any): MovieSceneObjectPathChannel;
+}
+
+declare class MovieSceneObjectPropertySection extends MovieSceneSection { 
+	ObjectChannel: MovieSceneObjectPathChannel;
+	static Load(ResourceName: string): MovieSceneObjectPropertySection;
+	static Find(Outer: UObject, ResourceName: string): MovieSceneObjectPropertySection;
+	static GetDefaultObject(): MovieSceneObjectPropertySection;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneObjectPropertySection;
+	static C(Other: UObject | any): MovieSceneObjectPropertySection;
+}
+
+declare class MovieSceneObjectPropertyTrack extends MovieScenePropertyTrack { 
+	PropertyClass: UnrealEngineClass;
+	static Load(ResourceName: string): MovieSceneObjectPropertyTrack;
+	static Find(Outer: UObject, ResourceName: string): MovieSceneObjectPropertyTrack;
+	static GetDefaultObject(): MovieSceneObjectPropertyTrack;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneObjectPropertyTrack;
+	static C(Other: UObject | any): MovieSceneObjectPropertyTrack;
+}
+
 declare class ScalarParameterNameAndCurve { 
 	ParameterName: string;
 	ParameterCurve: MovieSceneFloatChannel;
@@ -6482,15 +6925,36 @@ declare class MovieSceneParticleTrack extends MovieSceneNameableTrack {
 	static C(Other: UObject | any): MovieSceneParticleTrack;
 }
 
+declare class MovieScenePrimitiveMaterialSection extends MovieSceneSection { 
+	MaterialChannel: MovieSceneObjectPathChannel;
+	static Load(ResourceName: string): MovieScenePrimitiveMaterialSection;
+	static Find(Outer: UObject, ResourceName: string): MovieScenePrimitiveMaterialSection;
+	static GetDefaultObject(): MovieScenePrimitiveMaterialSection;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScenePrimitiveMaterialSection;
+	static C(Other: UObject | any): MovieScenePrimitiveMaterialSection;
+}
+
+declare class MovieScenePrimitiveMaterialTrack extends MovieScenePropertyTrack { 
+	MaterialIndex: number;
+	static Load(ResourceName: string): MovieScenePrimitiveMaterialTrack;
+	static Find(Outer: UObject, ResourceName: string): MovieScenePrimitiveMaterialTrack;
+	static GetDefaultObject(): MovieScenePrimitiveMaterialTrack;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScenePrimitiveMaterialTrack;
+	static C(Other: UObject | any): MovieScenePrimitiveMaterialTrack;
+}
+
 declare class MovieSceneSkeletalAnimationParams { 
 	Animation: AnimSequenceBase;
-	StartOffset: number;
-	EndOffset: number;
+	StartFrameOffset: FrameNumber;
+	EndFrameOffset: FrameNumber;
 	PlayRate: number;
 	bReverse: boolean;
 	SlotName: string;
 	Weight: MovieSceneFloatChannel;
 	bSkipAnimNotifiers: boolean;
+	bForceCustomMode: boolean;
+	StartOffset: number;
+	EndOffset: number;
 	clone() : MovieSceneSkeletalAnimationParams;
 	static C(Other: UObject | any): MovieSceneSkeletalAnimationParams;
 }
@@ -6667,6 +7131,14 @@ declare class TimeSynchronizationSource extends UObject {
 	static C(Other: UObject | any): TimeSynchronizationSource;
 }
 
+declare class MovieScenePlaybackClient extends Interface { 
+	static Load(ResourceName: string): MovieScenePlaybackClient;
+	static Find(Outer: UObject, ResourceName: string): MovieScenePlaybackClient;
+	static GetDefaultObject(): MovieScenePlaybackClient;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScenePlaybackClient;
+	static C(Other: UObject | any): MovieScenePlaybackClient;
+}
+
 declare class MovieSceneBindingOverrideData { 
 	ObjectBindingId: MovieSceneObjectBindingID;
 	UObject: any;
@@ -6684,14 +7156,6 @@ declare class MovieSceneBindingOverrides extends UObject {
 	static C(Other: UObject | any): MovieSceneBindingOverrides;
 }
 
-declare class MovieSceneBindingOverridesInterface extends Interface { 
-	static Load(ResourceName: string): MovieSceneBindingOverridesInterface;
-	static Find(Outer: UObject, ResourceName: string): MovieSceneBindingOverridesInterface;
-	static GetDefaultObject(): MovieSceneBindingOverridesInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneBindingOverridesInterface;
-	static C(Other: UObject | any): MovieSceneBindingOverridesInterface;
-}
-
 declare class MovieSceneBindingOwnerInterface extends Interface { 
 	static Load(ResourceName: string): MovieSceneBindingOwnerInterface;
 	static Find(Outer: UObject, ResourceName: string): MovieSceneBindingOwnerInterface;
@@ -6739,11 +7203,18 @@ declare class MovieSceneKeyProxy extends Interface {
 
 declare type EMovieScenePlayerStatus = 'Stopped' | 'Playing' | 'Recording' | 'Scrubbing' | 'Jumping' | 'Stepping' | 'Paused' | 'MAX';
 declare var EMovieScenePlayerStatus : { Stopped:'Stopped',Playing:'Playing',Recording:'Recording',Scrubbing:'Scrubbing',Jumping:'Jumping',Stepping:'Stepping',Paused:'Paused',MAX:'MAX', };
+declare class MovieSceneSequenceLoopCount { 
+	Value: number;
+	clone() : MovieSceneSequenceLoopCount;
+	static C(Other: UObject | any): MovieSceneSequenceLoopCount;
+}
+
 declare class MovieSceneSequencePlaybackSettings { 
-	LoopCount: number;
+	bAutoPlay: boolean;
+	LoopCount: MovieSceneSequenceLoopCount;
 	PlayRate: number;
-	bRandomStartTime: boolean;
 	StartTime: number;
+	bRandomStartTime: boolean;
 	bRestoreState: boolean;
 	bDisableMovementInput: boolean;
 	bDisableLookAtInput: boolean;
@@ -6751,8 +7222,6 @@ declare class MovieSceneSequencePlaybackSettings {
 	bHideHud: boolean;
 	bDisableCameraCuts: boolean;
 	bPauseAtEnd: boolean;
-	InstanceData: UObject;
-	BindingOverrides: any;
 	clone() : MovieSceneSequencePlaybackSettings;
 	static C(Other: UObject | any): MovieSceneSequencePlaybackSettings;
 }
@@ -6763,6 +7232,16 @@ declare class MovieSceneRootEvaluationTemplateInstance {
 	static C(Other: UObject | any): MovieSceneRootEvaluationTemplateInstance;
 }
 
+declare class MovieSceneSequenceReplProperties { 
+	LastKnownPosition: FrameTime;
+	LastKnownStatus: EMovieScenePlayerStatus;
+	LastKnownNumLoops: number;
+	clone() : MovieSceneSequenceReplProperties;
+	static C(Other: UObject | any): MovieSceneSequenceReplProperties;
+}
+
+declare type EUpdatePositionMethod = 'Play' | 'Jump' | 'Scrub' | 'EUpdatePositionMethod_MAX';
+declare var EUpdatePositionMethod : { Play:'Play',Jump:'Jump',Scrub:'Scrub',EUpdatePositionMethod_MAX:'EUpdatePositionMethod_MAX', };
 declare class MovieSceneSequencePlayer extends UObject { 
 	OnPlay: UnrealEngineMulticastDelegate<() => void>;
 	OnPlayReverse: UnrealEngineMulticastDelegate<() => void>;
@@ -6777,10 +7256,13 @@ declare class MovieSceneSequencePlayer extends UObject {
 	CurrentNumLoops: number;
 	PlaybackSettings: MovieSceneSequencePlaybackSettings;
 	RootTemplateInstance: MovieSceneRootEvaluationTemplateInstance;
+	NetSyncProps: MovieSceneSequenceReplProperties;
+	PlaybackClient: any;
 	static Load(ResourceName: string): MovieSceneSequencePlayer;
 	static Find(Outer: UObject, ResourceName: string): MovieSceneSequencePlayer;
 	static GetDefaultObject(): MovieSceneSequencePlayer;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneSequencePlayer;
+	StopAtCurrentTime(): void;
 	Stop(): void;
 	SetTimeRange(StartTime: number,Duration: number): void;
 	SetPlayRate(PlayRate: number): void;
@@ -6790,9 +7272,13 @@ declare class MovieSceneSequencePlayer extends UObject {
 	SetFrameRange(StartFrame: number,Duration: number): void;
 	SetDisableCameraCuts(bInDisableCameraCuts: boolean): void;
 	ScrubToSeconds(TimeInSeconds: number): void;
+	ScrubToMarkedFrame(InLabel: string): boolean;
 	ScrubToFrame(NewPosition: FrameTime): void;
 	Scrub(): void;
+	RPC_OnStopEvent(StoppedTime: FrameTime): void;
+	RPC_ExplicitServerUpdateEvent(Method: EUpdatePositionMethod,RelevantTime: FrameTime): void;
 	PlayToSeconds(TimeInSeconds: number): void;
+	PlayToMarkedFrame(InLabel: string): boolean;
 	PlayToFrame(NewPosition: FrameTime): void;
 	PlayReverse(): void;
 	PlayLooping(NumLoops: number): void;
@@ -6800,6 +7286,7 @@ declare class MovieSceneSequencePlayer extends UObject {
 	Pause(): void;
 	JumpToSeconds(TimeInSeconds: number): void;
 	JumpToPosition(NewPlaybackPosition: number): void;
+	JumpToMarkedFrame(InLabel: string): boolean;
 	JumpToFrame(NewPosition: FrameTime): void;
 	IsReversed(): boolean;
 	IsPlaying(): boolean;
@@ -6860,6 +7347,14 @@ declare class DefaultLevelSequenceInstanceData extends UObject {
 	static C(Other: UObject | any): DefaultLevelSequenceInstanceData;
 }
 
+declare class LevelSequenceMetaData extends Interface { 
+	static Load(ResourceName: string): LevelSequenceMetaData;
+	static Find(Outer: UObject, ResourceName: string): LevelSequenceMetaData;
+	static GetDefaultObject(): LevelSequenceMetaData;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelSequenceMetaData;
+	static C(Other: UObject | any): LevelSequenceMetaData;
+}
+
 declare class LevelSequenceObjectReferenceMap { 
 	clone() : LevelSequenceObjectReferenceMap;
 	static C(Other: UObject | any): LevelSequenceObjectReferenceMap;
@@ -6874,25 +7369,30 @@ declare class LevelSequenceBindingReferences {
 
 declare class LevelSequence extends MovieSceneSequence { 
 	MovieScene: MovieScene;
-	DirectorBlueprint: UObject;
-	DirectorClass: UnrealEngineClass;
 	ObjectReferences: LevelSequenceObjectReferenceMap;
 	BindingReferences: LevelSequenceBindingReferences;
 	PossessedObjects: any;
+	DirectorBlueprint: Blueprint;
+	DirectorClass: UnrealEngineClass;
+	MetaDataObjects: UObject[];
 	static Load(ResourceName: string): LevelSequence;
 	static Find(Outer: UObject, ResourceName: string): LevelSequence;
 	static GetDefaultObject(): LevelSequence;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelSequence;
+	RemoveMetaDataByClass(InClass: UnrealEngineClass): void;
+	FindOrAddMetaDataByClass(InClass: UnrealEngineClass): UObject;
+	FindMetaDataByClass(InClass: UnrealEngineClass): UObject;
+	CopyMetaData(InMetaData: UObject): UObject;
 	static C(Other: UObject | any): LevelSequence;
 }
 
 declare class LevelSequencePlayer extends MovieSceneSequencePlayer { 
 	OnCameraCut: UnrealEngineMulticastDelegate<(CameraComponent: CameraComponent) => void>;
-	AdditionalEventReceivers: UObject[];
 	static Load(ResourceName: string): LevelSequencePlayer;
 	static Find(Outer: UObject, ResourceName: string): LevelSequencePlayer;
 	static GetDefaultObject(): LevelSequencePlayer;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelSequencePlayer;
+	GetActiveCameraComponent(): CameraComponent;
 	static CreateLevelSequencePlayer(WorldContextObject: UObject,LevelSequence: LevelSequence,Settings: MovieSceneSequencePlaybackSettings,OutActor?: LevelSequenceActor): {OutActor: LevelSequenceActor, $: LevelSequencePlayer};
 	static C(Other: UObject | any): LevelSequencePlayer;
 }
@@ -6914,6 +7414,7 @@ declare class LevelSequencePlayerSnapshot {
 	SourceTimecode: string;
 	CameraComponent: CameraComponent;
 	Settings: LevelSequenceSnapshotSettings;
+	ActiveShot: LevelSequence;
 	ShotID: MovieSceneSequenceID;
 	clone() : LevelSequencePlayerSnapshot;
 	static C(Other: UObject | any): LevelSequencePlayerSnapshot;
@@ -6932,25 +7433,32 @@ declare class LevelSequenceBurnIn extends UserWidget {
 }
 
 declare class LevelSequenceActor extends Actor { 
-	bAutoPlay: boolean;
 	PlaybackSettings: MovieSceneSequencePlaybackSettings;
 	SequencePlayer: LevelSequencePlayer;
 	LevelSequence: SoftObjectPath;
 	AdditionalEventReceivers: Actor[];
 	BurnInOptions: LevelSequenceBurnInOptions;
 	BindingOverrides: MovieSceneBindingOverrides;
+	bAutoPlay: boolean;
 	bOverrideInstanceData: boolean;
+	bReplicatePlayback: boolean;
 	DefaultInstanceData: UObject;
 	BurnInInstance: LevelSequenceBurnIn;
+	bShowBurnin: boolean;
 	static GetDefaultObject(): LevelSequenceActor;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelSequenceActor;
+	ShowBurnin(): void;
 	SetSequence(InSequence: LevelSequence): void;
+	SetReplicatePlayback(ReplicatePlayback: boolean): void;
 	SetEventReceivers(AdditionalReceivers: Actor[]): void;
 	SetBinding(Binding: MovieSceneObjectBindingID,Actors: Actor[],bAllowBindingsFromAsset: boolean): void;
 	ResetBindings(): void;
 	ResetBinding(Binding: MovieSceneObjectBindingID): void;
 	RemoveBinding(Binding: MovieSceneObjectBindingID,Actor: Actor): void;
-	GetSequence(bLoad: boolean,bInitializePlayer: boolean): LevelSequence;
+	LoadSequence(): LevelSequence;
+	HideBurnin(): void;
+	GetSequencePlayer(): LevelSequencePlayer;
+	GetSequence(): LevelSequence;
 	AddBinding(Binding: MovieSceneObjectBindingID,Actor: Actor,bAllowBindingsFromAsset: boolean): void;
 	static C(Other: UObject | any): LevelSequenceActor;
 }
@@ -7229,6 +7737,14 @@ declare class ActorFactoryRectLight extends ActorFactory {
 	static C(Other: UObject | any): ActorFactoryRectLight;
 }
 
+declare class ActorFactoryRuntimeVirtualTextureVolume extends ActorFactory { 
+	static Load(ResourceName: string): ActorFactoryRuntimeVirtualTextureVolume;
+	static Find(Outer: UObject, ResourceName: string): ActorFactoryRuntimeVirtualTextureVolume;
+	static GetDefaultObject(): ActorFactoryRuntimeVirtualTextureVolume;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryRuntimeVirtualTextureVolume;
+	static C(Other: UObject | any): ActorFactoryRuntimeVirtualTextureVolume;
+}
+
 declare class ActorFactorySkyLight extends ActorFactory { 
 	static Load(ResourceName: string): ActorFactorySkyLight;
 	static Find(Outer: UObject, ResourceName: string): ActorFactorySkyLight;
@@ -7328,6 +7844,61 @@ declare class ActorGroupingUtils extends UObject {
 	static C(Other: UObject | any): ActorGroupingUtils;
 }
 
+declare class AutomatedAssetImportData extends UObject { 
+	GroupName: string;
+	Filenames: string[];
+	DestinationPath: string;
+	FactoryName: string;
+	bReplaceExisting: boolean;
+	bSkipReadOnly: boolean;
+	Factory: Factory;
+	LevelToLoad: string;
+	static Load(ResourceName: string): AutomatedAssetImportData;
+	static Find(Outer: UObject, ResourceName: string): AutomatedAssetImportData;
+	static GetDefaultObject(): AutomatedAssetImportData;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomatedAssetImportData;
+	static C(Other: UObject | any): AutomatedAssetImportData;
+}
+
+declare class AssetImportTask extends UObject { 
+	Filename: string;
+	DestinationPath: string;
+	DestinationName: string;
+	bReplaceExisting: boolean;
+	bAutomated: boolean;
+	bSave: boolean;
+	Factory: Factory;
+	Options: UObject;
+	ImportedObjectPaths: string[];
+	Result: UObject;
+	static Load(ResourceName: string): AssetImportTask;
+	static Find(Outer: UObject, ResourceName: string): AssetImportTask;
+	static GetDefaultObject(): AssetImportTask;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetImportTask;
+	static C(Other: UObject | any): AssetImportTask;
+}
+
+declare class Factory extends UObject { 
+	bCreateNew: boolean;
+	SupportedClass: UnrealEngineClass;
+	ContextClass: UnrealEngineClass;
+	Formats: string[];
+	bEditAfterNew: boolean;
+	bEditorImport: boolean;
+	bText: boolean;
+	ImportPriority: number;
+	AutomatedImportData: AutomatedAssetImportData;
+	AssetImportTask: AssetImportTask;
+	OverwriteYesOrNoToAllState: number;
+	static Load(ResourceName: string): Factory;
+	static Find(Outer: UObject, ResourceName: string): Factory;
+	static GetDefaultObject(): Factory;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Factory;
+	ScriptFactoryCreateFile(InTask: AssetImportTask): boolean;
+	ScriptFactoryCanImport(Filename: string): boolean;
+	static C(Other: UObject | any): Factory;
+}
+
 declare class BlendSpaceFactory1D extends Factory { 
 	TargetSkeleton: Skeleton;
 	PreviewSkeletalMesh: SkeletalMesh;
@@ -7373,6 +7944,15 @@ declare class AnalyticsPrivacySettings extends UObject {
 	static C(Other: UObject | any): AnalyticsPrivacySettings;
 }
 
+declare class AnimationBlueprintEditorOptions extends UObject { 
+	bHideUnrelatedNodes: boolean;
+	static Load(ResourceName: string): AnimationBlueprintEditorOptions;
+	static Find(Outer: UObject, ResourceName: string): AnimationBlueprintEditorOptions;
+	static GetDefaultObject(): AnimationBlueprintEditorOptions;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationBlueprintEditorOptions;
+	static C(Other: UObject | any): AnimationBlueprintEditorOptions;
+}
+
 declare class CompressionHolder extends UObject { 
 	Compression: AnimCompress;
 	static Load(ResourceName: string): CompressionHolder;
@@ -7394,6 +7974,14 @@ declare class AnimBlueprintFactory extends Factory {
 	static C(Other: UObject | any): AnimBlueprintFactory;
 }
 
+declare class AnimLayerInterfaceFactory extends AnimBlueprintFactory { 
+	static Load(ResourceName: string): AnimLayerInterfaceFactory;
+	static Find(Outer: UObject, ResourceName: string): AnimLayerInterfaceFactory;
+	static GetDefaultObject(): AnimLayerInterfaceFactory;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimLayerInterfaceFactory;
+	static C(Other: UObject | any): AnimLayerInterfaceFactory;
+}
+
 declare class ThumbnailRenderer extends UObject { 
 	static Load(ResourceName: string): ThumbnailRenderer;
 	static Find(Outer: UObject, ResourceName: string): ThumbnailRenderer;
@@ -7431,6 +8019,14 @@ declare class AnimCompositeFactory extends Factory {
 	static C(Other: UObject | any): AnimCompositeFactory;
 }
 
+declare class AnimCurveCompressionSettingsFactory extends Factory { 
+	static Load(ResourceName: string): AnimCurveCompressionSettingsFactory;
+	static Find(Outer: UObject, ResourceName: string): AnimCurveCompressionSettingsFactory;
+	static GetDefaultObject(): AnimCurveCompressionSettingsFactory;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCurveCompressionSettingsFactory;
+	static C(Other: UObject | any): AnimCurveCompressionSettingsFactory;
+}
+
 declare class AnimMontageFactory extends Factory { 
 	TargetSkeleton: Skeleton;
 	SourceAnimation: AnimSequence;
@@ -7476,6 +8072,16 @@ declare class AnimSequenceThumbnailRenderer extends DefaultSizedThumbnailRendere
 	static C(Other: UObject | any): AnimSequenceThumbnailRenderer;
 }
 
+declare class AnimStreamableFactory extends Factory { 
+	TargetSkeleton: Skeleton;
+	SourceAnimation: AnimSequence;
+	static Load(ResourceName: string): AnimStreamableFactory;
+	static Find(Outer: UObject, ResourceName: string): AnimStreamableFactory;
+	static GetDefaultObject(): AnimStreamableFactory;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimStreamableFactory;
+	static C(Other: UObject | any): AnimStreamableFactory;
+}
+
 declare class Commandlet extends UObject { 
 	HelpDescription: string;
 	HelpUsage: string;
@@ -7527,6 +8133,15 @@ declare class AutoReimportManager extends UObject {
 	static C(Other: UObject | any): AutoReimportManager;
 }
 
+declare class BaseWidgetBlueprint extends Blueprint { 
+	WidgetTree: WidgetTree;
+	static Load(ResourceName: string): BaseWidgetBlueprint;
+	static Find(Outer: UObject, ResourceName: string): BaseWidgetBlueprint;
+	static GetDefaultObject(): BaseWidgetBlueprint;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BaseWidgetBlueprint;
+	static C(Other: UObject | any): BaseWidgetBlueprint;
+}
+
 declare class BlendSpaceThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
 	static Load(ResourceName: string): BlendSpaceThumbnailRenderer;
 	static Find(Outer: UObject, ResourceName: string): BlendSpaceThumbnailRenderer;
@@ -7535,6 +8150,15 @@ declare class BlendSpaceThumbnailRenderer extends DefaultSizedThumbnailRenderer
 	static C(Other: UObject | any): BlendSpaceThumbnailRenderer;
 }
 
+declare class BlueprintEditorOptions extends UObject { 
+	bHideUnrelatedNodes: boolean;
+	static Load(ResourceName: string): BlueprintEditorOptions;
+	static Find(Outer: UObject, ResourceName: string): BlueprintEditorOptions;
+	static GetDefaultObject(): BlueprintEditorOptions;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintEditorOptions;
+	static C(Other: UObject | any): BlueprintEditorOptions;
+}
+
 declare class BlueprintFactory extends Factory { 
 	ParentClass: UnrealEngineClass;
 	static Load(ResourceName: string): BlueprintFactory;
@@ -7652,6 +8276,14 @@ declare class CascadeOptions extends UObject {
 	static C(Other: UObject | any): CascadeOptions;
 }
 
+declare class ChaosPhysicalMaterialFactory extends Factory { 
+	static Load(ResourceName: string): ChaosPhysicalMaterialFactory;
+	static Find(Outer: UObject, ResourceName: string): ChaosPhysicalMaterialFactory;
+	static GetDefaultObject(): ChaosPhysicalMaterialFactory;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ChaosPhysicalMaterialFactory;
+	static C(Other: UObject | any): ChaosPhysicalMaterialFactory;
+}
+
 declare class ChunkDependency { 
 	ChunkID: number;
 	ParentChunkID: number;
@@ -7760,6 +8392,7 @@ declare class ContentBrowserSettings extends UObject {
 	DisplayFolders: boolean;
 	DisplayEmptyFolders: boolean;
 	NumObjectsInRecentList: number;
+	bShowFullCollectionNameInToolTip: boolean;
 	DisplayEngineFolder: boolean;
 	DisplayDevelopersFolder: boolean;
 	DisplayL10NFolder: boolean;
@@ -7786,25 +8419,39 @@ declare class CookCommandlet extends Commandlet {
 	static C(Other: UObject | any): CookCommandlet;
 }
 
+declare class DeveloperSettings extends UObject { 
+	static Load(ResourceName: string): DeveloperSettings;
+	static Find(Outer: UObject, ResourceName: string): DeveloperSettings;
+	static GetDefaultObject(): DeveloperSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DeveloperSettings;
+	static C(Other: UObject | any): DeveloperSettings;
+}
+
 declare type ECookProgressDisplayMode = 'Nothing' | 'RemainingPackages' | 'PackageNames' | 'NamesAndRemainingPackages' | 'Max' | 'ECookProgressDisplayMode_MAX';
 declare var ECookProgressDisplayMode : { Nothing:'Nothing',RemainingPackages:'RemainingPackages',PackageNames:'PackageNames',NamesAndRemainingPackages:'NamesAndRemainingPackages',Max:'Max',ECookProgressDisplayMode_MAX:'ECookProgressDisplayMode_MAX', };
+declare type EBlueprintComponentDataCookingMethod = 'Disabled' | 'AllBlueprints' | 'EnabledBlueprintsOnly' | 'EBlueprintComponentDataCookingMethod_MAX';
+declare var EBlueprintComponentDataCookingMethod : { Disabled:'Disabled',AllBlueprints:'AllBlueprints',EnabledBlueprintsOnly:'EnabledBlueprintsOnly',EBlueprintComponentDataCookingMethod_MAX:'EBlueprintComponentDataCookingMethod_MAX', };
 declare class CookerSettings extends DeveloperSettings { 
 	bEnableCookOnTheSide: boolean;
 	bEnableBuildDDCInBackground: boolean;
 	bIterativeCookingForLaunchOn: boolean;
 	bIterativeCookingForFileCookContent: boolean;
+	bCookOnTheFlyForLaunchOn: boolean;
 	CookProgressDisplayMode: ECookProgressDisplayMode;
 	bIgnoreIniSettingsOutOfDateForIteration: boolean;
 	bIgnoreScriptPackagesOutOfDateForIteration: boolean;
 	bCompileBlueprintsInDevelopmentMode: boolean;
-	bCookBlueprintComponentTemplateData: boolean;
+	BlueprintComponentDataCookingMethod: EBlueprintComponentDataCookingMethod;
 	ClassesExcludedOnDedicatedServer: string[];
 	ModulesExcludedOnDedicatedServer: string[];
 	ClassesExcludedOnDedicatedClient: string[];
 	ModulesExcludedOnDedicatedClient: string[];
+	VersionedIntRValues: string[];
 	DefaultPVRTCQuality: number;
 	DefaultASTCQualityBySpeed: number;
 	DefaultASTCQualityBySize: number;
+	bAllowCookedDataInEditorBuilds: boolean;
+	bCookBlueprintComponentTemplateData: boolean;
 	static Load(ResourceName: string): CookerSettings;
 	static Find(Outer: UObject, ResourceName: string): CookerSettings;
 	static GetDefaultObject(): CookerSettings;
@@ -7831,6 +8478,15 @@ declare class CrashReporterSettings extends UObject {
 	static C(Other: UObject | any): CrashReporterSettings;
 }
 
+declare class CrashReportsPrivacySettings extends UObject { 
+	bSendUnattendedBugReports: boolean;
+	static Load(ResourceName: string): CrashReportsPrivacySettings;
+	static Find(Outer: UObject, ResourceName: string): CrashReportsPrivacySettings;
+	static GetDefaultObject(): CrashReportsPrivacySettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CrashReportsPrivacySettings;
+	static C(Other: UObject | any): CrashReportsPrivacySettings;
+}
+
 declare type ECSVImportType = 'ECSV_DataTable' | 'ECSV_CurveTable' | 'ECSV_CurveFloat' | 'ECSV_CurveVector' | 'ECSV_CurveLinearColor' | 'ECSV_MAX';
 declare var ECSVImportType : { ECSV_DataTable:'ECSV_DataTable',ECSV_CurveTable:'ECSV_CurveTable',ECSV_CurveFloat:'ECSV_CurveFloat',ECSV_CurveVector:'ECSV_CurveVector',ECSV_CurveLinearColor:'ECSV_CurveLinearColor',ECSV_MAX:'ECSV_MAX', };
 declare class CSVImportSettings { 
@@ -7843,6 +8499,7 @@ declare class CSVImportSettings {
 
 declare class CSVImportFactory extends Factory { 
 	AutomatedImportSettings: CSVImportSettings;
+	TempImportDataTable: DataTable;
 	static Load(ResourceName: string): CSVImportFactory;
 	static Find(Outer: UObject, ResourceName: string): CSVImportFactory;
 	static GetDefaultObject(): CSVImportFactory;
@@ -7982,6 +8639,14 @@ declare class DataAssetFactory extends Factory {
 	static C(Other: UObject | any): DataAssetFactory;
 }
 
+declare class DDCCleanupCommandlet extends Commandlet { 
+	static Load(ResourceName: string): DDCCleanupCommandlet;
+	static Find(Outer: UObject, ResourceName: string): DDCCleanupCommandlet;
+	static GetDefaultObject(): DDCCleanupCommandlet;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DDCCleanupCommandlet;
+	static C(Other: UObject | any): DDCCleanupCommandlet;
+}
+
 declare class DebugSkelMeshComponent extends SkeletalMeshComponent { 
 	bRenderRawSkeleton: boolean;
 	bDrawMesh: boolean;
@@ -8014,6 +8679,7 @@ declare class DebugSkelMeshComponent extends SkeletalMeshComponent {
 	PreviewInstance: AnimPreviewInstance;
 	SavedAnimScriptInstance: AnimInstance;
 	bIsUsingInGameBounds: boolean;
+	bIsUsingPreSkinnedBounds: boolean;
 	bPerformSingleClothingTick: boolean;
 	bPauseClothingSimulationWithAnim: boolean;
 	static Load(ResourceName: string): DebugSkelMeshComponent;
@@ -8134,6 +8800,12 @@ declare class DerivedDataCacheCommandlet extends Commandlet {
 
 declare class DiffAssetRegistriesCommandlet extends Commandlet { 
 	AssetRegistrySearchPath: string[];
+	P4Repository: string;
+	P4EngineBasePath: string;
+	P4EngineAssetPath: string;
+	P4GameBasePath: string;
+	P4GameAssetPath: string;
+	RegexBranchCL: string;
 	static Load(ResourceName: string): DiffAssetRegistriesCommandlet;
 	static Find(Outer: UObject, ResourceName: string): DiffAssetRegistriesCommandlet;
 	static GetDefaultObject(): DiffAssetRegistriesCommandlet;
@@ -8326,8 +8998,10 @@ declare class GameUserSettings extends UObject {
 	GetVisualEffectQuality(): number;
 	GetViewDistanceQuality(): number;
 	GetTextureQuality(): number;
+	static GetSyncInterval(): number;
 	GetShadowQuality(): number;
 	GetScreenResolution(): IntPoint;
+	GetResolutionScaleNormalized(): number;
 	GetResolutionScaleInformationEx(CurrentScaleNormalized?: number,CurrentScaleValue?: number,MinScaleValue?: number,MaxScaleValue?: number): {CurrentScaleNormalized: number, CurrentScaleValue: number, MinScaleValue: number, MaxScaleValue: number};
 	GetResolutionScaleInformation(CurrentScaleNormalized?: number,CurrentScaleValue?: number,MinScaleValue?: number,MaxScaleValue?: number): {CurrentScaleNormalized: number, CurrentScaleValue: number, MinScaleValue: number, MaxScaleValue: number};
 	GetRecommendedResolutionScale(): number;
@@ -8440,8 +9114,8 @@ declare class TimecodeProvider extends UObject {
 	static C(Other: UObject | any): TimecodeProvider;
 }
 
-declare type ETransitionType = 'TT_None' | 'TT_Paused' | 'TT_Loading' | 'TT_Saving' | 'TT_Connecting' | 'TT_Precaching' | 'TT_WaitingToConnect' | 'TT_MAX';
-declare var ETransitionType : { TT_None:'TT_None',TT_Paused:'TT_Paused',TT_Loading:'TT_Loading',TT_Saving:'TT_Saving',TT_Connecting:'TT_Connecting',TT_Precaching:'TT_Precaching',TT_WaitingToConnect:'TT_WaitingToConnect',TT_MAX:'TT_MAX', };
+declare type ETransitionType = 'None' | 'Paused' | 'Loading' | 'Saving' | 'Connecting' | 'Precaching' | 'WaitingToConnect' | 'MAX';
+declare var ETransitionType : { None:'None',Paused:'Paused',Loading:'Loading',Saving:'Saving',Connecting:'Connecting',Precaching:'Precaching',WaitingToConnect:'WaitingToConnect',MAX:'MAX', };
 declare class DropNoteInfo { 
 	Location: Vector;
 	Rotation: Rotator;
@@ -8516,6 +9190,8 @@ declare class Engine extends UObject {
 	GeomMaterialName: SoftObjectPath;
 	DebugMeshMaterial: Material;
 	DebugMeshMaterialName: SoftObjectPath;
+	EmissiveMeshMaterial: Material;
+	EmissiveMeshMaterialName: SoftObjectPath;
 	LevelColorationLitMaterial: Material;
 	LevelColorationLitMaterialName: string;
 	LevelColorationUnlitMaterial: Material;
@@ -8563,6 +9239,7 @@ declare class Engine extends UObject {
 	PreviewShadowsIndicatorMaterial: Material;
 	PreviewShadowsIndicatorMaterialName: SoftObjectPath;
 	ArrowMaterial: Material;
+	ArrowMaterialYellow: MaterialInstanceDynamic;
 	ArrowMaterialName: SoftObjectPath;
 	LightingOnlyBrightness: LinearColor;
 	ShaderComplexityColors: LinearColor[];
@@ -8594,6 +9271,8 @@ declare class Engine extends UObject {
 	ActiveStructRedirects: StructRedirect[];
 	PreIntegratedSkinBRDFTexture: Texture2D;
 	PreIntegratedSkinBRDFTextureName: SoftObjectPath;
+	BlueNoiseTexture: Texture2D;
+	BlueNoiseTextureName: SoftObjectPath;
 	MiniFontTexture: Texture2D;
 	MiniFontTextureName: SoftObjectPath;
 	WeightMapPlaceholderTexture: Texture;
@@ -8675,13 +9354,12 @@ declare class Engine extends UObject {
 	bLockReadOnlyLevels: boolean;
 	ParticleEventManagerClassPath: string;
 	SelectionHighlightIntensity: number;
-	SelectionMeshSectionHighlightIntensity: number;
 	BSPSelectionHighlightIntensity: number;
-	HoverHighlightIntensity: number;
 	SelectionHighlightIntensityBillboards: number;
 	NetDriverDefinitions: NetDriverDefinition[];
 	ServerActors: string[];
 	RuntimeServerActors: string[];
+	NetErrorLogInterval: number;
 	bStartedLoadMapMovie: boolean;
 	NextWorldContextHandle: number;
 	static Load(ResourceName: string): Engine;
@@ -8881,11 +9559,10 @@ declare type EConsoleForGamepadLabels = 'None' | 'XBoxOne' | 'PS4' | 'EConsoleFo
 declare var EConsoleForGamepadLabels : { None:'None',XBoxOne:'XBoxOne',PS4:'PS4',EConsoleForGamepadLabels_MAX:'EConsoleForGamepadLabels_MAX', };
 declare class EditorExperimentalSettings extends UObject { 
 	bProceduralFoliage: boolean;
+	bLandscapeLayerSystem: boolean;
 	bEnableLocalizationDashboard: boolean;
 	bEnableTranslationPicker: boolean;
-	bEnableEditorUtilityBlueprints: boolean;
 	bEnableFavoriteSystem: boolean;
-	bDeviceOutputLog: boolean;
 	ConsoleForGamepadLabels: EConsoleForGamepadLabels;
 	bToolbarCustomization: boolean;
 	bBreakOnExceptions: boolean;
@@ -8914,11 +9591,14 @@ declare class EditorExperimentalSettings extends UObject {
 	static C(Other: UObject | any): EditorExperimentalSettings;
 }
 
+declare type ELevelVisibilityDirtyMode = 'ModifyOnChange' | 'DontModify' | 'ELevelVisibilityDirtyMode_MAX';
+declare var ELevelVisibilityDirtyMode : { ModifyOnChange:'ModifyOnChange',DontModify:'DontModify',ELevelVisibilityDirtyMode_MAX:'ELevelVisibilityDirtyMode_MAX', };
 declare class EditorLevelUtils extends UObject { 
 	static Load(ResourceName: string): EditorLevelUtils;
 	static Find(Outer: UObject, ResourceName: string): EditorLevelUtils;
 	static GetDefaultObject(): EditorLevelUtils;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorLevelUtils;
+	static SetLevelVisibility(Level: Level,bShouldBeVisible: boolean,bForceLayersVisible: boolean,ModifyMode: ELevelVisibilityDirtyMode): void;
 	static MoveSelectedActorsToLevel(DestLevel: LevelStreaming,bWarnAboutReferences: boolean): number;
 	static MoveActorsToLevel(ActorsToMove: Actor[],DestStreamingLevel: LevelStreaming,bWarnAboutReferences: boolean): number;
 	static MakeLevelCurrent(InStreamingLevel: LevelStreaming): void;
@@ -9050,6 +9730,7 @@ declare class EditorPerProjectUserSettings extends UObject {
 	MaterialQualityLevel: number;
 	PreviewShaderPlatformName: string;
 	bIsMaterialQualityOverridePlatform: boolean;
+	bIsFeatureLevelPreviewActive: boolean;
 	static Load(ResourceName: string): EditorPerProjectUserSettings;
 	static Find(Outer: UObject, ResourceName: string): EditorPerProjectUserSettings;
 	static GetDefaultObject(): EditorPerProjectUserSettings;
@@ -9143,6 +9824,15 @@ declare class EditorSkeletonNotifyObj extends UObject {
 	static C(Other: UObject | any): EditorSkeletonNotifyObj;
 }
 
+declare class EditorSubsystemBlueprintLibrary extends BlueprintFunctionLibrary { 
+	static Load(ResourceName: string): EditorSubsystemBlueprintLibrary;
+	static Find(Outer: UObject, ResourceName: string): EditorSubsystemBlueprintLibrary;
+	static GetDefaultObject(): EditorSubsystemBlueprintLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorSubsystemBlueprintLibrary;
+	static GetEditorSubsystem(Class: UnrealEngineClass): EditorSubsystem;
+	static C(Other: UObject | any): EditorSubsystemBlueprintLibrary;
+}
+
 declare class EnumFactory extends Factory { 
 	static Load(ResourceName: string): EnumFactory;
 	static Find(Outer: UObject, ResourceName: string): EnumFactory;
@@ -9228,6 +9918,7 @@ declare class FbxAnimSequenceImportData extends FbxAssetImportData {
 	CustomSampleRate: number;
 	SourceAnimationName: string;
 	bImportCustomAttribute: boolean;
+	bDeleteExistingCustomAttributeCurves: boolean;
 	bImportBoneTracks: boolean;
 	bSetMaterialDriveParameterOnCustomAttribute: boolean;
 	MaterialCurveSuffixes: string[];
@@ -9274,6 +9965,7 @@ declare class FbxMeshImportData extends FbxAssetImportData {
 	bImportMeshLODs: boolean;
 	NormalImportMethod: EFBXNormalImportMethod;
 	NormalGenerationMethod: EFBXNormalGenerationMethod;
+	bReorderMaterialToFbxOrder: boolean;
 	ImportMaterialOriginalNameData: string[];
 	ImportMeshLodData: ImportMeshLodSectionsData[];
 	static Load(ResourceName: string): FbxMeshImportData;
@@ -9307,6 +9999,9 @@ declare type EFBXImportContentType = 'FBXICT_All' | 'FBXICT_Geometry' | 'FBXICT_
 declare var EFBXImportContentType : { FBXICT_All:'FBXICT_All',FBXICT_Geometry:'FBXICT_Geometry',FBXICT_SkinningWeights:'FBXICT_SkinningWeights',FBXICT_MAX:'FBXICT_MAX', };
 declare class FbxSkeletalMeshImportData extends FbxMeshImportData { 
 	ImportContentType: EFBXImportContentType;
+	LastImportContentType: EFBXImportContentType;
+	VertexColorImportOption: EVertexColorImportOption;
+	VertexOverrideColor: Color;
 	bUpdateSkeletonReferencePose: boolean;
 	bUseT0AsRefPose: boolean;
 	bPreserveSmoothingGroups: boolean;
@@ -9411,6 +10106,8 @@ declare class FbxExportOption extends UObject {
 	VertexColor: boolean;
 	LevelOfDetail: boolean;
 	Collision: boolean;
+	bExportMorphTargets: boolean;
+	bExportPreviewMesh: boolean;
 	MapSkeletalMotionToRoot: boolean;
 	static Load(ResourceName: string): FbxExportOption;
 	static Find(Outer: UObject, ResourceName: string): FbxExportOption;
@@ -9500,6 +10197,7 @@ declare class FbxSceneImportOptionsSkeletalMesh extends UObject {
 	bUseDefaultSampleRate: boolean;
 	CustomSampleRate: number;
 	bImportCustomAttribute: boolean;
+	bDeleteExistingCustomAttributeCurves: boolean;
 	bPreserveLocalTransform: boolean;
 	bDeleteExistingMorphTargetCurves: boolean;
 	static Load(ResourceName: string): FbxSceneImportOptionsSkeletalMesh;
@@ -9788,6 +10486,18 @@ declare class ImportLocalizedDialogueCommandlet extends GatherTextCommandletBase
 	static C(Other: UObject | any): ImportLocalizedDialogueCommandlet;
 }
 
+declare class ImportSubsystem extends EditorSubsystem { 
+	OnAssetPreImport_BP: UnrealEngineMulticastDelegate<(InFactory: Factory, InClass: UnrealEngineClass, InParent: UObject, Name: string, Type: string) => void>;
+	OnAssetPostImport_BP: UnrealEngineMulticastDelegate<(InFactory: Factory, InCreatedObject: UObject) => void>;
+	OnAssetReimport_BP: UnrealEngineMulticastDelegate<(InCreatedObject: UObject) => void>;
+	OnAssetPostLODImport_BP: UnrealEngineMulticastDelegate<(InObject: UObject, InLODIndex: number) => void>;
+	static Load(ResourceName: string): ImportSubsystem;
+	static Find(Outer: UObject, ResourceName: string): ImportSubsystem;
+	static GetDefaultObject(): ImportSubsystem;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImportSubsystem;
+	static C(Other: UObject | any): ImportSubsystem;
+}
+
 declare class InternationalizationConditioningCommandlet extends GatherTextCommandletBase { 
 	static Load(ResourceName: string): InternationalizationConditioningCommandlet;
 	static Find(Outer: UObject, ResourceName: string): InternationalizationConditioningCommandlet;
@@ -9819,10 +10529,15 @@ declare class LevelEditorMiscSettings extends DeveloperSettings {
 	bNavigationAutoUpdate: boolean;
 	bReplaceRespectsScale: boolean;
 	bAllowBackgroundAudio: boolean;
+	bCreateNewAudioDeviceForPlayInEditor: boolean;
 	bEnableRealTimeAudio: boolean;
 	EditorVolumeLevel: number;
 	bEnableEditorSounds: boolean;
 	DefaultLevelStreamingClass: UnrealEngineClass;
+	bPromptWhenAddingToLevelBeforeCheckout: boolean;
+	bPromptWhenAddingToLevelOutsideBounds: boolean;
+	PercentageThresholdForPrompt: number;
+	MinimumBoundsForCheckingSize: Vector;
 	EditorScreenshotSaveDirectory: DirectoryPath;
 	static Load(ResourceName: string): LevelEditorMiscSettings;
 	static Find(Outer: UObject, ResourceName: string): LevelEditorMiscSettings;
@@ -9837,8 +10552,8 @@ declare type EPlayOnBuildMode = 'PlayOnBuild_Always' | 'PlayOnBuild_Never' | 'Pl
 declare var EPlayOnBuildMode : { PlayOnBuild_Always:'PlayOnBuild_Always',PlayOnBuild_Never:'PlayOnBuild_Never',PlayOnBuild_Default:'PlayOnBuild_Default',PlayOnBuild_IfEditorBuiltLocally:'PlayOnBuild_IfEditorBuiltLocally',PlayOnBuild_MAX:'PlayOnBuild_MAX', };
 declare type EPlayOnLaunchConfiguration = 'LaunchConfig_Default' | 'LaunchConfig_Debug' | 'LaunchConfig_Development' | 'LaunchConfig_Test' | 'LaunchConfig_Shipping' | 'LaunchConfig_MAX';
 declare var EPlayOnLaunchConfiguration : { LaunchConfig_Default:'LaunchConfig_Default',LaunchConfig_Debug:'LaunchConfig_Debug',LaunchConfig_Development:'LaunchConfig_Development',LaunchConfig_Test:'LaunchConfig_Test',LaunchConfig_Shipping:'LaunchConfig_Shipping',LaunchConfig_MAX:'LaunchConfig_MAX', };
-declare type EPlayNetMode = 'PIE_Standalone' | 'PIE_ListenServer' | 'PIE_Client' | 'PIE_MAX';
-declare var EPlayNetMode : { PIE_Standalone:'PIE_Standalone',PIE_ListenServer:'PIE_ListenServer',PIE_Client:'PIE_Client',PIE_MAX:'PIE_MAX', };
+declare type EPlayNetMode = 'PIE_Standalone' | 'PIE_ListenServer' | 'PIE_Client' | 'PIE_StandaloneWithServer' | 'PIE_MAX';
+declare var EPlayNetMode : { PIE_Standalone:'PIE_Standalone',PIE_ListenServer:'PIE_ListenServer',PIE_Client:'PIE_Client',PIE_StandaloneWithServer:'PIE_StandaloneWithServer',PIE_MAX:'PIE_MAX', };
 declare type ELaunchModeType = 'LaunchMode_OnDevice' | 'LaunchMode_MAX';
 declare var ELaunchModeType : { LaunchMode_OnDevice:'LaunchMode_OnDevice',LaunchMode_MAX:'LaunchMode_MAX', };
 declare type EPlayModeLocations = 'PlayLocation_CurrentCameraLocation' | 'PlayLocation_DefaultPlayerStart' | 'PlayLocation_MAX';
@@ -9874,11 +10589,10 @@ declare class LevelEditorPlaySettings extends UObject {
 	NewWindowHeight: number;
 	NewWindowPosition: IntPoint;
 	CenterNewWindow: boolean;
-	bBindSequencerToPIE: boolean;
-	bBindSequencerToSimulate: boolean;
 	PIEAlwaysOnTop: boolean;
 	DisableStandaloneSound: boolean;
 	AdditionalLaunchParameters: string;
+	AdditionalLaunchParametersForMobile: string;
 	BuildGameBeforeLaunch: EPlayOnBuildMode;
 	LaunchConfiguration: EPlayOnLaunchConfiguration;
 	bAutoCompileBlueprintsOnLaunch: boolean;
@@ -9892,6 +10606,7 @@ declare class LevelEditorPlaySettings extends UObject {
 	RouteGamepadToSecondWindow: boolean;
 	CreateAudioDeviceForEveryPlayer: boolean;
 	ClientWindowHeight: number;
+	ServerMapNameOverride: string;
 	AdditionalServerGameOptions: string;
 	AdditionalLaunchOptions: string;
 	MultipleInstanceLastHeight: number;
@@ -9939,8 +10654,8 @@ declare type EMeasuringToolUnits = 'MeasureUnits_Centimeters' | 'MeasureUnits_Me
 declare var EMeasuringToolUnits : { MeasureUnits_Centimeters:'MeasureUnits_Centimeters',MeasureUnits_Meters:'MeasureUnits_Meters',MeasureUnits_Kilometers:'MeasureUnits_Kilometers',MeasureUnits_MAX:'MeasureUnits_MAX', };
 declare type ELevelViewportType = 'LVT_OrthoXY' | 'LVT_OrthoXZ' | 'LVT_OrthoYZ' | 'LVT_Perspective' | 'LVT_OrthoFreelook' | 'LVT_OrthoNegativeXY' | 'LVT_OrthoNegativeXZ' | 'LVT_OrthoNegativeYZ' | 'LVT_MAX' | 'LVT_None';
 declare var ELevelViewportType : { LVT_OrthoXY:'LVT_OrthoXY',LVT_OrthoXZ:'LVT_OrthoXZ',LVT_OrthoYZ:'LVT_OrthoYZ',LVT_Perspective:'LVT_Perspective',LVT_OrthoFreelook:'LVT_OrthoFreelook',LVT_OrthoNegativeXY:'LVT_OrthoNegativeXY',LVT_OrthoNegativeXZ:'LVT_OrthoNegativeXZ',LVT_OrthoNegativeYZ:'LVT_OrthoNegativeYZ',LVT_MAX:'LVT_MAX',LVT_None:'LVT_None', };
-declare type EViewModeIndex = 'VMI_BrushWireframe' | 'VMI_Wireframe' | 'VMI_Unlit' | 'VMI_Lit' | 'VMI_Lit_DetailLighting' | 'VMI_LightingOnly' | 'VMI_LightComplexity' | 'VMI_ShaderComplexity' | 'VMI_LightmapDensity' | 'VMI_LitLightmapDensity' | 'VMI_ReflectionOverride' | 'VMI_VisualizeBuffer' | 'VMI_StationaryLightOverlap' | 'VMI_CollisionPawn' | 'VMI_CollisionVisibility' | 'VMI_LODColoration' | 'VMI_QuadOverdraw' | 'VMI_PrimitiveDistanceAccuracy' | 'VMI_MeshUVDensityAccuracy' | 'VMI_ShaderComplexityWithQuadOverdraw' | 'VMI_HLODColoration' | 'VMI_GroupLODColoration' | 'VMI_MaterialTextureScaleAccuracy' | 'VMI_RequiredTextureResolution' | 'VMI_Max' | 'VMI_Unknown';
-declare var EViewModeIndex : { VMI_BrushWireframe:'VMI_BrushWireframe',VMI_Wireframe:'VMI_Wireframe',VMI_Unlit:'VMI_Unlit',VMI_Lit:'VMI_Lit',VMI_Lit_DetailLighting:'VMI_Lit_DetailLighting',VMI_LightingOnly:'VMI_LightingOnly',VMI_LightComplexity:'VMI_LightComplexity',VMI_ShaderComplexity:'VMI_ShaderComplexity',VMI_LightmapDensity:'VMI_LightmapDensity',VMI_LitLightmapDensity:'VMI_LitLightmapDensity',VMI_ReflectionOverride:'VMI_ReflectionOverride',VMI_VisualizeBuffer:'VMI_VisualizeBuffer',VMI_StationaryLightOverlap:'VMI_StationaryLightOverlap',VMI_CollisionPawn:'VMI_CollisionPawn',VMI_CollisionVisibility:'VMI_CollisionVisibility',VMI_LODColoration:'VMI_LODColoration',VMI_QuadOverdraw:'VMI_QuadOverdraw',VMI_PrimitiveDistanceAccuracy:'VMI_PrimitiveDistanceAccuracy',VMI_MeshUVDensityAccuracy:'VMI_MeshUVDensityAccuracy',VMI_ShaderComplexityWithQuadOverdraw:'VMI_ShaderComplexityWithQuadOverdraw',VMI_HLODColoration:'VMI_HLODColoration',VMI_GroupLODColoration:'VMI_GroupLODColoration',VMI_MaterialTextureScaleAccuracy:'VMI_MaterialTextureScaleAccuracy',VMI_RequiredTextureResolution:'VMI_RequiredTextureResolution',VMI_Max:'VMI_Max',VMI_Unknown:'VMI_Unknown', };
+declare type EViewModeIndex = 'VMI_BrushWireframe' | 'VMI_Wireframe' | 'VMI_Unlit' | 'VMI_Lit' | 'VMI_Lit_DetailLighting' | 'VMI_LightingOnly' | 'VMI_LightComplexity' | 'VMI_ShaderComplexity' | 'VMI_LightmapDensity' | 'VMI_LitLightmapDensity' | 'VMI_ReflectionOverride' | 'VMI_VisualizeBuffer' | 'VMI_StationaryLightOverlap' | 'VMI_CollisionPawn' | 'VMI_CollisionVisibility' | 'VMI_LODColoration' | 'VMI_QuadOverdraw' | 'VMI_PrimitiveDistanceAccuracy' | 'VMI_MeshUVDensityAccuracy' | 'VMI_ShaderComplexityWithQuadOverdraw' | 'VMI_HLODColoration' | 'VMI_GroupLODColoration' | 'VMI_MaterialTextureScaleAccuracy' | 'VMI_RequiredTextureResolution' | 'VMI_PathTracing' | 'VMI_RayTracingDebug' | 'VMI_Max' | 'VMI_Unknown';
+declare var EViewModeIndex : { VMI_BrushWireframe:'VMI_BrushWireframe',VMI_Wireframe:'VMI_Wireframe',VMI_Unlit:'VMI_Unlit',VMI_Lit:'VMI_Lit',VMI_Lit_DetailLighting:'VMI_Lit_DetailLighting',VMI_LightingOnly:'VMI_LightingOnly',VMI_LightComplexity:'VMI_LightComplexity',VMI_ShaderComplexity:'VMI_ShaderComplexity',VMI_LightmapDensity:'VMI_LightmapDensity',VMI_LitLightmapDensity:'VMI_LitLightmapDensity',VMI_ReflectionOverride:'VMI_ReflectionOverride',VMI_VisualizeBuffer:'VMI_VisualizeBuffer',VMI_StationaryLightOverlap:'VMI_StationaryLightOverlap',VMI_CollisionPawn:'VMI_CollisionPawn',VMI_CollisionVisibility:'VMI_CollisionVisibility',VMI_LODColoration:'VMI_LODColoration',VMI_QuadOverdraw:'VMI_QuadOverdraw',VMI_PrimitiveDistanceAccuracy:'VMI_PrimitiveDistanceAccuracy',VMI_MeshUVDensityAccuracy:'VMI_MeshUVDensityAccuracy',VMI_ShaderComplexityWithQuadOverdraw:'VMI_ShaderComplexityWithQuadOverdraw',VMI_HLODColoration:'VMI_HLODColoration',VMI_GroupLODColoration:'VMI_GroupLODColoration',VMI_MaterialTextureScaleAccuracy:'VMI_MaterialTextureScaleAccuracy',VMI_RequiredTextureResolution:'VMI_RequiredTextureResolution',VMI_PathTracing:'VMI_PathTracing',VMI_RayTracingDebug:'VMI_RayTracingDebug',VMI_Max:'VMI_Max',VMI_Unknown:'VMI_Unknown', };
 declare class ExposureSettings { 
 	FixedEV100: number;
 	bFixed: boolean;
@@ -9955,6 +10670,7 @@ declare class LevelEditorViewportInstanceSettings {
 	EditorShowFlagsString: string;
 	GameShowFlagsString: string;
 	BufferVisualizationMode: string;
+	RayTracingDebugVisualizationMode: string;
 	ExposureSettings: ExposureSettings;
 	FOVAngle: number;
 	FarViewPlane: number;
@@ -9981,6 +10697,8 @@ declare class LevelEditorViewportSettings extends UObject {
 	bPanMovesCanvas: boolean;
 	bCenterZoomAroundCursor: boolean;
 	bAllowTranslateRotateZWidget: boolean;
+	bAllowArcballRotate: boolean;
+	bAllowScreenRotate: boolean;
 	bClickBSPSelectsBrush: boolean;
 	CameraSpeed: number;
 	CameraSpeedScalar: number;
@@ -9989,12 +10707,15 @@ declare class LevelEditorViewportSettings extends UObject {
 	bInvertMouseLookYAxis: boolean;
 	bInvertOrbitYAxis: boolean;
 	bInvertMiddleMousePan: boolean;
+	bInvertRightMouseDollyYAxis: boolean;
 	bUseAbsoluteTranslation: boolean;
 	bLevelStreamingVolumePrevis: boolean;
 	bUseUE3OrbitControls: boolean;
 	ScrollGestureDirectionFor3DViewports: EScrollGestureDirection;
 	ScrollGestureDirectionForOrthoViewports: EScrollGestureDirection;
 	bLevelEditorJoystickControls: boolean;
+	bUseDistanceScaledCameraSpeed: boolean;
+	bOrbitCameraAroundSelection: boolean;
 	bUsePowerOf2SnapSize: boolean;
 	DecimalGridSizes: number[];
 	DecimalGridIntervals: number[];
@@ -10029,7 +10750,6 @@ declare class LevelEditorViewportSettings extends UObject {
 	bUseSelectionOutline: boolean;
 	SelectionHighlightIntensity: number;
 	BSPSelectionHighlightIntensity: number;
-	HoverHighlightIntensity: number;
 	bEnableViewportCameraToUpdateFromPIV: boolean;
 	bPreviewSelectedCameras: boolean;
 	CameraPreviewSize: number;
@@ -10272,6 +10992,7 @@ declare class MaterialEditorOptions extends UObject {
 	bRealtimeMaterialViewport: boolean;
 	bRealtimeExpressionViewport: boolean;
 	bLivePreviewUpdate: boolean;
+	bHideUnrelatedNodes: boolean;
 	bAlwaysRefreshAllPreviews: boolean;
 	bUseUnsortedMenus: boolean;
 	FavoriteExpressions: string[];
@@ -10684,6 +11405,7 @@ declare class PhysAssetCreateParams {
 	bCreateConstraints: boolean;
 	bWalkPastSmall: boolean;
 	bBodyForAll: boolean;
+	bDisableCollisionsByDefault: boolean;
 	AngularConstraintMode: EAngularConstraintMotion;
 	HullCount: number;
 	MaxHullVerts: number;
@@ -10749,9 +11471,10 @@ declare class PopulateDialogueWaveFromCharacterSheetCommandlet extends Commandle
 }
 
 declare class PoseAssetFactory extends Factory { 
+	SourceAnimation: AnimSequence;
+	PoseNames: string[];
 	TargetSkeleton: Skeleton;
 	PreviewSkeletalMesh: SkeletalMesh;
-	SourceAnimation: AnimSequence;
 	static Load(ResourceName: string): PoseAssetFactory;
 	static Find(Outer: UObject, ResourceName: string): PoseAssetFactory;
 	static GetDefaultObject(): PoseAssetFactory;
@@ -10799,8 +11522,12 @@ declare class ProjectPackagingSettings extends UObject {
 	bGenerateChunks: boolean;
 	bGenerateNoChunks: boolean;
 	bChunkHardReferencesOnly: boolean;
+	bForceOneChunkPerFile: boolean;
+	MaxChunkSize: any;
 	bBuildHttpChunkInstallData: boolean;
 	HttpChunkInstallDataDirectory: DirectoryPath;
+	PakFileCompressionFormats: string;
+	PakFileAdditionalCompressionOptions: string;
 	HttpChunkInstallDataVersion: string;
 	IncludePrerequisites: boolean;
 	IncludeAppLocalPrerequisites: boolean;
@@ -10815,8 +11542,13 @@ declare class ProjectPackagingSettings extends UObject {
 	bCompressed: boolean;
 	bEncryptIniFiles: boolean;
 	bEncryptPakIndex: boolean;
+	GenerateEarlyDownloaderPakFile: boolean;
 	bSkipEditorContent: boolean;
 	bSkipMovies: boolean;
+	UFSMovies: string[];
+	NonUFSMovies: string[];
+	CompressedChunkWildcard: string[];
+	EarlyDownloaderPakFileFiles: string[];
 	MapsToCook: FilePath[];
 	DirectoriesToAlwaysCook: DirectoryPath[];
 	DirectoriesToNeverCook: DirectoryPath[];
@@ -10833,8 +11565,10 @@ declare class ProjectPackagingSettings extends UObject {
 	static C(Other: UObject | any): ProjectPackagingSettings;
 }
 
-declare type PropertEditorTestEnum = 'PropertyEditorTest_Enum1' | 'PropertyEditorTest_Enum2' | 'PropertyEditorTest_Enum3' | 'PropertyEditorTest_Enum4' | 'PropertyEditorTest_Enum5' | 'PropertyEditorTest_Enum6' | 'PropertyEditorTest_MAX';
-declare var PropertEditorTestEnum : { PropertyEditorTest_Enum1:'PropertyEditorTest_Enum1',PropertyEditorTest_Enum2:'PropertyEditorTest_Enum2',PropertyEditorTest_Enum3:'PropertyEditorTest_Enum3',PropertyEditorTest_Enum4:'PropertyEditorTest_Enum4',PropertyEditorTest_Enum5:'PropertyEditorTest_Enum5',PropertyEditorTest_Enum6:'PropertyEditorTest_Enum6',PropertyEditorTest_MAX:'PropertyEditorTest_MAX', };
+declare type PropertyEditorTestEnum = 'PropertyEditorTest_Enum1' | 'PropertyEditorTest_Enum2' | 'PropertyEditorTest_Enum3' | 'PropertyEditorTest_Enum4' | 'PropertyEditorTest_Enum5' | 'PropertyEditorTest_Enum6' | 'PropertyEditorTest_MAX';
+declare var PropertyEditorTestEnum : { PropertyEditorTest_Enum1:'PropertyEditorTest_Enum1',PropertyEditorTest_Enum2:'PropertyEditorTest_Enum2',PropertyEditorTest_Enum3:'PropertyEditorTest_Enum3',PropertyEditorTest_Enum4:'PropertyEditorTest_Enum4',PropertyEditorTest_Enum5:'PropertyEditorTest_Enum5',PropertyEditorTest_Enum6:'PropertyEditorTest_Enum6',PropertyEditorTest_MAX:'PropertyEditorTest_MAX', };
+declare type EditColor = 'Red' | 'Orange' | 'Yellow' | 'Green' | 'Blue' | 'Indigo' | 'Violet' | 'Pink' | 'Magenta' | 'Cyan' | 'EditColor_MAX';
+declare var EditColor : { Red:'Red',Orange:'Orange',Yellow:'Yellow',Green:'Green',Blue:'Blue',Indigo:'Indigo',Violet:'Violet',Pink:'Pink',Magenta:'Magenta',Cyan:'Cyan',EditColor_MAX:'EditColor_MAX', };
 declare class PropertyEditorTestSubStruct { 
 	FirstProperty: number;
 	SecondProperty: number;
@@ -10855,7 +11589,7 @@ declare class PropertyEditorTestBasicStruct {
 
 declare class PropertyEditorTestObject extends UObject { 
 	Int8Property: any;
-	Int16roperty: any;
+	Int16Property: any;
 	Int32Property: number;
 	Int64Property: any;
 	ByteProperty: number;
@@ -10877,7 +11611,8 @@ declare class PropertyEditorTestObject extends UObject {
 	ClassProperty: UnrealEngineClass;
 	LinearColorProperty: LinearColor;
 	ColorProperty: Color;
-	EnumProperty: PropertEditorTestEnum;
+	EnumByteProperty: PropertyEditorTestEnum;
+	EnumProperty: EditColor;
 	MatrixProperty: Matrix;
 	TransformProperty: Transform;
 	IntProperty32Array: number[];
@@ -10895,7 +11630,7 @@ declare class PropertyEditorTestObject extends UObject {
 	ActorPropertyArray: Actor[];
 	LinearColorPropertyArray: LinearColor[];
 	ColorPropertyArray: Color[];
-	EnumPropertyArray: PropertEditorTestEnum[];
+	EnumPropertyArray: PropertyEditorTestEnum[];
 	StructPropertyArray: PropertyEditorTestBasicStruct[];
 	FixedArrayOfInts: number[];
 	StaticArrayOfInts: number;
@@ -10950,6 +11685,27 @@ declare class PropertyEditorTestObject extends UObject {
 	AnimClassInterface: any;
 	LightPropagationVolumeBlendable: any;
 	TextureOrBlendableInterface: UObject;
+	bSubcategory: boolean;
+	bSubcategoryAdvanced: boolean;
+	bSubcategoryFooSimple: boolean;
+	bSubcategoryFooAdvanced: boolean;
+	bSubcategoryBarSimple: boolean;
+	bSubcategoryBarAdvanced: boolean;
+	bSubcategoryLast: boolean;
+	bEnablesNext: boolean;
+	bEnabledByPrevious: boolean;
+	EnumEditCondition: EditColor;
+	bEnabledWhenBlue: boolean;
+	bEnabledWhenPink: boolean;
+	EnumAsByteEditCondition: PropertyEditorTestEnum;
+	bEnabledWhenEnumIs2: boolean;
+	bEnabledWhenEnumIs4: boolean;
+	IntegerEditCondition: number;
+	bEnabledWhenIntGreaterOrEqual5: boolean;
+	bEnabledWhenIntLessOrEqual10: boolean;
+	FloatEditCondition: number;
+	bEnabledWhenFloatGreaterThan5: boolean;
+	bEnabledWhenFloatLessThan10: boolean;
 	static Load(ResourceName: string): PropertyEditorTestObject;
 	static Find(Outer: UObject, ResourceName: string): PropertyEditorTestObject;
 	static GetDefaultObject(): PropertyEditorTestObject;
@@ -11123,6 +11879,14 @@ declare class SequenceExporterT3D extends Exporter {
 	static C(Other: UObject | any): SequenceExporterT3D;
 }
 
+declare class ShaderCodeLibraryToolsCommandlet extends Commandlet { 
+	static Load(ResourceName: string): ShaderCodeLibraryToolsCommandlet;
+	static Find(Outer: UObject, ResourceName: string): ShaderCodeLibraryToolsCommandlet;
+	static GetDefaultObject(): ShaderCodeLibraryToolsCommandlet;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ShaderCodeLibraryToolsCommandlet;
+	static C(Other: UObject | any): ShaderCodeLibraryToolsCommandlet;
+}
+
 declare class ShaderPipelineCacheToolsCommandlet extends Commandlet { 
 	static Load(ResourceName: string): ShaderPipelineCacheToolsCommandlet;
 	static Find(Outer: UObject, ResourceName: string): ShaderPipelineCacheToolsCommandlet;
@@ -11310,6 +12074,18 @@ declare class StructureFactory extends Factory {
 	static C(Other: UObject | any): StructureFactory;
 }
 
+declare type EStructViewerDeveloperType = 'SVDT_None' | 'SVDT_CurrentUser' | 'SVDT_All' | 'SVDT_Max';
+declare var EStructViewerDeveloperType : { SVDT_None:'SVDT_None',SVDT_CurrentUser:'SVDT_CurrentUser',SVDT_All:'SVDT_All',SVDT_Max:'SVDT_Max', };
+declare class StructViewerSettings extends UObject { 
+	DisplayInternalStructs: boolean;
+	DeveloperFolderType: EStructViewerDeveloperType;
+	static Load(ResourceName: string): StructViewerSettings;
+	static Find(Outer: UObject, ResourceName: string): StructViewerSettings;
+	static GetDefaultObject(): StructViewerSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StructViewerSettings;
+	static C(Other: UObject | any): StructViewerSettings;
+}
+
 declare class SubsurfaceProfileFactory extends Factory { 
 	static Load(ResourceName: string): SubsurfaceProfileFactory;
 	static Find(Outer: UObject, ResourceName: string): SubsurfaceProfileFactory;
@@ -11483,6 +12259,15 @@ declare class TextureExporterTGA extends Exporter {
 	static C(Other: UObject | any): TextureExporterTGA;
 }
 
+declare class TextureImportSettings extends DeveloperSettings { 
+	AutoVTSize: number;
+	static Load(ResourceName: string): TextureImportSettings;
+	static Find(Outer: UObject, ResourceName: string): TextureImportSettings;
+	static GetDefaultObject(): TextureImportSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureImportSettings;
+	static C(Other: UObject | any): TextureImportSettings;
+}
+
 declare class TextureRenderTargetCubeFactoryNew extends Factory { 
 	Width: number;
 	Format: number;
@@ -11712,7 +12497,8 @@ declare class StructVariableDescription {
 	bIsSet: boolean;
 	bIsMap: boolean;
 	bInvalidMember: boolean;
-	bDontEditoOnInstance: boolean;
+	bDontEditOnInstance: boolean;
+	bEnableSaveGame: boolean;
 	bEnableMultiLineText: boolean;
 	bEnable3dWidget: boolean;
 	CurrentDefaultValue: string;
@@ -11833,6 +12619,8 @@ declare class InstancedStaticMeshComponent extends StaticMeshComponent {
 	GetInstancesOverlappingBox(Box: Box,bBoxInWorldSpace: boolean): number[];
 	GetInstanceCount(): number;
 	ClearInstances(): void;
+	BatchUpdateInstancesTransforms(StartInstanceIndex: number,NewInstancesTransforms: Transform[],bWorldSpace: boolean,bMarkRenderStateDirty: boolean,bTeleport: boolean): boolean;
+	BatchUpdateInstancesTransform(StartInstanceIndex: number,NumInstances: number,NewInstancesTransform: Transform,bWorldSpace: boolean,bMarkRenderStateDirty: boolean,bTeleport: boolean): boolean;
 	AddInstanceWorldSpace(WorldTransform: Transform): number;
 	AddInstance(InstanceTransform: Transform): number;
 	static C(Other: UObject | any): InstancedStaticMeshComponent;
@@ -11943,6 +12731,7 @@ declare class FoliageType extends UObject {
 	LightingChannels: LightingChannels;
 	bRenderCustomDepth: boolean;
 	CustomDepthStencilValue: number;
+	TranslucencySortPriority: number;
 	HiddenEditorViews: any;
 	IsSelected: boolean;
 	CollisionRadius: number;
@@ -11978,6 +12767,9 @@ declare class FoliageType extends UObject {
 	ReapplyCollisionWithWorld: boolean;
 	ReapplyVertexColorMask: boolean;
 	bEnableDensityScaling: boolean;
+	RuntimeVirtualTextures: RuntimeVirtualTexture[];
+	VirtualTextureCullMips: number;
+	VirtualTextureRenderPassType: ERuntimeVirtualTextureMainPassType;
 	ScaleMinX: number;
 	ScaleMinY: number;
 	ScaleMinZ: number;
@@ -12005,6 +12797,15 @@ declare class FoliageType extends UObject {
 	static C(Other: UObject | any): FoliageType;
 }
 
+declare class FoliageType_Actor extends FoliageType { 
+	ActorClass: UnrealEngineClass;
+	static Load(ResourceName: string): FoliageType_Actor;
+	static Find(Outer: UObject, ResourceName: string): FoliageType_Actor;
+	static GetDefaultObject(): FoliageType_Actor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FoliageType_Actor;
+	static C(Other: UObject | any): FoliageType_Actor;
+}
+
 declare class FoliageType_InstancedStaticMesh extends FoliageType { 
 	Mesh: StaticMesh;
 	OverrideMaterials: MaterialInterface[];
@@ -12065,7 +12866,7 @@ declare class InteractiveFoliageComponent extends StaticMeshComponent {
 
 declare class FoliageTypeObject { 
 	FoliageTypeObject: UObject;
-	TypeInstance: FoliageType_InstancedStaticMesh;
+	TypeInstance: FoliageType;
 	bIsAsset: boolean;
 	Type: UnrealEngineClass;
 	clone() : FoliageTypeObject;
@@ -12125,7 +12926,7 @@ declare class ProceduralFoliageInstance {
 	Normal: Vector;
 	Age: number;
 	Scale: number;
-	Type: FoliageType_InstancedStaticMesh;
+	Type: FoliageType;
 	clone() : ProceduralFoliageInstance;
 	static C(Other: UObject | any): ProceduralFoliageInstance;
 }
@@ -12207,6 +13008,10 @@ declare class LandscapeSplineSegment extends UObject {
 	TranslucencySortPriority: number;
 	bHiddenInGame: boolean;
 	bPlaceSplineMeshesInStreamingLevels: boolean;
+	RuntimeVirtualTextures: RuntimeVirtualTexture[];
+	VirtualTextureLodBias: number;
+	VirtualTextureCullMips: number;
+	VirtualTextureRenderPassType: ERuntimeVirtualTextureMainPassType;
 	BodyInstance: BodyInstance;
 	bSelected: boolean;
 	bNavDirty: boolean;
@@ -12302,6 +13107,16 @@ declare class LandscapeComponentMaterialOverride {
 	static C(Other: UObject | any): LandscapeComponentMaterialOverride;
 }
 
+declare class LandscapeWeightmapUsage extends UObject { 
+	ChannelUsage: LandscapeComponent;
+	LayerGuid: Guid;
+	static Load(ResourceName: string): LandscapeWeightmapUsage;
+	static Find(Outer: UObject, ResourceName: string): LandscapeWeightmapUsage;
+	static GetDefaultObject(): LandscapeWeightmapUsage;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeWeightmapUsage;
+	static C(Other: UObject | any): LandscapeWeightmapUsage;
+}
+
 declare class LandscapeLayerInfoObject extends UObject { 
 	LayerName: string;
 	PhysMaterial: PhysicalMaterial;
@@ -12332,6 +13147,7 @@ declare class LandscapeEditToolRenderData {
 	DebugChannelG: number;
 	DebugChannelB: number;
 	DataTexture: Texture2D;
+	LayerContributionTexture: Texture2D;
 	clone() : LandscapeEditToolRenderData;
 	static C(Other: UObject | any): LandscapeEditToolRenderData;
 }
@@ -12350,16 +13166,19 @@ declare class LandscapeComponent extends PrimitiveComponent {
 	MaterialInstancesDynamic: MaterialInstanceDynamic[];
 	LODIndexToMaterialIndex: any[];
 	MaterialIndexToDisabledTessellationMaterial: any[];
-	WeightmapLayerAllocations: WeightmapLayerAllocationInfo[];
-	WeightmapTextures: Texture2D[];
 	XYOffsetmapTexture: Texture2D;
 	WeightmapScaleBias: Vector4;
 	WeightmapSubsectionOffset: number;
 	HeightmapScaleBias: Vector4;
-	HeightmapTexture: Texture2D;
 	CachedLocalBox: Box;
 	CollisionComponent: any;
 	LightingGuid: Guid;
+	LayersData: any;
+	WeightmapTexturesUsage: LandscapeWeightmapUsage[];
+	LayerUpdateFlagPerMode: any;
+	HeightmapTexture: Texture2D;
+	WeightmapLayerAllocations: WeightmapLayerAllocationInfo[];
+	WeightmapTextures: Texture2D[];
 	MapBuildDataId: Guid;
 	IrrelevantLights: Guid[];
 	CollisionMipLevel: number;
@@ -12425,6 +13244,7 @@ declare class LandscapeProxy extends Actor {
 	LODDistanceFactor: number;
 	LODFalloff: ELandscapeLODFalloff;
 	ComponentScreenSizeToUseSubSections: number;
+	LOD0ScreenSize: number;
 	LOD0DistributionSetting: number;
 	LODDistributionSetting: number;
 	TessellationComponentScreenSize: number;
@@ -12440,6 +13260,14 @@ declare class LandscapeProxy extends Actor {
 	LandscapeMaterial: MaterialInterface;
 	LandscapeHoleMaterial: MaterialInterface;
 	LandscapeMaterialsOverride: LandscapeProxyMaterialOverride[];
+	PreEditLandscapeMaterial: MaterialInterface;
+	PreEditLandscapeHoleMaterial: MaterialInterface;
+	PreEditLandscapeMaterialsOverride: LandscapeProxyMaterialOverride[];
+	bIsPerformingInteractiveActionOnLandscapeMaterialOverride: boolean;
+	RuntimeVirtualTextures: RuntimeVirtualTexture[];
+	VirtualTextureNumLods: number;
+	VirtualTextureLodBias: number;
+	VirtualTextureRenderPassType: ERuntimeVirtualTextureMainPassType;
 	NegativeZBoundsExtension: number;
 	PositiveZBoundsExtension: number;
 	LandscapeComponents: LandscapeComponent[];
@@ -12475,6 +13303,8 @@ declare class LandscapeProxy extends Actor {
 	NavigationGeometryGatheringMode: ENavDataGatheringMode;
 	MaxPaintedLayersPerComponent: number;
 	bUseLandscapeForCullingInvisibleHLODVertices: boolean;
+	bHasLayersContent: boolean;
+	WeightmapUsageMap: any;
 	static GetDefaultObject(): LandscapeProxy;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeProxy;
 	SetLandscapeMaterialVectorParameterValue(ParameterName: string,Value: LinearColor): void;
@@ -12494,6 +13324,42 @@ declare class LandscapeProxy extends Actor {
 	static C(Other: UObject | any): LandscapeProxy;
 }
 
+declare type ELandscapeBlendMode = 'LSBM_AdditiveBlend' | 'LSBM_AlphaBlend' | 'LSBM_MAX';
+declare var ELandscapeBlendMode : { LSBM_AdditiveBlend:'LSBM_AdditiveBlend',LSBM_AlphaBlend:'LSBM_AlphaBlend',LSBM_MAX:'LSBM_MAX', };
+declare class LandscapeBlueprintBrushBase extends Actor { 
+	OwningLandscape: Landscape;
+	AffectHeightmap: boolean;
+	AffectWeightmap: boolean;
+	AffectedWeightmapLayers: string[];
+	bIsVisible: boolean;
+	static GetDefaultObject(): LandscapeBlueprintBrushBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeBlueprintBrushBase;
+	RequestLandscapeUpdate(): void;
+	Render(InIsHeightmap: boolean,InCombinedResult: TextureRenderTarget2D,InWeightmapLayerName: string): TextureRenderTarget2D;
+	Initialize(InLandscapeTransform: Transform,InLandscapeSize: IntPoint,InLandscapeRenderTargetSize: IntPoint): void;
+	static C(Other: UObject | any): LandscapeBlueprintBrushBase;
+}
+
+declare class LandscapeLayerBrush { 
+	BlueprintBrush: LandscapeBlueprintBrushBase;
+	clone() : LandscapeLayerBrush;
+	static C(Other: UObject | any): LandscapeLayerBrush;
+}
+
+declare class LandscapeLayer { 
+	Guid: Guid;
+	Name: string;
+	bVisible: boolean;
+	bLocked: boolean;
+	HeightmapAlpha: number;
+	WeightmapAlpha: number;
+	BlendMode: ELandscapeBlendMode;
+	Brushes: LandscapeLayerBrush[];
+	WeightmapLayerAllocationBlend: any;
+	clone() : LandscapeLayer;
+	static C(Other: UObject | any): LandscapeLayer;
+}
+
 declare class LandscapeInfoLayerSettings { 
 	LayerInfoObj: LandscapeLayerInfoObject;
 	LayerName: string;
@@ -12536,6 +13402,15 @@ declare class LandscapeInfo extends UObject {
 }
 
 declare class Landscape extends LandscapeProxy { 
+	bCanHaveLayersContent: boolean;
+	LandscapeSplinesTargetLayerGuid: Guid;
+	LandscapeLayers: LandscapeLayer[];
+	HeightmapRTList: TextureRenderTarget2D[];
+	WeightmapRTList: TextureRenderTarget2D[];
+	LandscapeSplinesAffectedComponents: any;
+	bLandscapeLayersAreInitialized: boolean;
+	WasCompilingShaders: boolean;
+	LayerContentUpdateModes: any;
 	static GetDefaultObject(): Landscape;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Landscape;
 	static C(Other: UObject | any): Landscape;
@@ -12679,6 +13554,15 @@ declare class LandscapeMeshProxyActor extends Actor {
 	static C(Other: UObject | any): LandscapeMeshProxyActor;
 }
 
+declare class LandscapeSettings extends DeveloperSettings { 
+	MaxNumberOfLayers: number;
+	static Load(ResourceName: string): LandscapeSettings;
+	static Find(Outer: UObject, ResourceName: string): LandscapeSettings;
+	static GetDefaultObject(): LandscapeSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeSettings;
+	static C(Other: UObject | any): LandscapeSettings;
+}
+
 declare class LandscapeStreamingProxy extends LandscapeProxy { 
 	LandscapeActor: any;
 	static GetDefaultObject(): LandscapeStreamingProxy;
@@ -12940,12 +13824,43 @@ declare class BakedAnimationStateMachine {
 	static C(Other: UObject | any): BakedAnimationStateMachine;
 }
 
+declare type EPostCopyOperation = 'None' | 'LogicalNegateBool' | 'EPostCopyOperation_MAX';
+declare var EPostCopyOperation : { None:'None',LogicalNegateBool:'LogicalNegateBool',EPostCopyOperation_MAX:'EPostCopyOperation_MAX', };
+declare type ECopyType = 'MemCopy' | 'BoolProperty' | 'StructProperty' | 'ObjectProperty' | 'ECopyType_MAX';
+declare var ECopyType : { MemCopy:'MemCopy',BoolProperty:'BoolProperty',StructProperty:'StructProperty',ObjectProperty:'ObjectProperty',ECopyType_MAX:'ECopyType_MAX', };
+declare class ExposedValueCopyRecord { 
+	SourceProperty: Property;
+	SourcePropertyName: string;
+	SourceSubPropertyName: string;
+	SourceArrayIndex: number;
+	bInstanceIsTarget: boolean;
+	PostCopyOperation: EPostCopyOperation;
+	CopyType: ECopyType;
+	DestProperty: Property;
+	DestArrayIndex: number;
+	Size: number;
+	CachedSourceProperty: Property;
+	CachedSourceStructSubProperty: Property;
+	clone() : ExposedValueCopyRecord;
+	static C(Other: UObject | any): ExposedValueCopyRecord;
+}
+
+declare class ExposedValueHandler { 
+	BoundFunction: string;
+	CopyRecords: ExposedValueCopyRecord[];
+	UFunction: UFunction;
+	ValueHandlerNodeProperty: StructProperty;
+	clone() : ExposedValueHandler;
+	static C(Other: UObject | any): ExposedValueHandler;
+}
+
 declare class AnimBlueprintGeneratedClass extends BlueprintGeneratedClass { 
 	BakedStateMachines: BakedAnimationStateMachine[];
 	TargetSkeleton: Skeleton;
 	AnimNotifies: AnimNotifyEvent[];
-	OrderedSavedPoseIndices: number[];
+	OrderedSavedPoseIndicesMap: any;
 	SyncGroupNames: string[];
+	EvaluateGraphExposedInputs: ExposedValueHandler[];
 	static Load(ResourceName: string): AnimBlueprintGeneratedClass;
 	static Find(Outer: UObject, ResourceName: string): AnimBlueprintGeneratedClass;
 	static GetDefaultObject(): AnimBlueprintGeneratedClass;
@@ -12953,15 +13868,31 @@ declare class AnimBlueprintGeneratedClass extends BlueprintGeneratedClass {
 	static C(Other: UObject | any): AnimBlueprintGeneratedClass;
 }
 
+declare class AnimBlueprintFunction { 
+	Name: string;
+	Group: string;
+	OutputPoseNodeIndex: number;
+	InputPoseNames: string[];
+	InputPoseNodeIndices: number[];
+	OutputPoseNodeProperty: StructProperty;
+	InputPoseNodeProperties: StructProperty[];
+	InputProperties: Property[];
+	bImplemented: boolean;
+	clone() : AnimBlueprintFunction;
+	static C(Other: UObject | any): AnimBlueprintFunction;
+}
+
 declare class AnimClassData extends UObject { 
 	BakedStateMachines: BakedAnimationStateMachine[];
 	TargetSkeleton: Skeleton;
 	AnimNotifies: AnimNotifyEvent[];
-	RootAnimNodeIndex: number;
-	OrderedSavedPoseIndices: number[];
-	RootAnimNodeProperty: StructProperty;
+	OrderedSavedPoseIndicesMap: any;
+	AnimBlueprintFunctions: AnimBlueprintFunction[];
 	AnimNodeProperties: StructProperty[];
+	SubInstanceNodeProperties: StructProperty[];
+	LayerNodeProperties: StructProperty[];
 	SyncGroupNames: string[];
+	EvaluateGraphExposedInputs: ExposedValueHandler[];
 	static Load(ResourceName: string): AnimClassData;
 	static Find(Outer: UObject, ResourceName: string): AnimClassData;
 	static GetDefaultObject(): AnimClassData;
@@ -13086,6 +14017,27 @@ declare class AnimCompress_RemoveTrivialKeys extends AnimCompress {
 	static C(Other: UObject | any): AnimCompress_RemoveTrivialKeys;
 }
 
+declare class AnimCurveCompressionCodec_CompressedRichCurve extends AnimCurveCompressionCodec { 
+	MaxCurveError: number;
+	UseAnimSequenceSampleRate: boolean;
+	ErrorSampleRate: number;
+	static Load(ResourceName: string): AnimCurveCompressionCodec_CompressedRichCurve;
+	static Find(Outer: UObject, ResourceName: string): AnimCurveCompressionCodec_CompressedRichCurve;
+	static GetDefaultObject(): AnimCurveCompressionCodec_CompressedRichCurve;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCurveCompressionCodec_CompressedRichCurve;
+	static C(Other: UObject | any): AnimCurveCompressionCodec_CompressedRichCurve;
+}
+
+declare class AnimCurveCompressionCodec_UniformlySampled extends AnimCurveCompressionCodec { 
+	UseAnimSequenceSampleRate: boolean;
+	SampleRate: number;
+	static Load(ResourceName: string): AnimCurveCompressionCodec_UniformlySampled;
+	static Find(Outer: UObject, ResourceName: string): AnimCurveCompressionCodec_UniformlySampled;
+	static GetDefaultObject(): AnimCurveCompressionCodec_UniformlySampled;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimCurveCompressionCodec_UniformlySampled;
+	static C(Other: UObject | any): AnimCurveCompressionCodec_UniformlySampled;
+}
+
 declare class AnimNotify_PauseClothingSimulation extends AnimNotify { 
 	static Load(ResourceName: string): AnimNotify_PauseClothingSimulation;
 	static Find(Outer: UObject, ResourceName: string): AnimNotify_PauseClothingSimulation;
@@ -13219,6 +14171,36 @@ declare class AnimStateMachineTypes extends UObject {
 	static C(Other: UObject | any): AnimStateMachineTypes;
 }
 
+declare class RawAnimSequenceTrack { 
+	PosKeys: Vector[];
+	RotKeys: Quat[];
+	ScaleKeys: Vector[];
+	clone() : RawAnimSequenceTrack;
+	static C(Other: UObject | any): RawAnimSequenceTrack;
+}
+
+declare class AnimStreamable extends AnimSequenceBase { 
+	NumFrames: number;
+	Interpolation: EAnimInterpolationType;
+	RetargetSource: string;
+	SourceSequence: AnimSequence;
+	CompressionScheme: AnimCompress;
+	RawDataGuid: Guid;
+	RawAnimationData: RawAnimSequenceTrack[];
+	TrackToSkeletonMapTable: TrackToSkeletonMap[];
+	AnimationTrackNames: string[];
+	CurveCompressionSettings: AnimCurveCompressionSettings;
+	bEnableRootMotion: boolean;
+	RootMotionRootLock: ERootMotionRootLock;
+	bForceRootLock: boolean;
+	bUseNormalizedRootMotionScale: boolean;
+	static Load(ResourceName: string): AnimStreamable;
+	static Find(Outer: UObject, ResourceName: string): AnimStreamable;
+	static GetDefaultObject(): AnimStreamable;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimStreamable;
+	static C(Other: UObject | any): AnimStreamable;
+}
+
 declare type ETemperatureSeverityType = 'Unknown' | 'Good' | 'Bad' | 'Serious' | 'Critical' | 'NumSeverities' | 'ETemperatureSeverityType_MAX';
 declare var ETemperatureSeverityType : { Unknown:'Unknown',Good:'Good',Bad:'Bad',Serious:'Serious',Critical:'Critical',NumSeverities:'NumSeverities',ETemperatureSeverityType_MAX:'ETemperatureSeverityType_MAX', };
 declare class ApplicationLifecycleComponent extends ActorComponent { 
@@ -13272,6 +14254,15 @@ declare class PrimaryAssetRulesOverride {
 	static C(Other: UObject | any): PrimaryAssetRulesOverride;
 }
 
+declare class PrimaryAssetRulesCustomOverride { 
+	PrimaryAssetType: PrimaryAssetType;
+	FilterDirectory: DirectoryPath;
+	FilterString: string;
+	Rules: PrimaryAssetRules;
+	clone() : PrimaryAssetRulesCustomOverride;
+	static C(Other: UObject | any): PrimaryAssetRulesCustomOverride;
+}
+
 declare class AssetManagerRedirect { 
 	Old: string;
 	New: string;
@@ -13283,6 +14274,7 @@ declare class AssetManagerSettings extends DeveloperSettings {
 	PrimaryAssetTypesToScan: PrimaryAssetTypeInfo[];
 	DirectoriesToExclude: DirectoryPath[];
 	PrimaryAssetRules: PrimaryAssetRulesOverride[];
+	CustomPrimaryAssetRules: PrimaryAssetRulesCustomOverride[];
 	bOnlyCookProductionAssets: boolean;
 	bShouldManagerDetermineTypeAndName: boolean;
 	bShouldGuessTypeAndNameInEditor: boolean;
@@ -13298,6 +14290,18 @@ declare class AssetManagerSettings extends DeveloperSettings {
 	static C(Other: UObject | any): AssetManagerSettings;
 }
 
+declare class AsyncActionHandleSaveGame extends BlueprintAsyncActionBase { 
+	Completed: UnrealEngineMulticastDelegate<(SaveGame: SaveGame, bSuccess: boolean) => void>;
+	SaveGameObject: SaveGame;
+	static Load(ResourceName: string): AsyncActionHandleSaveGame;
+	static Find(Outer: UObject, ResourceName: string): AsyncActionHandleSaveGame;
+	static GetDefaultObject(): AsyncActionHandleSaveGame;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AsyncActionHandleSaveGame;
+	static AsyncSaveGameToSlot(WorldContextObject: UObject,SaveGameObject: SaveGame,SlotName: string,UserIndex: number): AsyncActionHandleSaveGame;
+	static AsyncLoadGameFromSlot(WorldContextObject: UObject,SlotName: string,UserIndex: number): AsyncActionHandleSaveGame;
+	static C(Other: UObject | any): AsyncActionHandleSaveGame;
+}
+
 declare class AsyncActionLoadPrimaryAssetBase extends BlueprintAsyncActionBase { 
 	static Load(ResourceName: string): AsyncActionLoadPrimaryAssetBase;
 	static Find(Outer: UObject, ResourceName: string): AsyncActionLoadPrimaryAssetBase;
@@ -13387,6 +14391,7 @@ declare class AtmosphericFogComponent extends SceneComponent {
 	DefaultBrightness: number;
 	DefaultLightColor: Color;
 	bDisableSunDisk: boolean;
+	bAtmosphereAffectsSunIlluminance: boolean;
 	bDisableGroundScattering: boolean;
 	PrecomputeParams: AtmospherePrecomputeParameters;
 	TransmittanceTexture: Texture2D;
@@ -13442,12 +14447,14 @@ declare class AudioSettings extends DeveloperSettings {
 	VoiPSampleRate: EVoiceSampleRate;
 	VoipBufferingDelay: number;
 	DefaultReverbSendLevel: number;
+	bEnableLegacyReverb: boolean;
 	MaximumConcurrentStreams: number;
+	GlobalMinPitchScale: number;
+	GlobalMaxPitchScale: number;
 	QualityLevels: AudioQualitySettings[];
-	bAllowVirtualizedSounds: boolean;
+	bAllowPlayWhenSilent: boolean;
 	bDisableMasterEQ: boolean;
 	bAllowCenterChannel3DPanning: boolean;
-	MaxWaveInstances: any;
 	NumStoppingSources: any;
 	PanningMethod: EPanningMethod;
 	MonoChannelUpmixMethod: EMonoChannelUpmixMethod;
@@ -13641,6 +14648,96 @@ declare class BlueprintMapLibrary extends BlueprintFunctionLibrary {
 	static C(Other: UObject | any): BlueprintMapLibrary;
 }
 
+declare class BlueprintPathsLibrary extends BlueprintFunctionLibrary { 
+	static Load(ResourceName: string): BlueprintPathsLibrary;
+	static Find(Outer: UObject, ResourceName: string): BlueprintPathsLibrary;
+	static GetDefaultObject(): BlueprintPathsLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintPathsLibrary;
+	static VideoCaptureDir(): string;
+	static ValidatePath(InPath: string,bDidSucceed?: boolean,OutReason?: string): {bDidSucceed: boolean, OutReason: string};
+	static Split(InPath: string,PathPart?: string,FilenamePart?: string,ExtensionPart?: string): {PathPart: string, FilenamePart: string, ExtensionPart: string};
+	static SourceConfigDir(): string;
+	static ShouldSaveToUserDir(): boolean;
+	static ShaderWorkingDir(): string;
+	static SetProjectFilePath(NewGameProjectFilePath: string): void;
+	static SetExtension(InPath: string,InNewExtension: string): string;
+	static ScreenShotDir(): string;
+	static SandboxesDir(): string;
+	static RootDir(): string;
+	static RemoveDuplicateSlashes(InPath: string,OutPath?: string): {OutPath: string};
+	static ProjectUserDir(): string;
+	static ProjectSavedDir(): string;
+	static ProjectPluginsDir(): string;
+	static ProjectPersistentDownloadDir(): string;
+	static ProjectModsDir(): string;
+	static ProjectLogDir(): string;
+	static ProjectIntermediateDir(): string;
+	static ProjectDir(): string;
+	static ProjectContentDir(): string;
+	static ProjectConfigDir(): string;
+	static ProfilingDir(): string;
+	static NormalizeFilename(InPath: string,OutPath?: string): {OutPath: string};
+	static NormalizeDirectoryName(InPath: string,OutPath?: string): {OutPath: string};
+	static MakeValidFileName(inString: string,InReplacementChar: string): string;
+	static MakeStandardFilename(InPath: string,OutPath?: string): {OutPath: string};
+	static MakePlatformFilename(InPath: string,OutPath?: string): {OutPath: string};
+	static MakePathRelativeTo(InPath: string,InRelativeTo: string,OutPath?: string): {OutPath: string, $: boolean};
+	static LaunchDir(): string;
+	static IsSamePath(PathA: string,PathB: string): boolean;
+	static IsRestrictedPath(InPath: string): boolean;
+	static IsRelative(InPath: string): boolean;
+	static IsProjectFilePathSet(): boolean;
+	static IsDrive(InPath: string): boolean;
+	static HasProjectPersistentDownloadDir(): boolean;
+	static GetToolTipLocalizationPaths(): string[];
+	static GetRestrictedFolderNames(): string[];
+	static GetRelativePathToRoot(): string;
+	static GetPropertyNameLocalizationPaths(): string[];
+	static GetProjectFilePath(): string;
+	static GetPath(InPath: string): string;
+	static GetInvalidFileSystemChars(): string;
+	static GetGameLocalizationPaths(): string[];
+	static GetExtension(InPath: string,bIncludeDot: boolean): string;
+	static GetEngineLocalizationPaths(): string[];
+	static GetEditorLocalizationPaths(): string[];
+	static GetCleanFilename(InPath: string): string;
+	static GetBaseFilename(InPath: string,bRemovePath: boolean): string;
+	static GeneratedConfigDir(): string;
+	static GameUserDeveloperDir(): string;
+	static GameSourceDir(): string;
+	static GameDevelopersDir(): string;
+	static GameAgnosticSavedDir(): string;
+	static FileExists(InPath: string): boolean;
+	static FeaturePackDir(): string;
+	static EnterprisePluginsDir(): string;
+	static EnterpriseFeaturePackDir(): string;
+	static EnterpriseDir(): string;
+	static EngineVersionAgnosticUserDir(): string;
+	static EngineUserDir(): string;
+	static EngineSourceDir(): string;
+	static EngineSavedDir(): string;
+	static EnginePluginsDir(): string;
+	static EngineIntermediateDir(): string;
+	static EngineDir(): string;
+	static EngineContentDir(): string;
+	static EngineConfigDir(): string;
+	static DirectoryExists(InPath: string): boolean;
+	static DiffDir(): string;
+	static CreateTempFilename(Path: string,Prefix: string,Extension: string): string;
+	static ConvertToSandboxPath(InPath: string,InSandboxName: string): string;
+	static ConvertRelativePathToFull(InPath: string,InBasePath: string): string;
+	static ConvertFromSandboxPath(InPath: string,InSandboxName: string): string;
+	static Combine(InPaths: string[]): string;
+	static CollapseRelativeDirectories(InPath: string,OutPath?: string): {OutPath: string, $: boolean};
+	static CloudDir(): string;
+	static ChangeExtension(InPath: string,InNewExtension: string): string;
+	static BugItDir(): string;
+	static AutomationTransientDir(): string;
+	static AutomationLogDir(): string;
+	static AutomationDir(): string;
+	static C(Other: UObject | any): BlueprintPathsLibrary;
+}
+
 declare type EApplicationState = 'Unknown' | 'Inactive' | 'Background' | 'Active' | 'EApplicationState_MAX';
 declare var EApplicationState : { Unknown:'Unknown',Inactive:'Inactive',Background:'Background',Active:'Active',EApplicationState_MAX:'EApplicationState_MAX', };
 declare type EScreenOrientation = 'Unknown' | 'Portrait' | 'PortraitUpsideDown' | 'LandscapeLeft' | 'LandscapeRight' | 'FaceUp' | 'FaceDown' | 'EScreenOrientation_MAX';
@@ -13763,8 +14860,8 @@ declare class DateTime {
 	NotEqual_DateTimeDateTime(B: DateTime): boolean;
 	Subtract_DateTimeDateTime(B: DateTime): Timespan;
 	Subtract_DateTimeTimespan(B: Timespan): DateTime;
-	ScheduleLocalNotificationAtTime(LocalTime: boolean,Title: string,Body: string,Action: string,ActivationEvent: string): void;
-	ScheduleLocalNotificationBadgeAtTime(LocalTime: boolean,ActivationEvent: string): void;
+	ScheduleLocalNotificationAtTime(LocalTime: boolean,Title: string,Body: string,Action: string,ActivationEvent: string): number;
+	ScheduleLocalNotificationBadgeAtTime(LocalTime: boolean,ActivationEvent: string): number;
 	static AsDate_DateTime(InDateTime: DateTime): string;
 	static AsDateTime_DateTime(In: DateTime): string;
 	static AsTime_DateTime(In: DateTime): string;
@@ -13794,8 +14891,8 @@ declare class DateTime {
 	static NotEqual_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
 	static Subtract_DateTimeDateTime(A: DateTime,B: DateTime): Timespan;
 	static Subtract_DateTimeTimespan(A: DateTime,B: Timespan): DateTime;
-	static ScheduleLocalNotificationAtTime(FireDateTime: DateTime,LocalTime: boolean,Title: string,Body: string,Action: string,ActivationEvent: string): void;
-	static ScheduleLocalNotificationBadgeAtTime(FireDateTime: DateTime,LocalTime: boolean,ActivationEvent: string): void;
+	static ScheduleLocalNotificationAtTime(FireDateTime: DateTime,LocalTime: boolean,Title: string,Body: string,Action: string,ActivationEvent: string): number;
+	static ScheduleLocalNotificationBadgeAtTime(FireDateTime: DateTime,LocalTime: boolean,ActivationEvent: string): number;
 	static DateTimeMaxValue(): DateTime;
 	static DateTimeMinValue(): DateTime;
 	static MakeDateTime(Year: number,Month: number,Day: number,Hour: number,Minute: number,Second: number,Millisecond: number): DateTime;
@@ -13809,13 +14906,14 @@ declare class BlueprintPlatformLibrary extends BlueprintFunctionLibrary {
 	static Find(Outer: UObject, ResourceName: string): BlueprintPlatformLibrary;
 	static GetDefaultObject(): BlueprintPlatformLibrary;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlueprintPlatformLibrary;
-	static ScheduleLocalNotificationFromNow(inSecondsFromNow: number,Title: string,Body: string,Action: string,ActivationEvent: string): void;
+	static ScheduleLocalNotificationFromNow(inSecondsFromNow: number,Title: string,Body: string,Action: string,ActivationEvent: string): number;
 	static ScheduleLocalNotificationBadgeFromNow(inSecondsFromNow: number,ActivationEvent: string): void;
-	static ScheduleLocalNotificationBadgeAtTime(FireDateTime: DateTime,LocalTime: boolean,ActivationEvent: string): void;
-	static ScheduleLocalNotificationAtTime(FireDateTime: DateTime,LocalTime: boolean,Title: string,Body: string,Action: string,ActivationEvent: string): void;
+	static ScheduleLocalNotificationBadgeAtTime(FireDateTime: DateTime,LocalTime: boolean,ActivationEvent: string): number;
+	static ScheduleLocalNotificationAtTime(FireDateTime: DateTime,LocalTime: boolean,Title: string,Body: string,Action: string,ActivationEvent: string): number;
 	static GetLaunchNotification(NotificationLaunchedApp?: boolean,ActivationEvent?: string,FireDate?: number): {NotificationLaunchedApp: boolean, ActivationEvent: string, FireDate: number};
 	static GetDeviceOrientation(): EScreenOrientation;
 	static ClearAllLocalNotifications(): void;
+	static CancelLocalNotificationById(NotificationId: number): void;
 	static CancelLocalNotification(ActivationEvent: string): void;
 	static C(Other: UObject | any): BlueprintPlatformLibrary;
 }
@@ -13877,7 +14975,7 @@ declare var EReflectionSourceType : { CapturedScene:'CapturedScene',SpecifiedCub
 declare class ReflectionCaptureComponent extends SceneComponent { 
 	CaptureOffsetComponent: BillboardComponent;
 	ReflectionSourceType: EReflectionSourceType;
-	Cubemap: TextureCube;
+	CubeMap: TextureCube;
 	SourceCubemapAngle: number;
 	Brightness: number;
 	CaptureOffset: Vector;
@@ -14134,8 +15232,8 @@ declare class GarbageCollectionSettings extends DeveloperSettings {
 	FlushStreamingOnGC: boolean;
 	AllowParallelGC: boolean;
 	IncrementalBeginDestroyEnabled: boolean;
+	MultithreadedDestructionEnabled: boolean;
 	CreateGCClusters: boolean;
-	MergeGCClusters: boolean;
 	ActorClusteringEnabled: boolean;
 	BlueprintClusteringEnabled: boolean;
 	UseDisregardForGCOnDedicatedServers: boolean;
@@ -14233,6 +15331,21 @@ declare class DataTableFunctionLibrary extends BlueprintFunctionLibrary {
 	static C(Other: UObject | any): DataTableFunctionLibrary;
 }
 
+declare class DebugCameraControllerSettingsViewModeIndex { 
+	ViewModeIndex: EViewModeIndex;
+	clone() : DebugCameraControllerSettingsViewModeIndex;
+	static C(Other: UObject | any): DebugCameraControllerSettingsViewModeIndex;
+}
+
+declare class DebugCameraControllerSettings extends DeveloperSettings { 
+	CycleViewModes: DebugCameraControllerSettingsViewModeIndex[];
+	static Load(ResourceName: string): DebugCameraControllerSettings;
+	static Find(Outer: UObject, ResourceName: string): DebugCameraControllerSettings;
+	static GetDefaultObject(): DebugCameraControllerSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DebugCameraControllerSettings;
+	static C(Other: UObject | any): DebugCameraControllerSettings;
+}
+
 declare class DebugCameraHUD extends HUD { 
 	static GetDefaultObject(): DebugCameraHUD;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DebugCameraHUD;
@@ -14309,6 +15422,7 @@ declare class TextureLODGroup {
 	OptionalMaxLODSize: number;
 	MinMagFilter: string;
 	MipFilter: string;
+	MipLoadOptions: ETextureMipLoadOptions;
 	clone() : TextureLODGroup;
 	static C(Other: UObject | any): TextureLODGroup;
 }
@@ -14364,13 +15478,6 @@ declare class Light extends Actor {
 	static C(Other: UObject | any): Light;
 }
 
-declare class DirectionalLight extends Light { 
-	ArrowComponent: ArrowComponent;
-	static GetDefaultObject(): DirectionalLight;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DirectionalLight;
-	static C(Other: UObject | any): DirectionalLight;
-}
-
 declare class LightmassDirectionalLightSettings extends LightmassLightSettings { 
 	LightSourceAngle: number;
 	clone() : LightmassDirectionalLightSettings;
@@ -14378,6 +15485,7 @@ declare class LightmassDirectionalLightSettings extends LightmassLightSettings {
 }
 
 declare class DirectionalLightComponent extends LightComponent { 
+	ShadowCascadeBiasDistribution: number;
 	bEnableLightShaftOcclusion: boolean;
 	OcclusionMaskDarkness: number;
 	OcclusionDepthRange: number;
@@ -14416,6 +15524,14 @@ declare class DirectionalLightComponent extends LightComponent {
 	static C(Other: UObject | any): DirectionalLightComponent;
 }
 
+declare class DirectionalLight extends Light { 
+	ArrowComponent: ArrowComponent;
+	DirectionalLightComponent: DirectionalLightComponent;
+	static GetDefaultObject(): DirectionalLight;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DirectionalLight;
+	static C(Other: UObject | any): DirectionalLight;
+}
+
 declare class DistributionFloatConstant extends DistributionFloat { 
 	Constant: number;
 	static Load(ResourceName: string): DistributionFloatConstant;
@@ -14692,8 +15808,18 @@ declare class EngineTypes extends UObject {
 	static C(Other: UObject | any): EngineTypes;
 }
 
+declare class ExponentialHeightFogData { 
+	FogDensity: number;
+	FogHeightFalloff: number;
+	FogHeightOffset: number;
+	clone() : ExponentialHeightFogData;
+	static C(Other: UObject | any): ExponentialHeightFogData;
+}
+
 declare class ExponentialHeightFogComponent extends SceneComponent { 
 	FogDensity: number;
+	FogHeightFalloff: number;
+	SecondFogData: ExponentialHeightFogData;
 	FogInscatteringColor: LinearColor;
 	InscatteringColorCubemap: TextureCube;
 	InscatteringColorCubemapAngle: number;
@@ -14703,7 +15829,6 @@ declare class ExponentialHeightFogComponent extends SceneComponent {
 	DirectionalInscatteringExponent: number;
 	DirectionalInscatteringStartDistance: number;
 	DirectionalInscatteringColor: LinearColor;
-	FogHeightFalloff: number;
 	FogMaxOpacity: number;
 	StartDistance: number;
 	FogCutoffDistance: number;
@@ -14791,36 +15916,6 @@ declare class GameEngine extends Engine {
 	static C(Other: UObject | any): GameEngine;
 }
 
-declare class GameMode extends GameModeBase { 
-	MatchState: string;
-	bDelayedStart: boolean;
-	NumSpectators: number;
-	NumPlayers: number;
-	NumBots: number;
-	MinRespawnDelay: number;
-	NumTravellingPlayers: number;
-	EngineMessageClass: UnrealEngineClass;
-	InactivePlayerArray: PlayerState[];
-	InactivePlayerStateLifeSpan: number;
-	MaxInactivePlayers: number;
-	bHandleDedicatedServerReplays: boolean;
-	static GetDefaultObject(): GameMode;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameMode;
-	StartMatch(): void;
-	SetBandwidthLimit(AsyncIOBandwidthLimit: number): void;
-	Say(Msg: string): void;
-	RestartGame(): void;
-	ReadyToStartMatch(): boolean;
-	ReadyToEndMatch(): boolean;
-	K2_OnSetMatchState(NewState: string): void;
-	IsMatchInProgress(): boolean;
-	HasMatchEnded(): boolean;
-	GetMatchState(): string;
-	EndMatch(): void;
-	AbortMatch(): void;
-	static C(Other: UObject | any): GameMode;
-}
-
 declare class GameplayStatics extends BlueprintFunctionLibrary { 
 	static Load(ResourceName: string): GameplayStatics;
 	static Find(Outer: UObject, ResourceName: string): GameplayStatics;
@@ -14842,9 +15937,11 @@ declare class GameplayStatics extends BlueprintFunctionLibrary {
 	static SpawnDecalAttached(DecalMaterial: MaterialInterface,DecalSize: Vector,AttachToComponent: SceneComponent,AttachPointName: string,Location: Vector,Rotation: Rotator,LocationType: EAttachLocation,LifeSpan: number): DecalComponent;
 	static SpawnDecalAtLocation(WorldContextObject: UObject,DecalMaterial: MaterialInterface,DecalSize: Vector,Location: Vector,Rotation: Rotator,LifeSpan: number): DecalComponent;
 	static SetWorldOriginLocation(WorldContextObject: UObject,NewLocation: IntVector): void;
+	static SetViewportMouseCaptureMode(WorldContextObject: UObject,MouseCaptureMode: EMouseCaptureMode): void;
 	static SetSubtitlesEnabled(bEnabled: boolean): void;
 	static SetSoundMixClassOverride(WorldContextObject: UObject,InSoundMixModifier: SoundMix,InSoundClass: SoundClass,Volume: number,Pitch: number,FadeInTime: number,bApplyToChildren: boolean): void;
 	static SetPlayerControllerID(Player: PlayerController,ControllerId: number): void;
+	static SetMaxAudioChannelsScaled(WorldContextObject: UObject,MaxChannelCountScale: number): void;
 	static SetGlobalTimeDilation(WorldContextObject: UObject,TimeDilation: number): void;
 	static SetGlobalPitchModulation(WorldContextObject: UObject,PitchModulation: number,TimeSec: number): void;
 	static SetGlobalListenerFocusParameters(WorldContextObject: UObject,FocusAzimuthScale: number,NonFocusAzimuthScale: number,FocusDistanceScale: number,NonFocusDistanceScale: number,FocusVolumeScale: number,NonFocusVolumeScale: number,FocusPriorityScale: number,NonFocusPriorityScale: number): void;
@@ -14874,6 +15971,7 @@ declare class GameplayStatics extends BlueprintFunctionLibrary {
 	static GrassOverlappingSphereCount(WorldContextObject: UObject,StaticMesh: StaticMesh,CenterPosition: Vector,Radius: number): number;
 	static GetWorldOriginLocation(WorldContextObject: UObject): IntVector;
 	static GetWorldDeltaSeconds(WorldContextObject: UObject): number;
+	static GetViewportMouseCaptureMode(WorldContextObject: UObject): EMouseCaptureMode;
 	static GetUnpausedTimeSeconds(WorldContextObject: UObject): number;
 	static GetTimeSeconds(WorldContextObject: UObject): number;
 	static GetSurfaceType(Hit: HitResult): EPhysicalSurface;
@@ -14881,11 +15979,13 @@ declare class GameplayStatics extends BlueprintFunctionLibrary {
 	static GetRealTimeSeconds(WorldContextObject: UObject): number;
 	static GetPlayerPawn(WorldContextObject: UObject,PlayerIndex: number): Pawn;
 	static GetPlayerControllerID(Player: PlayerController): number;
+	static GetPlayerControllerFromID(WorldContextObject: UObject,ControllerId: number): PlayerController;
 	static GetPlayerController(WorldContextObject: UObject,PlayerIndex: number): PlayerController;
 	static GetPlayerCharacter(WorldContextObject: UObject,PlayerIndex: number): Character;
 	static GetPlayerCameraManager(WorldContextObject: UObject,PlayerIndex: number): PlayerCameraManager;
 	static GetPlatformName(): string;
 	static GetObjectClass(UObject: UObject): UnrealEngineClass;
+	static GetMaxAudioChannelCount(WorldContextObject: UObject): number;
 	static GetKeyValue(Pair: string,Key?: string,Value?: string): {Key: string, Value: string};
 	static GetIntOption(Options: string,Key: string,DefaultValue: number): number;
 	static GetGlobalTimeDilation(WorldContextObject: UObject): number;
@@ -14898,7 +15998,9 @@ declare class GameplayStatics extends BlueprintFunctionLibrary {
 	static GetAudioTimeSeconds(WorldContextObject: UObject): number;
 	static GetAllActorsWithTag(WorldContextObject: UObject,Tag: string,OutActors?: Actor[]): {OutActors: Actor[]};
 	static GetAllActorsWithInterface(WorldContextObject: UObject,Interface: UnrealEngineClass,OutActors?: Actor[]): {OutActors: Actor[]};
+	static GetAllActorsOfClassWithTag(WorldContextObject: UObject,ActorClass: UnrealEngineClass,Tag: string,OutActors?: Actor[]): {OutActors: Actor[]};
 	static GetAllActorsOfClass(WorldContextObject: UObject,ActorClass: UnrealEngineClass,OutActors?: Actor[]): {OutActors: Actor[]};
+	static GetActorOfClass(WorldContextObject: UObject,ActorClass: UnrealEngineClass): Actor;
 	static GetActorArrayBounds(Actors: Actor[],bOnlyCollidingComponents: boolean,Center?: Vector,BoxExtent?: Vector): {Center: Vector, BoxExtent: Vector};
 	static GetActorArrayAverageLocation(Actors: Actor[]): Vector;
 	static GetAccurateRealTime(WorldContextObject: UObject,Seconds?: number,PartialSeconds?: number): {Seconds: number, PartialSeconds: number};
@@ -14911,9 +16013,8 @@ declare class GameplayStatics extends BlueprintFunctionLibrary {
 	static DeleteGameInSlot(SlotName: string,UserIndex: number): boolean;
 	static DeactivateReverbEffect(WorldContextObject: UObject,TagName: string): void;
 	static CreateSound2D(WorldContextObject: UObject,Sound: SoundBase,VolumeMultiplier: number,PitchMultiplier: number,StartTime: number,ConcurrencySettings: SoundConcurrency,bPersistAcrossLevelTransition: boolean,bAutoDestroy: boolean): AudioComponent;
-	static CreateSaveGameObjectFromBlueprint(SaveGameBlueprint: Blueprint): SaveGame;
 	static CreateSaveGameObject(SaveGameClass: UnrealEngineClass): SaveGame;
-	static CreatePlayer(WorldContextObject: UObject,ControllerId: number,bSpawnPawn: boolean): PlayerController;
+	static CreatePlayer(WorldContextObject: UObject,ControllerId: number,bSpawnPlayerController: boolean): PlayerController;
 	static ClearSoundMixModifiers(WorldContextObject: UObject): void;
 	static ClearSoundMixClassOverride(WorldContextObject: UObject,InSoundMixModifier: SoundMix,InSoundClass: SoundClass,FadeOutTime: number): void;
 	static CancelAsyncLoading(): void;
@@ -14935,17 +16036,6 @@ declare class GameplayStatics extends BlueprintFunctionLibrary {
 	static C(Other: UObject | any): GameplayStatics;
 }
 
-declare class GameState extends GameStateBase { 
-	MatchState: string;
-	PreviousMatchState: string;
-	ElapsedTime: number;
-	static GetDefaultObject(): GameState;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameState;
-	OnRep_MatchState(): void;
-	OnRep_ElapsedTime(): void;
-	static C(Other: UObject | any): GameState;
-}
-
 declare class SpotLightComponent extends PointLightComponent { 
 	InnerConeAngle: number;
 	OuterConeAngle: number;
@@ -15173,8 +16263,6 @@ declare class InputAxisConfigEntry {
 	static C(Other: UObject | any): InputAxisConfigEntry;
 }
 
-declare type EMouseCaptureMode = 'NoCapture' | 'CapturePermanently' | 'CapturePermanently_IncludingInitialMouseDown' | 'CaptureDuringMouseDown' | 'CaptureDuringRightMouseDown' | 'EMouseCaptureMode_MAX';
-declare var EMouseCaptureMode : { NoCapture:'NoCapture',CapturePermanently:'CapturePermanently',CapturePermanently_IncludingInitialMouseDown:'CapturePermanently_IncludingInitialMouseDown',CaptureDuringMouseDown:'CaptureDuringMouseDown',CaptureDuringRightMouseDown:'CaptureDuringRightMouseDown',EMouseCaptureMode_MAX:'EMouseCaptureMode_MAX', };
 declare class InputActionKeyMapping { 
 	ActionName: string;
 	bShift: boolean;
@@ -15194,6 +16282,13 @@ declare class InputAxisKeyMapping {
 	static C(Other: UObject | any): InputAxisKeyMapping;
 }
 
+declare class InputActionSpeechMapping { 
+	ActionName: string;
+	SpeechKeyword: string;
+	clone() : InputActionSpeechMapping;
+	static C(Other: UObject | any): InputActionSpeechMapping;
+}
+
 declare class InputSettings extends UObject { 
 	AxisConfig: InputAxisConfigEntry[];
 	bAltEnterTogglesFullscreen: boolean;
@@ -15216,6 +16311,7 @@ declare class InputSettings extends UObject {
 	DoubleClickTime: number;
 	ActionMappings: InputActionKeyMapping[];
 	AxisMappings: InputAxisKeyMapping[];
+	SpeechMappings: InputActionSpeechMapping[];
 	DefaultTouchInterface: SoftObjectPath;
 	ConsoleKey: Key;
 	ConsoleKeys: Key[];
@@ -15361,7 +16457,10 @@ declare class InterpControlPoint {
 declare class InterpToMovementComponent extends MovementComponent { 
 	Duration: number;
 	bPauseOnImpact: boolean;
+	bSweep: boolean;
+	TeleportType: ETeleportType;
 	BehaviourType: EInterpToBehaviourType;
+	bCheckIfStillInWorld: boolean;
 	bForceSubStepping: boolean;
 	OnInterpToReverse: UnrealEngineMulticastDelegate<(ImpactResult: HitResult, Time: number) => void>;
 	OnInterpToStop: UnrealEngineMulticastDelegate<(ImpactResult: HitResult, Time: number) => void>;
@@ -15960,6 +17059,7 @@ declare class KismetArrayLibrary extends BlueprintFunctionLibrary {
 	static Array_LastIndex(TargetArray: number[]): number;
 	static Array_IsValidIndex(TargetArray: number[],IndexToTest: number): boolean;
 	static Array_Insert(TargetArray: number[],NewItem: number,index: number): void;
+	static Array_Identical(ArrayA: number[],ArrayB: number[]): boolean;
 	static Array_Get(TargetArray: number[],index: number,Item?: number): {Item: number};
 	static Array_Find(TargetArray: number[],ItemToFind: number): number;
 	static Array_Contains(TargetArray: number[],ItemToFind: number): boolean;
@@ -16009,6 +17109,9 @@ declare class KismetInputLibrary extends BlueprintFunctionLibrary {
 	static Key_IsKeyboardKey(Key: Key): boolean;
 	static Key_IsGamepadKey(Key: Key): boolean;
 	static Key_IsFloatAxis(Key: Key): boolean;
+	static Key_GetNavigationDirectionFromKey(InKeyEvent: KeyEvent): EUINavigation;
+	static Key_GetNavigationDirectionFromAnalog(InAnalogEvent: AnalogInputEvent): EUINavigation;
+	static Key_GetNavigationAction(InKey: Key): EUINavigationAction;
 	static Key_GetDisplayName(Key: Key): string;
 	static InputEvent_IsShiftDown(Input: InputEvent): boolean;
 	static InputEvent_IsRightShiftDown(Input: InputEvent): boolean;
@@ -16023,6 +17126,7 @@ declare class KismetInputLibrary extends BlueprintFunctionLibrary {
 	static InputEvent_IsControlDown(Input: InputEvent): boolean;
 	static InputEvent_IsCommandDown(Input: InputEvent): boolean;
 	static InputEvent_IsAltDown(Input: InputEvent): boolean;
+	static InputChord_GetDisplayName(Key: InputChord): string;
 	static GetUserIndex(Input: KeyEvent): number;
 	static GetKey(Input: KeyEvent): Key;
 	static GetAnalogValue(Input: AnalogInputEvent): number;
@@ -16032,6 +17136,8 @@ declare class KismetInputLibrary extends BlueprintFunctionLibrary {
 	static C(Other: UObject | any): KismetInputLibrary;
 }
 
+declare type ELocalizedTextSourceCategory = 'Game' | 'Engine' | 'Editor' | 'ELocalizedTextSourceCategory_MAX';
+declare var ELocalizedTextSourceCategory : { Game:'Game',Engine:'Engine',Editor:'Editor',ELocalizedTextSourceCategory_MAX:'ELocalizedTextSourceCategory_MAX', };
 declare class KismetInternationalizationLibrary extends BlueprintFunctionLibrary { 
 	static Load(ResourceName: string): KismetInternationalizationLibrary;
 	static Find(Outer: UObject, ResourceName: string): KismetInternationalizationLibrary;
@@ -16042,10 +17148,14 @@ declare class KismetInternationalizationLibrary extends BlueprintFunctionLibrary
 	static SetCurrentLanguage(Culture: string,SaveToConfig: boolean): boolean;
 	static SetCurrentCulture(Culture: string,SaveToConfig: boolean): boolean;
 	static SetCurrentAssetGroupCulture(AssetGroup: string,Culture: string,SaveToConfig: boolean): boolean;
+	static GetSuitableCulture(AvailableCultures: string[],CultureToMatch: string,FallbackCulture: string): string;
+	static GetNativeCulture(TextCategory: ELocalizedTextSourceCategory): string;
+	static GetLocalizedCultures(IncludeGame: boolean,IncludeEngine: boolean,IncludeEditor: boolean,IncludeAdditional: boolean): string[];
 	static GetCurrentLocale(): string;
 	static GetCurrentLanguage(): string;
 	static GetCurrentCulture(): string;
 	static GetCurrentAssetGroupCulture(AssetGroup: string): string;
+	static GetCultureDisplayName(Culture: string,Localized: boolean): string;
 	static ClearCurrentAssetGroupCulture(AssetGroup: string,SaveToConfig: boolean): void;
 	static C(Other: UObject | any): KismetInternationalizationLibrary;
 }
@@ -16076,6 +17186,11 @@ declare class KismetMathLibrary extends BlueprintFunctionLibrary {
 	static GetDefaultObject(): KismetMathLibrary;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetMathLibrary;
 	static Xor_IntInt(A: number,B: number): number;
+	static Xor_Int64Int64(A: any,B: any): any;
+	static WeightedMovingAverage_FVector(CurrentSample: Vector,PreviousSample: Vector,Weight: number): Vector;
+	static WeightedMovingAverage_FRotator(CurrentSample: Rotator,PreviousSample: Rotator,Weight: number): Rotator;
+	static WeightedMovingAverage_Float(CurrentSample: number,PreviousSample: number,Weight: number): number;
+	static VSizeXYSquared(A: Vector): number;
 	static VSizeXY(A: Vector): number;
 	static VSizeSquared(A: Vector): number;
 	static VSize2DSquared(A: Vector2D): number;
@@ -16085,14 +17200,86 @@ declare class KismetMathLibrary extends BlueprintFunctionLibrary {
 	static VInterpTo_Constant(Current: Vector,Target: Vector,DeltaTime: number,InterpSpeed: number): Vector;
 	static VInterpTo(Current: Vector,Target: Vector,DeltaTime: number,InterpSpeed: number): Vector;
 	static VectorSpringInterp(Current: Vector,Target: Vector,SpringState?: VectorSpringState,Stiffness?: number,CriticalDampingFactor?: number,DeltaTime?: number,Mass?: number): {SpringState: VectorSpringState, $: Vector};
+	static Vector_Zero(): Vector;
+	static Vector_Up(): Vector;
+	static Vector_UnwindEuler(A?: Vector): {A: Vector};
+	static Vector_UnitCartesianToSpherical(A: Vector): Vector2D;
+	static Vector_ToRadians(A: Vector): Vector;
+	static Vector_ToDegrees(A: Vector): Vector;
+	static Vector_SnappedToGrid(InVect: Vector,InGridSize: number): Vector;
+	static Vector_Set(A?: Vector,X?: number,Y?: number,Z?: number): {A: Vector};
+	static Vector_Right(): Vector;
+	static Vector_Reciprocal(A: Vector): Vector;
+	static Vector_ProjectOnToNormal(V: Vector,InNormal: Vector): Vector;
+	static Vector_One(): Vector;
+	static Vector_NormalUnsafe(A: Vector): Vector;
+	static Vector_Normalize(A?: Vector,Tolerance?: number): {A: Vector};
+	static Vector_Normal2D(A: Vector,Tolerance: number): Vector;
+	static Vector_MirrorByPlane(A: Vector,InPlane: Plane): Vector;
+	static Vector_Left(): Vector;
+	static Vector_IsZero(A: Vector): boolean;
+	static Vector_IsUnit(A: Vector,SquaredLenthTolerance: number): boolean;
+	static Vector_IsUniform(A: Vector,Tolerance: number): boolean;
+	static Vector_IsNormal(A: Vector): boolean;
+	static Vector_IsNearlyZero(A: Vector,Tolerance: number): boolean;
+	static Vector_IsNAN(A: Vector): boolean;
+	static Vector_HeadingAngle(A: Vector): number;
+	static Vector_GetSignVector(A: Vector): Vector;
+	static Vector_GetProjection(A: Vector): Vector;
+	static Vector_GetAbsMin(A: Vector): number;
+	static Vector_GetAbsMax(A: Vector): number;
+	static Vector_GetAbs(A: Vector): Vector;
+	static Vector_Forward(): Vector;
+	static Vector_Down(): Vector;
+	static Vector_DistanceSquared(v1: Vector,v2: Vector): number;
+	static Vector_Distance2DSquared(v1: Vector,v2: Vector): number;
+	static Vector_Distance2D(v1: Vector,v2: Vector): number;
+	static Vector_Distance(v1: Vector,v2: Vector): number;
+	static Vector_CosineAngle2D(A: Vector,B: Vector): number;
+	static Vector_ComponentMin(A: Vector,B: Vector): Vector;
+	static Vector_ComponentMax(A: Vector,B: Vector): Vector;
+	static Vector_ClampSizeMax2D(A: Vector,Max: number): Vector;
+	static Vector_ClampSizeMax(A: Vector,Max: number): Vector;
+	static Vector_ClampSize2D(A: Vector,Min: number,Max: number): Vector;
+	static Vector_BoundedToCube(InVect: Vector,InRadius: number): Vector;
+	static Vector_BoundedToBox(InVect: Vector,InBoxMin: Vector,InBoxMax: Vector): Vector;
+	static Vector_Backward(): Vector;
+	static Vector_Assign(A?: Vector,InVector?: Vector): {A: Vector};
+	static Vector_AddBounded(A?: Vector,InAddVect?: Vector,InRadius?: number): {A: Vector};
+	static Vector4_Zero(): Vector4;
+	static Vector4_SizeSquared3(A: Vector4): number;
+	static Vector4_SizeSquared(A: Vector4): number;
+	static Vector4_Size3(A: Vector4): number;
+	static Vector4_Size(A: Vector4): number;
+	static Vector4_Set(A?: Vector4,X?: number,Y?: number,Z?: number,W?: number): {A: Vector4};
+	static Vector4_NormalUnsafe3(A: Vector4): Vector4;
+	static Vector4_Normalize3(A?: Vector4,Tolerance?: number): {A: Vector4};
+	static Vector4_Normal3(A: Vector4,Tolerance: number): Vector4;
+	static Vector4_Negated(A: Vector4): Vector4;
+	static Vector4_MirrorByVector3(Direction: Vector4,SurfaceNormal: Vector4): Vector4;
+	static Vector4_IsZero(A: Vector4): boolean;
+	static Vector4_IsUnit3(A: Vector4,SquaredLenthTolerance: number): boolean;
+	static Vector4_IsNormal3(A: Vector4): boolean;
+	static Vector4_IsNearlyZero3(A: Vector4,Tolerance: number): boolean;
+	static Vector4_IsNAN(A: Vector4): boolean;
+	static Vector4_DotProduct3(A: Vector4,B: Vector4): number;
+	static Vector4_DotProduct(A: Vector4,B: Vector4): number;
+	static Vector4_CrossProduct3(A: Vector4,B: Vector4): Vector4;
+	static Vector4_Assign(A?: Vector4,InVector?: Vector4): {A: Vector4};
 	static Vector2DInterpTo_Constant(Current: Vector2D,Target: Vector2D,DeltaTime: number,InterpSpeed: number): Vector2D;
 	static Vector2DInterpTo(Current: Vector2D,Target: Vector2D,DeltaTime: number,InterpSpeed: number): Vector2D;
+	static Vector2D_Zero(): Vector2D;
+	static Vector2D_Unit45Deg(): Vector2D;
+	static Vector2D_One(): Vector2D;
 	static VEase(A: Vector,B: Vector,Alpha: number,EasingFunc: EEasingFunc,BlendExp: number,Steps: number): Vector;
 	static UtcNow(): DateTime;
 	static TransformRotation(T: Transform,Rotation: Rotator): Rotator;
 	static TransformLocation(T: Transform,Location: Vector): Vector;
 	static TransformDirection(T: Transform,Direction: Vector): Vector;
 	static Transform_Determinant(Transform: Transform): number;
+	static ToSign2D(A: Vector2D): Vector2D;
+	static ToRounded2D(A: Vector2D): Vector2D;
+	static ToDirectionAndLength2D(A: Vector2D,OutDir?: Vector2D,OutLength?: number): {OutDir: Vector2D, OutLength: number};
 	static Today(): DateTime;
 	static TLerp(A: Transform,B: Transform,Alpha: number,InterpMode: ELerpInterpolationMode): Transform;
 	static TInterpTo(Current: Transform,Target: Transform,DeltaTime: number,InterpSpeed: number): Transform;
@@ -16106,20 +17293,27 @@ declare class KismetMathLibrary extends BlueprintFunctionLibrary {
 	static Subtract_VectorVector(A: Vector,B: Vector): Vector;
 	static Subtract_VectorInt(A: Vector,B: number): Vector;
 	static Subtract_VectorFloat(A: Vector,B: number): Vector;
+	static Subtract_Vector4Vector4(A: Vector4,B: Vector4): Vector4;
 	static Subtract_Vector2DVector2D(A: Vector2D,B: Vector2D): Vector2D;
 	static Subtract_Vector2DFloat(A: Vector2D,B: number): Vector2D;
 	static Subtract_TimespanTimespan(A: Timespan,B: Timespan): Timespan;
+	static Subtract_QuatQuat(A: Quat,B: Quat): Quat;
+	static Subtract_LinearColorLinearColor(A: LinearColor,B: LinearColor): LinearColor;
 	static Subtract_IntInt(A: number,B: number): number;
+	static Subtract_Int64Int64(A: any,B: any): any;
 	static Subtract_FloatFloat(A: number,B: number): number;
 	static Subtract_DateTimeTimespan(A: DateTime,B: Timespan): DateTime;
 	static Subtract_DateTimeDateTime(A: DateTime,B: DateTime): Timespan;
 	static Subtract_ByteByte(A: number,B: number): number;
 	static Square(A: number): number;
 	static Sqrt(A: number): number;
+	static Spherical2DToUnitCartesian(A: Vector2D): Vector;
 	static Sin(A: number): number;
+	static SignOfInteger64(A: any): any;
 	static SignOfInteger(A: number): number;
 	static SignOfFloat(A: number): number;
 	static SetRandomStreamSeed(Stream?: RandomStream,NewSeed?: number): {Stream: RandomStream};
+	static Set2D(A?: Vector2D,X?: number,Y?: number): {A: Vector2D};
 	static SelectVector(A: Vector,B: Vector,bPickA: boolean): Vector;
 	static SelectTransform(A: Transform,B: Transform,bPickA: boolean): Transform;
 	static SelectString(A: string,B: string,bPickA: boolean): string;
@@ -16130,6 +17324,7 @@ declare class KismetMathLibrary extends BlueprintFunctionLibrary {
 	static SelectColor(A: LinearColor,B: LinearColor,bPickA: boolean): LinearColor;
 	static SelectClass(A: UnrealEngineClass,B: UnrealEngineClass,bSelectA: boolean): UnrealEngineClass;
 	static SeedRandomStream(Stream?: RandomStream): {Stream: RandomStream};
+	static Round64(A: number): any;
 	static Round(A: number): number;
 	static RotatorFromAxisAndAngle(Axis: Vector,Angle: number): Rotator;
 	static RotateAngleAxis(InVect: Vector,AngleDeg: number,Axis: Vector): Vector;
@@ -16138,6 +17333,7 @@ declare class KismetMathLibrary extends BlueprintFunctionLibrary {
 	static RInterpTo(Current: Rotator,Target: Rotator,DeltaTime: number,InterpSpeed: number): Rotator;
 	static RGBToHSV_Vector(RGB: LinearColor,HSV?: LinearColor): {HSV: LinearColor};
 	static RGBToHSV(InColor: LinearColor,H?: number,S?: number,V?: number,A?: number): {H: number, S: number, V: number, A: number};
+	static RGBLinearToHSV(RGB: LinearColor): LinearColor;
 	static ResetVectorSpringState(SpringState?: VectorSpringState): {SpringState: VectorSpringState};
 	static ResetRandomStream(Stream: RandomStream): void;
 	static ResetFloatSpringState(SpringState?: FloatSpringState): {SpringState: FloatSpringState};
@@ -16158,6 +17354,8 @@ declare class KismetMathLibrary extends BlueprintFunctionLibrary {
 	static RandomIntegerInRangeFromStream(Min: number,Max: number,Stream: RandomStream): number;
 	static RandomIntegerInRange(Min: number,Max: number): number;
 	static RandomIntegerFromStream(Max: number,Stream: RandomStream): number;
+	static RandomInteger64InRange(Min: any,Max: any): any;
+	static RandomInteger64(Max: any): any;
 	static RandomInteger(Max: number): number;
 	static RandomFloatInRangeFromStream(Min: number,Max: number,Stream: RandomStream): number;
 	static RandomFloatInRange(Min: number,Max: number): number;
@@ -16168,6 +17366,35 @@ declare class KismetMathLibrary extends BlueprintFunctionLibrary {
 	static RandomBoolFromStream(Stream: RandomStream): boolean;
 	static RandomBool(): boolean;
 	static RadiansToDegrees(A: number): number;
+	static Quat_VectorUp(Q: Quat): Vector;
+	static Quat_VectorRight(Q: Quat): Vector;
+	static Quat_VectorForward(Q: Quat): Vector;
+	static Quat_UnrotateVector(Q: Quat,V: Vector): Vector;
+	static Quat_SizeSquared(Q: Quat): number;
+	static Quat_Size(Q: Quat): number;
+	static Quat_SetFromEuler(Q?: Quat,Euler?: Vector): {Q: Quat};
+	static Quat_SetComponents(Q?: Quat,X?: number,Y?: number,Z?: number,W?: number): {Q: Quat};
+	static Quat_Rotator(Q: Quat): Rotator;
+	static Quat_RotateVector(Q: Quat,V: Vector): Vector;
+	static Quat_Normalized(Q: Quat,Tolerance: number): Quat;
+	static Quat_Normalize(Q?: Quat,Tolerance?: number): {Q: Quat};
+	static Quat_MakeFromEuler(Euler: Vector): Quat;
+	static Quat_Log(Q: Quat): Quat;
+	static Quat_IsNormalized(Q: Quat): boolean;
+	static Quat_IsNonFinite(Q: Quat): boolean;
+	static Quat_IsIdentity(Q: Quat,Tolerance: number): boolean;
+	static Quat_IsFinite(Q: Quat): boolean;
+	static Quat_Inversed(Q: Quat): Quat;
+	static Quat_Identity(): Quat;
+	static Quat_GetRotationAxis(Q: Quat): Vector;
+	static Quat_GetAxisZ(Q: Quat): Vector;
+	static Quat_GetAxisY(Q: Quat): Vector;
+	static Quat_GetAxisX(Q: Quat): Vector;
+	static Quat_GetAngle(Q: Quat): number;
+	static Quat_Exp(Q: Quat): Quat;
+	static Quat_Euler(Q: Quat): Vector;
+	static Quat_EnforceShortestArcWith(A?: Quat,B?: Quat): {A: Quat};
+	static Quat_AngularDistance(A: Quat,B: Quat): number;
 	static ProjectVectorOnToVector(V: Vector,Target: Vector): Vector;
 	static ProjectVectorOnToPlane(V: Vector,PlaneNormal: Vector): Vector;
 	static ProjectPointOnToPlane(Point: Vector,PlaneBase: Vector,PlaneNormal: Vector): Vector;
@@ -16177,28 +17404,40 @@ declare class KismetMathLibrary extends BlueprintFunctionLibrary {
 	static Percent_FloatFloat(A: number,B: number): number;
 	static Percent_ByteByte(A: number,B: number): number;
 	static Or_IntInt(A: number,B: number): number;
+	static Or_Int64Int64(A: any,B: any): any;
 	static Now(): DateTime;
+	static NotEqualExactly_VectorVector(A: Vector,B: Vector): boolean;
+	static NotEqualExactly_Vector4Vector4(A: Vector4,B: Vector4): boolean;
+	static NotEqualExactly_Vector2DVector2D(A: Vector2D,B: Vector2D): boolean;
 	static NotEqual_VectorVector(A: Vector,B: Vector,ErrorTolerance: number): boolean;
+	static NotEqual_Vector4Vector4(A: Vector4,B: Vector4,ErrorTolerance: number): boolean;
 	static NotEqual_Vector2DVector2D(A: Vector2D,B: Vector2D,ErrorTolerance: number): boolean;
 	static NotEqual_TimespanTimespan(A: Timespan,B: Timespan): boolean;
 	static NotEqual_RotatorRotator(A: Rotator,B: Rotator,ErrorTolerance: number): boolean;
+	static NotEqual_QuatQuat(A: Quat,B: Quat,ErrorTolerance: number): boolean;
 	static NotEqual_ObjectObject(A: UObject,B: UObject): boolean;
 	static NotEqual_NameName(A: string,B: string): boolean;
+	static NotEqual_LinearColorLinearColor(A: LinearColor,B: LinearColor): boolean;
 	static NotEqual_IntInt(A: number,B: number): boolean;
+	static NotEqual_Int64Int64(A: any,B: any): boolean;
 	static NotEqual_FloatFloat(A: number,B: number): boolean;
 	static NotEqual_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
 	static NotEqual_ClassClass(A: UnrealEngineClass,B: UnrealEngineClass): boolean;
 	static NotEqual_ByteByte(A: number,B: number): boolean;
 	static NotEqual_BoolBool(A: boolean,B: boolean): boolean;
 	static Not_PreBool(A: boolean): boolean;
+	static Not_Int64(A: any): any;
 	static Not_Int(A: number): number;
+	static NormalSafe2D(A: Vector2D,Tolerance: number): Vector2D;
 	static NormalizeToRange(Value: number,RangeMin: number,RangeMax: number): number;
 	static NormalizedDeltaRotator(A: Rotator,B: Rotator): Rotator;
 	static NormalizeAxis(Angle: number): number;
+	static Normalize2D(A?: Vector2D,Tolerance?: number): {A: Vector2D};
 	static Normal2D(A: Vector2D): Vector2D;
-	static Normal(A: Vector): Vector;
+	static Normal(A: Vector,Tolerance: number): Vector;
 	static NegateVector(A: Vector): Vector;
 	static NegateRotator(A: Rotator): Rotator;
+	static Negated2D(A: Vector2D): Vector2D;
 	static NearlyEqual_TransformTransform(A: Transform,B: Transform,LocationTolerance: number,RotationTolerance: number,Scale3DTolerance: number): boolean;
 	static NearlyEqual_FloatFloat(A: number,B: number,ErrorTolerance: number): boolean;
 	static MultiplyMultiply_FloatFloat(Base: number,Exp: number): number;
@@ -16206,30 +17445,36 @@ declare class KismetMathLibrary extends BlueprintFunctionLibrary {
 	static Multiply_VectorVector(A: Vector,B: Vector): Vector;
 	static Multiply_VectorInt(A: Vector,B: number): Vector;
 	static Multiply_VectorFloat(A: Vector,B: number): Vector;
+	static Multiply_Vector4Vector4(A: Vector4,B: Vector4): Vector4;
 	static Multiply_Vector2DVector2D(A: Vector2D,B: Vector2D): Vector2D;
 	static Multiply_Vector2DFloat(A: Vector2D,B: number): Vector2D;
 	static Multiply_TimespanFloat(A: Timespan,Scalar: number): Timespan;
 	static Multiply_RotatorInt(A: Rotator,B: number): Rotator;
 	static Multiply_RotatorFloat(A: Rotator,B: number): Rotator;
+	static Multiply_QuatQuat(A: Quat,B: Quat): Quat;
 	static Multiply_LinearColorLinearColor(A: LinearColor,B: LinearColor): LinearColor;
 	static Multiply_LinearColorFloat(A: LinearColor,B: number): LinearColor;
 	static Multiply_IntInt(A: number,B: number): number;
 	static Multiply_IntFloat(A: number,B: number): number;
+	static Multiply_Int64Int64(A: any,B: any): any;
 	static Multiply_FloatFloat(A: number,B: number): number;
 	static Multiply_ByteByte(A: number,B: number): number;
 	static MirrorVectorByNormal(InVect: Vector,InNormal: Vector): Vector;
 	static MinOfIntArray(IntArray: number[],IndexOfMinValue?: number,MinValue?: number): {IndexOfMinValue: number, MinValue: number};
 	static MinOfFloatArray(FloatArray: number[],IndexOfMinValue?: number,MinValue?: number): {IndexOfMinValue: number, MinValue: number};
 	static MinOfByteArray(ByteArray: number[],IndexOfMinValue?: number,MinValue?: number): {IndexOfMinValue: number, MinValue: number};
+	static MinInt64(A: any,B: any): any;
 	static MinimumAreaRectangle(WorldContextObject: UObject,InVerts: Vector[],SampleSurfaceNormal: Vector,OutRectCenter?: Vector,OutRectRotation?: Rotator,OutSideLengthX?: number,OutSideLengthY?: number,bDebugDraw?: boolean): {OutRectCenter: Vector, OutRectRotation: Rotator, OutSideLengthX: number, OutSideLengthY: number};
 	static Min(A: number,B: number): number;
 	static MaxOfIntArray(IntArray: number[],IndexOfMaxValue?: number,MaxValue?: number): {IndexOfMaxValue: number, MaxValue: number};
 	static MaxOfFloatArray(FloatArray: number[],IndexOfMaxValue?: number,MaxValue?: number): {IndexOfMaxValue: number, MaxValue: number};
 	static MaxOfByteArray(ByteArray: number[],IndexOfMaxValue?: number,MaxValue?: number): {IndexOfMaxValue: number, MaxValue: number};
+	static MaxInt64(A: any,B: any): any;
 	static Max(A: number,B: number): number;
 	static Matrix_GetOrigin(InMatrix: Matrix): Vector;
 	static MapRangeUnclamped(Value: number,InRangeA: number,InRangeB: number,OutRangeA: number,OutRangeB: number): number;
 	static MapRangeClamped(Value: number,InRangeA: number,InRangeB: number,OutRangeA: number,OutRangeB: number): number;
+	static MakeVector4(X: number,Y: number,Z: number,W: number): Vector4;
 	static MakeVector2D(X: number,Y: number): Vector2D;
 	static MakeVector(X: number,Y: number,Z: number): Vector;
 	static MakeTransform(Location: Vector,Rotation: Rotator,Scale: Vector): Transform;
@@ -16246,6 +17491,7 @@ declare class KismetMathLibrary extends BlueprintFunctionLibrary {
 	static MakeRotFromX(X: Vector): Rotator;
 	static MakeRotator(Roll: number,Pitch: number,Yaw: number): Rotator;
 	static MakeRotationFromAxes(Forward: Vector,Right: Vector,Up: Vector): Rotator;
+	static MakeRelativeTransform(A: Transform,RelativeTo: Transform): Transform;
 	static MakeRandomStream(InitialSeed: number): RandomStream;
 	static MakeQualifiedFrameTime(Frame: FrameNumber,FrameRate: FrameRate,SubFrame: number): QualifiedFrameTime;
 	static MakePulsatingValue(InCurrentTime: number,InPulsesPerSecond: number,InPhase: number): number;
@@ -16261,20 +17507,49 @@ declare class KismetMathLibrary extends BlueprintFunctionLibrary {
 	static LinePlaneIntersection(LineStart: Vector,LineEnd: Vector,APlane: Plane,T?: number,Intersection?: Vector): {T: number, Intersection: Vector, $: boolean};
 	static LinearColorLerpUsingHSV(A: LinearColor,B: LinearColor,Alpha: number): LinearColor;
 	static LinearColorLerp(A: LinearColor,B: LinearColor,Alpha: number): LinearColor;
+	static LinearColor_Yellow(): LinearColor;
+	static LinearColor_White(): LinearColor;
+	static LinearColor_Transparent(): LinearColor;
+	static LinearColor_ToRGBE(InLinearColor: LinearColor): Color;
+	static LinearColor_ToNewOpacity(InColor: LinearColor,InOpacity: number): LinearColor;
+	static LinearColor_SetTemperature(InOutColor?: LinearColor,InTemperature?: number): {InOutColor: LinearColor};
+	static LinearColor_SetRGBA(InOutColor?: LinearColor,R?: number,G?: number,B?: number,A?: number): {InOutColor: LinearColor};
+	static LinearColor_SetRandomHue(InOutColor?: LinearColor): {InOutColor: LinearColor};
+	static LinearColor_SetFromSRGB(InOutColor?: LinearColor,InSRGB?: Color): {InOutColor: LinearColor};
+	static LinearColor_SetFromPow22(InOutColor?: LinearColor,InColor?: Color): {InOutColor: LinearColor};
+	static LinearColor_SetFromHSV(InOutColor?: LinearColor,H?: number,S?: number,V?: number,A?: number): {InOutColor: LinearColor};
+	static LinearColor_Set(InOutColor?: LinearColor,InColor?: LinearColor): {InOutColor: LinearColor};
+	static LinearColor_Red(): LinearColor;
+	static LinearColor_QuantizeRound(InColor: LinearColor): Color;
+	static LinearColor_Quantize(InColor: LinearColor): Color;
+	static LinearColor_IsNearEqual(A: LinearColor,B: LinearColor,Tolerance: number): boolean;
+	static LinearColor_Green(): LinearColor;
+	static LinearColor_Gray(): LinearColor;
+	static LinearColor_GetMin(InColor: LinearColor): number;
+	static LinearColor_GetMax(InColor: LinearColor): number;
+	static LinearColor_GetLuminance(InColor: LinearColor): number;
+	static LinearColor_Distance(C1: LinearColor,C2: LinearColor): number;
+	static LinearColor_Desaturated(InColor: LinearColor,InDesaturation: number): LinearColor;
+	static LinearColor_Blue(): LinearColor;
+	static LinearColor_Black(): LinearColor;
 	static LessLess_VectorRotator(A: Vector,B: Rotator): Vector;
 	static LessEqual_TimespanTimespan(A: Timespan,B: Timespan): boolean;
 	static LessEqual_IntInt(A: number,B: number): boolean;
+	static LessEqual_Int64Int64(A: any,B: any): boolean;
 	static LessEqual_FloatFloat(A: number,B: number): boolean;
 	static LessEqual_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
 	static LessEqual_ByteByte(A: number,B: number): boolean;
 	static Less_TimespanTimespan(A: Timespan,B: Timespan): boolean;
 	static Less_IntInt(A: number,B: number): boolean;
+	static Less_Int64Int64(A: any,B: any): boolean;
 	static Less_FloatFloat(A: number,B: number): boolean;
 	static Less_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
 	static Less_ByteByte(A: number,B: number): boolean;
 	static Lerp(A: number,B: number,Alpha: number): number;
+	static IsZero2D(A: Vector2D): boolean;
 	static IsPointInBoxWithTransform(Point: Vector,BoxWorldTransform: Transform,BoxExtent: Vector): boolean;
 	static IsPointInBox(Point: Vector,BoxOrigin: Vector,BoxExtent: Vector): boolean;
+	static IsNearlyZero2D(A: Vector2D,Tolerance: number): boolean;
 	static IsMorning(A: DateTime): boolean;
 	static IsLeapYear(Year: number): boolean;
 	static IsAfternoon(A: DateTime): boolean;
@@ -16283,19 +17558,23 @@ declare class KismetMathLibrary extends BlueprintFunctionLibrary {
 	static InverseTransformLocation(T: Transform,Location: Vector): Vector;
 	static InverseTransformDirection(T: Transform,Direction: Vector): Vector;
 	static InRange_IntInt(Value: number,Min: number,Max: number,InclusiveMin: boolean,InclusiveMax: boolean): boolean;
+	static InRange_Int64Int64(Value: any,Min: any,Max: any,InclusiveMin: boolean,InclusiveMax: boolean): boolean;
 	static InRange_FloatFloat(Value: number,Min: number,Max: number,InclusiveMin: boolean,InclusiveMax: boolean): boolean;
 	static Hypotenuse(Width: number,Height: number): number;
+	static HSVToRGBLinear(HSV: LinearColor): LinearColor;
 	static HSVToRGB_Vector(HSV: LinearColor,RGB?: LinearColor): {RGB: LinearColor};
 	static HSVToRGB(H: number,S: number,V: number,A: number): LinearColor;
 	static GridSnap_Float(Location: number,GridSize: number): number;
 	static GreaterGreater_VectorRotator(A: Vector,B: Rotator): Vector;
 	static GreaterEqual_TimespanTimespan(A: Timespan,B: Timespan): boolean;
 	static GreaterEqual_IntInt(A: number,B: number): boolean;
+	static GreaterEqual_Int64Int64(A: any,B: any): boolean;
 	static GreaterEqual_FloatFloat(A: number,B: number): boolean;
 	static GreaterEqual_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
 	static GreaterEqual_ByteByte(A: number,B: number): boolean;
 	static Greater_TimespanTimespan(A: Timespan,B: Timespan): boolean;
 	static Greater_IntInt(A: number,B: number): boolean;
+	static Greater_Int64Int64(A: any,B: any): boolean;
 	static Greater_FloatFloat(A: number,B: number): boolean;
 	static Greater_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
 	static Greater_ByteByte(A: number,B: number): boolean;
@@ -16313,6 +17592,7 @@ declare class KismetMathLibrary extends BlueprintFunctionLibrary {
 	static GetSlopeDegreeAngles(MyRightYAxis: Vector,FloorNormal: Vector,UpVector: Vector,OutSlopePitchDegreeAngle?: number,OutSlopeRollDegreeAngle?: number): {OutSlopePitchDegreeAngle: number, OutSlopeRollDegreeAngle: number};
 	static GetSeconds(A: Timespan): number;
 	static GetSecond(A: DateTime): number;
+	static GetRotated2D(A: Vector2D,AngleDeg: number): Vector2D;
 	static GetRightVector(InRot: Rotator): Vector;
 	static GetReflectionVector(Direction: Vector,SurfaceNormal: Vector): Vector;
 	static GetPointDistanceToSegment(Point: Vector,SegmentStart: Vector,SegmentEnd: Vector): number;
@@ -16322,9 +17602,11 @@ declare class KismetMathLibrary extends BlueprintFunctionLibrary {
 	static GetMinutes(A: Timespan): number;
 	static GetMinute(A: DateTime): number;
 	static GetMinElement(A: Vector): number;
+	static GetMin2D(A: Vector2D): number;
 	static GetMilliseconds(A: Timespan): number;
 	static GetMillisecond(A: DateTime): number;
 	static GetMaxElement(A: Vector): number;
+	static GetMax2D(A: Vector2D): number;
 	static GetHours(A: Timespan): number;
 	static GetHour12(A: DateTime): number;
 	static GetHour(A: DateTime): number;
@@ -16337,7 +17619,10 @@ declare class KismetMathLibrary extends BlueprintFunctionLibrary {
 	static GetDate(A: DateTime): DateTime;
 	static GetAzimuthAndElevation(InDirection: Vector,ReferenceFrame: Transform,Azimuth?: number,Elevation?: number): {Azimuth: number, Elevation: number};
 	static GetAxes(A: Rotator,X?: Vector,Y?: Vector,Z?: Vector): {X: Vector, Y: Vector, Z: Vector};
+	static GetAbsMax2D(A: Vector2D): number;
+	static GetAbs2D(A: Vector2D): Vector2D;
 	static FTruncVector(InVector: Vector): IntVector;
+	static FTrunc64(A: number): any;
 	static FTrunc(A: number): number;
 	static FromSeconds(Seconds: number): Timespan;
 	static FromMinutes(Minutes: number): Timespan;
@@ -16357,40 +17642,57 @@ declare class KismetMathLibrary extends BlueprintFunctionLibrary {
 	static FindLookAtRotation(Start: Vector,Target: Vector): Rotator;
 	static FindClosestPointOnSegment(Point: Vector,SegmentStart: Vector,SegmentEnd: Vector): Vector;
 	static FindClosestPointOnLine(Point: Vector,LineOrigin: Vector,LineDirection: Vector): Vector;
+	static FFloor64(A: number): any;
 	static FFloor(A: number): number;
 	static FClamp(Value: number,Min: number,Max: number): number;
+	static FCeil64(A: number): any;
 	static FCeil(A: number): number;
 	static Exp(A: number): number;
+	static EqualExactly_VectorVector(A: Vector,B: Vector): boolean;
+	static EqualExactly_Vector4Vector4(A: Vector4,B: Vector4): boolean;
+	static EqualExactly_Vector2DVector2D(A: Vector2D,B: Vector2D): boolean;
 	static EqualEqual_VectorVector(A: Vector,B: Vector,ErrorTolerance: number): boolean;
+	static EqualEqual_Vector4Vector4(A: Vector4,B: Vector4,ErrorTolerance: number): boolean;
 	static EqualEqual_Vector2DVector2D(A: Vector2D,B: Vector2D,ErrorTolerance: number): boolean;
 	static EqualEqual_TransformTransform(A: Transform,B: Transform): boolean;
 	static EqualEqual_TimespanTimespan(A: Timespan,B: Timespan): boolean;
 	static EqualEqual_RotatorRotator(A: Rotator,B: Rotator,ErrorTolerance: number): boolean;
+	static EqualEqual_QuatQuat(A: Quat,B: Quat,Tolerance: number): boolean;
 	static EqualEqual_ObjectObject(A: UObject,B: UObject): boolean;
 	static EqualEqual_NameName(A: string,B: string): boolean;
+	static EqualEqual_LinearColorLinearColor(A: LinearColor,B: LinearColor): boolean;
 	static EqualEqual_IntInt(A: number,B: number): boolean;
+	static EqualEqual_Int64Int64(A: any,B: any): boolean;
 	static EqualEqual_FloatFloat(A: number,B: number): boolean;
 	static EqualEqual_DateTimeDateTime(A: DateTime,B: DateTime): boolean;
 	static EqualEqual_ClassClass(A: UnrealEngineClass,B: UnrealEngineClass): boolean;
 	static EqualEqual_ByteByte(A: number,B: number): boolean;
 	static EqualEqual_BoolBool(A: boolean,B: boolean): boolean;
 	static Ease(A: number,B: number,Alpha: number,EasingFunc: EEasingFunc,BlendExp: number,Steps: number): number;
+	static DynamicWeightedMovingAverage_FVector(CurrentSample: Vector,PreviousSample: Vector,MaxDistance: number,MinWeight: number,MaxWeight: number): Vector;
+	static DynamicWeightedMovingAverage_FRotator(CurrentSample: Rotator,PreviousSample: Rotator,MaxDistance: number,MinWeight: number,MaxWeight: number): Rotator;
+	static DynamicWeightedMovingAverage_Float(CurrentSample: number,PreviousSample: number,MaxDistance: number,MinWeight: number,MaxWeight: number): number;
 	static DotProduct2D(A: Vector2D,B: Vector2D): number;
 	static Dot_VectorVector(A: Vector,B: Vector): number;
 	static Divide_VectorVector(A: Vector,B: Vector): Vector;
 	static Divide_VectorInt(A: Vector,B: number): Vector;
 	static Divide_VectorFloat(A: Vector,B: number): Vector;
+	static Divide_Vector4Vector4(A: Vector4,B: Vector4): Vector4;
 	static Divide_Vector2DVector2D(A: Vector2D,B: Vector2D): Vector2D;
 	static Divide_Vector2DFloat(A: Vector2D,B: number): Vector2D;
 	static Divide_TimespanFloat(A: Timespan,Scalar: number): Timespan;
+	static Divide_LinearColorLinearColor(A: LinearColor,B: LinearColor): LinearColor;
 	static Divide_IntInt(A: number,B: number): number;
+	static Divide_Int64Int64(A: any,B: any): any;
 	static Divide_FloatFloat(A: number,B: number): number;
 	static Divide_ByteByte(A: number,B: number): number;
+	static DistanceSquared2D(v1: Vector2D,v2: Vector2D): number;
+	static Distance2D(v1: Vector2D,v2: Vector2D): number;
 	static DegTan(A: number): number;
 	static DegSin(A: number): number;
 	static DegreesToRadians(A: number): number;
 	static DegCos(A: number): number;
-	static DegAtan2(A: number,B: number): number;
+	static DegAtan2(Y: number,X: number): number;
 	static DegAtan(A: number): number;
 	static DegAsin(A: number): number;
 	static DegAcos(A: number): number;
@@ -16408,16 +17710,22 @@ declare class KismetMathLibrary extends BlueprintFunctionLibrary {
 	static Conv_VectorToVector2D(InVector: Vector): Vector2D;
 	static Conv_VectorToTransform(InLocation: Vector): Transform;
 	static Conv_VectorToRotator(InVec: Vector): Rotator;
+	static Conv_VectorToQuaterion(InVec: Vector): Quat;
 	static Conv_VectorToLinearColor(InVec: Vector): LinearColor;
+	static Conv_Vector4ToVector(InVector4: Vector4): Vector;
+	static Conv_Vector4ToRotator(InVec: Vector4): Rotator;
+	static Conv_Vector4ToQuaterion(InVec: Vector4): Quat;
 	static Conv_Vector2DToVector(InVector2D: Vector2D,Z: number): Vector;
+	static Conv_Vector2DToIntPoint(InVector2D: Vector2D): IntPoint;
 	static Conv_RotatorToVector(InRot: Rotator): Vector;
 	static Conv_RotatorToTransform(InRotator: Rotator): Transform;
 	static Conv_MatrixToTransform(InMatrix: Matrix): Transform;
 	static Conv_MatrixToRotator(InMatrix: Matrix): Rotator;
 	static Conv_LinearColorToVector(InLinearColor: LinearColor): Vector;
-	static Conv_LinearColorToColor(InLinearColor: LinearColor): Color;
+	static Conv_LinearColorToColor(InLinearColor: LinearColor,InUseSRGB: boolean): Color;
 	static Conv_IntVectorToVector(InIntVector: IntVector): Vector;
 	static Conv_IntToIntVector(inInt: number): IntVector;
+	static Conv_IntToInt64(inInt: number): any;
 	static Conv_IntToFloat(inInt: number): number;
 	static Conv_IntToByte(inInt: number): number;
 	static Conv_IntToBool(inInt: number): boolean;
@@ -16433,10 +17741,13 @@ declare class KismetMathLibrary extends BlueprintFunctionLibrary {
 	static ComposeRotators(A: Rotator,B: Rotator): Rotator;
 	static ClassIsChildOf(TestClass: UnrealEngineClass,ParentClass: UnrealEngineClass): boolean;
 	static ClampVectorSize(A: Vector,Min: number,Max: number): Vector;
+	static ClampInt64(Value: any,Min: any,Max: any): any;
 	static ClampAxis(Angle: number): number;
+	static ClampAxes2D(A: Vector2D,MinAxisVal: number,MaxAxisVal: number): Vector2D;
 	static ClampAngle(AngleDegrees: number,MinAngleDegrees: number,MaxAngleDegrees: number): number;
 	static Clamp(Value: number,Min: number,Max: number): number;
 	static CInterpTo(Current: LinearColor,Target: LinearColor,DeltaTime: number,InterpSpeed: number): LinearColor;
+	static BreakVector4(InVec: Vector4,X?: number,Y?: number,Z?: number,W?: number): {X: number, Y: number, Z: number, W: number};
 	static BreakVector2D(InVec: Vector2D,X?: number,Y?: number): {X: number, Y: number};
 	static BreakVector(InVec: Vector,X?: number,Y?: number,Z?: number): {X: number, Y: number, Z: number};
 	static BreakTransform(InTransform: Transform,Location?: Vector,Rotation?: Rotator,Scale?: Vector): {Location: Vector, Rotation: Rotator, Scale: Vector};
@@ -16456,21 +17767,27 @@ declare class KismetMathLibrary extends BlueprintFunctionLibrary {
 	static BooleanAND(A: boolean,B: boolean): boolean;
 	static BMin(A: number,B: number): number;
 	static BMax(A: number,B: number): number;
-	static Atan2(A: number,B: number): number;
+	static Atan2(Y: number,X: number): number;
 	static Atan(A: number): number;
 	static Asin(A: number): number;
 	static And_IntInt(A: number,B: number): number;
+	static And_Int64Int64(A: any,B: any): any;
 	static Add_VectorVector(A: Vector,B: Vector): Vector;
 	static Add_VectorInt(A: Vector,B: number): Vector;
 	static Add_VectorFloat(A: Vector,B: number): Vector;
+	static Add_Vector4Vector4(A: Vector4,B: Vector4): Vector4;
 	static Add_Vector2DVector2D(A: Vector2D,B: Vector2D): Vector2D;
 	static Add_Vector2DFloat(A: Vector2D,B: number): Vector2D;
 	static Add_TimespanTimespan(A: Timespan,B: Timespan): Timespan;
+	static Add_QuatQuat(A: Quat,B: Quat): Quat;
+	static Add_LinearColorLinearColor(A: LinearColor,B: LinearColor): LinearColor;
 	static Add_IntInt(A: number,B: number): number;
+	static Add_Int64Int64(A: any,B: any): any;
 	static Add_FloatFloat(A: number,B: number): number;
 	static Add_DateTimeTimespan(A: DateTime,B: Timespan): DateTime;
 	static Add_ByteByte(A: number,B: number): number;
 	static Acos(A: number): number;
+	static Abs_Int64(A: any): any;
 	static Abs_Int(A: number): number;
 	static Abs(A: number): number;
 	static C(Other: UObject | any): KismetMathLibrary;
@@ -16515,7 +17832,7 @@ declare class KismetRenderingLibrary extends BlueprintFunctionLibrary {
 	static ExportRenderTarget(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,FilePath: string,Filename: string): void;
 	static EndDrawCanvasToRenderTarget(WorldContextObject: UObject,Context: DrawToRenderTargetContext): void;
 	static DrawMaterialToRenderTarget(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,Material: MaterialInterface): void;
-	static CreateRenderTarget2D(WorldContextObject: UObject,Width: number,Height: number,Format: ETextureRenderTargetFormat): TextureRenderTarget2D;
+	static CreateRenderTarget2D(WorldContextObject: UObject,Width: number,Height: number,Format: ETextureRenderTargetFormat,ClearColor: LinearColor): TextureRenderTarget2D;
 	static ConvertRenderTargetToTexture2DEditorOnly(WorldContextObject: UObject,RenderTarget: TextureRenderTarget2D,Texture: Texture2D): void;
 	static ClearRenderTarget2D(WorldContextObject: UObject,TextureRenderTarget: TextureRenderTarget2D,ClearColor: LinearColor): void;
 	static BreakSkinWeightInfo(InWeight: SkelMeshSkinWeightInfo,Bone0?: number,Weight0?: number,Bone1?: number,Weight1?: number,Bone2?: number,Weight2?: number,Bone3?: number,Weight3?: number): {Bone0: number, Weight0: number, Bone1: number, Weight1: number, Bone2: number, Weight2: number, Bone3: number, Weight3: number};
@@ -16660,6 +17977,7 @@ declare class KismetSystemLibrary extends BlueprintFunctionLibrary {
 	static SetNamePropertyByName(UObject: UObject,PropertyName: string,Value: string): void;
 	static SetLinearColorPropertyByName(UObject: UObject,PropertyName: string,Value: LinearColor): void;
 	static SetIntPropertyByName(UObject: UObject,PropertyName: string,Value: number): void;
+	static SetInt64PropertyByName(UObject: UObject,PropertyName: string,Value: any): void;
 	static SetFloatPropertyByName(UObject: UObject,PropertyName: string,Value: number): void;
 	static SetCollisionProfileNameProperty(UObject: UObject,PropertyName: string,Value: CollisionProfileName): void;
 	static SetClassPropertyByName(UObject: UObject,PropertyName: string,Value: UnrealEngineClass): void;
@@ -16689,6 +18007,8 @@ declare class KismetSystemLibrary extends BlueprintFunctionLibrary {
 	static MakeLiteralByte(Value: number): number;
 	static MakeLiteralBool(Value: boolean): boolean;
 	static LoadInterstitialAd(AdIdIndex: number): void;
+	static LoadClassAsset_Blocking(AssetClass: Class): UnrealEngineClass;
+	static LoadAsset_Blocking(Asset: UObject): UObject;
 	static LineTraceSingleForObjects(WorldContextObject: UObject,Start: Vector,End: Vector,ObjectTypes: EObjectTypeQuery[],bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
 	static LineTraceSingleByProfile(WorldContextObject: UObject,Start: Vector,End: Vector,ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
 	static LineTraceSingle(WorldContextObject: UObject,Start: Vector,End: Vector,TraceChannel: ETraceTypeQuery,bTraceComplex: boolean,ActorsToIgnore: Actor[],DrawDebugType: EDrawDebugTrace,OutHit?: HitResult,bIgnoreSelf?: boolean,TraceColor?: LinearColor,TraceHitColor?: LinearColor,DrawTime?: number): {OutHit: HitResult, $: boolean};
@@ -16700,7 +18020,7 @@ declare class KismetSystemLibrary extends BlueprintFunctionLibrary {
 	static K2_UnPauseTimer(UObject: UObject,FunctionName: string): void;
 	static K2_TimerExistsHandle(WorldContextObject: UObject,Handle: TimerHandle): boolean;
 	static K2_TimerExists(UObject: UObject,FunctionName: string): boolean;
-	static K2_SetTimer(UObject: UObject,FunctionName: string,Time: number,bLooping: boolean): TimerHandle;
+	static K2_SetTimer(UObject: UObject,FunctionName: string,Time: number,bLooping: boolean,InitialStartDelay: number,InitialStartDelayVariance: number): TimerHandle;
 	static K2_PauseTimerHandle(WorldContextObject: UObject,Handle: TimerHandle): void;
 	static K2_PauseTimer(UObject: UObject,FunctionName: string): void;
 	static K2_IsValidTimerHandle(Handle: TimerHandle): boolean;
@@ -16752,6 +18072,7 @@ declare class KismetSystemLibrary extends BlueprintFunctionLibrary {
 	static GetPreferredLanguages(): string[];
 	static GetPlatformUserName(): string;
 	static GetPathName(UObject: UObject): string;
+	static GetOuterObject(UObject: UObject): UObject;
 	static GetObjectName(UObject: UObject): string;
 	static GetObjectFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): UObject;
 	static GetMinYResolutionForUI(): number;
@@ -16759,8 +18080,10 @@ declare class KismetSystemLibrary extends BlueprintFunctionLibrary {
 	static GetLocalCurrencySymbol(): string;
 	static GetLocalCurrencyCode(): string;
 	static GetGameTimeInSeconds(WorldContextObject: UObject): number;
+	static GetGamepadControllerName(ControllerId: number): string;
 	static GetGameName(): string;
 	static GetGameBundleId(): string;
+	static GetFrameCount(): any;
 	static GetEngineVersion(): string;
 	static GetDisplayName(UObject: UObject): string;
 	static GetDeviceId(): string;
@@ -16768,8 +18091,9 @@ declare class KismetSystemLibrary extends BlueprintFunctionLibrary {
 	static GetDefaultLanguage(): string;
 	static GetCurrentBundleState(PrimaryAssetId: PrimaryAssetId,bForceCurrentState: boolean,OutBundles?: string[]): {OutBundles: string[], $: boolean};
 	static GetConvenientWindowedResolutions(Resolutions?: IntPoint[]): {Resolutions: IntPoint[], $: boolean};
-	static GetConsoleVariableIntValue(WorldContextObject: UObject,VariableName: string): number;
-	static GetConsoleVariableFloatValue(WorldContextObject: UObject,VariableName: string): number;
+	static GetConsoleVariableIntValue(VariableName: string): number;
+	static GetConsoleVariableFloatValue(VariableName: string): number;
+	static GetConsoleVariableBoolValue(VariableName: string): boolean;
 	static GetComponentBounds(Component: SceneComponent,Origin?: Vector,BoxExtent?: Vector,SphereRadius?: number): {Origin: Vector, BoxExtent: Vector, SphereRadius: number};
 	static GetCommandLine(): string;
 	static GetClassFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): UnrealEngineClass;
@@ -16808,10 +18132,12 @@ declare class KismetSystemLibrary extends BlueprintFunctionLibrary {
 	static CreateCopyForUndoBuffer(ObjectToModify: UObject): void;
 	static ConvertToRelativePath(Filename: string): string;
 	static ConvertToAbsolutePath(Filename: string): string;
+	static Conv_SoftObjPathToSoftObjRef(SoftObjectPath: SoftObjectPath): UObject;
 	static Conv_SoftObjectReferenceToString(SoftObjectReference: UObject): string;
 	static Conv_SoftObjectReferenceToObject(softobject: UObject): UObject;
 	static Conv_SoftClassReferenceToString(SoftClassReference: Class): string;
 	static Conv_SoftClassReferenceToClass(softclass: Class): UnrealEngineClass;
+	static Conv_SoftClassPathToSoftClassRef(SoftClassPath: SoftClassPath): Class;
 	static Conv_PrimaryAssetTypeToString(PrimaryAssetType: PrimaryAssetType): string;
 	static Conv_PrimaryAssetIdToString(PrimaryAssetId: PrimaryAssetId): string;
 	static Conv_ObjectToSoftObjectReference(UObject: UObject): UObject;
@@ -16845,8 +18171,6 @@ declare class KismetSystemLibrary extends BlueprintFunctionLibrary {
 	static C(Other: UObject | any): KismetSystemLibrary;
 }
 
-declare type ELocalizedTextSourceCategory = 'Game' | 'Engine' | 'Editor' | 'ELocalizedTextSourceCategory_MAX';
-declare var ELocalizedTextSourceCategory : { Game:'Game',Engine:'Engine',Editor:'Editor',ELocalizedTextSourceCategory_MAX:'ELocalizedTextSourceCategory_MAX', };
 declare class PolyglotTextData { 
 	Category: ELocalizedTextSourceCategory;
 	NativeCulture: string;
@@ -16854,6 +18178,7 @@ declare class PolyglotTextData {
 	Key: string;
 	NativeString: string;
 	LocalizedStrings: any;
+	bIsMinimalPatch: boolean;
 	CachedText: string;
 	clone() : PolyglotTextData;
 	static C(Other: UObject | any): PolyglotTextData;
@@ -16914,6 +18239,7 @@ declare class KismetTextLibrary extends BlueprintFunctionLibrary {
 	static Conv_ObjectToText(InObj: UObject): string;
 	static Conv_NameToText(InName: string): string;
 	static Conv_IntToText(Value: number,bAlwaysSign: boolean,bUseGrouping: boolean,MinimumIntegralDigits: number,MaximumIntegralDigits: number): string;
+	static Conv_Int64ToText(Value: any,bAlwaysSign: boolean,bUseGrouping: boolean,MinimumIntegralDigits: number,MaximumIntegralDigits: number): string;
 	static Conv_FloatToText(Value: number,RoundingMode: ERoundingMode,bAlwaysSign: boolean,bUseGrouping: boolean,MinimumIntegralDigits: number,MaximumIntegralDigits: number,MinimumFractionalDigits: number,MaximumFractionalDigits: number): string;
 	static Conv_ColorToText(InColor: LinearColor): string;
 	static Conv_ByteToText(Value: number): string;
@@ -17025,11 +18351,12 @@ declare class LightmassPrimitiveSettingsObject extends UObject {
 
 declare class LODActor extends Actor { 
 	StaticMeshComponent: StaticMeshComponent;
+	ImpostersStaticMeshComponents: any;
 	Proxy: HLODProxy;
 	Key: string;
 	LODDrawDistance: number;
-	SubActors: Actor[];
 	LODLevel: number;
+	SubActors: Actor[];
 	CachedNumHLODLevels: number;
 	NumTrianglesInSubActors: any;
 	NumTrianglesInMergedMesh: any;
@@ -17073,8 +18400,8 @@ declare class MaterialExpressionAdd extends MaterialExpression {
 	static C(Other: UObject | any): MaterialExpressionAdd;
 }
 
-declare type EMaterialSamplerType = 'SAMPLERTYPE_Color' | 'SAMPLERTYPE_Grayscale' | 'SAMPLERTYPE_Alpha' | 'SAMPLERTYPE_Normal' | 'SAMPLERTYPE_Masks' | 'SAMPLERTYPE_DistanceFieldFont' | 'SAMPLERTYPE_LinearColor' | 'SAMPLERTYPE_LinearGrayscale' | 'SAMPLERTYPE_External' | 'SAMPLERTYPE_MAX';
-declare var EMaterialSamplerType : { SAMPLERTYPE_Color:'SAMPLERTYPE_Color',SAMPLERTYPE_Grayscale:'SAMPLERTYPE_Grayscale',SAMPLERTYPE_Alpha:'SAMPLERTYPE_Alpha',SAMPLERTYPE_Normal:'SAMPLERTYPE_Normal',SAMPLERTYPE_Masks:'SAMPLERTYPE_Masks',SAMPLERTYPE_DistanceFieldFont:'SAMPLERTYPE_DistanceFieldFont',SAMPLERTYPE_LinearColor:'SAMPLERTYPE_LinearColor',SAMPLERTYPE_LinearGrayscale:'SAMPLERTYPE_LinearGrayscale',SAMPLERTYPE_External:'SAMPLERTYPE_External',SAMPLERTYPE_MAX:'SAMPLERTYPE_MAX', };
+declare type EMaterialSamplerType = 'SAMPLERTYPE_Color' | 'SAMPLERTYPE_Grayscale' | 'SAMPLERTYPE_Alpha' | 'SAMPLERTYPE_Normal' | 'SAMPLERTYPE_Masks' | 'SAMPLERTYPE_DistanceFieldFont' | 'SAMPLERTYPE_LinearColor' | 'SAMPLERTYPE_LinearGrayscale' | 'SAMPLERTYPE_Data' | 'SAMPLERTYPE_External' | 'SAMPLERTYPE_VirtualColor' | 'SAMPLERTYPE_VirtualGrayscale' | 'SAMPLERTYPE_VirtualAlpha' | 'SAMPLERTYPE_VirtualNormal' | 'SAMPLERTYPE_VirtualMasks' | 'SAMPLERTYPE_VirtualLinearColor' | 'SAMPLERTYPE_VirtualLinearGrayscale' | 'SAMPLERTYPE_MAX';
+declare var EMaterialSamplerType : { SAMPLERTYPE_Color:'SAMPLERTYPE_Color',SAMPLERTYPE_Grayscale:'SAMPLERTYPE_Grayscale',SAMPLERTYPE_Alpha:'SAMPLERTYPE_Alpha',SAMPLERTYPE_Normal:'SAMPLERTYPE_Normal',SAMPLERTYPE_Masks:'SAMPLERTYPE_Masks',SAMPLERTYPE_DistanceFieldFont:'SAMPLERTYPE_DistanceFieldFont',SAMPLERTYPE_LinearColor:'SAMPLERTYPE_LinearColor',SAMPLERTYPE_LinearGrayscale:'SAMPLERTYPE_LinearGrayscale',SAMPLERTYPE_Data:'SAMPLERTYPE_Data',SAMPLERTYPE_External:'SAMPLERTYPE_External',SAMPLERTYPE_VirtualColor:'SAMPLERTYPE_VirtualColor',SAMPLERTYPE_VirtualGrayscale:'SAMPLERTYPE_VirtualGrayscale',SAMPLERTYPE_VirtualAlpha:'SAMPLERTYPE_VirtualAlpha',SAMPLERTYPE_VirtualNormal:'SAMPLERTYPE_VirtualNormal',SAMPLERTYPE_VirtualMasks:'SAMPLERTYPE_VirtualMasks',SAMPLERTYPE_VirtualLinearColor:'SAMPLERTYPE_VirtualLinearColor',SAMPLERTYPE_VirtualLinearGrayscale:'SAMPLERTYPE_VirtualLinearGrayscale',SAMPLERTYPE_MAX:'SAMPLERTYPE_MAX', };
 declare class MaterialExpressionTextureBase extends MaterialExpression { 
 	Texture: Texture;
 	SamplerType: EMaterialSamplerType;
@@ -17345,6 +18672,8 @@ declare class MaterialExpressionParameter extends MaterialExpression {
 
 declare class MaterialExpressionVectorParameter extends MaterialExpressionParameter { 
 	DefaultValue: LinearColor;
+	bUseCustomPrimitiveData: boolean;
+	PrimitiveDataIndex: number;
 	static Load(ResourceName: string): MaterialExpressionVectorParameter;
 	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVectorParameter;
 	static GetDefaultObject(): MaterialExpressionVectorParameter;
@@ -17483,6 +18812,8 @@ declare class MaterialExpressionCrossProduct extends MaterialExpression {
 
 declare class MaterialExpressionScalarParameter extends MaterialExpressionParameter { 
 	DefaultValue: number;
+	bUseCustomPrimitiveData: boolean;
+	PrimitiveDataIndex: number;
 	SliderMin: number;
 	SliderMax: number;
 	static Load(ResourceName: string): MaterialExpressionScalarParameter;
@@ -17569,6 +18900,14 @@ declare class MaterialExpressionDecalMipmapLevel extends MaterialExpression {
 	static C(Other: UObject | any): MaterialExpressionDecalMipmapLevel;
 }
 
+declare class MaterialExpressionDeltaTime extends MaterialExpression { 
+	static Load(ResourceName: string): MaterialExpressionDeltaTime;
+	static Find(Outer: UObject, ResourceName: string): MaterialExpressionDeltaTime;
+	static GetDefaultObject(): MaterialExpressionDeltaTime;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionDeltaTime;
+	static C(Other: UObject | any): MaterialExpressionDeltaTime;
+}
+
 declare class MaterialExpressionDepthFade extends MaterialExpression { 
 	InOpacity: ExpressionInput;
 	FadeDistance: ExpressionInput;
@@ -17904,12 +19243,13 @@ declare class MaterialExpressionMakeMaterialAttributes extends MaterialExpressio
 	WorldDisplacement: ExpressionInput;
 	TessellationMultiplier: ExpressionInput;
 	SubsurfaceColor: ExpressionInput;
-	Clearcoat: ExpressionInput;
+	ClearCoat: ExpressionInput;
 	ClearCoatRoughness: ExpressionInput;
 	AmbientOcclusion: ExpressionInput;
 	Refraction: ExpressionInput;
 	CustomizedUVs: ExpressionInput;
 	PixelDepthOffset: ExpressionInput;
+	ShadingModel: ExpressionInput;
 	static Load(ResourceName: string): MaterialExpressionMakeMaterialAttributes;
 	static Find(Outer: UObject, ResourceName: string): MaterialExpressionMakeMaterialAttributes;
 	static GetDefaultObject(): MaterialExpressionMakeMaterialAttributes;
@@ -17917,6 +19257,15 @@ declare class MaterialExpressionMakeMaterialAttributes extends MaterialExpressio
 	static C(Other: UObject | any): MaterialExpressionMakeMaterialAttributes;
 }
 
+declare class MaterialExpressionMapARPassthroughCameraUV extends MaterialExpression { 
+	Coordinates: ExpressionInput;
+	static Load(ResourceName: string): MaterialExpressionMapARPassthroughCameraUV;
+	static Find(Outer: UObject, ResourceName: string): MaterialExpressionMapARPassthroughCameraUV;
+	static GetDefaultObject(): MaterialExpressionMapARPassthroughCameraUV;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionMapARPassthroughCameraUV;
+	static C(Other: UObject | any): MaterialExpressionMapARPassthroughCameraUV;
+}
+
 declare class FunctionExpressionInput { 
 	ExpressionInput: MaterialExpressionFunctionInput;
 	ExpressionInputId: Guid;
@@ -18244,6 +19593,14 @@ declare class MaterialExpressionPrecomputedAOMask extends MaterialExpression {
 	static C(Other: UObject | any): MaterialExpressionPrecomputedAOMask;
 }
 
+declare class MaterialExpressionPreSkinnedLocalBounds extends MaterialExpression { 
+	static Load(ResourceName: string): MaterialExpressionPreSkinnedLocalBounds;
+	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPreSkinnedLocalBounds;
+	static GetDefaultObject(): MaterialExpressionPreSkinnedLocalBounds;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionPreSkinnedLocalBounds;
+	static C(Other: UObject | any): MaterialExpressionPreSkinnedLocalBounds;
+}
+
 declare class MaterialExpressionPreSkinnedNormal extends MaterialExpression { 
 	static Load(ResourceName: string): MaterialExpressionPreSkinnedNormal;
 	static Find(Outer: UObject, ResourceName: string): MaterialExpressionPreSkinnedNormal;
@@ -18280,6 +19637,16 @@ declare class MaterialExpressionQualitySwitch extends MaterialExpression {
 	static C(Other: UObject | any): MaterialExpressionQualitySwitch;
 }
 
+declare class MaterialExpressionRayTracingQualitySwitch extends MaterialExpression { 
+	Normal: ExpressionInput;
+	RayTraced: ExpressionInput;
+	static Load(ResourceName: string): MaterialExpressionRayTracingQualitySwitch;
+	static Find(Outer: UObject, ResourceName: string): MaterialExpressionRayTracingQualitySwitch;
+	static GetDefaultObject(): MaterialExpressionRayTracingQualitySwitch;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionRayTracingQualitySwitch;
+	static C(Other: UObject | any): MaterialExpressionRayTracingQualitySwitch;
+}
+
 declare class MaterialExpressionReflectionVectorWS extends MaterialExpression { 
 	CustomWorldNormal: ExpressionInput;
 	bNormalizeCustomWorldNormal: boolean;
@@ -18335,6 +19702,40 @@ declare class MaterialExpressionRound extends MaterialExpression {
 	static C(Other: UObject | any): MaterialExpressionRound;
 }
 
+declare class MaterialExpressionRuntimeVirtualTextureOutput extends MaterialExpressionCustomOutput { 
+	BaseColor: ExpressionInput;
+	Specular: ExpressionInput;
+	Roughness: ExpressionInput;
+	Normal: ExpressionInput;
+	Opacity: ExpressionInput;
+	static Load(ResourceName: string): MaterialExpressionRuntimeVirtualTextureOutput;
+	static Find(Outer: UObject, ResourceName: string): MaterialExpressionRuntimeVirtualTextureOutput;
+	static GetDefaultObject(): MaterialExpressionRuntimeVirtualTextureOutput;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionRuntimeVirtualTextureOutput;
+	static C(Other: UObject | any): MaterialExpressionRuntimeVirtualTextureOutput;
+}
+
+declare class MaterialExpressionRuntimeVirtualTextureReplace extends MaterialExpression { 
+	Default: ExpressionInput;
+	VirtualTextureOutput: ExpressionInput;
+	static Load(ResourceName: string): MaterialExpressionRuntimeVirtualTextureReplace;
+	static Find(Outer: UObject, ResourceName: string): MaterialExpressionRuntimeVirtualTextureReplace;
+	static GetDefaultObject(): MaterialExpressionRuntimeVirtualTextureReplace;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionRuntimeVirtualTextureReplace;
+	static C(Other: UObject | any): MaterialExpressionRuntimeVirtualTextureReplace;
+}
+
+declare class MaterialExpressionRuntimeVirtualTextureSample extends MaterialExpression { 
+	Coordinates: ExpressionInput;
+	VirtualTexture: RuntimeVirtualTexture;
+	MaterialType: ERuntimeVirtualTextureMaterialType;
+	static Load(ResourceName: string): MaterialExpressionRuntimeVirtualTextureSample;
+	static Find(Outer: UObject, ResourceName: string): MaterialExpressionRuntimeVirtualTextureSample;
+	static GetDefaultObject(): MaterialExpressionRuntimeVirtualTextureSample;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionRuntimeVirtualTextureSample;
+	static C(Other: UObject | any): MaterialExpressionRuntimeVirtualTextureSample;
+}
+
 declare class MaterialExpressionSaturate extends MaterialExpression { 
 	Input: ExpressionInput;
 	static Load(ResourceName: string): MaterialExpressionSaturate;
@@ -18378,8 +19779,8 @@ declare class MaterialExpressionSceneTexelSize extends MaterialExpression {
 	static C(Other: UObject | any): MaterialExpressionSceneTexelSize;
 }
 
-declare type ESceneTextureId = 'PPI_SceneColor' | 'PPI_SceneDepth' | 'PPI_DiffuseColor' | 'PPI_SpecularColor' | 'PPI_SubsurfaceColor' | 'PPI_BaseColor' | 'PPI_Specular' | 'PPI_Metallic' | 'PPI_WorldNormal' | 'PPI_SeparateTranslucency' | 'PPI_Opacity' | 'PPI_Roughness' | 'PPI_MaterialAO' | 'PPI_CustomDepth' | 'PPI_PostProcessInput0' | 'PPI_PostProcessInput1' | 'PPI_PostProcessInput2' | 'PPI_PostProcessInput3' | 'PPI_PostProcessInput4' | 'PPI_PostProcessInput5' | 'PPI_PostProcessInput6' | 'PPI_DecalMask' | 'PPI_ShadingModelColor' | 'PPI_ShadingModelID' | 'PPI_AmbientOcclusion' | 'PPI_CustomStencil' | 'PPI_StoredBaseColor' | 'PPI_StoredSpecular' | 'PPI_MAX';
-declare var ESceneTextureId : { PPI_SceneColor:'PPI_SceneColor',PPI_SceneDepth:'PPI_SceneDepth',PPI_DiffuseColor:'PPI_DiffuseColor',PPI_SpecularColor:'PPI_SpecularColor',PPI_SubsurfaceColor:'PPI_SubsurfaceColor',PPI_BaseColor:'PPI_BaseColor',PPI_Specular:'PPI_Specular',PPI_Metallic:'PPI_Metallic',PPI_WorldNormal:'PPI_WorldNormal',PPI_SeparateTranslucency:'PPI_SeparateTranslucency',PPI_Opacity:'PPI_Opacity',PPI_Roughness:'PPI_Roughness',PPI_MaterialAO:'PPI_MaterialAO',PPI_CustomDepth:'PPI_CustomDepth',PPI_PostProcessInput0:'PPI_PostProcessInput0',PPI_PostProcessInput1:'PPI_PostProcessInput1',PPI_PostProcessInput2:'PPI_PostProcessInput2',PPI_PostProcessInput3:'PPI_PostProcessInput3',PPI_PostProcessInput4:'PPI_PostProcessInput4',PPI_PostProcessInput5:'PPI_PostProcessInput5',PPI_PostProcessInput6:'PPI_PostProcessInput6',PPI_DecalMask:'PPI_DecalMask',PPI_ShadingModelColor:'PPI_ShadingModelColor',PPI_ShadingModelID:'PPI_ShadingModelID',PPI_AmbientOcclusion:'PPI_AmbientOcclusion',PPI_CustomStencil:'PPI_CustomStencil',PPI_StoredBaseColor:'PPI_StoredBaseColor',PPI_StoredSpecular:'PPI_StoredSpecular',PPI_MAX:'PPI_MAX', };
+declare type ESceneTextureId = 'PPI_SceneColor' | 'PPI_SceneDepth' | 'PPI_DiffuseColor' | 'PPI_SpecularColor' | 'PPI_SubsurfaceColor' | 'PPI_BaseColor' | 'PPI_Specular' | 'PPI_Metallic' | 'PPI_WorldNormal' | 'PPI_SeparateTranslucency' | 'PPI_Opacity' | 'PPI_Roughness' | 'PPI_MaterialAO' | 'PPI_CustomDepth' | 'PPI_PostProcessInput0' | 'PPI_PostProcessInput1' | 'PPI_PostProcessInput2' | 'PPI_PostProcessInput3' | 'PPI_PostProcessInput4' | 'PPI_PostProcessInput5' | 'PPI_PostProcessInput6' | 'PPI_DecalMask' | 'PPI_ShadingModelColor' | 'PPI_ShadingModelID' | 'PPI_AmbientOcclusion' | 'PPI_CustomStencil' | 'PPI_StoredBaseColor' | 'PPI_StoredSpecular' | 'PPI_Velocity' | 'PPI_MAX';
+declare var ESceneTextureId : { PPI_SceneColor:'PPI_SceneColor',PPI_SceneDepth:'PPI_SceneDepth',PPI_DiffuseColor:'PPI_DiffuseColor',PPI_SpecularColor:'PPI_SpecularColor',PPI_SubsurfaceColor:'PPI_SubsurfaceColor',PPI_BaseColor:'PPI_BaseColor',PPI_Specular:'PPI_Specular',PPI_Metallic:'PPI_Metallic',PPI_WorldNormal:'PPI_WorldNormal',PPI_SeparateTranslucency:'PPI_SeparateTranslucency',PPI_Opacity:'PPI_Opacity',PPI_Roughness:'PPI_Roughness',PPI_MaterialAO:'PPI_MaterialAO',PPI_CustomDepth:'PPI_CustomDepth',PPI_PostProcessInput0:'PPI_PostProcessInput0',PPI_PostProcessInput1:'PPI_PostProcessInput1',PPI_PostProcessInput2:'PPI_PostProcessInput2',PPI_PostProcessInput3:'PPI_PostProcessInput3',PPI_PostProcessInput4:'PPI_PostProcessInput4',PPI_PostProcessInput5:'PPI_PostProcessInput5',PPI_PostProcessInput6:'PPI_PostProcessInput6',PPI_DecalMask:'PPI_DecalMask',PPI_ShadingModelColor:'PPI_ShadingModelColor',PPI_ShadingModelID:'PPI_ShadingModelID',PPI_AmbientOcclusion:'PPI_AmbientOcclusion',PPI_CustomStencil:'PPI_CustomStencil',PPI_StoredBaseColor:'PPI_StoredBaseColor',PPI_StoredSpecular:'PPI_StoredSpecular',PPI_Velocity:'PPI_Velocity',PPI_MAX:'PPI_MAX', };
 declare class MaterialExpressionSceneTexture extends MaterialExpression { 
 	Coordinates: ExpressionInput;
 	SceneTextureId: ESceneTextureId;
@@ -18409,6 +19810,15 @@ declare class MaterialExpressionSetMaterialAttributes extends MaterialExpression
 	static C(Other: UObject | any): MaterialExpressionSetMaterialAttributes;
 }
 
+declare class MaterialExpressionShadingModel extends MaterialExpression { 
+	ShadingModel: EMaterialShadingModel;
+	static Load(ResourceName: string): MaterialExpressionShadingModel;
+	static Find(Outer: UObject, ResourceName: string): MaterialExpressionShadingModel;
+	static GetDefaultObject(): MaterialExpressionShadingModel;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionShadingModel;
+	static C(Other: UObject | any): MaterialExpressionShadingModel;
+}
+
 declare class MaterialExpressionShadingPathSwitch extends MaterialExpression { 
 	Default: ExpressionInput;
 	Inputs: ExpressionInput;
@@ -18419,6 +19829,16 @@ declare class MaterialExpressionShadingPathSwitch extends MaterialExpression {
 	static C(Other: UObject | any): MaterialExpressionShadingPathSwitch;
 }
 
+declare class MaterialExpressionShadowReplace extends MaterialExpression { 
+	Default: ExpressionInput;
+	Shadow: ExpressionInput;
+	static Load(ResourceName: string): MaterialExpressionShadowReplace;
+	static Find(Outer: UObject, ResourceName: string): MaterialExpressionShadowReplace;
+	static GetDefaultObject(): MaterialExpressionShadowReplace;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionShadowReplace;
+	static C(Other: UObject | any): MaterialExpressionShadowReplace;
+}
+
 declare class MaterialExpressionSign extends MaterialExpression { 
 	Input: ExpressionInput;
 	static Load(ResourceName: string): MaterialExpressionSign;
@@ -18669,1432 +20089,3 @@ declare class MaterialExpressionTextureSampleParameterVolume extends MaterialExp
 	static C(Other: UObject | any): MaterialExpressionTextureSampleParameterVolume;
 }
 
-declare class MaterialExpressionTime extends MaterialExpression { 
-	bIgnorePause: boolean;
-	bOverride_Period: boolean;
-	Period: number;
-	static Load(ResourceName: string): MaterialExpressionTime;
-	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTime;
-	static GetDefaultObject(): MaterialExpressionTime;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTime;
-	static C(Other: UObject | any): MaterialExpressionTime;
-}
-
-declare type EMaterialVectorCoordTransformSource = 'TRANSFORMSOURCE_Tangent' | 'TRANSFORMSOURCE_Local' | 'TRANSFORMSOURCE_World' | 'TRANSFORMSOURCE_View' | 'TRANSFORMSOURCE_Camera' | 'TRANSFORMSOURCE_ParticleWorld' | 'TRANSFORMSOURCE_MAX';
-declare var EMaterialVectorCoordTransformSource : { TRANSFORMSOURCE_Tangent:'TRANSFORMSOURCE_Tangent',TRANSFORMSOURCE_Local:'TRANSFORMSOURCE_Local',TRANSFORMSOURCE_World:'TRANSFORMSOURCE_World',TRANSFORMSOURCE_View:'TRANSFORMSOURCE_View',TRANSFORMSOURCE_Camera:'TRANSFORMSOURCE_Camera',TRANSFORMSOURCE_ParticleWorld:'TRANSFORMSOURCE_ParticleWorld',TRANSFORMSOURCE_MAX:'TRANSFORMSOURCE_MAX', };
-declare type EMaterialVectorCoordTransform = 'TRANSFORM_Tangent' | 'TRANSFORM_Local' | 'TRANSFORM_World' | 'TRANSFORM_View' | 'TRANSFORM_Camera' | 'TRANSFORM_ParticleWorld' | 'TRANSFORM_MAX';
-declare var EMaterialVectorCoordTransform : { TRANSFORM_Tangent:'TRANSFORM_Tangent',TRANSFORM_Local:'TRANSFORM_Local',TRANSFORM_World:'TRANSFORM_World',TRANSFORM_View:'TRANSFORM_View',TRANSFORM_Camera:'TRANSFORM_Camera',TRANSFORM_ParticleWorld:'TRANSFORM_ParticleWorld',TRANSFORM_MAX:'TRANSFORM_MAX', };
-declare class MaterialExpressionTransform extends MaterialExpression { 
-	Input: ExpressionInput;
-	TransformSourceType: EMaterialVectorCoordTransformSource;
-	TransformType: EMaterialVectorCoordTransform;
-	static Load(ResourceName: string): MaterialExpressionTransform;
-	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTransform;
-	static GetDefaultObject(): MaterialExpressionTransform;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTransform;
-	static C(Other: UObject | any): MaterialExpressionTransform;
-}
-
-declare type EMaterialPositionTransformSource = 'TRANSFORMPOSSOURCE_Local' | 'TRANSFORMPOSSOURCE_World' | 'TRANSFORMPOSSOURCE_TranslatedWorld' | 'TRANSFORMPOSSOURCE_View' | 'TRANSFORMPOSSOURCE_Camera' | 'TRANSFORMPOSSOURCE_Particle' | 'TRANSFORMPOSSOURCE_MAX';
-declare var EMaterialPositionTransformSource : { TRANSFORMPOSSOURCE_Local:'TRANSFORMPOSSOURCE_Local',TRANSFORMPOSSOURCE_World:'TRANSFORMPOSSOURCE_World',TRANSFORMPOSSOURCE_TranslatedWorld:'TRANSFORMPOSSOURCE_TranslatedWorld',TRANSFORMPOSSOURCE_View:'TRANSFORMPOSSOURCE_View',TRANSFORMPOSSOURCE_Camera:'TRANSFORMPOSSOURCE_Camera',TRANSFORMPOSSOURCE_Particle:'TRANSFORMPOSSOURCE_Particle',TRANSFORMPOSSOURCE_MAX:'TRANSFORMPOSSOURCE_MAX', };
-declare class MaterialExpressionTransformPosition extends MaterialExpression { 
-	Input: ExpressionInput;
-	TransformSourceType: EMaterialPositionTransformSource;
-	TransformType: EMaterialPositionTransformSource;
-	static Load(ResourceName: string): MaterialExpressionTransformPosition;
-	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTransformPosition;
-	static GetDefaultObject(): MaterialExpressionTransformPosition;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTransformPosition;
-	static C(Other: UObject | any): MaterialExpressionTransformPosition;
-}
-
-declare class MaterialExpressionTruncate extends MaterialExpression { 
-	Input: ExpressionInput;
-	static Load(ResourceName: string): MaterialExpressionTruncate;
-	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTruncate;
-	static GetDefaultObject(): MaterialExpressionTruncate;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTruncate;
-	static C(Other: UObject | any): MaterialExpressionTruncate;
-}
-
-declare class MaterialExpressionTwoSidedSign extends MaterialExpression { 
-	static Load(ResourceName: string): MaterialExpressionTwoSidedSign;
-	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTwoSidedSign;
-	static GetDefaultObject(): MaterialExpressionTwoSidedSign;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTwoSidedSign;
-	static C(Other: UObject | any): MaterialExpressionTwoSidedSign;
-}
-
-declare type EVectorNoiseFunction = 'VNF_CellnoiseALU' | 'VNF_VectorALU' | 'VNF_GradientALU' | 'VNF_CurlALU' | 'VNF_VoronoiALU' | 'VNF_MAX';
-declare var EVectorNoiseFunction : { VNF_CellnoiseALU:'VNF_CellnoiseALU',VNF_VectorALU:'VNF_VectorALU',VNF_GradientALU:'VNF_GradientALU',VNF_CurlALU:'VNF_CurlALU',VNF_VoronoiALU:'VNF_VoronoiALU',VNF_MAX:'VNF_MAX', };
-declare class MaterialExpressionVectorNoise extends MaterialExpression { 
-	Position: ExpressionInput;
-	NoiseFunction: EVectorNoiseFunction;
-	Quality: number;
-	bTiling: boolean;
-	TileSize: any;
-	static Load(ResourceName: string): MaterialExpressionVectorNoise;
-	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVectorNoise;
-	static GetDefaultObject(): MaterialExpressionVectorNoise;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVectorNoise;
-	static C(Other: UObject | any): MaterialExpressionVectorNoise;
-}
-
-declare class MaterialExpressionVertexColor extends MaterialExpression { 
-	static Load(ResourceName: string): MaterialExpressionVertexColor;
-	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVertexColor;
-	static GetDefaultObject(): MaterialExpressionVertexColor;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVertexColor;
-	static C(Other: UObject | any): MaterialExpressionVertexColor;
-}
-
-declare class MaterialExpressionVertexInterpolator extends MaterialExpressionCustomOutput { 
-	Input: ExpressionInput;
-	static Load(ResourceName: string): MaterialExpressionVertexInterpolator;
-	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVertexInterpolator;
-	static GetDefaultObject(): MaterialExpressionVertexInterpolator;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVertexInterpolator;
-	static C(Other: UObject | any): MaterialExpressionVertexInterpolator;
-}
-
-declare class MaterialExpressionVertexNormalWS extends MaterialExpression { 
-	static Load(ResourceName: string): MaterialExpressionVertexNormalWS;
-	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVertexNormalWS;
-	static GetDefaultObject(): MaterialExpressionVertexNormalWS;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVertexNormalWS;
-	static C(Other: UObject | any): MaterialExpressionVertexNormalWS;
-}
-
-declare type EMaterialExposedViewProperty = 'MEVP_BufferSize' | 'MEVP_FieldOfView' | 'MEVP_TanHalfFieldOfView' | 'MEVP_ViewSize' | 'MEVP_WorldSpaceViewPosition' | 'MEVP_WorldSpaceCameraPosition' | 'MEVP_ViewportOffset' | 'MEVP_MAX';
-declare var EMaterialExposedViewProperty : { MEVP_BufferSize:'MEVP_BufferSize',MEVP_FieldOfView:'MEVP_FieldOfView',MEVP_TanHalfFieldOfView:'MEVP_TanHalfFieldOfView',MEVP_ViewSize:'MEVP_ViewSize',MEVP_WorldSpaceViewPosition:'MEVP_WorldSpaceViewPosition',MEVP_WorldSpaceCameraPosition:'MEVP_WorldSpaceCameraPosition',MEVP_ViewportOffset:'MEVP_ViewportOffset',MEVP_MAX:'MEVP_MAX', };
-declare class MaterialExpressionViewProperty extends MaterialExpression { 
-	Property: EMaterialExposedViewProperty;
-	static Load(ResourceName: string): MaterialExpressionViewProperty;
-	static Find(Outer: UObject, ResourceName: string): MaterialExpressionViewProperty;
-	static GetDefaultObject(): MaterialExpressionViewProperty;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionViewProperty;
-	static C(Other: UObject | any): MaterialExpressionViewProperty;
-}
-
-declare class MaterialExpressionViewSize extends MaterialExpression { 
-	static Load(ResourceName: string): MaterialExpressionViewSize;
-	static Find(Outer: UObject, ResourceName: string): MaterialExpressionViewSize;
-	static GetDefaultObject(): MaterialExpressionViewSize;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionViewSize;
-	static C(Other: UObject | any): MaterialExpressionViewSize;
-}
-
-declare type EWorldPositionIncludedOffsets = 'WPT_Default' | 'WPT_ExcludeAllShaderOffsets' | 'WPT_CameraRelative' | 'WPT_CameraRelativeNoOffsets' | 'WPT_MAX';
-declare var EWorldPositionIncludedOffsets : { WPT_Default:'WPT_Default',WPT_ExcludeAllShaderOffsets:'WPT_ExcludeAllShaderOffsets',WPT_CameraRelative:'WPT_CameraRelative',WPT_CameraRelativeNoOffsets:'WPT_CameraRelativeNoOffsets',WPT_MAX:'WPT_MAX', };
-declare class MaterialExpressionWorldPosition extends MaterialExpression { 
-	WorldPositionShaderOffset: EWorldPositionIncludedOffsets;
-	static Load(ResourceName: string): MaterialExpressionWorldPosition;
-	static Find(Outer: UObject, ResourceName: string): MaterialExpressionWorldPosition;
-	static GetDefaultObject(): MaterialExpressionWorldPosition;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionWorldPosition;
-	static C(Other: UObject | any): MaterialExpressionWorldPosition;
-}
-
-declare class MaterialFunctionMaterialLayer extends MaterialFunction { 
-	static Load(ResourceName: string): MaterialFunctionMaterialLayer;
-	static Find(Outer: UObject, ResourceName: string): MaterialFunctionMaterialLayer;
-	static GetDefaultObject(): MaterialFunctionMaterialLayer;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionMaterialLayer;
-	static C(Other: UObject | any): MaterialFunctionMaterialLayer;
-}
-
-declare class MaterialFunctionMaterialLayerInstance extends MaterialFunctionInstance { 
-	static Load(ResourceName: string): MaterialFunctionMaterialLayerInstance;
-	static Find(Outer: UObject, ResourceName: string): MaterialFunctionMaterialLayerInstance;
-	static GetDefaultObject(): MaterialFunctionMaterialLayerInstance;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionMaterialLayerInstance;
-	static C(Other: UObject | any): MaterialFunctionMaterialLayerInstance;
-}
-
-declare class MaterialFunctionMaterialLayerBlend extends MaterialFunction { 
-	static Load(ResourceName: string): MaterialFunctionMaterialLayerBlend;
-	static Find(Outer: UObject, ResourceName: string): MaterialFunctionMaterialLayerBlend;
-	static GetDefaultObject(): MaterialFunctionMaterialLayerBlend;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionMaterialLayerBlend;
-	static C(Other: UObject | any): MaterialFunctionMaterialLayerBlend;
-}
-
-declare class MaterialFunctionMaterialLayerBlendInstance extends MaterialFunctionInstance { 
-	static Load(ResourceName: string): MaterialFunctionMaterialLayerBlendInstance;
-	static Find(Outer: UObject, ResourceName: string): MaterialFunctionMaterialLayerBlendInstance;
-	static GetDefaultObject(): MaterialFunctionMaterialLayerBlendInstance;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionMaterialLayerBlendInstance;
-	static C(Other: UObject | any): MaterialFunctionMaterialLayerBlendInstance;
-}
-
-declare class MaterialInstanceActor extends Actor { 
-	TargetActors: Actor[];
-	static GetDefaultObject(): MaterialInstanceActor;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialInstanceActor;
-	static C(Other: UObject | any): MaterialInstanceActor;
-}
-
-declare class MatineeActorCameraAnim extends MatineeActor { 
-	CameraAnim: CameraAnim;
-	static GetDefaultObject(): MatineeActorCameraAnim;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MatineeActorCameraAnim;
-	static C(Other: UObject | any): MatineeActorCameraAnim;
-}
-
-declare class MatineeAnimInterface extends Interface { 
-	static Load(ResourceName: string): MatineeAnimInterface;
-	static Find(Outer: UObject, ResourceName: string): MatineeAnimInterface;
-	static GetDefaultObject(): MatineeAnimInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MatineeAnimInterface;
-	static C(Other: UObject | any): MatineeAnimInterface;
-}
-
-declare class MatineeInterface extends Interface { 
-	static Load(ResourceName: string): MatineeInterface;
-	static Find(Outer: UObject, ResourceName: string): MatineeInterface;
-	static GetDefaultObject(): MatineeInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MatineeInterface;
-	static C(Other: UObject | any): MatineeInterface;
-}
-
-declare class MeshMergeCullingVolume extends Volume { 
-	static GetDefaultObject(): MeshMergeCullingVolume;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshMergeCullingVolume;
-	static C(Other: UObject | any): MeshMergeCullingVolume;
-}
-
-declare class MeshSimplificationSettings extends DeveloperSettings { 
-	MeshReductionModuleName: string;
-	static Load(ResourceName: string): MeshSimplificationSettings;
-	static Find(Outer: UObject, ResourceName: string): MeshSimplificationSettings;
-	static GetDefaultObject(): MeshSimplificationSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshSimplificationSettings;
-	static C(Other: UObject | any): MeshSimplificationSettings;
-}
-
-declare class MeshVertexPainterKismetLibrary extends BlueprintFunctionLibrary { 
-	static Load(ResourceName: string): MeshVertexPainterKismetLibrary;
-	static Find(Outer: UObject, ResourceName: string): MeshVertexPainterKismetLibrary;
-	static GetDefaultObject(): MeshVertexPainterKismetLibrary;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshVertexPainterKismetLibrary;
-	static RemovePaintedVertices(StaticMeshComponent: StaticMeshComponent): void;
-	static PaintVerticesSingleColor(StaticMeshComponent: StaticMeshComponent,FillColor: LinearColor,bConvertToSRGB: boolean): void;
-	static PaintVerticesLerpAlongAxis(StaticMeshComponent: StaticMeshComponent,StartColor: LinearColor,EndColor: LinearColor,Axis: EVertexPaintAxis,bConvertToSRGB: boolean): void;
-	static C(Other: UObject | any): MeshVertexPainterKismetLibrary;
-}
-
-declare class PurchaseInfo { 
-	Identifier: string;
-	DisplayName: string;
-	DisplayDescription: string;
-	DisplayPrice: string;
-	clone() : PurchaseInfo;
-	static C(Other: UObject | any): PurchaseInfo;
-}
-
-declare class MicroTransactionBase extends PlatformInterfaceBase { 
-	AvailableProducts: PurchaseInfo[];
-	LastError: string;
-	LastErrorSolution: string;
-	static Load(ResourceName: string): MicroTransactionBase;
-	static Find(Outer: UObject, ResourceName: string): MicroTransactionBase;
-	static GetDefaultObject(): MicroTransactionBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MicroTransactionBase;
-	static C(Other: UObject | any): MicroTransactionBase;
-}
-
-declare class NavAgentInterface extends Interface { 
-	static Load(ResourceName: string): NavAgentInterface;
-	static Find(Outer: UObject, ResourceName: string): NavAgentInterface;
-	static GetDefaultObject(): NavAgentInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavAgentInterface;
-	static C(Other: UObject | any): NavAgentInterface;
-}
-
-declare class NavEdgeProviderInterface extends Interface { 
-	static Load(ResourceName: string): NavEdgeProviderInterface;
-	static Find(Outer: UObject, ResourceName: string): NavEdgeProviderInterface;
-	static GetDefaultObject(): NavEdgeProviderInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavEdgeProviderInterface;
-	static C(Other: UObject | any): NavEdgeProviderInterface;
-}
-
-declare class NavigationDataInterface extends Interface { 
-	static Load(ResourceName: string): NavigationDataInterface;
-	static Find(Outer: UObject, ResourceName: string): NavigationDataInterface;
-	static GetDefaultObject(): NavigationDataInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationDataInterface;
-	static C(Other: UObject | any): NavigationDataInterface;
-}
-
-declare class NavigationSystem extends UObject { 
-	static Load(ResourceName: string): NavigationSystem;
-	static Find(Outer: UObject, ResourceName: string): NavigationSystem;
-	static GetDefaultObject(): NavigationSystem;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationSystem;
-	static SimpleMoveToLocation(Controller: Controller,Goal: Vector): void;
-	static SimpleMoveToActor(Controller: Controller,Goal: Actor): void;
-	static C(Other: UObject | any): NavigationSystem;
-}
-
-declare class NullNavSysConfig extends NavigationSystemConfig { 
-	static Load(ResourceName: string): NullNavSysConfig;
-	static Find(Outer: UObject, ResourceName: string): NullNavSysConfig;
-	static GetDefaultObject(): NullNavSysConfig;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NullNavSysConfig;
-	static C(Other: UObject | any): NullNavSysConfig;
-}
-
-declare class NavPathObserverInterface extends Interface { 
-	static Load(ResourceName: string): NavPathObserverInterface;
-	static Find(Outer: UObject, ResourceName: string): NavPathObserverInterface;
-	static GetDefaultObject(): NavPathObserverInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavPathObserverInterface;
-	static C(Other: UObject | any): NavPathObserverInterface;
-}
-
-declare class NavRelevantInterface extends Interface { 
-	static Load(ResourceName: string): NavRelevantInterface;
-	static Find(Outer: UObject, ResourceName: string): NavRelevantInterface;
-	static GetDefaultObject(): NavRelevantInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavRelevantInterface;
-	static C(Other: UObject | any): NavRelevantInterface;
-}
-
-declare class SimulatedClientNetConnection extends NetConnection { 
-	static Load(ResourceName: string): SimulatedClientNetConnection;
-	static Find(Outer: UObject, ResourceName: string): SimulatedClientNetConnection;
-	static GetDefaultObject(): SimulatedClientNetConnection;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SimulatedClientNetConnection;
-	static C(Other: UObject | any): SimulatedClientNetConnection;
-}
-
-declare class NetworkPredictionInterface extends Interface { 
-	static Load(ResourceName: string): NetworkPredictionInterface;
-	static Find(Outer: UObject, ResourceName: string): NetworkPredictionInterface;
-	static GetDefaultObject(): NetworkPredictionInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NetworkPredictionInterface;
-	static C(Other: UObject | any): NetworkPredictionInterface;
-}
-
-declare class NetworkSettings extends DeveloperSettings { 
-	bVerifyPeer: boolean;
-	bEnableMultiplayerWorldOriginRebasing: boolean;
-	MaxRepArraySize: number;
-	MaxRepArrayMemory: number;
-	static Load(ResourceName: string): NetworkSettings;
-	static Find(Outer: UObject, ResourceName: string): NetworkSettings;
-	static GetDefaultObject(): NetworkSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NetworkSettings;
-	static C(Other: UObject | any): NetworkSettings;
-}
-
-declare class NodeMappingProviderInterface extends Interface { 
-	static Load(ResourceName: string): NodeMappingProviderInterface;
-	static Find(Outer: UObject, ResourceName: string): NodeMappingProviderInterface;
-	static GetDefaultObject(): NodeMappingProviderInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NodeMappingProviderInterface;
-	static C(Other: UObject | any): NodeMappingProviderInterface;
-}
-
-declare class Note extends Actor { 
-	text: string;
-	SpriteComponent: BillboardComponent;
-	ArrowComponent: ArrowComponent;
-	static GetDefaultObject(): Note;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Note;
-	static C(Other: UObject | any): Note;
-}
-
-declare class ObjectLibrary extends UObject { 
-	ObjectBaseClass: UnrealEngineClass;
-	bHasBlueprintClasses: boolean;
-	Objects: UObject[];
-	WeakObjects: any[];
-	bUseWeakReferences: boolean;
-	bIsFullyLoaded: boolean;
-	static Load(ResourceName: string): ObjectLibrary;
-	static Find(Outer: UObject, ResourceName: string): ObjectLibrary;
-	static GetDefaultObject(): ObjectLibrary;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectLibrary;
-	static C(Other: UObject | any): ObjectLibrary;
-}
-
-declare class ObjectReferencer extends UObject { 
-	ReferencedObjects: UObject[];
-	static Load(ResourceName: string): ObjectReferencer;
-	static Find(Outer: UObject, ResourceName: string): ObjectReferencer;
-	static GetDefaultObject(): ObjectReferencer;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectReferencer;
-	static C(Other: UObject | any): ObjectReferencer;
-}
-
-declare class OnlineBlueprintCallProxyBase extends UObject { 
-	static Load(ResourceName: string): OnlineBlueprintCallProxyBase;
-	static Find(Outer: UObject, ResourceName: string): OnlineBlueprintCallProxyBase;
-	static GetDefaultObject(): OnlineBlueprintCallProxyBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineBlueprintCallProxyBase;
-	Activate(): void;
-	static C(Other: UObject | any): OnlineBlueprintCallProxyBase;
-}
-
-declare class OnlineEngineInterface extends UObject { 
-	static Load(ResourceName: string): OnlineEngineInterface;
-	static Find(Outer: UObject, ResourceName: string): OnlineEngineInterface;
-	static GetDefaultObject(): OnlineEngineInterface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineEngineInterface;
-	static C(Other: UObject | any): OnlineEngineInterface;
-}
-
-declare class PackageMapClient extends PackageMap { 
-	static Load(ResourceName: string): PackageMapClient;
-	static Find(Outer: UObject, ResourceName: string): PackageMapClient;
-	static GetDefaultObject(): PackageMapClient;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PackageMapClient;
-	static C(Other: UObject | any): PackageMapClient;
-}
-
-declare class PainCausingVolume extends PhysicsVolume { 
-	bPainCausing: boolean;
-	DamagePerSec: number;
-	DamageType: UnrealEngineClass;
-	PainInterval: number;
-	bEntryPain: boolean;
-	BACKUP_bPainCausing: boolean;
-	DamageInstigator: Controller;
-	static GetDefaultObject(): PainCausingVolume;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PainCausingVolume;
-	static C(Other: UObject | any): PainCausingVolume;
-}
-
-declare class ParticleModuleAccelerationBase extends ParticleModule { 
-	bAlwaysInWorldSpace: boolean;
-	static Load(ResourceName: string): ParticleModuleAccelerationBase;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationBase;
-	static GetDefaultObject(): ParticleModuleAccelerationBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationBase;
-	static C(Other: UObject | any): ParticleModuleAccelerationBase;
-}
-
-declare class ParticleModuleAcceleration extends ParticleModuleAccelerationBase { 
-	Acceleration: RawDistributionVector;
-	bApplyOwnerScale: boolean;
-	static Load(ResourceName: string): ParticleModuleAcceleration;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleAcceleration;
-	static GetDefaultObject(): ParticleModuleAcceleration;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAcceleration;
-	static C(Other: UObject | any): ParticleModuleAcceleration;
-}
-
-declare class ParticleModuleAccelerationConstant extends ParticleModuleAccelerationBase { 
-	Acceleration: Vector;
-	static Load(ResourceName: string): ParticleModuleAccelerationConstant;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationConstant;
-	static GetDefaultObject(): ParticleModuleAccelerationConstant;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationConstant;
-	static C(Other: UObject | any): ParticleModuleAccelerationConstant;
-}
-
-declare class ParticleModuleAccelerationDrag extends ParticleModuleAccelerationBase { 
-	DragCoefficient: DistributionFloat;
-	DragCoefficientRaw: RawDistributionFloat;
-	static Load(ResourceName: string): ParticleModuleAccelerationDrag;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationDrag;
-	static GetDefaultObject(): ParticleModuleAccelerationDrag;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationDrag;
-	static C(Other: UObject | any): ParticleModuleAccelerationDrag;
-}
-
-declare class ParticleModuleAccelerationDragScaleOverLife extends ParticleModuleAccelerationBase { 
-	DragScale: DistributionFloat;
-	DragScaleRaw: RawDistributionFloat;
-	static Load(ResourceName: string): ParticleModuleAccelerationDragScaleOverLife;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationDragScaleOverLife;
-	static GetDefaultObject(): ParticleModuleAccelerationDragScaleOverLife;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationDragScaleOverLife;
-	static C(Other: UObject | any): ParticleModuleAccelerationDragScaleOverLife;
-}
-
-declare class ParticleModuleAccelerationOverLifetime extends ParticleModuleAccelerationBase { 
-	AccelOverLife: RawDistributionVector;
-	static Load(ResourceName: string): ParticleModuleAccelerationOverLifetime;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationOverLifetime;
-	static GetDefaultObject(): ParticleModuleAccelerationOverLifetime;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationOverLifetime;
-	static C(Other: UObject | any): ParticleModuleAccelerationOverLifetime;
-}
-
-declare class ParticleModuleAttractorBase extends ParticleModule { 
-	static Load(ResourceName: string): ParticleModuleAttractorBase;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorBase;
-	static GetDefaultObject(): ParticleModuleAttractorBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorBase;
-	static C(Other: UObject | any): ParticleModuleAttractorBase;
-}
-
-declare class ParticleModuleAttractorLine extends ParticleModuleAttractorBase { 
-	EndPoint0: Vector;
-	EndPoint1: Vector;
-	Range: RawDistributionFloat;
-	Strength: RawDistributionFloat;
-	static Load(ResourceName: string): ParticleModuleAttractorLine;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorLine;
-	static GetDefaultObject(): ParticleModuleAttractorLine;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorLine;
-	static C(Other: UObject | any): ParticleModuleAttractorLine;
-}
-
-declare type EAttractorParticleSelectionMethod = 'EAPSM_Random' | 'EAPSM_Sequential' | 'EAPSM_MAX';
-declare var EAttractorParticleSelectionMethod : { EAPSM_Random:'EAPSM_Random',EAPSM_Sequential:'EAPSM_Sequential',EAPSM_MAX:'EAPSM_MAX', };
-declare class ParticleModuleAttractorParticle extends ParticleModuleAttractorBase { 
-	EmitterName: string;
-	Range: RawDistributionFloat;
-	bStrengthByDistance: boolean;
-	Strength: RawDistributionFloat;
-	bAffectBaseVelocity: boolean;
-	SelectionMethod: EAttractorParticleSelectionMethod;
-	bRenewSource: boolean;
-	bInheritSourceVel: boolean;
-	LastSelIndex: number;
-	static Load(ResourceName: string): ParticleModuleAttractorParticle;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorParticle;
-	static GetDefaultObject(): ParticleModuleAttractorParticle;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorParticle;
-	static C(Other: UObject | any): ParticleModuleAttractorParticle;
-}
-
-declare class ParticleModuleAttractorPoint extends ParticleModuleAttractorBase { 
-	Position: RawDistributionVector;
-	Range: RawDistributionFloat;
-	Strength: RawDistributionFloat;
-	StrengthByDistance: boolean;
-	bAffectBaseVelocity: boolean;
-	bOverrideVelocity: boolean;
-	bUseWorldSpacePosition: boolean;
-	Positive_X: boolean;
-	Positive_Y: boolean;
-	Positive_Z: boolean;
-	Negative_X: boolean;
-	Negative_Y: boolean;
-	Negative_Z: boolean;
-	static Load(ResourceName: string): ParticleModuleAttractorPoint;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorPoint;
-	static GetDefaultObject(): ParticleModuleAttractorPoint;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorPoint;
-	static C(Other: UObject | any): ParticleModuleAttractorPoint;
-}
-
-declare class ParticleModuleAttractorPointGravity extends ParticleModuleAttractorBase { 
-	Position: Vector;
-	Radius: number;
-	Strength: DistributionFloat;
-	StrengthRaw: RawDistributionFloat;
-	static Load(ResourceName: string): ParticleModuleAttractorPointGravity;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorPointGravity;
-	static GetDefaultObject(): ParticleModuleAttractorPointGravity;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorPointGravity;
-	static C(Other: UObject | any): ParticleModuleAttractorPointGravity;
-}
-
-declare class ParticleModuleBeamBase extends ParticleModule { 
-	static Load(ResourceName: string): ParticleModuleBeamBase;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleBeamBase;
-	static GetDefaultObject(): ParticleModuleBeamBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleBeamBase;
-	static C(Other: UObject | any): ParticleModuleBeamBase;
-}
-
-declare type BeamModifierType = 'PEB2MT_Source' | 'PEB2MT_Target' | 'PEB2MT_MAX';
-declare var BeamModifierType : { PEB2MT_Source:'PEB2MT_Source',PEB2MT_Target:'PEB2MT_Target',PEB2MT_MAX:'PEB2MT_MAX', };
-declare class BeamModifierOptions { 
-	bModify: boolean;
-	bScale: boolean;
-	bLock: boolean;
-	clone() : BeamModifierOptions;
-	static C(Other: UObject | any): BeamModifierOptions;
-}
-
-declare class ParticleModuleBeamModifier extends ParticleModuleBeamBase { 
-	ModifierType: BeamModifierType;
-	PositionOptions: BeamModifierOptions;
-	Position: RawDistributionVector;
-	TangentOptions: BeamModifierOptions;
-	Tangent: RawDistributionVector;
-	bAbsoluteTangent: boolean;
-	StrengthOptions: BeamModifierOptions;
-	Strength: RawDistributionFloat;
-	static Load(ResourceName: string): ParticleModuleBeamModifier;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleBeamModifier;
-	static GetDefaultObject(): ParticleModuleBeamModifier;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleBeamModifier;
-	static C(Other: UObject | any): ParticleModuleBeamModifier;
-}
-
-declare class ParticleModuleBeamNoise extends ParticleModuleBeamBase { 
-	bLowFreq_Enabled: boolean;
-	Frequency: number;
-	Frequency_LowRange: number;
-	NoiseRange: RawDistributionVector;
-	NoiseRangeScale: RawDistributionFloat;
-	bNRScaleEmitterTime: boolean;
-	NoiseSpeed: RawDistributionVector;
-	bSmooth: boolean;
-	NoiseLockRadius: number;
-	bNoiseLock: boolean;
-	bOscillate: boolean;
-	NoiseLockTime: number;
-	NoiseTension: number;
-	bUseNoiseTangents: boolean;
-	NoiseTangentStrength: RawDistributionFloat;
-	NoiseTessellation: number;
-	bTargetNoise: boolean;
-	FrequencyDistance: number;
-	bApplyNoiseScale: boolean;
-	NoiseScale: RawDistributionFloat;
-	static Load(ResourceName: string): ParticleModuleBeamNoise;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleBeamNoise;
-	static GetDefaultObject(): ParticleModuleBeamNoise;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleBeamNoise;
-	static C(Other: UObject | any): ParticleModuleBeamNoise;
-}
-
-declare type Beam2SourceTargetMethod = 'PEB2STM_Default' | 'PEB2STM_UserSet' | 'PEB2STM_Emitter' | 'PEB2STM_Particle' | 'PEB2STM_Actor' | 'PEB2STM_MAX';
-declare var Beam2SourceTargetMethod : { PEB2STM_Default:'PEB2STM_Default',PEB2STM_UserSet:'PEB2STM_UserSet',PEB2STM_Emitter:'PEB2STM_Emitter',PEB2STM_Particle:'PEB2STM_Particle',PEB2STM_Actor:'PEB2STM_Actor',PEB2STM_MAX:'PEB2STM_MAX', };
-declare type Beam2SourceTargetTangentMethod = 'PEB2STTM_Direct' | 'PEB2STTM_UserSet' | 'PEB2STTM_Distribution' | 'PEB2STTM_Emitter' | 'PEB2STTM_MAX';
-declare var Beam2SourceTargetTangentMethod : { PEB2STTM_Direct:'PEB2STTM_Direct',PEB2STTM_UserSet:'PEB2STTM_UserSet',PEB2STTM_Distribution:'PEB2STTM_Distribution',PEB2STTM_Emitter:'PEB2STTM_Emitter',PEB2STTM_MAX:'PEB2STTM_MAX', };
-declare class ParticleModuleBeamSource extends ParticleModuleBeamBase { 
-	SourceMethod: Beam2SourceTargetMethod;
-	SourceName: string;
-	bSourceAbsolute: boolean;
-	Source: RawDistributionVector;
-	bLockSource: boolean;
-	SourceTangentMethod: Beam2SourceTargetTangentMethod;
-	SourceTangent: RawDistributionVector;
-	bLockSourceTangent: boolean;
-	SourceStrength: RawDistributionFloat;
-	bLockSourceStength: boolean;
-	static Load(ResourceName: string): ParticleModuleBeamSource;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleBeamSource;
-	static GetDefaultObject(): ParticleModuleBeamSource;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleBeamSource;
-	static C(Other: UObject | any): ParticleModuleBeamSource;
-}
-
-declare class ParticleModuleBeamTarget extends ParticleModuleBeamBase { 
-	TargetMethod: Beam2SourceTargetMethod;
-	TargetName: string;
-	Target: RawDistributionVector;
-	bTargetAbsolute: boolean;
-	bLockTarget: boolean;
-	TargetTangentMethod: Beam2SourceTargetTangentMethod;
-	TargetTangent: RawDistributionVector;
-	bLockTargetTangent: boolean;
-	TargetStrength: RawDistributionFloat;
-	bLockTargetStength: boolean;
-	LockRadius: number;
-	static Load(ResourceName: string): ParticleModuleBeamTarget;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleBeamTarget;
-	static GetDefaultObject(): ParticleModuleBeamTarget;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleBeamTarget;
-	static C(Other: UObject | any): ParticleModuleBeamTarget;
-}
-
-declare class ParticleModuleCameraBase extends ParticleModule { 
-	static Load(ResourceName: string): ParticleModuleCameraBase;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleCameraBase;
-	static GetDefaultObject(): ParticleModuleCameraBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleCameraBase;
-	static C(Other: UObject | any): ParticleModuleCameraBase;
-}
-
-declare type EParticleCameraOffsetUpdateMethod = 'EPCOUM_DirectSet' | 'EPCOUM_Additive' | 'EPCOUM_Scalar' | 'EPCOUM_MAX';
-declare var EParticleCameraOffsetUpdateMethod : { EPCOUM_DirectSet:'EPCOUM_DirectSet',EPCOUM_Additive:'EPCOUM_Additive',EPCOUM_Scalar:'EPCOUM_Scalar',EPCOUM_MAX:'EPCOUM_MAX', };
-declare class ParticleModuleCameraOffset extends ParticleModuleCameraBase { 
-	CameraOffset: RawDistributionFloat;
-	bSpawnTimeOnly: boolean;
-	UpdateMethod: EParticleCameraOffsetUpdateMethod;
-	static Load(ResourceName: string): ParticleModuleCameraOffset;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleCameraOffset;
-	static GetDefaultObject(): ParticleModuleCameraOffset;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleCameraOffset;
-	static C(Other: UObject | any): ParticleModuleCameraOffset;
-}
-
-declare class ParticleModuleCollisionBase extends ParticleModule { 
-	static Load(ResourceName: string): ParticleModuleCollisionBase;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleCollisionBase;
-	static GetDefaultObject(): ParticleModuleCollisionBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleCollisionBase;
-	static C(Other: UObject | any): ParticleModuleCollisionBase;
-}
-
-declare type EParticleCollisionComplete = 'EPCC_Kill' | 'EPCC_Freeze' | 'EPCC_HaltCollisions' | 'EPCC_FreezeTranslation' | 'EPCC_FreezeRotation' | 'EPCC_FreezeMovement' | 'EPCC_MAX';
-declare var EParticleCollisionComplete : { EPCC_Kill:'EPCC_Kill',EPCC_Freeze:'EPCC_Freeze',EPCC_HaltCollisions:'EPCC_HaltCollisions',EPCC_FreezeTranslation:'EPCC_FreezeTranslation',EPCC_FreezeRotation:'EPCC_FreezeRotation',EPCC_FreezeMovement:'EPCC_FreezeMovement',EPCC_MAX:'EPCC_MAX', };
-declare class ParticleModuleCollision extends ParticleModuleCollisionBase { 
-	DampingFactor: RawDistributionVector;
-	DampingFactorRotation: RawDistributionVector;
-	MaxCollisions: RawDistributionFloat;
-	CollisionCompletionOption: EParticleCollisionComplete;
-	CollisionTypes: EObjectTypeQuery[];
-	bApplyPhysics: boolean;
-	bIgnoreTriggerVolumes: boolean;
-	ParticleMass: RawDistributionFloat;
-	DirScalar: number;
-	bPawnsDoNotDecrementCount: boolean;
-	bOnlyVerticalNormalsDecrementCount: boolean;
-	VerticalFudgeFactor: number;
-	DelayAmount: RawDistributionFloat;
-	bDropDetail: boolean;
-	bCollideOnlyIfVisible: boolean;
-	bIgnoreSourceActor: boolean;
-	MaxCollisionDistance: number;
-	static Load(ResourceName: string): ParticleModuleCollision;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleCollision;
-	static GetDefaultObject(): ParticleModuleCollision;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleCollision;
-	static C(Other: UObject | any): ParticleModuleCollision;
-}
-
-declare type EParticleCollisionResponse = 'Bounce' | 'Stop' | 'Kill' | 'EParticleCollisionResponse_MAX';
-declare var EParticleCollisionResponse : { Bounce:'Bounce',Stop:'Stop',Kill:'Kill',EParticleCollisionResponse_MAX:'EParticleCollisionResponse_MAX', };
-declare type EParticleCollisionMode = 'SceneDepth' | 'DistanceField' | 'EParticleCollisionMode_MAX';
-declare var EParticleCollisionMode : { SceneDepth:'SceneDepth',DistanceField:'DistanceField',EParticleCollisionMode_MAX:'EParticleCollisionMode_MAX', };
-declare class ParticleModuleCollisionGPU extends ParticleModuleCollisionBase { 
-	Resilience: RawDistributionFloat;
-	ResilienceScaleOverLife: RawDistributionFloat;
-	Friction: number;
-	RandomSpread: number;
-	RandomDistribution: number;
-	RadiusScale: number;
-	RadiusBias: number;
-	Response: EParticleCollisionResponse;
-	CollisionMode: EParticleCollisionMode;
-	static Load(ResourceName: string): ParticleModuleCollisionGPU;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleCollisionGPU;
-	static GetDefaultObject(): ParticleModuleCollisionGPU;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleCollisionGPU;
-	static C(Other: UObject | any): ParticleModuleCollisionGPU;
-}
-
-declare class ParticleModuleColorBase extends ParticleModule { 
-	static Load(ResourceName: string): ParticleModuleColorBase;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleColorBase;
-	static GetDefaultObject(): ParticleModuleColorBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleColorBase;
-	static C(Other: UObject | any): ParticleModuleColorBase;
-}
-
-declare class ParticleModuleColor extends ParticleModuleColorBase { 
-	StartColor: RawDistributionVector;
-	StartAlpha: RawDistributionFloat;
-	bClampAlpha: boolean;
-	static Load(ResourceName: string): ParticleModuleColor;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleColor;
-	static GetDefaultObject(): ParticleModuleColor;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleColor;
-	static C(Other: UObject | any): ParticleModuleColor;
-}
-
-declare class ParticleRandomSeedInfo { 
-	ParameterName: string;
-	bGetSeedFromInstance: boolean;
-	bInstanceSeedIsIndex: boolean;
-	bResetSeedOnEmitterLooping: boolean;
-	bRandomlySelectSeedArray: boolean;
-	RandomSeeds: number[];
-	clone() : ParticleRandomSeedInfo;
-	static C(Other: UObject | any): ParticleRandomSeedInfo;
-}
-
-declare class ParticleModuleColor_Seeded extends ParticleModuleColor { 
-	RandomSeedInfo: ParticleRandomSeedInfo;
-	static Load(ResourceName: string): ParticleModuleColor_Seeded;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleColor_Seeded;
-	static GetDefaultObject(): ParticleModuleColor_Seeded;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleColor_Seeded;
-	static C(Other: UObject | any): ParticleModuleColor_Seeded;
-}
-
-declare class ParticleModuleColorOverLife extends ParticleModuleColorBase { 
-	ColorOverLife: RawDistributionVector;
-	AlphaOverLife: RawDistributionFloat;
-	bClampAlpha: boolean;
-	static Load(ResourceName: string): ParticleModuleColorOverLife;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleColorOverLife;
-	static GetDefaultObject(): ParticleModuleColorOverLife;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleColorOverLife;
-	static C(Other: UObject | any): ParticleModuleColorOverLife;
-}
-
-declare class ParticleModuleColorScaleOverLife extends ParticleModuleColorBase { 
-	ColorScaleOverLife: RawDistributionVector;
-	AlphaScaleOverLife: RawDistributionFloat;
-	bEmitterTime: boolean;
-	static Load(ResourceName: string): ParticleModuleColorScaleOverLife;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleColorScaleOverLife;
-	static GetDefaultObject(): ParticleModuleColorScaleOverLife;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleColorScaleOverLife;
-	static C(Other: UObject | any): ParticleModuleColorScaleOverLife;
-}
-
-declare class ParticleModuleEventReceiverKillParticles extends ParticleModuleEventReceiverBase { 
-	bStopSpawning: boolean;
-	static Load(ResourceName: string): ParticleModuleEventReceiverKillParticles;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleEventReceiverKillParticles;
-	static GetDefaultObject(): ParticleModuleEventReceiverKillParticles;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleEventReceiverKillParticles;
-	static C(Other: UObject | any): ParticleModuleEventReceiverKillParticles;
-}
-
-declare class ParticleModuleEventReceiverSpawn extends ParticleModuleEventReceiverBase { 
-	SpawnCount: RawDistributionFloat;
-	bUseParticleTime: boolean;
-	bUsePSysLocation: boolean;
-	bInheritVelocity: boolean;
-	InheritVelocityScale: RawDistributionVector;
-	PhysicalMaterials: PhysicalMaterial[];
-	bBanPhysicalMaterials: boolean;
-	static Load(ResourceName: string): ParticleModuleEventReceiverSpawn;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleEventReceiverSpawn;
-	static GetDefaultObject(): ParticleModuleEventReceiverSpawn;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleEventReceiverSpawn;
-	static C(Other: UObject | any): ParticleModuleEventReceiverSpawn;
-}
-
-declare class ParticleModuleKillBase extends ParticleModule { 
-	static Load(ResourceName: string): ParticleModuleKillBase;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleKillBase;
-	static GetDefaultObject(): ParticleModuleKillBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleKillBase;
-	static C(Other: UObject | any): ParticleModuleKillBase;
-}
-
-declare class ParticleModuleKillBox extends ParticleModuleKillBase { 
-	LowerLeftCorner: RawDistributionVector;
-	UpperRightCorner: RawDistributionVector;
-	bAbsolute: boolean;
-	bKillInside: boolean;
-	bAxisAlignedAndFixedSize: boolean;
-	static Load(ResourceName: string): ParticleModuleKillBox;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleKillBox;
-	static GetDefaultObject(): ParticleModuleKillBox;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleKillBox;
-	static C(Other: UObject | any): ParticleModuleKillBox;
-}
-
-declare class ParticleModuleKillHeight extends ParticleModuleKillBase { 
-	Height: RawDistributionFloat;
-	bAbsolute: boolean;
-	bFloor: boolean;
-	bApplyPSysScale: boolean;
-	static Load(ResourceName: string): ParticleModuleKillHeight;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleKillHeight;
-	static GetDefaultObject(): ParticleModuleKillHeight;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleKillHeight;
-	static C(Other: UObject | any): ParticleModuleKillHeight;
-}
-
-declare class ParticleModuleLifetimeBase extends ParticleModule { 
-	static Load(ResourceName: string): ParticleModuleLifetimeBase;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleLifetimeBase;
-	static GetDefaultObject(): ParticleModuleLifetimeBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLifetimeBase;
-	static C(Other: UObject | any): ParticleModuleLifetimeBase;
-}
-
-declare class ParticleModuleLifetime extends ParticleModuleLifetimeBase { 
-	LifeTime: RawDistributionFloat;
-	static Load(ResourceName: string): ParticleModuleLifetime;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleLifetime;
-	static GetDefaultObject(): ParticleModuleLifetime;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLifetime;
-	static C(Other: UObject | any): ParticleModuleLifetime;
-}
-
-declare class ParticleModuleLifetime_Seeded extends ParticleModuleLifetime { 
-	RandomSeedInfo: ParticleRandomSeedInfo;
-	static Load(ResourceName: string): ParticleModuleLifetime_Seeded;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleLifetime_Seeded;
-	static GetDefaultObject(): ParticleModuleLifetime_Seeded;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLifetime_Seeded;
-	static C(Other: UObject | any): ParticleModuleLifetime_Seeded;
-}
-
-declare class ParticleModuleLightBase extends ParticleModule { 
-	static Load(ResourceName: string): ParticleModuleLightBase;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleLightBase;
-	static GetDefaultObject(): ParticleModuleLightBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLightBase;
-	static C(Other: UObject | any): ParticleModuleLightBase;
-}
-
-declare class ParticleModuleLight extends ParticleModuleLightBase { 
-	bUseInverseSquaredFalloff: boolean;
-	bAffectsTranslucency: boolean;
-	bPreviewLightRadius: boolean;
-	SpawnFraction: number;
-	ColorScaleOverLife: RawDistributionVector;
-	BrightnessOverLife: RawDistributionFloat;
-	RadiusScale: RawDistributionFloat;
-	LightExponent: RawDistributionFloat;
-	LightingChannels: LightingChannels;
-	VolumetricScatteringIntensity: number;
-	bHighQualityLights: boolean;
-	bShadowCastingLights: boolean;
-	static Load(ResourceName: string): ParticleModuleLight;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleLight;
-	static GetDefaultObject(): ParticleModuleLight;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLight;
-	static C(Other: UObject | any): ParticleModuleLight;
-}
-
-declare class ParticleModuleLight_Seeded extends ParticleModuleLight { 
-	RandomSeedInfo: ParticleRandomSeedInfo;
-	static Load(ResourceName: string): ParticleModuleLight_Seeded;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleLight_Seeded;
-	static GetDefaultObject(): ParticleModuleLight_Seeded;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLight_Seeded;
-	static C(Other: UObject | any): ParticleModuleLight_Seeded;
-}
-
-declare class ParticleModuleLocationBase extends ParticleModule { 
-	static Load(ResourceName: string): ParticleModuleLocationBase;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationBase;
-	static GetDefaultObject(): ParticleModuleLocationBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationBase;
-	static C(Other: UObject | any): ParticleModuleLocationBase;
-}
-
-declare class ParticleModuleLocation extends ParticleModuleLocationBase { 
-	StartLocation: RawDistributionVector;
-	DistributeOverNPoints: number;
-	DistributeThreshold: number;
-	static Load(ResourceName: string): ParticleModuleLocation;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocation;
-	static GetDefaultObject(): ParticleModuleLocation;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocation;
-	static C(Other: UObject | any): ParticleModuleLocation;
-}
-
-declare class ParticleModuleLocation_Seeded extends ParticleModuleLocation { 
-	RandomSeedInfo: ParticleRandomSeedInfo;
-	static Load(ResourceName: string): ParticleModuleLocation_Seeded;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocation_Seeded;
-	static GetDefaultObject(): ParticleModuleLocation_Seeded;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocation_Seeded;
-	static C(Other: UObject | any): ParticleModuleLocation_Seeded;
-}
-
-declare type ELocationBoneSocketSource = 'BONESOCKETSOURCE_Bones' | 'BONESOCKETSOURCE_Sockets' | 'BONESOCKETSOURCE_MAX';
-declare var ELocationBoneSocketSource : { BONESOCKETSOURCE_Bones:'BONESOCKETSOURCE_Bones',BONESOCKETSOURCE_Sockets:'BONESOCKETSOURCE_Sockets',BONESOCKETSOURCE_MAX:'BONESOCKETSOURCE_MAX', };
-declare class LocationBoneSocketInfo { 
-	BoneSocketName: string;
-	Offset: Vector;
-	clone() : LocationBoneSocketInfo;
-	static C(Other: UObject | any): LocationBoneSocketInfo;
-}
-
-declare type ELocationBoneSocketSelectionMethod = 'BONESOCKETSEL_Sequential' | 'BONESOCKETSEL_Random' | 'BONESOCKETSEL_MAX';
-declare var ELocationBoneSocketSelectionMethod : { BONESOCKETSEL_Sequential:'BONESOCKETSEL_Sequential',BONESOCKETSEL_Random:'BONESOCKETSEL_Random',BONESOCKETSEL_MAX:'BONESOCKETSEL_MAX', };
-declare class ParticleModuleLocationBoneSocket extends ParticleModuleLocationBase { 
-	SourceType: ELocationBoneSocketSource;
-	UniversalOffset: Vector;
-	SourceLocations: LocationBoneSocketInfo[];
-	SelectionMethod: ELocationBoneSocketSelectionMethod;
-	bUpdatePositionEachFrame: boolean;
-	bOrientMeshEmitters: boolean;
-	bInheritBoneVelocity: boolean;
-	InheritVelocityScale: number;
-	SkelMeshActorParamName: string;
-	NumPreSelectedIndices: number;
-	EditorSkelMesh: SkeletalMesh;
-	static Load(ResourceName: string): ParticleModuleLocationBoneSocket;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationBoneSocket;
-	static GetDefaultObject(): ParticleModuleLocationBoneSocket;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationBoneSocket;
-	static C(Other: UObject | any): ParticleModuleLocationBoneSocket;
-}
-
-declare class ParticleModuleLocationDirect extends ParticleModuleLocationBase { 
-	Location: RawDistributionVector;
-	LocationOffset: RawDistributionVector;
-	ScaleFactor: RawDistributionVector;
-	Direction: RawDistributionVector;
-	static Load(ResourceName: string): ParticleModuleLocationDirect;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationDirect;
-	static GetDefaultObject(): ParticleModuleLocationDirect;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationDirect;
-	static C(Other: UObject | any): ParticleModuleLocationDirect;
-}
-
-declare type ELocationEmitterSelectionMethod = 'ELESM_Random' | 'ELESM_Sequential' | 'ELESM_MAX';
-declare var ELocationEmitterSelectionMethod : { ELESM_Random:'ELESM_Random',ELESM_Sequential:'ELESM_Sequential',ELESM_MAX:'ELESM_MAX', };
-declare class ParticleModuleLocationEmitter extends ParticleModuleLocationBase { 
-	EmitterName: string;
-	SelectionMethod: ELocationEmitterSelectionMethod;
-	InheritSourceVelocity: boolean;
-	InheritSourceVelocityScale: number;
-	bInheritSourceRotation: boolean;
-	InheritSourceRotationScale: number;
-	static Load(ResourceName: string): ParticleModuleLocationEmitter;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationEmitter;
-	static GetDefaultObject(): ParticleModuleLocationEmitter;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationEmitter;
-	static C(Other: UObject | any): ParticleModuleLocationEmitter;
-}
-
-declare class ParticleModuleLocationEmitterDirect extends ParticleModuleLocationBase { 
-	EmitterName: string;
-	static Load(ResourceName: string): ParticleModuleLocationEmitterDirect;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationEmitterDirect;
-	static GetDefaultObject(): ParticleModuleLocationEmitterDirect;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationEmitterDirect;
-	static C(Other: UObject | any): ParticleModuleLocationEmitterDirect;
-}
-
-declare class ParticleModuleLocationPrimitiveBase extends ParticleModuleLocationBase { 
-	Positive_X: boolean;
-	Positive_Y: boolean;
-	Positive_Z: boolean;
-	Negative_X: boolean;
-	Negative_Y: boolean;
-	Negative_Z: boolean;
-	SurfaceOnly: boolean;
-	Velocity: boolean;
-	VelocityScale: RawDistributionFloat;
-	StartLocation: RawDistributionVector;
-	static Load(ResourceName: string): ParticleModuleLocationPrimitiveBase;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveBase;
-	static GetDefaultObject(): ParticleModuleLocationPrimitiveBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveBase;
-	static C(Other: UObject | any): ParticleModuleLocationPrimitiveBase;
-}
-
-declare type CylinderHeightAxis = 'PMLPC_HEIGHTAXIS_X' | 'PMLPC_HEIGHTAXIS_Y' | 'PMLPC_HEIGHTAXIS_Z' | 'PMLPC_HEIGHTAXIS_MAX';
-declare var CylinderHeightAxis : { PMLPC_HEIGHTAXIS_X:'PMLPC_HEIGHTAXIS_X',PMLPC_HEIGHTAXIS_Y:'PMLPC_HEIGHTAXIS_Y',PMLPC_HEIGHTAXIS_Z:'PMLPC_HEIGHTAXIS_Z',PMLPC_HEIGHTAXIS_MAX:'PMLPC_HEIGHTAXIS_MAX', };
-declare class ParticleModuleLocationPrimitiveCylinder extends ParticleModuleLocationPrimitiveBase { 
-	RadialVelocity: boolean;
-	StartRadius: RawDistributionFloat;
-	StartHeight: RawDistributionFloat;
-	HeightAxis: CylinderHeightAxis;
-	static Load(ResourceName: string): ParticleModuleLocationPrimitiveCylinder;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveCylinder;
-	static GetDefaultObject(): ParticleModuleLocationPrimitiveCylinder;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveCylinder;
-	static C(Other: UObject | any): ParticleModuleLocationPrimitiveCylinder;
-}
-
-declare class ParticleModuleLocationPrimitiveCylinder_Seeded extends ParticleModuleLocationPrimitiveCylinder { 
-	RandomSeedInfo: ParticleRandomSeedInfo;
-	static Load(ResourceName: string): ParticleModuleLocationPrimitiveCylinder_Seeded;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveCylinder_Seeded;
-	static GetDefaultObject(): ParticleModuleLocationPrimitiveCylinder_Seeded;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveCylinder_Seeded;
-	static C(Other: UObject | any): ParticleModuleLocationPrimitiveCylinder_Seeded;
-}
-
-declare class ParticleModuleLocationPrimitiveSphere extends ParticleModuleLocationPrimitiveBase { 
-	StartRadius: RawDistributionFloat;
-	static Load(ResourceName: string): ParticleModuleLocationPrimitiveSphere;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveSphere;
-	static GetDefaultObject(): ParticleModuleLocationPrimitiveSphere;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveSphere;
-	static C(Other: UObject | any): ParticleModuleLocationPrimitiveSphere;
-}
-
-declare class ParticleModuleLocationPrimitiveSphere_Seeded extends ParticleModuleLocationPrimitiveSphere { 
-	RandomSeedInfo: ParticleRandomSeedInfo;
-	static Load(ResourceName: string): ParticleModuleLocationPrimitiveSphere_Seeded;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveSphere_Seeded;
-	static GetDefaultObject(): ParticleModuleLocationPrimitiveSphere_Seeded;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveSphere_Seeded;
-	static C(Other: UObject | any): ParticleModuleLocationPrimitiveSphere_Seeded;
-}
-
-declare class ParticleModuleLocationPrimitiveTriangle extends ParticleModuleLocationBase { 
-	StartOffset: RawDistributionVector;
-	Height: RawDistributionFloat;
-	Angle: RawDistributionFloat;
-	Thickness: RawDistributionFloat;
-	static Load(ResourceName: string): ParticleModuleLocationPrimitiveTriangle;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveTriangle;
-	static GetDefaultObject(): ParticleModuleLocationPrimitiveTriangle;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveTriangle;
-	static C(Other: UObject | any): ParticleModuleLocationPrimitiveTriangle;
-}
-
-declare type ELocationSkelVertSurfaceSource = 'VERTSURFACESOURCE_Vert' | 'VERTSURFACESOURCE_Surface' | 'VERTSURFACESOURCE_MAX';
-declare var ELocationSkelVertSurfaceSource : { VERTSURFACESOURCE_Vert:'VERTSURFACESOURCE_Vert',VERTSURFACESOURCE_Surface:'VERTSURFACESOURCE_Surface',VERTSURFACESOURCE_MAX:'VERTSURFACESOURCE_MAX', };
-declare class ParticleModuleLocationSkelVertSurface extends ParticleModuleLocationBase { 
-	SourceType: ELocationSkelVertSurfaceSource;
-	UniversalOffset: Vector;
-	bUpdatePositionEachFrame: boolean;
-	bOrientMeshEmitters: boolean;
-	bInheritBoneVelocity: boolean;
-	InheritVelocityScale: number;
-	SkelMeshActorParamName: string;
-	EditorSkelMesh: SkeletalMesh;
-	ValidAssociatedBones: string[];
-	bEnforceNormalCheck: boolean;
-	NormalToCompare: Vector;
-	NormalCheckToleranceDegrees: number;
-	NormalCheckTolerance: number;
-	ValidMaterialIndices: number[];
-	bInheritVertexColor: boolean;
-	bInheritUV: boolean;
-	InheritUVChannel: any;
-	static Load(ResourceName: string): ParticleModuleLocationSkelVertSurface;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationSkelVertSurface;
-	static GetDefaultObject(): ParticleModuleLocationSkelVertSurface;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationSkelVertSurface;
-	static C(Other: UObject | any): ParticleModuleLocationSkelVertSurface;
-}
-
-declare class ParticleModuleLocationWorldOffset extends ParticleModuleLocation { 
-	static Load(ResourceName: string): ParticleModuleLocationWorldOffset;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationWorldOffset;
-	static GetDefaultObject(): ParticleModuleLocationWorldOffset;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationWorldOffset;
-	static C(Other: UObject | any): ParticleModuleLocationWorldOffset;
-}
-
-declare class ParticleModuleLocationWorldOffset_Seeded extends ParticleModuleLocationWorldOffset { 
-	RandomSeedInfo: ParticleRandomSeedInfo;
-	static Load(ResourceName: string): ParticleModuleLocationWorldOffset_Seeded;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationWorldOffset_Seeded;
-	static GetDefaultObject(): ParticleModuleLocationWorldOffset_Seeded;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationWorldOffset_Seeded;
-	static C(Other: UObject | any): ParticleModuleLocationWorldOffset_Seeded;
-}
-
-declare class ParticleModuleMaterialBase extends ParticleModule { 
-	static Load(ResourceName: string): ParticleModuleMaterialBase;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleMaterialBase;
-	static GetDefaultObject(): ParticleModuleMaterialBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMaterialBase;
-	static C(Other: UObject | any): ParticleModuleMaterialBase;
-}
-
-declare class ParticleModuleMeshMaterial extends ParticleModuleMaterialBase { 
-	MeshMaterials: MaterialInterface[];
-	static Load(ResourceName: string): ParticleModuleMeshMaterial;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshMaterial;
-	static GetDefaultObject(): ParticleModuleMeshMaterial;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshMaterial;
-	static C(Other: UObject | any): ParticleModuleMeshMaterial;
-}
-
-declare class ParticleModuleRotationBase extends ParticleModule { 
-	static Load(ResourceName: string): ParticleModuleRotationBase;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationBase;
-	static GetDefaultObject(): ParticleModuleRotationBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationBase;
-	static C(Other: UObject | any): ParticleModuleRotationBase;
-}
-
-declare class ParticleModuleMeshRotation extends ParticleModuleRotationBase { 
-	StartRotation: RawDistributionVector;
-	bInheritParent: boolean;
-	static Load(ResourceName: string): ParticleModuleMeshRotation;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotation;
-	static GetDefaultObject(): ParticleModuleMeshRotation;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotation;
-	static C(Other: UObject | any): ParticleModuleMeshRotation;
-}
-
-declare class ParticleModuleMeshRotation_Seeded extends ParticleModuleMeshRotation { 
-	RandomSeedInfo: ParticleRandomSeedInfo;
-	static Load(ResourceName: string): ParticleModuleMeshRotation_Seeded;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotation_Seeded;
-	static GetDefaultObject(): ParticleModuleMeshRotation_Seeded;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotation_Seeded;
-	static C(Other: UObject | any): ParticleModuleMeshRotation_Seeded;
-}
-
-declare class ParticleModuleRotationRateBase extends ParticleModule { 
-	static Load(ResourceName: string): ParticleModuleRotationRateBase;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationRateBase;
-	static GetDefaultObject(): ParticleModuleRotationRateBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationRateBase;
-	static C(Other: UObject | any): ParticleModuleRotationRateBase;
-}
-
-declare class ParticleModuleMeshRotationRate extends ParticleModuleRotationRateBase { 
-	StartRotationRate: RawDistributionVector;
-	static Load(ResourceName: string): ParticleModuleMeshRotationRate;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotationRate;
-	static GetDefaultObject(): ParticleModuleMeshRotationRate;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotationRate;
-	static C(Other: UObject | any): ParticleModuleMeshRotationRate;
-}
-
-declare class ParticleModuleMeshRotationRate_Seeded extends ParticleModuleMeshRotationRate { 
-	RandomSeedInfo: ParticleRandomSeedInfo;
-	static Load(ResourceName: string): ParticleModuleMeshRotationRate_Seeded;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotationRate_Seeded;
-	static GetDefaultObject(): ParticleModuleMeshRotationRate_Seeded;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotationRate_Seeded;
-	static C(Other: UObject | any): ParticleModuleMeshRotationRate_Seeded;
-}
-
-declare class ParticleModuleMeshRotationRateMultiplyLife extends ParticleModuleRotationRateBase { 
-	LifeMultiplier: RawDistributionVector;
-	static Load(ResourceName: string): ParticleModuleMeshRotationRateMultiplyLife;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotationRateMultiplyLife;
-	static GetDefaultObject(): ParticleModuleMeshRotationRateMultiplyLife;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotationRateMultiplyLife;
-	static C(Other: UObject | any): ParticleModuleMeshRotationRateMultiplyLife;
-}
-
-declare class ParticleModuleMeshRotationRateOverLife extends ParticleModuleRotationRateBase { 
-	RotRate: RawDistributionVector;
-	bScaleRotRate: boolean;
-	static Load(ResourceName: string): ParticleModuleMeshRotationRateOverLife;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotationRateOverLife;
-	static GetDefaultObject(): ParticleModuleMeshRotationRateOverLife;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotationRateOverLife;
-	static C(Other: UObject | any): ParticleModuleMeshRotationRateOverLife;
-}
-
-declare class ParticleModuleOrientationBase extends ParticleModule { 
-	static Load(ResourceName: string): ParticleModuleOrientationBase;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleOrientationBase;
-	static GetDefaultObject(): ParticleModuleOrientationBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleOrientationBase;
-	static C(Other: UObject | any): ParticleModuleOrientationBase;
-}
-
-declare type EParticleAxisLock = 'EPAL_NONE' | 'EPAL_X' | 'EPAL_Y' | 'EPAL_Z' | 'EPAL_NEGATIVE_X' | 'EPAL_NEGATIVE_Y' | 'EPAL_NEGATIVE_Z' | 'EPAL_ROTATE_X' | 'EPAL_ROTATE_Y' | 'EPAL_ROTATE_Z' | 'EPAL_MAX';
-declare var EParticleAxisLock : { EPAL_NONE:'EPAL_NONE',EPAL_X:'EPAL_X',EPAL_Y:'EPAL_Y',EPAL_Z:'EPAL_Z',EPAL_NEGATIVE_X:'EPAL_NEGATIVE_X',EPAL_NEGATIVE_Y:'EPAL_NEGATIVE_Y',EPAL_NEGATIVE_Z:'EPAL_NEGATIVE_Z',EPAL_ROTATE_X:'EPAL_ROTATE_X',EPAL_ROTATE_Y:'EPAL_ROTATE_Y',EPAL_ROTATE_Z:'EPAL_ROTATE_Z',EPAL_MAX:'EPAL_MAX', };
-declare class ParticleModuleOrientationAxisLock extends ParticleModuleOrientationBase { 
-	LockAxisFlags: EParticleAxisLock;
-	static Load(ResourceName: string): ParticleModuleOrientationAxisLock;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleOrientationAxisLock;
-	static GetDefaultObject(): ParticleModuleOrientationAxisLock;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleOrientationAxisLock;
-	static C(Other: UObject | any): ParticleModuleOrientationAxisLock;
-}
-
-declare class ParticleModuleParameterBase extends ParticleModule { 
-	static Load(ResourceName: string): ParticleModuleParameterBase;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleParameterBase;
-	static GetDefaultObject(): ParticleModuleParameterBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleParameterBase;
-	static C(Other: UObject | any): ParticleModuleParameterBase;
-}
-
-declare type EEmitterDynamicParameterValue = 'EDPV_UserSet' | 'EDPV_AutoSet' | 'EDPV_VelocityX' | 'EDPV_VelocityY' | 'EDPV_VelocityZ' | 'EDPV_VelocityMag' | 'EDPV_MAX';
-declare var EEmitterDynamicParameterValue : { EDPV_UserSet:'EDPV_UserSet',EDPV_AutoSet:'EDPV_AutoSet',EDPV_VelocityX:'EDPV_VelocityX',EDPV_VelocityY:'EDPV_VelocityY',EDPV_VelocityZ:'EDPV_VelocityZ',EDPV_VelocityMag:'EDPV_VelocityMag',EDPV_MAX:'EDPV_MAX', };
-declare class EmitterDynamicParameter { 
-	ParamName: string;
-	bUseEmitterTime: boolean;
-	bSpawnTimeOnly: boolean;
-	ValueMethod: EEmitterDynamicParameterValue;
-	bScaleVelocityByParamValue: boolean;
-	ParamValue: RawDistributionFloat;
-	clone() : EmitterDynamicParameter;
-	static C(Other: UObject | any): EmitterDynamicParameter;
-}
-
-declare class ParticleModuleParameterDynamic extends ParticleModuleParameterBase { 
-	DynamicParams: EmitterDynamicParameter[];
-	UpdateFlags: number;
-	bUsesVelocity: boolean;
-	static Load(ResourceName: string): ParticleModuleParameterDynamic;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleParameterDynamic;
-	static GetDefaultObject(): ParticleModuleParameterDynamic;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleParameterDynamic;
-	static C(Other: UObject | any): ParticleModuleParameterDynamic;
-}
-
-declare class ParticleModuleParameterDynamic_Seeded extends ParticleModuleParameterDynamic { 
-	RandomSeedInfo: ParticleRandomSeedInfo;
-	static Load(ResourceName: string): ParticleModuleParameterDynamic_Seeded;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleParameterDynamic_Seeded;
-	static GetDefaultObject(): ParticleModuleParameterDynamic_Seeded;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleParameterDynamic_Seeded;
-	static C(Other: UObject | any): ParticleModuleParameterDynamic_Seeded;
-}
-
-declare class ParticleModulePivotOffset extends ParticleModuleLocationBase { 
-	PivotOffset: Vector2D;
-	static Load(ResourceName: string): ParticleModulePivotOffset;
-	static Find(Outer: UObject, ResourceName: string): ParticleModulePivotOffset;
-	static GetDefaultObject(): ParticleModulePivotOffset;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModulePivotOffset;
-	static C(Other: UObject | any): ParticleModulePivotOffset;
-}
-
-declare class ParticleModuleRotation extends ParticleModuleRotationBase { 
-	StartRotation: RawDistributionFloat;
-	static Load(ResourceName: string): ParticleModuleRotation;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotation;
-	static GetDefaultObject(): ParticleModuleRotation;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotation;
-	static C(Other: UObject | any): ParticleModuleRotation;
-}
-
-declare class ParticleModuleRotation_Seeded extends ParticleModuleRotation { 
-	RandomSeedInfo: ParticleRandomSeedInfo;
-	static Load(ResourceName: string): ParticleModuleRotation_Seeded;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotation_Seeded;
-	static GetDefaultObject(): ParticleModuleRotation_Seeded;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotation_Seeded;
-	static C(Other: UObject | any): ParticleModuleRotation_Seeded;
-}
-
-declare class ParticleModuleRotationOverLifetime extends ParticleModuleRotationBase { 
-	RotationOverLife: RawDistributionFloat;
-	Scale: boolean;
-	static Load(ResourceName: string): ParticleModuleRotationOverLifetime;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationOverLifetime;
-	static GetDefaultObject(): ParticleModuleRotationOverLifetime;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationOverLifetime;
-	static C(Other: UObject | any): ParticleModuleRotationOverLifetime;
-}
-
-declare class ParticleModuleRotationRate extends ParticleModuleRotationRateBase { 
-	StartRotationRate: RawDistributionFloat;
-	static Load(ResourceName: string): ParticleModuleRotationRate;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationRate;
-	static GetDefaultObject(): ParticleModuleRotationRate;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationRate;
-	static C(Other: UObject | any): ParticleModuleRotationRate;
-}
-
-declare class ParticleModuleRotationRate_Seeded extends ParticleModuleRotationRate { 
-	RandomSeedInfo: ParticleRandomSeedInfo;
-	static Load(ResourceName: string): ParticleModuleRotationRate_Seeded;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationRate_Seeded;
-	static GetDefaultObject(): ParticleModuleRotationRate_Seeded;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationRate_Seeded;
-	static C(Other: UObject | any): ParticleModuleRotationRate_Seeded;
-}
-
-declare class ParticleModuleRotationRateMultiplyLife extends ParticleModuleRotationRateBase { 
-	LifeMultiplier: RawDistributionFloat;
-	static Load(ResourceName: string): ParticleModuleRotationRateMultiplyLife;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationRateMultiplyLife;
-	static GetDefaultObject(): ParticleModuleRotationRateMultiplyLife;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationRateMultiplyLife;
-	static C(Other: UObject | any): ParticleModuleRotationRateMultiplyLife;
-}
-
-declare class ParticleModuleSizeBase extends ParticleModule { 
-	static Load(ResourceName: string): ParticleModuleSizeBase;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleSizeBase;
-	static GetDefaultObject(): ParticleModuleSizeBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSizeBase;
-	static C(Other: UObject | any): ParticleModuleSizeBase;
-}
-
-declare class ParticleModuleSize extends ParticleModuleSizeBase { 
-	StartSize: RawDistributionVector;
-	static Load(ResourceName: string): ParticleModuleSize;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleSize;
-	static GetDefaultObject(): ParticleModuleSize;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSize;
-	static C(Other: UObject | any): ParticleModuleSize;
-}
-
-declare class ParticleModuleSize_Seeded extends ParticleModuleSize { 
-	RandomSeedInfo: ParticleRandomSeedInfo;
-	static Load(ResourceName: string): ParticleModuleSize_Seeded;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleSize_Seeded;
-	static GetDefaultObject(): ParticleModuleSize_Seeded;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSize_Seeded;
-	static C(Other: UObject | any): ParticleModuleSize_Seeded;
-}
-
-declare class ParticleModuleSizeMultiplyLife extends ParticleModuleSizeBase { 
-	LifeMultiplier: RawDistributionVector;
-	MultiplyX: boolean;
-	MultiplyY: boolean;
-	MultiplyZ: boolean;
-	static Load(ResourceName: string): ParticleModuleSizeMultiplyLife;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleSizeMultiplyLife;
-	static GetDefaultObject(): ParticleModuleSizeMultiplyLife;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSizeMultiplyLife;
-	static C(Other: UObject | any): ParticleModuleSizeMultiplyLife;
-}
-
-declare class ParticleModuleSizeScale extends ParticleModuleSizeBase { 
-	SizeScale: RawDistributionVector;
-	EnableX: boolean;
-	EnableY: boolean;
-	EnableZ: boolean;
-	static Load(ResourceName: string): ParticleModuleSizeScale;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleSizeScale;
-	static GetDefaultObject(): ParticleModuleSizeScale;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSizeScale;
-	static C(Other: UObject | any): ParticleModuleSizeScale;
-}
-
-declare class ParticleModuleSizeScaleBySpeed extends ParticleModuleSizeBase { 
-	SpeedScale: Vector2D;
-	MaxScale: Vector2D;
-	static Load(ResourceName: string): ParticleModuleSizeScaleBySpeed;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleSizeScaleBySpeed;
-	static GetDefaultObject(): ParticleModuleSizeScaleBySpeed;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSizeScaleBySpeed;
-	static C(Other: UObject | any): ParticleModuleSizeScaleBySpeed;
-}
-
-declare class ParticleModuleSourceMovement extends ParticleModuleLocationBase { 
-	SourceMovementScale: RawDistributionVector;
-	static Load(ResourceName: string): ParticleModuleSourceMovement;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleSourceMovement;
-	static GetDefaultObject(): ParticleModuleSourceMovement;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSourceMovement;
-	static C(Other: UObject | any): ParticleModuleSourceMovement;
-}
-
-declare class ParticleModuleSpawnPerUnit extends ParticleModuleSpawnBase { 
-	UnitScalar: number;
-	SpawnPerUnit: RawDistributionFloat;
-	bIgnoreSpawnRateWhenMoving: boolean;
-	MovementTolerance: number;
-	MaxFrameDistance: number;
-	bIgnoreMovementAlongX: boolean;
-	bIgnoreMovementAlongY: boolean;
-	bIgnoreMovementAlongZ: boolean;
-	static Load(ResourceName: string): ParticleModuleSpawnPerUnit;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleSpawnPerUnit;
-	static GetDefaultObject(): ParticleModuleSpawnPerUnit;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSpawnPerUnit;
-	static C(Other: UObject | any): ParticleModuleSpawnPerUnit;
-}
-
-declare class ParticleModuleSubUVBase extends ParticleModule { 
-	static Load(ResourceName: string): ParticleModuleSubUVBase;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleSubUVBase;
-	static GetDefaultObject(): ParticleModuleSubUVBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSubUVBase;
-	static C(Other: UObject | any): ParticleModuleSubUVBase;
-}
-
-declare class SubUVAnimation extends UObject { 
-	SubUVTexture: Texture2D;
-	SubImages_Horizontal: number;
-	SubImages_Vertical: number;
-	BoundingMode: ESubUVBoundingVertexCount;
-	OpacitySourceMode: EOpacitySourceMode;
-	AlphaThreshold: number;
-	static Load(ResourceName: string): SubUVAnimation;
-	static Find(Outer: UObject, ResourceName: string): SubUVAnimation;
-	static GetDefaultObject(): SubUVAnimation;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubUVAnimation;
-	static C(Other: UObject | any): SubUVAnimation;
-}
-
-declare class ParticleModuleSubUV extends ParticleModuleSubUVBase { 
-	Animation: SubUVAnimation;
-	SubImageIndex: RawDistributionFloat;
-	bUseRealTime: boolean;
-	static Load(ResourceName: string): ParticleModuleSubUV;
-	static Find(Outer: UObject, ResourceName: string): ParticleModuleSubUV;
-	static GetDefaultObject(): ParticleModuleSubUV;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSubUV;
-	static C(Other: UObject | any): ParticleModuleSubUV;
-}
-
diff --git a/Examples/Content/Scripts/typings/ue.d.ts b/Examples/Content/Scripts/typings/ue.d.ts
index 7e63f9b..be5c846 100644
--- a/Examples/Content/Scripts/typings/ue.d.ts
+++ b/Examples/Content/Scripts/typings/ue.d.ts
@@ -1,5 +1,1444 @@
 /// <reference path="_part_0_ue.d.ts">/>
 /// <reference path="_part_1_ue.d.ts">/>
+declare class MaterialExpressionTime extends MaterialExpression { 
+	bIgnorePause: boolean;
+	bOverride_Period: boolean;
+	Period: number;
+	static Load(ResourceName: string): MaterialExpressionTime;
+	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTime;
+	static GetDefaultObject(): MaterialExpressionTime;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTime;
+	static C(Other: UObject | any): MaterialExpressionTime;
+}
+
+declare type EMaterialVectorCoordTransformSource = 'TRANSFORMSOURCE_Tangent' | 'TRANSFORMSOURCE_Local' | 'TRANSFORMSOURCE_World' | 'TRANSFORMSOURCE_View' | 'TRANSFORMSOURCE_Camera' | 'TRANSFORMSOURCE_ParticleWorld' | 'TRANSFORMSOURCE_MAX';
+declare var EMaterialVectorCoordTransformSource : { TRANSFORMSOURCE_Tangent:'TRANSFORMSOURCE_Tangent',TRANSFORMSOURCE_Local:'TRANSFORMSOURCE_Local',TRANSFORMSOURCE_World:'TRANSFORMSOURCE_World',TRANSFORMSOURCE_View:'TRANSFORMSOURCE_View',TRANSFORMSOURCE_Camera:'TRANSFORMSOURCE_Camera',TRANSFORMSOURCE_ParticleWorld:'TRANSFORMSOURCE_ParticleWorld',TRANSFORMSOURCE_MAX:'TRANSFORMSOURCE_MAX', };
+declare type EMaterialVectorCoordTransform = 'TRANSFORM_Tangent' | 'TRANSFORM_Local' | 'TRANSFORM_World' | 'TRANSFORM_View' | 'TRANSFORM_Camera' | 'TRANSFORM_ParticleWorld' | 'TRANSFORM_MAX';
+declare var EMaterialVectorCoordTransform : { TRANSFORM_Tangent:'TRANSFORM_Tangent',TRANSFORM_Local:'TRANSFORM_Local',TRANSFORM_World:'TRANSFORM_World',TRANSFORM_View:'TRANSFORM_View',TRANSFORM_Camera:'TRANSFORM_Camera',TRANSFORM_ParticleWorld:'TRANSFORM_ParticleWorld',TRANSFORM_MAX:'TRANSFORM_MAX', };
+declare class MaterialExpressionTransform extends MaterialExpression { 
+	Input: ExpressionInput;
+	TransformSourceType: EMaterialVectorCoordTransformSource;
+	TransformType: EMaterialVectorCoordTransform;
+	static Load(ResourceName: string): MaterialExpressionTransform;
+	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTransform;
+	static GetDefaultObject(): MaterialExpressionTransform;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTransform;
+	static C(Other: UObject | any): MaterialExpressionTransform;
+}
+
+declare type EMaterialPositionTransformSource = 'TRANSFORMPOSSOURCE_Local' | 'TRANSFORMPOSSOURCE_World' | 'TRANSFORMPOSSOURCE_TranslatedWorld' | 'TRANSFORMPOSSOURCE_View' | 'TRANSFORMPOSSOURCE_Camera' | 'TRANSFORMPOSSOURCE_Particle' | 'TRANSFORMPOSSOURCE_MAX';
+declare var EMaterialPositionTransformSource : { TRANSFORMPOSSOURCE_Local:'TRANSFORMPOSSOURCE_Local',TRANSFORMPOSSOURCE_World:'TRANSFORMPOSSOURCE_World',TRANSFORMPOSSOURCE_TranslatedWorld:'TRANSFORMPOSSOURCE_TranslatedWorld',TRANSFORMPOSSOURCE_View:'TRANSFORMPOSSOURCE_View',TRANSFORMPOSSOURCE_Camera:'TRANSFORMPOSSOURCE_Camera',TRANSFORMPOSSOURCE_Particle:'TRANSFORMPOSSOURCE_Particle',TRANSFORMPOSSOURCE_MAX:'TRANSFORMPOSSOURCE_MAX', };
+declare class MaterialExpressionTransformPosition extends MaterialExpression { 
+	Input: ExpressionInput;
+	TransformSourceType: EMaterialPositionTransformSource;
+	TransformType: EMaterialPositionTransformSource;
+	static Load(ResourceName: string): MaterialExpressionTransformPosition;
+	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTransformPosition;
+	static GetDefaultObject(): MaterialExpressionTransformPosition;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTransformPosition;
+	static C(Other: UObject | any): MaterialExpressionTransformPosition;
+}
+
+declare class MaterialExpressionTruncate extends MaterialExpression { 
+	Input: ExpressionInput;
+	static Load(ResourceName: string): MaterialExpressionTruncate;
+	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTruncate;
+	static GetDefaultObject(): MaterialExpressionTruncate;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTruncate;
+	static C(Other: UObject | any): MaterialExpressionTruncate;
+}
+
+declare class MaterialExpressionTwoSidedSign extends MaterialExpression { 
+	static Load(ResourceName: string): MaterialExpressionTwoSidedSign;
+	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTwoSidedSign;
+	static GetDefaultObject(): MaterialExpressionTwoSidedSign;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTwoSidedSign;
+	static C(Other: UObject | any): MaterialExpressionTwoSidedSign;
+}
+
+declare type EVectorNoiseFunction = 'VNF_CellnoiseALU' | 'VNF_VectorALU' | 'VNF_GradientALU' | 'VNF_CurlALU' | 'VNF_VoronoiALU' | 'VNF_MAX';
+declare var EVectorNoiseFunction : { VNF_CellnoiseALU:'VNF_CellnoiseALU',VNF_VectorALU:'VNF_VectorALU',VNF_GradientALU:'VNF_GradientALU',VNF_CurlALU:'VNF_CurlALU',VNF_VoronoiALU:'VNF_VoronoiALU',VNF_MAX:'VNF_MAX', };
+declare class MaterialExpressionVectorNoise extends MaterialExpression { 
+	Position: ExpressionInput;
+	NoiseFunction: EVectorNoiseFunction;
+	Quality: number;
+	bTiling: boolean;
+	TileSize: any;
+	static Load(ResourceName: string): MaterialExpressionVectorNoise;
+	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVectorNoise;
+	static GetDefaultObject(): MaterialExpressionVectorNoise;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVectorNoise;
+	static C(Other: UObject | any): MaterialExpressionVectorNoise;
+}
+
+declare class MaterialExpressionVertexColor extends MaterialExpression { 
+	static Load(ResourceName: string): MaterialExpressionVertexColor;
+	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVertexColor;
+	static GetDefaultObject(): MaterialExpressionVertexColor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVertexColor;
+	static C(Other: UObject | any): MaterialExpressionVertexColor;
+}
+
+declare class MaterialExpressionVertexInterpolator extends MaterialExpressionCustomOutput { 
+	Input: ExpressionInput;
+	static Load(ResourceName: string): MaterialExpressionVertexInterpolator;
+	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVertexInterpolator;
+	static GetDefaultObject(): MaterialExpressionVertexInterpolator;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVertexInterpolator;
+	static C(Other: UObject | any): MaterialExpressionVertexInterpolator;
+}
+
+declare class MaterialExpressionVertexNormalWS extends MaterialExpression { 
+	static Load(ResourceName: string): MaterialExpressionVertexNormalWS;
+	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVertexNormalWS;
+	static GetDefaultObject(): MaterialExpressionVertexNormalWS;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVertexNormalWS;
+	static C(Other: UObject | any): MaterialExpressionVertexNormalWS;
+}
+
+declare type EMaterialExposedViewProperty = 'MEVP_BufferSize' | 'MEVP_FieldOfView' | 'MEVP_TanHalfFieldOfView' | 'MEVP_ViewSize' | 'MEVP_WorldSpaceViewPosition' | 'MEVP_WorldSpaceCameraPosition' | 'MEVP_ViewportOffset' | 'MEVP_TemporalSampleCount' | 'MEVP_TemporalSampleIndex' | 'MEVP_TemporalSampleOffset' | 'MEVP_RuntimeVirtualTextureOutputLevel' | 'MEVP_RuntimeVirtualTextureOutputDerivative' | 'MEVP_MAX';
+declare var EMaterialExposedViewProperty : { MEVP_BufferSize:'MEVP_BufferSize',MEVP_FieldOfView:'MEVP_FieldOfView',MEVP_TanHalfFieldOfView:'MEVP_TanHalfFieldOfView',MEVP_ViewSize:'MEVP_ViewSize',MEVP_WorldSpaceViewPosition:'MEVP_WorldSpaceViewPosition',MEVP_WorldSpaceCameraPosition:'MEVP_WorldSpaceCameraPosition',MEVP_ViewportOffset:'MEVP_ViewportOffset',MEVP_TemporalSampleCount:'MEVP_TemporalSampleCount',MEVP_TemporalSampleIndex:'MEVP_TemporalSampleIndex',MEVP_TemporalSampleOffset:'MEVP_TemporalSampleOffset',MEVP_RuntimeVirtualTextureOutputLevel:'MEVP_RuntimeVirtualTextureOutputLevel',MEVP_RuntimeVirtualTextureOutputDerivative:'MEVP_RuntimeVirtualTextureOutputDerivative',MEVP_MAX:'MEVP_MAX', };
+declare class MaterialExpressionViewProperty extends MaterialExpression { 
+	Property: EMaterialExposedViewProperty;
+	static Load(ResourceName: string): MaterialExpressionViewProperty;
+	static Find(Outer: UObject, ResourceName: string): MaterialExpressionViewProperty;
+	static GetDefaultObject(): MaterialExpressionViewProperty;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionViewProperty;
+	static C(Other: UObject | any): MaterialExpressionViewProperty;
+}
+
+declare class MaterialExpressionViewSize extends MaterialExpression { 
+	static Load(ResourceName: string): MaterialExpressionViewSize;
+	static Find(Outer: UObject, ResourceName: string): MaterialExpressionViewSize;
+	static GetDefaultObject(): MaterialExpressionViewSize;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionViewSize;
+	static C(Other: UObject | any): MaterialExpressionViewSize;
+}
+
+declare class MaterialExpressionVirtualTextureFeatureSwitch extends MaterialExpression { 
+	No: ExpressionInput;
+	Yes: ExpressionInput;
+	static Load(ResourceName: string): MaterialExpressionVirtualTextureFeatureSwitch;
+	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVirtualTextureFeatureSwitch;
+	static GetDefaultObject(): MaterialExpressionVirtualTextureFeatureSwitch;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVirtualTextureFeatureSwitch;
+	static C(Other: UObject | any): MaterialExpressionVirtualTextureFeatureSwitch;
+}
+
+declare type EWorldPositionIncludedOffsets = 'WPT_Default' | 'WPT_ExcludeAllShaderOffsets' | 'WPT_CameraRelative' | 'WPT_CameraRelativeNoOffsets' | 'WPT_MAX';
+declare var EWorldPositionIncludedOffsets : { WPT_Default:'WPT_Default',WPT_ExcludeAllShaderOffsets:'WPT_ExcludeAllShaderOffsets',WPT_CameraRelative:'WPT_CameraRelative',WPT_CameraRelativeNoOffsets:'WPT_CameraRelativeNoOffsets',WPT_MAX:'WPT_MAX', };
+declare class MaterialExpressionWorldPosition extends MaterialExpression { 
+	WorldPositionShaderOffset: EWorldPositionIncludedOffsets;
+	static Load(ResourceName: string): MaterialExpressionWorldPosition;
+	static Find(Outer: UObject, ResourceName: string): MaterialExpressionWorldPosition;
+	static GetDefaultObject(): MaterialExpressionWorldPosition;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionWorldPosition;
+	static C(Other: UObject | any): MaterialExpressionWorldPosition;
+}
+
+declare class MaterialFunctionMaterialLayer extends MaterialFunction { 
+	static Load(ResourceName: string): MaterialFunctionMaterialLayer;
+	static Find(Outer: UObject, ResourceName: string): MaterialFunctionMaterialLayer;
+	static GetDefaultObject(): MaterialFunctionMaterialLayer;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionMaterialLayer;
+	static C(Other: UObject | any): MaterialFunctionMaterialLayer;
+}
+
+declare class MaterialFunctionMaterialLayerInstance extends MaterialFunctionInstance { 
+	static Load(ResourceName: string): MaterialFunctionMaterialLayerInstance;
+	static Find(Outer: UObject, ResourceName: string): MaterialFunctionMaterialLayerInstance;
+	static GetDefaultObject(): MaterialFunctionMaterialLayerInstance;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionMaterialLayerInstance;
+	static C(Other: UObject | any): MaterialFunctionMaterialLayerInstance;
+}
+
+declare class MaterialFunctionMaterialLayerBlend extends MaterialFunction { 
+	static Load(ResourceName: string): MaterialFunctionMaterialLayerBlend;
+	static Find(Outer: UObject, ResourceName: string): MaterialFunctionMaterialLayerBlend;
+	static GetDefaultObject(): MaterialFunctionMaterialLayerBlend;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionMaterialLayerBlend;
+	static C(Other: UObject | any): MaterialFunctionMaterialLayerBlend;
+}
+
+declare class MaterialFunctionMaterialLayerBlendInstance extends MaterialFunctionInstance { 
+	static Load(ResourceName: string): MaterialFunctionMaterialLayerBlendInstance;
+	static Find(Outer: UObject, ResourceName: string): MaterialFunctionMaterialLayerBlendInstance;
+	static GetDefaultObject(): MaterialFunctionMaterialLayerBlendInstance;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionMaterialLayerBlendInstance;
+	static C(Other: UObject | any): MaterialFunctionMaterialLayerBlendInstance;
+}
+
+declare class MaterialInstanceActor extends Actor { 
+	TargetActors: Actor[];
+	static GetDefaultObject(): MaterialInstanceActor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialInstanceActor;
+	static C(Other: UObject | any): MaterialInstanceActor;
+}
+
+declare class MatineeActorCameraAnim extends MatineeActor { 
+	CameraAnim: CameraAnim;
+	static GetDefaultObject(): MatineeActorCameraAnim;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MatineeActorCameraAnim;
+	static C(Other: UObject | any): MatineeActorCameraAnim;
+}
+
+declare class MatineeAnimInterface extends Interface { 
+	static Load(ResourceName: string): MatineeAnimInterface;
+	static Find(Outer: UObject, ResourceName: string): MatineeAnimInterface;
+	static GetDefaultObject(): MatineeAnimInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MatineeAnimInterface;
+	static C(Other: UObject | any): MatineeAnimInterface;
+}
+
+declare class MatineeInterface extends Interface { 
+	static Load(ResourceName: string): MatineeInterface;
+	static Find(Outer: UObject, ResourceName: string): MatineeInterface;
+	static GetDefaultObject(): MatineeInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MatineeInterface;
+	static C(Other: UObject | any): MatineeInterface;
+}
+
+declare class MeshMergeCullingVolume extends Volume { 
+	static GetDefaultObject(): MeshMergeCullingVolume;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshMergeCullingVolume;
+	static C(Other: UObject | any): MeshMergeCullingVolume;
+}
+
+declare class MeshSimplificationSettings extends DeveloperSettings { 
+	MeshReductionModuleName: string;
+	static Load(ResourceName: string): MeshSimplificationSettings;
+	static Find(Outer: UObject, ResourceName: string): MeshSimplificationSettings;
+	static GetDefaultObject(): MeshSimplificationSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshSimplificationSettings;
+	static C(Other: UObject | any): MeshSimplificationSettings;
+}
+
+declare class MeshVertexPainterKismetLibrary extends BlueprintFunctionLibrary { 
+	static Load(ResourceName: string): MeshVertexPainterKismetLibrary;
+	static Find(Outer: UObject, ResourceName: string): MeshVertexPainterKismetLibrary;
+	static GetDefaultObject(): MeshVertexPainterKismetLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshVertexPainterKismetLibrary;
+	static RemovePaintedVertices(StaticMeshComponent: StaticMeshComponent): void;
+	static PaintVerticesSingleColor(StaticMeshComponent: StaticMeshComponent,FillColor: LinearColor,bConvertToSRGB: boolean): void;
+	static PaintVerticesLerpAlongAxis(StaticMeshComponent: StaticMeshComponent,StartColor: LinearColor,EndColor: LinearColor,Axis: EVertexPaintAxis,bConvertToSRGB: boolean): void;
+	static C(Other: UObject | any): MeshVertexPainterKismetLibrary;
+}
+
+declare class PurchaseInfo { 
+	Identifier: string;
+	DisplayName: string;
+	DisplayDescription: string;
+	DisplayPrice: string;
+	clone() : PurchaseInfo;
+	static C(Other: UObject | any): PurchaseInfo;
+}
+
+declare class MicroTransactionBase extends PlatformInterfaceBase { 
+	AvailableProducts: PurchaseInfo[];
+	LastError: string;
+	LastErrorSolution: string;
+	static Load(ResourceName: string): MicroTransactionBase;
+	static Find(Outer: UObject, ResourceName: string): MicroTransactionBase;
+	static GetDefaultObject(): MicroTransactionBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MicroTransactionBase;
+	static C(Other: UObject | any): MicroTransactionBase;
+}
+
+declare class NavAgentInterface extends Interface { 
+	static Load(ResourceName: string): NavAgentInterface;
+	static Find(Outer: UObject, ResourceName: string): NavAgentInterface;
+	static GetDefaultObject(): NavAgentInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavAgentInterface;
+	static C(Other: UObject | any): NavAgentInterface;
+}
+
+declare class NavEdgeProviderInterface extends Interface { 
+	static Load(ResourceName: string): NavEdgeProviderInterface;
+	static Find(Outer: UObject, ResourceName: string): NavEdgeProviderInterface;
+	static GetDefaultObject(): NavEdgeProviderInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavEdgeProviderInterface;
+	static C(Other: UObject | any): NavEdgeProviderInterface;
+}
+
+declare class NavigationDataInterface extends Interface { 
+	static Load(ResourceName: string): NavigationDataInterface;
+	static Find(Outer: UObject, ResourceName: string): NavigationDataInterface;
+	static GetDefaultObject(): NavigationDataInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationDataInterface;
+	static C(Other: UObject | any): NavigationDataInterface;
+}
+
+declare class NavigationSystem extends UObject { 
+	static Load(ResourceName: string): NavigationSystem;
+	static Find(Outer: UObject, ResourceName: string): NavigationSystem;
+	static GetDefaultObject(): NavigationSystem;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationSystem;
+	static SimpleMoveToLocation(Controller: Controller,Goal: Vector): void;
+	static SimpleMoveToActor(Controller: Controller,Goal: Actor): void;
+	static C(Other: UObject | any): NavigationSystem;
+}
+
+declare class NullNavSysConfig extends NavigationSystemConfig { 
+	static Load(ResourceName: string): NullNavSysConfig;
+	static Find(Outer: UObject, ResourceName: string): NullNavSysConfig;
+	static GetDefaultObject(): NullNavSysConfig;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NullNavSysConfig;
+	static C(Other: UObject | any): NullNavSysConfig;
+}
+
+declare class NavPathObserverInterface extends Interface { 
+	static Load(ResourceName: string): NavPathObserverInterface;
+	static Find(Outer: UObject, ResourceName: string): NavPathObserverInterface;
+	static GetDefaultObject(): NavPathObserverInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavPathObserverInterface;
+	static C(Other: UObject | any): NavPathObserverInterface;
+}
+
+declare class NavRelevantInterface extends Interface { 
+	static Load(ResourceName: string): NavRelevantInterface;
+	static Find(Outer: UObject, ResourceName: string): NavRelevantInterface;
+	static GetDefaultObject(): NavRelevantInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavRelevantInterface;
+	static C(Other: UObject | any): NavRelevantInterface;
+}
+
+declare class SimulatedClientNetConnection extends NetConnection { 
+	static Load(ResourceName: string): SimulatedClientNetConnection;
+	static Find(Outer: UObject, ResourceName: string): SimulatedClientNetConnection;
+	static GetDefaultObject(): SimulatedClientNetConnection;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SimulatedClientNetConnection;
+	static C(Other: UObject | any): SimulatedClientNetConnection;
+}
+
+declare class NetworkPredictionInterface extends Interface { 
+	static Load(ResourceName: string): NetworkPredictionInterface;
+	static Find(Outer: UObject, ResourceName: string): NetworkPredictionInterface;
+	static GetDefaultObject(): NetworkPredictionInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NetworkPredictionInterface;
+	static C(Other: UObject | any): NetworkPredictionInterface;
+}
+
+declare class NetworkSettings extends DeveloperSettings { 
+	bVerifyPeer: boolean;
+	bEnableMultiplayerWorldOriginRebasing: boolean;
+	MaxRepArraySize: number;
+	MaxRepArrayMemory: number;
+	static Load(ResourceName: string): NetworkSettings;
+	static Find(Outer: UObject, ResourceName: string): NetworkSettings;
+	static GetDefaultObject(): NetworkSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NetworkSettings;
+	static C(Other: UObject | any): NetworkSettings;
+}
+
+declare class NodeMappingProviderInterface extends Interface { 
+	static Load(ResourceName: string): NodeMappingProviderInterface;
+	static Find(Outer: UObject, ResourceName: string): NodeMappingProviderInterface;
+	static GetDefaultObject(): NodeMappingProviderInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NodeMappingProviderInterface;
+	static C(Other: UObject | any): NodeMappingProviderInterface;
+}
+
+declare class Note extends Actor { 
+	text: string;
+	SpriteComponent: BillboardComponent;
+	ArrowComponent: ArrowComponent;
+	static GetDefaultObject(): Note;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Note;
+	static C(Other: UObject | any): Note;
+}
+
+declare class ObjectLibrary extends UObject { 
+	ObjectBaseClass: UnrealEngineClass;
+	bHasBlueprintClasses: boolean;
+	Objects: UObject[];
+	WeakObjects: any[];
+	bUseWeakReferences: boolean;
+	bIsFullyLoaded: boolean;
+	static Load(ResourceName: string): ObjectLibrary;
+	static Find(Outer: UObject, ResourceName: string): ObjectLibrary;
+	static GetDefaultObject(): ObjectLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectLibrary;
+	static C(Other: UObject | any): ObjectLibrary;
+}
+
+declare class ObjectReferencer extends UObject { 
+	ReferencedObjects: UObject[];
+	static Load(ResourceName: string): ObjectReferencer;
+	static Find(Outer: UObject, ResourceName: string): ObjectReferencer;
+	static GetDefaultObject(): ObjectReferencer;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectReferencer;
+	static C(Other: UObject | any): ObjectReferencer;
+}
+
+declare class OnlineBlueprintCallProxyBase extends UObject { 
+	static Load(ResourceName: string): OnlineBlueprintCallProxyBase;
+	static Find(Outer: UObject, ResourceName: string): OnlineBlueprintCallProxyBase;
+	static GetDefaultObject(): OnlineBlueprintCallProxyBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineBlueprintCallProxyBase;
+	Activate(): void;
+	static C(Other: UObject | any): OnlineBlueprintCallProxyBase;
+}
+
+declare class OnlineEngineInterface extends UObject { 
+	static Load(ResourceName: string): OnlineEngineInterface;
+	static Find(Outer: UObject, ResourceName: string): OnlineEngineInterface;
+	static GetDefaultObject(): OnlineEngineInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineEngineInterface;
+	static C(Other: UObject | any): OnlineEngineInterface;
+}
+
+declare class PackageMapClient extends PackageMap { 
+	static Load(ResourceName: string): PackageMapClient;
+	static Find(Outer: UObject, ResourceName: string): PackageMapClient;
+	static GetDefaultObject(): PackageMapClient;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PackageMapClient;
+	static C(Other: UObject | any): PackageMapClient;
+}
+
+declare class PainCausingVolume extends PhysicsVolume { 
+	bPainCausing: boolean;
+	DamagePerSec: number;
+	DamageType: UnrealEngineClass;
+	PainInterval: number;
+	bEntryPain: boolean;
+	BACKUP_bPainCausing: boolean;
+	DamageInstigator: Controller;
+	static GetDefaultObject(): PainCausingVolume;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PainCausingVolume;
+	static C(Other: UObject | any): PainCausingVolume;
+}
+
+declare class ParticleModuleAccelerationBase extends ParticleModule { 
+	bAlwaysInWorldSpace: boolean;
+	static Load(ResourceName: string): ParticleModuleAccelerationBase;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationBase;
+	static GetDefaultObject(): ParticleModuleAccelerationBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationBase;
+	static C(Other: UObject | any): ParticleModuleAccelerationBase;
+}
+
+declare class ParticleModuleAcceleration extends ParticleModuleAccelerationBase { 
+	Acceleration: RawDistributionVector;
+	bApplyOwnerScale: boolean;
+	static Load(ResourceName: string): ParticleModuleAcceleration;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleAcceleration;
+	static GetDefaultObject(): ParticleModuleAcceleration;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAcceleration;
+	static C(Other: UObject | any): ParticleModuleAcceleration;
+}
+
+declare class ParticleModuleAccelerationConstant extends ParticleModuleAccelerationBase { 
+	Acceleration: Vector;
+	static Load(ResourceName: string): ParticleModuleAccelerationConstant;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationConstant;
+	static GetDefaultObject(): ParticleModuleAccelerationConstant;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationConstant;
+	static C(Other: UObject | any): ParticleModuleAccelerationConstant;
+}
+
+declare class ParticleModuleAccelerationDrag extends ParticleModuleAccelerationBase { 
+	DragCoefficient: DistributionFloat;
+	DragCoefficientRaw: RawDistributionFloat;
+	static Load(ResourceName: string): ParticleModuleAccelerationDrag;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationDrag;
+	static GetDefaultObject(): ParticleModuleAccelerationDrag;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationDrag;
+	static C(Other: UObject | any): ParticleModuleAccelerationDrag;
+}
+
+declare class ParticleModuleAccelerationDragScaleOverLife extends ParticleModuleAccelerationBase { 
+	DragScale: DistributionFloat;
+	DragScaleRaw: RawDistributionFloat;
+	static Load(ResourceName: string): ParticleModuleAccelerationDragScaleOverLife;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationDragScaleOverLife;
+	static GetDefaultObject(): ParticleModuleAccelerationDragScaleOverLife;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationDragScaleOverLife;
+	static C(Other: UObject | any): ParticleModuleAccelerationDragScaleOverLife;
+}
+
+declare class ParticleModuleAccelerationOverLifetime extends ParticleModuleAccelerationBase { 
+	AccelOverLife: RawDistributionVector;
+	static Load(ResourceName: string): ParticleModuleAccelerationOverLifetime;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationOverLifetime;
+	static GetDefaultObject(): ParticleModuleAccelerationOverLifetime;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationOverLifetime;
+	static C(Other: UObject | any): ParticleModuleAccelerationOverLifetime;
+}
+
+declare class ParticleModuleAttractorBase extends ParticleModule { 
+	static Load(ResourceName: string): ParticleModuleAttractorBase;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorBase;
+	static GetDefaultObject(): ParticleModuleAttractorBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorBase;
+	static C(Other: UObject | any): ParticleModuleAttractorBase;
+}
+
+declare class ParticleModuleAttractorLine extends ParticleModuleAttractorBase { 
+	EndPoint0: Vector;
+	EndPoint1: Vector;
+	Range: RawDistributionFloat;
+	Strength: RawDistributionFloat;
+	static Load(ResourceName: string): ParticleModuleAttractorLine;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorLine;
+	static GetDefaultObject(): ParticleModuleAttractorLine;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorLine;
+	static C(Other: UObject | any): ParticleModuleAttractorLine;
+}
+
+declare type EAttractorParticleSelectionMethod = 'EAPSM_Random' | 'EAPSM_Sequential' | 'EAPSM_MAX';
+declare var EAttractorParticleSelectionMethod : { EAPSM_Random:'EAPSM_Random',EAPSM_Sequential:'EAPSM_Sequential',EAPSM_MAX:'EAPSM_MAX', };
+declare class ParticleModuleAttractorParticle extends ParticleModuleAttractorBase { 
+	EmitterName: string;
+	Range: RawDistributionFloat;
+	bStrengthByDistance: boolean;
+	Strength: RawDistributionFloat;
+	bAffectBaseVelocity: boolean;
+	SelectionMethod: EAttractorParticleSelectionMethod;
+	bRenewSource: boolean;
+	bInheritSourceVel: boolean;
+	LastSelIndex: number;
+	static Load(ResourceName: string): ParticleModuleAttractorParticle;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorParticle;
+	static GetDefaultObject(): ParticleModuleAttractorParticle;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorParticle;
+	static C(Other: UObject | any): ParticleModuleAttractorParticle;
+}
+
+declare class ParticleModuleAttractorPoint extends ParticleModuleAttractorBase { 
+	Position: RawDistributionVector;
+	Range: RawDistributionFloat;
+	Strength: RawDistributionFloat;
+	StrengthByDistance: boolean;
+	bAffectBaseVelocity: boolean;
+	bOverrideVelocity: boolean;
+	bUseWorldSpacePosition: boolean;
+	Positive_X: boolean;
+	Positive_Y: boolean;
+	Positive_Z: boolean;
+	Negative_X: boolean;
+	Negative_Y: boolean;
+	Negative_Z: boolean;
+	static Load(ResourceName: string): ParticleModuleAttractorPoint;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorPoint;
+	static GetDefaultObject(): ParticleModuleAttractorPoint;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorPoint;
+	static C(Other: UObject | any): ParticleModuleAttractorPoint;
+}
+
+declare class ParticleModuleAttractorPointGravity extends ParticleModuleAttractorBase { 
+	Position: Vector;
+	Radius: number;
+	Strength: DistributionFloat;
+	StrengthRaw: RawDistributionFloat;
+	static Load(ResourceName: string): ParticleModuleAttractorPointGravity;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorPointGravity;
+	static GetDefaultObject(): ParticleModuleAttractorPointGravity;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorPointGravity;
+	static C(Other: UObject | any): ParticleModuleAttractorPointGravity;
+}
+
+declare class ParticleModuleBeamBase extends ParticleModule { 
+	static Load(ResourceName: string): ParticleModuleBeamBase;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleBeamBase;
+	static GetDefaultObject(): ParticleModuleBeamBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleBeamBase;
+	static C(Other: UObject | any): ParticleModuleBeamBase;
+}
+
+declare type BeamModifierType = 'PEB2MT_Source' | 'PEB2MT_Target' | 'PEB2MT_MAX';
+declare var BeamModifierType : { PEB2MT_Source:'PEB2MT_Source',PEB2MT_Target:'PEB2MT_Target',PEB2MT_MAX:'PEB2MT_MAX', };
+declare class BeamModifierOptions { 
+	bModify: boolean;
+	bScale: boolean;
+	bLock: boolean;
+	clone() : BeamModifierOptions;
+	static C(Other: UObject | any): BeamModifierOptions;
+}
+
+declare class ParticleModuleBeamModifier extends ParticleModuleBeamBase { 
+	ModifierType: BeamModifierType;
+	PositionOptions: BeamModifierOptions;
+	Position: RawDistributionVector;
+	TangentOptions: BeamModifierOptions;
+	Tangent: RawDistributionVector;
+	bAbsoluteTangent: boolean;
+	StrengthOptions: BeamModifierOptions;
+	Strength: RawDistributionFloat;
+	static Load(ResourceName: string): ParticleModuleBeamModifier;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleBeamModifier;
+	static GetDefaultObject(): ParticleModuleBeamModifier;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleBeamModifier;
+	static C(Other: UObject | any): ParticleModuleBeamModifier;
+}
+
+declare class ParticleModuleBeamNoise extends ParticleModuleBeamBase { 
+	bLowFreq_Enabled: boolean;
+	Frequency: number;
+	Frequency_LowRange: number;
+	NoiseRange: RawDistributionVector;
+	NoiseRangeScale: RawDistributionFloat;
+	bNRScaleEmitterTime: boolean;
+	NoiseSpeed: RawDistributionVector;
+	bSmooth: boolean;
+	NoiseLockRadius: number;
+	bNoiseLock: boolean;
+	bOscillate: boolean;
+	NoiseLockTime: number;
+	NoiseTension: number;
+	bUseNoiseTangents: boolean;
+	NoiseTangentStrength: RawDistributionFloat;
+	NoiseTessellation: number;
+	bTargetNoise: boolean;
+	FrequencyDistance: number;
+	bApplyNoiseScale: boolean;
+	NoiseScale: RawDistributionFloat;
+	static Load(ResourceName: string): ParticleModuleBeamNoise;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleBeamNoise;
+	static GetDefaultObject(): ParticleModuleBeamNoise;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleBeamNoise;
+	static C(Other: UObject | any): ParticleModuleBeamNoise;
+}
+
+declare type Beam2SourceTargetMethod = 'PEB2STM_Default' | 'PEB2STM_UserSet' | 'PEB2STM_Emitter' | 'PEB2STM_Particle' | 'PEB2STM_Actor' | 'PEB2STM_MAX';
+declare var Beam2SourceTargetMethod : { PEB2STM_Default:'PEB2STM_Default',PEB2STM_UserSet:'PEB2STM_UserSet',PEB2STM_Emitter:'PEB2STM_Emitter',PEB2STM_Particle:'PEB2STM_Particle',PEB2STM_Actor:'PEB2STM_Actor',PEB2STM_MAX:'PEB2STM_MAX', };
+declare type Beam2SourceTargetTangentMethod = 'PEB2STTM_Direct' | 'PEB2STTM_UserSet' | 'PEB2STTM_Distribution' | 'PEB2STTM_Emitter' | 'PEB2STTM_MAX';
+declare var Beam2SourceTargetTangentMethod : { PEB2STTM_Direct:'PEB2STTM_Direct',PEB2STTM_UserSet:'PEB2STTM_UserSet',PEB2STTM_Distribution:'PEB2STTM_Distribution',PEB2STTM_Emitter:'PEB2STTM_Emitter',PEB2STTM_MAX:'PEB2STTM_MAX', };
+declare class ParticleModuleBeamSource extends ParticleModuleBeamBase { 
+	SourceMethod: Beam2SourceTargetMethod;
+	SourceName: string;
+	bSourceAbsolute: boolean;
+	Source: RawDistributionVector;
+	bLockSource: boolean;
+	SourceTangentMethod: Beam2SourceTargetTangentMethod;
+	SourceTangent: RawDistributionVector;
+	bLockSourceTangent: boolean;
+	SourceStrength: RawDistributionFloat;
+	bLockSourceStength: boolean;
+	static Load(ResourceName: string): ParticleModuleBeamSource;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleBeamSource;
+	static GetDefaultObject(): ParticleModuleBeamSource;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleBeamSource;
+	static C(Other: UObject | any): ParticleModuleBeamSource;
+}
+
+declare class ParticleModuleBeamTarget extends ParticleModuleBeamBase { 
+	TargetMethod: Beam2SourceTargetMethod;
+	TargetName: string;
+	Target: RawDistributionVector;
+	bTargetAbsolute: boolean;
+	bLockTarget: boolean;
+	TargetTangentMethod: Beam2SourceTargetTangentMethod;
+	TargetTangent: RawDistributionVector;
+	bLockTargetTangent: boolean;
+	TargetStrength: RawDistributionFloat;
+	bLockTargetStength: boolean;
+	LockRadius: number;
+	static Load(ResourceName: string): ParticleModuleBeamTarget;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleBeamTarget;
+	static GetDefaultObject(): ParticleModuleBeamTarget;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleBeamTarget;
+	static C(Other: UObject | any): ParticleModuleBeamTarget;
+}
+
+declare class ParticleModuleCameraBase extends ParticleModule { 
+	static Load(ResourceName: string): ParticleModuleCameraBase;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleCameraBase;
+	static GetDefaultObject(): ParticleModuleCameraBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleCameraBase;
+	static C(Other: UObject | any): ParticleModuleCameraBase;
+}
+
+declare type EParticleCameraOffsetUpdateMethod = 'EPCOUM_DirectSet' | 'EPCOUM_Additive' | 'EPCOUM_Scalar' | 'EPCOUM_MAX';
+declare var EParticleCameraOffsetUpdateMethod : { EPCOUM_DirectSet:'EPCOUM_DirectSet',EPCOUM_Additive:'EPCOUM_Additive',EPCOUM_Scalar:'EPCOUM_Scalar',EPCOUM_MAX:'EPCOUM_MAX', };
+declare class ParticleModuleCameraOffset extends ParticleModuleCameraBase { 
+	CameraOffset: RawDistributionFloat;
+	bSpawnTimeOnly: boolean;
+	UpdateMethod: EParticleCameraOffsetUpdateMethod;
+	static Load(ResourceName: string): ParticleModuleCameraOffset;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleCameraOffset;
+	static GetDefaultObject(): ParticleModuleCameraOffset;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleCameraOffset;
+	static C(Other: UObject | any): ParticleModuleCameraOffset;
+}
+
+declare class ParticleModuleCollisionBase extends ParticleModule { 
+	static Load(ResourceName: string): ParticleModuleCollisionBase;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleCollisionBase;
+	static GetDefaultObject(): ParticleModuleCollisionBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleCollisionBase;
+	static C(Other: UObject | any): ParticleModuleCollisionBase;
+}
+
+declare type EParticleCollisionComplete = 'EPCC_Kill' | 'EPCC_Freeze' | 'EPCC_HaltCollisions' | 'EPCC_FreezeTranslation' | 'EPCC_FreezeRotation' | 'EPCC_FreezeMovement' | 'EPCC_MAX';
+declare var EParticleCollisionComplete : { EPCC_Kill:'EPCC_Kill',EPCC_Freeze:'EPCC_Freeze',EPCC_HaltCollisions:'EPCC_HaltCollisions',EPCC_FreezeTranslation:'EPCC_FreezeTranslation',EPCC_FreezeRotation:'EPCC_FreezeRotation',EPCC_FreezeMovement:'EPCC_FreezeMovement',EPCC_MAX:'EPCC_MAX', };
+declare class ParticleModuleCollision extends ParticleModuleCollisionBase { 
+	DampingFactor: RawDistributionVector;
+	DampingFactorRotation: RawDistributionVector;
+	MaxCollisions: RawDistributionFloat;
+	CollisionCompletionOption: EParticleCollisionComplete;
+	CollisionTypes: EObjectTypeQuery[];
+	bApplyPhysics: boolean;
+	bIgnoreTriggerVolumes: boolean;
+	ParticleMass: RawDistributionFloat;
+	DirScalar: number;
+	bPawnsDoNotDecrementCount: boolean;
+	bOnlyVerticalNormalsDecrementCount: boolean;
+	VerticalFudgeFactor: number;
+	DelayAmount: RawDistributionFloat;
+	bDropDetail: boolean;
+	bCollideOnlyIfVisible: boolean;
+	bIgnoreSourceActor: boolean;
+	MaxCollisionDistance: number;
+	static Load(ResourceName: string): ParticleModuleCollision;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleCollision;
+	static GetDefaultObject(): ParticleModuleCollision;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleCollision;
+	static C(Other: UObject | any): ParticleModuleCollision;
+}
+
+declare type EParticleCollisionResponse = 'Bounce' | 'Stop' | 'Kill' | 'EParticleCollisionResponse_MAX';
+declare var EParticleCollisionResponse : { Bounce:'Bounce',Stop:'Stop',Kill:'Kill',EParticleCollisionResponse_MAX:'EParticleCollisionResponse_MAX', };
+declare type EParticleCollisionMode = 'SceneDepth' | 'DistanceField' | 'EParticleCollisionMode_MAX';
+declare var EParticleCollisionMode : { SceneDepth:'SceneDepth',DistanceField:'DistanceField',EParticleCollisionMode_MAX:'EParticleCollisionMode_MAX', };
+declare class ParticleModuleCollisionGPU extends ParticleModuleCollisionBase { 
+	Resilience: RawDistributionFloat;
+	ResilienceScaleOverLife: RawDistributionFloat;
+	Friction: number;
+	RandomSpread: number;
+	RandomDistribution: number;
+	RadiusScale: number;
+	RadiusBias: number;
+	Response: EParticleCollisionResponse;
+	CollisionMode: EParticleCollisionMode;
+	static Load(ResourceName: string): ParticleModuleCollisionGPU;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleCollisionGPU;
+	static GetDefaultObject(): ParticleModuleCollisionGPU;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleCollisionGPU;
+	static C(Other: UObject | any): ParticleModuleCollisionGPU;
+}
+
+declare class ParticleModuleColorBase extends ParticleModule { 
+	static Load(ResourceName: string): ParticleModuleColorBase;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleColorBase;
+	static GetDefaultObject(): ParticleModuleColorBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleColorBase;
+	static C(Other: UObject | any): ParticleModuleColorBase;
+}
+
+declare class ParticleModuleColor extends ParticleModuleColorBase { 
+	StartColor: RawDistributionVector;
+	StartAlpha: RawDistributionFloat;
+	bClampAlpha: boolean;
+	static Load(ResourceName: string): ParticleModuleColor;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleColor;
+	static GetDefaultObject(): ParticleModuleColor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleColor;
+	static C(Other: UObject | any): ParticleModuleColor;
+}
+
+declare class ParticleRandomSeedInfo { 
+	ParameterName: string;
+	bGetSeedFromInstance: boolean;
+	bInstanceSeedIsIndex: boolean;
+	bResetSeedOnEmitterLooping: boolean;
+	bRandomlySelectSeedArray: boolean;
+	RandomSeeds: number[];
+	clone() : ParticleRandomSeedInfo;
+	static C(Other: UObject | any): ParticleRandomSeedInfo;
+}
+
+declare class ParticleModuleColor_Seeded extends ParticleModuleColor { 
+	RandomSeedInfo: ParticleRandomSeedInfo;
+	static Load(ResourceName: string): ParticleModuleColor_Seeded;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleColor_Seeded;
+	static GetDefaultObject(): ParticleModuleColor_Seeded;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleColor_Seeded;
+	static C(Other: UObject | any): ParticleModuleColor_Seeded;
+}
+
+declare class ParticleModuleColorOverLife extends ParticleModuleColorBase { 
+	ColorOverLife: RawDistributionVector;
+	AlphaOverLife: RawDistributionFloat;
+	bClampAlpha: boolean;
+	static Load(ResourceName: string): ParticleModuleColorOverLife;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleColorOverLife;
+	static GetDefaultObject(): ParticleModuleColorOverLife;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleColorOverLife;
+	static C(Other: UObject | any): ParticleModuleColorOverLife;
+}
+
+declare class ParticleModuleColorScaleOverLife extends ParticleModuleColorBase { 
+	ColorScaleOverLife: RawDistributionVector;
+	AlphaScaleOverLife: RawDistributionFloat;
+	bEmitterTime: boolean;
+	static Load(ResourceName: string): ParticleModuleColorScaleOverLife;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleColorScaleOverLife;
+	static GetDefaultObject(): ParticleModuleColorScaleOverLife;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleColorScaleOverLife;
+	static C(Other: UObject | any): ParticleModuleColorScaleOverLife;
+}
+
+declare class ParticleModuleEventReceiverKillParticles extends ParticleModuleEventReceiverBase { 
+	bStopSpawning: boolean;
+	static Load(ResourceName: string): ParticleModuleEventReceiverKillParticles;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleEventReceiverKillParticles;
+	static GetDefaultObject(): ParticleModuleEventReceiverKillParticles;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleEventReceiverKillParticles;
+	static C(Other: UObject | any): ParticleModuleEventReceiverKillParticles;
+}
+
+declare class ParticleModuleEventReceiverSpawn extends ParticleModuleEventReceiverBase { 
+	SpawnCount: RawDistributionFloat;
+	bUseParticleTime: boolean;
+	bUsePSysLocation: boolean;
+	bInheritVelocity: boolean;
+	InheritVelocityScale: RawDistributionVector;
+	PhysicalMaterials: PhysicalMaterial[];
+	bBanPhysicalMaterials: boolean;
+	static Load(ResourceName: string): ParticleModuleEventReceiverSpawn;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleEventReceiverSpawn;
+	static GetDefaultObject(): ParticleModuleEventReceiverSpawn;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleEventReceiverSpawn;
+	static C(Other: UObject | any): ParticleModuleEventReceiverSpawn;
+}
+
+declare class ParticleModuleKillBase extends ParticleModule { 
+	static Load(ResourceName: string): ParticleModuleKillBase;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleKillBase;
+	static GetDefaultObject(): ParticleModuleKillBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleKillBase;
+	static C(Other: UObject | any): ParticleModuleKillBase;
+}
+
+declare class ParticleModuleKillBox extends ParticleModuleKillBase { 
+	LowerLeftCorner: RawDistributionVector;
+	UpperRightCorner: RawDistributionVector;
+	bAbsolute: boolean;
+	bKillInside: boolean;
+	bAxisAlignedAndFixedSize: boolean;
+	static Load(ResourceName: string): ParticleModuleKillBox;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleKillBox;
+	static GetDefaultObject(): ParticleModuleKillBox;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleKillBox;
+	static C(Other: UObject | any): ParticleModuleKillBox;
+}
+
+declare class ParticleModuleKillHeight extends ParticleModuleKillBase { 
+	Height: RawDistributionFloat;
+	bAbsolute: boolean;
+	bFloor: boolean;
+	bApplyPSysScale: boolean;
+	static Load(ResourceName: string): ParticleModuleKillHeight;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleKillHeight;
+	static GetDefaultObject(): ParticleModuleKillHeight;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleKillHeight;
+	static C(Other: UObject | any): ParticleModuleKillHeight;
+}
+
+declare class ParticleModuleLifetimeBase extends ParticleModule { 
+	static Load(ResourceName: string): ParticleModuleLifetimeBase;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleLifetimeBase;
+	static GetDefaultObject(): ParticleModuleLifetimeBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLifetimeBase;
+	static C(Other: UObject | any): ParticleModuleLifetimeBase;
+}
+
+declare class ParticleModuleLifetime extends ParticleModuleLifetimeBase { 
+	LifeTime: RawDistributionFloat;
+	static Load(ResourceName: string): ParticleModuleLifetime;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleLifetime;
+	static GetDefaultObject(): ParticleModuleLifetime;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLifetime;
+	static C(Other: UObject | any): ParticleModuleLifetime;
+}
+
+declare class ParticleModuleLifetime_Seeded extends ParticleModuleLifetime { 
+	RandomSeedInfo: ParticleRandomSeedInfo;
+	static Load(ResourceName: string): ParticleModuleLifetime_Seeded;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleLifetime_Seeded;
+	static GetDefaultObject(): ParticleModuleLifetime_Seeded;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLifetime_Seeded;
+	static C(Other: UObject | any): ParticleModuleLifetime_Seeded;
+}
+
+declare class ParticleModuleLightBase extends ParticleModule { 
+	static Load(ResourceName: string): ParticleModuleLightBase;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleLightBase;
+	static GetDefaultObject(): ParticleModuleLightBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLightBase;
+	static C(Other: UObject | any): ParticleModuleLightBase;
+}
+
+declare class ParticleModuleLight extends ParticleModuleLightBase { 
+	bUseInverseSquaredFalloff: boolean;
+	bAffectsTranslucency: boolean;
+	bPreviewLightRadius: boolean;
+	SpawnFraction: number;
+	ColorScaleOverLife: RawDistributionVector;
+	BrightnessOverLife: RawDistributionFloat;
+	RadiusScale: RawDistributionFloat;
+	LightExponent: RawDistributionFloat;
+	LightingChannels: LightingChannels;
+	VolumetricScatteringIntensity: number;
+	bHighQualityLights: boolean;
+	bShadowCastingLights: boolean;
+	static Load(ResourceName: string): ParticleModuleLight;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleLight;
+	static GetDefaultObject(): ParticleModuleLight;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLight;
+	static C(Other: UObject | any): ParticleModuleLight;
+}
+
+declare class ParticleModuleLight_Seeded extends ParticleModuleLight { 
+	RandomSeedInfo: ParticleRandomSeedInfo;
+	static Load(ResourceName: string): ParticleModuleLight_Seeded;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleLight_Seeded;
+	static GetDefaultObject(): ParticleModuleLight_Seeded;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLight_Seeded;
+	static C(Other: UObject | any): ParticleModuleLight_Seeded;
+}
+
+declare class ParticleModuleLocationBase extends ParticleModule { 
+	static Load(ResourceName: string): ParticleModuleLocationBase;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationBase;
+	static GetDefaultObject(): ParticleModuleLocationBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationBase;
+	static C(Other: UObject | any): ParticleModuleLocationBase;
+}
+
+declare class ParticleModuleLocation extends ParticleModuleLocationBase { 
+	StartLocation: RawDistributionVector;
+	DistributeOverNPoints: number;
+	DistributeThreshold: number;
+	static Load(ResourceName: string): ParticleModuleLocation;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocation;
+	static GetDefaultObject(): ParticleModuleLocation;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocation;
+	static C(Other: UObject | any): ParticleModuleLocation;
+}
+
+declare class ParticleModuleLocation_Seeded extends ParticleModuleLocation { 
+	RandomSeedInfo: ParticleRandomSeedInfo;
+	static Load(ResourceName: string): ParticleModuleLocation_Seeded;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocation_Seeded;
+	static GetDefaultObject(): ParticleModuleLocation_Seeded;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocation_Seeded;
+	static C(Other: UObject | any): ParticleModuleLocation_Seeded;
+}
+
+declare type ELocationBoneSocketSource = 'BONESOCKETSOURCE_Bones' | 'BONESOCKETSOURCE_Sockets' | 'BONESOCKETSOURCE_MAX';
+declare var ELocationBoneSocketSource : { BONESOCKETSOURCE_Bones:'BONESOCKETSOURCE_Bones',BONESOCKETSOURCE_Sockets:'BONESOCKETSOURCE_Sockets',BONESOCKETSOURCE_MAX:'BONESOCKETSOURCE_MAX', };
+declare class LocationBoneSocketInfo { 
+	BoneSocketName: string;
+	Offset: Vector;
+	clone() : LocationBoneSocketInfo;
+	static C(Other: UObject | any): LocationBoneSocketInfo;
+}
+
+declare type ELocationBoneSocketSelectionMethod = 'BONESOCKETSEL_Sequential' | 'BONESOCKETSEL_Random' | 'BONESOCKETSEL_MAX';
+declare var ELocationBoneSocketSelectionMethod : { BONESOCKETSEL_Sequential:'BONESOCKETSEL_Sequential',BONESOCKETSEL_Random:'BONESOCKETSEL_Random',BONESOCKETSEL_MAX:'BONESOCKETSEL_MAX', };
+declare class ParticleModuleLocationBoneSocket extends ParticleModuleLocationBase { 
+	SourceType: ELocationBoneSocketSource;
+	UniversalOffset: Vector;
+	SourceLocations: LocationBoneSocketInfo[];
+	SelectionMethod: ELocationBoneSocketSelectionMethod;
+	bUpdatePositionEachFrame: boolean;
+	bOrientMeshEmitters: boolean;
+	bInheritBoneVelocity: boolean;
+	InheritVelocityScale: number;
+	SkelMeshActorParamName: string;
+	NumPreSelectedIndices: number;
+	EditorSkelMesh: SkeletalMesh;
+	static Load(ResourceName: string): ParticleModuleLocationBoneSocket;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationBoneSocket;
+	static GetDefaultObject(): ParticleModuleLocationBoneSocket;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationBoneSocket;
+	static C(Other: UObject | any): ParticleModuleLocationBoneSocket;
+}
+
+declare class ParticleModuleLocationDirect extends ParticleModuleLocationBase { 
+	Location: RawDistributionVector;
+	LocationOffset: RawDistributionVector;
+	ScaleFactor: RawDistributionVector;
+	Direction: RawDistributionVector;
+	static Load(ResourceName: string): ParticleModuleLocationDirect;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationDirect;
+	static GetDefaultObject(): ParticleModuleLocationDirect;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationDirect;
+	static C(Other: UObject | any): ParticleModuleLocationDirect;
+}
+
+declare type ELocationEmitterSelectionMethod = 'ELESM_Random' | 'ELESM_Sequential' | 'ELESM_MAX';
+declare var ELocationEmitterSelectionMethod : { ELESM_Random:'ELESM_Random',ELESM_Sequential:'ELESM_Sequential',ELESM_MAX:'ELESM_MAX', };
+declare class ParticleModuleLocationEmitter extends ParticleModuleLocationBase { 
+	EmitterName: string;
+	SelectionMethod: ELocationEmitterSelectionMethod;
+	InheritSourceVelocity: boolean;
+	InheritSourceVelocityScale: number;
+	bInheritSourceRotation: boolean;
+	InheritSourceRotationScale: number;
+	static Load(ResourceName: string): ParticleModuleLocationEmitter;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationEmitter;
+	static GetDefaultObject(): ParticleModuleLocationEmitter;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationEmitter;
+	static C(Other: UObject | any): ParticleModuleLocationEmitter;
+}
+
+declare class ParticleModuleLocationEmitterDirect extends ParticleModuleLocationBase { 
+	EmitterName: string;
+	static Load(ResourceName: string): ParticleModuleLocationEmitterDirect;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationEmitterDirect;
+	static GetDefaultObject(): ParticleModuleLocationEmitterDirect;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationEmitterDirect;
+	static C(Other: UObject | any): ParticleModuleLocationEmitterDirect;
+}
+
+declare class ParticleModuleLocationPrimitiveBase extends ParticleModuleLocationBase { 
+	Positive_X: boolean;
+	Positive_Y: boolean;
+	Positive_Z: boolean;
+	Negative_X: boolean;
+	Negative_Y: boolean;
+	Negative_Z: boolean;
+	SurfaceOnly: boolean;
+	Velocity: boolean;
+	VelocityScale: RawDistributionFloat;
+	StartLocation: RawDistributionVector;
+	static Load(ResourceName: string): ParticleModuleLocationPrimitiveBase;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveBase;
+	static GetDefaultObject(): ParticleModuleLocationPrimitiveBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveBase;
+	static C(Other: UObject | any): ParticleModuleLocationPrimitiveBase;
+}
+
+declare type CylinderHeightAxis = 'PMLPC_HEIGHTAXIS_X' | 'PMLPC_HEIGHTAXIS_Y' | 'PMLPC_HEIGHTAXIS_Z' | 'PMLPC_HEIGHTAXIS_MAX';
+declare var CylinderHeightAxis : { PMLPC_HEIGHTAXIS_X:'PMLPC_HEIGHTAXIS_X',PMLPC_HEIGHTAXIS_Y:'PMLPC_HEIGHTAXIS_Y',PMLPC_HEIGHTAXIS_Z:'PMLPC_HEIGHTAXIS_Z',PMLPC_HEIGHTAXIS_MAX:'PMLPC_HEIGHTAXIS_MAX', };
+declare class ParticleModuleLocationPrimitiveCylinder extends ParticleModuleLocationPrimitiveBase { 
+	RadialVelocity: boolean;
+	StartRadius: RawDistributionFloat;
+	StartHeight: RawDistributionFloat;
+	HeightAxis: CylinderHeightAxis;
+	static Load(ResourceName: string): ParticleModuleLocationPrimitiveCylinder;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveCylinder;
+	static GetDefaultObject(): ParticleModuleLocationPrimitiveCylinder;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveCylinder;
+	static C(Other: UObject | any): ParticleModuleLocationPrimitiveCylinder;
+}
+
+declare class ParticleModuleLocationPrimitiveCylinder_Seeded extends ParticleModuleLocationPrimitiveCylinder { 
+	RandomSeedInfo: ParticleRandomSeedInfo;
+	static Load(ResourceName: string): ParticleModuleLocationPrimitiveCylinder_Seeded;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveCylinder_Seeded;
+	static GetDefaultObject(): ParticleModuleLocationPrimitiveCylinder_Seeded;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveCylinder_Seeded;
+	static C(Other: UObject | any): ParticleModuleLocationPrimitiveCylinder_Seeded;
+}
+
+declare class ParticleModuleLocationPrimitiveSphere extends ParticleModuleLocationPrimitiveBase { 
+	StartRadius: RawDistributionFloat;
+	static Load(ResourceName: string): ParticleModuleLocationPrimitiveSphere;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveSphere;
+	static GetDefaultObject(): ParticleModuleLocationPrimitiveSphere;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveSphere;
+	static C(Other: UObject | any): ParticleModuleLocationPrimitiveSphere;
+}
+
+declare class ParticleModuleLocationPrimitiveSphere_Seeded extends ParticleModuleLocationPrimitiveSphere { 
+	RandomSeedInfo: ParticleRandomSeedInfo;
+	static Load(ResourceName: string): ParticleModuleLocationPrimitiveSphere_Seeded;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveSphere_Seeded;
+	static GetDefaultObject(): ParticleModuleLocationPrimitiveSphere_Seeded;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveSphere_Seeded;
+	static C(Other: UObject | any): ParticleModuleLocationPrimitiveSphere_Seeded;
+}
+
+declare class ParticleModuleLocationPrimitiveTriangle extends ParticleModuleLocationBase { 
+	StartOffset: RawDistributionVector;
+	Height: RawDistributionFloat;
+	Angle: RawDistributionFloat;
+	Thickness: RawDistributionFloat;
+	static Load(ResourceName: string): ParticleModuleLocationPrimitiveTriangle;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveTriangle;
+	static GetDefaultObject(): ParticleModuleLocationPrimitiveTriangle;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveTriangle;
+	static C(Other: UObject | any): ParticleModuleLocationPrimitiveTriangle;
+}
+
+declare type ELocationSkelVertSurfaceSource = 'VERTSURFACESOURCE_Vert' | 'VERTSURFACESOURCE_Surface' | 'VERTSURFACESOURCE_MAX';
+declare var ELocationSkelVertSurfaceSource : { VERTSURFACESOURCE_Vert:'VERTSURFACESOURCE_Vert',VERTSURFACESOURCE_Surface:'VERTSURFACESOURCE_Surface',VERTSURFACESOURCE_MAX:'VERTSURFACESOURCE_MAX', };
+declare class ParticleModuleLocationSkelVertSurface extends ParticleModuleLocationBase { 
+	SourceType: ELocationSkelVertSurfaceSource;
+	UniversalOffset: Vector;
+	bUpdatePositionEachFrame: boolean;
+	bOrientMeshEmitters: boolean;
+	bInheritBoneVelocity: boolean;
+	InheritVelocityScale: number;
+	SkelMeshActorParamName: string;
+	EditorSkelMesh: SkeletalMesh;
+	ValidAssociatedBones: string[];
+	bEnforceNormalCheck: boolean;
+	NormalToCompare: Vector;
+	NormalCheckToleranceDegrees: number;
+	NormalCheckTolerance: number;
+	ValidMaterialIndices: number[];
+	bInheritVertexColor: boolean;
+	bInheritUV: boolean;
+	InheritUVChannel: any;
+	static Load(ResourceName: string): ParticleModuleLocationSkelVertSurface;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationSkelVertSurface;
+	static GetDefaultObject(): ParticleModuleLocationSkelVertSurface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationSkelVertSurface;
+	static C(Other: UObject | any): ParticleModuleLocationSkelVertSurface;
+}
+
+declare class ParticleModuleLocationWorldOffset extends ParticleModuleLocation { 
+	static Load(ResourceName: string): ParticleModuleLocationWorldOffset;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationWorldOffset;
+	static GetDefaultObject(): ParticleModuleLocationWorldOffset;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationWorldOffset;
+	static C(Other: UObject | any): ParticleModuleLocationWorldOffset;
+}
+
+declare class ParticleModuleLocationWorldOffset_Seeded extends ParticleModuleLocationWorldOffset { 
+	RandomSeedInfo: ParticleRandomSeedInfo;
+	static Load(ResourceName: string): ParticleModuleLocationWorldOffset_Seeded;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationWorldOffset_Seeded;
+	static GetDefaultObject(): ParticleModuleLocationWorldOffset_Seeded;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationWorldOffset_Seeded;
+	static C(Other: UObject | any): ParticleModuleLocationWorldOffset_Seeded;
+}
+
+declare class ParticleModuleMaterialBase extends ParticleModule { 
+	static Load(ResourceName: string): ParticleModuleMaterialBase;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleMaterialBase;
+	static GetDefaultObject(): ParticleModuleMaterialBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMaterialBase;
+	static C(Other: UObject | any): ParticleModuleMaterialBase;
+}
+
+declare class ParticleModuleMeshMaterial extends ParticleModuleMaterialBase { 
+	MeshMaterials: MaterialInterface[];
+	static Load(ResourceName: string): ParticleModuleMeshMaterial;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshMaterial;
+	static GetDefaultObject(): ParticleModuleMeshMaterial;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshMaterial;
+	static C(Other: UObject | any): ParticleModuleMeshMaterial;
+}
+
+declare class ParticleModuleRotationBase extends ParticleModule { 
+	static Load(ResourceName: string): ParticleModuleRotationBase;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationBase;
+	static GetDefaultObject(): ParticleModuleRotationBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationBase;
+	static C(Other: UObject | any): ParticleModuleRotationBase;
+}
+
+declare class ParticleModuleMeshRotation extends ParticleModuleRotationBase { 
+	StartRotation: RawDistributionVector;
+	bInheritParent: boolean;
+	static Load(ResourceName: string): ParticleModuleMeshRotation;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotation;
+	static GetDefaultObject(): ParticleModuleMeshRotation;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotation;
+	static C(Other: UObject | any): ParticleModuleMeshRotation;
+}
+
+declare class ParticleModuleMeshRotation_Seeded extends ParticleModuleMeshRotation { 
+	RandomSeedInfo: ParticleRandomSeedInfo;
+	static Load(ResourceName: string): ParticleModuleMeshRotation_Seeded;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotation_Seeded;
+	static GetDefaultObject(): ParticleModuleMeshRotation_Seeded;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotation_Seeded;
+	static C(Other: UObject | any): ParticleModuleMeshRotation_Seeded;
+}
+
+declare class ParticleModuleRotationRateBase extends ParticleModule { 
+	static Load(ResourceName: string): ParticleModuleRotationRateBase;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationRateBase;
+	static GetDefaultObject(): ParticleModuleRotationRateBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationRateBase;
+	static C(Other: UObject | any): ParticleModuleRotationRateBase;
+}
+
+declare class ParticleModuleMeshRotationRate extends ParticleModuleRotationRateBase { 
+	StartRotationRate: RawDistributionVector;
+	static Load(ResourceName: string): ParticleModuleMeshRotationRate;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotationRate;
+	static GetDefaultObject(): ParticleModuleMeshRotationRate;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotationRate;
+	static C(Other: UObject | any): ParticleModuleMeshRotationRate;
+}
+
+declare class ParticleModuleMeshRotationRate_Seeded extends ParticleModuleMeshRotationRate { 
+	RandomSeedInfo: ParticleRandomSeedInfo;
+	static Load(ResourceName: string): ParticleModuleMeshRotationRate_Seeded;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotationRate_Seeded;
+	static GetDefaultObject(): ParticleModuleMeshRotationRate_Seeded;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotationRate_Seeded;
+	static C(Other: UObject | any): ParticleModuleMeshRotationRate_Seeded;
+}
+
+declare class ParticleModuleMeshRotationRateMultiplyLife extends ParticleModuleRotationRateBase { 
+	LifeMultiplier: RawDistributionVector;
+	static Load(ResourceName: string): ParticleModuleMeshRotationRateMultiplyLife;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotationRateMultiplyLife;
+	static GetDefaultObject(): ParticleModuleMeshRotationRateMultiplyLife;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotationRateMultiplyLife;
+	static C(Other: UObject | any): ParticleModuleMeshRotationRateMultiplyLife;
+}
+
+declare class ParticleModuleMeshRotationRateOverLife extends ParticleModuleRotationRateBase { 
+	RotRate: RawDistributionVector;
+	bScaleRotRate: boolean;
+	static Load(ResourceName: string): ParticleModuleMeshRotationRateOverLife;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotationRateOverLife;
+	static GetDefaultObject(): ParticleModuleMeshRotationRateOverLife;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotationRateOverLife;
+	static C(Other: UObject | any): ParticleModuleMeshRotationRateOverLife;
+}
+
+declare class ParticleModuleOrientationBase extends ParticleModule { 
+	static Load(ResourceName: string): ParticleModuleOrientationBase;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleOrientationBase;
+	static GetDefaultObject(): ParticleModuleOrientationBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleOrientationBase;
+	static C(Other: UObject | any): ParticleModuleOrientationBase;
+}
+
+declare type EParticleAxisLock = 'EPAL_NONE' | 'EPAL_X' | 'EPAL_Y' | 'EPAL_Z' | 'EPAL_NEGATIVE_X' | 'EPAL_NEGATIVE_Y' | 'EPAL_NEGATIVE_Z' | 'EPAL_ROTATE_X' | 'EPAL_ROTATE_Y' | 'EPAL_ROTATE_Z' | 'EPAL_MAX';
+declare var EParticleAxisLock : { EPAL_NONE:'EPAL_NONE',EPAL_X:'EPAL_X',EPAL_Y:'EPAL_Y',EPAL_Z:'EPAL_Z',EPAL_NEGATIVE_X:'EPAL_NEGATIVE_X',EPAL_NEGATIVE_Y:'EPAL_NEGATIVE_Y',EPAL_NEGATIVE_Z:'EPAL_NEGATIVE_Z',EPAL_ROTATE_X:'EPAL_ROTATE_X',EPAL_ROTATE_Y:'EPAL_ROTATE_Y',EPAL_ROTATE_Z:'EPAL_ROTATE_Z',EPAL_MAX:'EPAL_MAX', };
+declare class ParticleModuleOrientationAxisLock extends ParticleModuleOrientationBase { 
+	LockAxisFlags: EParticleAxisLock;
+	static Load(ResourceName: string): ParticleModuleOrientationAxisLock;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleOrientationAxisLock;
+	static GetDefaultObject(): ParticleModuleOrientationAxisLock;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleOrientationAxisLock;
+	static C(Other: UObject | any): ParticleModuleOrientationAxisLock;
+}
+
+declare class ParticleModuleParameterBase extends ParticleModule { 
+	static Load(ResourceName: string): ParticleModuleParameterBase;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleParameterBase;
+	static GetDefaultObject(): ParticleModuleParameterBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleParameterBase;
+	static C(Other: UObject | any): ParticleModuleParameterBase;
+}
+
+declare type EEmitterDynamicParameterValue = 'EDPV_UserSet' | 'EDPV_AutoSet' | 'EDPV_VelocityX' | 'EDPV_VelocityY' | 'EDPV_VelocityZ' | 'EDPV_VelocityMag' | 'EDPV_MAX';
+declare var EEmitterDynamicParameterValue : { EDPV_UserSet:'EDPV_UserSet',EDPV_AutoSet:'EDPV_AutoSet',EDPV_VelocityX:'EDPV_VelocityX',EDPV_VelocityY:'EDPV_VelocityY',EDPV_VelocityZ:'EDPV_VelocityZ',EDPV_VelocityMag:'EDPV_VelocityMag',EDPV_MAX:'EDPV_MAX', };
+declare class EmitterDynamicParameter { 
+	ParamName: string;
+	bUseEmitterTime: boolean;
+	bSpawnTimeOnly: boolean;
+	ValueMethod: EEmitterDynamicParameterValue;
+	bScaleVelocityByParamValue: boolean;
+	ParamValue: RawDistributionFloat;
+	clone() : EmitterDynamicParameter;
+	static C(Other: UObject | any): EmitterDynamicParameter;
+}
+
+declare class ParticleModuleParameterDynamic extends ParticleModuleParameterBase { 
+	DynamicParams: EmitterDynamicParameter[];
+	UpdateFlags: number;
+	bUsesVelocity: boolean;
+	static Load(ResourceName: string): ParticleModuleParameterDynamic;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleParameterDynamic;
+	static GetDefaultObject(): ParticleModuleParameterDynamic;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleParameterDynamic;
+	static C(Other: UObject | any): ParticleModuleParameterDynamic;
+}
+
+declare class ParticleModuleParameterDynamic_Seeded extends ParticleModuleParameterDynamic { 
+	RandomSeedInfo: ParticleRandomSeedInfo;
+	static Load(ResourceName: string): ParticleModuleParameterDynamic_Seeded;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleParameterDynamic_Seeded;
+	static GetDefaultObject(): ParticleModuleParameterDynamic_Seeded;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleParameterDynamic_Seeded;
+	static C(Other: UObject | any): ParticleModuleParameterDynamic_Seeded;
+}
+
+declare class ParticleModulePivotOffset extends ParticleModuleLocationBase { 
+	PivotOffset: Vector2D;
+	static Load(ResourceName: string): ParticleModulePivotOffset;
+	static Find(Outer: UObject, ResourceName: string): ParticleModulePivotOffset;
+	static GetDefaultObject(): ParticleModulePivotOffset;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModulePivotOffset;
+	static C(Other: UObject | any): ParticleModulePivotOffset;
+}
+
+declare class ParticleModuleRotation extends ParticleModuleRotationBase { 
+	StartRotation: RawDistributionFloat;
+	static Load(ResourceName: string): ParticleModuleRotation;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotation;
+	static GetDefaultObject(): ParticleModuleRotation;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotation;
+	static C(Other: UObject | any): ParticleModuleRotation;
+}
+
+declare class ParticleModuleRotation_Seeded extends ParticleModuleRotation { 
+	RandomSeedInfo: ParticleRandomSeedInfo;
+	static Load(ResourceName: string): ParticleModuleRotation_Seeded;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotation_Seeded;
+	static GetDefaultObject(): ParticleModuleRotation_Seeded;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotation_Seeded;
+	static C(Other: UObject | any): ParticleModuleRotation_Seeded;
+}
+
+declare class ParticleModuleRotationOverLifetime extends ParticleModuleRotationBase { 
+	RotationOverLife: RawDistributionFloat;
+	Scale: boolean;
+	static Load(ResourceName: string): ParticleModuleRotationOverLifetime;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationOverLifetime;
+	static GetDefaultObject(): ParticleModuleRotationOverLifetime;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationOverLifetime;
+	static C(Other: UObject | any): ParticleModuleRotationOverLifetime;
+}
+
+declare class ParticleModuleRotationRate extends ParticleModuleRotationRateBase { 
+	StartRotationRate: RawDistributionFloat;
+	static Load(ResourceName: string): ParticleModuleRotationRate;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationRate;
+	static GetDefaultObject(): ParticleModuleRotationRate;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationRate;
+	static C(Other: UObject | any): ParticleModuleRotationRate;
+}
+
+declare class ParticleModuleRotationRate_Seeded extends ParticleModuleRotationRate { 
+	RandomSeedInfo: ParticleRandomSeedInfo;
+	static Load(ResourceName: string): ParticleModuleRotationRate_Seeded;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationRate_Seeded;
+	static GetDefaultObject(): ParticleModuleRotationRate_Seeded;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationRate_Seeded;
+	static C(Other: UObject | any): ParticleModuleRotationRate_Seeded;
+}
+
+declare class ParticleModuleRotationRateMultiplyLife extends ParticleModuleRotationRateBase { 
+	LifeMultiplier: RawDistributionFloat;
+	static Load(ResourceName: string): ParticleModuleRotationRateMultiplyLife;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationRateMultiplyLife;
+	static GetDefaultObject(): ParticleModuleRotationRateMultiplyLife;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationRateMultiplyLife;
+	static C(Other: UObject | any): ParticleModuleRotationRateMultiplyLife;
+}
+
+declare class ParticleModuleSizeBase extends ParticleModule { 
+	static Load(ResourceName: string): ParticleModuleSizeBase;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleSizeBase;
+	static GetDefaultObject(): ParticleModuleSizeBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSizeBase;
+	static C(Other: UObject | any): ParticleModuleSizeBase;
+}
+
+declare class ParticleModuleSize extends ParticleModuleSizeBase { 
+	StartSize: RawDistributionVector;
+	static Load(ResourceName: string): ParticleModuleSize;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleSize;
+	static GetDefaultObject(): ParticleModuleSize;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSize;
+	static C(Other: UObject | any): ParticleModuleSize;
+}
+
+declare class ParticleModuleSize_Seeded extends ParticleModuleSize { 
+	RandomSeedInfo: ParticleRandomSeedInfo;
+	static Load(ResourceName: string): ParticleModuleSize_Seeded;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleSize_Seeded;
+	static GetDefaultObject(): ParticleModuleSize_Seeded;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSize_Seeded;
+	static C(Other: UObject | any): ParticleModuleSize_Seeded;
+}
+
+declare class ParticleModuleSizeMultiplyLife extends ParticleModuleSizeBase { 
+	LifeMultiplier: RawDistributionVector;
+	MultiplyX: boolean;
+	MultiplyY: boolean;
+	MultiplyZ: boolean;
+	static Load(ResourceName: string): ParticleModuleSizeMultiplyLife;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleSizeMultiplyLife;
+	static GetDefaultObject(): ParticleModuleSizeMultiplyLife;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSizeMultiplyLife;
+	static C(Other: UObject | any): ParticleModuleSizeMultiplyLife;
+}
+
+declare class ParticleModuleSizeScale extends ParticleModuleSizeBase { 
+	SizeScale: RawDistributionVector;
+	EnableX: boolean;
+	EnableY: boolean;
+	EnableZ: boolean;
+	static Load(ResourceName: string): ParticleModuleSizeScale;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleSizeScale;
+	static GetDefaultObject(): ParticleModuleSizeScale;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSizeScale;
+	static C(Other: UObject | any): ParticleModuleSizeScale;
+}
+
+declare class ParticleModuleSizeScaleBySpeed extends ParticleModuleSizeBase { 
+	SpeedScale: Vector2D;
+	MaxScale: Vector2D;
+	static Load(ResourceName: string): ParticleModuleSizeScaleBySpeed;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleSizeScaleBySpeed;
+	static GetDefaultObject(): ParticleModuleSizeScaleBySpeed;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSizeScaleBySpeed;
+	static C(Other: UObject | any): ParticleModuleSizeScaleBySpeed;
+}
+
+declare class ParticleModuleSourceMovement extends ParticleModuleLocationBase { 
+	SourceMovementScale: RawDistributionVector;
+	static Load(ResourceName: string): ParticleModuleSourceMovement;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleSourceMovement;
+	static GetDefaultObject(): ParticleModuleSourceMovement;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSourceMovement;
+	static C(Other: UObject | any): ParticleModuleSourceMovement;
+}
+
+declare class ParticleModuleSpawnPerUnit extends ParticleModuleSpawnBase { 
+	UnitScalar: number;
+	SpawnPerUnit: RawDistributionFloat;
+	bIgnoreSpawnRateWhenMoving: boolean;
+	MovementTolerance: number;
+	MaxFrameDistance: number;
+	bIgnoreMovementAlongX: boolean;
+	bIgnoreMovementAlongY: boolean;
+	bIgnoreMovementAlongZ: boolean;
+	static Load(ResourceName: string): ParticleModuleSpawnPerUnit;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleSpawnPerUnit;
+	static GetDefaultObject(): ParticleModuleSpawnPerUnit;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSpawnPerUnit;
+	static C(Other: UObject | any): ParticleModuleSpawnPerUnit;
+}
+
+declare class ParticleModuleSubUVBase extends ParticleModule { 
+	static Load(ResourceName: string): ParticleModuleSubUVBase;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleSubUVBase;
+	static GetDefaultObject(): ParticleModuleSubUVBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSubUVBase;
+	static C(Other: UObject | any): ParticleModuleSubUVBase;
+}
+
+declare class SubUVAnimation extends UObject { 
+	SubUVTexture: Texture2D;
+	SubImages_Horizontal: number;
+	SubImages_Vertical: number;
+	BoundingMode: ESubUVBoundingVertexCount;
+	OpacitySourceMode: EOpacitySourceMode;
+	AlphaThreshold: number;
+	static Load(ResourceName: string): SubUVAnimation;
+	static Find(Outer: UObject, ResourceName: string): SubUVAnimation;
+	static GetDefaultObject(): SubUVAnimation;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubUVAnimation;
+	static C(Other: UObject | any): SubUVAnimation;
+}
+
+declare class ParticleModuleSubUV extends ParticleModuleSubUVBase { 
+	Animation: SubUVAnimation;
+	SubImageIndex: RawDistributionFloat;
+	bUseRealTime: boolean;
+	static Load(ResourceName: string): ParticleModuleSubUV;
+	static Find(Outer: UObject, ResourceName: string): ParticleModuleSubUV;
+	static GetDefaultObject(): ParticleModuleSubUV;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSubUV;
+	static C(Other: UObject | any): ParticleModuleSubUV;
+}
+
 declare class ParticleModuleSubUVMovie extends ParticleModuleSubUV { 
 	bUseEmitterTime: boolean;
 	FrameRate: RawDistributionFloat;
@@ -589,6 +2028,20 @@ declare class PhysicalSurfaceName {
 	static C(Other: UObject | any): PhysicalSurfaceName;
 }
 
+declare type EChaosThreadingMode = 'DedicatedThread' | 'TaskGraph' | 'SingleThread' | 'Num' | 'Invalid' | 'EChaosThreadingMode_MAX';
+declare var EChaosThreadingMode : { DedicatedThread:'DedicatedThread',TaskGraph:'TaskGraph',SingleThread:'SingleThread',Num:'Num',Invalid:'Invalid',EChaosThreadingMode_MAX:'EChaosThreadingMode_MAX', };
+declare type EChaosSolverTickMode = 'Fixed' | 'Variable' | 'VariableCapped' | 'VariableCappedWithTarget' | 'EChaosSolverTickMode_MAX';
+declare var EChaosSolverTickMode : { Fixed:'Fixed',Variable:'Variable',VariableCapped:'VariableCapped',VariableCappedWithTarget:'VariableCappedWithTarget',EChaosSolverTickMode_MAX:'EChaosSolverTickMode_MAX', };
+declare type EChaosBufferMode = 'Double' | 'Triple' | 'Num' | 'Invalid' | 'EChaosBufferMode_MAX';
+declare var EChaosBufferMode : { Double:'Double',Triple:'Triple',Num:'Num',Invalid:'Invalid',EChaosBufferMode_MAX:'EChaosBufferMode_MAX', };
+declare class ChaosPhysicsSettings { 
+	DefaultThreadingModel: EChaosThreadingMode;
+	DedicatedThreadTickMode: EChaosSolverTickMode;
+	DedicatedThreadBufferMode: EChaosBufferMode;
+	clone() : ChaosPhysicsSettings;
+	static C(Other: UObject | any): ChaosPhysicsSettings;
+}
+
 declare class PhysicsSettings extends DeveloperSettings { 
 	DefaultGravityZ: number;
 	DefaultTerminalVelocity: number;
@@ -596,7 +2049,6 @@ declare class PhysicsSettings extends DeveloperSettings {
 	SimulateScratchMemorySize: number;
 	RagdollAggregateThreshold: number;
 	TriangleMeshTriangleMinAreaThreshold: number;
-	bEnableAsyncScene: boolean;
 	bEnableShapeSharing: boolean;
 	bEnablePCM: boolean;
 	bEnableStabilization: boolean;
@@ -623,17 +2075,19 @@ declare class PhysicsSettings extends DeveloperSettings {
 	bDisableKinematicKinematicPairs: boolean;
 	bDisableCCD: boolean;
 	bEnableEnhancedDeterminism: boolean;
+	AnimPhysicsMinDeltaTime: number;
+	bSimulateAnimPhysicsAfterReset: boolean;
 	MaxPhysicsDeltaTime: number;
 	bSubstepping: boolean;
 	bSubsteppingAsync: boolean;
 	MaxSubstepDeltaTime: number;
 	MaxSubsteps: number;
 	SyncSceneSmoothingFactor: number;
-	AsyncSceneSmoothingFactor: number;
 	InitialAverageFrameRate: number;
 	PhysXTreeRebuildRate: number;
 	PhysicalSurfaces: PhysicalSurfaceName[];
 	DefaultBroadphaseSettings: BroadphaseSettings;
+	ChaosSettings: ChaosPhysicsSettings;
 	static Load(ResourceName: string): PhysicsSettings;
 	static Find(Outer: UObject, ResourceName: string): PhysicsSettings;
 	static GetDefaultObject(): PhysicsSettings;
@@ -679,6 +2133,7 @@ declare class PhysicsThruster extends RigidBodyBase {
 
 declare class SceneCapture extends Actor { 
 	MeshComp: StaticMeshComponent;
+	SceneComponent: SceneComponent;
 	static GetDefaultObject(): SceneCapture;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneCapture;
 	static C(Other: UObject | any): SceneCapture;
@@ -686,6 +2141,8 @@ declare class SceneCapture extends Actor {
 
 declare type ESceneCapturePrimitiveRenderMode = 'PRM_LegacySceneCapture' | 'PRM_RenderScenePrimitives' | 'PRM_UseShowOnlyList' | 'PRM_MAX';
 declare var ESceneCapturePrimitiveRenderMode : { PRM_LegacySceneCapture:'PRM_LegacySceneCapture',PRM_RenderScenePrimitives:'PRM_RenderScenePrimitives',PRM_UseShowOnlyList:'PRM_UseShowOnlyList',PRM_MAX:'PRM_MAX', };
+declare type ESceneCaptureSource = 'SCS_SceneColorHDR' | 'SCS_SceneColorHDRNoAlpha' | 'SCS_FinalColorLDR' | 'SCS_SceneColorSceneDepth' | 'SCS_SceneDepth' | 'SCS_DeviceDepth' | 'SCS_Normal' | 'SCS_BaseColor' | 'SCS_FinalColorHDR' | 'SCS_MAX';
+declare var ESceneCaptureSource : { SCS_SceneColorHDR:'SCS_SceneColorHDR',SCS_SceneColorHDRNoAlpha:'SCS_SceneColorHDRNoAlpha',SCS_FinalColorLDR:'SCS_FinalColorLDR',SCS_SceneColorSceneDepth:'SCS_SceneColorSceneDepth',SCS_SceneDepth:'SCS_SceneDepth',SCS_DeviceDepth:'SCS_DeviceDepth',SCS_Normal:'SCS_Normal',SCS_BaseColor:'SCS_BaseColor',SCS_FinalColorHDR:'SCS_FinalColorHDR',SCS_MAX:'SCS_MAX', };
 declare class EngineShowFlagsSetting { 
 	ShowFlagName: string;
 	Enabled: boolean;
@@ -695,6 +2152,7 @@ declare class EngineShowFlagsSetting {
 
 declare class SceneCaptureComponent extends SceneComponent { 
 	PrimitiveRenderMode: ESceneCapturePrimitiveRenderMode;
+	CaptureSource: ESceneCaptureSource;
 	HiddenComponents: any[];
 	HiddenActors: Actor[];
 	ShowOnlyComponents: any[];
@@ -707,6 +2165,7 @@ declare class SceneCaptureComponent extends SceneComponent {
 	CaptureSortPriority: number;
 	ShowFlagSettings: EngineShowFlagsSetting[];
 	ProfilingEventName: string;
+	CaptureMesh: StaticMesh;
 	static Load(ResourceName: string): SceneCaptureComponent;
 	static Find(Outer: UObject, ResourceName: string): SceneCaptureComponent;
 	static GetDefaultObject(): SceneCaptureComponent;
@@ -718,7 +2177,7 @@ declare class SceneCaptureComponent extends SceneComponent {
 	RemoveShowOnlyActorComponents(InActor: Actor): void;
 	HideComponent(InComponent: PrimitiveComponent): void;
 	HideActorComponents(InActor: Actor): void;
-	ClearShowOnlyComponents(InComponent: PrimitiveComponent): void;
+	ClearShowOnlyComponents(): void;
 	ClearHiddenComponents(): void;
 	static C(Other: UObject | any): SceneCaptureComponent;
 }
@@ -736,7 +2195,9 @@ declare class PlanarReflectionComponent extends SceneCaptureComponent {
 	DistanceFromPlaneFadeoutEnd: number;
 	AngleFromPlaneFadeStart: number;
 	AngleFromPlaneFadeEnd: number;
+	bShowPreviewPlane: boolean;
 	bRenderSceneTwoSided: boolean;
+	CaptureMaterial: Material;
 	static Load(ResourceName: string): PlanarReflectionComponent;
 	static Find(Outer: UObject, ResourceName: string): PlanarReflectionComponent;
 	static GetDefaultObject(): PlanarReflectionComponent;
@@ -934,6 +2395,7 @@ declare class ProjectileMovementComponent extends MovementComponent {
 	InitialSpeed: number;
 	MaxSpeed: number;
 	bRotationFollowsVelocity: boolean;
+	bRotationRemainsVertical: boolean;
 	bShouldBounce: boolean;
 	bInitialVelocityInLocalSpace: boolean;
 	bForceSubStepping: boolean;
@@ -1021,13 +2483,18 @@ declare class RadialForceActor extends RigidBodyBase {
 declare class RectLightComponent extends LocalLightComponent { 
 	SourceWidth: number;
 	SourceHeight: number;
+	BarnDoorAngle: number;
+	BarnDoorLength: number;
 	SourceTexture: Texture;
 	static Load(ResourceName: string): RectLightComponent;
 	static Find(Outer: UObject, ResourceName: string): RectLightComponent;
 	static GetDefaultObject(): RectLightComponent;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RectLightComponent;
 	SetSourceWidth(bNewValue: number): void;
+	SetSourceTexture(bNewValue: Texture): void;
 	SetSourceHeight(NewValue: number): void;
+	SetBarnDoorLength(NewValue: number): void;
+	SetBarnDoorAngle(NewValue: number): void;
 	static C(Other: UObject | any): RectLightComponent;
 }
 
@@ -1064,6 +2531,7 @@ declare class RendererSettings extends DeveloperSettings {
 	MaxMobileCascades: number;
 	MobileMSAASampleCount: EMobileMSAASampleCount;
 	bMobileUseLegacyShadingModel: boolean;
+	bMobileUseHWsRGBEncoding: boolean;
 	bMobileAllowDitheredLODTransition: boolean;
 	bMobileAllowSoftwareOcclusionCulling: boolean;
 	bDiscardUnusedQualityLevels: boolean;
@@ -1074,6 +2542,13 @@ declare class RendererSettings extends DeveloperSettings {
 	bPrecomputedVisibilityWarning: boolean;
 	bTextureStreaming: boolean;
 	bUseDXT5NormalMaps: boolean;
+	bVirtualTextures: boolean;
+	bVirtualTexturedLightmaps: boolean;
+	VirtualTextureTileSize: any;
+	VirtualTextureTileBorderSize: any;
+	VirtualTextureFeedbackFactor: any;
+	bVirtualTextureEnableCompressZlib: boolean;
+	bVirtualTextureEnableCompressCrunch: boolean;
 	bClearCoatEnableSecondNormal: boolean;
 	ReflectionCaptureResolution: number;
 	ReflectionEnvironmentLightmapMixBasedOnRoughness: boolean;
@@ -1092,7 +2567,6 @@ declare class RendererSettings extends DeveloperSettings {
 	CustomDepthStencil: ECustomDepthStencil;
 	bCustomDepthTaaJitter: boolean;
 	bEnableAlphaChannelInPostProcessing: EAlphaChannelMode;
-	bUseNewAlgorithm: boolean;
 	bDefaultFeatureBloom: boolean;
 	bDefaultFeatureAmbientOcclusion: boolean;
 	bDefaultFeatureAmbientOcclusionStaticFraction: boolean;
@@ -1100,6 +2574,7 @@ declare class RendererSettings extends DeveloperSettings {
 	DefaultFeatureAutoExposure: EAutoExposureMethodUI;
 	bExtendDefaultLuminanceRangeInAutoExposureSettings: boolean;
 	bUsePreExposure: boolean;
+	bEnablePreExposureOnlyInTheEditor: boolean;
 	bDefaultFeatureMotionBlur: boolean;
 	bDefaultFeatureLensFlare: boolean;
 	bTemporalUpsampling: boolean;
@@ -1109,7 +2584,6 @@ declare class RendererSettings extends DeveloperSettings {
 	bRenderUnbuiltPreviewShadowsInGame: boolean;
 	bStencilForLODDither: boolean;
 	EarlyZPass: EEarlyZPass;
-	bEarlyZPassMovable: boolean;
 	bEarlyZPassOnlyMaterialMasking: boolean;
 	bDBuffer: boolean;
 	ClearSceneMethod: EClearSceneOptions;
@@ -1126,10 +2600,10 @@ declare class RendererSettings extends DeveloperSettings {
 	bMultiView: boolean;
 	bMobileMultiView: boolean;
 	bMobileMultiViewDirect: boolean;
-	bMonoscopicFarField: boolean;
 	bRoundRobinOcclusion: boolean;
 	bODSCapture: boolean;
 	WireframeCullThreshold: number;
+	bEnableRayTracing: boolean;
 	bSupportStationarySkylight: boolean;
 	bSupportLowQualityLightmaps: boolean;
 	bSupportPointLightWholeSceneShadows: boolean;
@@ -1141,6 +2615,7 @@ declare class RendererSettings extends DeveloperSettings {
 	bMobileAllowMovableDirectionalLights: boolean;
 	MobileNumDynamicPointLights: any;
 	bMobileDynamicPointLightsUseStaticBranch: boolean;
+	bMobileAllowMovableSpotlights: boolean;
 	SkinCacheSceneMemoryLimitInMB: number;
 	bGPUSkinLimit2BoneInfluences: boolean;
 	bSupportDepthOnlyIndexBuffers: boolean;
@@ -1182,6 +2657,32 @@ declare class RotatingMovementComponent extends MovementComponent {
 	static C(Other: UObject | any): RotatingMovementComponent;
 }
 
+declare class RuntimeOptionsBase extends UObject { 
+	static Load(ResourceName: string): RuntimeOptionsBase;
+	static Find(Outer: UObject, ResourceName: string): RuntimeOptionsBase;
+	static GetDefaultObject(): RuntimeOptionsBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RuntimeOptionsBase;
+	static C(Other: UObject | any): RuntimeOptionsBase;
+}
+
+declare class RuntimeVirtualTextureComponent extends SceneComponent { 
+	VirtualTexture: RuntimeVirtualTexture;
+	BoundsSourceActor: Actor;
+	static Load(ResourceName: string): RuntimeVirtualTextureComponent;
+	static Find(Outer: UObject, ResourceName: string): RuntimeVirtualTextureComponent;
+	static GetDefaultObject(): RuntimeVirtualTextureComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RuntimeVirtualTextureComponent;
+	static C(Other: UObject | any): RuntimeVirtualTextureComponent;
+}
+
+declare class RuntimeVirtualTextureVolume extends Actor { 
+	VirtualTextureComponent: RuntimeVirtualTextureComponent;
+	Box: BoxComponent;
+	static GetDefaultObject(): RuntimeVirtualTextureVolume;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RuntimeVirtualTextureVolume;
+	static C(Other: UObject | any): RuntimeVirtualTextureVolume;
+}
+
 declare class RVOAvoidanceInterface extends Interface { 
 	static Load(ResourceName: string): RVOAvoidanceInterface;
 	static Find(Outer: UObject, ResourceName: string): RVOAvoidanceInterface;
@@ -1198,8 +2699,6 @@ declare class Scene extends UObject {
 	static C(Other: UObject | any): Scene;
 }
 
-declare type ESceneCaptureSource = 'SCS_SceneColorHDR' | 'SCS_SceneColorHDRNoAlpha' | 'SCS_FinalColorLDR' | 'SCS_SceneColorSceneDepth' | 'SCS_SceneDepth' | 'SCS_DeviceDepth' | 'SCS_Normal' | 'SCS_BaseColor' | 'SCS_MAX';
-declare var ESceneCaptureSource : { SCS_SceneColorHDR:'SCS_SceneColorHDR',SCS_SceneColorHDRNoAlpha:'SCS_SceneColorHDRNoAlpha',SCS_FinalColorLDR:'SCS_FinalColorLDR',SCS_SceneColorSceneDepth:'SCS_SceneColorSceneDepth',SCS_SceneDepth:'SCS_SceneDepth',SCS_DeviceDepth:'SCS_DeviceDepth',SCS_Normal:'SCS_Normal',SCS_BaseColor:'SCS_BaseColor',SCS_MAX:'SCS_MAX', };
 declare type ESceneCaptureCompositeMode = 'SCCM_Overwrite' | 'SCCM_Additive' | 'SCCM_Composite' | 'SCCM_MAX';
 declare var ESceneCaptureCompositeMode : { SCCM_Overwrite:'SCCM_Overwrite',SCCM_Additive:'SCCM_Additive',SCCM_Composite:'SCCM_Composite',SCCM_MAX:'SCCM_MAX', };
 declare class SceneCaptureComponent2D extends SceneCaptureComponent { 
@@ -1207,16 +2706,18 @@ declare class SceneCaptureComponent2D extends SceneCaptureComponent {
 	FOVAngle: number;
 	OrthoWidth: number;
 	TextureTarget: TextureRenderTarget2D;
-	CaptureSource: ESceneCaptureSource;
 	CompositeMode: ESceneCaptureCompositeMode;
 	PostProcessSettings: PostProcessSettings;
 	PostProcessBlendWeight: number;
+	bOverride_CustomNearClippingPlane: boolean;
+	CustomNearClippingPlane: number;
 	bUseCustomProjectionMatrix: boolean;
 	CustomProjectionMatrix: Matrix;
 	bEnableClipPlane: boolean;
 	ClipPlaneBase: Vector;
 	ClipPlaneNormal: Vector;
 	bCameraCutThisFrame: boolean;
+	bConsiderUnrenderedOpaquePixelAsFullyTranslucent: boolean;
 	static Load(ResourceName: string): SceneCaptureComponent2D;
 	static Find(Outer: UObject, ResourceName: string): SceneCaptureComponent2D;
 	static GetDefaultObject(): SceneCaptureComponent2D;
@@ -1227,7 +2728,6 @@ declare class SceneCaptureComponent2D extends SceneCaptureComponent {
 
 declare class SceneCapture2D extends SceneCapture { 
 	CaptureComponent2D: SceneCaptureComponent2D;
-	DrawFrustum: DrawFrustumComponent;
 	static GetDefaultObject(): SceneCapture2D;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneCapture2D;
 	OnInterpToggle(bEnable: boolean): void;
@@ -1249,6 +2749,7 @@ declare class TextureRenderTargetCube extends TextureRenderTarget {
 
 declare class SceneCaptureComponentCube extends SceneCaptureComponent { 
 	TextureTarget: TextureRenderTargetCube;
+	bCaptureRotation: boolean;
 	TextureTargetLeft: TextureRenderTargetCube;
 	TextureTargetRight: TextureRenderTargetCube;
 	TextureTargetODS: TextureRenderTarget2D;
@@ -1263,7 +2764,6 @@ declare class SceneCaptureComponentCube extends SceneCaptureComponent {
 
 declare class SceneCaptureCube extends SceneCapture { 
 	CaptureComponentCube: SceneCaptureComponentCube;
-	DrawFrustum: DrawFrustumComponent;
 	static GetDefaultObject(): SceneCaptureCube;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneCaptureCube;
 	OnInterpToggle(bEnable: boolean): void;
@@ -1281,52 +2781,13 @@ declare class ShadowMapTexture2D extends Texture2D {
 	static C(Other: UObject | any): ShadowMapTexture2D;
 }
 
-declare type ESkyLightSourceType = 'SLS_CapturedScene' | 'SLS_SpecifiedCubemap' | 'SLS_MAX';
-declare var ESkyLightSourceType : { SLS_CapturedScene:'SLS_CapturedScene',SLS_SpecifiedCubemap:'SLS_SpecifiedCubemap',SLS_MAX:'SLS_MAX', };
-declare type EOcclusionCombineMode = 'OCM_Minimum' | 'OCM_Multiply' | 'OCM_MAX';
-declare var EOcclusionCombineMode : { OCM_Minimum:'OCM_Minimum',OCM_Multiply:'OCM_Multiply',OCM_MAX:'OCM_MAX', };
-declare class SkyLightComponent extends LightComponentBase { 
-	SourceType: ESkyLightSourceType;
-	Cubemap: TextureCube;
-	SourceCubemapAngle: number;
-	CubemapResolution: number;
-	SkyDistanceThreshold: number;
-	bCaptureEmissiveOnly: boolean;
-	bLowerHemisphereIsBlack: boolean;
-	LowerHemisphereColor: LinearColor;
-	OcclusionMaxDistance: number;
-	Contrast: number;
-	OcclusionExponent: number;
-	MinOcclusion: number;
-	OcclusionTint: Color;
-	OcclusionCombineMode: EOcclusionCombineMode;
-	BlendDestinationCubemap: TextureCube;
-	static Load(ResourceName: string): SkyLightComponent;
-	static Find(Outer: UObject, ResourceName: string): SkyLightComponent;
-	static GetDefaultObject(): SkyLightComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkyLightComponent;
-	SetVolumetricScatteringIntensity(NewIntensity: number): void;
-	SetOcclusionTint(InTint: Color): void;
-	SetOcclusionExponent(InOcclusionExponent: number): void;
-	SetOcclusionContrast(InOcclusionContrast: number): void;
-	SetMinOcclusion(InMinOcclusion: number): void;
-	SetLowerHemisphereColor(InLowerHemisphereColor: LinearColor): void;
-	SetLightColor(NewLightColor: LinearColor): void;
-	SetIntensity(NewIntensity: number): void;
-	SetIndirectLightingIntensity(NewIntensity: number): void;
-	SetCubemapBlend(SourceCubemap: TextureCube,DestinationCubemap: TextureCube,InBlendFraction: number): void;
-	SetCubemap(NewCubemap: TextureCube): void;
-	RecaptureSky(): void;
-	static C(Other: UObject | any): SkyLightComponent;
-}
-
-declare class SkyLight extends Info { 
-	LightComponent: SkyLightComponent;
-	bEnabled: boolean;
-	static GetDefaultObject(): SkyLight;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkyLight;
-	OnRep_bEnabled(): void;
-	static C(Other: UObject | any): SkyLight;
+declare class SkeletalMeshSimplificationSettings extends DeveloperSettings { 
+	SkeletalMeshReductionModuleName: string;
+	static Load(ResourceName: string): SkeletalMeshSimplificationSettings;
+	static Find(Outer: UObject, ResourceName: string): SkeletalMeshSimplificationSettings;
+	static GetDefaultObject(): SkeletalMeshSimplificationSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMeshSimplificationSettings;
+	static C(Other: UObject | any): SkeletalMeshSimplificationSettings;
 }
 
 declare class SlateTextureAtlasInterface extends Interface { 
@@ -1448,6 +2909,8 @@ declare class SoundNodeDistanceCrossFade extends SoundNode {
 
 declare class SoundNodeDoppler extends SoundNode { 
 	DopplerIntensity: number;
+	bUseSmoothing: boolean;
+	SmoothingInterpSpeed: number;
 	static Load(ResourceName: string): SoundNodeDoppler;
 	static Find(Outer: UObject, ResourceName: string): SoundNodeDoppler;
 	static GetDefaultObject(): SoundNodeDoppler;
@@ -1728,11 +3191,13 @@ declare class StereoLayerComponent extends SceneComponent {
 	SetTexture(InTexture: Texture): void;
 	SetQuadSize(InQuadSize: Vector2D): void;
 	SetPriority(InPriority: number): void;
+	SetLeftTexture(InTexture: Texture): void;
 	MarkTextureForUpdate(): void;
 	GetUVRect(): Box2D;
 	GetTexture(): Texture;
 	GetQuadSize(): Vector2D;
 	GetPriority(): number;
+	GetLeftTexture(): Texture;
 	static C(Other: UObject | any): StereoLayerComponent;
 }
 
@@ -1742,7 +3207,7 @@ declare class StereoLayerFunctionLibrary extends BlueprintFunctionLibrary {
 	static GetDefaultObject(): StereoLayerFunctionLibrary;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StereoLayerFunctionLibrary;
 	static ShowSplashScreen(): void;
-	static SetSplashScreen(Texture: Texture,Scale: Vector2D,Offset: Vector2D,bShowLoadingMovie: boolean,bShowOnSet: boolean): void;
+	static SetSplashScreen(Texture: Texture,Scale: Vector2D,Offset: Vector,bShowLoadingMovie: boolean,bShowOnSet: boolean): void;
 	static HideSplashScreen(): void;
 	static EnableAutoLoadingSplashScreen(InAutoShowEnabled: boolean): void;
 	static C(Other: UObject | any): StereoLayerFunctionLibrary;
@@ -1756,6 +3221,18 @@ declare class StringTable extends UObject {
 	static C(Other: UObject | any): StringTable;
 }
 
+declare class SubsystemBlueprintLibrary extends BlueprintFunctionLibrary { 
+	static Load(ResourceName: string): SubsystemBlueprintLibrary;
+	static Find(Outer: UObject, ResourceName: string): SubsystemBlueprintLibrary;
+	static GetDefaultObject(): SubsystemBlueprintLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubsystemBlueprintLibrary;
+	static GetLocalPlayerSubSystemFromPlayerController(PlayerController: PlayerController,Class: UnrealEngineClass): LocalPlayerSubsystem;
+	static GetLocalPlayerSubsystem(ContextObject: UObject,Class: UnrealEngineClass): LocalPlayerSubsystem;
+	static GetGameInstanceSubsystem(ContextObject: UObject,Class: UnrealEngineClass): GameInstanceSubsystem;
+	static GetEngineSubsystem(Class: UnrealEngineClass): EngineSubsystem;
+	static C(Other: UObject | any): SubsystemBlueprintLibrary;
+}
+
 declare class SystemTimeTimecodeProvider extends TimecodeProvider { 
 	FrameRate: FrameRate;
 	static Load(ResourceName: string): SystemTimeTimecodeProvider;
@@ -1944,6 +3421,21 @@ declare class UserDefinedEnum extends Enum {
 	static C(Other: UObject | any): UserDefinedEnum;
 }
 
+declare type EUserDefinedStructureStatus = 'UDSS_UpToDate' | 'UDSS_Dirty' | 'UDSS_Error' | 'UDSS_Duplicate' | 'UDSS_MAX';
+declare var EUserDefinedStructureStatus : { UDSS_UpToDate:'UDSS_UpToDate',UDSS_Dirty:'UDSS_Dirty',UDSS_Error:'UDSS_Error',UDSS_Duplicate:'UDSS_Duplicate',UDSS_MAX:'UDSS_MAX', };
+declare class UserDefinedStruct extends ScriptStruct { 
+	PrimaryStruct: any;
+	ErrorMessage: string;
+	EditorData: UObject;
+	Status: EUserDefinedStructureStatus;
+	Guid: Guid;
+	static Load(ResourceName: string): UserDefinedStruct;
+	static Find(Outer: UObject, ResourceName: string): UserDefinedStruct;
+	static GetDefaultObject(): UserDefinedStruct;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserDefinedStruct;
+	static C(Other: UObject | any): UserDefinedStruct;
+}
+
 declare type ERenderFocusRule = 'Always' | 'NonPointer' | 'NavigationOnly' | 'Never' | 'ERenderFocusRule_MAX';
 declare var ERenderFocusRule : { Always:'Always',NonPointer:'NonPointer',NavigationOnly:'NavigationOnly',Never:'Never',ERenderFocusRule_MAX:'ERenderFocusRule_MAX', };
 declare type EUIScalingRule = 'ShortestSide' | 'LongestSide' | 'Horizontal' | 'Vertical' | 'Custom' | 'EUIScalingRule_MAX';
@@ -1981,6 +3473,8 @@ declare class VectorFieldStatic extends VectorField {
 	SizeX: number;
 	SizeY: number;
 	SizeZ: number;
+	bAllowCPUAccess: boolean;
+	CPUData: Vector4[];
 	SourceFilePath: string;
 	AssetImportData: AssetImportData;
 	static Load(ResourceName: string): VectorFieldStatic;
@@ -2032,36 +3526,7 @@ declare class VectorFieldVolume extends Actor {
 	static C(Other: UObject | any): VectorFieldVolume;
 }
 
-declare class VirtualTextureLayer { 
-	Format: ETextureSourceFormat;
-	bCompressed: boolean;
-	bHasAlpha: boolean;
-	CompressionSettings: TextureCompressionSettings;
-	clone() : VirtualTextureLayer;
-	static C(Other: UObject | any): VirtualTextureLayer;
-}
-
-declare type PageTableFormat = 'PTF_16' | 'PTF_32' | 'PTF_MAX';
-declare var PageTableFormat : { PTF_16:'PTF_16',PTF_32:'PTF_32',PTF_MAX:'PTF_MAX', };
-declare class VirtualTextureSpace extends UObject { 
-	Layers: VirtualTextureLayer[];
-	TileSize: number;
-	BorderWidth: number;
-	Size: number;
-	Dimensions: number;
-	Format: PageTableFormat;
-	PoolSize: number;
-	static Load(ResourceName: string): VirtualTextureSpace;
-	static Find(Outer: UObject, ResourceName: string): VirtualTextureSpace;
-	static GetDefaultObject(): VirtualTextureSpace;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VirtualTextureSpace;
-	static C(Other: UObject | any): VirtualTextureSpace;
-}
-
 declare class VirtualTexture extends UObject { 
-	Layers: Texture[];
-	Space: VirtualTextureSpace;
-	Rebuild: boolean;
 	static Load(ResourceName: string): VirtualTexture;
 	static Find(Outer: UObject, ResourceName: string): VirtualTexture;
 	static GetDefaultObject(): VirtualTexture;
@@ -2070,7 +3535,6 @@ declare class VirtualTexture extends UObject {
 }
 
 declare class LightMapVirtualTexture extends VirtualTexture { 
-	LayerFlags: number;
 	static Load(ResourceName: string): LightMapVirtualTexture;
 	static Find(Outer: UObject, ResourceName: string): LightMapVirtualTexture;
 	static GetDefaultObject(): LightMapVirtualTexture;
@@ -2078,12 +3542,31 @@ declare class LightMapVirtualTexture extends VirtualTexture {
 	static C(Other: UObject | any): LightMapVirtualTexture;
 }
 
-declare class LightMapVirtualTextureSpace extends VirtualTextureSpace { 
-	static Load(ResourceName: string): LightMapVirtualTextureSpace;
-	static Find(Outer: UObject, ResourceName: string): LightMapVirtualTextureSpace;
-	static GetDefaultObject(): LightMapVirtualTextureSpace;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightMapVirtualTextureSpace;
-	static C(Other: UObject | any): LightMapVirtualTextureSpace;
+declare class LightMapVirtualTexture2D extends Texture2D { 
+	TypeToLayer: any[];
+	static Load(ResourceName: string): LightMapVirtualTexture2D;
+	static Find(Outer: UObject, ResourceName: string): LightMapVirtualTexture2D;
+	static GetDefaultObject(): LightMapVirtualTexture2D;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightMapVirtualTexture2D;
+	static C(Other: UObject | any): LightMapVirtualTexture2D;
+}
+
+declare class VirtualTextureSpacePoolConfig { 
+	SizeInMegabyte: number;
+	TileSize: number;
+	Format: EPixelFormat;
+	clone() : VirtualTextureSpacePoolConfig;
+	static C(Other: UObject | any): VirtualTextureSpacePoolConfig;
+}
+
+declare class VirtualTexturePoolConfig extends UObject { 
+	DefaultSizeInMegabyte: number;
+	Pools: VirtualTextureSpacePoolConfig[];
+	static Load(ResourceName: string): VirtualTexturePoolConfig;
+	static Find(Outer: UObject, ResourceName: string): VirtualTexturePoolConfig;
+	static GetDefaultObject(): VirtualTexturePoolConfig;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VirtualTexturePoolConfig;
+	static C(Other: UObject | any): VirtualTexturePoolConfig;
 }
 
 declare class VisualLoggerAutomationTests extends UObject { 
@@ -2225,6 +3708,72 @@ declare class MoviePlayerSettings extends UObject {
 	static C(Other: UObject | any): MoviePlayerSettings;
 }
 
+declare class SHAHashData { 
+	Hash: number;
+	clone() : SHAHashData;
+	static C(Other: UObject | any): SHAHashData;
+}
+
+declare class ChunkPartData { 
+	Guid: Guid;
+	Offset: any;
+	Size: any;
+	clone() : ChunkPartData;
+	static C(Other: UObject | any): ChunkPartData;
+}
+
+declare class FileManifestData { 
+	Filename: string;
+	FileHash: SHAHashData;
+	FileChunkParts: ChunkPartData[];
+	InstallTags: string[];
+	bIsUnixExecutable: boolean;
+	SymlinkTarget: string;
+	bIsReadOnly: boolean;
+	bIsCompressed: boolean;
+	clone() : FileManifestData;
+	static C(Other: UObject | any): FileManifestData;
+}
+
+declare class ChunkInfoData { 
+	Guid: Guid;
+	Hash: any;
+	ShaHash: SHAHashData;
+	FileSize: any;
+	GroupNumber: number;
+	clone() : ChunkInfoData;
+	static C(Other: UObject | any): ChunkInfoData;
+}
+
+declare class CustomFieldData { 
+	Key: string;
+	Value: string;
+	clone() : CustomFieldData;
+	static C(Other: UObject | any): CustomFieldData;
+}
+
+declare class BuildPatchManifest extends UObject { 
+	ManifestFileVersion: number;
+	bIsFileData: boolean;
+	AppID: any;
+	AppName: string;
+	BuildVersion: string;
+	LaunchExe: string;
+	LaunchCommand: string;
+	PrereqIds: any;
+	PrereqName: string;
+	PrereqPath: string;
+	PrereqArgs: string;
+	FileManifestList: FileManifestData[];
+	ChunkList: ChunkInfoData[];
+	CustomFields: CustomFieldData[];
+	static Load(ResourceName: string): BuildPatchManifest;
+	static Find(Outer: UObject, ResourceName: string): BuildPatchManifest;
+	static GetDefaultObject(): BuildPatchManifest;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BuildPatchManifest;
+	static C(Other: UObject | any): BuildPatchManifest;
+}
+
 declare class SoundFactory extends Factory { 
 	bAutoCreateCue: boolean;
 	bIncludeAttenuationNode: boolean;
@@ -2269,6 +3818,7 @@ declare class MacTargetSettings extends UObject {
 	TargetedRHIs: string[];
 	MaxShaderLanguageVersion: number;
 	UseFastIntrinsics: boolean;
+	ForceFloats: boolean;
 	EnableMathOptimisations: boolean;
 	AudioSampleRate: number;
 	AudioCallbackBufferFrameSize: number;
@@ -2572,6 +4122,7 @@ declare class AnimationBlueprintLibrary extends BlueprintFunctionLibrary {
 	static FinalizeBoneAnimation(AnimationSequence: AnimSequence): void;
 	static DoesCurveExist(AnimationSequence: AnimSequence,CurveName: string,CurveType: ERawCurveTrackTypes): boolean;
 	static DoesBoneNameExist(AnimationSequence: AnimSequence,BoneName: string,bExists?: boolean): {bExists: boolean};
+	static CopyAnimNotifiesFromSequence(SrcAnimSequence: AnimSequence,DestAnimSequence: AnimSequence): void;
 	static ContainsMetaDataOfClass(AnimationSequence: AnimSequence,MetaDataClass: UnrealEngineClass): boolean;
 	static AddVirtualBone(AnimationSequence: AnimSequence,SourceBoneName: string,TargetBoneName: string,VirtualBoneName?: string): {VirtualBoneName: string};
 	static AddVectorCurveKeys(AnimationSequence: AnimSequence,CurveName: string,Times: number[],Vectors: Vector[]): void;
@@ -2585,8 +4136,10 @@ declare class AnimationBlueprintLibrary extends BlueprintFunctionLibrary {
 	static AddCurve(AnimationSequence: AnimSequence,CurveName: string,CurveType: ERawCurveTrackTypes,bMetaDataCurve: boolean): void;
 	static AddAnimationSyncMarker(AnimationSequence: AnimSequence,MarkerName: string,Time: number,NotifyTrackName: string): void;
 	static AddAnimationNotifyTrack(AnimationSequence: AnimSequence,NotifyTrackName: string,TrackColor: LinearColor): void;
+	static AddAnimationNotifyStateEventObject(AnimationSequence: AnimSequence,StartTime: number,Duration: number,NotifyState: AnimNotifyState,NotifyTrackName: string): void;
+	static AddAnimationNotifyStateEvent(AnimationSequence: AnimSequence,NotifyTrackName: string,StartTime: number,Duration: number,NotifyStateClass: UnrealEngineClass): AnimNotifyState;
 	static AddAnimationNotifyEventObject(AnimationSequence: AnimSequence,StartTime: number,Notify: AnimNotify,NotifyTrackName: string): void;
-	static AddAnimationNotifyEvent(AnimationSequence: AnimSequence,NotifyTrackName: string,StartTime: number,Duration: number,NotifyClass: UnrealEngineClass): AnimNotify;
+	static AddAnimationNotifyEvent(AnimationSequence: AnimSequence,NotifyTrackName: string,StartTime: number,NotifyClass: UnrealEngineClass): AnimNotify;
 	static C(Other: UObject | any): AnimationBlueprintLibrary;
 }
 
@@ -2612,6 +4165,1878 @@ declare class AnimationModifiersAssetUserData extends AssetUserData {
 	static C(Other: UObject | any): AnimationModifiersAssetUserData;
 }
 
+declare class GameplayDebuggerNetPack { 
+	clone() : GameplayDebuggerNetPack;
+	static C(Other: UObject | any): GameplayDebuggerNetPack;
+}
+
+declare class GameplayDebuggerDebugActor { 
+	Actor: Actor;
+	ActorName: string;
+	SyncCounter: number;
+	clone() : GameplayDebuggerDebugActor;
+	static C(Other: UObject | any): GameplayDebuggerDebugActor;
+}
+
+declare class GameplayDebuggerRenderingComponent extends PrimitiveComponent { 
+	static Load(ResourceName: string): GameplayDebuggerRenderingComponent;
+	static Find(Outer: UObject, ResourceName: string): GameplayDebuggerRenderingComponent;
+	static GetDefaultObject(): GameplayDebuggerRenderingComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayDebuggerRenderingComponent;
+	static C(Other: UObject | any): GameplayDebuggerRenderingComponent;
+}
+
+declare class GameplayDebuggerCategoryReplicator extends Actor { 
+	OwnerPC: PlayerController;
+	bIsEnabled: boolean;
+	ReplicatedData: GameplayDebuggerNetPack;
+	DebugActor: GameplayDebuggerDebugActor;
+	RenderingComp: GameplayDebuggerRenderingComponent;
+	static GetDefaultObject(): GameplayDebuggerCategoryReplicator;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayDebuggerCategoryReplicator;
+	ServerSetEnabled(bEnable: boolean): void;
+	ServerSetDebugActor(Actor: Actor,bSelectInEditor: boolean): void;
+	ServerSetCategoryEnabled(CategoryId: number,bEnable: boolean): void;
+	ServerSendExtensionInputEvent(ExtensionId: number,HandlerId: number): void;
+	ServerSendCategoryInputEvent(CategoryId: number,HandlerId: number): void;
+	static C(Other: UObject | any): GameplayDebuggerCategoryReplicator;
+}
+
+declare type EGameplayDebuggerOverrideMode = 'Enable' | 'Disable' | 'UseDefault' | 'EGameplayDebuggerOverrideMode_MAX';
+declare var EGameplayDebuggerOverrideMode : { Enable:'Enable',Disable:'Disable',UseDefault:'UseDefault',EGameplayDebuggerOverrideMode_MAX:'EGameplayDebuggerOverrideMode_MAX', };
+declare class GameplayDebuggerInputConfig { 
+	ConfigName: string;
+	Key: Key;
+	bModShift: boolean;
+	bModCtrl: boolean;
+	bModAlt: boolean;
+	bModCmd: boolean;
+	clone() : GameplayDebuggerInputConfig;
+	static C(Other: UObject | any): GameplayDebuggerInputConfig;
+}
+
+declare class GameplayDebuggerCategoryConfig { 
+	CategoryName: string;
+	SlotIdx: number;
+	ActiveInGame: EGameplayDebuggerOverrideMode;
+	ActiveInSimulate: EGameplayDebuggerOverrideMode;
+	Hidden: EGameplayDebuggerOverrideMode;
+	bOverrideSlotIdx: boolean;
+	InputHandlers: GameplayDebuggerInputConfig[];
+	clone() : GameplayDebuggerCategoryConfig;
+	static C(Other: UObject | any): GameplayDebuggerCategoryConfig;
+}
+
+declare class GameplayDebuggerExtensionConfig { 
+	ExtensionName: string;
+	UseExtension: EGameplayDebuggerOverrideMode;
+	InputHandlers: GameplayDebuggerInputConfig[];
+	clone() : GameplayDebuggerExtensionConfig;
+	static C(Other: UObject | any): GameplayDebuggerExtensionConfig;
+}
+
+declare class GameplayDebuggerConfig extends UObject { 
+	ActivationKey: Key;
+	CategoryRowNextKey: Key;
+	CategoryRowPrevKey: Key;
+	CategorySlot0: Key;
+	CategorySlot1: Key;
+	CategorySlot2: Key;
+	CategorySlot3: Key;
+	CategorySlot4: Key;
+	CategorySlot5: Key;
+	CategorySlot6: Key;
+	CategorySlot7: Key;
+	CategorySlot8: Key;
+	CategorySlot9: Key;
+	DebugCanvasPaddingLeft: number;
+	DebugCanvasPaddingRight: number;
+	DebugCanvasPaddingTop: number;
+	DebugCanvasPaddingBottom: number;
+	Categories: GameplayDebuggerCategoryConfig[];
+	Extensions: GameplayDebuggerExtensionConfig[];
+	static Load(ResourceName: string): GameplayDebuggerConfig;
+	static Find(Outer: UObject, ResourceName: string): GameplayDebuggerConfig;
+	static GetDefaultObject(): GameplayDebuggerConfig;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayDebuggerConfig;
+	static C(Other: UObject | any): GameplayDebuggerConfig;
+}
+
+declare class GameplayDebuggerPlayerData { 
+	Controller: GameplayDebuggerLocalController;
+	InputComponent: InputComponent;
+	Replicator: GameplayDebuggerCategoryReplicator;
+	clone() : GameplayDebuggerPlayerData;
+	static C(Other: UObject | any): GameplayDebuggerPlayerData;
+}
+
+declare class GameplayDebuggerPlayerManager extends Actor { 
+	PlayerData: GameplayDebuggerPlayerData[];
+	PendingRegistrations: GameplayDebuggerCategoryReplicator[];
+	static GetDefaultObject(): GameplayDebuggerPlayerManager;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayDebuggerPlayerManager;
+	static C(Other: UObject | any): GameplayDebuggerPlayerManager;
+}
+
+declare class GameplayDebuggerLocalController extends UObject { 
+	CachedReplicator: GameplayDebuggerCategoryReplicator;
+	CachedPlayerManager: GameplayDebuggerPlayerManager;
+	DebugActorCandidate: Actor;
+	static Load(ResourceName: string): GameplayDebuggerLocalController;
+	static Find(Outer: UObject, ResourceName: string): GameplayDebuggerLocalController;
+	static GetDefaultObject(): GameplayDebuggerLocalController;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayDebuggerLocalController;
+	static C(Other: UObject | any): GameplayDebuggerLocalController;
+}
+
+declare class GameplayTask_ClaimResource extends GameplayTask { 
+	static Load(ResourceName: string): GameplayTask_ClaimResource;
+	static Find(Outer: UObject, ResourceName: string): GameplayTask_ClaimResource;
+	static GetDefaultObject(): GameplayTask_ClaimResource;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTask_ClaimResource;
+	static C(Other: UObject | any): GameplayTask_ClaimResource;
+}
+
+declare class GameplayTask_SpawnActor extends GameplayTask { 
+	Success: UnrealEngineMulticastDelegate<(SpawnedActor: Actor) => void>;
+	DidNotSpawn: UnrealEngineMulticastDelegate<(SpawnedActor: Actor) => void>;
+	ClassToSpawn: UnrealEngineClass;
+	static Load(ResourceName: string): GameplayTask_SpawnActor;
+	static Find(Outer: UObject, ResourceName: string): GameplayTask_SpawnActor;
+	static GetDefaultObject(): GameplayTask_SpawnActor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTask_SpawnActor;
+	FinishSpawningActor(WorldContextObject: UObject,SpawnedActor: Actor): void;
+	BeginSpawningActor(WorldContextObject: UObject,SpawnedActor?: Actor): {SpawnedActor: Actor, $: boolean};
+	static C(Other: UObject | any): GameplayTask_SpawnActor;
+}
+
+declare class GameplayTask_TimeLimitedExecution extends GameplayTask { 
+	OnFinished: UnrealEngineMulticastDelegate<() => void>;
+	OnTimeExpired: UnrealEngineMulticastDelegate<() => void>;
+	static Load(ResourceName: string): GameplayTask_TimeLimitedExecution;
+	static Find(Outer: UObject, ResourceName: string): GameplayTask_TimeLimitedExecution;
+	static GetDefaultObject(): GameplayTask_TimeLimitedExecution;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTask_TimeLimitedExecution;
+	static C(Other: UObject | any): GameplayTask_TimeLimitedExecution;
+}
+
+declare class GameplayTask_WaitDelay extends GameplayTask { 
+	OnFinish: UnrealEngineMulticastDelegate<() => void>;
+	static Load(ResourceName: string): GameplayTask_WaitDelay;
+	static Find(Outer: UObject, ResourceName: string): GameplayTask_WaitDelay;
+	static GetDefaultObject(): GameplayTask_WaitDelay;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTask_WaitDelay;
+	static C(Other: UObject | any): GameplayTask_WaitDelay;
+}
+
+declare class GameplayTaskOwnerInterface extends Interface { 
+	static Load(ResourceName: string): GameplayTaskOwnerInterface;
+	static Find(Outer: UObject, ResourceName: string): GameplayTaskOwnerInterface;
+	static GetDefaultObject(): GameplayTaskOwnerInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTaskOwnerInterface;
+	static C(Other: UObject | any): GameplayTaskOwnerInterface;
+}
+
+declare class AIBlueprintHelperLibrary extends BlueprintFunctionLibrary { 
+	static Load(ResourceName: string): AIBlueprintHelperLibrary;
+	static Find(Outer: UObject, ResourceName: string): AIBlueprintHelperLibrary;
+	static GetDefaultObject(): AIBlueprintHelperLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIBlueprintHelperLibrary;
+	static UnlockAIResourcesWithAnimation(AnimInstance: AnimInstance,bUnlockMovement: boolean,UnlockAILogic: boolean): void;
+	static SpawnAIFromClass(WorldContextObject: UObject,PawnClass: UnrealEngineClass,BehaviorTree: BehaviorTree,Location: Vector,Rotation: Rotator,bNoCollisionFail: boolean): Pawn;
+	static SimpleMoveToLocation(Controller: Controller,Goal: Vector): void;
+	static SimpleMoveToActor(Controller: Controller,Goal: Actor): void;
+	static SendAIMessage(Target: Pawn,Message: string,MessageSource: UObject,bSuccess: boolean): void;
+	static LockAIResourcesWithAnimation(AnimInstance: AnimInstance,bLockMovement: boolean,LockAILogic: boolean): void;
+	static IsValidAIRotation(Rotation: Rotator): boolean;
+	static IsValidAILocation(Location: Vector): boolean;
+	static IsValidAIDirection(DirectionVector: Vector): boolean;
+	static GetCurrentPath(Controller: Controller): NavigationPath;
+	static GetBlackboard(Target: Actor): BlackboardComponent;
+	static GetAIController(ControlledActor: Actor): AIController;
+	static CreateMoveToProxyObject(WorldContextObject: UObject,Pawn: Pawn,Destination: Vector,TargetActor: Actor,AcceptanceRadius: number,bStopOnOverlap: boolean): AIAsyncTaskBlueprintProxy;
+	static C(Other: UObject | any): AIBlueprintHelperLibrary;
+}
+
+declare class AIDataProvider_QueryParams extends AIDataProvider { 
+	ParamName: string;
+	FloatValue: number;
+	IntValue: number;
+	BoolValue: boolean;
+	static Load(ResourceName: string): AIDataProvider_QueryParams;
+	static Find(Outer: UObject, ResourceName: string): AIDataProvider_QueryParams;
+	static GetDefaultObject(): AIDataProvider_QueryParams;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIDataProvider_QueryParams;
+	static C(Other: UObject | any): AIDataProvider_QueryParams;
+}
+
+declare class AIDataProvider_Random extends AIDataProvider_QueryParams { 
+	Min: number;
+	Max: number;
+	bInteger: boolean;
+	static Load(ResourceName: string): AIDataProvider_Random;
+	static Find(Outer: UObject, ResourceName: string): AIDataProvider_Random;
+	static GetDefaultObject(): AIDataProvider_Random;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIDataProvider_Random;
+	static C(Other: UObject | any): AIDataProvider_Random;
+}
+
+declare class AIPerceptionListenerInterface extends Interface { 
+	static Load(ResourceName: string): AIPerceptionListenerInterface;
+	static Find(Outer: UObject, ResourceName: string): AIPerceptionListenerInterface;
+	static GetDefaultObject(): AIPerceptionListenerInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIPerceptionListenerInterface;
+	static C(Other: UObject | any): AIPerceptionListenerInterface;
+}
+
+declare class AIPerceptionStimuliSourceComponent extends ActorComponent { 
+	bAutoRegisterAsSource: boolean;
+	RegisterAsSourceForSenses: UnrealEngineClass[];
+	static Load(ResourceName: string): AIPerceptionStimuliSourceComponent;
+	static Find(Outer: UObject, ResourceName: string): AIPerceptionStimuliSourceComponent;
+	static GetDefaultObject(): AIPerceptionStimuliSourceComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIPerceptionStimuliSourceComponent;
+	UnregisterFromSense(SenseClass: UnrealEngineClass): void;
+	UnregisterFromPerceptionSystem(): void;
+	RegisterWithPerceptionSystem(): void;
+	RegisterForSense(SenseClass: UnrealEngineClass): void;
+	static C(Other: UObject | any): AIPerceptionStimuliSourceComponent;
+}
+
+declare class AIResourceInterface extends Interface { 
+	static Load(ResourceName: string): AIResourceInterface;
+	static Find(Outer: UObject, ResourceName: string): AIResourceInterface;
+	static GetDefaultObject(): AIResourceInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIResourceInterface;
+	static C(Other: UObject | any): AIResourceInterface;
+}
+
+declare class AIResource_Movement extends GameplayTaskResource { 
+	static Load(ResourceName: string): AIResource_Movement;
+	static Find(Outer: UObject, ResourceName: string): AIResource_Movement;
+	static GetDefaultObject(): AIResource_Movement;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIResource_Movement;
+	static C(Other: UObject | any): AIResource_Movement;
+}
+
+declare class AIResource_Logic extends GameplayTaskResource { 
+	static Load(ResourceName: string): AIResource_Logic;
+	static Find(Outer: UObject, ResourceName: string): AIResource_Logic;
+	static GetDefaultObject(): AIResource_Logic;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIResource_Logic;
+	static C(Other: UObject | any): AIResource_Logic;
+}
+
+declare class AISense_Blueprint extends AISense { 
+	ListenerDataType: UnrealEngineClass;
+	ListenerContainer: AIPerceptionComponent[];
+	UnprocessedEvents: AISenseEvent[];
+	static Load(ResourceName: string): AISense_Blueprint;
+	static Find(Outer: UObject, ResourceName: string): AISense_Blueprint;
+	static GetDefaultObject(): AISense_Blueprint;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense_Blueprint;
+	OnUpdate(EventsToProcess: AISenseEvent[]): number;
+	OnListenerUpdated(ActorListener: Actor,PerceptionComponent: AIPerceptionComponent): void;
+	OnListenerUnregistered(ActorListener: Actor,PerceptionComponent: AIPerceptionComponent): void;
+	OnListenerRegistered(ActorListener: Actor,PerceptionComponent: AIPerceptionComponent): void;
+	K2_OnNewPawn(NewPawn: Pawn): void;
+	GetAllListenerComponents(ListenerComponents?: AIPerceptionComponent[]): {ListenerComponents: AIPerceptionComponent[]};
+	GetAllListenerActors(ListenerActors?: Actor[]): {ListenerActors: Actor[]};
+	static C(Other: UObject | any): AISense_Blueprint;
+}
+
+declare class AIDamageEvent { 
+	Amount: number;
+	Location: Vector;
+	HitLocation: Vector;
+	DamagedActor: Actor;
+	Instigator: Actor;
+	clone() : AIDamageEvent;
+	static C(Other: UObject | any): AIDamageEvent;
+}
+
+declare class AISense_Damage extends AISense { 
+	RegisteredEvents: AIDamageEvent[];
+	static Load(ResourceName: string): AISense_Damage;
+	static Find(Outer: UObject, ResourceName: string): AISense_Damage;
+	static GetDefaultObject(): AISense_Damage;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense_Damage;
+	static ReportDamageEvent(WorldContextObject: UObject,DamagedActor: Actor,Instigator: Actor,DamageAmount: number,EventLocation: Vector,HitLocation: Vector): void;
+	static C(Other: UObject | any): AISense_Damage;
+}
+
+declare class AINoiseEvent { 
+	NoiseLocation: Vector;
+	Loudness: number;
+	MaxRange: number;
+	Instigator: Actor;
+	Tag: string;
+	clone() : AINoiseEvent;
+	static C(Other: UObject | any): AINoiseEvent;
+}
+
+declare class AISense_Hearing extends AISense { 
+	NoiseEvents: AINoiseEvent[];
+	SpeedOfSoundSq: number;
+	static Load(ResourceName: string): AISense_Hearing;
+	static Find(Outer: UObject, ResourceName: string): AISense_Hearing;
+	static GetDefaultObject(): AISense_Hearing;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense_Hearing;
+	static ReportNoiseEvent(WorldContextObject: UObject,NoiseLocation: Vector,Loudness: number,Instigator: Actor,MaxRange: number,Tag: string): void;
+	static C(Other: UObject | any): AISense_Hearing;
+}
+
+declare class AIPredictionEvent { 
+	Requestor: Actor;
+	PredictedActor: Actor;
+	clone() : AIPredictionEvent;
+	static C(Other: UObject | any): AIPredictionEvent;
+}
+
+declare class AISense_Prediction extends AISense { 
+	RegisteredEvents: AIPredictionEvent[];
+	static Load(ResourceName: string): AISense_Prediction;
+	static Find(Outer: UObject, ResourceName: string): AISense_Prediction;
+	static GetDefaultObject(): AISense_Prediction;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense_Prediction;
+	static RequestPawnPredictionEvent(Requestor: Pawn,PredictedActor: Actor,PredictionTime: number): void;
+	static RequestControllerPredictionEvent(Requestor: AIController,PredictedActor: Actor,PredictionTime: number): void;
+	static C(Other: UObject | any): AISense_Prediction;
+}
+
+declare class AISense_Sight extends AISense { 
+	MaxTracesPerTick: number;
+	MinQueriesPerTimeSliceCheck: number;
+	MaxTimeSlicePerTick: any;
+	HighImportanceQueryDistanceThreshold: number;
+	MaxQueryImportance: number;
+	SightLimitQueryImportance: number;
+	static Load(ResourceName: string): AISense_Sight;
+	static Find(Outer: UObject, ResourceName: string): AISense_Sight;
+	static GetDefaultObject(): AISense_Sight;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense_Sight;
+	static C(Other: UObject | any): AISense_Sight;
+}
+
+declare class AITeamStimulusEvent { 
+	Broadcaster: Actor;
+	Enemy: Actor;
+	clone() : AITeamStimulusEvent;
+	static C(Other: UObject | any): AITeamStimulusEvent;
+}
+
+declare class AISense_Team extends AISense { 
+	RegisteredEvents: AITeamStimulusEvent[];
+	static Load(ResourceName: string): AISense_Team;
+	static Find(Outer: UObject, ResourceName: string): AISense_Team;
+	static GetDefaultObject(): AISense_Team;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense_Team;
+	static C(Other: UObject | any): AISense_Team;
+}
+
+declare class AITouchEvent { 
+	TouchReceiver: Actor;
+	OtherActor: Actor;
+	clone() : AITouchEvent;
+	static C(Other: UObject | any): AITouchEvent;
+}
+
+declare class AISense_Touch extends AISense { 
+	RegisteredEvents: AITouchEvent[];
+	static Load(ResourceName: string): AISense_Touch;
+	static Find(Outer: UObject, ResourceName: string): AISense_Touch;
+	static GetDefaultObject(): AISense_Touch;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISense_Touch;
+	static C(Other: UObject | any): AISense_Touch;
+}
+
+declare class AISenseBlueprintListener extends UserDefinedStruct { 
+	static Load(ResourceName: string): AISenseBlueprintListener;
+	static Find(Outer: UObject, ResourceName: string): AISenseBlueprintListener;
+	static GetDefaultObject(): AISenseBlueprintListener;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseBlueprintListener;
+	static C(Other: UObject | any): AISenseBlueprintListener;
+}
+
+declare class AISenseConfig_Blueprint extends AISenseConfig { 
+	Implementation: UnrealEngineClass;
+	static Load(ResourceName: string): AISenseConfig_Blueprint;
+	static Find(Outer: UObject, ResourceName: string): AISenseConfig_Blueprint;
+	static GetDefaultObject(): AISenseConfig_Blueprint;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig_Blueprint;
+	static C(Other: UObject | any): AISenseConfig_Blueprint;
+}
+
+declare class AISenseConfig_Damage extends AISenseConfig { 
+	Implementation: UnrealEngineClass;
+	static Load(ResourceName: string): AISenseConfig_Damage;
+	static Find(Outer: UObject, ResourceName: string): AISenseConfig_Damage;
+	static GetDefaultObject(): AISenseConfig_Damage;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig_Damage;
+	static C(Other: UObject | any): AISenseConfig_Damage;
+}
+
+declare class AISenseAffiliationFilter { 
+	bDetectEnemies: boolean;
+	bDetectNeutrals: boolean;
+	bDetectFriendlies: boolean;
+	clone() : AISenseAffiliationFilter;
+	static C(Other: UObject | any): AISenseAffiliationFilter;
+}
+
+declare class AISenseConfig_Hearing extends AISenseConfig { 
+	Implementation: UnrealEngineClass;
+	HearingRange: number;
+	LoSHearingRange: number;
+	bUseLoSHearing: boolean;
+	DetectionByAffiliation: AISenseAffiliationFilter;
+	static Load(ResourceName: string): AISenseConfig_Hearing;
+	static Find(Outer: UObject, ResourceName: string): AISenseConfig_Hearing;
+	static GetDefaultObject(): AISenseConfig_Hearing;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig_Hearing;
+	static C(Other: UObject | any): AISenseConfig_Hearing;
+}
+
+declare class AISenseConfig_Prediction extends AISenseConfig { 
+	static Load(ResourceName: string): AISenseConfig_Prediction;
+	static Find(Outer: UObject, ResourceName: string): AISenseConfig_Prediction;
+	static GetDefaultObject(): AISenseConfig_Prediction;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig_Prediction;
+	static C(Other: UObject | any): AISenseConfig_Prediction;
+}
+
+declare class AISenseConfig_Sight extends AISenseConfig { 
+	Implementation: UnrealEngineClass;
+	SightRadius: number;
+	LoseSightRadius: number;
+	PeripheralVisionAngleDegrees: number;
+	DetectionByAffiliation: AISenseAffiliationFilter;
+	AutoSuccessRangeFromLastSeenLocation: number;
+	static Load(ResourceName: string): AISenseConfig_Sight;
+	static Find(Outer: UObject, ResourceName: string): AISenseConfig_Sight;
+	static GetDefaultObject(): AISenseConfig_Sight;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig_Sight;
+	static C(Other: UObject | any): AISenseConfig_Sight;
+}
+
+declare class AISenseConfig_Team extends AISenseConfig { 
+	static Load(ResourceName: string): AISenseConfig_Team;
+	static Find(Outer: UObject, ResourceName: string): AISenseConfig_Team;
+	static GetDefaultObject(): AISenseConfig_Team;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig_Team;
+	static C(Other: UObject | any): AISenseConfig_Team;
+}
+
+declare class AISenseConfig_Touch extends AISenseConfig { 
+	static Load(ResourceName: string): AISenseConfig_Touch;
+	static Find(Outer: UObject, ResourceName: string): AISenseConfig_Touch;
+	static GetDefaultObject(): AISenseConfig_Touch;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseConfig_Touch;
+	static C(Other: UObject | any): AISenseConfig_Touch;
+}
+
+declare class AISenseEvent_Damage extends AISenseEvent { 
+	Event: AIDamageEvent;
+	static Load(ResourceName: string): AISenseEvent_Damage;
+	static Find(Outer: UObject, ResourceName: string): AISenseEvent_Damage;
+	static GetDefaultObject(): AISenseEvent_Damage;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseEvent_Damage;
+	static C(Other: UObject | any): AISenseEvent_Damage;
+}
+
+declare class AISenseEvent_Hearing extends AISenseEvent { 
+	Event: AINoiseEvent;
+	static Load(ResourceName: string): AISenseEvent_Hearing;
+	static Find(Outer: UObject, ResourceName: string): AISenseEvent_Hearing;
+	static GetDefaultObject(): AISenseEvent_Hearing;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISenseEvent_Hearing;
+	static C(Other: UObject | any): AISenseEvent_Hearing;
+}
+
+declare class AISightTargetInterface extends Interface { 
+	static Load(ResourceName: string): AISightTargetInterface;
+	static Find(Outer: UObject, ResourceName: string): AISightTargetInterface;
+	static GetDefaultObject(): AISightTargetInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AISightTargetInterface;
+	static C(Other: UObject | any): AISightTargetInterface;
+}
+
+declare class AITask extends GameplayTask { 
+	OwnerController: AIController;
+	static Load(ResourceName: string): AITask;
+	static Find(Outer: UObject, ResourceName: string): AITask;
+	static GetDefaultObject(): AITask;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AITask;
+	static C(Other: UObject | any): AITask;
+}
+
+declare class AITask_LockLogic extends AITask { 
+	static Load(ResourceName: string): AITask_LockLogic;
+	static Find(Outer: UObject, ResourceName: string): AITask_LockLogic;
+	static GetDefaultObject(): AITask_LockLogic;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AITask_LockLogic;
+	static C(Other: UObject | any): AITask_LockLogic;
+}
+
+declare class AIMoveRequest { 
+	GoalActor: Actor;
+	clone() : AIMoveRequest;
+	static C(Other: UObject | any): AIMoveRequest;
+}
+
+declare type EAIOptionFlag = 'Default' | 'Enable' | 'Disable' | 'MAX';
+declare var EAIOptionFlag : { Default:'Default',Enable:'Enable',Disable:'Disable',MAX:'MAX', };
+declare class AITask_MoveTo extends AITask { 
+	OnRequestFailed: UnrealEngineMulticastDelegate<() => void>;
+	OnMoveFinished: UnrealEngineMulticastDelegate<(Result: EPathFollowingResult, AIController: AIController) => void>;
+	MoveRequest: AIMoveRequest;
+	static Load(ResourceName: string): AITask_MoveTo;
+	static Find(Outer: UObject, ResourceName: string): AITask_MoveTo;
+	static GetDefaultObject(): AITask_MoveTo;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AITask_MoveTo;
+	static AIMoveTo(Controller: AIController,GoalLocation: Vector,GoalActor: Actor,AcceptanceRadius: number,StopOnOverlap: EAIOptionFlag,AcceptPartialPath: EAIOptionFlag,bUsePathfinding: boolean,bLockAILogic: boolean,bUseContinuosGoalTracking: boolean,ProjectGoalOnNavigation: EAIOptionFlag): AITask_MoveTo;
+	static C(Other: UObject | any): AITask_MoveTo;
+}
+
+declare class AITask_RunEQS extends AITask { 
+	static Load(ResourceName: string): AITask_RunEQS;
+	static Find(Outer: UObject, ResourceName: string): AITask_RunEQS;
+	static GetDefaultObject(): AITask_RunEQS;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AITask_RunEQS;
+	static RunEQS(Controller: AIController,QueryTemplate: EnvQuery): AITask_RunEQS;
+	static C(Other: UObject | any): AITask_RunEQS;
+}
+
+declare class BehaviorTreeTypes extends UObject { 
+	static Load(ResourceName: string): BehaviorTreeTypes;
+	static Find(Outer: UObject, ResourceName: string): BehaviorTreeTypes;
+	static GetDefaultObject(): BehaviorTreeTypes;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeTypes;
+	static C(Other: UObject | any): BehaviorTreeTypes;
+}
+
+declare class BlackboardKeyType_Bool extends BlackboardKeyType { 
+	static Load(ResourceName: string): BlackboardKeyType_Bool;
+	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Bool;
+	static GetDefaultObject(): BlackboardKeyType_Bool;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Bool;
+	static C(Other: UObject | any): BlackboardKeyType_Bool;
+}
+
+declare class BlackboardKeyType_Class extends BlackboardKeyType { 
+	BaseClass: UnrealEngineClass;
+	static Load(ResourceName: string): BlackboardKeyType_Class;
+	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Class;
+	static GetDefaultObject(): BlackboardKeyType_Class;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Class;
+	static C(Other: UObject | any): BlackboardKeyType_Class;
+}
+
+declare class BlackboardKeyType_Enum extends BlackboardKeyType { 
+	EnumType: Enum;
+	EnumName: string;
+	bIsEnumNameValid: boolean;
+	static Load(ResourceName: string): BlackboardKeyType_Enum;
+	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Enum;
+	static GetDefaultObject(): BlackboardKeyType_Enum;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Enum;
+	static C(Other: UObject | any): BlackboardKeyType_Enum;
+}
+
+declare class BlackboardKeyType_Float extends BlackboardKeyType { 
+	static Load(ResourceName: string): BlackboardKeyType_Float;
+	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Float;
+	static GetDefaultObject(): BlackboardKeyType_Float;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Float;
+	static C(Other: UObject | any): BlackboardKeyType_Float;
+}
+
+declare class BlackboardKeyType_Int extends BlackboardKeyType { 
+	static Load(ResourceName: string): BlackboardKeyType_Int;
+	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Int;
+	static GetDefaultObject(): BlackboardKeyType_Int;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Int;
+	static C(Other: UObject | any): BlackboardKeyType_Int;
+}
+
+declare class BlackboardKeyType_Name extends BlackboardKeyType { 
+	static Load(ResourceName: string): BlackboardKeyType_Name;
+	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Name;
+	static GetDefaultObject(): BlackboardKeyType_Name;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Name;
+	static C(Other: UObject | any): BlackboardKeyType_Name;
+}
+
+declare class BlackboardKeyType_NativeEnum extends BlackboardKeyType { 
+	EnumName: string;
+	EnumType: Enum;
+	static Load(ResourceName: string): BlackboardKeyType_NativeEnum;
+	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_NativeEnum;
+	static GetDefaultObject(): BlackboardKeyType_NativeEnum;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_NativeEnum;
+	static C(Other: UObject | any): BlackboardKeyType_NativeEnum;
+}
+
+declare class BlackboardKeyType_Object extends BlackboardKeyType { 
+	BaseClass: UnrealEngineClass;
+	static Load(ResourceName: string): BlackboardKeyType_Object;
+	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Object;
+	static GetDefaultObject(): BlackboardKeyType_Object;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Object;
+	static C(Other: UObject | any): BlackboardKeyType_Object;
+}
+
+declare class BlackboardKeyType_Rotator extends BlackboardKeyType { 
+	static Load(ResourceName: string): BlackboardKeyType_Rotator;
+	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Rotator;
+	static GetDefaultObject(): BlackboardKeyType_Rotator;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Rotator;
+	static C(Other: UObject | any): BlackboardKeyType_Rotator;
+}
+
+declare class BlackboardKeyType_String extends BlackboardKeyType { 
+	StringValue: string;
+	static Load(ResourceName: string): BlackboardKeyType_String;
+	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_String;
+	static GetDefaultObject(): BlackboardKeyType_String;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_String;
+	static C(Other: UObject | any): BlackboardKeyType_String;
+}
+
+declare class BlackboardKeyType_Vector extends BlackboardKeyType { 
+	static Load(ResourceName: string): BlackboardKeyType_Vector;
+	static Find(Outer: UObject, ResourceName: string): BlackboardKeyType_Vector;
+	static GetDefaultObject(): BlackboardKeyType_Vector;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardKeyType_Vector;
+	static C(Other: UObject | any): BlackboardKeyType_Vector;
+}
+
+declare class BTComposite_Selector extends BTCompositeNode { 
+	static Load(ResourceName: string): BTComposite_Selector;
+	static Find(Outer: UObject, ResourceName: string): BTComposite_Selector;
+	static GetDefaultObject(): BTComposite_Selector;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTComposite_Selector;
+	static C(Other: UObject | any): BTComposite_Selector;
+}
+
+declare class BTComposite_Sequence extends BTCompositeNode { 
+	static Load(ResourceName: string): BTComposite_Sequence;
+	static Find(Outer: UObject, ResourceName: string): BTComposite_Sequence;
+	static GetDefaultObject(): BTComposite_Sequence;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTComposite_Sequence;
+	static C(Other: UObject | any): BTComposite_Sequence;
+}
+
+declare type EBTParallelMode = 'AbortBackground' | 'WaitForBackground' | 'EBTParallelMode_MAX';
+declare var EBTParallelMode : { AbortBackground:'AbortBackground',WaitForBackground:'WaitForBackground',EBTParallelMode_MAX:'EBTParallelMode_MAX', };
+declare class BTComposite_SimpleParallel extends BTCompositeNode { 
+	FinishMode: EBTParallelMode;
+	static Load(ResourceName: string): BTComposite_SimpleParallel;
+	static Find(Outer: UObject, ResourceName: string): BTComposite_SimpleParallel;
+	static GetDefaultObject(): BTComposite_SimpleParallel;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTComposite_SimpleParallel;
+	static C(Other: UObject | any): BTComposite_SimpleParallel;
+}
+
+declare class BTDecorator_BlackboardBase extends BTDecorator { 
+	BlackboardKey: BlackboardKeySelector;
+	static Load(ResourceName: string): BTDecorator_BlackboardBase;
+	static Find(Outer: UObject, ResourceName: string): BTDecorator_BlackboardBase;
+	static GetDefaultObject(): BTDecorator_BlackboardBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_BlackboardBase;
+	static C(Other: UObject | any): BTDecorator_BlackboardBase;
+}
+
+declare type EBTBlackboardRestart = 'ValueChange' | 'ResultChange' | 'EBTBlackboardRestart_MAX';
+declare var EBTBlackboardRestart : { ValueChange:'ValueChange',ResultChange:'ResultChange',EBTBlackboardRestart_MAX:'EBTBlackboardRestart_MAX', };
+declare type EBasicKeyOperation = 'Set' | 'NotSet' | 'EBasicKeyOperation_MAX';
+declare var EBasicKeyOperation : { Set:'Set',NotSet:'NotSet',EBasicKeyOperation_MAX:'EBasicKeyOperation_MAX', };
+declare type EArithmeticKeyOperation = 'Equal' | 'NotEqual' | 'Less' | 'LessOrEqual' | 'Greater' | 'GreaterOrEqual' | 'EArithmeticKeyOperation_MAX';
+declare var EArithmeticKeyOperation : { Equal:'Equal',NotEqual:'NotEqual',Less:'Less',LessOrEqual:'LessOrEqual',Greater:'Greater',GreaterOrEqual:'GreaterOrEqual',EArithmeticKeyOperation_MAX:'EArithmeticKeyOperation_MAX', };
+declare type ETextKeyOperation = 'Equal' | 'NotEqual' | 'Contain' | 'NotContain' | 'ETextKeyOperation_MAX';
+declare var ETextKeyOperation : { Equal:'Equal',NotEqual:'NotEqual',Contain:'Contain',NotContain:'NotContain',ETextKeyOperation_MAX:'ETextKeyOperation_MAX', };
+declare class BTDecorator_Blackboard extends BTDecorator_BlackboardBase { 
+	IntValue: number;
+	FloatValue: number;
+	StringValue: string;
+	CachedDescription: string;
+	OperationType: number;
+	NotifyObserver: EBTBlackboardRestart;
+	BasicOperation: EBasicKeyOperation;
+	ArithmeticOperation: EArithmeticKeyOperation;
+	TextOperation: ETextKeyOperation;
+	static Load(ResourceName: string): BTDecorator_Blackboard;
+	static Find(Outer: UObject, ResourceName: string): BTDecorator_Blackboard;
+	static GetDefaultObject(): BTDecorator_Blackboard;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_Blackboard;
+	static C(Other: UObject | any): BTDecorator_Blackboard;
+}
+
+declare type EBTNodeResult = 'Succeeded' | 'Failed' | 'Aborted' | 'InProgress' | 'EBTNodeResult_MAX';
+declare var EBTNodeResult : { Succeeded:'Succeeded',Failed:'Failed',Aborted:'Aborted',InProgress:'InProgress',EBTNodeResult_MAX:'EBTNodeResult_MAX', };
+declare class BTDecorator_BlueprintBase extends BTDecorator { 
+	AIOwner: AIController;
+	ActorOwner: Actor;
+	ObservedKeyNames: string[];
+	bShowPropertyDetails: boolean;
+	bCheckConditionOnlyBlackBoardChanges: boolean;
+	bIsObservingBB: boolean;
+	static Load(ResourceName: string): BTDecorator_BlueprintBase;
+	static Find(Outer: UObject, ResourceName: string): BTDecorator_BlueprintBase;
+	static GetDefaultObject(): BTDecorator_BlueprintBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_BlueprintBase;
+	ReceiveTickAI(OwnerController: AIController,ControlledPawn: Pawn,DeltaSeconds: number): void;
+	ReceiveTick(OwnerActor: Actor,DeltaSeconds: number): void;
+	ReceiveObserverDeactivatedAI(OwnerController: AIController,ControlledPawn: Pawn): void;
+	ReceiveObserverDeactivated(OwnerActor: Actor): void;
+	ReceiveObserverActivatedAI(OwnerController: AIController,ControlledPawn: Pawn): void;
+	ReceiveObserverActivated(OwnerActor: Actor): void;
+	ReceiveExecutionStartAI(OwnerController: AIController,ControlledPawn: Pawn): void;
+	ReceiveExecutionStart(OwnerActor: Actor): void;
+	ReceiveExecutionFinishAI(OwnerController: AIController,ControlledPawn: Pawn,NodeResult: EBTNodeResult): void;
+	ReceiveExecutionFinish(OwnerActor: Actor,NodeResult: EBTNodeResult): void;
+	PerformConditionCheckAI(OwnerController: AIController,ControlledPawn: Pawn): boolean;
+	PerformConditionCheck(OwnerActor: Actor): boolean;
+	IsDecoratorObserverActive(): boolean;
+	IsDecoratorExecutionActive(): boolean;
+	static C(Other: UObject | any): BTDecorator_BlueprintBase;
+}
+
+declare type EGameplayContainerMatchType = 'Any' | 'All' | 'EGameplayContainerMatchType_MAX';
+declare var EGameplayContainerMatchType : { Any:'Any',All:'All',EGameplayContainerMatchType_MAX:'EGameplayContainerMatchType_MAX', };
+declare class BTDecorator_CheckGameplayTagsOnActor extends BTDecorator { 
+	ActorToCheck: BlackboardKeySelector;
+	TagsToMatch: EGameplayContainerMatchType;
+	GameplayTags: GameplayTagContainer;
+	CachedDescription: string;
+	static Load(ResourceName: string): BTDecorator_CheckGameplayTagsOnActor;
+	static Find(Outer: UObject, ResourceName: string): BTDecorator_CheckGameplayTagsOnActor;
+	static GetDefaultObject(): BTDecorator_CheckGameplayTagsOnActor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_CheckGameplayTagsOnActor;
+	static C(Other: UObject | any): BTDecorator_CheckGameplayTagsOnActor;
+}
+
+declare type EBlackBoardEntryComparison = 'Equal' | 'NotEqual' | 'EBlackBoardEntryComparison_MAX';
+declare var EBlackBoardEntryComparison : { Equal:'Equal',NotEqual:'NotEqual',EBlackBoardEntryComparison_MAX:'EBlackBoardEntryComparison_MAX', };
+declare class BTDecorator_CompareBBEntries extends BTDecorator { 
+	Operator: EBlackBoardEntryComparison;
+	BlackboardKeyA: BlackboardKeySelector;
+	BlackboardKeyB: BlackboardKeySelector;
+	static Load(ResourceName: string): BTDecorator_CompareBBEntries;
+	static Find(Outer: UObject, ResourceName: string): BTDecorator_CompareBBEntries;
+	static GetDefaultObject(): BTDecorator_CompareBBEntries;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_CompareBBEntries;
+	static C(Other: UObject | any): BTDecorator_CompareBBEntries;
+}
+
+declare class BTDecorator_ConditionalLoop extends BTDecorator_Blackboard { 
+	static Load(ResourceName: string): BTDecorator_ConditionalLoop;
+	static Find(Outer: UObject, ResourceName: string): BTDecorator_ConditionalLoop;
+	static GetDefaultObject(): BTDecorator_ConditionalLoop;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_ConditionalLoop;
+	static C(Other: UObject | any): BTDecorator_ConditionalLoop;
+}
+
+declare class BTDecorator_ConeCheck extends BTDecorator { 
+	ConeHalfAngle: number;
+	ConeOrigin: BlackboardKeySelector;
+	ConeDirection: BlackboardKeySelector;
+	Observed: BlackboardKeySelector;
+	static Load(ResourceName: string): BTDecorator_ConeCheck;
+	static Find(Outer: UObject, ResourceName: string): BTDecorator_ConeCheck;
+	static GetDefaultObject(): BTDecorator_ConeCheck;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_ConeCheck;
+	static C(Other: UObject | any): BTDecorator_ConeCheck;
+}
+
+declare class BTDecorator_Cooldown extends BTDecorator { 
+	CoolDownTime: number;
+	static Load(ResourceName: string): BTDecorator_Cooldown;
+	static Find(Outer: UObject, ResourceName: string): BTDecorator_Cooldown;
+	static GetDefaultObject(): BTDecorator_Cooldown;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_Cooldown;
+	static C(Other: UObject | any): BTDecorator_Cooldown;
+}
+
+declare type EPathExistanceQueryType = 'NavmeshRaycast2D' | 'HierarchicalQuery' | 'RegularPathFinding' | 'EPathExistanceQueryType_MAX';
+declare var EPathExistanceQueryType : { NavmeshRaycast2D:'NavmeshRaycast2D',HierarchicalQuery:'HierarchicalQuery',RegularPathFinding:'RegularPathFinding',EPathExistanceQueryType_MAX:'EPathExistanceQueryType_MAX', };
+declare class BTDecorator_DoesPathExist extends BTDecorator { 
+	BlackboardKeyA: BlackboardKeySelector;
+	BlackboardKeyB: BlackboardKeySelector;
+	bUseSelf: boolean;
+	PathQueryType: EPathExistanceQueryType;
+	FilterClass: UnrealEngineClass;
+	static Load(ResourceName: string): BTDecorator_DoesPathExist;
+	static Find(Outer: UObject, ResourceName: string): BTDecorator_DoesPathExist;
+	static GetDefaultObject(): BTDecorator_DoesPathExist;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_DoesPathExist;
+	static C(Other: UObject | any): BTDecorator_DoesPathExist;
+}
+
+declare class BTDecorator_ForceSuccess extends BTDecorator { 
+	static Load(ResourceName: string): BTDecorator_ForceSuccess;
+	static Find(Outer: UObject, ResourceName: string): BTDecorator_ForceSuccess;
+	static GetDefaultObject(): BTDecorator_ForceSuccess;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_ForceSuccess;
+	static C(Other: UObject | any): BTDecorator_ForceSuccess;
+}
+
+declare type FAIDistanceType = 'Distance3D' | 'Distance2D' | 'DistanceZ' | 'MAX';
+declare var FAIDistanceType : { Distance3D:'Distance3D',Distance2D:'Distance2D',DistanceZ:'DistanceZ',MAX:'MAX', };
+declare class BTDecorator_IsAtLocation extends BTDecorator_BlackboardBase { 
+	AcceptableRadius: number;
+	ParametrizedAcceptableRadius: AIDataProviderFloatValue;
+	GeometricDistanceType: FAIDistanceType;
+	bUseParametrizedRadius: boolean;
+	bUseNavAgentGoalLocation: boolean;
+	bPathFindingBasedTest: boolean;
+	static Load(ResourceName: string): BTDecorator_IsAtLocation;
+	static Find(Outer: UObject, ResourceName: string): BTDecorator_IsAtLocation;
+	static GetDefaultObject(): BTDecorator_IsAtLocation;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_IsAtLocation;
+	static C(Other: UObject | any): BTDecorator_IsAtLocation;
+}
+
+declare class BTDecorator_IsBBEntryOfClass extends BTDecorator_BlackboardBase { 
+	TestClass: UnrealEngineClass;
+	static Load(ResourceName: string): BTDecorator_IsBBEntryOfClass;
+	static Find(Outer: UObject, ResourceName: string): BTDecorator_IsBBEntryOfClass;
+	static GetDefaultObject(): BTDecorator_IsBBEntryOfClass;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_IsBBEntryOfClass;
+	static C(Other: UObject | any): BTDecorator_IsBBEntryOfClass;
+}
+
+declare class BTDecorator_KeepInCone extends BTDecorator { 
+	ConeHalfAngle: number;
+	ConeOrigin: BlackboardKeySelector;
+	Observed: BlackboardKeySelector;
+	bUseSelfAsOrigin: boolean;
+	bUseSelfAsObserved: boolean;
+	static Load(ResourceName: string): BTDecorator_KeepInCone;
+	static Find(Outer: UObject, ResourceName: string): BTDecorator_KeepInCone;
+	static GetDefaultObject(): BTDecorator_KeepInCone;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_KeepInCone;
+	static C(Other: UObject | any): BTDecorator_KeepInCone;
+}
+
+declare class BTDecorator_Loop extends BTDecorator { 
+	NumLoops: number;
+	bInfiniteLoop: boolean;
+	InfiniteLoopTimeoutTime: number;
+	static Load(ResourceName: string): BTDecorator_Loop;
+	static Find(Outer: UObject, ResourceName: string): BTDecorator_Loop;
+	static GetDefaultObject(): BTDecorator_Loop;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_Loop;
+	static C(Other: UObject | any): BTDecorator_Loop;
+}
+
+declare class BTDecorator_ReachedMoveGoal extends BTDecorator { 
+	static Load(ResourceName: string): BTDecorator_ReachedMoveGoal;
+	static Find(Outer: UObject, ResourceName: string): BTDecorator_ReachedMoveGoal;
+	static GetDefaultObject(): BTDecorator_ReachedMoveGoal;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_ReachedMoveGoal;
+	static C(Other: UObject | any): BTDecorator_ReachedMoveGoal;
+}
+
+declare class BTDecorator_SetTagCooldown extends BTDecorator { 
+	CooldownTag: GameplayTag;
+	CooldownDuration: number;
+	bAddToExistingDuration: boolean;
+	static Load(ResourceName: string): BTDecorator_SetTagCooldown;
+	static Find(Outer: UObject, ResourceName: string): BTDecorator_SetTagCooldown;
+	static GetDefaultObject(): BTDecorator_SetTagCooldown;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_SetTagCooldown;
+	static C(Other: UObject | any): BTDecorator_SetTagCooldown;
+}
+
+declare class BTDecorator_TagCooldown extends BTDecorator { 
+	CooldownTag: GameplayTag;
+	CooldownDuration: number;
+	bAddToExistingDuration: boolean;
+	bActivatesCooldown: boolean;
+	static Load(ResourceName: string): BTDecorator_TagCooldown;
+	static Find(Outer: UObject, ResourceName: string): BTDecorator_TagCooldown;
+	static GetDefaultObject(): BTDecorator_TagCooldown;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_TagCooldown;
+	static C(Other: UObject | any): BTDecorator_TagCooldown;
+}
+
+declare class BTDecorator_TimeLimit extends BTDecorator { 
+	TimeLimit: number;
+	static Load(ResourceName: string): BTDecorator_TimeLimit;
+	static Find(Outer: UObject, ResourceName: string): BTDecorator_TimeLimit;
+	static GetDefaultObject(): BTDecorator_TimeLimit;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTDecorator_TimeLimit;
+	static C(Other: UObject | any): BTDecorator_TimeLimit;
+}
+
+declare class BTFunctionLibrary extends BlueprintFunctionLibrary { 
+	static Load(ResourceName: string): BTFunctionLibrary;
+	static Find(Outer: UObject, ResourceName: string): BTFunctionLibrary;
+	static GetDefaultObject(): BTFunctionLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTFunctionLibrary;
+	static StopUsingExternalEvent(NodeOwner: BTNode): void;
+	static StartUsingExternalEvent(NodeOwner: BTNode,OwningActor: Actor): void;
+	static SetBlackboardValueAsVector(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: Vector): void;
+	static SetBlackboardValueAsString(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: string): void;
+	static SetBlackboardValueAsRotator(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: Rotator): void;
+	static SetBlackboardValueAsObject(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: UObject): void;
+	static SetBlackboardValueAsName(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: string): void;
+	static SetBlackboardValueAsInt(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: number): void;
+	static SetBlackboardValueAsFloat(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: number): void;
+	static SetBlackboardValueAsEnum(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: number): void;
+	static SetBlackboardValueAsClass(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: UnrealEngineClass): void;
+	static SetBlackboardValueAsBool(NodeOwner: BTNode,Key: BlackboardKeySelector,Value: boolean): void;
+	static GetOwnersBlackboard(NodeOwner: BTNode): BlackboardComponent;
+	static GetOwnerComponent(NodeOwner: BTNode): BehaviorTreeComponent;
+	static GetBlackboardValueAsVector(NodeOwner: BTNode,Key: BlackboardKeySelector): Vector;
+	static GetBlackboardValueAsString(NodeOwner: BTNode,Key: BlackboardKeySelector): string;
+	static GetBlackboardValueAsRotator(NodeOwner: BTNode,Key: BlackboardKeySelector): Rotator;
+	static GetBlackboardValueAsObject(NodeOwner: BTNode,Key: BlackboardKeySelector): UObject;
+	static GetBlackboardValueAsName(NodeOwner: BTNode,Key: BlackboardKeySelector): string;
+	static GetBlackboardValueAsInt(NodeOwner: BTNode,Key: BlackboardKeySelector): number;
+	static GetBlackboardValueAsFloat(NodeOwner: BTNode,Key: BlackboardKeySelector): number;
+	static GetBlackboardValueAsEnum(NodeOwner: BTNode,Key: BlackboardKeySelector): number;
+	static GetBlackboardValueAsClass(NodeOwner: BTNode,Key: BlackboardKeySelector): UnrealEngineClass;
+	static GetBlackboardValueAsBool(NodeOwner: BTNode,Key: BlackboardKeySelector): boolean;
+	static GetBlackboardValueAsActor(NodeOwner: BTNode,Key: BlackboardKeySelector): Actor;
+	static ClearBlackboardValueAsVector(NodeOwner: BTNode,Key: BlackboardKeySelector): void;
+	static ClearBlackboardValue(NodeOwner: BTNode,Key: BlackboardKeySelector): void;
+	static C(Other: UObject | any): BTFunctionLibrary;
+}
+
+declare class BTService_BlackboardBase extends BTService { 
+	BlackboardKey: BlackboardKeySelector;
+	static Load(ResourceName: string): BTService_BlackboardBase;
+	static Find(Outer: UObject, ResourceName: string): BTService_BlackboardBase;
+	static GetDefaultObject(): BTService_BlackboardBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTService_BlackboardBase;
+	static C(Other: UObject | any): BTService_BlackboardBase;
+}
+
+declare class BTService_BlueprintBase extends BTService { 
+	AIOwner: AIController;
+	ActorOwner: Actor;
+	bShowPropertyDetails: boolean;
+	bShowEventDetails: boolean;
+	static Load(ResourceName: string): BTService_BlueprintBase;
+	static Find(Outer: UObject, ResourceName: string): BTService_BlueprintBase;
+	static GetDefaultObject(): BTService_BlueprintBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTService_BlueprintBase;
+	ReceiveTickAI(OwnerController: AIController,ControlledPawn: Pawn,DeltaSeconds: number): void;
+	ReceiveTick(OwnerActor: Actor,DeltaSeconds: number): void;
+	ReceiveSearchStartAI(OwnerController: AIController,ControlledPawn: Pawn): void;
+	ReceiveSearchStart(OwnerActor: Actor): void;
+	ReceiveDeactivationAI(OwnerController: AIController,ControlledPawn: Pawn): void;
+	ReceiveDeactivation(OwnerActor: Actor): void;
+	ReceiveActivationAI(OwnerController: AIController,ControlledPawn: Pawn): void;
+	ReceiveActivation(OwnerActor: Actor): void;
+	IsServiceActive(): boolean;
+	static C(Other: UObject | any): BTService_BlueprintBase;
+}
+
+declare class BTService_DefaultFocus extends BTService_BlackboardBase { 
+	FocusPriority: number;
+	static Load(ResourceName: string): BTService_DefaultFocus;
+	static Find(Outer: UObject, ResourceName: string): BTService_DefaultFocus;
+	static GetDefaultObject(): BTService_DefaultFocus;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTService_DefaultFocus;
+	static C(Other: UObject | any): BTService_DefaultFocus;
+}
+
+declare type EAIParamType = 'Float' | 'Int' | 'Bool' | 'MAX';
+declare var EAIParamType : { Float:'Float',Int:'Int',Bool:'Bool',MAX:'MAX', };
+declare class AIDynamicParam { 
+	ParamName: string;
+	ParamType: EAIParamType;
+	Value: number;
+	BBKey: BlackboardKeySelector;
+	clone() : AIDynamicParam;
+	static C(Other: UObject | any): AIDynamicParam;
+}
+
+declare class EQSParametrizedQueryExecutionRequest { 
+	QueryTemplate: EnvQuery;
+	QueryConfig: AIDynamicParam[];
+	EQSQueryBlackboardKey: BlackboardKeySelector;
+	RunMode: EEnvQueryRunMode;
+	bUseBBKeyForQueryTemplate: boolean;
+	clone() : EQSParametrizedQueryExecutionRequest;
+	static C(Other: UObject | any): EQSParametrizedQueryExecutionRequest;
+}
+
+declare class BTService_RunEQS extends BTService_BlackboardBase { 
+	EQSRequest: EQSParametrizedQueryExecutionRequest;
+	static Load(ResourceName: string): BTService_RunEQS;
+	static Find(Outer: UObject, ResourceName: string): BTService_RunEQS;
+	static GetDefaultObject(): BTService_RunEQS;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTService_RunEQS;
+	static C(Other: UObject | any): BTService_RunEQS;
+}
+
+declare class BTTask_BlackboardBase extends BTTaskNode { 
+	BlackboardKey: BlackboardKeySelector;
+	static Load(ResourceName: string): BTTask_BlackboardBase;
+	static Find(Outer: UObject, ResourceName: string): BTTask_BlackboardBase;
+	static GetDefaultObject(): BTTask_BlackboardBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_BlackboardBase;
+	static C(Other: UObject | any): BTTask_BlackboardBase;
+}
+
+declare class BTTask_BlueprintBase extends BTTaskNode { 
+	AIOwner: AIController;
+	ActorOwner: Actor;
+	bShowPropertyDetails: boolean;
+	static Load(ResourceName: string): BTTask_BlueprintBase;
+	static Find(Outer: UObject, ResourceName: string): BTTask_BlueprintBase;
+	static GetDefaultObject(): BTTask_BlueprintBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_BlueprintBase;
+	SetFinishOnMessageWithId(MessageName: string,RequestID: number): void;
+	SetFinishOnMessage(MessageName: string): void;
+	ReceiveTickAI(OwnerController: AIController,ControlledPawn: Pawn,DeltaSeconds: number): void;
+	ReceiveTick(OwnerActor: Actor,DeltaSeconds: number): void;
+	ReceiveExecuteAI(OwnerController: AIController,ControlledPawn: Pawn): void;
+	ReceiveExecute(OwnerActor: Actor): void;
+	ReceiveAbortAI(OwnerController: AIController,ControlledPawn: Pawn): void;
+	ReceiveAbort(OwnerActor: Actor): void;
+	IsTaskExecuting(): boolean;
+	IsTaskAborting(): boolean;
+	FinishExecute(bSuccess: boolean): void;
+	FinishAbort(): void;
+	static C(Other: UObject | any): BTTask_BlueprintBase;
+}
+
+declare class BTTask_FinishWithResult extends BTTaskNode { 
+	Result: EBTNodeResult;
+	static Load(ResourceName: string): BTTask_FinishWithResult;
+	static Find(Outer: UObject, ResourceName: string): BTTask_FinishWithResult;
+	static GetDefaultObject(): BTTask_FinishWithResult;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_FinishWithResult;
+	static C(Other: UObject | any): BTTask_FinishWithResult;
+}
+
+declare class BTTask_GameplayTaskBase extends BTTaskNode { 
+	bWaitForGameplayTask: boolean;
+	static Load(ResourceName: string): BTTask_GameplayTaskBase;
+	static Find(Outer: UObject, ResourceName: string): BTTask_GameplayTaskBase;
+	static GetDefaultObject(): BTTask_GameplayTaskBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_GameplayTaskBase;
+	static C(Other: UObject | any): BTTask_GameplayTaskBase;
+}
+
+declare class BTTask_MakeNoise extends BTTaskNode { 
+	Loudnes: number;
+	static Load(ResourceName: string): BTTask_MakeNoise;
+	static Find(Outer: UObject, ResourceName: string): BTTask_MakeNoise;
+	static GetDefaultObject(): BTTask_MakeNoise;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_MakeNoise;
+	static C(Other: UObject | any): BTTask_MakeNoise;
+}
+
+declare class BTTask_MoveTo extends BTTask_BlackboardBase { 
+	AcceptableRadius: number;
+	FilterClass: UnrealEngineClass;
+	ObservedBlackboardValueTolerance: number;
+	bObserveBlackboardValue: boolean;
+	bAllowStrafe: boolean;
+	bAllowPartialPath: boolean;
+	bTrackMovingGoal: boolean;
+	bProjectGoalLocation: boolean;
+	bReachTestIncludesAgentRadius: boolean;
+	bReachTestIncludesGoalRadius: boolean;
+	bStopOnOverlap: boolean;
+	bStopOnOverlapNeedsUpdate: boolean;
+	static Load(ResourceName: string): BTTask_MoveTo;
+	static Find(Outer: UObject, ResourceName: string): BTTask_MoveTo;
+	static GetDefaultObject(): BTTask_MoveTo;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_MoveTo;
+	static C(Other: UObject | any): BTTask_MoveTo;
+}
+
+declare class BTTask_MoveDirectlyToward extends BTTask_MoveTo { 
+	bDisablePathUpdateOnGoalLocationChange: boolean;
+	bProjectVectorGoalToNavigation: boolean;
+	bUpdatedDeprecatedProperties: boolean;
+	static Load(ResourceName: string): BTTask_MoveDirectlyToward;
+	static Find(Outer: UObject, ResourceName: string): BTTask_MoveDirectlyToward;
+	static GetDefaultObject(): BTTask_MoveDirectlyToward;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_MoveDirectlyToward;
+	static C(Other: UObject | any): BTTask_MoveDirectlyToward;
+}
+
+declare class BTTask_PawnActionBase extends BTTaskNode { 
+	static Load(ResourceName: string): BTTask_PawnActionBase;
+	static Find(Outer: UObject, ResourceName: string): BTTask_PawnActionBase;
+	static GetDefaultObject(): BTTask_PawnActionBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_PawnActionBase;
+	static C(Other: UObject | any): BTTask_PawnActionBase;
+}
+
+declare class BTTask_PlayAnimation extends BTTaskNode { 
+	AnimationToPlay: AnimationAsset;
+	bLooping: boolean;
+	bNonBlocking: boolean;
+	MyOwnerComp: BehaviorTreeComponent;
+	CachedSkelMesh: SkeletalMeshComponent;
+	static Load(ResourceName: string): BTTask_PlayAnimation;
+	static Find(Outer: UObject, ResourceName: string): BTTask_PlayAnimation;
+	static GetDefaultObject(): BTTask_PlayAnimation;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_PlayAnimation;
+	static C(Other: UObject | any): BTTask_PlayAnimation;
+}
+
+declare class BTTask_PlaySound extends BTTaskNode { 
+	SoundToPlay: SoundCue;
+	static Load(ResourceName: string): BTTask_PlaySound;
+	static Find(Outer: UObject, ResourceName: string): BTTask_PlaySound;
+	static GetDefaultObject(): BTTask_PlaySound;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_PlaySound;
+	static C(Other: UObject | any): BTTask_PlaySound;
+}
+
+declare class BTTask_PushPawnAction extends BTTask_PawnActionBase { 
+	Action: PawnAction;
+	static Load(ResourceName: string): BTTask_PushPawnAction;
+	static Find(Outer: UObject, ResourceName: string): BTTask_PushPawnAction;
+	static GetDefaultObject(): BTTask_PushPawnAction;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_PushPawnAction;
+	static C(Other: UObject | any): BTTask_PushPawnAction;
+}
+
+declare class BTTask_RotateToFaceBBEntry extends BTTask_BlackboardBase { 
+	Precision: number;
+	static Load(ResourceName: string): BTTask_RotateToFaceBBEntry;
+	static Find(Outer: UObject, ResourceName: string): BTTask_RotateToFaceBBEntry;
+	static GetDefaultObject(): BTTask_RotateToFaceBBEntry;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_RotateToFaceBBEntry;
+	static C(Other: UObject | any): BTTask_RotateToFaceBBEntry;
+}
+
+declare class BTTask_RunBehavior extends BTTaskNode { 
+	BehaviorAsset: BehaviorTree;
+	static Load(ResourceName: string): BTTask_RunBehavior;
+	static Find(Outer: UObject, ResourceName: string): BTTask_RunBehavior;
+	static GetDefaultObject(): BTTask_RunBehavior;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_RunBehavior;
+	static C(Other: UObject | any): BTTask_RunBehavior;
+}
+
+declare class BTTask_RunBehaviorDynamic extends BTTaskNode { 
+	InjectionTag: GameplayTag;
+	DefaultBehaviorAsset: BehaviorTree;
+	BehaviorAsset: BehaviorTree;
+	static Load(ResourceName: string): BTTask_RunBehaviorDynamic;
+	static Find(Outer: UObject, ResourceName: string): BTTask_RunBehaviorDynamic;
+	static GetDefaultObject(): BTTask_RunBehaviorDynamic;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_RunBehaviorDynamic;
+	static C(Other: UObject | any): BTTask_RunBehaviorDynamic;
+}
+
+declare class EnvNamedValue { 
+	ParamName: string;
+	ParamType: EAIParamType;
+	Value: number;
+	clone() : EnvNamedValue;
+	static C(Other: UObject | any): EnvNamedValue;
+}
+
+declare class BTTask_RunEQSQuery extends BTTask_BlackboardBase { 
+	QueryTemplate: EnvQuery;
+	QueryParams: EnvNamedValue[];
+	QueryConfig: AIDynamicParam[];
+	RunMode: EEnvQueryRunMode;
+	EQSQueryBlackboardKey: BlackboardKeySelector;
+	bUseBBKey: boolean;
+	EQSRequest: EQSParametrizedQueryExecutionRequest;
+	static Load(ResourceName: string): BTTask_RunEQSQuery;
+	static Find(Outer: UObject, ResourceName: string): BTTask_RunEQSQuery;
+	static GetDefaultObject(): BTTask_RunEQSQuery;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_RunEQSQuery;
+	static C(Other: UObject | any): BTTask_RunEQSQuery;
+}
+
+declare class BTTask_SetTagCooldown extends BTTaskNode { 
+	CooldownTag: GameplayTag;
+	bAddToExistingDuration: boolean;
+	CooldownDuration: number;
+	static Load(ResourceName: string): BTTask_SetTagCooldown;
+	static Find(Outer: UObject, ResourceName: string): BTTask_SetTagCooldown;
+	static GetDefaultObject(): BTTask_SetTagCooldown;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_SetTagCooldown;
+	static C(Other: UObject | any): BTTask_SetTagCooldown;
+}
+
+declare class BTTask_Wait extends BTTaskNode { 
+	WaitTime: number;
+	RandomDeviation: number;
+	static Load(ResourceName: string): BTTask_Wait;
+	static Find(Outer: UObject, ResourceName: string): BTTask_Wait;
+	static GetDefaultObject(): BTTask_Wait;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_Wait;
+	static C(Other: UObject | any): BTTask_Wait;
+}
+
+declare class BTTask_WaitBlackboardTime extends BTTask_Wait { 
+	BlackboardKey: BlackboardKeySelector;
+	static Load(ResourceName: string): BTTask_WaitBlackboardTime;
+	static Find(Outer: UObject, ResourceName: string): BTTask_WaitBlackboardTime;
+	static GetDefaultObject(): BTTask_WaitBlackboardTime;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_WaitBlackboardTime;
+	static C(Other: UObject | any): BTTask_WaitBlackboardTime;
+}
+
+declare class CrowdAgentInterface extends Interface { 
+	static Load(ResourceName: string): CrowdAgentInterface;
+	static Find(Outer: UObject, ResourceName: string): CrowdAgentInterface;
+	static GetDefaultObject(): CrowdAgentInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CrowdAgentInterface;
+	static C(Other: UObject | any): CrowdAgentInterface;
+}
+
+declare class CrowdFollowingComponent extends PathFollowingComponent { 
+	CharacterMovement: CharacterMovementComponent;
+	CrowdAgentMoveDirection: Vector;
+	AvoidanceGroup: NavAvoidanceMask;
+	GroupsToAvoid: NavAvoidanceMask;
+	GroupsToIgnore: NavAvoidanceMask;
+	static Load(ResourceName: string): CrowdFollowingComponent;
+	static Find(Outer: UObject, ResourceName: string): CrowdFollowingComponent;
+	static GetDefaultObject(): CrowdFollowingComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CrowdFollowingComponent;
+	SuspendCrowdSteering(bSuspend: boolean): void;
+	static C(Other: UObject | any): CrowdFollowingComponent;
+}
+
+declare class CrowdAvoidanceConfig { 
+	VelocityBias: number;
+	DesiredVelocityWeight: number;
+	CurrentVelocityWeight: number;
+	SideBiasWeight: number;
+	ImpactTimeWeight: number;
+	ImpactTimeRange: number;
+	CustomPatternIdx: number;
+	AdaptiveDivisions: number;
+	AdaptiveRings: number;
+	AdaptiveDepth: number;
+	clone() : CrowdAvoidanceConfig;
+	static C(Other: UObject | any): CrowdAvoidanceConfig;
+}
+
+declare class CrowdAvoidanceSamplingPattern { 
+	Angles: number[];
+	Radii: number[];
+	clone() : CrowdAvoidanceSamplingPattern;
+	static C(Other: UObject | any): CrowdAvoidanceSamplingPattern;
+}
+
+declare class CrowdManager extends CrowdManagerBase { 
+	MyNavData: NavigationData;
+	AvoidanceConfig: CrowdAvoidanceConfig[];
+	SamplingPatterns: CrowdAvoidanceSamplingPattern[];
+	MaxAgents: number;
+	MaxAgentRadius: number;
+	MaxAvoidedAgents: number;
+	MaxAvoidedWalls: number;
+	NavmeshCheckInterval: number;
+	PathOptimizationInterval: number;
+	SeparationDirClamp: number;
+	PathOffsetRadiusMultiplier: number;
+	bResolveCollisions: boolean;
+	static Load(ResourceName: string): CrowdManager;
+	static Find(Outer: UObject, ResourceName: string): CrowdManager;
+	static GetDefaultObject(): CrowdManager;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CrowdManager;
+	static C(Other: UObject | any): CrowdManager;
+}
+
+declare class DetourCrowdAIController extends AIController { 
+	static GetDefaultObject(): DetourCrowdAIController;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DetourCrowdAIController;
+	static C(Other: UObject | any): DetourCrowdAIController;
+}
+
+declare class EnvQueryContext_BlueprintBase extends EnvQueryContext { 
+	static Load(ResourceName: string): EnvQueryContext_BlueprintBase;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryContext_BlueprintBase;
+	static GetDefaultObject(): EnvQueryContext_BlueprintBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryContext_BlueprintBase;
+	ProvideSingleLocation(QuerierObject: UObject,QuerierActor: Actor,ResultingLocation?: Vector): {ResultingLocation: Vector};
+	ProvideSingleActor(QuerierObject: UObject,QuerierActor: Actor,ResultingActor?: Actor): {ResultingActor: Actor};
+	ProvideLocationsSet(QuerierObject: UObject,QuerierActor: Actor,ResultingLocationSet?: Vector[]): {ResultingLocationSet: Vector[]};
+	ProvideActorsSet(QuerierObject: UObject,QuerierActor: Actor,ResultingActorsSet?: Actor[]): {ResultingActorsSet: Actor[]};
+	static C(Other: UObject | any): EnvQueryContext_BlueprintBase;
+}
+
+declare class EnvQueryContext_Item extends EnvQueryContext { 
+	static Load(ResourceName: string): EnvQueryContext_Item;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryContext_Item;
+	static GetDefaultObject(): EnvQueryContext_Item;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryContext_Item;
+	static C(Other: UObject | any): EnvQueryContext_Item;
+}
+
+declare class EnvQueryContext_Querier extends EnvQueryContext { 
+	static Load(ResourceName: string): EnvQueryContext_Querier;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryContext_Querier;
+	static GetDefaultObject(): EnvQueryContext_Querier;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryContext_Querier;
+	static C(Other: UObject | any): EnvQueryContext_Querier;
+}
+
+declare class EnvQueryDebugHelpers extends UObject { 
+	static Load(ResourceName: string): EnvQueryDebugHelpers;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryDebugHelpers;
+	static GetDefaultObject(): EnvQueryDebugHelpers;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryDebugHelpers;
+	static C(Other: UObject | any): EnvQueryDebugHelpers;
+}
+
+declare class EnvQueryGenerator_ActorsOfClass extends EnvQueryGenerator { 
+	SearchedActorClass: UnrealEngineClass;
+	GenerateOnlyActorsInRadius: AIDataProviderBoolValue;
+	SearchRadius: AIDataProviderFloatValue;
+	SearchCenter: UnrealEngineClass;
+	static Load(ResourceName: string): EnvQueryGenerator_ActorsOfClass;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_ActorsOfClass;
+	static GetDefaultObject(): EnvQueryGenerator_ActorsOfClass;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_ActorsOfClass;
+	static C(Other: UObject | any): EnvQueryGenerator_ActorsOfClass;
+}
+
+declare class EnvQueryGenerator_BlueprintBase extends EnvQueryGenerator { 
+	GeneratorsActionDescription: string;
+	Context: UnrealEngineClass;
+	GeneratedItemType: UnrealEngineClass;
+	static Load(ResourceName: string): EnvQueryGenerator_BlueprintBase;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_BlueprintBase;
+	static GetDefaultObject(): EnvQueryGenerator_BlueprintBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_BlueprintBase;
+	GetQuerier(): UObject;
+	DoItemGeneration(ContextLocations: Vector[]): void;
+	AddGeneratedVector(GeneratedVector: Vector): void;
+	AddGeneratedActor(GeneratedActor: Actor): void;
+	static C(Other: UObject | any): EnvQueryGenerator_BlueprintBase;
+}
+
+declare class EnvQueryGenerator_Composite extends EnvQueryGenerator { 
+	Generators: EnvQueryGenerator[];
+	bAllowDifferentItemTypes: boolean;
+	bHasMatchingItemType: boolean;
+	ForcedItemType: UnrealEngineClass;
+	static Load(ResourceName: string): EnvQueryGenerator_Composite;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_Composite;
+	static GetDefaultObject(): EnvQueryGenerator_Composite;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_Composite;
+	static C(Other: UObject | any): EnvQueryGenerator_Composite;
+}
+
+declare type EEnvTraceShape = 'Line' | 'Box' | 'Sphere' | 'Capsule' | 'EEnvTraceShape_MAX';
+declare var EEnvTraceShape : { Line:'Line',Box:'Box',Sphere:'Sphere',Capsule:'Capsule',EEnvTraceShape_MAX:'EEnvTraceShape_MAX', };
+declare type EEnvQueryTrace = 'None' | 'Navigation' | 'Geometry' | 'NavigationOverLedges' | 'EEnvQueryTrace_MAX';
+declare var EEnvQueryTrace : { None:'None',Navigation:'Navigation',Geometry:'Geometry',NavigationOverLedges:'NavigationOverLedges',EEnvQueryTrace_MAX:'EEnvQueryTrace_MAX', };
+declare class EnvTraceData { 
+	VersionNum: number;
+	NavigationFilter: UnrealEngineClass;
+	ProjectDown: number;
+	ProjectUp: number;
+	ExtentX: number;
+	ExtentY: number;
+	ExtentZ: number;
+	PostProjectionVerticalOffset: number;
+	TraceChannel: ETraceTypeQuery;
+	SerializedChannel: ECollisionChannel;
+	TraceShape: EEnvTraceShape;
+	TraceMode: EEnvQueryTrace;
+	bTraceComplex: boolean;
+	bOnlyBlockingHits: boolean;
+	bCanTraceOnNavMesh: boolean;
+	bCanTraceOnGeometry: boolean;
+	bCanDisableTrace: boolean;
+	bCanProjectDown: boolean;
+	clone() : EnvTraceData;
+	static C(Other: UObject | any): EnvTraceData;
+}
+
+declare class EnvQueryGenerator_ProjectedPoints extends EnvQueryGenerator { 
+	ProjectionData: EnvTraceData;
+	static Load(ResourceName: string): EnvQueryGenerator_ProjectedPoints;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_ProjectedPoints;
+	static GetDefaultObject(): EnvQueryGenerator_ProjectedPoints;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_ProjectedPoints;
+	static C(Other: UObject | any): EnvQueryGenerator_ProjectedPoints;
+}
+
+declare class EnvQueryGenerator_Cone extends EnvQueryGenerator_ProjectedPoints { 
+	AlignedPointsDistance: AIDataProviderFloatValue;
+	ConeDegrees: AIDataProviderFloatValue;
+	AngleStep: AIDataProviderFloatValue;
+	Range: AIDataProviderFloatValue;
+	CenterActor: UnrealEngineClass;
+	bIncludeContextLocation: boolean;
+	static Load(ResourceName: string): EnvQueryGenerator_Cone;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_Cone;
+	static GetDefaultObject(): EnvQueryGenerator_Cone;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_Cone;
+	static C(Other: UObject | any): EnvQueryGenerator_Cone;
+}
+
+declare class EnvQueryGenerator_CurrentLocation extends EnvQueryGenerator { 
+	QueryContext: UnrealEngineClass;
+	static Load(ResourceName: string): EnvQueryGenerator_CurrentLocation;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_CurrentLocation;
+	static GetDefaultObject(): EnvQueryGenerator_CurrentLocation;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_CurrentLocation;
+	static C(Other: UObject | any): EnvQueryGenerator_CurrentLocation;
+}
+
+declare class AIDataProviderIntValue extends AIDataProviderTypedValue { 
+	DefaultValue: number;
+	clone() : AIDataProviderIntValue;
+	static C(Other: UObject | any): AIDataProviderIntValue;
+}
+
+declare type EEnvDirection = 'TwoPoints' | 'Rotation' | 'EEnvDirection_MAX';
+declare var EEnvDirection : { TwoPoints:'TwoPoints',Rotation:'Rotation',EEnvDirection_MAX:'EEnvDirection_MAX', };
+declare class EnvDirection { 
+	LineFrom: UnrealEngineClass;
+	LineTo: UnrealEngineClass;
+	Rotation: UnrealEngineClass;
+	DirMode: EEnvDirection;
+	clone() : EnvDirection;
+	static C(Other: UObject | any): EnvDirection;
+}
+
+declare class EnvQueryGenerator_Donut extends EnvQueryGenerator_ProjectedPoints { 
+	InnerRadius: AIDataProviderFloatValue;
+	OuterRadius: AIDataProviderFloatValue;
+	NumberOfRings: AIDataProviderIntValue;
+	PointsPerRing: AIDataProviderIntValue;
+	ArcDirection: EnvDirection;
+	ArcAngle: AIDataProviderFloatValue;
+	bUseSpiralPattern: boolean;
+	Center: UnrealEngineClass;
+	bDefineArc: boolean;
+	static Load(ResourceName: string): EnvQueryGenerator_Donut;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_Donut;
+	static GetDefaultObject(): EnvQueryGenerator_Donut;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_Donut;
+	static C(Other: UObject | any): EnvQueryGenerator_Donut;
+}
+
+declare type EPointOnCircleSpacingMethod = 'BySpaceBetween' | 'ByNumberOfPoints' | 'EPointOnCircleSpacingMethod_MAX';
+declare var EPointOnCircleSpacingMethod : { BySpaceBetween:'BySpaceBetween',ByNumberOfPoints:'ByNumberOfPoints',EPointOnCircleSpacingMethod_MAX:'EPointOnCircleSpacingMethod_MAX', };
+declare class EnvQueryGenerator_OnCircle extends EnvQueryGenerator_ProjectedPoints { 
+	CircleRadius: AIDataProviderFloatValue;
+	SpaceBetween: AIDataProviderFloatValue;
+	NumberOfPoints: AIDataProviderIntValue;
+	PointOnCircleSpacingMethod: EPointOnCircleSpacingMethod;
+	ArcDirection: EnvDirection;
+	ArcAngle: AIDataProviderFloatValue;
+	AngleRadians: number;
+	CircleCenter: UnrealEngineClass;
+	bIgnoreAnyContextActorsWhenGeneratingCircle: boolean;
+	CircleCenterZOffset: AIDataProviderFloatValue;
+	TraceData: EnvTraceData;
+	bDefineArc: boolean;
+	static Load(ResourceName: string): EnvQueryGenerator_OnCircle;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_OnCircle;
+	static GetDefaultObject(): EnvQueryGenerator_OnCircle;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_OnCircle;
+	static C(Other: UObject | any): EnvQueryGenerator_OnCircle;
+}
+
+declare class EnvQueryGenerator_SimpleGrid extends EnvQueryGenerator_ProjectedPoints { 
+	GridSize: AIDataProviderFloatValue;
+	SpaceBetween: AIDataProviderFloatValue;
+	GenerateAround: UnrealEngineClass;
+	static Load(ResourceName: string): EnvQueryGenerator_SimpleGrid;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_SimpleGrid;
+	static GetDefaultObject(): EnvQueryGenerator_SimpleGrid;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_SimpleGrid;
+	static C(Other: UObject | any): EnvQueryGenerator_SimpleGrid;
+}
+
+declare class EnvQueryGenerator_PathingGrid extends EnvQueryGenerator_SimpleGrid { 
+	PathToItem: AIDataProviderBoolValue;
+	NavigationFilter: UnrealEngineClass;
+	ScanRangeMultiplier: AIDataProviderFloatValue;
+	static Load(ResourceName: string): EnvQueryGenerator_PathingGrid;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryGenerator_PathingGrid;
+	static GetDefaultObject(): EnvQueryGenerator_PathingGrid;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryGenerator_PathingGrid;
+	static C(Other: UObject | any): EnvQueryGenerator_PathingGrid;
+}
+
+declare class EnvQueryItemType_VectorBase extends EnvQueryItemType { 
+	static Load(ResourceName: string): EnvQueryItemType_VectorBase;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryItemType_VectorBase;
+	static GetDefaultObject(): EnvQueryItemType_VectorBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryItemType_VectorBase;
+	static C(Other: UObject | any): EnvQueryItemType_VectorBase;
+}
+
+declare class EnvQueryItemType_ActorBase extends EnvQueryItemType_VectorBase { 
+	static Load(ResourceName: string): EnvQueryItemType_ActorBase;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryItemType_ActorBase;
+	static GetDefaultObject(): EnvQueryItemType_ActorBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryItemType_ActorBase;
+	static C(Other: UObject | any): EnvQueryItemType_ActorBase;
+}
+
+declare class EnvQueryItemType_Actor extends EnvQueryItemType_ActorBase { 
+	static Load(ResourceName: string): EnvQueryItemType_Actor;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryItemType_Actor;
+	static GetDefaultObject(): EnvQueryItemType_Actor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryItemType_Actor;
+	static C(Other: UObject | any): EnvQueryItemType_Actor;
+}
+
+declare class EnvQueryItemType_Direction extends EnvQueryItemType_VectorBase { 
+	static Load(ResourceName: string): EnvQueryItemType_Direction;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryItemType_Direction;
+	static GetDefaultObject(): EnvQueryItemType_Direction;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryItemType_Direction;
+	static C(Other: UObject | any): EnvQueryItemType_Direction;
+}
+
+declare class EnvQueryItemType_Point extends EnvQueryItemType_VectorBase { 
+	static Load(ResourceName: string): EnvQueryItemType_Point;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryItemType_Point;
+	static GetDefaultObject(): EnvQueryItemType_Point;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryItemType_Point;
+	static C(Other: UObject | any): EnvQueryItemType_Point;
+}
+
+declare type EEnvTestDistance = 'Distance3D' | 'Distance2D' | 'DistanceZ' | 'DistanceAbsoluteZ' | 'EEnvTestDistance_MAX';
+declare var EEnvTestDistance : { Distance3D:'Distance3D',Distance2D:'Distance2D',DistanceZ:'DistanceZ',DistanceAbsoluteZ:'DistanceAbsoluteZ',EEnvTestDistance_MAX:'EEnvTestDistance_MAX', };
+declare class EnvQueryTest_Distance extends EnvQueryTest { 
+	TestMode: EEnvTestDistance;
+	DistanceTo: UnrealEngineClass;
+	static Load(ResourceName: string): EnvQueryTest_Distance;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Distance;
+	static GetDefaultObject(): EnvQueryTest_Distance;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Distance;
+	static C(Other: UObject | any): EnvQueryTest_Distance;
+}
+
+declare type EEnvTestDot = 'Dot3D' | 'Dot2D' | 'EEnvTestDot_MAX';
+declare var EEnvTestDot : { Dot3D:'Dot3D',Dot2D:'Dot2D',EEnvTestDot_MAX:'EEnvTestDot_MAX', };
+declare class EnvQueryTest_Dot extends EnvQueryTest { 
+	LineA: EnvDirection;
+	LineB: EnvDirection;
+	TestMode: EEnvTestDot;
+	bAbsoluteValue: boolean;
+	static Load(ResourceName: string): EnvQueryTest_Dot;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Dot;
+	static GetDefaultObject(): EnvQueryTest_Dot;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Dot;
+	static C(Other: UObject | any): EnvQueryTest_Dot;
+}
+
+declare class EnvQueryTest_GameplayTags extends EnvQueryTest { 
+	TagQueryToMatch: GameplayTagQuery;
+	bUpdatedToUseQuery: boolean;
+	TagsToMatch: EGameplayContainerMatchType;
+	GameplayTags: GameplayTagContainer;
+	static Load(ResourceName: string): EnvQueryTest_GameplayTags;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_GameplayTags;
+	static GetDefaultObject(): EnvQueryTest_GameplayTags;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_GameplayTags;
+	static C(Other: UObject | any): EnvQueryTest_GameplayTags;
+}
+
+declare type EEnvOverlapShape = 'Box' | 'Sphere' | 'Capsule' | 'EEnvOverlapShape_MAX';
+declare var EEnvOverlapShape : { Box:'Box',Sphere:'Sphere',Capsule:'Capsule',EEnvOverlapShape_MAX:'EEnvOverlapShape_MAX', };
+declare class EnvOverlapData { 
+	ExtentX: number;
+	ExtentY: number;
+	ExtentZ: number;
+	ShapeOffset: Vector;
+	OverlapChannel: ECollisionChannel;
+	OverlapShape: EEnvOverlapShape;
+	bOnlyBlockingHits: boolean;
+	bOverlapComplex: boolean;
+	bSkipOverlapQuerier: boolean;
+	clone() : EnvOverlapData;
+	static C(Other: UObject | any): EnvOverlapData;
+}
+
+declare class EnvQueryTest_Overlap extends EnvQueryTest { 
+	OverlapData: EnvOverlapData;
+	static Load(ResourceName: string): EnvQueryTest_Overlap;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Overlap;
+	static GetDefaultObject(): EnvQueryTest_Overlap;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Overlap;
+	static C(Other: UObject | any): EnvQueryTest_Overlap;
+}
+
+declare type EEnvTestPathfinding = 'PathExist' | 'PathCost' | 'PathLength' | 'EEnvTestPathfinding_MAX';
+declare var EEnvTestPathfinding : { PathExist:'PathExist',PathCost:'PathCost',PathLength:'PathLength',EEnvTestPathfinding_MAX:'EEnvTestPathfinding_MAX', };
+declare class EnvQueryTest_Pathfinding extends EnvQueryTest { 
+	TestMode: EEnvTestPathfinding;
+	Context: UnrealEngineClass;
+	PathFromContext: AIDataProviderBoolValue;
+	SkipUnreachable: AIDataProviderBoolValue;
+	FilterClass: UnrealEngineClass;
+	static Load(ResourceName: string): EnvQueryTest_Pathfinding;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Pathfinding;
+	static GetDefaultObject(): EnvQueryTest_Pathfinding;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Pathfinding;
+	static C(Other: UObject | any): EnvQueryTest_Pathfinding;
+}
+
+declare class EnvQueryTest_PathfindingBatch extends EnvQueryTest_Pathfinding { 
+	ScanRangeMultiplier: AIDataProviderFloatValue;
+	static Load(ResourceName: string): EnvQueryTest_PathfindingBatch;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_PathfindingBatch;
+	static GetDefaultObject(): EnvQueryTest_PathfindingBatch;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_PathfindingBatch;
+	static C(Other: UObject | any): EnvQueryTest_PathfindingBatch;
+}
+
+declare class EnvQueryTest_Project extends EnvQueryTest { 
+	ProjectionData: EnvTraceData;
+	static Load(ResourceName: string): EnvQueryTest_Project;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Project;
+	static GetDefaultObject(): EnvQueryTest_Project;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Project;
+	static C(Other: UObject | any): EnvQueryTest_Project;
+}
+
+declare class EnvQueryTest_Random extends EnvQueryTest { 
+	static Load(ResourceName: string): EnvQueryTest_Random;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Random;
+	static GetDefaultObject(): EnvQueryTest_Random;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Random;
+	static C(Other: UObject | any): EnvQueryTest_Random;
+}
+
+declare class EnvQueryTest_Trace extends EnvQueryTest { 
+	TraceData: EnvTraceData;
+	TraceFromContext: AIDataProviderBoolValue;
+	ItemHeightOffset: AIDataProviderFloatValue;
+	ContextHeightOffset: AIDataProviderFloatValue;
+	Context: UnrealEngineClass;
+	static Load(ResourceName: string): EnvQueryTest_Trace;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Trace;
+	static GetDefaultObject(): EnvQueryTest_Trace;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Trace;
+	static C(Other: UObject | any): EnvQueryTest_Trace;
+}
+
+declare class EnvQueryTest_Volume extends EnvQueryTest { 
+	VolumeContext: UnrealEngineClass;
+	VolumeClass: UnrealEngineClass;
+	bDoComplexVolumeTest: boolean;
+	static Load(ResourceName: string): EnvQueryTest_Volume;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Volume;
+	static GetDefaultObject(): EnvQueryTest_Volume;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Volume;
+	static C(Other: UObject | any): EnvQueryTest_Volume;
+}
+
+declare class EnvQueryTypes extends UObject { 
+	static Load(ResourceName: string): EnvQueryTypes;
+	static Find(Outer: UObject, ResourceName: string): EnvQueryTypes;
+	static GetDefaultObject(): EnvQueryTypes;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTypes;
+	static C(Other: UObject | any): EnvQueryTypes;
+}
+
+declare class EQSQueryResultSourceInterface extends Interface { 
+	static Load(ResourceName: string): EQSQueryResultSourceInterface;
+	static Find(Outer: UObject, ResourceName: string): EQSQueryResultSourceInterface;
+	static GetDefaultObject(): EQSQueryResultSourceInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EQSQueryResultSourceInterface;
+	static C(Other: UObject | any): EQSQueryResultSourceInterface;
+}
+
+declare class EQSRenderingComponent extends PrimitiveComponent { 
+	static Load(ResourceName: string): EQSRenderingComponent;
+	static Find(Outer: UObject, ResourceName: string): EQSRenderingComponent;
+	static GetDefaultObject(): EQSRenderingComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EQSRenderingComponent;
+	static C(Other: UObject | any): EQSRenderingComponent;
+}
+
+declare type EEnvQueryHightlightMode = 'All' | 'Best5Pct' | 'Best25Pct' | 'EEnvQueryHightlightMode_MAX';
+declare var EEnvQueryHightlightMode : { All:'All',Best5Pct:'Best5Pct',Best25Pct:'Best25Pct',EEnvQueryHightlightMode_MAX:'EEnvQueryHightlightMode_MAX', };
+declare class EQSTestingPawn extends Character { 
+	QueryTemplate: EnvQuery;
+	QueryParams: EnvNamedValue[];
+	QueryConfig: AIDynamicParam[];
+	TimeLimitPerStep: number;
+	StepToDebugDraw: number;
+	HighlightMode: EEnvQueryHightlightMode;
+	bDrawLabels: boolean;
+	bDrawFailedItems: boolean;
+	bReRunQueryOnlyOnFinishedMove: boolean;
+	bShouldBeVisibleInGame: boolean;
+	bTickDuringGame: boolean;
+	QueryingMode: EEnvQueryRunMode;
+	NavAgentProperties: NavAgentProperties;
+	EdRenderComp: EQSRenderingComponent;
+	static GetDefaultObject(): EQSTestingPawn;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EQSTestingPawn;
+	static C(Other: UObject | any): EQSTestingPawn;
+}
+
+declare class GenericTeamAgentInterface extends Interface { 
+	static Load(ResourceName: string): GenericTeamAgentInterface;
+	static Find(Outer: UObject, ResourceName: string): GenericTeamAgentInterface;
+	static GetDefaultObject(): GenericTeamAgentInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GenericTeamAgentInterface;
+	static C(Other: UObject | any): GenericTeamAgentInterface;
+}
+
+declare class GridPathAIController extends AIController { 
+	static GetDefaultObject(): GridPathAIController;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GridPathAIController;
+	static C(Other: UObject | any): GridPathAIController;
+}
+
+declare class GridPathFollowingComponent extends PathFollowingComponent { 
+	GridManager: NavLocalGridManager;
+	static Load(ResourceName: string): GridPathFollowingComponent;
+	static Find(Outer: UObject, ResourceName: string): GridPathFollowingComponent;
+	static GetDefaultObject(): GridPathFollowingComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GridPathFollowingComponent;
+	static C(Other: UObject | any): GridPathFollowingComponent;
+}
+
+declare class NavFilter_AIControllerDefault extends NavigationQueryFilter { 
+	static Load(ResourceName: string): NavFilter_AIControllerDefault;
+	static Find(Outer: UObject, ResourceName: string): NavFilter_AIControllerDefault;
+	static GetDefaultObject(): NavFilter_AIControllerDefault;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavFilter_AIControllerDefault;
+	static C(Other: UObject | any): NavFilter_AIControllerDefault;
+}
+
+declare class NavLinkProxy extends Actor { 
+	PointLinks: NavigationLink[];
+	SegmentLinks: NavigationSegmentLink[];
+	SmartLinkComp: NavLinkCustomComponent;
+	bSmartLinkIsRelevant: boolean;
+	EdRenderComp: NavLinkRenderingComponent;
+	SpriteComponent: BillboardComponent;
+	OnSmartLinkReached: UnrealEngineMulticastDelegate<(MovingActor: Actor, DestinationPoint: Vector) => void>;
+	static GetDefaultObject(): NavLinkProxy;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavLinkProxy;
+	SetSmartLinkEnabled(bEnabled: boolean): void;
+	ResumePathFollowing(Agent: Actor): void;
+	ReceiveSmartLinkReached(Agent: Actor,Destination: Vector): void;
+	IsSmartLinkEnabled(): boolean;
+	HasMovingAgents(): boolean;
+	static C(Other: UObject | any): NavLinkProxy;
+}
+
+declare class PathFollowingManager extends UObject { 
+	static Load(ResourceName: string): PathFollowingManager;
+	static Find(Outer: UObject, ResourceName: string): PathFollowingManager;
+	static GetDefaultObject(): PathFollowingManager;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PathFollowingManager;
+	static C(Other: UObject | any): PathFollowingManager;
+}
+
+declare class PawnAction_BlueprintBase extends PawnAction { 
+	static Load(ResourceName: string): PawnAction_BlueprintBase;
+	static Find(Outer: UObject, ResourceName: string): PawnAction_BlueprintBase;
+	static GetDefaultObject(): PawnAction_BlueprintBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnAction_BlueprintBase;
+	ActionTick(ControlledPawn: Pawn,DeltaSeconds: number): void;
+	ActionStart(ControlledPawn: Pawn): void;
+	ActionResume(ControlledPawn: Pawn): void;
+	ActionPause(ControlledPawn: Pawn): void;
+	ActionFinished(ControlledPawn: Pawn,WithResult: EPawnActionResult): void;
+	static C(Other: UObject | any): PawnAction_BlueprintBase;
+}
+
+declare class PawnAction_Move extends PawnAction { 
+	GoalActor: Actor;
+	GoalLocation: Vector;
+	AcceptableRadius: number;
+	FilterClass: UnrealEngineClass;
+	bAllowStrafe: boolean;
+	bFinishOnOverlap: boolean;
+	bUsePathfinding: boolean;
+	bAllowPartialPath: boolean;
+	bProjectGoalToNavigation: boolean;
+	bUpdatePathToGoal: boolean;
+	bAbortChildActionOnPathChange: boolean;
+	static Load(ResourceName: string): PawnAction_Move;
+	static Find(Outer: UObject, ResourceName: string): PawnAction_Move;
+	static GetDefaultObject(): PawnAction_Move;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnAction_Move;
+	static C(Other: UObject | any): PawnAction_Move;
+}
+
+declare type EPawnActionFailHandling = 'RequireSuccess' | 'IgnoreFailure' | 'EPawnActionFailHandling_MAX';
+declare var EPawnActionFailHandling : { RequireSuccess:'RequireSuccess',IgnoreFailure:'IgnoreFailure',EPawnActionFailHandling_MAX:'EPawnActionFailHandling_MAX', };
+declare class PawnAction_Repeat extends PawnAction { 
+	ActionToRepeat: PawnAction;
+	RecentActionCopy: PawnAction;
+	ChildFailureHandlingMode: EPawnActionFailHandling;
+	static Load(ResourceName: string): PawnAction_Repeat;
+	static Find(Outer: UObject, ResourceName: string): PawnAction_Repeat;
+	static GetDefaultObject(): PawnAction_Repeat;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnAction_Repeat;
+	static C(Other: UObject | any): PawnAction_Repeat;
+}
+
+declare class PawnAction_Sequence extends PawnAction { 
+	ActionSequence: PawnAction[];
+	ChildFailureHandlingMode: EPawnActionFailHandling;
+	RecentActionCopy: PawnAction;
+	static Load(ResourceName: string): PawnAction_Sequence;
+	static Find(Outer: UObject, ResourceName: string): PawnAction_Sequence;
+	static GetDefaultObject(): PawnAction_Sequence;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnAction_Sequence;
+	static C(Other: UObject | any): PawnAction_Sequence;
+}
+
+declare class PawnAction_Wait extends PawnAction { 
+	TimeToWait: number;
+	static Load(ResourceName: string): PawnAction_Wait;
+	static Find(Outer: UObject, ResourceName: string): PawnAction_Wait;
+	static GetDefaultObject(): PawnAction_Wait;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnAction_Wait;
+	static C(Other: UObject | any): PawnAction_Wait;
+}
+
+declare class PawnSensingComponent extends ActorComponent { 
+	HearingThreshold: number;
+	LOSHearingThreshold: number;
+	SightRadius: number;
+	SensingInterval: number;
+	HearingMaxSoundAge: number;
+	bEnableSensingUpdates: boolean;
+	bOnlySensePlayers: boolean;
+	bSeePawns: boolean;
+	bHearNoises: boolean;
+	OnSeePawn: UnrealEngineMulticastDelegate<(Pawn: Pawn) => void>;
+	OnHearNoise: UnrealEngineMulticastDelegate<(Instigator: Pawn, Location: Vector, Volume: number) => void>;
+	PeripheralVisionAngle: number;
+	PeripheralVisionCosine: number;
+	static Load(ResourceName: string): PawnSensingComponent;
+	static Find(Outer: UObject, ResourceName: string): PawnSensingComponent;
+	static GetDefaultObject(): PawnSensingComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnSensingComponent;
+	SetSensingUpdatesEnabled(bEnabled: boolean): void;
+	SetSensingInterval(NewSensingInterval: number): void;
+	SetPeripheralVisionAngle(NewPeripheralVisionAngle: number): void;
+	GetPeripheralVisionCosine(): number;
+	GetPeripheralVisionAngle(): number;
+	static C(Other: UObject | any): PawnSensingComponent;
+}
+
+declare class VisualLoggerExtension extends UObject { 
+	static Load(ResourceName: string): VisualLoggerExtension;
+	static Find(Outer: UObject, ResourceName: string): VisualLoggerExtension;
+	static GetDefaultObject(): VisualLoggerExtension;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VisualLoggerExtension;
+	static C(Other: UObject | any): VisualLoggerExtension;
+}
+
 declare class DatasmithObjectTemplate extends UObject { 
 	static Load(ResourceName: string): DatasmithObjectTemplate;
 	static Find(Outer: UObject, ResourceName: string): DatasmithObjectTemplate;
@@ -2630,24 +6055,55 @@ declare class DatasmithActorTemplate extends DatasmithObjectTemplate {
 	static C(Other: UObject | any): DatasmithActorTemplate;
 }
 
-declare type EDatasmithAreaLightActorShape = 'Rectangle' | 'Disc' | 'Sphere' | 'Cylinder' | 'EDatasmithAreaLightActorShape_MAX';
-declare var EDatasmithAreaLightActorShape : { Rectangle:'Rectangle',Disc:'Disc',Sphere:'Sphere',Cylinder:'Cylinder',EDatasmithAreaLightActorShape_MAX:'EDatasmithAreaLightActorShape_MAX', };
+declare class DatasmithAdditionalData extends UObject { 
+	static Load(ResourceName: string): DatasmithAdditionalData;
+	static Find(Outer: UObject, ResourceName: string): DatasmithAdditionalData;
+	static GetDefaultObject(): DatasmithAdditionalData;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithAdditionalData;
+	static C(Other: UObject | any): DatasmithAdditionalData;
+}
+
+declare type EDatasmithAreaLightActorType = 'Point' | 'Spot' | 'Rect' | 'EDatasmithAreaLightActorType_MAX';
+declare var EDatasmithAreaLightActorType : { Point:'Point',Spot:'Spot',Rect:'Rect',EDatasmithAreaLightActorType_MAX:'EDatasmithAreaLightActorType_MAX', };
+declare type EDatasmithAreaLightActorShape = 'Rectangle' | 'Disc' | 'Sphere' | 'Cylinder' | 'None' | 'EDatasmithAreaLightActorShape_MAX';
+declare var EDatasmithAreaLightActorShape : { Rectangle:'Rectangle',Disc:'Disc',Sphere:'Sphere',Cylinder:'Cylinder',None:'None',EDatasmithAreaLightActorShape_MAX:'EDatasmithAreaLightActorShape_MAX', };
 declare class DatasmithAreaLightActor extends Actor { 
+	LightType: EDatasmithAreaLightActorType;
 	LightShape: EDatasmithAreaLightActorShape;
 	Dimensions: Vector2D;
-	Color: LinearColor;
 	Intensity: number;
+	IntensityUnits: ELightUnits;
+	Color: LinearColor;
+	Temperature: number;
+	IESTexture: TextureLightProfile;
+	bUseIESBrightness: boolean;
+	IESBrightnessScale: number;
+	Rotation: Rotator;
+	SourceRadius: number;
+	SourceLength: number;
+	AttenuationRadius: number;
+	SpotlightInnerAngle: number;
+	SpotlightOuterAngle: number;
 	static GetDefaultObject(): DatasmithAreaLightActor;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithAreaLightActor;
 	static C(Other: UObject | any): DatasmithAreaLightActor;
 }
 
 declare class DatasmithAreaLightActorTemplate extends DatasmithObjectTemplate { 
+	LightType: EDatasmithAreaLightActorType;
 	LightShape: EDatasmithAreaLightActorShape;
 	Dimensions: Vector2D;
 	Color: LinearColor;
 	Intensity: number;
-	bHidden: boolean;
+	IntensityUnits: ELightUnits;
+	Temperature: number;
+	IESTexture: TextureLightProfile;
+	bUseIESBrightness: boolean;
+	IESBrightnessScale: number;
+	Rotation: Rotator;
+	SourceRadius: number;
+	SourceLength: number;
+	AttenuationRadius: number;
 	static Load(ResourceName: string): DatasmithAreaLightActorTemplate;
 	static Find(Outer: UObject, ResourceName: string): DatasmithAreaLightActorTemplate;
 	static GetDefaultObject(): DatasmithAreaLightActorTemplate;
@@ -2663,6 +6119,7 @@ declare class DatasmithAssetImportOptions {
 
 declare class DatasmithAssetImportData extends AssetImportData { 
 	AssetImportOptions: DatasmithAssetImportOptions;
+	AdditionalData: DatasmithAdditionalData[];
 	static Load(ResourceName: string): DatasmithAssetImportData;
 	static Find(Outer: UObject, ResourceName: string): DatasmithAssetImportData;
 	static GetDefaultObject(): DatasmithAssetImportData;
@@ -2692,10 +6149,13 @@ declare class DatasmithStaticMeshImportData extends DatasmithAssetImportData {
 	static C(Other: UObject | any): DatasmithStaticMeshImportData;
 }
 
+declare type EDatasmithCADStitchingTechnique = 'StitchingNone' | 'StitchingHeal' | 'StitchingSew' | 'EDatasmithCADStitchingTechnique_MAX';
+declare var EDatasmithCADStitchingTechnique : { StitchingNone:'StitchingNone',StitchingHeal:'StitchingHeal',StitchingSew:'StitchingSew',EDatasmithCADStitchingTechnique_MAX:'EDatasmithCADStitchingTechnique_MAX', };
 declare class DatasmithTessellationOptions { 
 	ChordTolerance: number;
 	MaxEdgeLength: number;
 	NormalTolerance: number;
+	StitchingTechnique: EDatasmithCADStitchingTechnique;
 	clone() : DatasmithTessellationOptions;
 	static C(Other: UObject | any): DatasmithTessellationOptions;
 }
@@ -2722,6 +6182,7 @@ declare class DatasmithImportBaseOptions {
 	bIncludeMaterial: boolean;
 	bIncludeLight: boolean;
 	bIncludeCamera: boolean;
+	bIncludeAnimation: boolean;
 	AssetOptions: DatasmithAssetImportOptions;
 	StaticMeshOptions: DatasmithStaticMeshImportOptions;
 	clone() : DatasmithImportBaseOptions;
@@ -2737,6 +6198,15 @@ declare class DatasmithSceneImportData extends AssetImportData {
 	static C(Other: UObject | any): DatasmithSceneImportData;
 }
 
+declare class DatasmithTranslatedSceneImportData extends DatasmithSceneImportData { 
+	OriginFactory: UnrealEngineClass;
+	static Load(ResourceName: string): DatasmithTranslatedSceneImportData;
+	static Find(Outer: UObject, ResourceName: string): DatasmithTranslatedSceneImportData;
+	static GetDefaultObject(): DatasmithTranslatedSceneImportData;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithTranslatedSceneImportData;
+	static C(Other: UObject | any): DatasmithTranslatedSceneImportData;
+}
+
 declare class DatasmithCADImportSceneData extends DatasmithSceneImportData { 
 	TessellationOptions: DatasmithTessellationOptions;
 	static Load(ResourceName: string): DatasmithCADImportSceneData;
@@ -2754,6 +6224,28 @@ declare class DatasmithMDLSceneImportData extends DatasmithSceneImportData {
 	static C(Other: UObject | any): DatasmithMDLSceneImportData;
 }
 
+declare class DatasmithGLTFSceneImportData extends DatasmithSceneImportData { 
+	Generator: string;
+	Version: number;
+	Author: string;
+	License: string;
+	Source: string;
+	static Load(ResourceName: string): DatasmithGLTFSceneImportData;
+	static Find(Outer: UObject, ResourceName: string): DatasmithGLTFSceneImportData;
+	static GetDefaultObject(): DatasmithGLTFSceneImportData;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithGLTFSceneImportData;
+	static C(Other: UObject | any): DatasmithGLTFSceneImportData;
+}
+
+declare class DatasmithStaticMeshGLTFImportData extends DatasmithStaticMeshImportData { 
+	SourceMeshName: string;
+	static Load(ResourceName: string): DatasmithStaticMeshGLTFImportData;
+	static Find(Outer: UObject, ResourceName: string): DatasmithStaticMeshGLTFImportData;
+	static GetDefaultObject(): DatasmithStaticMeshGLTFImportData;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithStaticMeshGLTFImportData;
+	static C(Other: UObject | any): DatasmithStaticMeshGLTFImportData;
+}
+
 declare class DatasmithDeltaGenAssetImportData extends DatasmithAssetImportData { 
 	static Load(ResourceName: string): DatasmithDeltaGenAssetImportData;
 	static Find(Outer: UObject, ResourceName: string): DatasmithDeltaGenAssetImportData;
@@ -2786,6 +6278,40 @@ declare class DatasmithVREDSceneImportData extends DatasmithSceneImportData {
 	static C(Other: UObject | any): DatasmithVREDSceneImportData;
 }
 
+declare class DatasmithIFCSceneImportData extends DatasmithSceneImportData { 
+	static Load(ResourceName: string): DatasmithIFCSceneImportData;
+	static Find(Outer: UObject, ResourceName: string): DatasmithIFCSceneImportData;
+	static GetDefaultObject(): DatasmithIFCSceneImportData;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithIFCSceneImportData;
+	static C(Other: UObject | any): DatasmithIFCSceneImportData;
+}
+
+declare class DatasmithStaticMeshIFCImportData extends DatasmithStaticMeshImportData { 
+	SourceGlobalId: string;
+	static Load(ResourceName: string): DatasmithStaticMeshIFCImportData;
+	static Find(Outer: UObject, ResourceName: string): DatasmithStaticMeshIFCImportData;
+	static GetDefaultObject(): DatasmithStaticMeshIFCImportData;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithStaticMeshIFCImportData;
+	static C(Other: UObject | any): DatasmithStaticMeshIFCImportData;
+}
+
+declare class DatasmithCameraLookatTrackingSettingsTemplate { 
+	bEnableLookAtTracking: boolean;
+	bAllowRoll: boolean;
+	ActorToTrack: Actor;
+	clone() : DatasmithCameraLookatTrackingSettingsTemplate;
+	static C(Other: UObject | any): DatasmithCameraLookatTrackingSettingsTemplate;
+}
+
+declare class DatasmithCineCameraActorTemplate extends DatasmithObjectTemplate { 
+	LookatTrackingSettings: DatasmithCameraLookatTrackingSettingsTemplate;
+	static Load(ResourceName: string): DatasmithCineCameraActorTemplate;
+	static Find(Outer: UObject, ResourceName: string): DatasmithCineCameraActorTemplate;
+	static GetDefaultObject(): DatasmithCineCameraActorTemplate;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithCineCameraActorTemplate;
+	static C(Other: UObject | any): DatasmithCineCameraActorTemplate;
+}
+
 declare class DatasmithCameraFilmbackSettingsTemplate { 
 	SensorWidth: number;
 	SensorHeight: number;
@@ -2813,12 +6339,16 @@ declare class DatasmithPostProcessSettingsTemplate {
 	bOverride_FilmWhitePoint: boolean;
 	bOverride_AutoExposureMethod: boolean;
 	bOverride_CameraISO: boolean;
+	bOverride_CameraShutterSpeed: boolean;
+	bOverride_DepthOfFieldFstop: boolean;
 	WhiteTemp: number;
 	VignetteIntensity: number;
 	FilmWhitePoint: LinearColor;
 	ColorSaturation: Vector4;
 	AutoExposureMethod: EAutoExposureMethod;
 	CameraISO: number;
+	CameraShutterSpeed: number;
+	DepthOfFieldFstop: number;
 	clone() : DatasmithPostProcessSettingsTemplate;
 	static C(Other: UObject | any): DatasmithPostProcessSettingsTemplate;
 }
@@ -2850,6 +6380,31 @@ declare class DatasmithContentBlueprintLibrary extends BlueprintFunctionLibrary
 	static C(Other: UObject | any): DatasmithContentBlueprintLibrary;
 }
 
+declare class DatasmithCustomActionBase extends UObject { 
+	static Load(ResourceName: string): DatasmithCustomActionBase;
+	static Find(Outer: UObject, ResourceName: string): DatasmithCustomActionBase;
+	static GetDefaultObject(): DatasmithCustomActionBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithCustomActionBase;
+	static C(Other: UObject | any): DatasmithCustomActionBase;
+}
+
+declare class DatasmithImportedSequencesActor extends Actor { 
+	ImportedSequences: LevelSequence[];
+	static GetDefaultObject(): DatasmithImportedSequencesActor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithImportedSequencesActor;
+	PlayLevelSequence(SequenceToPlay: LevelSequence): void;
+	static C(Other: UObject | any): DatasmithImportedSequencesActor;
+}
+
+declare class DatasmithCommonTessellationOptions extends UObject { 
+	Options: DatasmithTessellationOptions;
+	static Load(ResourceName: string): DatasmithCommonTessellationOptions;
+	static Find(Outer: UObject, ResourceName: string): DatasmithCommonTessellationOptions;
+	static GetDefaultObject(): DatasmithCommonTessellationOptions;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithCommonTessellationOptions;
+	static C(Other: UObject | any): DatasmithCommonTessellationOptions;
+}
+
 declare type EDatasmithImportSearchPackagePolicy = 'Current' | 'All' | 'EDatasmithImportSearchPackagePolicy_MAX';
 declare var EDatasmithImportSearchPackagePolicy : { Current:'Current',All:'All',EDatasmithImportSearchPackagePolicy_MAX:'EDatasmithImportSearchPackagePolicy_MAX', };
 declare type EDatasmithImportAssetConflictPolicy = 'Replace' | 'Update' | 'Use' | 'Ignore' | 'EDatasmithImportAssetConflictPolicy_MAX';
@@ -2875,8 +6430,9 @@ declare class DatasmithImportOptions extends UObject {
 	OtherActorImportPolicy: EDatasmithImportActorPolicy;
 	MaterialQuality: EDatasmithImportMaterialQuality;
 	BaseOptions: DatasmithImportBaseOptions;
-	TessellationOptions: DatasmithTessellationOptions;
 	ReimportOptions: DatasmithReimportOptions;
+	Filename: string;
+	FilePath: string;
 	static Load(ResourceName: string): DatasmithImportOptions;
 	static Find(Outer: UObject, ResourceName: string): DatasmithImportOptions;
 	static GetDefaultObject(): DatasmithImportOptions;
@@ -2912,6 +6468,24 @@ declare class DatasmithLightComponentTemplate extends DatasmithObjectTemplate {
 	static C(Other: UObject | any): DatasmithLightComponentTemplate;
 }
 
+declare class DatasmithStaticParameterSetTemplate { 
+	StaticSwitchParameters: any;
+	clone() : DatasmithStaticParameterSetTemplate;
+	static C(Other: UObject | any): DatasmithStaticParameterSetTemplate;
+}
+
+declare class DatasmithMaterialInstanceTemplate extends DatasmithObjectTemplate { 
+	ScalarParameterValues: any;
+	VectorParameterValues: any;
+	TextureParameterValues: any;
+	StaticParameters: DatasmithStaticParameterSetTemplate;
+	static Load(ResourceName: string): DatasmithMaterialInstanceTemplate;
+	static Find(Outer: UObject, ResourceName: string): DatasmithMaterialInstanceTemplate;
+	static GetDefaultObject(): DatasmithMaterialInstanceTemplate;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithMaterialInstanceTemplate;
+	static C(Other: UObject | any): DatasmithMaterialInstanceTemplate;
+}
+
 declare class DatasmithPointLightComponentTemplate extends DatasmithObjectTemplate { 
 	IntensityUnits: ELightUnits;
 	SourceRadius: number;
@@ -2924,9 +6498,25 @@ declare class DatasmithPointLightComponentTemplate extends DatasmithObjectTempla
 	static C(Other: UObject | any): DatasmithPointLightComponentTemplate;
 }
 
+declare class DatasmithPostProcessVolumeTemplate extends DatasmithObjectTemplate { 
+	Settings: DatasmithPostProcessSettingsTemplate;
+	bEnabled: boolean;
+	bUnbound: boolean;
+	static Load(ResourceName: string): DatasmithPostProcessVolumeTemplate;
+	static Find(Outer: UObject, ResourceName: string): DatasmithPostProcessVolumeTemplate;
+	static GetDefaultObject(): DatasmithPostProcessVolumeTemplate;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithPostProcessVolumeTemplate;
+	static C(Other: UObject | any): DatasmithPostProcessVolumeTemplate;
+}
+
 declare class DatasmithScene extends UObject { 
+	DataprepRecipeBP: Blueprint;
 	AssetImportData: DatasmithSceneImportData;
 	BulkDataVersion: number;
+	StaticMeshes: any;
+	Textures: any;
+	Materials: any;
+	LevelSequences: any;
 	static Load(ResourceName: string): DatasmithScene;
 	static Find(Outer: UObject, ResourceName: string): DatasmithScene;
 	static GetDefaultObject(): DatasmithScene;
@@ -2957,7 +6547,7 @@ declare class DatasmithSceneComponentTemplate extends DatasmithObjectTemplate {
 declare class DatasmithSkyLightComponentTemplate extends DatasmithObjectTemplate { 
 	SourceType: ESkyLightSourceType;
 	CubemapResolution: number;
-	Cubemap: TextureCube;
+	CubeMap: TextureCube;
 	static Load(ResourceName: string): DatasmithSkyLightComponentTemplate;
 	static Find(Outer: UObject, ResourceName: string): DatasmithSkyLightComponentTemplate;
 	static GetDefaultObject(): DatasmithSkyLightComponentTemplate;
@@ -2975,7 +6565,7 @@ declare class DatasmithSpotLightComponentTemplate extends DatasmithObjectTemplat
 	static C(Other: UObject | any): DatasmithSpotLightComponentTemplate;
 }
 
-declare class DatasmithStaticMeshComponentTemplate extends DatasmithSceneComponentTemplate { 
+declare class DatasmithStaticMeshComponentTemplate extends DatasmithObjectTemplate { 
 	StaticMesh: StaticMesh;
 	OverrideMaterials: MaterialInterface[];
 	static Load(ResourceName: string): DatasmithStaticMeshComponentTemplate;
@@ -3027,36 +6617,6 @@ declare class DatasmithStaticMeshTemplate extends DatasmithObjectTemplate {
 	static C(Other: UObject | any): DatasmithStaticMeshTemplate;
 }
 
-declare class MRMeshComponent extends PrimitiveComponent { 
-	Material: MaterialInterface;
-	bCreateMeshProxySections: boolean;
-	bUpdateNavMeshOnMeshUpdate: boolean;
-	BodySetups: BodySetup[];
-	static Load(ResourceName: string): MRMeshComponent;
-	static Find(Outer: UObject, ResourceName: string): MRMeshComponent;
-	static GetDefaultObject(): MRMeshComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MRMeshComponent;
-	IsConnected(): boolean;
-	ForceNavMeshUpdate(): void;
-	Clear(): void;
-	static C(Other: UObject | any): MRMeshComponent;
-}
-
-declare class MeshReconstructorBase extends UObject { 
-	static Load(ResourceName: string): MeshReconstructorBase;
-	static Find(Outer: UObject, ResourceName: string): MeshReconstructorBase;
-	static GetDefaultObject(): MeshReconstructorBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshReconstructorBase;
-	StopReconstruction(): void;
-	StartReconstruction(): void;
-	PauseReconstruction(): void;
-	IsReconstructionStarted(): boolean;
-	IsReconstructionPaused(): boolean;
-	DisconnectMRMesh(): void;
-	ConnectMRMesh(Mesh: MRMeshComponent): void;
-	static C(Other: UObject | any): MeshReconstructorBase;
-}
-
 declare class MagicLeapSecureStorage extends BlueprintFunctionLibrary { 
 	static Load(ResourceName: string): MagicLeapSecureStorage;
 	static Find(Outer: UObject, ResourceName: string): MagicLeapSecureStorage;
@@ -3084,19 +6644,11 @@ declare class MagicLeapSecureStorage extends BlueprintFunctionLibrary {
 
 declare class CameraCaptureComponent extends ActorComponent { 
 	CaptureLogMessage: UnrealEngineMulticastDelegate<(LogMessage: string) => void>;
-	CaptureImgToFileSuccess: UnrealEngineMulticastDelegate<(FilePath: string) => void>;
-	CaptureImgToFileFailure: UnrealEngineMulticastDelegate<() => void>;
-	CaptureImgToTextureSuccess: UnrealEngineMulticastDelegate<(CaptureTexture: Texture2D) => void>;
-	CaptureImgToTextureFailure: UnrealEngineMulticastDelegate<() => void>;
-	CaptureVidToFileSuccess: UnrealEngineMulticastDelegate<(FilePath: string) => void>;
-	CaptureVidToFileFailure: UnrealEngineMulticastDelegate<() => void>;
 	static Load(ResourceName: string): CameraCaptureComponent;
 	static Find(Outer: UObject, ResourceName: string): CameraCaptureComponent;
 	static GetDefaultObject(): CameraCaptureComponent;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraCaptureComponent;
-	CaptureVideoToFileAsync(VideoLength: number): boolean;
-	CaptureImageToTextureAsync(): boolean;
-	CaptureImageToFileAsync(): boolean;
+	IsCapturing(): boolean;
 	static C(Other: UObject | any): CameraCaptureComponent;
 }
 
@@ -3115,7 +6667,7 @@ declare class ImageTrackerComponent extends SceneComponent {
 	static Find(Outer: UObject, ResourceName: string): ImageTrackerComponent;
 	static GetDefaultObject(): ImageTrackerComponent;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImageTrackerComponent;
-	SetTargetAsync(ImageTarget: Texture2D): void;
+	SetTargetAsync(ImageTarget: Texture2D): boolean;
 	static C(Other: UObject | any): ImageTrackerComponent;
 }
 
@@ -3256,6 +6808,7 @@ declare class MagicLeapPrivileges extends ActorComponent {
 
 declare class MagicLeapSettings extends UObject { 
 	bEnableZI: boolean;
+	bUseVulkanForZI: boolean;
 	static Load(ResourceName: string): MagicLeapSettings;
 	static Find(Outer: UObject, ResourceName: string): MagicLeapSettings;
 	static GetDefaultObject(): MagicLeapSettings;
@@ -3263,14 +6816,50 @@ declare class MagicLeapSettings extends UObject {
 	static C(Other: UObject | any): MagicLeapSettings;
 }
 
-declare type EMeshType = 'Triangles' | 'PointCloud' | 'EMeshType_MAX';
-declare var EMeshType : { Triangles:'Triangles',PointCloud:'PointCloud',EMeshType_MAX:'EMeshType_MAX', };
+declare type EMeshState = 'New' | 'Updated' | 'Deleted' | 'Unchanged' | 'EMeshState_MAX';
+declare var EMeshState : { New:'New',Updated:'Updated',Deleted:'Deleted',Unchanged:'Unchanged',EMeshState_MAX:'EMeshState_MAX', };
+declare class MeshBlockInfo { 
+	BlockID: Guid;
+	BlockPosition: Vector;
+	BlockOrientation: Rotator;
+	BlockDimensions: Vector;
+	Timestamp: Timespan;
+	BlockState: EMeshState;
+	clone() : MeshBlockInfo;
+	static C(Other: UObject | any): MeshBlockInfo;
+}
+
+declare class MLTrackingMeshInfo { 
+	Timestamp: Timespan;
+	BlockData: MeshBlockInfo[];
+	clone() : MLTrackingMeshInfo;
+	static C(Other: UObject | any): MLTrackingMeshInfo;
+}
+
 declare type EMeshLOD = 'Minimum' | 'Medium' | 'Maximum' | 'EMeshLOD_MAX';
 declare var EMeshLOD : { Minimum:'Minimum',Medium:'Medium',Maximum:'Maximum',EMeshLOD_MAX:'EMeshLOD_MAX', };
-declare type EMLMeshVertexColorMode = 'None' | 'Confidence' | 'Block' | 'EMLMeshVertexColorMode_MAX';
-declare var EMLMeshVertexColorMode : { None:'None',Confidence:'Confidence',Block:'Block',EMLMeshVertexColorMode_MAX:'EMLMeshVertexColorMode_MAX', };
+declare class MeshBlockRequest { 
+	BlockID: Guid;
+	LevelOfDetail: EMeshLOD;
+	clone() : MeshBlockRequest;
+	static C(Other: UObject | any): MeshBlockRequest;
+}
+
+declare class MeshBlockSelectorInterface extends Interface { 
+	static Load(ResourceName: string): MeshBlockSelectorInterface;
+	static Find(Outer: UObject, ResourceName: string): MeshBlockSelectorInterface;
+	static GetDefaultObject(): MeshBlockSelectorInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshBlockSelectorInterface;
+	SelectMeshBlocks(NewMeshInfo: MLTrackingMeshInfo,RequestedMesh?: MeshBlockRequest[]): {RequestedMesh: MeshBlockRequest[]};
+	static C(Other: UObject | any): MeshBlockSelectorInterface;
+}
+
+declare type EMeshType = 'Triangles' | 'PointCloud' | 'EMeshType_MAX';
+declare var EMeshType : { Triangles:'Triangles',PointCloud:'PointCloud',EMeshType_MAX:'EMeshType_MAX', };
+declare type EMLMeshVertexColorMode = 'None' | 'Confidence' | 'Block' | 'LOD' | 'EMLMeshVertexColorMode_MAX';
+declare var EMLMeshVertexColorMode : { None:'None',Confidence:'Confidence',Block:'Block',LOD:'LOD',EMLMeshVertexColorMode_MAX:'EMLMeshVertexColorMode_MAX', };
 declare class MeshTrackerComponent extends SceneComponent { 
-	OnMeshTrackerUpdated: UnrealEngineMulticastDelegate<(index: number, Vertices: Vector[], Triangles: number[], Normals: Vector[], Confidence: number[]) => void>;
+	OnMeshTrackerUpdated: UnrealEngineMulticastDelegate<(ID: Guid, Vertices: Vector[], Triangles: number[], Normals: Vector[], Confidence: number[]) => void>;
 	ScanWorld: boolean;
 	MeshType: EMeshType;
 	BoundingVolume: BoxComponent;
@@ -3290,13 +6879,13 @@ declare class MeshTrackerComponent extends SceneComponent {
 	static Find(Outer: UObject, ResourceName: string): MeshTrackerComponent;
 	static GetDefaultObject(): MeshTrackerComponent;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshTrackerComponent;
+	SelectMeshBlocks(NewMeshInfo: MLTrackingMeshInfo,RequestedMesh?: MeshBlockRequest[]): {RequestedMesh: MeshBlockRequest[]};
 	DisconnectMRMesh(InMRMeshPtr: MRMeshComponent): void;
+	DisconnectBlockSelector(): void;
 	ConnectMRMesh(InMRMeshPtr: MRMeshComponent): void;
 	static C(Other: UObject | any): MeshTrackerComponent;
 }
 
-declare type EPlaneQueryFlags = 'Vertical' | 'Horizontal' | 'Arbitrary' | 'OrientToGravity' | 'PreferInner' | 'IgnoreHoles' | 'Ceiling' | 'Floor' | 'Wall' | 'EPlaneQueryFlags_MAX';
-declare var EPlaneQueryFlags : { Vertical:'Vertical',Horizontal:'Horizontal',Arbitrary:'Arbitrary',OrientToGravity:'OrientToGravity',PreferInner:'PreferInner',IgnoreHoles:'IgnoreHoles',Ceiling:'Ceiling',Floor:'Floor',Wall:'Wall',EPlaneQueryFlags_MAX:'EPlaneQueryFlags_MAX', };
 declare class PlanesComponent extends SceneComponent { 
 	QueryFlags: EPlaneQueryFlags[];
 	SearchVolume: BoxComponent;
@@ -3319,237 +6908,16 @@ declare class RaycastComponent extends ActorComponent {
 	static C(Other: UObject | any): RaycastComponent;
 }
 
-declare type EMLControllerTrackingMode = 'InputService' | 'CoordinateFrameUID' | 'EMLControllerTrackingMode_MAX';
-declare var EMLControllerTrackingMode : { InputService:'InputService',CoordinateFrameUID:'CoordinateFrameUID',EMLControllerTrackingMode_MAX:'EMLControllerTrackingMode_MAX', };
-declare type EMLControllerLEDEffect = 'RotateCW' | 'RotateCCW' | 'Pulse' | 'PaintCW' | 'PaintCCW' | 'Blink' | 'EMLControllerLEDEffect_MAX';
-declare var EMLControllerLEDEffect : { RotateCW:'RotateCW',RotateCCW:'RotateCCW',Pulse:'Pulse',PaintCW:'PaintCW',PaintCCW:'PaintCCW',Blink:'Blink',EMLControllerLEDEffect_MAX:'EMLControllerLEDEffect_MAX', };
-declare type EMLControllerLEDSpeed = 'Slow' | 'Medium' | 'Fast' | 'EMLControllerLEDSpeed_MAX';
-declare var EMLControllerLEDSpeed : { Slow:'Slow',Medium:'Medium',Fast:'Fast',EMLControllerLEDSpeed_MAX:'EMLControllerLEDSpeed_MAX', };
-declare type EMLControllerLEDPattern = 'None' | 'Clock01' | 'Clock02' | 'Clock03' | 'Clock04' | 'Clock05' | 'Clock06' | 'Clock07' | 'Clock08' | 'Clock09' | 'Clock10' | 'Clock11' | 'Clock12' | 'Clock01_07' | 'Clock02_08' | 'Clock03_09' | 'Clock04_10' | 'Clock05_11' | 'Clock06_12' | 'EMLControllerLEDPattern_MAX';
-declare var EMLControllerLEDPattern : { None:'None',Clock01:'Clock01',Clock02:'Clock02',Clock03:'Clock03',Clock04:'Clock04',Clock05:'Clock05',Clock06:'Clock06',Clock07:'Clock07',Clock08:'Clock08',Clock09:'Clock09',Clock10:'Clock10',Clock11:'Clock11',Clock12:'Clock12',Clock01_07:'Clock01_07',Clock02_08:'Clock02_08',Clock03_09:'Clock03_09',Clock04_10:'Clock04_10',Clock05_11:'Clock05_11',Clock06_12:'Clock06_12',EMLControllerLEDPattern_MAX:'EMLControllerLEDPattern_MAX', };
-declare type EMLControllerLEDColor = 'BrightMissionRed' | 'PastelMissionRed' | 'BrightFloridaOrange' | 'PastelFloridaOrange' | 'BrightLunaYellow' | 'PastelLunaYellow' | 'BrightNebulaPink' | 'PastelNebulaPink' | 'BrightCosmicPurple' | 'PastelCosmicPurple' | 'BrightMysticBlue' | 'PastelMysticBlue' | 'BrightCelestialBlue' | 'PastelCelestialBlue' | 'BrightShaggleGreen' | 'PastelShaggleGreen' | 'EMLControllerLEDColor_MAX';
-declare var EMLControllerLEDColor : { BrightMissionRed:'BrightMissionRed',PastelMissionRed:'PastelMissionRed',BrightFloridaOrange:'BrightFloridaOrange',PastelFloridaOrange:'PastelFloridaOrange',BrightLunaYellow:'BrightLunaYellow',PastelLunaYellow:'PastelLunaYellow',BrightNebulaPink:'BrightNebulaPink',PastelNebulaPink:'PastelNebulaPink',BrightCosmicPurple:'BrightCosmicPurple',PastelCosmicPurple:'PastelCosmicPurple',BrightMysticBlue:'BrightMysticBlue',PastelMysticBlue:'PastelMysticBlue',BrightCelestialBlue:'BrightCelestialBlue',PastelCelestialBlue:'PastelCelestialBlue',BrightShaggleGreen:'BrightShaggleGreen',PastelShaggleGreen:'PastelShaggleGreen',EMLControllerLEDColor_MAX:'EMLControllerLEDColor_MAX', };
-declare type EMLControllerHapticPattern = 'None' | 'Click' | 'Bump' | 'DoubleClick' | 'Buzz' | 'Tick' | 'ForceDown' | 'ForceUp' | 'ForceDwell' | 'SecondForceDown' | 'EMLControllerHapticPattern_MAX';
-declare var EMLControllerHapticPattern : { None:'None',Click:'Click',Bump:'Bump',DoubleClick:'DoubleClick',Buzz:'Buzz',Tick:'Tick',ForceDown:'ForceDown',ForceUp:'ForceUp',ForceDwell:'ForceDwell',SecondForceDown:'SecondForceDown',EMLControllerHapticPattern_MAX:'EMLControllerHapticPattern_MAX', };
-declare type EMLControllerHapticIntensity = 'Low' | 'Medium' | 'High' | 'EMLControllerHapticIntensity_MAX';
-declare var EMLControllerHapticIntensity : { Low:'Low',Medium:'Medium',High:'High',EMLControllerHapticIntensity_MAX:'EMLControllerHapticIntensity_MAX', };
-declare type EMLControllerType = 'None' | 'Device' | 'MobileApp' | 'EMLControllerType_MAX';
-declare var EMLControllerType : { None:'None',Device:'Device',MobileApp:'MobileApp',EMLControllerType_MAX:'EMLControllerType_MAX', };
-declare class MagicLeapControllerFunctionLibrary extends BlueprintFunctionLibrary { 
-	static Load(ResourceName: string): MagicLeapControllerFunctionLibrary;
-	static Find(Outer: UObject, ResourceName: string): MagicLeapControllerFunctionLibrary;
-	static GetDefaultObject(): MagicLeapControllerFunctionLibrary;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MagicLeapControllerFunctionLibrary;
-	static SetControllerTrackingMode(TrackingMode: EMLControllerTrackingMode): boolean;
-	static PlayControllerLEDEffect(Hand: EControllerHand,LEDEffect: EMLControllerLEDEffect,LEDSpeed: EMLControllerLEDSpeed,LEDPattern: EMLControllerLEDPattern,LEDColor: EMLControllerLEDColor,DurationInSec: number): boolean;
-	static PlayControllerLED(Hand: EControllerHand,LEDPattern: EMLControllerLEDPattern,LEDColor: EMLControllerLEDColor,DurationInSec: number): boolean;
-	static PlayControllerHapticFeedback(Hand: EControllerHand,HapticPattern: EMLControllerHapticPattern,Intensity: EMLControllerHapticIntensity): boolean;
-	static MaxSupportedMagicLeapControllers(): number;
-	static InvertControllerMapping(): void;
-	static GetMLControllerType(Hand: EControllerHand): EMLControllerType;
-	static GetControllerTrackingMode(): EMLControllerTrackingMode;
-	static GetControllerMapping(ControllerIndex: number,Hand?: EControllerHand): {Hand: EControllerHand, $: boolean};
-	static C(Other: UObject | any): MagicLeapControllerFunctionLibrary;
-}
-
-declare type EMagicLeapTouchpadGestureType = 'None' | 'Tap' | 'ForceTapDown' | 'ForceTapUp' | 'ForceDwell' | 'SecondForceDown' | 'LongHold' | 'RadialScroll' | 'Swipe' | 'Scroll' | 'Pinch' | 'EMagicLeapTouchpadGestureType_MAX';
-declare var EMagicLeapTouchpadGestureType : { None:'None',Tap:'Tap',ForceTapDown:'ForceTapDown',ForceTapUp:'ForceTapUp',ForceDwell:'ForceDwell',SecondForceDown:'SecondForceDown',LongHold:'LongHold',RadialScroll:'RadialScroll',Swipe:'Swipe',Scroll:'Scroll',Pinch:'Pinch',EMagicLeapTouchpadGestureType_MAX:'EMagicLeapTouchpadGestureType_MAX', };
-declare type EMagicLeapTouchpadGestureDirection = 'None' | 'Up' | 'Down' | 'Left' | 'Right' | 'In' | 'Out' | 'Clockwise' | 'CounterClockwise' | 'EMagicLeapTouchpadGestureDirection_MAX';
-declare var EMagicLeapTouchpadGestureDirection : { None:'None',Up:'Up',Down:'Down',Left:'Left',Right:'Right',In:'In',Out:'Out',Clockwise:'Clockwise',CounterClockwise:'CounterClockwise',EMagicLeapTouchpadGestureDirection_MAX:'EMagicLeapTouchpadGestureDirection_MAX', };
-declare class MagicLeapTouchpadGesture { 
-	Hand: EControllerHand;
-	Type: EMagicLeapTouchpadGestureType;
-	Direction: EMagicLeapTouchpadGestureDirection;
-	PositionAndForce: Vector;
-	Speed: number;
-	Distance: number;
-	FingerGap: number;
-	Radius: number;
-	Angle: number;
-	clone() : MagicLeapTouchpadGesture;
-	static C(Other: UObject | any): MagicLeapTouchpadGesture;
-}
-
-declare class TouchpadGesturesComponent extends ActorComponent { 
-	OnTouchpadGestureStart: UnrealEngineMulticastDelegate<(GestureData: MagicLeapTouchpadGesture) => void>;
-	OnTouchpadGestureContinue: UnrealEngineMulticastDelegate<(GestureData: MagicLeapTouchpadGesture) => void>;
-	OnTouchpadGestureEnd: UnrealEngineMulticastDelegate<(GestureData: MagicLeapTouchpadGesture) => void>;
-	static Load(ResourceName: string): TouchpadGesturesComponent;
-	static Find(Outer: UObject, ResourceName: string): TouchpadGesturesComponent;
-	static GetDefaultObject(): TouchpadGesturesComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TouchpadGesturesComponent;
-	static C(Other: UObject | any): TouchpadGesturesComponent;
-}
-
-declare class EyeTrackerStereoGazeData { 
-	LeftEyeOrigin: Vector;
-	LeftEyeDirection: Vector;
-	RightEyeOrigin: Vector;
-	RightEyeDirection: Vector;
-	FixationPoint: Vector;
-	ConfidenceValue: number;
-	clone() : EyeTrackerStereoGazeData;
-	static C(Other: UObject | any): EyeTrackerStereoGazeData;
-	GetStereoGazeData(): {OutGazeData: EyeTrackerStereoGazeData, $: boolean};
-	static GetStereoGazeData(OutGazeData?: EyeTrackerStereoGazeData): {OutGazeData: EyeTrackerStereoGazeData, $: boolean};
-}
-
-declare class EyeTrackerGazeData { 
-	GazeOrigin: Vector;
-	GazeDirection: Vector;
-	FixationPoint: Vector;
-	ConfidenceValue: number;
-	clone() : EyeTrackerGazeData;
-	static C(Other: UObject | any): EyeTrackerGazeData;
-	GetGazeData(): {OutGazeData: EyeTrackerGazeData, $: boolean};
-	static GetGazeData(OutGazeData?: EyeTrackerGazeData): {OutGazeData: EyeTrackerGazeData, $: boolean};
-}
-
-declare class EyeTrackerFunctionLibrary extends BlueprintFunctionLibrary { 
-	static Load(ResourceName: string): EyeTrackerFunctionLibrary;
-	static Find(Outer: UObject, ResourceName: string): EyeTrackerFunctionLibrary;
-	static GetDefaultObject(): EyeTrackerFunctionLibrary;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EyeTrackerFunctionLibrary;
-	static SetEyeTrackedPlayer(PlayerController: PlayerController): void;
-	static IsStereoGazeDataAvailable(): boolean;
-	static IsEyeTrackerConnected(): boolean;
-	static GetStereoGazeData(OutGazeData?: EyeTrackerStereoGazeData): {OutGazeData: EyeTrackerStereoGazeData, $: boolean};
-	static GetGazeData(OutGazeData?: EyeTrackerGazeData): {OutGazeData: EyeTrackerGazeData, $: boolean};
-	static C(Other: UObject | any): EyeTrackerFunctionLibrary;
-}
-
-declare class MagicLeapFixationComfort { 
-	FixationDepthIsUncomfortable: boolean;
-	FixationDepthViolationHasOccurred: boolean;
-	RemainingTimeAtUncomfortableDepth: number;
-	clone() : MagicLeapFixationComfort;
-	static C(Other: UObject | any): MagicLeapFixationComfort;
-	GetFixationComfort(): {FixationComfort: MagicLeapFixationComfort, $: boolean};
-	static GetFixationComfort(FixationComfort?: MagicLeapFixationComfort): {FixationComfort: MagicLeapFixationComfort, $: boolean};
-}
-
-declare class MagicLeapEyeBlinkState { 
-	LeftEyeBlinked: boolean;
-	RightEyeBlinked: boolean;
-	clone() : MagicLeapEyeBlinkState;
-	static C(Other: UObject | any): MagicLeapEyeBlinkState;
-	GetEyeBlinkState(): {BlinkState: MagicLeapEyeBlinkState, $: boolean};
-	static GetEyeBlinkState(BlinkState?: MagicLeapEyeBlinkState): {BlinkState: MagicLeapEyeBlinkState, $: boolean};
-}
-
-declare type EMagicLeapEyeTrackingCalibrationStatus = 'None' | 'Bad' | 'Good' | 'EMagicLeapEyeTrackingCalibrationStatus_MAX';
-declare var EMagicLeapEyeTrackingCalibrationStatus : { None:'None',Bad:'Bad',Good:'Good',EMagicLeapEyeTrackingCalibrationStatus_MAX:'EMagicLeapEyeTrackingCalibrationStatus_MAX', };
-declare class MagicLeapEyeTrackerFunctionLibrary extends BlueprintFunctionLibrary { 
-	static Load(ResourceName: string): MagicLeapEyeTrackerFunctionLibrary;
-	static Find(Outer: UObject, ResourceName: string): MagicLeapEyeTrackerFunctionLibrary;
-	static GetDefaultObject(): MagicLeapEyeTrackerFunctionLibrary;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MagicLeapEyeTrackerFunctionLibrary;
-	static IsEyeTrackerCalibrated(): boolean;
-	static GetFixationComfort(FixationComfort?: MagicLeapFixationComfort): {FixationComfort: MagicLeapFixationComfort, $: boolean};
-	static GetEyeBlinkState(BlinkState?: MagicLeapEyeBlinkState): {BlinkState: MagicLeapEyeBlinkState, $: boolean};
-	static GetCalibrationStatus(): EMagicLeapEyeTrackingCalibrationStatus;
-	static C(Other: UObject | any): MagicLeapEyeTrackerFunctionLibrary;
-}
-
-declare class LiveLinkSourceFactory extends UObject { 
-	static Load(ResourceName: string): LiveLinkSourceFactory;
-	static Find(Outer: UObject, ResourceName: string): LiveLinkSourceFactory;
-	static GetDefaultObject(): LiveLinkSourceFactory;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkSourceFactory;
-	static C(Other: UObject | any): LiveLinkSourceFactory;
-}
-
-declare type ELiveLinkSourceMode = 'Default' | 'Interpolated' | 'TimeSynchronized' | 'ELiveLinkSourceMode_MAX';
-declare var ELiveLinkSourceMode : { Default:'Default',Interpolated:'Interpolated',TimeSynchronized:'TimeSynchronized',ELiveLinkSourceMode_MAX:'ELiveLinkSourceMode_MAX', };
-declare class LiveLinkInterpolationSettings { 
-	bUseInterpolation: boolean;
-	InterpolationOffset: number;
-	clone() : LiveLinkInterpolationSettings;
-	static C(Other: UObject | any): LiveLinkInterpolationSettings;
-}
-
-declare class LiveLinkTimeSynchronizationSettings { 
-	FrameRate: FrameRate;
-	clone() : LiveLinkTimeSynchronizationSettings;
-	static C(Other: UObject | any): LiveLinkTimeSynchronizationSettings;
-}
-
-declare class LiveLinkSourceSettings extends UObject { 
-	Mode: ELiveLinkSourceMode;
-	InterpolationSettings: LiveLinkInterpolationSettings;
-	TimeSynchronizationSettings: LiveLinkTimeSynchronizationSettings;
-	static Load(ResourceName: string): LiveLinkSourceSettings;
-	static Find(Outer: UObject, ResourceName: string): LiveLinkSourceSettings;
-	static GetDefaultObject(): LiveLinkSourceSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkSourceSettings;
-	static C(Other: UObject | any): LiveLinkSourceSettings;
-}
-
-declare class LiveLinkMagicLeapHandTrackingSourceFactory extends LiveLinkSourceFactory { 
-	static Load(ResourceName: string): LiveLinkMagicLeapHandTrackingSourceFactory;
-	static Find(Outer: UObject, ResourceName: string): LiveLinkMagicLeapHandTrackingSourceFactory;
-	static GetDefaultObject(): LiveLinkMagicLeapHandTrackingSourceFactory;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkMagicLeapHandTrackingSourceFactory;
-	static C(Other: UObject | any): LiveLinkMagicLeapHandTrackingSourceFactory;
-}
-
-declare type EHandTrackingGesture = 'Finger' | 'Fist' | 'Pinch' | 'Thumb' | 'L' | 'OpenHandBack' | 'Ok' | 'C' | 'NoPose' | 'NoHand' | 'EHandTrackingGesture_MAX';
-declare var EHandTrackingGesture : { Finger:'Finger',Fist:'Fist',Pinch:'Pinch',Thumb:'Thumb',L:'L',OpenHandBack:'OpenHandBack',Ok:'Ok',C:'C',NoPose:'NoPose',NoHand:'NoHand',EHandTrackingGesture_MAX:'EHandTrackingGesture_MAX', };
-declare type EHandTrackingKeypointFilterLevel = 'NoFilter' | 'SimpleSmoothing' | 'PredictiveSmoothing' | 'EHandTrackingKeypointFilterLevel_MAX';
-declare var EHandTrackingKeypointFilterLevel : { NoFilter:'NoFilter',SimpleSmoothing:'SimpleSmoothing',PredictiveSmoothing:'PredictiveSmoothing',EHandTrackingKeypointFilterLevel_MAX:'EHandTrackingKeypointFilterLevel_MAX', };
-declare type EHandTrackingGestureFilterLevel = 'NoFilter' | 'SlightRobustnessToFlicker' | 'MoreRobustnessToFlicker' | 'EHandTrackingGestureFilterLevel_MAX';
-declare var EHandTrackingGestureFilterLevel : { NoFilter:'NoFilter',SlightRobustnessToFlicker:'SlightRobustnessToFlicker',MoreRobustnessToFlicker:'MoreRobustnessToFlicker',EHandTrackingGestureFilterLevel_MAX:'EHandTrackingGestureFilterLevel_MAX', };
-declare class LiveLinkSourceHandle { 
-	clone() : LiveLinkSourceHandle;
-	static C(Other: UObject | any): LiveLinkSourceHandle;
-	GetMagicLeapHandTrackingLiveLinkSource(): {SourceHandle: LiveLinkSourceHandle, $: boolean};
-	static GetMagicLeapHandTrackingLiveLinkSource(SourceHandle?: LiveLinkSourceHandle): {SourceHandle: LiveLinkSourceHandle, $: boolean};
-}
-
-declare type EGestureTransformSpace = 'World' | 'Hand' | 'Tracking' | 'EGestureTransformSpace_MAX';
-declare var EGestureTransformSpace : { World:'World',Hand:'Hand',Tracking:'Tracking',EGestureTransformSpace_MAX:'EGestureTransformSpace_MAX', };
-declare type EHandTrackingKeypoint = 'Thumb_Tip' | 'Thumb_IP' | 'Thumb_MCP' | 'Thumb_CMC' | 'Index_Tip' | 'Index_DIP' | 'Index_PIP' | 'Index_MCP' | 'Middle_Tip' | 'Middle_DIP' | 'Middle_PIP' | 'Middle_MCP' | 'Ring_Tip' | 'Ring_DIP' | 'Ring_PIP' | 'Ring_MCP' | 'Pinky_Tip' | 'Pinky_DIP' | 'Pinky_PIP' | 'Pinky_MCP' | 'Wrist_Center' | 'Wrist_Ulnar' | 'Wrist_Radial' | 'Hand_Center' | 'EHandTrackingKeypoint_MAX';
-declare var EHandTrackingKeypoint : { Thumb_Tip:'Thumb_Tip',Thumb_IP:'Thumb_IP',Thumb_MCP:'Thumb_MCP',Thumb_CMC:'Thumb_CMC',Index_Tip:'Index_Tip',Index_DIP:'Index_DIP',Index_PIP:'Index_PIP',Index_MCP:'Index_MCP',Middle_Tip:'Middle_Tip',Middle_DIP:'Middle_DIP',Middle_PIP:'Middle_PIP',Middle_MCP:'Middle_MCP',Ring_Tip:'Ring_Tip',Ring_DIP:'Ring_DIP',Ring_PIP:'Ring_PIP',Ring_MCP:'Ring_MCP',Pinky_Tip:'Pinky_Tip',Pinky_DIP:'Pinky_DIP',Pinky_PIP:'Pinky_PIP',Pinky_MCP:'Pinky_MCP',Wrist_Center:'Wrist_Center',Wrist_Ulnar:'Wrist_Ulnar',Wrist_Radial:'Wrist_Radial',Hand_Center:'Hand_Center',EHandTrackingKeypoint_MAX:'EHandTrackingKeypoint_MAX', };
-declare class MagicLeapHandTrackingFunctionLibrary extends BlueprintFunctionLibrary { 
-	static Load(ResourceName: string): MagicLeapHandTrackingFunctionLibrary;
-	static Find(Outer: UObject, ResourceName: string): MagicLeapHandTrackingFunctionLibrary;
-	static GetDefaultObject(): MagicLeapHandTrackingFunctionLibrary;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MagicLeapHandTrackingFunctionLibrary;
-	static SetStaticGestureConfidenceThreshold(Gesture: EHandTrackingGesture,Confidence: number): void;
-	static SetConfiguration(StaticGesturesToActivate: EHandTrackingGesture[],KeypointsFilterLevel: EHandTrackingKeypointFilterLevel,GestureFilterLevel: EHandTrackingGestureFilterLevel,HandSwitchingFilterLevel: EHandTrackingGestureFilterLevel,bTrackingEnabled: boolean): boolean;
-	static GetStaticGestureConfidenceThreshold(Gesture: EHandTrackingGesture): number;
-	static GetMagicLeapHandTrackingLiveLinkSource(SourceHandle?: LiveLinkSourceHandle): {SourceHandle: LiveLinkSourceHandle, $: boolean};
-	static GetHandThumbTip(Hand: EControllerHand,TransformSpace: EGestureTransformSpace,Secondary?: Transform): {Secondary: Transform, $: boolean};
-	static GetHandIndexFingerTip(Hand: EControllerHand,TransformSpace: EGestureTransformSpace,Pointer?: Transform): {Pointer: Transform, $: boolean};
-	static GetHandCenterNormalized(Hand: EControllerHand,HandCenterNormalized?: Vector): {HandCenterNormalized: Vector, $: boolean};
-	static GetHandCenter(Hand: EControllerHand,HandCenter?: Transform): {HandCenter: Transform, $: boolean};
-	static GetGestureKeypointTransform(Hand: EControllerHand,Keypoint: EHandTrackingKeypoint,TransformSpace: EGestureTransformSpace,Transform?: Transform): {Transform: Transform, $: boolean};
-	static GetGestureKeypoints(Hand: EControllerHand,Keypoints?: Transform[]): {Keypoints: Transform[], $: boolean};
-	static GetCurrentGestureConfidence(Hand: EControllerHand,Confidence?: number): {Confidence: number, $: boolean};
-	static GetCurrentGesture(Hand: EControllerHand,Gesture?: EHandTrackingGesture): {Gesture: EHandTrackingGesture, $: boolean};
-	static GetConfiguration(ActiveStaticGestures?: EHandTrackingGesture[],KeypointsFilterLevel?: EHandTrackingKeypointFilterLevel,GestureFilterLevel?: EHandTrackingGestureFilterLevel,HandSwitchingFilterLevel?: EHandTrackingGestureFilterLevel,bTrackingEnabled?: boolean): {ActiveStaticGestures: EHandTrackingGesture[], KeypointsFilterLevel: EHandTrackingKeypointFilterLevel, GestureFilterLevel: EHandTrackingGestureFilterLevel, HandSwitchingFilterLevel: EHandTrackingGestureFilterLevel, bTrackingEnabled: boolean, $: boolean};
-	static C(Other: UObject | any): MagicLeapHandTrackingFunctionLibrary;
-}
-
-declare type EMagicLeapIdentityKey = 'GivenName' | 'FamilyName' | 'Email' | 'Bio' | 'PhoneNumber' | 'Avatar2D' | 'Avatar3D' | 'Unknown' | 'EMagicLeapIdentityKey_MAX';
-declare var EMagicLeapIdentityKey : { GivenName:'GivenName',FamilyName:'FamilyName',Email:'Email',Bio:'Bio',PhoneNumber:'PhoneNumber',Avatar2D:'Avatar2D',Avatar3D:'Avatar3D',Unknown:'Unknown',EMagicLeapIdentityKey_MAX:'EMagicLeapIdentityKey_MAX', };
-declare class MagicLeapIdentityAttribute { 
-	Attribute: EMagicLeapIdentityKey;
-	Value: string;
-	clone() : MagicLeapIdentityAttribute;
-	static C(Other: UObject | any): MagicLeapIdentityAttribute;
-}
-
-declare type EMagicLeapIdentityError = 'Ok' | 'InvalidParam' | 'AllocFailed' | 'PrivilegeDenied' | 'FailedToConnectToLocalService' | 'FailedToConnectToCloudService' | 'CloudAuthentication' | 'InvalidInformationFromCloud' | 'NotLoggedIn' | 'ExpiredCredentials' | 'FailedToGetUserProfile' | 'Unauthorized' | 'CertificateError' | 'RejectedByCloud' | 'AlreadyLoggedIn' | 'ModifyIsNotSupported' | 'NetworkError' | 'UnspecifiedFailure' | 'EMagicLeapIdentityError_MAX';
-declare var EMagicLeapIdentityError : { Ok:'Ok',InvalidParam:'InvalidParam',AllocFailed:'AllocFailed',PrivilegeDenied:'PrivilegeDenied',FailedToConnectToLocalService:'FailedToConnectToLocalService',FailedToConnectToCloudService:'FailedToConnectToCloudService',CloudAuthentication:'CloudAuthentication',InvalidInformationFromCloud:'InvalidInformationFromCloud',NotLoggedIn:'NotLoggedIn',ExpiredCredentials:'ExpiredCredentials',FailedToGetUserProfile:'FailedToGetUserProfile',Unauthorized:'Unauthorized',CertificateError:'CertificateError',RejectedByCloud:'RejectedByCloud',AlreadyLoggedIn:'AlreadyLoggedIn',ModifyIsNotSupported:'ModifyIsNotSupported',NetworkError:'NetworkError',UnspecifiedFailure:'UnspecifiedFailure',EMagicLeapIdentityError_MAX:'EMagicLeapIdentityError_MAX', };
-declare class MagicLeapIdentity extends UObject { 
-	static Load(ResourceName: string): MagicLeapIdentity;
-	static Find(Outer: UObject, ResourceName: string): MagicLeapIdentity;
-	static GetDefaultObject(): MagicLeapIdentity;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MagicLeapIdentity;
-	RequestAttributeValue(RequestedAttributeList: EMagicLeapIdentityKey[],RequestedAttributeValues?: MagicLeapIdentityAttribute[]): {RequestedAttributeValues: MagicLeapIdentityAttribute[], $: EMagicLeapIdentityError};
-	GetAllAvailableAttributes(AvailableAttributes?: EMagicLeapIdentityKey[]): {AvailableAttributes: EMagicLeapIdentityKey[], $: EMagicLeapIdentityError};
-	static C(Other: UObject | any): MagicLeapIdentity;
+declare class WmfMediaSettings extends UObject { 
+	AllowNonStandardCodecs: boolean;
+	LowLatency: boolean;
+	NativeAudioOut: boolean;
+	HardwareAcceleratedVideoDecoding: boolean;
+	static Load(ResourceName: string): WmfMediaSettings;
+	static Find(Outer: UObject, ResourceName: string): WmfMediaSettings;
+	static GetDefaultObject(): WmfMediaSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WmfMediaSettings;
+	static C(Other: UObject | any): WmfMediaSettings;
 }
 
 declare class NamedInterface { 
@@ -3769,6 +7137,7 @@ declare class InAppPurchaseRestoreCallbackProxy extends UObject {
 }
 
 declare class IpConnection extends NetConnection { 
+	SocketErrorDisconnectDelay: number;
 	static Load(ResourceName: string): IpConnection;
 	static Find(Outer: UObject, ResourceName: string): IpConnection;
 	static GetDefaultObject(): IpConnection;
@@ -3784,6 +7153,8 @@ declare class IpNetDriver extends NetDriver {
 	ServerDesiredSocketSendBufferBytes: any;
 	ClientDesiredSocketReceiveBufferBytes: any;
 	ClientDesiredSocketSendBufferBytes: any;
+	MaxSecondsInReceive: any;
+	NbPacketsBetweenReceiveTimeTest: number;
 	static Load(ResourceName: string): IpNetDriver;
 	static Find(Outer: UObject, ResourceName: string): IpNetDriver;
 	static GetDefaultObject(): IpNetDriver;
@@ -3934,6 +7305,7 @@ declare class PartyReservation {
 	TeamNum: number;
 	PartyLeader: UniqueNetIdRepl;
 	PartyMembers: PlayerReservation[];
+	RemovedPartyMembers: PlayerReservation[];
 	clone() : PartyReservation;
 	static C(Other: UObject | any): PartyReservation;
 }
@@ -4012,6 +7384,57 @@ declare class ShowLoginUICallbackProxy extends BlueprintAsyncActionBase {
 	static C(Other: UObject | any): ShowLoginUICallbackProxy;
 }
 
+declare class SpectatorReservation { 
+	SpectatorId: UniqueNetIdRepl;
+	Spectator: PlayerReservation;
+	clone() : SpectatorReservation;
+	static C(Other: UObject | any): SpectatorReservation;
+}
+
+declare type ESpectatorClientRequestType = 'NonePending' | 'ExistingSessionReservation' | 'ReservationUpdate' | 'EmptyServerReservation' | 'Reconnect' | 'Abandon' | 'ESpectatorClientRequestType_MAX';
+declare var ESpectatorClientRequestType : { NonePending:'NonePending',ExistingSessionReservation:'ExistingSessionReservation',ReservationUpdate:'ReservationUpdate',EmptyServerReservation:'EmptyServerReservation',Reconnect:'Reconnect',Abandon:'Abandon',ESpectatorClientRequestType_MAX:'ESpectatorClientRequestType_MAX', };
+declare type ESpectatorReservationResult = 'NoResult' | 'RequestPending' | 'GeneralError' | 'SpectatorLimitReached' | 'IncorrectPlayerCount' | 'RequestTimedOut' | 'ReservationDuplicate' | 'ReservationNotFound' | 'ReservationAccepted' | 'ReservationDenied' | 'ReservationDenied_CrossPlayRestriction' | 'ReservationDenied_Banned' | 'ReservationRequestCanceled' | 'ReservationInvalid' | 'BadSessionId' | 'ReservationDenied_ContainsExistingPlayers' | 'ESpectatorReservationResult_MAX';
+declare var ESpectatorReservationResult : { NoResult:'NoResult',RequestPending:'RequestPending',GeneralError:'GeneralError',SpectatorLimitReached:'SpectatorLimitReached',IncorrectPlayerCount:'IncorrectPlayerCount',RequestTimedOut:'RequestTimedOut',ReservationDuplicate:'ReservationDuplicate',ReservationNotFound:'ReservationNotFound',ReservationAccepted:'ReservationAccepted',ReservationDenied:'ReservationDenied',ReservationDenied_CrossPlayRestriction:'ReservationDenied_CrossPlayRestriction',ReservationDenied_Banned:'ReservationDenied_Banned',ReservationRequestCanceled:'ReservationRequestCanceled',ReservationInvalid:'ReservationInvalid',BadSessionId:'BadSessionId',ReservationDenied_ContainsExistingPlayers:'ReservationDenied_ContainsExistingPlayers',ESpectatorReservationResult_MAX:'ESpectatorReservationResult_MAX', };
+declare class SpectatorBeaconClient extends OnlineBeaconClient { 
+	DestSessionId: string;
+	PendingReservation: SpectatorReservation;
+	RequestType: ESpectatorClientRequestType;
+	bPendingReservationSent: boolean;
+	bCancelReservation: boolean;
+	static GetDefaultObject(): SpectatorBeaconClient;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpectatorBeaconClient;
+	ServerReservationRequest(SessionId: string,Reservation: SpectatorReservation): void;
+	ServerCancelReservationRequest(Spectator: UniqueNetIdRepl): void;
+	ClientSendReservationUpdates(NumRemainingReservations: number): void;
+	ClientSendReservationFull(): void;
+	ClientReservationResponse(ReservationResponse: ESpectatorReservationResult): void;
+	ClientCancelReservationResponse(ReservationResponse: ESpectatorReservationResult): void;
+	static C(Other: UObject | any): SpectatorBeaconClient;
+}
+
+declare class SpectatorBeaconState extends UObject { 
+	SessionName: string;
+	NumConsumedReservations: number;
+	MaxReservations: number;
+	bRestrictCrossConsole: boolean;
+	Reservations: SpectatorReservation[];
+	static Load(ResourceName: string): SpectatorBeaconState;
+	static Find(Outer: UObject, ResourceName: string): SpectatorBeaconState;
+	static GetDefaultObject(): SpectatorBeaconState;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpectatorBeaconState;
+	static C(Other: UObject | any): SpectatorBeaconState;
+}
+
+declare class SpectatorBeaconHost extends OnlineBeaconHostObject { 
+	State: SpectatorBeaconState;
+	bLogoutOnSessionTimeout: boolean;
+	SessionTimeoutSecs: number;
+	TravelSessionTimeoutSecs: number;
+	static GetDefaultObject(): SpectatorBeaconHost;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpectatorBeaconHost;
+	static C(Other: UObject | any): SpectatorBeaconHost;
+}
+
 declare class TestBeaconClient extends OnlineBeaconClient { 
 	static GetDefaultObject(): TestBeaconClient;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestBeaconClient;
@@ -4095,8 +7518,8 @@ declare class K2Node_LeaderboardQuery extends K2Node_BaseAsyncTask {
 	static C(Other: UObject | any): K2Node_LeaderboardQuery;
 }
 
-declare type ETiledMultiResLevel = 'ETiledMultiResLevel_Off' | 'ETiledMultiResLevel_LMSLow' | 'ETiledMultiResLevel_LMSMedium' | 'ETiledMultiResLevel_LMSHigh' | 'ETiledMultiResLevel_MAX';
-declare var ETiledMultiResLevel : { ETiledMultiResLevel_Off:'ETiledMultiResLevel_Off',ETiledMultiResLevel_LMSLow:'ETiledMultiResLevel_LMSLow',ETiledMultiResLevel_LMSMedium:'ETiledMultiResLevel_LMSMedium',ETiledMultiResLevel_LMSHigh:'ETiledMultiResLevel_LMSHigh',ETiledMultiResLevel_MAX:'ETiledMultiResLevel_MAX', };
+declare type ETiledMultiResLevel = 'ETiledMultiResLevel_Off' | 'ETiledMultiResLevel_LMSLow' | 'ETiledMultiResLevel_LMSMedium' | 'ETiledMultiResLevel_LMSHigh' | 'ETiledMultiResLevel_LMSHighTop' | 'ETiledMultiResLevel_MAX';
+declare var ETiledMultiResLevel : { ETiledMultiResLevel_Off:'ETiledMultiResLevel_Off',ETiledMultiResLevel_LMSLow:'ETiledMultiResLevel_LMSLow',ETiledMultiResLevel_LMSMedium:'ETiledMultiResLevel_LMSMedium',ETiledMultiResLevel_LMSHigh:'ETiledMultiResLevel_LMSHigh',ETiledMultiResLevel_LMSHighTop:'ETiledMultiResLevel_LMSHighTop',ETiledMultiResLevel_MAX:'ETiledMultiResLevel_MAX', };
 declare class HmdUserProfileField { 
 	FieldName: string;
 	FieldValue: string;
@@ -4132,10 +7555,12 @@ declare class OculusFunctionLibrary extends BlueprintFunctionLibrary {
 	static SetGuardianVisibility(GuardianVisible: boolean): void;
 	static SetDisplayFrequency(RequestedFrequency: number): void;
 	static SetCPUAndGPULevels(CPULevel: number,GPULevel: number): void;
+	static SetColorScaleAndOffset(ColorScale: LinearColor,ColorOffset: LinearColor,bApplyToAllLayers: boolean): void;
 	static SetBaseRotationAndPositionOffset(BaseRot: Rotator,PosOffset: Vector,Options: EOrientPositionSelector): void;
 	static SetBaseRotationAndBaseOffsetInMeters(Rotation: Rotator,BaseOffsetInMeters: Vector,Options: EOrientPositionSelector): void;
 	static IsLoadingIconEnabled(): boolean;
 	static IsGuardianDisplayed(): boolean;
+	static IsGuardianConfigured(): boolean;
 	static IsDeviceTracked(DeviceType: ETrackedDeviceType): boolean;
 	static IsAutoLoadingSplashScreenEnabled(): boolean;
 	static HideLoadingSplashScreen(bClear: boolean): void;
@@ -4150,7 +7575,7 @@ declare class OculusFunctionLibrary extends BlueprintFunctionLibrary {
 	static GetPlayAreaTransform(): Transform;
 	static GetNodeGuardianIntersection(DeviceType: ETrackedDeviceType,BoundaryType: EBoundaryType): GuardianTestResult;
 	static GetLoadingSplashParams(TexturePath?: string,DistanceInMeters?: Vector,SizeInMeters?: Vector2D,RotationAxis?: Vector,RotationDeltaInDeg?: number): {TexturePath: string, DistanceInMeters: Vector, SizeInMeters: Vector2D, RotationAxis: Vector, RotationDeltaInDeg: number};
-	static GetGuardianPoints(BoundaryType: EBoundaryType): Vector[];
+	static GetGuardianPoints(BoundaryType: EBoundaryType,UsePawnSpace: boolean): Vector[];
 	static GetGuardianDimensions(BoundaryType: EBoundaryType): Vector;
 	static GetGPUUtilization(IsGPUAvailable?: boolean,GPUUtilization?: number): {IsGPUAvailable: boolean, GPUUtilization: number};
 	static GetGPUFrameTime(): number;
@@ -4182,6 +7607,16 @@ declare class OculusSplashDesc {
 declare class OculusHMDRuntimeSettings extends UObject { 
 	bAutoEnabled: boolean;
 	SplashDescs: OculusSplashDesc[];
+	bSupportsDash: boolean;
+	bCompositesDepth: boolean;
+	bHQDistortion: boolean;
+	PixelDensityMin: number;
+	PixelDensityMax: number;
+	CPULevel: number;
+	GPULevel: number;
+	FFRLevel: ETiledMultiResLevel;
+	bChromaCorrection: boolean;
+	bRecenterHMDWithController: boolean;
 	static Load(ResourceName: string): OculusHMDRuntimeSettings;
 	static Find(Outer: UObject, ResourceName: string): OculusHMDRuntimeSettings;
 	static GetDefaultObject(): OculusHMDRuntimeSettings;
@@ -4207,7 +7642,9 @@ declare class KismetProceduralMeshLibrary extends BlueprintFunctionLibrary {
 	static GetSectionFromStaticMesh(InMesh: StaticMesh,LODIndex: number,SectionIndex: number,Vertices?: Vector[],Triangles?: number[],Normals?: Vector[],UVs?: Vector2D[],Tangents?: ProcMeshTangent[]): {Vertices: Vector[], Triangles: number[], Normals: Vector[], UVs: Vector2D[], Tangents: ProcMeshTangent[]};
 	static GetSectionFromProceduralMesh(InProcMesh: ProceduralMeshComponent,SectionIndex: number,Vertices?: Vector[],Triangles?: number[],Normals?: Vector[],UVs?: Vector2D[],Tangents?: ProcMeshTangent[]): {Vertices: Vector[], Triangles: number[], Normals: Vector[], UVs: Vector2D[], Tangents: ProcMeshTangent[]};
 	static GenerateBoxMesh(BoxRadius: Vector,Vertices?: Vector[],Triangles?: number[],Normals?: Vector[],UVs?: Vector2D[],Tangents?: ProcMeshTangent[]): {Vertices: Vector[], Triangles: number[], Normals: Vector[], UVs: Vector2D[], Tangents: ProcMeshTangent[]};
+	static CreateGridMeshWelded(NumX: number,NumY: number,Triangles?: number[],Vertices?: Vector[],UVs?: Vector2D[],GridSpacing?: number): {Triangles: number[], Vertices: Vector[], UVs: Vector2D[]};
 	static CreateGridMeshTriangles(NumX: number,NumY: number,bWinding: boolean,Triangles?: number[]): {Triangles: number[]};
+	static CreateGridMeshSplit(NumX: number,NumY: number,Triangles?: number[],Vertices?: Vector[],UVs?: Vector2D[],UV1s?: Vector2D[],GridSpacing?: number): {Triangles: number[], Vertices: Vector[], UVs: Vector2D[], UV1s: Vector2D[]};
 	static CopyProceduralMeshFromStaticMeshComponent(StaticMeshComponent: StaticMeshComponent,LODIndex: number,ProcMeshComponent: ProceduralMeshComponent,bCreateCollision: boolean): void;
 	static ConvertQuadToTriangles(Triangles?: number[],Vert0?: number,Vert1?: number,Vert2?: number,Vert3?: number): {Triangles: number[]};
 	static CalculateTangentsForMesh(Vertices: Vector[],Triangles: number[],UVs: Vector2D[],Normals?: Vector[],Tangents?: ProcMeshTangent[]): {Normals: Vector[], Tangents: ProcMeshTangent[]};
@@ -4238,15 +7675,17 @@ declare class SteamVRFunctionLibrary extends BlueprintFunctionLibrary {
 	static C(Other: UObject | any): SteamVRFunctionLibrary;
 }
 
-declare type ECompilerVersion = 'Default' | 'VisualStudio2015' | 'VisualStudio2017' | 'ECompilerVersion_MAX';
-declare var ECompilerVersion : { Default:'Default',VisualStudio2015:'VisualStudio2015',VisualStudio2017:'VisualStudio2017',ECompilerVersion_MAX:'ECompilerVersion_MAX', };
+declare type ECompilerVersion = 'Default' | 'VisualStudio2015' | 'VisualStudio2017' | 'VisualStudio2019' | 'ECompilerVersion_MAX';
+declare var ECompilerVersion : { Default:'Default',VisualStudio2015:'VisualStudio2015',VisualStudio2017:'VisualStudio2017',VisualStudio2019:'VisualStudio2019',ECompilerVersion_MAX:'ECompilerVersion_MAX', };
+declare type EDefaultGraphicsRHI = 'DefaultGraphicsRHI_Default' | 'DefaultGraphicsRHI_DX11' | 'DefaultGraphicsRHI_DX12' | 'DefaultGraphicsRHI_Vulkan' | 'DefaultGraphicsRHI_MAX';
+declare var EDefaultGraphicsRHI : { DefaultGraphicsRHI_Default:'DefaultGraphicsRHI_Default',DefaultGraphicsRHI_DX11:'DefaultGraphicsRHI_DX11',DefaultGraphicsRHI_DX12:'DefaultGraphicsRHI_DX12',DefaultGraphicsRHI_Vulkan:'DefaultGraphicsRHI_Vulkan',DefaultGraphicsRHI_MAX:'DefaultGraphicsRHI_MAX', };
 declare type EMinimumSupportedOS = 'MSOS_Vista' | 'MSOS_MAX';
 declare var EMinimumSupportedOS : { MSOS_Vista:'MSOS_Vista',MSOS_MAX:'MSOS_MAX', };
 declare class WindowsTargetSettings extends UObject { 
 	Compiler: ECompilerVersion;
 	TargetedRHIs: string[];
+	DefaultGraphicsRHI: EDefaultGraphicsRHI;
 	MinimumOSVersion: EMinimumSupportedOS;
-	AudioDevice: string;
 	AudioSampleRate: number;
 	AudioCallbackBufferFrameSize: number;
 	AudioNumBuffersToEnqueue: number;
@@ -4271,31 +7710,467 @@ declare class SourceCodeAccessSettings extends UObject {
 	static C(Other: UObject | any): SourceCodeAccessSettings;
 }
 
-declare class AssetToolsImpl extends UObject { 
-	static Load(ResourceName: string): AssetToolsImpl;
-	static Find(Outer: UObject, ResourceName: string): AssetToolsImpl;
-	static GetDefaultObject(): AssetToolsImpl;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetToolsImpl;
-	static C(Other: UObject | any): AssetToolsImpl;
+declare class LandscapeBlueprintBrush extends LandscapeBlueprintBrushBase { 
+	static GetDefaultObject(): LandscapeBlueprintBrush;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LandscapeBlueprintBrush;
+	static C(Other: UObject | any): LandscapeBlueprintBrush;
 }
 
-declare class AssetRenameData { 
-	Asset: any;
-	NewPackagePath: string;
-	NewName: string;
-	OldObjectPath: SoftObjectPath;
-	NewObjectPath: SoftObjectPath;
-	bOnlyFixSoftReferences: boolean;
-	clone() : AssetRenameData;
-	static C(Other: UObject | any): AssetRenameData;
+declare type ETimezoneSetting = 'InternationalDateLineWest' | 'CoordinatedUniversalTimeNeg11' | 'Samoa' | 'Hawaii' | 'Alaska' | 'PacificTime_USCAN' | 'BajaCalifornia' | 'MountainTime_USCAN' | 'Chihuahua_LaPaz_Mazatlan' | 'Arizona' | 'Saskatchewan' | 'CentralAmerica' | 'CentralTime_USCAN' | 'Guadalajara_MexicoCity_Monterrey' | 'EasternTime_USCAN' | 'Bogota_Lima_Quito' | 'Indiana_US' | 'Caracas' | 'AtlanticTime_Canada' | 'Cuiaba' | 'Santiago' | 'Georgetown_LaPaz_Manaus_SanJuan' | 'Asuncion' | 'Newfoundland' | 'Brasilia' | 'Greenland' | 'Montevideo' | 'Cayenne_Fortaleza' | 'BuenosAires' | 'MidAtlantic' | 'CoordinatedUniversalTimeNeg02' | 'Azores' | 'CaboVerdeIs' | 'Dublin_Edinburgh_Lisbon_London' | 'Monrovia_Reykjavik' | 'Casablanca' | 'UTC' | 'Belgrade_Bratislava_Budapest_Ljubljana_Prague' | 'Sarajevo_Skopje_Warsaw_Zagreb' | 'Brussels_Copenhagen_Madrid_Paris' | 'WestCentralAfrica' | 'Amsterdam_Berlin_Bern_Rome_Stockholm_Vienna' | 'Windhoek' | 'Minsk' | 'Cairo' | 'Helsinki_Kyiv_Riga_Sofia_Tallinn_Vilnius' | 'Athens_Bucharest' | 'Jerusalem' | 'Amman' | 'Beirut' | 'Harare_Pretoria' | 'Damascus' | 'Istanbul' | 'Kuwait_Riyadh' | 'Baghdad' | 'Nairobi' | 'Kaliningrad' | 'Tehran' | 'Moscow_StPetersburg_Volgograd' | 'AbuDhabi_Muscat' | 'Baku' | 'Yerevan' | 'Tbilisi' | 'PortLouis' | 'Kabul' | 'Tashkent' | 'Islamabad_Karachi' | 'Chennai_Kolkata_Mumbai_NewDelhi' | 'SriJayawardenepura' | 'Kathmandu' | 'Ekaterinburg' | 'Astana' | 'Dhaka' | 'Yangon_Rangoon' | 'Novosibirsk' | 'Bangkok_Hanoi_Jakarta' | 'Krasnoyarsk' | 'Beijing_Chongqing_HongKong_Urumqi' | 'KualaLumpur_Singapore' | 'Taipei' | 'Perth' | 'Ulaanbaatar' | 'Irkutsk' | 'Seoul' | 'Osaka_Sapporo_Tokyo' | 'Darwin' | 'Adelaide' | 'Yakutsk' | 'Canberra_Melbourne_Sydney' | 'Brisbane' | 'Hobart' | 'Guam_PortMoresby' | 'Vladivostok' | 'SolomonIs_NewCaledonia' | 'Magadan' | 'Fiji' | 'Auckland_Wellington' | 'CoordinatedUniversalTime12' | 'Nukualofa' | 'LocalTime' | 'ETimezoneSetting_MAX';
+declare var ETimezoneSetting : { InternationalDateLineWest:'InternationalDateLineWest',CoordinatedUniversalTimeNeg11:'CoordinatedUniversalTimeNeg11',Samoa:'Samoa',Hawaii:'Hawaii',Alaska:'Alaska',PacificTime_USCAN:'PacificTime_USCAN',BajaCalifornia:'BajaCalifornia',MountainTime_USCAN:'MountainTime_USCAN',Chihuahua_LaPaz_Mazatlan:'Chihuahua_LaPaz_Mazatlan',Arizona:'Arizona',Saskatchewan:'Saskatchewan',CentralAmerica:'CentralAmerica',CentralTime_USCAN:'CentralTime_USCAN',Guadalajara_MexicoCity_Monterrey:'Guadalajara_MexicoCity_Monterrey',EasternTime_USCAN:'EasternTime_USCAN',Bogota_Lima_Quito:'Bogota_Lima_Quito',Indiana_US:'Indiana_US',Caracas:'Caracas',AtlanticTime_Canada:'AtlanticTime_Canada',Cuiaba:'Cuiaba',Santiago:'Santiago',Georgetown_LaPaz_Manaus_SanJuan:'Georgetown_LaPaz_Manaus_SanJuan',Asuncion:'Asuncion',Newfoundland:'Newfoundland',Brasilia:'Brasilia',Greenland:'Greenland',Montevideo:'Montevideo',Cayenne_Fortaleza:'Cayenne_Fortaleza',BuenosAires:'BuenosAires',MidAtlantic:'MidAtlantic',CoordinatedUniversalTimeNeg02:'CoordinatedUniversalTimeNeg02',Azores:'Azores',CaboVerdeIs:'CaboVerdeIs',Dublin_Edinburgh_Lisbon_London:'Dublin_Edinburgh_Lisbon_London',Monrovia_Reykjavik:'Monrovia_Reykjavik',Casablanca:'Casablanca',UTC:'UTC',Belgrade_Bratislava_Budapest_Ljubljana_Prague:'Belgrade_Bratislava_Budapest_Ljubljana_Prague',Sarajevo_Skopje_Warsaw_Zagreb:'Sarajevo_Skopje_Warsaw_Zagreb',Brussels_Copenhagen_Madrid_Paris:'Brussels_Copenhagen_Madrid_Paris',WestCentralAfrica:'WestCentralAfrica',Amsterdam_Berlin_Bern_Rome_Stockholm_Vienna:'Amsterdam_Berlin_Bern_Rome_Stockholm_Vienna',Windhoek:'Windhoek',Minsk:'Minsk',Cairo:'Cairo',Helsinki_Kyiv_Riga_Sofia_Tallinn_Vilnius:'Helsinki_Kyiv_Riga_Sofia_Tallinn_Vilnius',Athens_Bucharest:'Athens_Bucharest',Jerusalem:'Jerusalem',Amman:'Amman',Beirut:'Beirut',Harare_Pretoria:'Harare_Pretoria',Damascus:'Damascus',Istanbul:'Istanbul',Kuwait_Riyadh:'Kuwait_Riyadh',Baghdad:'Baghdad',Nairobi:'Nairobi',Kaliningrad:'Kaliningrad',Tehran:'Tehran',Moscow_StPetersburg_Volgograd:'Moscow_StPetersburg_Volgograd',AbuDhabi_Muscat:'AbuDhabi_Muscat',Baku:'Baku',Yerevan:'Yerevan',Tbilisi:'Tbilisi',PortLouis:'PortLouis',Kabul:'Kabul',Tashkent:'Tashkent',Islamabad_Karachi:'Islamabad_Karachi',Chennai_Kolkata_Mumbai_NewDelhi:'Chennai_Kolkata_Mumbai_NewDelhi',SriJayawardenepura:'SriJayawardenepura',Kathmandu:'Kathmandu',Ekaterinburg:'Ekaterinburg',Astana:'Astana',Dhaka:'Dhaka',Yangon_Rangoon:'Yangon_Rangoon',Novosibirsk:'Novosibirsk',Bangkok_Hanoi_Jakarta:'Bangkok_Hanoi_Jakarta',Krasnoyarsk:'Krasnoyarsk',Beijing_Chongqing_HongKong_Urumqi:'Beijing_Chongqing_HongKong_Urumqi',KualaLumpur_Singapore:'KualaLumpur_Singapore',Taipei:'Taipei',Perth:'Perth',Ulaanbaatar:'Ulaanbaatar',Irkutsk:'Irkutsk',Seoul:'Seoul',Osaka_Sapporo_Tokyo:'Osaka_Sapporo_Tokyo',Darwin:'Darwin',Adelaide:'Adelaide',Yakutsk:'Yakutsk',Canberra_Melbourne_Sydney:'Canberra_Melbourne_Sydney',Brisbane:'Brisbane',Hobart:'Hobart',Guam_PortMoresby:'Guam_PortMoresby',Vladivostok:'Vladivostok',SolomonIs_NewCaledonia:'SolomonIs_NewCaledonia',Magadan:'Magadan',Fiji:'Fiji',Auckland_Wellington:'Auckland_Wellington',CoordinatedUniversalTime12:'CoordinatedUniversalTime12',Nukualofa:'Nukualofa',LocalTime:'LocalTime',ETimezoneSetting_MAX:'ETimezoneSetting_MAX', };
+declare class InternationalizationSettingsModel extends UObject { 
+	DisplayTimezone: ETimezoneSetting;
+	static Load(ResourceName: string): InternationalizationSettingsModel;
+	static Find(Outer: UObject, ResourceName: string): InternationalizationSettingsModel;
+	static GetDefaultObject(): InternationalizationSettingsModel;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InternationalizationSettingsModel;
+	static C(Other: UObject | any): InternationalizationSettingsModel;
 }
 
-declare class AssetTools extends Interface { 
-	static Load(ResourceName: string): AssetTools;
-	static Find(Outer: UObject, ResourceName: string): AssetTools;
-	static GetDefaultObject(): AssetTools;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetTools;
-	RenameAssetsWithDialog(AssetsAndNames: AssetRenameData[],bAutoCheckout: boolean): void;
+declare class PropertyConfigFileDisplayRow extends UObject { 
+	ConfigFileName: string;
+	ExternalProperty: Property;
+	bIsFileWritable: boolean;
+	static Load(ResourceName: string): PropertyConfigFileDisplayRow;
+	static Find(Outer: UObject, ResourceName: string): PropertyConfigFileDisplayRow;
+	static GetDefaultObject(): PropertyConfigFileDisplayRow;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyConfigFileDisplayRow;
+	static C(Other: UObject | any): PropertyConfigFileDisplayRow;
+}
+
+declare class ConfigHierarchyPropertyView extends UObject { 
+	EditProperty: any;
+	ConfigFilePropertyObjects: PropertyConfigFileDisplayRow[];
+	static Load(ResourceName: string): ConfigHierarchyPropertyView;
+	static Find(Outer: UObject, ResourceName: string): ConfigHierarchyPropertyView;
+	static GetDefaultObject(): ConfigHierarchyPropertyView;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ConfigHierarchyPropertyView;
+	static C(Other: UObject | any): ConfigHierarchyPropertyView;
+}
+
+declare type EPinnedCommandListType = 'Command' | 'CustomWidget' | 'EPinnedCommandListType_MAX';
+declare var EPinnedCommandListType : { Command:'Command',CustomWidget:'CustomWidget',EPinnedCommandListType_MAX:'EPinnedCommandListType_MAX', };
+declare class PinnedCommandListCommand { 
+	Name: string;
+	Binding: string;
+	Type: EPinnedCommandListType;
+	clone() : PinnedCommandListCommand;
+	static C(Other: UObject | any): PinnedCommandListCommand;
+}
+
+declare class PinnedCommandListContext { 
+	Name: string;
+	Commands: PinnedCommandListCommand[];
+	clone() : PinnedCommandListContext;
+	static C(Other: UObject | any): PinnedCommandListContext;
+}
+
+declare class PinnedCommandListSettings extends UObject { 
+	Contexts: PinnedCommandListContext[];
+	static Load(ResourceName: string): PinnedCommandListSettings;
+	static Find(Outer: UObject, ResourceName: string): PinnedCommandListSettings;
+	static GetDefaultObject(): PinnedCommandListSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PinnedCommandListSettings;
+	static C(Other: UObject | any): PinnedCommandListSettings;
+}
+
+declare class AnimationEditorPreviewActor extends Actor { 
+	static GetDefaultObject(): AnimationEditorPreviewActor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationEditorPreviewActor;
+	static C(Other: UObject | any): AnimationEditorPreviewActor;
+}
+
+declare class PersonaPreviewSceneController extends UObject { 
+	static Load(ResourceName: string): PersonaPreviewSceneController;
+	static Find(Outer: UObject, ResourceName: string): PersonaPreviewSceneController;
+	static GetDefaultObject(): PersonaPreviewSceneController;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PersonaPreviewSceneController;
+	static C(Other: UObject | any): PersonaPreviewSceneController;
+}
+
+declare class PersonaPreviewSceneAnimationController extends PersonaPreviewSceneController { 
+	Animation: AnimationAsset;
+	static Load(ResourceName: string): PersonaPreviewSceneAnimationController;
+	static Find(Outer: UObject, ResourceName: string): PersonaPreviewSceneAnimationController;
+	static GetDefaultObject(): PersonaPreviewSceneAnimationController;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PersonaPreviewSceneAnimationController;
+	static C(Other: UObject | any): PersonaPreviewSceneAnimationController;
+}
+
+declare class PersonaPreviewSceneDefaultController extends PersonaPreviewSceneController { 
+	static Load(ResourceName: string): PersonaPreviewSceneDefaultController;
+	static Find(Outer: UObject, ResourceName: string): PersonaPreviewSceneDefaultController;
+	static GetDefaultObject(): PersonaPreviewSceneDefaultController;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PersonaPreviewSceneDefaultController;
+	static C(Other: UObject | any): PersonaPreviewSceneDefaultController;
+}
+
+declare class PersonaPreviewSceneDescription extends UObject { 
+	PreviewController: UnrealEngineClass;
+	PreviewControllerInstance: PersonaPreviewSceneController;
+	PreviewControllerInstances: PersonaPreviewSceneController[];
+	PreviewMesh: SkeletalMesh;
+	AdditionalMeshes: DataAsset;
+	DefaultAdditionalMeshes: PreviewMeshCollection;
+	static Load(ResourceName: string): PersonaPreviewSceneDescription;
+	static Find(Outer: UObject, ResourceName: string): PersonaPreviewSceneDescription;
+	static GetDefaultObject(): PersonaPreviewSceneDescription;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PersonaPreviewSceneDescription;
+	static C(Other: UObject | any): PersonaPreviewSceneDescription;
+}
+
+declare class PersonaPreviewSceneRefPoseController extends PersonaPreviewSceneController { 
+	bResetBoneTransforms: boolean;
+	static Load(ResourceName: string): PersonaPreviewSceneRefPoseController;
+	static Find(Outer: UObject, ResourceName: string): PersonaPreviewSceneRefPoseController;
+	static GetDefaultObject(): PersonaPreviewSceneRefPoseController;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PersonaPreviewSceneRefPoseController;
+	static C(Other: UObject | any): PersonaPreviewSceneRefPoseController;
+}
+
+declare class SkinWeightImportOptions extends UObject { 
+	ProfileName: string;
+	FilePath: string;
+	LODIndex: number;
+	static Load(ResourceName: string): SkinWeightImportOptions;
+	static Find(Outer: UObject, ResourceName: string): SkinWeightImportOptions;
+	static GetDefaultObject(): SkinWeightImportOptions;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkinWeightImportOptions;
+	static C(Other: UObject | any): SkinWeightImportOptions;
+}
+
+declare class Manipulator extends Actor { 
+	AssociatedComponent: SceneComponent;
+	StaticMeshComponent: StaticMeshComponent;
+	static GetDefaultObject(): Manipulator;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Manipulator;
+	static C(Other: UObject | any): Manipulator;
+}
+
+declare class SplineMetadataDetailsFactoryBase extends UObject { 
+	static Load(ResourceName: string): SplineMetadataDetailsFactoryBase;
+	static Find(Outer: UObject, ResourceName: string): SplineMetadataDetailsFactoryBase;
+	static GetDefaultObject(): SplineMetadataDetailsFactoryBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SplineMetadataDetailsFactoryBase;
+	static C(Other: UObject | any): SplineMetadataDetailsFactoryBase;
+}
+
+declare class PropertyViewBase extends Widget { 
+	LazyObject: any;
+	SoftObjectPath: SoftObjectPath;
+	bAutoLoadAsset: boolean;
+	OnPropertyChanged: UnrealEngineMulticastDelegate<(PropertyName: string) => void>;
+	static Load(ResourceName: string): PropertyViewBase;
+	static Find(Outer: UObject, ResourceName: string): PropertyViewBase;
+	static GetDefaultObject(): PropertyViewBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyViewBase;
+	SetObject(NewObject: UObject): void;
+	GetObject(): UObject;
+	static C(Other: UObject | any): PropertyViewBase;
+}
+
+declare class DetailsView extends PropertyViewBase { 
+	bAllowFiltering: boolean;
+	bAllowFavoriteSystem: boolean;
+	bShowModifiedPropertiesOption: boolean;
+	bShowKeyablePropertiesOption: boolean;
+	bShowAnimatedPropertiesOption: boolean;
+	ColumnWidth: number;
+	bShowScrollBar: boolean;
+	bForceHiddenPropertyVisibility: boolean;
+	ViewIdentifier: string;
+	CategoriesToShow: string[];
+	PropertiesToShow: string[];
+	bShowOnlyWhitelisted: boolean;
+	static Load(ResourceName: string): DetailsView;
+	static Find(Outer: UObject, ResourceName: string): DetailsView;
+	static GetDefaultObject(): DetailsView;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DetailsView;
+	static C(Other: UObject | any): DetailsView;
+}
+
+declare class K2Node_CreateDragDropOperation extends K2Node_ConstructObjectFromClass { 
+	static Load(ResourceName: string): K2Node_CreateDragDropOperation;
+	static Find(Outer: UObject, ResourceName: string): K2Node_CreateDragDropOperation;
+	static GetDefaultObject(): K2Node_CreateDragDropOperation;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_CreateDragDropOperation;
+	static C(Other: UObject | any): K2Node_CreateDragDropOperation;
+}
+
+declare class K2Node_CreateWidget extends K2Node_ConstructObjectFromClass { 
+	static Load(ResourceName: string): K2Node_CreateWidget;
+	static Find(Outer: UObject, ResourceName: string): K2Node_CreateWidget;
+	static GetDefaultObject(): K2Node_CreateWidget;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_CreateWidget;
+	static C(Other: UObject | any): K2Node_CreateWidget;
+}
+
+declare class K2Node_PlayAnimation extends K2Node_BaseAsyncTask { 
+	static Load(ResourceName: string): K2Node_PlayAnimation;
+	static Find(Outer: UObject, ResourceName: string): K2Node_PlayAnimation;
+	static GetDefaultObject(): K2Node_PlayAnimation;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_PlayAnimation;
+	static C(Other: UObject | any): K2Node_PlayAnimation;
+}
+
+declare class K2Node_PlayAnimationTimeRange extends K2Node_BaseAsyncTask { 
+	static Load(ResourceName: string): K2Node_PlayAnimationTimeRange;
+	static Find(Outer: UObject, ResourceName: string): K2Node_PlayAnimationTimeRange;
+	static GetDefaultObject(): K2Node_PlayAnimationTimeRange;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_PlayAnimationTimeRange;
+	static C(Other: UObject | any): K2Node_PlayAnimationTimeRange;
+}
+
+declare class EditorPropertyPathSegment { 
+	struct: Struct;
+	MemberName: string;
+	MemberGuid: Guid;
+	IsProperty: boolean;
+	clone() : EditorPropertyPathSegment;
+	static C(Other: UObject | any): EditorPropertyPathSegment;
+}
+
+declare class EditorPropertyPath { 
+	Segments: EditorPropertyPathSegment[];
+	clone() : EditorPropertyPath;
+	static C(Other: UObject | any): EditorPropertyPath;
+}
+
+declare class DelegateEditorBinding { 
+	ObjectName: string;
+	PropertyName: string;
+	FunctionName: string;
+	SourceProperty: string;
+	SourcePath: EditorPropertyPath;
+	MemberGuid: Guid;
+	Kind: EBindingKind;
+	clone() : DelegateEditorBinding;
+	static C(Other: UObject | any): DelegateEditorBinding;
+}
+
+declare class WidgetAnimation_DEPRECATED { 
+	MovieScene: MovieScene;
+	AnimationBindings: WidgetAnimationBinding[];
+	clone() : WidgetAnimation_DEPRECATED;
+	static C(Other: UObject | any): WidgetAnimation_DEPRECATED;
+}
+
+declare type EWidgetSupportsDynamicCreation = 'Default' | 'Yes' | 'No' | 'EWidgetSupportsDynamicCreation_MAX';
+declare var EWidgetSupportsDynamicCreation : { Default:'Default',Yes:'Yes',No:'No',EWidgetSupportsDynamicCreation_MAX:'EWidgetSupportsDynamicCreation_MAX', };
+declare type EWidgetCompileTimeTickPrediction = 'WontTick' | 'OnDemand' | 'WillTick' | 'EWidgetCompileTimeTickPrediction_MAX';
+declare var EWidgetCompileTimeTickPrediction : { WontTick:'WontTick',OnDemand:'OnDemand',WillTick:'WillTick',EWidgetCompileTimeTickPrediction_MAX:'EWidgetCompileTimeTickPrediction_MAX', };
+declare class WidgetBlueprint extends BaseWidgetBlueprint { 
+	Bindings: DelegateEditorBinding[];
+	AnimationData: WidgetAnimation_DEPRECATED[];
+	Animations: WidgetAnimation[];
+	PaletteCategory: string;
+	bForceSlowConstructionPath: boolean;
+	SupportDynamicCreation: EWidgetSupportsDynamicCreation;
+	InclusiveWidgets: number;
+	EstimatedTemplateSize: number;
+	TickFrequency: EWidgetTickFrequency;
+	TickPrediction: EWidgetCompileTimeTickPrediction;
+	TickPredictionReason: string;
+	PropertyBindings: number;
+	static Load(ResourceName: string): WidgetBlueprint;
+	static Find(Outer: UObject, ResourceName: string): WidgetBlueprint;
+	static GetDefaultObject(): WidgetBlueprint;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetBlueprint;
+	static C(Other: UObject | any): WidgetBlueprint;
+}
+
+declare class K2Node_WidgetAnimationEvent extends K2Node_Event { 
+	Action: EWidgetAnimationEvent;
+	AnimationPropertyName: string;
+	UserTag: string;
+	SourceWidgetBlueprint: WidgetBlueprint;
+	static Load(ResourceName: string): K2Node_WidgetAnimationEvent;
+	static Find(Outer: UObject, ResourceName: string): K2Node_WidgetAnimationEvent;
+	static GetDefaultObject(): K2Node_WidgetAnimationEvent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_WidgetAnimationEvent;
+	static C(Other: UObject | any): K2Node_WidgetAnimationEvent;
+}
+
+declare class SinglePropertyView extends PropertyViewBase { 
+	PropertyName: string;
+	NameOverride: string;
+	static Load(ResourceName: string): SinglePropertyView;
+	static Find(Outer: UObject, ResourceName: string): SinglePropertyView;
+	static GetDefaultObject(): SinglePropertyView;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SinglePropertyView;
+	SetPropertyName(NewPropertyName: string): void;
+	GetPropertyName(): string;
+	static C(Other: UObject | any): SinglePropertyView;
+}
+
+declare class SlateVectorArtDataFactory extends Factory { 
+	static Load(ResourceName: string): SlateVectorArtDataFactory;
+	static Find(Outer: UObject, ResourceName: string): SlateVectorArtDataFactory;
+	static GetDefaultObject(): SlateVectorArtDataFactory;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateVectorArtDataFactory;
+	static C(Other: UObject | any): SlateVectorArtDataFactory;
+}
+
+declare type EPropertyBindingPermissionLevel = 'Allow' | 'Prevent' | 'PreventAndWarn' | 'PreventAndError' | 'EPropertyBindingPermissionLevel_MAX';
+declare var EPropertyBindingPermissionLevel : { Allow:'Allow',Prevent:'Prevent',PreventAndWarn:'PreventAndWarn',PreventAndError:'PreventAndError',EPropertyBindingPermissionLevel_MAX:'EPropertyBindingPermissionLevel_MAX', };
+declare class WidgetCompilerOptions { 
+	bCookSlowConstructionWidgetTree: boolean;
+	bWidgetSupportsDynamicCreation: boolean;
+	bAllowBlueprintTick: boolean;
+	bAllowBlueprintPaint: boolean;
+	PropertyBindingRule: EPropertyBindingPermissionLevel;
+	Rules: Class[];
+	clone() : WidgetCompilerOptions;
+	static C(Other: UObject | any): WidgetCompilerOptions;
+}
+
+declare class DirectoryWidgetCompilerOptions { 
+	Directory: DirectoryPath;
+	IgnoredWidgets: WidgetBlueprint[];
+	Options: WidgetCompilerOptions;
+	clone() : DirectoryWidgetCompilerOptions;
+	static C(Other: UObject | any): DirectoryWidgetCompilerOptions;
+}
+
+declare class DebugResolution { 
+	Width: number;
+	Height: number;
+	Description: string;
+	Color: LinearColor;
+	clone() : DebugResolution;
+	static C(Other: UObject | any): DebugResolution;
+}
+
+declare class UMGEditorProjectSettings extends DeveloperSettings { 
+	DefaultCompilerOptions: WidgetCompilerOptions;
+	DirectoryCompilerOptions: DirectoryWidgetCompilerOptions[];
+	bShowWidgetsFromEngineContent: boolean;
+	bShowWidgetsFromDeveloperContent: boolean;
+	CategoriesToHide: string[];
+	WidgetClassesToHide: SoftClassPath[];
+	DefaultRootWidget: UnrealEngineClass;
+	DebugResolutions: DebugResolution[];
+	Version: number;
+	bCookSlowConstructionWidgetTree: boolean;
+	bWidgetSupportsDynamicCreation: boolean;
+	static Load(ResourceName: string): UMGEditorProjectSettings;
+	static Find(Outer: UObject, ResourceName: string): UMGEditorProjectSettings;
+	static GetDefaultObject(): UMGEditorProjectSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UMGEditorProjectSettings;
+	static C(Other: UObject | any): UMGEditorProjectSettings;
+}
+
+declare class WidgetBlueprintFactory extends Factory { 
+	BlueprintType: EBlueprintType;
+	ParentClass: UnrealEngineClass;
+	static Load(ResourceName: string): WidgetBlueprintFactory;
+	static Find(Outer: UObject, ResourceName: string): WidgetBlueprintFactory;
+	static GetDefaultObject(): WidgetBlueprintFactory;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetBlueprintFactory;
+	static C(Other: UObject | any): WidgetBlueprintFactory;
+}
+
+declare class WidgetCompilerRule extends UObject { 
+	static Load(ResourceName: string): WidgetCompilerRule;
+	static Find(Outer: UObject, ResourceName: string): WidgetCompilerRule;
+	static GetDefaultObject(): WidgetCompilerRule;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetCompilerRule;
+	static C(Other: UObject | any): WidgetCompilerRule;
+}
+
+declare class WidgetPaletteFavorites extends UObject { 
+	Favorites: string[];
+	static Load(ResourceName: string): WidgetPaletteFavorites;
+	static Find(Outer: UObject, ResourceName: string): WidgetPaletteFavorites;
+	static GetDefaultObject(): WidgetPaletteFavorites;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetPaletteFavorites;
+	static C(Other: UObject | any): WidgetPaletteFavorites;
+}
+
+declare class WidgetDesignerSettings extends DeveloperSettings { 
+	GridSnapEnabled: boolean;
+	GridSnapSize: number;
+	bLockToPanelOnDragByDefault: boolean;
+	bShowOutlines: boolean;
+	bExecutePreConstructEvent: boolean;
+	bRespectLocks: boolean;
+	Favorites: WidgetPaletteFavorites;
+	static Load(ResourceName: string): WidgetDesignerSettings;
+	static Find(Outer: UObject, ResourceName: string): WidgetDesignerSettings;
+	static GetDefaultObject(): WidgetDesignerSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetDesignerSettings;
+	static C(Other: UObject | any): WidgetDesignerSettings;
+}
+
+declare class WidgetGraphSchema extends EdGraphSchema_K2 { 
+	static Load(ResourceName: string): WidgetGraphSchema;
+	static Find(Outer: UObject, ResourceName: string): WidgetGraphSchema;
+	static GetDefaultObject(): WidgetGraphSchema;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetGraphSchema;
+	static C(Other: UObject | any): WidgetGraphSchema;
+}
+
+declare class WidgetSlotPair extends UObject { 
+	WidgetName: string;
+	SlotPropertyNames: string[];
+	SlotPropertyValues: string[];
+	static Load(ResourceName: string): WidgetSlotPair;
+	static Find(Outer: UObject, ResourceName: string): WidgetSlotPair;
+	static GetDefaultObject(): WidgetSlotPair;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WidgetSlotPair;
+	static C(Other: UObject | any): WidgetSlotPair;
+}
+
+declare class AdvancedCopyCustomization extends UObject { 
+	static Load(ResourceName: string): AdvancedCopyCustomization;
+	static Find(Outer: UObject, ResourceName: string): AdvancedCopyCustomization;
+	static GetDefaultObject(): AdvancedCopyCustomization;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AdvancedCopyCustomization;
+	static C(Other: UObject | any): AdvancedCopyCustomization;
+}
+
+declare class AssetToolsImpl extends UObject { 
+	static Load(ResourceName: string): AssetToolsImpl;
+	static Find(Outer: UObject, ResourceName: string): AssetToolsImpl;
+	static GetDefaultObject(): AssetToolsImpl;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetToolsImpl;
+	static C(Other: UObject | any): AssetToolsImpl;
+}
+
+declare class AdvancedCopyMap { 
+	ClassToCopy: SoftClassPath;
+	AdvancedCopyCustomization: SoftClassPath;
+	clone() : AdvancedCopyMap;
+	static C(Other: UObject | any): AdvancedCopyMap;
+}
+
+declare class AssetToolsSettings extends DeveloperSettings { 
+	AdvancedCopyCustomizations: AdvancedCopyMap[];
+	static Load(ResourceName: string): AssetToolsSettings;
+	static Find(Outer: UObject, ResourceName: string): AssetToolsSettings;
+	static GetDefaultObject(): AssetToolsSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetToolsSettings;
+	static C(Other: UObject | any): AssetToolsSettings;
+}
+
+declare class AssetRenameData { 
+	Asset: any;
+	NewPackagePath: string;
+	NewName: string;
+	OldObjectPath: SoftObjectPath;
+	NewObjectPath: SoftObjectPath;
+	bOnlyFixSoftReferences: boolean;
+	clone() : AssetRenameData;
+	static C(Other: UObject | any): AssetRenameData;
+}
+
+declare class AssetTools extends Interface { 
+	static Load(ResourceName: string): AssetTools;
+	static Find(Outer: UObject, ResourceName: string): AssetTools;
+	static GetDefaultObject(): AssetTools;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetTools;
+	RenameReferencingSoftObjectPaths(PackagesToCheck: Package[],AssetRedirectorMap: any): void;
+	RenameAssetsWithDialog(AssetsAndNames: AssetRenameData[],bAutoCheckout: boolean): void;
 	RenameAssets(AssetsAndNames: AssetRenameData[]): boolean;
 	OpenEditorForAssets(Assets: UObject[]): void;
 	ImportAssetTasks(ImportTasks: AssetImportTask[]): void;
@@ -4320,11 +8195,37 @@ declare class AssetToolsHelpers extends UObject {
 	static C(Other: UObject | any): AssetToolsHelpers;
 }
 
+declare class AutomatedTestFilter { 
+	Contains: string;
+	MatchFromStart: boolean;
+	clone() : AutomatedTestFilter;
+	static C(Other: UObject | any): AutomatedTestFilter;
+}
+
+declare class AutomatedTestGroup { 
+	Name: string;
+	Filters: AutomatedTestFilter[];
+	clone() : AutomatedTestGroup;
+	static C(Other: UObject | any): AutomatedTestGroup;
+}
+
+declare class AutomationControllerSettings extends UObject { 
+	Groups: AutomatedTestGroup[];
+	bTreatLogErrorsAsTestErrors: boolean;
+	bTreatLogWarningsAsTestErrors: boolean;
+	static Load(ResourceName: string): AutomationControllerSettings;
+	static Find(Outer: UObject, ResourceName: string): AutomationControllerSettings;
+	static GetDefaultObject(): AutomationControllerSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomationControllerSettings;
+	static C(Other: UObject | any): AutomationControllerSettings;
+}
+
 declare class AutomationBlueprintFunctionLibrary extends BlueprintFunctionLibrary { 
 	static Load(ResourceName: string): AutomationBlueprintFunctionLibrary;
 	static Find(Outer: UObject, ResourceName: string): AutomationBlueprintFunctionLibrary;
 	static GetDefaultObject(): AutomationBlueprintFunctionLibrary;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomationBlueprintFunctionLibrary;
+	static TakeHighResScreenshot(ResX: number,ResY: number,Filename: string,Camera: CameraActor,bMaskEnabled: boolean,bCaptureHDR: boolean): boolean;
 	static TakeAutomationScreenshotOfUI(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Name: string,Options: AutomationScreenshotOptions): void;
 	static TakeAutomationScreenshotAtCamera(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Camera: CameraActor,NameOverride: string,Notes: string,Options: AutomationScreenshotOptions): void;
 	static TakeAutomationScreenshot(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Name: string,Notes: string,Options: AutomationScreenshotOptions): void;
@@ -4340,6 +8241,7 @@ declare class AutomationBlueprintFunctionLibrary extends BlueprintFunctionLibrar
 	static GetDefaultScreenshotOptionsForGameplay(Tolerance: EComparisonTolerance,Delay: number): AutomationScreenshotOptions;
 	static EnableStatGroup(WorldContextObject: UObject,GroupName: string): void;
 	static DisableStatGroup(WorldContextObject: UObject,GroupName: string): void;
+	static AutomationWaitForLoading(WorldContextObject: UObject,LatentInfo: LatentActionInfo): void;
 	static AreAutomatedTestsRunning(): boolean;
 	static C(Other: UObject | any): AutomationBlueprintFunctionLibrary;
 }
@@ -4352,6 +8254,8 @@ declare class FuncTestRenderingComponent extends PrimitiveComponent {
 	static C(Other: UObject | any): FuncTestRenderingComponent;
 }
 
+declare type EFunctionalTestLogHandling = 'ProjectDefault' | 'OutputIsError' | 'OutputIgnored' | 'EFunctionalTestLogHandling_MAX';
+declare var EFunctionalTestLogHandling : { ProjectDefault:'ProjectDefault',OutputIsError:'OutputIsError',OutputIgnored:'OutputIgnored',EFunctionalTestLogHandling_MAX:'EFunctionalTestLogHandling_MAX', };
 declare type EFunctionalTestResult = 'Default' | 'Invalid' | 'Error' | 'Running' | 'Failed' | 'Succeeded' | 'EFunctionalTestResult_MAX';
 declare var EFunctionalTestResult : { Default:'Default',Invalid:'Invalid',Error:'Error',Running:'Running',Failed:'Failed',Succeeded:'Succeeded',EFunctionalTestResult_MAX:'EFunctionalTestResult_MAX', };
 declare type EComparisonMethod = 'Equal_To' | 'Not_Equal_To' | 'Greater_Than_Or_Equal_To' | 'Less_Than_Or_Equal_To' | 'Greater_Than' | 'Less_Than' | 'EComparisonMethod_MAX';
@@ -4359,7 +8263,8 @@ declare var EComparisonMethod : { Equal_To:'Equal_To',Not_Equal_To:'Not_Equal_To
 declare class FunctionalTest extends Actor { 
 	SpriteComponent: BillboardComponent;
 	bIsEnabled: boolean;
-	bWarningsAsErrors: boolean;
+	LogErrorHandling: EFunctionalTestLogHandling;
+	LogWarningHandling: EFunctionalTestLogHandling;
 	Author: string;
 	Description: string;
 	ObservationPoint: Actor;
@@ -4970,8 +8875,13 @@ declare class MediaPlayerTrackOptions {
 	static C(Other: UObject | any): MediaPlayerTrackOptions;
 }
 
+declare type EMediaPlayerOptionBooleanOverride = 'UseMediaPlayerSetting' | 'Enabled' | 'Disabled' | 'EMediaPlayerOptionBooleanOverride_MAX';
+declare var EMediaPlayerOptionBooleanOverride : { UseMediaPlayerSetting:'UseMediaPlayerSetting',Enabled:'Enabled',Disabled:'Disabled',EMediaPlayerOptionBooleanOverride_MAX:'EMediaPlayerOptionBooleanOverride_MAX', };
 declare class MediaPlayerOptions { 
 	Tracks: MediaPlayerTrackOptions;
+	SeekTime: Timespan;
+	PlayOnOpen: EMediaPlayerOptionBooleanOverride;
+	loop: EMediaPlayerOptionBooleanOverride;
 	clone() : MediaPlayerOptions;
 	static C(Other: UObject | any): MediaPlayerOptions;
 }
@@ -5026,6 +8936,7 @@ declare class MediaPlayer extends UObject {
 	Pause(): boolean;
 	OpenUrl(URL: string): boolean;
 	OpenSourceWithOptions(MediaSource: MediaSource,Options: MediaPlayerOptions): boolean;
+	OpenSourceLatent(WorldContextObject: UObject,LatentInfo: LatentActionInfo,MediaSource: MediaSource,Options: MediaPlayerOptions,bSuccess?: boolean): {bSuccess: boolean};
 	OpenSource(MediaSource: MediaSource): boolean;
 	OpenPlaylistIndex(InPlaylist: MediaPlaylist,index: number): boolean;
 	OpenPlaylist(InPlaylist: MediaPlaylist): boolean;
@@ -5037,6 +8948,7 @@ declare class MediaPlayer extends UObject {
 	IsPaused(): boolean;
 	IsLooping(): boolean;
 	IsConnecting(): boolean;
+	IsClosed(): boolean;
 	IsBuffering(): boolean;
 	HasError(): boolean;
 	GetViewRotation(): Rotator;
@@ -5061,6 +8973,8 @@ declare class MediaPlayer extends UObject {
 	GetNumTracks(TrackType: EMediaPlayerTrack): number;
 	GetNumTrackFormats(TrackType: EMediaPlayerTrack,TrackIndex: number): number;
 	GetMediaName(): string;
+	GetLastVideoSampleProcessedTime(): Timespan;
+	GetLastAudioSampleProcessedTime(): Timespan;
 	GetHorizontalFieldOfView(): number;
 	GetDuration(): Timespan;
 	GetDesiredPlayerName(): string;
@@ -5076,6 +8990,15 @@ declare class MediaPlayer extends UObject {
 
 declare type EMediaSoundChannels = 'Mono' | 'Stereo' | 'Surround' | 'EMediaSoundChannels_MAX';
 declare var EMediaSoundChannels : { Mono:'Mono',Stereo:'Stereo',Surround:'Surround',EMediaSoundChannels_MAX:'EMediaSoundChannels_MAX', };
+declare type EMediaSoundComponentFFTSize = 'Min_64' | 'Small_256' | 'Medium_512' | 'Large_1024' | 'EMediaSoundComponentFFTSize_MAX';
+declare var EMediaSoundComponentFFTSize : { Min_64:'Min_64',Small_256:'Small_256',Medium_512:'Medium_512',Large_1024:'Large_1024',EMediaSoundComponentFFTSize_MAX:'EMediaSoundComponentFFTSize_MAX', };
+declare class MediaSoundComponentSpectralData { 
+	FrequencyHz: number;
+	Magnitude: number;
+	clone() : MediaSoundComponentSpectralData;
+	static C(Other: UObject | any): MediaSoundComponentSpectralData;
+}
+
 declare class MediaSoundComponent extends SynthComponent { 
 	Channels: EMediaSoundChannels;
 	DynamicRateAdjustment: boolean;
@@ -5086,8 +9009,14 @@ declare class MediaSoundComponent extends SynthComponent {
 	static Find(Outer: UObject, ResourceName: string): MediaSoundComponent;
 	static GetDefaultObject(): MediaSoundComponent;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MediaSoundComponent;
+	SetSpectralAnalysisSettings(InFrequenciesToAnalyze: number[],InFFTSize: EMediaSoundComponentFFTSize): void;
 	SetMediaPlayer(NewMediaPlayer: MediaPlayer): void;
+	SetEnvelopeFollowingsettings(AttackTimeMsec: number,ReleaseTimeMsec: number): void;
+	SetEnableSpectralAnalysis(bInSpectralAnalysisEnabled: boolean): void;
+	SetEnableEnvelopeFollowing(bInEnvelopeFollowing: boolean): void;
+	GetSpectralData(): MediaSoundComponentSpectralData[];
 	GetMediaPlayer(): MediaPlayer;
+	GetEnvelopeValue(): number;
 	BP_GetAttenuationSettingsToApply(OutAttenuationSettings?: SoundAttenuationSettings): {OutAttenuationSettings: SoundAttenuationSettings, $: boolean};
 	static C(Other: UObject | any): MediaSoundComponent;
 }
@@ -5138,17 +9067,6 @@ declare class TimeSynchronizableMediaSource extends BaseMediaSource {
 	static C(Other: UObject | any): TimeSynchronizableMediaSource;
 }
 
-declare class WmfMediaSettings extends UObject { 
-	AllowNonStandardCodecs: boolean;
-	LowLatency: boolean;
-	NativeAudioOut: boolean;
-	static Load(ResourceName: string): WmfMediaSettings;
-	static Find(Outer: UObject, ResourceName: string): WmfMediaSettings;
-	static GetDefaultObject(): WmfMediaSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WmfMediaSettings;
-	static C(Other: UObject | any): WmfMediaSettings;
-}
-
 declare class MaterialExpressionSpriteTextureSampler extends MaterialExpressionTextureSampleParameter2D { 
 	bSampleAdditionalTextures: boolean;
 	AdditionalSlotIndex: number;
@@ -5722,6 +9640,146 @@ declare class LightPropagationVolumeBlendable extends UObject {
 	static C(Other: UObject | any): LightPropagationVolumeBlendable;
 }
 
+declare class SignificanceManager extends UObject { 
+	SignificanceManagerClassName: SoftClassPath;
+	static Load(ResourceName: string): SignificanceManager;
+	static Find(Outer: UObject, ResourceName: string): SignificanceManager;
+	static GetDefaultObject(): SignificanceManager;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SignificanceManager;
+	static C(Other: UObject | any): SignificanceManager;
+}
+
+declare class AnimationSharingStateProcessor extends UObject { 
+	AnimationStateEnum: Enum;
+	static Load(ResourceName: string): AnimationSharingStateProcessor;
+	static Find(Outer: UObject, ResourceName: string): AnimationSharingStateProcessor;
+	static GetDefaultObject(): AnimationSharingStateProcessor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationSharingStateProcessor;
+	ProcessActorState(OutState?: number,InActor?: Actor,CurrentState?: number,OnDemandState?: number,bShouldProcess?: boolean): {OutState: number, bShouldProcess: boolean};
+	GetAnimationStateEnum(): Enum;
+	static C(Other: UObject | any): AnimationSharingStateProcessor;
+}
+
+declare class AnimSharingInstance extends UObject { 
+	RegisteredActors: Actor[];
+	StateProcessor: AnimationSharingStateProcessor;
+	UsedAnimationSequences: AnimSequence[];
+	StateEnum: Enum;
+	SharingActor: Actor;
+	static Load(ResourceName: string): AnimSharingInstance;
+	static Find(Outer: UObject, ResourceName: string): AnimSharingInstance;
+	static GetDefaultObject(): AnimSharingInstance;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimSharingInstance;
+	static C(Other: UObject | any): AnimSharingInstance;
+}
+
+declare class AnimSharingStateInstance extends AnimInstance { 
+	AnimationToPlay: AnimSequence;
+	PermutationTimeOffset: number;
+	PlayRate: number;
+	bStateBool: boolean;
+	Instance: AnimSharingInstance;
+	static Load(ResourceName: string): AnimSharingStateInstance;
+	static Find(Outer: UObject, ResourceName: string): AnimSharingStateInstance;
+	static GetDefaultObject(): AnimSharingStateInstance;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimSharingStateInstance;
+	GetInstancedActors(Actors?: Actor[]): {Actors: Actor[]};
+	static C(Other: UObject | any): AnimSharingStateInstance;
+}
+
+declare class AnimSharingTransitionInstance extends AnimInstance { 
+	FromComponent: any;
+	ToComponent: any;
+	BlendTime: number;
+	bBlendBool: boolean;
+	static Load(ResourceName: string): AnimSharingTransitionInstance;
+	static Find(Outer: UObject, ResourceName: string): AnimSharingTransitionInstance;
+	static GetDefaultObject(): AnimSharingTransitionInstance;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimSharingTransitionInstance;
+	static C(Other: UObject | any): AnimSharingTransitionInstance;
+}
+
+declare class AnimSharingAdditiveInstance extends AnimInstance { 
+	BaseComponent: any;
+	AdditiveAnimation: any;
+	Alpha: number;
+	bStateBool: boolean;
+	static Load(ResourceName: string): AnimSharingAdditiveInstance;
+	static Find(Outer: UObject, ResourceName: string): AnimSharingAdditiveInstance;
+	static GetDefaultObject(): AnimSharingAdditiveInstance;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimSharingAdditiveInstance;
+	static C(Other: UObject | any): AnimSharingAdditiveInstance;
+}
+
+declare class AnimationSetup { 
+	AnimSequence: AnimSequence;
+	AnimBlueprint: UnrealEngineClass;
+	NumRandomizedInstances: PerPlatformInt;
+	Enabled: PerPlatformBool;
+	clone() : AnimationSetup;
+	static C(Other: UObject | any): AnimationSetup;
+}
+
+declare class AnimationStateEntry { 
+	State: number;
+	AnimationSetups: AnimationSetup[];
+	bOnDemand: boolean;
+	bAdditive: boolean;
+	BlendTime: number;
+	bReturnToPreviousState: boolean;
+	bSetNextState: boolean;
+	NextState: number;
+	MaximumNumberOfConcurrentInstances: PerPlatformInt;
+	WiggleTimePercentage: number;
+	bRequiresCurves: boolean;
+	clone() : AnimationStateEntry;
+	static C(Other: UObject | any): AnimationStateEntry;
+}
+
+declare class PerSkeletonAnimationSharingSetup { 
+	Skeleton: Skeleton;
+	SkeletalMesh: SkeletalMesh;
+	BlendAnimBlueprint: UnrealEngineClass;
+	AdditiveAnimBlueprint: UnrealEngineClass;
+	StateProcessorClass: UnrealEngineClass;
+	AnimationStates: AnimationStateEntry[];
+	clone() : PerSkeletonAnimationSharingSetup;
+	static C(Other: UObject | any): PerSkeletonAnimationSharingSetup;
+}
+
+declare class AnimationSharingScalability { 
+	UseBlendTransitions: PerPlatformBool;
+	BlendSignificanceValue: PerPlatformFloat;
+	MaximumNumberConcurrentBlends: PerPlatformInt;
+	TickSignificanceValue: PerPlatformFloat;
+	clone() : AnimationSharingScalability;
+	static C(Other: UObject | any): AnimationSharingScalability;
+}
+
+declare class AnimationSharingSetup extends UObject { 
+	SkeletonSetups: PerSkeletonAnimationSharingSetup[];
+	ScalabilitySettings: AnimationSharingScalability;
+	static Load(ResourceName: string): AnimationSharingSetup;
+	static Find(Outer: UObject, ResourceName: string): AnimationSharingSetup;
+	static GetDefaultObject(): AnimationSharingSetup;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationSharingSetup;
+	static C(Other: UObject | any): AnimationSharingSetup;
+}
+
+declare class AnimationSharingManager extends UObject { 
+	Skeletons: Skeleton[];
+	PerSkeletonData: AnimSharingInstance[];
+	static Load(ResourceName: string): AnimationSharingManager;
+	static Find(Outer: UObject, ResourceName: string): AnimationSharingManager;
+	static GetDefaultObject(): AnimationSharingManager;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationSharingManager;
+	RegisterActorWithSkeletonBP(InActor: Actor,SharingSkeleton: Skeleton): void;
+	static GetAnimationSharingManager(WorldContextObject: UObject): AnimationSharingManager;
+	static CreateAnimationSharingManager(WorldContextObject: UObject,Setup: AnimationSharingSetup): boolean;
+	static AnimationSharingEnabled(): boolean;
+	static C(Other: UObject | any): AnimationSharingManager;
+}
+
 declare class EdGraph_ReferenceViewer extends EdGraph { 
 	static Load(ResourceName: string): EdGraph_ReferenceViewer;
 	static Find(Outer: UObject, ResourceName: string): EdGraph_ReferenceViewer;
@@ -5833,7 +9891,7 @@ declare class PixelInspectorView extends UObject {
 	SubsurfaceColor: LinearColor;
 	SubsurfaceProfile: Vector;
 	Opacity: number;
-	Clearcoat: number;
+	ClearCoat: number;
 	ClearCoatRoughness: number;
 	WorldNormal: Vector;
 	BackLit: number;
@@ -5848,6 +9906,176 @@ declare class PixelInspectorView extends UObject {
 	static C(Other: UObject | any): PixelInspectorView;
 }
 
+declare class EditorUtilityObject extends UObject { 
+	static Load(ResourceName: string): EditorUtilityObject;
+	static Find(Outer: UObject, ResourceName: string): EditorUtilityObject;
+	static GetDefaultObject(): EditorUtilityObject;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorUtilityObject;
+	Run(): void;
+	static C(Other: UObject | any): EditorUtilityObject;
+}
+
+declare class ActorActionUtility extends EditorUtilityObject { 
+	static Load(ResourceName: string): ActorActionUtility;
+	static Find(Outer: UObject, ResourceName: string): ActorActionUtility;
+	static GetDefaultObject(): ActorActionUtility;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorActionUtility;
+	GetSupportedClass(): UnrealEngineClass;
+	static C(Other: UObject | any): ActorActionUtility;
+}
+
+declare class AssetActionUtility extends EditorUtilityObject { 
+	static Load(ResourceName: string): AssetActionUtility;
+	static Find(Outer: UObject, ResourceName: string): AssetActionUtility;
+	static GetDefaultObject(): AssetActionUtility;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetActionUtility;
+	GetSupportedClass(): UnrealEngineClass;
+	static C(Other: UObject | any): AssetActionUtility;
+}
+
+declare class EditorUtilityExtension extends Interface { 
+	static Load(ResourceName: string): EditorUtilityExtension;
+	static Find(Outer: UObject, ResourceName: string): EditorUtilityExtension;
+	static GetDefaultObject(): EditorUtilityExtension;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorUtilityExtension;
+	static C(Other: UObject | any): EditorUtilityExtension;
+}
+
+declare class EditorUtilityActor extends Actor { 
+	static GetDefaultObject(): EditorUtilityActor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorUtilityActor;
+	Run(): void;
+	static C(Other: UObject | any): EditorUtilityActor;
+}
+
+declare class EditorUtilityActorComponent extends ActorComponent { 
+	static Load(ResourceName: string): EditorUtilityActorComponent;
+	static Find(Outer: UObject, ResourceName: string): EditorUtilityActorComponent;
+	static GetDefaultObject(): EditorUtilityActorComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorUtilityActorComponent;
+	static C(Other: UObject | any): EditorUtilityActorComponent;
+}
+
+declare class EditorUtilityBlueprint extends Blueprint { 
+	static Load(ResourceName: string): EditorUtilityBlueprint;
+	static Find(Outer: UObject, ResourceName: string): EditorUtilityBlueprint;
+	static GetDefaultObject(): EditorUtilityBlueprint;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorUtilityBlueprint;
+	static C(Other: UObject | any): EditorUtilityBlueprint;
+}
+
+declare class EditorUtilityBlueprintFactory extends Factory { 
+	ParentClass: UnrealEngineClass;
+	static Load(ResourceName: string): EditorUtilityBlueprintFactory;
+	static Find(Outer: UObject, ResourceName: string): EditorUtilityBlueprintFactory;
+	static GetDefaultObject(): EditorUtilityBlueprintFactory;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorUtilityBlueprintFactory;
+	static C(Other: UObject | any): EditorUtilityBlueprintFactory;
+}
+
+declare class EditorUtilityCamera extends CameraActor { 
+	static GetDefaultObject(): EditorUtilityCamera;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorUtilityCamera;
+	static C(Other: UObject | any): EditorUtilityCamera;
+}
+
+declare class EditorUtilityLibrary extends BlueprintFunctionLibrary { 
+	static Load(ResourceName: string): EditorUtilityLibrary;
+	static Find(Outer: UObject, ResourceName: string): EditorUtilityLibrary;
+	static GetDefaultObject(): EditorUtilityLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorUtilityLibrary;
+	static RenameAsset(Asset: UObject,NewName: string): void;
+	static GetSelectionSet(): Actor[];
+	static GetSelectionBounds(Origin?: Vector,BoxExtent?: Vector,SphereRadius?: number): {Origin: Vector, BoxExtent: Vector, SphereRadius: number};
+	static GetSelectedAssets(): UObject[];
+	static GetSelectedAssetData(): AssetData[];
+	GetActorReference(PathToActor: string): Actor;
+	static C(Other: UObject | any): EditorUtilityLibrary;
+}
+
+declare class EditorUtilityWidget extends UserWidget { 
+	HelpText: string;
+	bAlwaysReregisterWithWindowsMenu: boolean;
+	bAutoRunDefaultAction: boolean;
+	static Load(ResourceName: string): EditorUtilityWidget;
+	static Find(Outer: UObject, ResourceName: string): EditorUtilityWidget;
+	static GetDefaultObject(): EditorUtilityWidget;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorUtilityWidget;
+	Run(): void;
+	static C(Other: UObject | any): EditorUtilityWidget;
+}
+
+declare class EditorUtilityWidgetBlueprint extends WidgetBlueprint { 
+	CreatedUMGWidget: EditorUtilityWidget;
+	static Load(ResourceName: string): EditorUtilityWidgetBlueprint;
+	static Find(Outer: UObject, ResourceName: string): EditorUtilityWidgetBlueprint;
+	static GetDefaultObject(): EditorUtilityWidgetBlueprint;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorUtilityWidgetBlueprint;
+	static C(Other: UObject | any): EditorUtilityWidgetBlueprint;
+}
+
+declare class EditorUtilitySubsystem extends EditorSubsystem { 
+	LoadedUIs: SoftObjectPath[];
+	StartupObjects: SoftObjectPath[];
+	ObjectInstances: any;
+	static Load(ResourceName: string): EditorUtilitySubsystem;
+	static Find(Outer: UObject, ResourceName: string): EditorUtilitySubsystem;
+	static GetDefaultObject(): EditorUtilitySubsystem;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorUtilitySubsystem;
+	SpawnAndRegisterTab(InBlueprint: EditorUtilityWidgetBlueprint): EditorUtilityWidget;
+	ReleaseInstanceOfAsset(Asset: UObject): void;
+	static C(Other: UObject | any): EditorUtilitySubsystem;
+}
+
+declare class EditorUtilityWidgetBlueprintFactory extends Factory { 
+	BlueprintType: EBlueprintType;
+	ParentClass: UnrealEngineClass;
+	static Load(ResourceName: string): EditorUtilityWidgetBlueprintFactory;
+	static Find(Outer: UObject, ResourceName: string): EditorUtilityWidgetBlueprintFactory;
+	static GetDefaultObject(): EditorUtilityWidgetBlueprintFactory;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorUtilityWidgetBlueprintFactory;
+	static C(Other: UObject | any): EditorUtilityWidgetBlueprintFactory;
+}
+
+declare class GlobalEditorUtilityBase extends UObject { 
+	HelpText: string;
+	bDirtiedSelectionSet: boolean;
+	bAutoRunDefaultAction: boolean;
+	OnEachSelectedActor: UnrealEngineMulticastDelegate<(Actor: Actor, index: number) => void>;
+	OnEachSelectedAsset: UnrealEngineMulticastDelegate<(Asset: UObject, index: number) => void>;
+	static Load(ResourceName: string): GlobalEditorUtilityBase;
+	static Find(Outer: UObject, ResourceName: string): GlobalEditorUtilityBase;
+	static GetDefaultObject(): GlobalEditorUtilityBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GlobalEditorUtilityBase;
+	SetActorSelectionState(Actor: Actor,bShouldBeSelected: boolean): void;
+	SelectNothing(): void;
+	RenameAsset(Asset: UObject,NewName: string): void;
+	OnDefaultActionClicked(): void;
+	GetSelectionSet(): Actor[];
+	GetSelectionBounds(Origin?: Vector,BoxExtent?: Vector,SphereRadius?: number): {Origin: Vector, BoxExtent: Vector, SphereRadius: number};
+	GetSelectedAssets(): UObject[];
+	GetEditorUserSettings(): EditorPerProjectUserSettings;
+	GetActorReference(PathToActor: string): Actor;
+	ForEachSelectedAsset(): void;
+	ForEachSelectedActor(): void;
+	ClearActorSelectionSet(): void;
+	static C(Other: UObject | any): GlobalEditorUtilityBase;
+}
+
+declare class PlacedEditorUtilityBase extends Actor { 
+	HelpText: string;
+	static GetDefaultObject(): PlacedEditorUtilityBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlacedEditorUtilityBase;
+	SetLevelViewportCameraInfo(CameraLocation: Vector,CameraRotation: Rotator): void;
+	SetActorSelectionState(Actor: Actor,bShouldBeSelected: boolean): void;
+	SelectNothing(): void;
+	GetSelectionSet(): Actor[];
+	GetLevelViewportCameraInfo(CameraLocation?: Vector,CameraRotation?: Rotator): {CameraLocation: Vector, CameraRotation: Rotator, $: boolean};
+	GetActorReference(PathToActor: string): Actor;
+	ClearActorSelectionSet(): void;
+	static C(Other: UObject | any): PlacedEditorUtilityBase;
+}
+
 declare class DataValidationCommandlet extends Commandlet { 
 	static Load(ResourceName: string): DataValidationCommandlet;
 	static Find(Outer: UObject, ResourceName: string): DataValidationCommandlet;
@@ -5867,6 +10095,39 @@ declare class DataValidationManager extends UObject {
 	static C(Other: UObject | any): DataValidationManager;
 }
 
+declare type EDataValidationResult = 'Invalid' | 'Valid' | 'NotValidated' | 'EDataValidationResult_MAX';
+declare var EDataValidationResult : { Invalid:'Invalid',Valid:'Valid',NotValidated:'NotValidated',EDataValidationResult_MAX:'EDataValidationResult_MAX', };
+declare class EditorValidatorBase extends UObject { 
+	bIsEnabled: boolean;
+	static Load(ResourceName: string): EditorValidatorBase;
+	static Find(Outer: UObject, ResourceName: string): EditorValidatorBase;
+	static GetDefaultObject(): EditorValidatorBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorValidatorBase;
+	ValidateLoadedAsset(InAsset: UObject,ValidationErrors?: string[]): {ValidationErrors: string[], $: EDataValidationResult};
+	GetValidationResult(): EDataValidationResult;
+	CanValidateAsset(InAsset: UObject): boolean;
+	AssetPasses(InAsset: UObject): void;
+	AssetFails(InAsset: UObject,InMessage: string,ValidationErrors?: string[]): {ValidationErrors: string[]};
+	static C(Other: UObject | any): EditorValidatorBase;
+}
+
+declare class EditorValidatorSubsystem extends EditorSubsystem { 
+	ExcludedDirectories: DirectoryPath[];
+	bValidateOnSave: boolean;
+	Validators: any;
+	bValidateAssetsWhileSavingForCook: boolean;
+	bAllowBlueprintValidators: boolean;
+	static Load(ResourceName: string): EditorValidatorSubsystem;
+	static Find(Outer: UObject, ResourceName: string): EditorValidatorSubsystem;
+	static GetDefaultObject(): EditorValidatorSubsystem;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorValidatorSubsystem;
+	ValidateAssets(AssetDataList: AssetData[],bSkipExcludedDirectories: boolean,bShowIfNoFailures: boolean): number;
+	IsObjectValid(InObject: UObject,ValidationErrors?: string[]): {ValidationErrors: string[], $: EDataValidationResult};
+	IsAssetValid(AssetData?: AssetData,ValidationErrors?: string[]): {AssetData: AssetData, ValidationErrors: string[], $: EDataValidationResult};
+	AddValidator(InValidator: EditorValidatorBase): void;
+	static C(Other: UObject | any): EditorValidatorSubsystem;
+}
+
 declare class AudioCurveSourceComponent extends AudioComponent { 
 	CurveSourceBindingName: string;
 	CurveSyncOffset: number;
@@ -5966,418 +10227,463 @@ declare class GameplayTagsK2Node_SwitchGameplayTagContainer extends K2Node_Switc
 	static C(Other: UObject | any): GameplayTagsK2Node_SwitchGameplayTagContainer;
 }
 
-declare class TcpMessagingSettings extends UObject { 
-	EnableTransport: boolean;
-	ListenEndpoint: string;
-	ConnectToEndpoints: string[];
-	ConnectionRetryDelay: number;
-	static Load(ResourceName: string): TcpMessagingSettings;
-	static Find(Outer: UObject, ResourceName: string): TcpMessagingSettings;
-	static GetDefaultObject(): TcpMessagingSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TcpMessagingSettings;
-	static C(Other: UObject | any): TcpMessagingSettings;
+declare class LuminARUObjectManager extends UObject { 
+	AllAnchors: ARPin[];
+	static Load(ResourceName: string): LuminARUObjectManager;
+	static Find(Outer: UObject, ResourceName: string): LuminARUObjectManager;
+	static GetDefaultObject(): LuminARUObjectManager;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LuminARUObjectManager;
+	static C(Other: UObject | any): LuminARUObjectManager;
 }
 
-declare class UdpMessagingSettings extends UObject { 
-	EnableTransport: boolean;
-	UnicastEndpoint: string;
-	MulticastEndpoint: string;
-	MulticastTimeToLive: number;
-	StaticEndpoints: string[];
-	EnableTunnel: boolean;
-	TunnelUnicastEndpoint: string;
-	TunnelMulticastEndpoint: string;
-	RemoteTunnelEndpoints: string[];
-	static Load(ResourceName: string): UdpMessagingSettings;
-	static Find(Outer: UObject, ResourceName: string): UdpMessagingSettings;
-	static GetDefaultObject(): UdpMessagingSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UdpMessagingSettings;
-	static C(Other: UObject | any): UdpMessagingSettings;
+declare class LuminARSessionFunctionLibrary extends BlueprintFunctionLibrary { 
+	static Load(ResourceName: string): LuminARSessionFunctionLibrary;
+	static Find(Outer: UObject, ResourceName: string): LuminARSessionFunctionLibrary;
+	static GetDefaultObject(): LuminARSessionFunctionLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LuminARSessionFunctionLibrary;
+	static StartLuminARSession(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Configuration: LuminARSessionConfig): void;
+	static C(Other: UObject | any): LuminARSessionFunctionLibrary;
 }
 
-declare type EActorSequenceObjectReferenceType = 'ContextActor' | 'ExternalActor' | 'Component' | 'EActorSequenceObjectReferenceType_MAX';
-declare var EActorSequenceObjectReferenceType : { ContextActor:'ContextActor',ExternalActor:'ExternalActor',Component:'Component',EActorSequenceObjectReferenceType_MAX:'EActorSequenceObjectReferenceType_MAX', };
-declare class ActorSequenceObjectReference { 
-	Type: EActorSequenceObjectReferenceType;
-	ActorId: Guid;
-	PathToComponent: string;
-	clone() : ActorSequenceObjectReference;
-	static C(Other: UObject | any): ActorSequenceObjectReference;
+declare type ELuminARTrackingState = 'Tracking' | 'NotTracking' | 'StoppedTracking' | 'ELuminARTrackingState_MAX';
+declare var ELuminARTrackingState : { Tracking:'Tracking',NotTracking:'NotTracking',StoppedTracking:'StoppedTracking',ELuminARTrackingState_MAX:'ELuminARTrackingState_MAX', };
+declare class LuminARLightEstimate { 
+	bIsValid: boolean;
+	PixelIntensity: number;
+	RGBScaleFactor: Vector;
+	clone() : LuminARLightEstimate;
+	static C(Other: UObject | any): LuminARLightEstimate;
+	GetLightEstimation(): {OutLightEstimate: LuminARLightEstimate};
+	static GetLightEstimation(OutLightEstimate?: LuminARLightEstimate): {OutLightEstimate: LuminARLightEstimate};
 }
 
-declare class ActorSequenceObjectReferences { 
-	Array: ActorSequenceObjectReference[];
-	clone() : ActorSequenceObjectReferences;
-	static C(Other: UObject | any): ActorSequenceObjectReferences;
+declare class LuminARFrameFunctionLibrary extends BlueprintFunctionLibrary { 
+	static Load(ResourceName: string): LuminARFrameFunctionLibrary;
+	static Find(Outer: UObject, ResourceName: string): LuminARFrameFunctionLibrary;
+	static GetDefaultObject(): LuminARFrameFunctionLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LuminARFrameFunctionLibrary;
+	static LuminARLineTrace(WorldContextObject: UObject,ScreenPosition: Vector2D,TraceChannels: any,OutHitResults?: ARTraceResult[]): {OutHitResults: ARTraceResult[], $: boolean};
+	static GetTrackingState(): ELuminARTrackingState;
+	static GetLightEstimation(OutLightEstimate?: LuminARLightEstimate): {OutLightEstimate: LuminARLightEstimate};
+	static C(Other: UObject | any): LuminARFrameFunctionLibrary;
 }
 
-declare class ActorSequenceObjectReferenceMap { 
-	BindingIds: Guid[];
-	References: ActorSequenceObjectReferences[];
-	clone() : ActorSequenceObjectReferenceMap;
-	static C(Other: UObject | any): ActorSequenceObjectReferenceMap;
+declare type EMLControllerTrackingMode = 'InputService' | 'CoordinateFrameUID' | 'EMLControllerTrackingMode_MAX';
+declare var EMLControllerTrackingMode : { InputService:'InputService',CoordinateFrameUID:'CoordinateFrameUID',EMLControllerTrackingMode_MAX:'EMLControllerTrackingMode_MAX', };
+declare type EMLControllerLEDPattern = 'None' | 'Clock01' | 'Clock02' | 'Clock03' | 'Clock04' | 'Clock05' | 'Clock06' | 'Clock07' | 'Clock08' | 'Clock09' | 'Clock10' | 'Clock11' | 'Clock12' | 'Clock01_07' | 'Clock02_08' | 'Clock03_09' | 'Clock04_10' | 'Clock05_11' | 'Clock06_12' | 'EMLControllerLEDPattern_MAX';
+declare var EMLControllerLEDPattern : { None:'None',Clock01:'Clock01',Clock02:'Clock02',Clock03:'Clock03',Clock04:'Clock04',Clock05:'Clock05',Clock06:'Clock06',Clock07:'Clock07',Clock08:'Clock08',Clock09:'Clock09',Clock10:'Clock10',Clock11:'Clock11',Clock12:'Clock12',Clock01_07:'Clock01_07',Clock02_08:'Clock02_08',Clock03_09:'Clock03_09',Clock04_10:'Clock04_10',Clock05_11:'Clock05_11',Clock06_12:'Clock06_12',EMLControllerLEDPattern_MAX:'EMLControllerLEDPattern_MAX', };
+declare type EMLControllerLEDColor = 'BrightMissionRed' | 'PastelMissionRed' | 'BrightFloridaOrange' | 'PastelFloridaOrange' | 'BrightLunaYellow' | 'PastelLunaYellow' | 'BrightNebulaPink' | 'PastelNebulaPink' | 'BrightCosmicPurple' | 'PastelCosmicPurple' | 'BrightMysticBlue' | 'PastelMysticBlue' | 'BrightCelestialBlue' | 'PastelCelestialBlue' | 'BrightShaggleGreen' | 'PastelShaggleGreen' | 'EMLControllerLEDColor_MAX';
+declare var EMLControllerLEDColor : { BrightMissionRed:'BrightMissionRed',PastelMissionRed:'PastelMissionRed',BrightFloridaOrange:'BrightFloridaOrange',PastelFloridaOrange:'PastelFloridaOrange',BrightLunaYellow:'BrightLunaYellow',PastelLunaYellow:'PastelLunaYellow',BrightNebulaPink:'BrightNebulaPink',PastelNebulaPink:'PastelNebulaPink',BrightCosmicPurple:'BrightCosmicPurple',PastelCosmicPurple:'PastelCosmicPurple',BrightMysticBlue:'BrightMysticBlue',PastelMysticBlue:'PastelMysticBlue',BrightCelestialBlue:'BrightCelestialBlue',PastelCelestialBlue:'PastelCelestialBlue',BrightShaggleGreen:'BrightShaggleGreen',PastelShaggleGreen:'PastelShaggleGreen',EMLControllerLEDColor_MAX:'EMLControllerLEDColor_MAX', };
+declare type EMLControllerLEDEffect = 'RotateCW' | 'RotateCCW' | 'Pulse' | 'PaintCW' | 'PaintCCW' | 'Blink' | 'EMLControllerLEDEffect_MAX';
+declare var EMLControllerLEDEffect : { RotateCW:'RotateCW',RotateCCW:'RotateCCW',Pulse:'Pulse',PaintCW:'PaintCW',PaintCCW:'PaintCCW',Blink:'Blink',EMLControllerLEDEffect_MAX:'EMLControllerLEDEffect_MAX', };
+declare type EMLControllerLEDSpeed = 'Slow' | 'Medium' | 'Fast' | 'EMLControllerLEDSpeed_MAX';
+declare var EMLControllerLEDSpeed : { Slow:'Slow',Medium:'Medium',Fast:'Fast',EMLControllerLEDSpeed_MAX:'EMLControllerLEDSpeed_MAX', };
+declare type EMLControllerHapticPattern = 'None' | 'Click' | 'Bump' | 'DoubleClick' | 'Buzz' | 'Tick' | 'ForceDown' | 'ForceUp' | 'ForceDwell' | 'SecondForceDown' | 'EMLControllerHapticPattern_MAX';
+declare var EMLControllerHapticPattern : { None:'None',Click:'Click',Bump:'Bump',DoubleClick:'DoubleClick',Buzz:'Buzz',Tick:'Tick',ForceDown:'ForceDown',ForceUp:'ForceUp',ForceDwell:'ForceDwell',SecondForceDown:'SecondForceDown',EMLControllerHapticPattern_MAX:'EMLControllerHapticPattern_MAX', };
+declare type EMLControllerHapticIntensity = 'Low' | 'Medium' | 'High' | 'EMLControllerHapticIntensity_MAX';
+declare var EMLControllerHapticIntensity : { Low:'Low',Medium:'Medium',High:'High',EMLControllerHapticIntensity_MAX:'EMLControllerHapticIntensity_MAX', };
+declare type EMLControllerType = 'None' | 'Device' | 'MobileApp' | 'EMLControllerType_MAX';
+declare var EMLControllerType : { None:'None',Device:'Device',MobileApp:'MobileApp',EMLControllerType_MAX:'EMLControllerType_MAX', };
+declare class MagicLeapControllerFunctionLibrary extends BlueprintFunctionLibrary { 
+	static Load(ResourceName: string): MagicLeapControllerFunctionLibrary;
+	static Find(Outer: UObject, ResourceName: string): MagicLeapControllerFunctionLibrary;
+	static GetDefaultObject(): MagicLeapControllerFunctionLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MagicLeapControllerFunctionLibrary;
+	static SetMotionSourceForHand(Hand: EControllerHand,MotionSource: string): boolean;
+	static SetControllerTrackingMode(TrackingMode: EMLControllerTrackingMode): boolean;
+	static PlayLEDPattern(MotionSource: string,LEDPattern: EMLControllerLEDPattern,LEDColor: EMLControllerLEDColor,DurationInSec: number): boolean;
+	static PlayLEDEffect(MotionSource: string,LEDEffect: EMLControllerLEDEffect,LEDSpeed: EMLControllerLEDSpeed,LEDPattern: EMLControllerLEDPattern,LEDColor: EMLControllerLEDColor,DurationInSec: number): boolean;
+	static PlayHapticPattern(MotionSource: string,HapticPattern: EMLControllerHapticPattern,Intensity: EMLControllerHapticIntensity): boolean;
+	static PlayControllerLEDEffect(Hand: EControllerHand,LEDEffect: EMLControllerLEDEffect,LEDSpeed: EMLControllerLEDSpeed,LEDPattern: EMLControllerLEDPattern,LEDColor: EMLControllerLEDColor,DurationInSec: number): boolean;
+	static PlayControllerLED(Hand: EControllerHand,LEDPattern: EMLControllerLEDPattern,LEDColor: EMLControllerLEDColor,DurationInSec: number): boolean;
+	static PlayControllerHapticFeedback(Hand: EControllerHand,HapticPattern: EMLControllerHapticPattern,Intensity: EMLControllerHapticIntensity): boolean;
+	static MaxSupportedMagicLeapControllers(): number;
+	static InvertControllerMapping(): void;
+	static GetMotionSourceForHand(Hand: EControllerHand): string;
+	static GetMLControllerType(Hand: EControllerHand): EMLControllerType;
+	static GetHandForMotionSource(MotionSource: string): EControllerHand;
+	static GetControllerType(MotionSource: string): EMLControllerType;
+	static GetControllerTrackingMode(): EMLControllerTrackingMode;
+	static GetControllerMapping(ControllerIndex: number,Hand?: EControllerHand): {Hand: EControllerHand, $: boolean};
+	static C(Other: UObject | any): MagicLeapControllerFunctionLibrary;
 }
 
-declare class ActorSequence extends MovieSceneSequence { 
-	MovieScene: MovieScene;
-	ObjectReferences: ActorSequenceObjectReferenceMap;
-	bHasBeenInitialized: boolean;
-	static Load(ResourceName: string): ActorSequence;
-	static Find(Outer: UObject, ResourceName: string): ActorSequence;
-	static GetDefaultObject(): ActorSequence;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorSequence;
-	static C(Other: UObject | any): ActorSequence;
+declare type EMagicLeapTouchpadGestureType = 'None' | 'Tap' | 'ForceTapDown' | 'ForceTapUp' | 'ForceDwell' | 'SecondForceDown' | 'LongHold' | 'RadialScroll' | 'Swipe' | 'Scroll' | 'Pinch' | 'EMagicLeapTouchpadGestureType_MAX';
+declare var EMagicLeapTouchpadGestureType : { None:'None',Tap:'Tap',ForceTapDown:'ForceTapDown',ForceTapUp:'ForceTapUp',ForceDwell:'ForceDwell',SecondForceDown:'SecondForceDown',LongHold:'LongHold',RadialScroll:'RadialScroll',Swipe:'Swipe',Scroll:'Scroll',Pinch:'Pinch',EMagicLeapTouchpadGestureType_MAX:'EMagicLeapTouchpadGestureType_MAX', };
+declare type EMagicLeapTouchpadGestureDirection = 'None' | 'Up' | 'Down' | 'Left' | 'Right' | 'In' | 'Out' | 'Clockwise' | 'CounterClockwise' | 'EMagicLeapTouchpadGestureDirection_MAX';
+declare var EMagicLeapTouchpadGestureDirection : { None:'None',Up:'Up',Down:'Down',Left:'Left',Right:'Right',In:'In',Out:'Out',Clockwise:'Clockwise',CounterClockwise:'CounterClockwise',EMagicLeapTouchpadGestureDirection_MAX:'EMagicLeapTouchpadGestureDirection_MAX', };
+declare class MagicLeapTouchpadGesture { 
+	Hand: EControllerHand;
+	MotionSource: string;
+	Type: EMagicLeapTouchpadGestureType;
+	Direction: EMagicLeapTouchpadGestureDirection;
+	PositionAndForce: Vector;
+	Speed: number;
+	Distance: number;
+	FingerGap: number;
+	Radius: number;
+	Angle: number;
+	clone() : MagicLeapTouchpadGesture;
+	static C(Other: UObject | any): MagicLeapTouchpadGesture;
 }
 
-declare class ActorSequencePlayer extends MovieSceneSequencePlayer { 
-	static Load(ResourceName: string): ActorSequencePlayer;
-	static Find(Outer: UObject, ResourceName: string): ActorSequencePlayer;
-	static GetDefaultObject(): ActorSequencePlayer;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorSequencePlayer;
-	static C(Other: UObject | any): ActorSequencePlayer;
+declare class TouchpadGesturesComponent extends ActorComponent { 
+	OnTouchpadGestureStart: UnrealEngineMulticastDelegate<(GestureData: MagicLeapTouchpadGesture) => void>;
+	OnTouchpadGestureContinue: UnrealEngineMulticastDelegate<(GestureData: MagicLeapTouchpadGesture) => void>;
+	OnTouchpadGestureEnd: UnrealEngineMulticastDelegate<(GestureData: MagicLeapTouchpadGesture) => void>;
+	static Load(ResourceName: string): TouchpadGesturesComponent;
+	static Find(Outer: UObject, ResourceName: string): TouchpadGesturesComponent;
+	static GetDefaultObject(): TouchpadGesturesComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TouchpadGesturesComponent;
+	static C(Other: UObject | any): TouchpadGesturesComponent;
 }
 
-declare class ActorSequenceComponent extends ActorComponent { 
-	bAutoPlay: boolean;
-	PlaybackSettings: MovieSceneSequencePlaybackSettings;
-	Sequence: ActorSequence;
-	SequencePlayer: ActorSequencePlayer;
-	static Load(ResourceName: string): ActorSequenceComponent;
-	static Find(Outer: UObject, ResourceName: string): ActorSequenceComponent;
-	static GetDefaultObject(): ActorSequenceComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorSequenceComponent;
-	static C(Other: UObject | any): ActorSequenceComponent;
+declare class EyeTrackerStereoGazeData { 
+	LeftEyeOrigin: Vector;
+	LeftEyeDirection: Vector;
+	RightEyeOrigin: Vector;
+	RightEyeDirection: Vector;
+	FixationPoint: Vector;
+	ConfidenceValue: number;
+	clone() : EyeTrackerStereoGazeData;
+	static C(Other: UObject | any): EyeTrackerStereoGazeData;
+	GetStereoGazeData(): {OutGazeData: EyeTrackerStereoGazeData, $: boolean};
+	static GetStereoGazeData(OutGazeData?: EyeTrackerStereoGazeData): {OutGazeData: EyeTrackerStereoGazeData, $: boolean};
 }
 
-declare type ELocationAccuracy = 'LA_ThreeKilometers' | 'LA_OneKilometer' | 'LA_HundredMeters' | 'LA_TenMeters' | 'LA_Best' | 'LA_Navigation' | 'LA_MAX';
-declare var ELocationAccuracy : { LA_ThreeKilometers:'LA_ThreeKilometers',LA_OneKilometer:'LA_OneKilometer',LA_HundredMeters:'LA_HundredMeters',LA_TenMeters:'LA_TenMeters',LA_Best:'LA_Best',LA_Navigation:'LA_Navigation',LA_MAX:'LA_MAX', };
-declare class LocationServicesData { 
-	Timestamp: number;
-	Longitude: number;
-	Latitude: number;
-	HorizontalAccuracy: number;
-	VerticalAccuracy: number;
-	Altitude: number;
-	clone() : LocationServicesData;
-	static C(Other: UObject | any): LocationServicesData;
-	static GetLastKnownLocation(): LocationServicesData;
+declare class EyeTrackerGazeData { 
+	GazeOrigin: Vector;
+	GazeDirection: Vector;
+	FixationPoint: Vector;
+	ConfidenceValue: number;
+	clone() : EyeTrackerGazeData;
+	static C(Other: UObject | any): EyeTrackerGazeData;
+	GetGazeData(): {OutGazeData: EyeTrackerGazeData, $: boolean};
+	static GetGazeData(OutGazeData?: EyeTrackerGazeData): {OutGazeData: EyeTrackerGazeData, $: boolean};
 }
 
-declare class LocationServicesImpl extends UObject { 
-	OnLocationChanged: UnrealEngineMulticastDelegate<(LocationData: LocationServicesData) => void>;
-	static Load(ResourceName: string): LocationServicesImpl;
-	static Find(Outer: UObject, ResourceName: string): LocationServicesImpl;
-	static GetDefaultObject(): LocationServicesImpl;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocationServicesImpl;
-	static C(Other: UObject | any): LocationServicesImpl;
+declare class EyeTrackerFunctionLibrary extends BlueprintFunctionLibrary { 
+	static Load(ResourceName: string): EyeTrackerFunctionLibrary;
+	static Find(Outer: UObject, ResourceName: string): EyeTrackerFunctionLibrary;
+	static GetDefaultObject(): EyeTrackerFunctionLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EyeTrackerFunctionLibrary;
+	static SetEyeTrackedPlayer(PlayerController: PlayerController): void;
+	static IsStereoGazeDataAvailable(): boolean;
+	static IsEyeTrackerConnected(): boolean;
+	static GetStereoGazeData(OutGazeData?: EyeTrackerStereoGazeData): {OutGazeData: EyeTrackerStereoGazeData, $: boolean};
+	static GetGazeData(OutGazeData?: EyeTrackerGazeData): {OutGazeData: EyeTrackerGazeData, $: boolean};
+	static C(Other: UObject | any): EyeTrackerFunctionLibrary;
 }
 
-declare class LocationServices extends BlueprintFunctionLibrary { 
-	static Load(ResourceName: string): LocationServices;
-	static Find(Outer: UObject, ResourceName: string): LocationServices;
-	static GetDefaultObject(): LocationServices;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocationServices;
-	static StopLocationServices(): boolean;
-	static StartLocationServices(): boolean;
-	static IsLocationAccuracyAvailable(Accuracy: ELocationAccuracy): boolean;
-	static InitLocationServices(Accuracy: ELocationAccuracy,UpdateFrequency: number,MinDistanceFilter: number): boolean;
-	static GetLocationServicesImpl(): LocationServicesImpl;
-	static GetLastKnownLocation(): LocationServicesData;
-	static AreLocationServicesEnabled(): boolean;
-	static C(Other: UObject | any): LocationServices;
+declare class MagicLeapFixationComfort { 
+	FixationDepthIsUncomfortable: boolean;
+	FixationDepthViolationHasOccurred: boolean;
+	RemainingTimeAtUncomfortableDepth: number;
+	clone() : MagicLeapFixationComfort;
+	static C(Other: UObject | any): MagicLeapFixationComfort;
+	GetFixationComfort(): {FixationComfort: MagicLeapFixationComfort, $: boolean};
+	static GetFixationComfort(FixationComfort?: MagicLeapFixationComfort): {FixationComfort: MagicLeapFixationComfort, $: boolean};
 }
 
-declare type EOculusPlatform = 'PC' | 'Mobile' | 'Length' | 'EOculusPlatform_MAX';
-declare var EOculusPlatform : { PC:'PC',Mobile:'Mobile',Length:'Length',EOculusPlatform_MAX:'EOculusPlatform_MAX', };
-declare class OculusEditorSettings extends UObject { 
-	PerfToolIgnoreList: any;
-	PerfToolTargetPlatform: EOculusPlatform;
-	static Load(ResourceName: string): OculusEditorSettings;
-	static Find(Outer: UObject, ResourceName: string): OculusEditorSettings;
-	static GetDefaultObject(): OculusEditorSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OculusEditorSettings;
-	static C(Other: UObject | any): OculusEditorSettings;
+declare class MagicLeapEyeBlinkState { 
+	LeftEyeBlinked: boolean;
+	RightEyeBlinked: boolean;
+	clone() : MagicLeapEyeBlinkState;
+	static C(Other: UObject | any): MagicLeapEyeBlinkState;
+	GetEyeBlinkState(): {BlinkState: MagicLeapEyeBlinkState, $: boolean};
+	static GetEyeBlinkState(BlinkState?: MagicLeapEyeBlinkState): {BlinkState: MagicLeapEyeBlinkState, $: boolean};
 }
 
-declare class TireConfigMaterialFriction { 
-	PhysicalMaterial: PhysicalMaterial;
-	FrictionScale: number;
-	clone() : TireConfigMaterialFriction;
-	static C(Other: UObject | any): TireConfigMaterialFriction;
+declare type EMagicLeapEyeTrackingCalibrationStatus = 'None' | 'Bad' | 'Good' | 'EMagicLeapEyeTrackingCalibrationStatus_MAX';
+declare var EMagicLeapEyeTrackingCalibrationStatus : { None:'None',Bad:'Bad',Good:'Good',EMagicLeapEyeTrackingCalibrationStatus_MAX:'EMagicLeapEyeTrackingCalibrationStatus_MAX', };
+declare class MagicLeapEyeTrackerFunctionLibrary extends BlueprintFunctionLibrary { 
+	static Load(ResourceName: string): MagicLeapEyeTrackerFunctionLibrary;
+	static Find(Outer: UObject, ResourceName: string): MagicLeapEyeTrackerFunctionLibrary;
+	static GetDefaultObject(): MagicLeapEyeTrackerFunctionLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MagicLeapEyeTrackerFunctionLibrary;
+	static IsEyeTrackerCalibrated(): boolean;
+	static GetFixationComfort(FixationComfort?: MagicLeapFixationComfort): {FixationComfort: MagicLeapFixationComfort, $: boolean};
+	static GetEyeBlinkState(BlinkState?: MagicLeapEyeBlinkState): {BlinkState: MagicLeapEyeBlinkState, $: boolean};
+	static GetCalibrationStatus(): EMagicLeapEyeTrackingCalibrationStatus;
+	static C(Other: UObject | any): MagicLeapEyeTrackerFunctionLibrary;
 }
 
-declare class TireConfig extends DataAsset { 
-	FrictionScale: number;
-	TireFrictionScales: TireConfigMaterialFriction[];
-	static Load(ResourceName: string): TireConfig;
-	static Find(Outer: UObject, ResourceName: string): TireConfig;
-	static GetDefaultObject(): TireConfig;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TireConfig;
-	static C(Other: UObject | any): TireConfig;
+declare class LiveLinkRole extends UObject { 
+	static Load(ResourceName: string): LiveLinkRole;
+	static Find(Outer: UObject, ResourceName: string): LiveLinkRole;
+	static GetDefaultObject(): LiveLinkRole;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkRole;
+	static C(Other: UObject | any): LiveLinkRole;
 }
 
-declare type EWheelSweepType = 'SimpleAndComplex' | 'Simple' | 'Complex' | 'EWheelSweepType_MAX';
-declare var EWheelSweepType : { SimpleAndComplex:'SimpleAndComplex',Simple:'Simple',Complex:'Complex',EWheelSweepType_MAX:'EWheelSweepType_MAX', };
-declare class VehicleWheel extends UObject { 
-	CollisionMesh: StaticMesh;
-	bDontCreateShape: boolean;
-	bAutoAdjustCollisionSize: boolean;
-	Offset: Vector;
-	ShapeRadius: number;
-	ShapeWidth: number;
-	Mass: number;
-	DampingRate: number;
-	SteerAngle: number;
-	bAffectedByHandbrake: boolean;
-	TireType: TireType;
-	TireConfig: TireConfig;
-	LatStiffMaxLoad: number;
-	LatStiffValue: number;
-	LongStiffValue: number;
-	SuspensionForceOffset: number;
-	SuspensionMaxRaise: number;
-	SuspensionMaxDrop: number;
-	SuspensionNaturalFrequency: number;
-	SuspensionDampingRatio: number;
-	SweepType: EWheelSweepType;
-	MaxBrakeTorque: number;
-	MaxHandBrakeTorque: number;
-	VehicleSim: WheeledVehicleMovementComponent;
-	WheelIndex: number;
-	DebugLongSlip: number;
-	DebugLatSlip: number;
-	DebugNormalizedTireLoad: number;
-	DebugWheelTorque: number;
-	DebugLongForce: number;
-	DebugLatForce: number;
-	Location: Vector;
-	OldLocation: Vector;
-	Velocity: Vector;
-	static Load(ResourceName: string): VehicleWheel;
-	static Find(Outer: UObject, ResourceName: string): VehicleWheel;
-	static GetDefaultObject(): VehicleWheel;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VehicleWheel;
-	IsInAir(): boolean;
-	GetSuspensionOffset(): number;
-	GetSteerAngle(): number;
-	GetRotationAngle(): number;
-	static C(Other: UObject | any): VehicleWheel;
+declare class LiveLinkBasicRole extends LiveLinkRole { 
+	static Load(ResourceName: string): LiveLinkBasicRole;
+	static Find(Outer: UObject, ResourceName: string): LiveLinkBasicRole;
+	static GetDefaultObject(): LiveLinkBasicRole;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkBasicRole;
+	static C(Other: UObject | any): LiveLinkBasicRole;
 }
 
-declare class WheelSetup { 
-	WheelClass: UnrealEngineClass;
-	BoneName: string;
-	AdditionalOffset: Vector;
-	bDisableSteering: boolean;
-	clone() : WheelSetup;
-	static C(Other: UObject | any): WheelSetup;
+declare class LiveLinkAnimationRole extends LiveLinkBasicRole { 
+	static Load(ResourceName: string): LiveLinkAnimationRole;
+	static Find(Outer: UObject, ResourceName: string): LiveLinkAnimationRole;
+	static GetDefaultObject(): LiveLinkAnimationRole;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkAnimationRole;
+	static C(Other: UObject | any): LiveLinkAnimationRole;
 }
 
-declare class ReplicatedVehicleState { 
-	SteeringInput: number;
-	ThrottleInput: number;
-	BrakeInput: number;
-	HandbrakeInput: number;
-	CurrentGear: number;
-	clone() : ReplicatedVehicleState;
-	static C(Other: UObject | any): ReplicatedVehicleState;
+declare class LiveLinkFrameInterpolationProcessor extends UObject { 
+	static Load(ResourceName: string): LiveLinkFrameInterpolationProcessor;
+	static Find(Outer: UObject, ResourceName: string): LiveLinkFrameInterpolationProcessor;
+	static GetDefaultObject(): LiveLinkFrameInterpolationProcessor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkFrameInterpolationProcessor;
+	static C(Other: UObject | any): LiveLinkFrameInterpolationProcessor;
 }
 
-declare class VehicleInputRate { 
-	RiseRate: number;
-	FallRate: number;
-	clone() : VehicleInputRate;
-	static C(Other: UObject | any): VehicleInputRate;
+declare class LiveLinkBasicFrameInterpolateProcessor extends LiveLinkFrameInterpolationProcessor { 
+	bInterpolatePropertyValues: boolean;
+	static Load(ResourceName: string): LiveLinkBasicFrameInterpolateProcessor;
+	static Find(Outer: UObject, ResourceName: string): LiveLinkBasicFrameInterpolateProcessor;
+	static GetDefaultObject(): LiveLinkBasicFrameInterpolateProcessor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkBasicFrameInterpolateProcessor;
+	static C(Other: UObject | any): LiveLinkBasicFrameInterpolateProcessor;
 }
 
-declare class WheeledVehicleMovementComponent extends PawnMovementComponent { 
-	bDeprecatedSpringOffsetMode: boolean;
-	bReverseAsBrake: boolean;
-	bUseRVOAvoidance: boolean;
-	bRawHandbrakeInput: boolean;
-	bRawGearUpInput: boolean;
-	bRawGearDownInput: boolean;
-	bWasAvoidanceUpdated: boolean;
-	Mass: number;
-	WheelSetups: WheelSetup[];
-	DragCoefficient: number;
-	ChassisWidth: number;
-	ChassisHeight: number;
-	DragArea: number;
-	EstimatedMaxEngineSpeed: number;
-	MaxEngineRPM: number;
-	DebugDragMagnitude: number;
-	InertiaTensorScale: Vector;
-	MinNormalizedTireLoad: number;
-	MinNormalizedTireLoadFiltered: number;
-	MaxNormalizedTireLoad: number;
-	MaxNormalizedTireLoadFiltered: number;
-	ThresholdLongitudinalSpeed: number;
-	LowForwardSpeedSubStepCount: number;
-	HighForwardSpeedSubStepCount: number;
-	Wheels: VehicleWheel[];
-	RVOAvoidanceRadius: number;
-	RVOAvoidanceHeight: number;
-	AvoidanceConsiderationRadius: number;
-	RVOSteeringStep: number;
-	RVOThrottleStep: number;
-	AvoidanceUID: number;
-	AvoidanceGroup: NavAvoidanceMask;
-	GroupsToAvoid: NavAvoidanceMask;
-	GroupsToIgnore: NavAvoidanceMask;
-	AvoidanceWeight: number;
-	PendingLaunchVelocity: Vector;
-	ReplicatedState: ReplicatedVehicleState;
-	RawSteeringInput: number;
-	RawThrottleInput: number;
-	RawBrakeInput: number;
-	SteeringInput: number;
-	ThrottleInput: number;
-	BrakeInput: number;
-	HandbrakeInput: number;
-	IdleBrakeInput: number;
-	StopThreshold: number;
-	WrongDirectionThreshold: number;
-	ThrottleInputRate: VehicleInputRate;
-	BrakeInputRate: VehicleInputRate;
-	HandbrakeInputRate: VehicleInputRate;
-	SteeringInputRate: VehicleInputRate;
-	OverrideController: Controller;
-	static Load(ResourceName: string): WheeledVehicleMovementComponent;
-	static Find(Outer: UObject, ResourceName: string): WheeledVehicleMovementComponent;
-	static GetDefaultObject(): WheeledVehicleMovementComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WheeledVehicleMovementComponent;
-	SetUseAutoGears(bUseAuto: boolean): void;
-	SetThrottleInput(Throttle: number): void;
-	SetTargetGear(GearNum: number,bImmediate: boolean): void;
-	SetSteeringInput(Steering: number): void;
-	SetHandbrakeInput(bNewHandbrake: boolean): void;
-	SetGroupsToIgnoreMask(GroupMask: NavAvoidanceMask): void;
-	SetGroupsToIgnore(GroupFlags: number): void;
-	SetGroupsToAvoidMask(GroupMask: NavAvoidanceMask): void;
-	SetGroupsToAvoid(GroupFlags: number): void;
-	SetGearUp(bNewGearUp: boolean): void;
-	SetGearDown(bNewGearDown: boolean): void;
-	SetBrakeInput(Brake: number): void;
-	SetAvoidanceGroupMask(GroupMask: NavAvoidanceMask): void;
-	SetAvoidanceGroup(GroupFlags: number): void;
-	SetAvoidanceEnabled(bEnable: boolean): void;
-	ServerUpdateState(InSteeringInput: number,InThrottleInput: number,InBrakeInput: number,InHandbrakeInput: number,CurrentGear: number): void;
-	GetUseAutoGears(): boolean;
-	GetTargetGear(): number;
-	GetForwardSpeed(): number;
-	GetEngineRotationSpeed(): number;
-	GetEngineMaxRotationSpeed(): number;
-	GetCurrentGear(): number;
-	static C(Other: UObject | any): WheeledVehicleMovementComponent;
+declare class LiveLinkAnimationFrameInterpolateProcessor extends LiveLinkBasicFrameInterpolateProcessor { 
+	static Load(ResourceName: string): LiveLinkAnimationFrameInterpolateProcessor;
+	static Find(Outer: UObject, ResourceName: string): LiveLinkAnimationFrameInterpolateProcessor;
+	static GetDefaultObject(): LiveLinkAnimationFrameInterpolateProcessor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkAnimationFrameInterpolateProcessor;
+	static C(Other: UObject | any): LiveLinkAnimationFrameInterpolateProcessor;
 }
 
-declare class SimpleWheeledVehicleMovementComponent extends WheeledVehicleMovementComponent { 
-	static Load(ResourceName: string): SimpleWheeledVehicleMovementComponent;
-	static Find(Outer: UObject, ResourceName: string): SimpleWheeledVehicleMovementComponent;
-	static GetDefaultObject(): SimpleWheeledVehicleMovementComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SimpleWheeledVehicleMovementComponent;
-	SetSteerAngle(SteerAngle: number,WheelIndex: number): void;
-	SetDriveTorque(DriveTorque: number,WheelIndex: number): void;
-	SetBrakeTorque(BrakeTorque: number,WheelIndex: number): void;
-	static C(Other: UObject | any): SimpleWheeledVehicleMovementComponent;
+declare class LiveLinkFrameTranslator extends UObject { 
+	static Load(ResourceName: string): LiveLinkFrameTranslator;
+	static Find(Outer: UObject, ResourceName: string): LiveLinkFrameTranslator;
+	static GetDefaultObject(): LiveLinkFrameTranslator;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkFrameTranslator;
+	static C(Other: UObject | any): LiveLinkFrameTranslator;
 }
 
-declare class WheeledVehicle extends Pawn { 
-	Mesh: SkeletalMeshComponent;
-	VehicleMovement: WheeledVehicleMovementComponent;
-	static GetDefaultObject(): WheeledVehicle;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WheeledVehicle;
-	static C(Other: UObject | any): WheeledVehicle;
+declare class LiveLinkAnimationRoleToTransform extends LiveLinkFrameTranslator { 
+	BoneName: string;
+	static Load(ResourceName: string): LiveLinkAnimationRoleToTransform;
+	static Find(Outer: UObject, ResourceName: string): LiveLinkAnimationRoleToTransform;
+	static GetDefaultObject(): LiveLinkAnimationRoleToTransform;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkAnimationRoleToTransform;
+	static C(Other: UObject | any): LiveLinkAnimationRoleToTransform;
+}
+
+declare class LiveLinkTransformRole extends LiveLinkBasicRole { 
+	static Load(ResourceName: string): LiveLinkTransformRole;
+	static Find(Outer: UObject, ResourceName: string): LiveLinkTransformRole;
+	static GetDefaultObject(): LiveLinkTransformRole;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkTransformRole;
+	static C(Other: UObject | any): LiveLinkTransformRole;
+}
+
+declare class LiveLinkCameraRole extends LiveLinkTransformRole { 
+	static Load(ResourceName: string): LiveLinkCameraRole;
+	static Find(Outer: UObject, ResourceName: string): LiveLinkCameraRole;
+	static GetDefaultObject(): LiveLinkCameraRole;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkCameraRole;
+	static C(Other: UObject | any): LiveLinkCameraRole;
+}
+
+declare class LiveLinkController extends UObject { 
+	static Load(ResourceName: string): LiveLinkController;
+	static Find(Outer: UObject, ResourceName: string): LiveLinkController;
+	static GetDefaultObject(): LiveLinkController;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkController;
+	static C(Other: UObject | any): LiveLinkController;
+}
+
+declare type ELiveLinkSourceMode = 'Latest' | 'EngineTime' | 'Timecode' | 'ELiveLinkSourceMode_MAX';
+declare var ELiveLinkSourceMode : { Latest:'Latest',EngineTime:'EngineTime',Timecode:'Timecode',ELiveLinkSourceMode_MAX:'ELiveLinkSourceMode_MAX', };
+declare class LiveLinkSourceBufferManagementSettings { 
+	ValidEngineTime: number;
+	EngineTimeOffset: number;
+	TimecodeFrameRate: FrameRate;
+	ValidTimecodeFrame: number;
+	TimecodeFrameOffset: number;
+	MaxNumberOfFrameToBuffered: number;
+	clone() : LiveLinkSourceBufferManagementSettings;
+	static C(Other: UObject | any): LiveLinkSourceBufferManagementSettings;
 }
 
-declare class VehicleAnimInstance extends AnimInstance { 
-	WheeledVehicleMovementComponent: WheeledVehicleMovementComponent;
-	static Load(ResourceName: string): VehicleAnimInstance;
-	static Find(Outer: UObject, ResourceName: string): VehicleAnimInstance;
-	static GetDefaultObject(): VehicleAnimInstance;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VehicleAnimInstance;
-	GetVehicle(): WheeledVehicle;
-	static C(Other: UObject | any): VehicleAnimInstance;
+declare class LiveLinkSourceFactory extends UObject { 
+	static Load(ResourceName: string): LiveLinkSourceFactory;
+	static Find(Outer: UObject, ResourceName: string): LiveLinkSourceFactory;
+	static GetDefaultObject(): LiveLinkSourceFactory;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkSourceFactory;
+	static C(Other: UObject | any): LiveLinkSourceFactory;
 }
 
-declare class VehicleEngineData { 
-	TorqueCurve: RuntimeFloatCurve;
-	MaxRPM: number;
-	MOI: number;
-	DampingRateFullThrottle: number;
-	DampingRateZeroThrottleClutchEngaged: number;
-	DampingRateZeroThrottleClutchDisengaged: number;
-	clone() : VehicleEngineData;
-	static C(Other: UObject | any): VehicleEngineData;
+declare class LiveLinkSubjectName { 
+	Name: string;
+	clone() : LiveLinkSubjectName;
+	static C(Other: UObject | any): LiveLinkSubjectName;
 }
 
-declare type EVehicleDifferential4W = 'LimitedSlip_4W' | 'LimitedSlip_FrontDrive' | 'LimitedSlip_RearDrive' | 'Open_4W' | 'Open_FrontDrive' | 'Open_RearDrive' | 'EVehicleDifferential4W_MAX';
-declare var EVehicleDifferential4W : { LimitedSlip_4W:'LimitedSlip_4W',LimitedSlip_FrontDrive:'LimitedSlip_FrontDrive',LimitedSlip_RearDrive:'LimitedSlip_RearDrive',Open_4W:'Open_4W',Open_FrontDrive:'Open_FrontDrive',Open_RearDrive:'Open_RearDrive',EVehicleDifferential4W_MAX:'EVehicleDifferential4W_MAX', };
-declare class VehicleDifferential4WData { 
-	DifferentialType: EVehicleDifferential4W;
-	FrontRearSplit: number;
-	FrontLeftRightSplit: number;
-	RearLeftRightSplit: number;
-	CentreBias: number;
-	FrontBias: number;
-	RearBias: number;
-	clone() : VehicleDifferential4WData;
-	static C(Other: UObject | any): VehicleDifferential4WData;
+declare class LiveLinkSourceDebugInfo { 
+	SubjectName: LiveLinkSubjectName;
+	SnapshotIndex: number;
+	NumberOfBufferAtSnapshot: number;
+	clone() : LiveLinkSourceDebugInfo;
+	static C(Other: UObject | any): LiveLinkSourceDebugInfo;
 }
 
-declare class VehicleGearData { 
-	Ratio: number;
-	DownRatio: number;
-	UpRatio: number;
-	clone() : VehicleGearData;
-	static C(Other: UObject | any): VehicleGearData;
+declare class LiveLinkSourceSettings extends UObject { 
+	Mode: ELiveLinkSourceMode;
+	BufferSettings: LiveLinkSourceBufferManagementSettings;
+	ConnectionString: string;
+	Factory: UnrealEngineClass;
+	SourceDebugInfos: LiveLinkSourceDebugInfo[];
+	static Load(ResourceName: string): LiveLinkSourceSettings;
+	static Find(Outer: UObject, ResourceName: string): LiveLinkSourceSettings;
+	static GetDefaultObject(): LiveLinkSourceSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkSourceSettings;
+	static C(Other: UObject | any): LiveLinkSourceSettings;
 }
 
-declare class VehicleTransmissionData { 
-	bUseGearAutoBox: boolean;
-	GearSwitchTime: number;
-	GearAutoBoxLatency: number;
-	FinalRatio: number;
-	ForwardGears: VehicleGearData[];
-	ReverseGearRatio: number;
-	NeutralGearUpRatio: number;
-	ClutchStrength: number;
-	clone() : VehicleTransmissionData;
-	static C(Other: UObject | any): VehicleTransmissionData;
+declare class LiveLinkCurveConversionSettings { 
+	CurveConversionAssetMap: any;
+	clone() : LiveLinkCurveConversionSettings;
+	static C(Other: UObject | any): LiveLinkCurveConversionSettings;
+}
+
+declare class LiveLinkCurveRemapSettings extends LiveLinkSourceSettings { 
+	CurveConversionSettings: LiveLinkCurveConversionSettings;
+	static Load(ResourceName: string): LiveLinkCurveRemapSettings;
+	static Find(Outer: UObject, ResourceName: string): LiveLinkCurveRemapSettings;
+	static GetDefaultObject(): LiveLinkCurveRemapSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkCurveRemapSettings;
+	static C(Other: UObject | any): LiveLinkCurveRemapSettings;
+}
+
+declare class LiveLinkFramePreProcessor extends UObject { 
+	static Load(ResourceName: string): LiveLinkFramePreProcessor;
+	static Find(Outer: UObject, ResourceName: string): LiveLinkFramePreProcessor;
+	static GetDefaultObject(): LiveLinkFramePreProcessor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkFramePreProcessor;
+	static C(Other: UObject | any): LiveLinkFramePreProcessor;
+}
+
+declare class LiveLinkLightRole extends LiveLinkTransformRole { 
+	static Load(ResourceName: string): LiveLinkLightRole;
+	static Find(Outer: UObject, ResourceName: string): LiveLinkLightRole;
+	static GetDefaultObject(): LiveLinkLightRole;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkLightRole;
+	static C(Other: UObject | any): LiveLinkLightRole;
+}
+
+declare class LiveLinkSubjectSettings extends UObject { 
+	PreProcessors: LiveLinkFramePreProcessor[];
+	InterpolationProcessor: LiveLinkFrameInterpolationProcessor;
+	Translators: LiveLinkFrameTranslator[];
+	Role: UnrealEngineClass;
+	static Load(ResourceName: string): LiveLinkSubjectSettings;
+	static Find(Outer: UObject, ResourceName: string): LiveLinkSubjectSettings;
+	static GetDefaultObject(): LiveLinkSubjectSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkSubjectSettings;
+	static C(Other: UObject | any): LiveLinkSubjectSettings;
+}
+
+declare type ELiveLinkAxis = 'X' | 'Y' | 'Z' | 'XNeg' | 'YNeg' | 'ZNeg' | 'ELiveLinkAxis_MAX';
+declare var ELiveLinkAxis : { X:'X',Y:'Y',Z:'Z',XNeg:'XNeg',YNeg:'YNeg',ZNeg:'ZNeg',ELiveLinkAxis_MAX:'ELiveLinkAxis_MAX', };
+declare class LiveLinkAxisSwitchPreProcessor extends LiveLinkFramePreProcessor { 
+	AxisX: ELiveLinkAxis;
+	AxisY: ELiveLinkAxis;
+	AxisZ: ELiveLinkAxis;
+	static Load(ResourceName: string): LiveLinkAxisSwitchPreProcessor;
+	static Find(Outer: UObject, ResourceName: string): LiveLinkAxisSwitchPreProcessor;
+	static GetDefaultObject(): LiveLinkAxisSwitchPreProcessor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkAxisSwitchPreProcessor;
+	static C(Other: UObject | any): LiveLinkAxisSwitchPreProcessor;
+}
+
+declare class LiveLinkVirtualSubject extends UObject { 
+	Role: UnrealEngineClass;
+	Subjects: LiveLinkSubjectName[];
+	FrameTranslators: LiveLinkFrameTranslator[];
+	static Load(ResourceName: string): LiveLinkVirtualSubject;
+	static Find(Outer: UObject, ResourceName: string): LiveLinkVirtualSubject;
+	static GetDefaultObject(): LiveLinkVirtualSubject;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkVirtualSubject;
+	static C(Other: UObject | any): LiveLinkVirtualSubject;
 }
 
-declare class WheeledVehicleMovementComponent4W extends WheeledVehicleMovementComponent { 
-	EngineSetup: VehicleEngineData;
-	DifferentialSetup: VehicleDifferential4WData;
-	AckermannAccuracy: number;
-	TransmissionSetup: VehicleTransmissionData;
-	SteeringCurve: RuntimeFloatCurve;
-	static Load(ResourceName: string): WheeledVehicleMovementComponent4W;
-	static Find(Outer: UObject, ResourceName: string): WheeledVehicleMovementComponent4W;
-	static GetDefaultObject(): WheeledVehicleMovementComponent4W;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WheeledVehicleMovementComponent4W;
-	static C(Other: UObject | any): WheeledVehicleMovementComponent4W;
+declare class LiveLinkMagicLeapHandTrackingSourceFactory extends LiveLinkSourceFactory { 
+	static Load(ResourceName: string): LiveLinkMagicLeapHandTrackingSourceFactory;
+	static Find(Outer: UObject, ResourceName: string): LiveLinkMagicLeapHandTrackingSourceFactory;
+	static GetDefaultObject(): LiveLinkMagicLeapHandTrackingSourceFactory;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkMagicLeapHandTrackingSourceFactory;
+	static C(Other: UObject | any): LiveLinkMagicLeapHandTrackingSourceFactory;
 }
 
-declare class AnimNode_WheelHandler extends AnimNode_SkeletalControlBase { 
-	clone() : AnimNode_WheelHandler;
-	static C(Other: UObject | any): AnimNode_WheelHandler;
+declare type EHandTrackingGesture = 'Finger' | 'Fist' | 'Pinch' | 'Thumb' | 'L' | 'OpenHandBack' | 'Ok' | 'C' | 'NoPose' | 'NoHand' | 'EHandTrackingGesture_MAX';
+declare var EHandTrackingGesture : { Finger:'Finger',Fist:'Fist',Pinch:'Pinch',Thumb:'Thumb',L:'L',OpenHandBack:'OpenHandBack',Ok:'Ok',C:'C',NoPose:'NoPose',NoHand:'NoHand',EHandTrackingGesture_MAX:'EHandTrackingGesture_MAX', };
+declare type EHandTrackingKeypointFilterLevel = 'NoFilter' | 'SimpleSmoothing' | 'PredictiveSmoothing' | 'EHandTrackingKeypointFilterLevel_MAX';
+declare var EHandTrackingKeypointFilterLevel : { NoFilter:'NoFilter',SimpleSmoothing:'SimpleSmoothing',PredictiveSmoothing:'PredictiveSmoothing',EHandTrackingKeypointFilterLevel_MAX:'EHandTrackingKeypointFilterLevel_MAX', };
+declare type EHandTrackingGestureFilterLevel = 'NoFilter' | 'SlightRobustnessToFlicker' | 'MoreRobustnessToFlicker' | 'EHandTrackingGestureFilterLevel_MAX';
+declare var EHandTrackingGestureFilterLevel : { NoFilter:'NoFilter',SlightRobustnessToFlicker:'SlightRobustnessToFlicker',MoreRobustnessToFlicker:'MoreRobustnessToFlicker',EHandTrackingGestureFilterLevel_MAX:'EHandTrackingGestureFilterLevel_MAX', };
+declare class LiveLinkSourceHandle { 
+	clone() : LiveLinkSourceHandle;
+	static C(Other: UObject | any): LiveLinkSourceHandle;
+	GetMagicLeapHandTrackingLiveLinkSource(): {SourceHandle: LiveLinkSourceHandle, $: boolean};
+	static GetMagicLeapHandTrackingLiveLinkSource(SourceHandle?: LiveLinkSourceHandle): {SourceHandle: LiveLinkSourceHandle, $: boolean};
 }
 
-declare class AnimGraphNode_WheelHandler extends AnimGraphNode_SkeletalControlBase { 
-	UNode: AnimNode_WheelHandler;
-	static Load(ResourceName: string): AnimGraphNode_WheelHandler;
-	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_WheelHandler;
-	static GetDefaultObject(): AnimGraphNode_WheelHandler;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_WheelHandler;
-	static C(Other: UObject | any): AnimGraphNode_WheelHandler;
+declare type EGestureTransformSpace = 'World' | 'Hand' | 'Tracking' | 'EGestureTransformSpace_MAX';
+declare var EGestureTransformSpace : { World:'World',Hand:'Hand',Tracking:'Tracking',EGestureTransformSpace_MAX:'EGestureTransformSpace_MAX', };
+declare type EHandTrackingKeypoint = 'Thumb_Tip' | 'Thumb_IP' | 'Thumb_MCP' | 'Thumb_CMC' | 'Index_Tip' | 'Index_DIP' | 'Index_PIP' | 'Index_MCP' | 'Middle_Tip' | 'Middle_DIP' | 'Middle_PIP' | 'Middle_MCP' | 'Ring_Tip' | 'Ring_DIP' | 'Ring_PIP' | 'Ring_MCP' | 'Pinky_Tip' | 'Pinky_DIP' | 'Pinky_PIP' | 'Pinky_MCP' | 'Wrist_Center' | 'Wrist_Ulnar' | 'Wrist_Radial' | 'Hand_Center' | 'EHandTrackingKeypoint_MAX';
+declare var EHandTrackingKeypoint : { Thumb_Tip:'Thumb_Tip',Thumb_IP:'Thumb_IP',Thumb_MCP:'Thumb_MCP',Thumb_CMC:'Thumb_CMC',Index_Tip:'Index_Tip',Index_DIP:'Index_DIP',Index_PIP:'Index_PIP',Index_MCP:'Index_MCP',Middle_Tip:'Middle_Tip',Middle_DIP:'Middle_DIP',Middle_PIP:'Middle_PIP',Middle_MCP:'Middle_MCP',Ring_Tip:'Ring_Tip',Ring_DIP:'Ring_DIP',Ring_PIP:'Ring_PIP',Ring_MCP:'Ring_MCP',Pinky_Tip:'Pinky_Tip',Pinky_DIP:'Pinky_DIP',Pinky_PIP:'Pinky_PIP',Pinky_MCP:'Pinky_MCP',Wrist_Center:'Wrist_Center',Wrist_Ulnar:'Wrist_Ulnar',Wrist_Radial:'Wrist_Radial',Hand_Center:'Hand_Center',EHandTrackingKeypoint_MAX:'EHandTrackingKeypoint_MAX', };
+declare class MagicLeapHandTrackingFunctionLibrary extends BlueprintFunctionLibrary { 
+	static Load(ResourceName: string): MagicLeapHandTrackingFunctionLibrary;
+	static Find(Outer: UObject, ResourceName: string): MagicLeapHandTrackingFunctionLibrary;
+	static GetDefaultObject(): MagicLeapHandTrackingFunctionLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MagicLeapHandTrackingFunctionLibrary;
+	static SetStaticGestureConfidenceThreshold(Gesture: EHandTrackingGesture,Confidence: number): void;
+	static SetConfiguration(StaticGesturesToActivate: EHandTrackingGesture[],KeypointsFilterLevel: EHandTrackingKeypointFilterLevel,GestureFilterLevel: EHandTrackingGestureFilterLevel,HandSwitchingFilterLevel: EHandTrackingGestureFilterLevel,bTrackingEnabled: boolean): boolean;
+	static GetStaticGestureConfidenceThreshold(Gesture: EHandTrackingGesture): number;
+	static GetMagicLeapHandTrackingLiveLinkSource(SourceHandle?: LiveLinkSourceHandle): {SourceHandle: LiveLinkSourceHandle, $: boolean};
+	static GetHandThumbTip(Hand: EControllerHand,TransformSpace: EGestureTransformSpace,Secondary?: Transform): {Secondary: Transform, $: boolean};
+	static GetHandIndexFingerTip(Hand: EControllerHand,TransformSpace: EGestureTransformSpace,Pointer?: Transform): {Pointer: Transform, $: boolean};
+	static GetHandCenterNormalized(Hand: EControllerHand,HandCenterNormalized?: Vector): {HandCenterNormalized: Vector, $: boolean};
+	static GetHandCenter(Hand: EControllerHand,HandCenter?: Transform): {HandCenter: Transform, $: boolean};
+	static GetGestureKeypointTransform(Hand: EControllerHand,Keypoint: EHandTrackingKeypoint,TransformSpace: EGestureTransformSpace,Transform?: Transform): {Transform: Transform, $: boolean};
+	static GetGestureKeypoints(Hand: EControllerHand,Keypoints?: Transform[]): {Keypoints: Transform[], $: boolean};
+	static GetCurrentGestureConfidence(Hand: EControllerHand,Confidence?: number): {Confidence: number, $: boolean};
+	static GetCurrentGesture(Hand: EControllerHand,Gesture?: EHandTrackingGesture): {Gesture: EHandTrackingGesture, $: boolean};
+	static GetConfiguration(ActiveStaticGestures?: EHandTrackingGesture[],KeypointsFilterLevel?: EHandTrackingKeypointFilterLevel,GestureFilterLevel?: EHandTrackingGestureFilterLevel,HandSwitchingFilterLevel?: EHandTrackingGestureFilterLevel,bTrackingEnabled?: boolean): {ActiveStaticGestures: EHandTrackingGesture[], KeypointsFilterLevel: EHandTrackingKeypointFilterLevel, GestureFilterLevel: EHandTrackingGestureFilterLevel, HandSwitchingFilterLevel: EHandTrackingGestureFilterLevel, bTrackingEnabled: boolean, $: boolean};
+	static C(Other: UObject | any): MagicLeapHandTrackingFunctionLibrary;
 }
 
-declare class DirectoryWatcher extends UObject { 
-	Added: string[];
-	Modified: string[];
-	Removed: string[];
+declare type EMagicLeapIdentityKey = 'GivenName' | 'FamilyName' | 'Email' | 'Bio' | 'PhoneNumber' | 'Avatar2D' | 'Avatar3D' | 'Unknown' | 'EMagicLeapIdentityKey_MAX';
+declare var EMagicLeapIdentityKey : { GivenName:'GivenName',FamilyName:'FamilyName',Email:'Email',Bio:'Bio',PhoneNumber:'PhoneNumber',Avatar2D:'Avatar2D',Avatar3D:'Avatar3D',Unknown:'Unknown',EMagicLeapIdentityKey_MAX:'EMagicLeapIdentityKey_MAX', };
+declare class MagicLeapIdentityAttribute { 
+	Attribute: EMagicLeapIdentityKey;
+	Value: string;
+	clone() : MagicLeapIdentityAttribute;
+	static C(Other: UObject | any): MagicLeapIdentityAttribute;
+}
+
+declare type EMagicLeapIdentityError = 'Ok' | 'InvalidParam' | 'AllocFailed' | 'PrivilegeDenied' | 'FailedToConnectToLocalService' | 'FailedToConnectToCloudService' | 'CloudAuthentication' | 'InvalidInformationFromCloud' | 'NotLoggedIn' | 'ExpiredCredentials' | 'FailedToGetUserProfile' | 'Unauthorized' | 'CertificateError' | 'RejectedByCloud' | 'AlreadyLoggedIn' | 'ModifyIsNotSupported' | 'NetworkError' | 'UnspecifiedFailure' | 'EMagicLeapIdentityError_MAX';
+declare var EMagicLeapIdentityError : { Ok:'Ok',InvalidParam:'InvalidParam',AllocFailed:'AllocFailed',PrivilegeDenied:'PrivilegeDenied',FailedToConnectToLocalService:'FailedToConnectToLocalService',FailedToConnectToCloudService:'FailedToConnectToCloudService',CloudAuthentication:'CloudAuthentication',InvalidInformationFromCloud:'InvalidInformationFromCloud',NotLoggedIn:'NotLoggedIn',ExpiredCredentials:'ExpiredCredentials',FailedToGetUserProfile:'FailedToGetUserProfile',Unauthorized:'Unauthorized',CertificateError:'CertificateError',RejectedByCloud:'RejectedByCloud',AlreadyLoggedIn:'AlreadyLoggedIn',ModifyIsNotSupported:'ModifyIsNotSupported',NetworkError:'NetworkError',UnspecifiedFailure:'UnspecifiedFailure',EMagicLeapIdentityError_MAX:'EMagicLeapIdentityError_MAX', };
+declare class MagicLeapIdentity extends UObject { 
+	static Load(ResourceName: string): MagicLeapIdentity;
+	static Find(Outer: UObject, ResourceName: string): MagicLeapIdentity;
+	static GetDefaultObject(): MagicLeapIdentity;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MagicLeapIdentity;
+	RequestAttributeValue(RequestedAttributeList: EMagicLeapIdentityKey[],RequestedAttributeValues?: MagicLeapIdentityAttribute[]): {RequestedAttributeValues: MagicLeapIdentityAttribute[], $: EMagicLeapIdentityError};
+	GetAllAvailableAttributes(AvailableAttributes?: EMagicLeapIdentityKey[]): {AvailableAttributes: EMagicLeapIdentityKey[], $: EMagicLeapIdentityError};
+	static C(Other: UObject | any): MagicLeapIdentity;
+}
+
+declare class DirectoryWatcher extends UObject { 
+	Added: string[];
+	Modified: string[];
+	Removed: string[];
 	OnChanged: UnrealEngineMulticastDelegate<() => void>;
 	static Load(ResourceName: string): DirectoryWatcher;
 	static Find(Outer: UObject, ResourceName: string): DirectoryWatcher;
@@ -6398,10 +10704,8 @@ declare class JavascriptContext extends UObject {
 	WriteDTS(Target: string,bIncludingTooltip: boolean): boolean;
 	WriteAliases(Target: string): boolean;
 	SetContextId(Name: string): void;
-	SetAsDebugContext(InPort: number): void;
 	RunScript(Script: string,bOutput: boolean): string;
 	RunFile(Filename: string): void;
-	ResetAsDebugContext(): void;
 	RequestV8GarbageCollection(): void;
 	ReadScriptFile(Filename: string): string;
 	IsDebugContext(): boolean;
@@ -6767,7 +11071,8 @@ declare class JavascriptLibrary extends BlueprintFunctionLibrary {
 	static CreatePackage(Outer: UObject,PackageName: string): Package;
 	static CreateLogCategory(CategoryName: string,InDefaultVerbosity: ELogVerbosity_JS): JavascriptLogCategory;
 	static CreateInternetAddr(): JavascriptInternetAddr;
-	static CreateEnum(Outer: UObject,Name: string,DisplayNames: string[]): Enum;
+	static CreateEnum(Outer: UObject,Name: string,DisplayNames: string[],Flags: string[]): Enum;
+	static ConvertRelativePathToFull(UObject: UObject,RelativePath: string): string;
 	static ClipboardPaste(): string;
 	static ClipboardCopy(string: string): void;
 	static CallJS(UFunction: JavascriptFunction,CustomStruct: JavascriptStubStruct): void;
@@ -6842,15 +11147,20 @@ declare class JavascriptProcess extends UObject {
 	static C(Other: UObject | any): JavascriptProcess;
 }
 
+declare class JavascriptCpuProfiler { 
+	clone() : JavascriptCpuProfiler;
+	static C(Other: UObject | any): JavascriptCpuProfiler;
+}
+
 declare class JavascriptProfile extends UObject { 
 	static Load(ResourceName: string): JavascriptProfile;
 	static Find(Outer: UObject, ResourceName: string): JavascriptProfile;
 	static GetDefaultObject(): JavascriptProfile;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptProfile;
-	static Stop(Title: string): JavascriptProfile;
-	static Start(Title: string,bRecordSamples: boolean): void;
-	static SetSamplingInterval(us: number): void;
-	static SetIdle(is_idle: boolean): void;
+	static Stop(Profiler: JavascriptCpuProfiler,Title: string): JavascriptProfile;
+	static Start(Title: string,bRecordSamples: boolean): JavascriptCpuProfiler;
+	static SetSamplingInterval(Profiler: JavascriptCpuProfiler,us: number): void;
+	static SetIdle(Profiler: JavascriptCpuProfiler,is_idle: boolean): void;
 	GetTopDownRoot(): JavascriptProfileNode;
 	GetSampleTimestamp(index: number): number;
 	GetSamplesCount(): number;
@@ -7086,12 +11396,16 @@ declare class JavascriptListView extends JavascriptTreeView {
 	static C(Other: UObject | any): JavascriptListView;
 }
 
+declare type EJavasrciptUserInterfaceActionType = 'None' | 'Button' | 'ToggleButton' | 'RadioButton' | 'Check' | 'CollapsedButton' | 'EJavasrciptUserInterfaceActionType_MAX';
+declare var EJavasrciptUserInterfaceActionType : { None:'None',Button:'Button',ToggleButton:'ToggleButton',RadioButton:'RadioButton',Check:'Check',CollapsedButton:'CollapsedButton',EJavasrciptUserInterfaceActionType_MAX:'EJavasrciptUserInterfaceActionType_MAX', };
 declare class JavascriptMenuContext extends UObject { 
 	Description: string;
 	Tooltip: string;
 	Icon: JavascriptSlateIcon;
+	ActionType: EJavasrciptUserInterfaceActionType;
 	OnCanExecute: UnrealEngineDelegate<() => boolean>;
 	OnExecute: UnrealEngineDelegate<() => void>;
+	OnGetActionCheckState: UnrealEngineDelegate<() => ECheckBoxState>;
 	static Load(ResourceName: string): JavascriptMenuContext;
 	static Find(Outer: UObject, ResourceName: string): JavascriptMenuContext;
 	static GetDefaultObject(): JavascriptMenuContext;
@@ -7099,8 +11413,6 @@ declare class JavascriptMenuContext extends UObject {
 	static C(Other: UObject | any): JavascriptMenuContext;
 }
 
-declare type EJavasrciptUserInterfaceActionType = 'None' | 'Button' | 'ToggleButton' | 'RadioButton' | 'Check' | 'CollapsedButton' | 'EJavasrciptUserInterfaceActionType_MAX';
-declare var EJavasrciptUserInterfaceActionType : { None:'None',Button:'Button',ToggleButton:'ToggleButton',RadioButton:'RadioButton',Check:'Check',CollapsedButton:'CollapsedButton',EJavasrciptUserInterfaceActionType_MAX:'EJavasrciptUserInterfaceActionType_MAX', };
 declare class JavascriptUICommandInfo { 
 	clone() : JavascriptUICommandInfo;
 	static C(Other: UObject | any): JavascriptUICommandInfo;
@@ -7114,6 +11426,7 @@ declare class JavascriptUICommand {
 	DefaultChord: InputChord;
 	ActionType: EJavasrciptUserInterfaceActionType;
 	CommandInfo: JavascriptUICommandInfo;
+	IconStyleName: string;
 	clone() : JavascriptUICommand;
 	static C(Other: UObject | any): JavascriptUICommand;
 }
@@ -7152,6 +11465,35 @@ declare class JavascriptExtensionBase {
 	static C(Other: UObject | any): JavascriptExtensionBase;
 }
 
+declare class JavascriptUICommands extends UObject { 
+	OnExecuteAction: UnrealEngineDelegate<(ID: string) => void>;
+	OnCanExecuteAction: UnrealEngineDelegate<(ID: string) => boolean>;
+	OnIsActionChecked: UnrealEngineDelegate<(ID: string) => boolean>;
+	OnIsActionButtonVisible: UnrealEngineDelegate<(ID: string) => boolean>;
+	Commands: JavascriptUICommand[];
+	ContextName: string;
+	ContextDesc: string;
+	ContextNameParent: string;
+	StyleSetName: string;
+	TextSubNamespace: string;
+	CommandInfos: JavascriptUICommandInfo[];
+	BindingContext: JavascriptBindingContext;
+	static Load(ResourceName: string): JavascriptUICommands;
+	static Find(Outer: UObject, ResourceName: string): JavascriptUICommands;
+	static GetDefaultObject(): JavascriptUICommands;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptUICommands;
+	Uninitialize(): void;
+	Unbind(List: JavascriptUICommandList): void;
+	Refresh(): void;
+	Initialize(): void;
+	GetAction(ID: string): JavascriptUICommandInfo;
+	Discard(): void;
+	Commit(): void;
+	static BroadcastCommandsChanged(InContextName: string): void;
+	Bind(List: JavascriptUICommandList): void;
+	static C(Other: UObject | any): JavascriptUICommands;
+}
+
 declare class JavascriptToolbarButtonContext extends UObject { 
 	OnGetLabel: UnrealEngineDelegate<() => string>;
 	OnGetTooltip: UnrealEngineDelegate<() => string>;
@@ -7173,24 +11515,28 @@ declare class JavascriptMenuBuilder {
 	clone() : JavascriptMenuBuilder;
 	static C(Other: UObject | any): JavascriptMenuBuilder;
 	AddComboButton(UObject?: JavascriptComboButtonContext): {Builder: JavascriptMenuBuilder};
+	AddMenuByCommands(UICommands?: JavascriptUICommands): {Builder: JavascriptMenuBuilder};
 	AddMenuEntry(UObject?: JavascriptMenuContext): {Builder: JavascriptMenuBuilder};
 	AddPullDownMenu(InMenuLabel?: string,InToolTip?: string,InPullDownMenu?: JavascriptFunction,InExtensionHook?: string,InTutorialHighlightName?: string): {MenuBuilder: JavascriptMenuBuilder};
 	AddSeparator(): {Builder: JavascriptMenuBuilder};
+	AddSubMenu(Label?: string,Tooltip?: string,bInOpenSubMenuOnClick?: boolean,UFunction?: JavascriptFunction): {Builder: JavascriptMenuBuilder};
 	AddToolBarButton(CommandInfo?: JavascriptUICommandInfo): {Builder: JavascriptMenuBuilder};
 	AddToolBarButtonByContext(Context?: JavascriptToolbarButtonContext,EditingObject?: UObject): {Builder: JavascriptMenuBuilder};
 	AddWidget(Widget?: Widget,Label?: string,bNoIndent?: boolean,InTutorialHighlightName?: string,bSearchable?: boolean): {Builder: JavascriptMenuBuilder};
-	BeginSection(InExtensionHook?: string): {Builder: JavascriptMenuBuilder};
+	BeginSection(InExtensionHook?: string,MenuHeadingText?: string): {Builder: JavascriptMenuBuilder};
 	EndSection(): {Builder: JavascriptMenuBuilder};
 	PopCommandList(): {Builder: JavascriptMenuBuilder};
 	PushCommandList(List?: JavascriptUICommandList): {Builder: JavascriptMenuBuilder};
 	static AddComboButton(Builder?: JavascriptMenuBuilder,UObject?: JavascriptComboButtonContext): {Builder: JavascriptMenuBuilder};
+	static AddMenuByCommands(Builder?: JavascriptMenuBuilder,UICommands?: JavascriptUICommands): {Builder: JavascriptMenuBuilder};
 	static AddMenuEntry(Builder?: JavascriptMenuBuilder,UObject?: JavascriptMenuContext): {Builder: JavascriptMenuBuilder};
 	static AddPullDownMenu(MenuBuilder?: JavascriptMenuBuilder,InMenuLabel?: string,InToolTip?: string,InPullDownMenu?: JavascriptFunction,InExtensionHook?: string,InTutorialHighlightName?: string): {MenuBuilder: JavascriptMenuBuilder};
 	static AddSeparator(Builder?: JavascriptMenuBuilder): {Builder: JavascriptMenuBuilder};
+	static AddSubMenu(Builder?: JavascriptMenuBuilder,Label?: string,Tooltip?: string,bInOpenSubMenuOnClick?: boolean,UFunction?: JavascriptFunction): {Builder: JavascriptMenuBuilder};
 	static AddToolBarButton(Builder?: JavascriptMenuBuilder,CommandInfo?: JavascriptUICommandInfo): {Builder: JavascriptMenuBuilder};
 	static AddToolBarButtonByContext(Builder?: JavascriptMenuBuilder,Context?: JavascriptToolbarButtonContext,EditingObject?: UObject): {Builder: JavascriptMenuBuilder};
 	static AddWidget(Builder?: JavascriptMenuBuilder,Widget?: Widget,Label?: string,bNoIndent?: boolean,InTutorialHighlightName?: string,bSearchable?: boolean): {Builder: JavascriptMenuBuilder};
-	static BeginSection(Builder?: JavascriptMenuBuilder,InExtensionHook?: string): {Builder: JavascriptMenuBuilder};
+	static BeginSection(Builder?: JavascriptMenuBuilder,InExtensionHook?: string,MenuHeadingText?: string): {Builder: JavascriptMenuBuilder};
 	static EndSection(Builder?: JavascriptMenuBuilder): {Builder: JavascriptMenuBuilder};
 	static PopCommandList(Builder?: JavascriptMenuBuilder): {Builder: JavascriptMenuBuilder};
 	static PushCommandList(Builder?: JavascriptMenuBuilder,List?: JavascriptUICommandList): {Builder: JavascriptMenuBuilder};
@@ -7232,16 +11578,18 @@ declare class JavascriptMenuLibrary extends BlueprintFunctionLibrary {
 	static CreateMenuBuilder(CommandList: JavascriptUICommandList,bInShouldCloseWindowAfterMenuSelection: boolean,UFunction: JavascriptFunction): void;
 	static CreateMenuBarBuilder(CommandList: JavascriptUICommandList,UFunction: JavascriptFunction): void;
 	static Combine(Extenders: JavascriptExtender[]): JavascriptExtender;
-	static BeginSection(Builder?: JavascriptMenuBuilder,InExtensionHook?: string): {Builder: JavascriptMenuBuilder};
+	static BeginSection(Builder?: JavascriptMenuBuilder,InExtensionHook?: string,MenuHeadingText?: string): {Builder: JavascriptMenuBuilder};
 	static Apply(Extender: JavascriptExtender,ExtensionHook: string,HookPosition: EJavascriptExtensionHook,MenuBuilder?: JavascriptMenuBuilder): {MenuBuilder: JavascriptMenuBuilder};
 	static AddWidget(Builder?: JavascriptMenuBuilder,Widget?: Widget,Label?: string,bNoIndent?: boolean,InTutorialHighlightName?: string,bSearchable?: boolean): {Builder: JavascriptMenuBuilder};
 	static AddToolBarExtension(Extender: JavascriptExtender,ExtensionHook: string,HookPosition: EJavascriptExtensionHook,CommandList: JavascriptUICommandList,UFunction: JavascriptFunction): JavascriptExtensionBase;
 	static AddToolBarButtonByContext(Builder?: JavascriptMenuBuilder,Context?: JavascriptToolbarButtonContext,EditingObject?: UObject): {Builder: JavascriptMenuBuilder};
 	static AddToolBarButton(Builder?: JavascriptMenuBuilder,CommandInfo?: JavascriptUICommandInfo): {Builder: JavascriptMenuBuilder};
+	static AddSubMenu(Builder?: JavascriptMenuBuilder,Label?: string,Tooltip?: string,bInOpenSubMenuOnClick?: boolean,UFunction?: JavascriptFunction): {Builder: JavascriptMenuBuilder};
 	static AddSeparator(Builder?: JavascriptMenuBuilder): {Builder: JavascriptMenuBuilder};
 	static AddPullDownMenu(MenuBuilder?: JavascriptMenuBuilder,InMenuLabel?: string,InToolTip?: string,InPullDownMenu?: JavascriptFunction,InExtensionHook?: string,InTutorialHighlightName?: string): {MenuBuilder: JavascriptMenuBuilder};
 	static AddMenuExtension(Extender: JavascriptExtender,ExtensionHook: string,HookPosition: EJavascriptExtensionHook,CommandList: JavascriptUICommandList,UFunction: JavascriptFunction): JavascriptExtensionBase;
 	static AddMenuEntry(Builder?: JavascriptMenuBuilder,UObject?: JavascriptMenuContext): {Builder: JavascriptMenuBuilder};
+	static AddMenuByCommands(Builder?: JavascriptMenuBuilder,UICommands?: JavascriptUICommands): {Builder: JavascriptMenuBuilder};
 	static AddMenubarExtension(Extender: JavascriptExtender,ExtensionHook: string,HookPosition: EJavascriptExtensionHook,CommandList: JavascriptUICommandList,UFunction: JavascriptFunction): JavascriptExtensionBase;
 	static AddComboButton(Builder?: JavascriptMenuBuilder,UObject?: JavascriptComboButtonContext): {Builder: JavascriptMenuBuilder};
 	static C(Other: UObject | any): JavascriptMenuLibrary;
@@ -7425,35 +11773,6 @@ declare class JavascriptTileView extends TileView {
 	static C(Other: UObject | any): JavascriptTileView;
 }
 
-declare class JavascriptUICommands extends UObject { 
-	OnExecuteAction: UnrealEngineDelegate<(ID: string) => void>;
-	OnCanExecuteAction: UnrealEngineDelegate<(ID: string) => boolean>;
-	OnIsActionChecked: UnrealEngineDelegate<(ID: string) => boolean>;
-	OnIsActionButtonVisible: UnrealEngineDelegate<(ID: string) => boolean>;
-	Commands: JavascriptUICommand[];
-	ContextName: string;
-	ContextDesc: string;
-	ContextNameParent: string;
-	StyleSetName: string;
-	TextSubNamespace: string;
-	CommandInfos: JavascriptUICommandInfo[];
-	BindingContext: JavascriptBindingContext;
-	static Load(ResourceName: string): JavascriptUICommands;
-	static Find(Outer: UObject, ResourceName: string): JavascriptUICommands;
-	static GetDefaultObject(): JavascriptUICommands;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptUICommands;
-	Uninitialize(): void;
-	Unbind(List: JavascriptUICommandList): void;
-	Refresh(): void;
-	Initialize(): void;
-	GetAction(ID: string): JavascriptUICommandInfo;
-	Discard(): void;
-	Commit(): void;
-	static BroadcastCommandsChanged(InContextName: string): void;
-	Bind(List: JavascriptUICommandList): void;
-	static C(Other: UObject | any): JavascriptUICommands;
-}
-
 declare class JavascriptUMGBlueprintLibrary extends BlueprintFunctionLibrary { 
 	static Load(ResourceName: string): JavascriptUMGBlueprintLibrary;
 	static Find(Outer: UObject, ResourceName: string): JavascriptUMGBlueprintLibrary;
@@ -7537,7 +11856,6 @@ declare class JavascriptWidget extends UserWidget {
 	OnInputActionEvent: UnrealEngineMulticastDelegate<(ActionName: string) => void>;
 	OnReleaseActionEvent: UnrealEngineMulticastDelegate<(ActionName: string) => void>;
 	OnInputAxisEvent: UnrealEngineMulticastDelegate<(Axis: number, AxisName: string) => void>;
-	OnDestroy: UnrealEngineMulticastDelegate<(bReleaseChildren: boolean) => void>;
 	ContentSlot: PanelSlot;
 	static Load(ResourceName: string): JavascriptWidget;
 	static Find(Outer: UObject, ResourceName: string): JavascriptWidget;
@@ -7550,6 +11868,7 @@ declare class JavascriptWidget extends UserWidget {
 	OnListenForInputAction(ActionName: string,EventType: EInputEvent,bConsume: boolean): void;
 	OnInputAxisByName(Axis: number,ActionName: string): void;
 	OnInputActionByName(ActionName: string): void;
+	OnDestroy(bReleaseChildren: boolean): void;
 	static HasValidCachedWidget(Widget: Widget): boolean;
 	static CallSynchronizeProperties(WidgetOrSlot: Visual): void;
 	AddChild(Content: Widget): PanelSlot;
@@ -7687,122 +12006,517 @@ declare class JavascriptWebSocketServer extends UObject {
 	static C(Other: UObject | any): JavascriptWebSocketServer;
 }
 
-declare type EMeshPaintColorViewMode = 'Normal' | 'RGB' | 'Alpha' | 'Red' | 'Green' | 'Blue' | 'EMeshPaintColorViewMode_MAX';
-declare var EMeshPaintColorViewMode : { Normal:'Normal',RGB:'RGB',Alpha:'Alpha',Red:'Red',Green:'Green',Blue:'Blue',EMeshPaintColorViewMode_MAX:'EMeshPaintColorViewMode_MAX', };
-declare class PaintBrushSettings extends UObject { 
-	BrushRadius: number;
-	BrushStrength: number;
-	BrushFalloffAmount: number;
-	bEnableFlow: boolean;
-	bOnlyFrontFacingTriangles: boolean;
-	ColorViewMode: EMeshPaintColorViewMode;
-	static Load(ResourceName: string): PaintBrushSettings;
-	static Find(Outer: UObject, ResourceName: string): PaintBrushSettings;
-	static GetDefaultObject(): PaintBrushSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaintBrushSettings;
-	static C(Other: UObject | any): PaintBrushSettings;
-}
-
-declare class MeshPaintSettings extends UObject { 
-	VertexPreviewSize: number;
-	static Load(ResourceName: string): MeshPaintSettings;
-	static Find(Outer: UObject, ResourceName: string): MeshPaintSettings;
-	static GetDefaultObject(): MeshPaintSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshPaintSettings;
-	static C(Other: UObject | any): MeshPaintSettings;
-}
-
-declare class VertexColorImportOptions extends UObject { 
-	UVIndex: number;
-	LODIndex: number;
-	bRed: boolean;
-	bBlue: boolean;
-	bGreen: boolean;
-	bAlpha: boolean;
-	bImportToInstance: boolean;
-	bCanImportToInstance: boolean;
-	static Load(ResourceName: string): VertexColorImportOptions;
-	static Find(Outer: UObject, ResourceName: string): VertexColorImportOptions;
-	static GetDefaultObject(): VertexColorImportOptions;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VertexColorImportOptions;
-	static C(Other: UObject | any): VertexColorImportOptions;
+declare class TcpMessagingSettings extends UObject { 
+	EnableTransport: boolean;
+	ListenEndpoint: string;
+	ConnectToEndpoints: string[];
+	ConnectionRetryDelay: number;
+	static Load(ResourceName: string): TcpMessagingSettings;
+	static Find(Outer: UObject, ResourceName: string): TcpMessagingSettings;
+	static GetDefaultObject(): TcpMessagingSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TcpMessagingSettings;
+	static C(Other: UObject | any): TcpMessagingSettings;
 }
 
-declare class FlipbookEditorSettings extends UObject { 
-	BackgroundColor: Color;
-	bShowGridByDefault: boolean;
-	static Load(ResourceName: string): FlipbookEditorSettings;
-	static Find(Outer: UObject, ResourceName: string): FlipbookEditorSettings;
-	static GetDefaultObject(): FlipbookEditorSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FlipbookEditorSettings;
-	static C(Other: UObject | any): FlipbookEditorSettings;
+declare class UdpMessagingSettings extends UObject { 
+	EnableTransport: boolean;
+	UnicastEndpoint: string;
+	MulticastEndpoint: string;
+	MulticastTimeToLive: number;
+	StaticEndpoints: string[];
+	EnableTunnel: boolean;
+	TunnelUnicastEndpoint: string;
+	TunnelMulticastEndpoint: string;
+	RemoteTunnelEndpoints: string[];
+	static Load(ResourceName: string): UdpMessagingSettings;
+	static Find(Outer: UObject, ResourceName: string): UdpMessagingSettings;
+	static GetDefaultObject(): UdpMessagingSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UdpMessagingSettings;
+	static C(Other: UObject | any): UdpMessagingSettings;
 }
 
-declare type ESpriteExtractMode = 'Auto' | 'Grid' | 'ESpriteExtractMode_MAX';
-declare var ESpriteExtractMode : { Auto:'Auto',Grid:'Grid',ESpriteExtractMode_MAX:'ESpriteExtractMode_MAX', };
-declare class PaperExtractSpritesSettings extends UObject { 
-	SpriteExtractMode: ESpriteExtractMode;
-	OutlineColor: LinearColor;
-	ViewportTextureTint: LinearColor;
-	BackgroundColor: LinearColor;
-	NamingTemplate: string;
-	NamingStartIndex: number;
-	static Load(ResourceName: string): PaperExtractSpritesSettings;
-	static Find(Outer: UObject, ResourceName: string): PaperExtractSpritesSettings;
-	static GetDefaultObject(): PaperExtractSpritesSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperExtractSpritesSettings;
-	static C(Other: UObject | any): PaperExtractSpritesSettings;
+declare type EActorSequenceObjectReferenceType = 'ContextActor' | 'ExternalActor' | 'Component' | 'EActorSequenceObjectReferenceType_MAX';
+declare var EActorSequenceObjectReferenceType : { ContextActor:'ContextActor',ExternalActor:'ExternalActor',Component:'Component',EActorSequenceObjectReferenceType_MAX:'EActorSequenceObjectReferenceType_MAX', };
+declare class ActorSequenceObjectReference { 
+	Type: EActorSequenceObjectReferenceType;
+	ActorId: Guid;
+	PathToComponent: string;
+	clone() : ActorSequenceObjectReference;
+	static C(Other: UObject | any): ActorSequenceObjectReference;
 }
 
-declare class PaperExtractSpriteGridSettings extends UObject { 
-	CellWidth: number;
-	CellHeight: number;
-	NumCellsX: number;
-	NumCellsY: number;
-	MarginX: number;
-	MarginY: number;
-	SpacingX: number;
-	SpacingY: number;
-	static Load(ResourceName: string): PaperExtractSpriteGridSettings;
-	static Find(Outer: UObject, ResourceName: string): PaperExtractSpriteGridSettings;
-	static GetDefaultObject(): PaperExtractSpriteGridSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperExtractSpriteGridSettings;
-	static C(Other: UObject | any): PaperExtractSpriteGridSettings;
+declare class ActorSequenceObjectReferences { 
+	Array: ActorSequenceObjectReference[];
+	clone() : ActorSequenceObjectReferences;
+	static C(Other: UObject | any): ActorSequenceObjectReferences;
 }
 
-declare class PaperFlipbookActorFactory extends ActorFactory { 
-	static Load(ResourceName: string): PaperFlipbookActorFactory;
-	static Find(Outer: UObject, ResourceName: string): PaperFlipbookActorFactory;
-	static GetDefaultObject(): PaperFlipbookActorFactory;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperFlipbookActorFactory;
-	static C(Other: UObject | any): PaperFlipbookActorFactory;
+declare class ActorSequenceObjectReferenceMap { 
+	BindingIds: Guid[];
+	References: ActorSequenceObjectReferences[];
+	clone() : ActorSequenceObjectReferenceMap;
+	static C(Other: UObject | any): ActorSequenceObjectReferenceMap;
 }
 
-declare class PaperFlipbookFactory extends Factory { 
-	static Load(ResourceName: string): PaperFlipbookFactory;
-	static Find(Outer: UObject, ResourceName: string): PaperFlipbookFactory;
-	static GetDefaultObject(): PaperFlipbookFactory;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperFlipbookFactory;
-	static C(Other: UObject | any): PaperFlipbookFactory;
+declare class ActorSequence extends MovieSceneSequence { 
+	MovieScene: MovieScene;
+	ObjectReferences: ActorSequenceObjectReferenceMap;
+	bHasBeenInitialized: boolean;
+	static Load(ResourceName: string): ActorSequence;
+	static Find(Outer: UObject, ResourceName: string): ActorSequence;
+	static GetDefaultObject(): ActorSequence;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorSequence;
+	static C(Other: UObject | any): ActorSequence;
 }
 
-declare class PaperSpriteThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
-	static Load(ResourceName: string): PaperSpriteThumbnailRenderer;
-	static Find(Outer: UObject, ResourceName: string): PaperSpriteThumbnailRenderer;
-	static GetDefaultObject(): PaperSpriteThumbnailRenderer;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperSpriteThumbnailRenderer;
-	static C(Other: UObject | any): PaperSpriteThumbnailRenderer;
+declare class ActorSequencePlayer extends MovieSceneSequencePlayer { 
+	static Load(ResourceName: string): ActorSequencePlayer;
+	static Find(Outer: UObject, ResourceName: string): ActorSequencePlayer;
+	static GetDefaultObject(): ActorSequencePlayer;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorSequencePlayer;
+	static C(Other: UObject | any): ActorSequencePlayer;
 }
 
-declare class PaperFlipbookThumbnailRenderer extends PaperSpriteThumbnailRenderer { 
-	static Load(ResourceName: string): PaperFlipbookThumbnailRenderer;
-	static Find(Outer: UObject, ResourceName: string): PaperFlipbookThumbnailRenderer;
-	static GetDefaultObject(): PaperFlipbookThumbnailRenderer;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperFlipbookThumbnailRenderer;
-	static C(Other: UObject | any): PaperFlipbookThumbnailRenderer;
+declare class ActorSequenceComponent extends ActorComponent { 
+	PlaybackSettings: MovieSceneSequencePlaybackSettings;
+	Sequence: ActorSequence;
+	SequencePlayer: ActorSequencePlayer;
+	static Load(ResourceName: string): ActorSequenceComponent;
+	static Find(Outer: UObject, ResourceName: string): ActorSequenceComponent;
+	static GetDefaultObject(): ActorSequenceComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorSequenceComponent;
+	static C(Other: UObject | any): ActorSequenceComponent;
 }
 
-declare class PaperImporterSettings extends UObject { 
+declare type ELocationAccuracy = 'LA_ThreeKilometers' | 'LA_OneKilometer' | 'LA_HundredMeters' | 'LA_TenMeters' | 'LA_Best' | 'LA_Navigation' | 'LA_MAX';
+declare var ELocationAccuracy : { LA_ThreeKilometers:'LA_ThreeKilometers',LA_OneKilometer:'LA_OneKilometer',LA_HundredMeters:'LA_HundredMeters',LA_TenMeters:'LA_TenMeters',LA_Best:'LA_Best',LA_Navigation:'LA_Navigation',LA_MAX:'LA_MAX', };
+declare class LocationServicesData { 
+	Timestamp: number;
+	Longitude: number;
+	Latitude: number;
+	HorizontalAccuracy: number;
+	VerticalAccuracy: number;
+	Altitude: number;
+	clone() : LocationServicesData;
+	static C(Other: UObject | any): LocationServicesData;
+	static GetLastKnownLocation(): LocationServicesData;
+}
+
+declare class LocationServicesImpl extends UObject { 
+	OnLocationChanged: UnrealEngineMulticastDelegate<(LocationData: LocationServicesData) => void>;
+	static Load(ResourceName: string): LocationServicesImpl;
+	static Find(Outer: UObject, ResourceName: string): LocationServicesImpl;
+	static GetDefaultObject(): LocationServicesImpl;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocationServicesImpl;
+	static C(Other: UObject | any): LocationServicesImpl;
+}
+
+declare class LocationServices extends BlueprintFunctionLibrary { 
+	static Load(ResourceName: string): LocationServices;
+	static Find(Outer: UObject, ResourceName: string): LocationServices;
+	static GetDefaultObject(): LocationServices;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocationServices;
+	static StopLocationServices(): boolean;
+	static StartLocationServices(): boolean;
+	static IsLocationAccuracyAvailable(Accuracy: ELocationAccuracy): boolean;
+	static InitLocationServices(Accuracy: ELocationAccuracy,UpdateFrequency: number,MinDistanceFilter: number): boolean;
+	static GetLocationServicesImpl(): LocationServicesImpl;
+	static GetLastKnownLocation(): LocationServicesData;
+	static AreLocationServicesEnabled(): boolean;
+	static C(Other: UObject | any): LocationServices;
+}
+
+declare class TireConfigMaterialFriction { 
+	PhysicalMaterial: PhysicalMaterial;
+	FrictionScale: number;
+	clone() : TireConfigMaterialFriction;
+	static C(Other: UObject | any): TireConfigMaterialFriction;
+}
+
+declare class TireConfig extends DataAsset { 
+	FrictionScale: number;
+	TireFrictionScales: TireConfigMaterialFriction[];
+	static Load(ResourceName: string): TireConfig;
+	static Find(Outer: UObject, ResourceName: string): TireConfig;
+	static GetDefaultObject(): TireConfig;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TireConfig;
+	static C(Other: UObject | any): TireConfig;
+}
+
+declare type EWheelSweepType = 'SimpleAndComplex' | 'Simple' | 'Complex' | 'EWheelSweepType_MAX';
+declare var EWheelSweepType : { SimpleAndComplex:'SimpleAndComplex',Simple:'Simple',Complex:'Complex',EWheelSweepType_MAX:'EWheelSweepType_MAX', };
+declare class VehicleWheel extends UObject { 
+	CollisionMesh: StaticMesh;
+	bDontCreateShape: boolean;
+	bAutoAdjustCollisionSize: boolean;
+	Offset: Vector;
+	ShapeRadius: number;
+	ShapeWidth: number;
+	Mass: number;
+	DampingRate: number;
+	SteerAngle: number;
+	bAffectedByHandbrake: boolean;
+	TireType: TireType;
+	TireConfig: TireConfig;
+	LatStiffMaxLoad: number;
+	LatStiffValue: number;
+	LongStiffValue: number;
+	SuspensionForceOffset: number;
+	SuspensionMaxRaise: number;
+	SuspensionMaxDrop: number;
+	SuspensionNaturalFrequency: number;
+	SuspensionDampingRatio: number;
+	SweepType: EWheelSweepType;
+	MaxBrakeTorque: number;
+	MaxHandBrakeTorque: number;
+	VehicleSim: WheeledVehicleMovementComponent;
+	WheelIndex: number;
+	DebugLongSlip: number;
+	DebugLatSlip: number;
+	DebugNormalizedTireLoad: number;
+	DebugWheelTorque: number;
+	DebugLongForce: number;
+	DebugLatForce: number;
+	Location: Vector;
+	OldLocation: Vector;
+	Velocity: Vector;
+	static Load(ResourceName: string): VehicleWheel;
+	static Find(Outer: UObject, ResourceName: string): VehicleWheel;
+	static GetDefaultObject(): VehicleWheel;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VehicleWheel;
+	IsInAir(): boolean;
+	GetSuspensionOffset(): number;
+	GetSteerAngle(): number;
+	GetRotationAngle(): number;
+	static C(Other: UObject | any): VehicleWheel;
+}
+
+declare class WheelSetup { 
+	WheelClass: UnrealEngineClass;
+	BoneName: string;
+	AdditionalOffset: Vector;
+	bDisableSteering: boolean;
+	clone() : WheelSetup;
+	static C(Other: UObject | any): WheelSetup;
+}
+
+declare class ReplicatedVehicleState { 
+	SteeringInput: number;
+	ThrottleInput: number;
+	BrakeInput: number;
+	HandbrakeInput: number;
+	CurrentGear: number;
+	clone() : ReplicatedVehicleState;
+	static C(Other: UObject | any): ReplicatedVehicleState;
+}
+
+declare class VehicleInputRate { 
+	RiseRate: number;
+	FallRate: number;
+	clone() : VehicleInputRate;
+	static C(Other: UObject | any): VehicleInputRate;
+}
+
+declare class WheeledVehicleMovementComponent extends PawnMovementComponent { 
+	bDeprecatedSpringOffsetMode: boolean;
+	bReverseAsBrake: boolean;
+	bUseRVOAvoidance: boolean;
+	bRawHandbrakeInput: boolean;
+	bRawGearUpInput: boolean;
+	bRawGearDownInput: boolean;
+	bWasAvoidanceUpdated: boolean;
+	Mass: number;
+	WheelSetups: WheelSetup[];
+	DragCoefficient: number;
+	ChassisWidth: number;
+	ChassisHeight: number;
+	DragArea: number;
+	EstimatedMaxEngineSpeed: number;
+	MaxEngineRPM: number;
+	DebugDragMagnitude: number;
+	InertiaTensorScale: Vector;
+	MinNormalizedTireLoad: number;
+	MinNormalizedTireLoadFiltered: number;
+	MaxNormalizedTireLoad: number;
+	MaxNormalizedTireLoadFiltered: number;
+	ThresholdLongitudinalSpeed: number;
+	LowForwardSpeedSubStepCount: number;
+	HighForwardSpeedSubStepCount: number;
+	Wheels: VehicleWheel[];
+	RVOAvoidanceRadius: number;
+	RVOAvoidanceHeight: number;
+	AvoidanceConsiderationRadius: number;
+	RVOSteeringStep: number;
+	RVOThrottleStep: number;
+	AvoidanceUID: number;
+	AvoidanceGroup: NavAvoidanceMask;
+	GroupsToAvoid: NavAvoidanceMask;
+	GroupsToIgnore: NavAvoidanceMask;
+	AvoidanceWeight: number;
+	PendingLaunchVelocity: Vector;
+	ReplicatedState: ReplicatedVehicleState;
+	RawSteeringInput: number;
+	RawThrottleInput: number;
+	RawBrakeInput: number;
+	SteeringInput: number;
+	ThrottleInput: number;
+	BrakeInput: number;
+	HandbrakeInput: number;
+	IdleBrakeInput: number;
+	StopThreshold: number;
+	WrongDirectionThreshold: number;
+	ThrottleInputRate: VehicleInputRate;
+	BrakeInputRate: VehicleInputRate;
+	HandbrakeInputRate: VehicleInputRate;
+	SteeringInputRate: VehicleInputRate;
+	OverrideController: Controller;
+	static Load(ResourceName: string): WheeledVehicleMovementComponent;
+	static Find(Outer: UObject, ResourceName: string): WheeledVehicleMovementComponent;
+	static GetDefaultObject(): WheeledVehicleMovementComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WheeledVehicleMovementComponent;
+	SetUseAutoGears(bUseAuto: boolean): void;
+	SetThrottleInput(Throttle: number): void;
+	SetTargetGear(GearNum: number,bImmediate: boolean): void;
+	SetSteeringInput(Steering: number): void;
+	SetHandbrakeInput(bNewHandbrake: boolean): void;
+	SetGroupsToIgnoreMask(GroupMask: NavAvoidanceMask): void;
+	SetGroupsToIgnore(GroupFlags: number): void;
+	SetGroupsToAvoidMask(GroupMask: NavAvoidanceMask): void;
+	SetGroupsToAvoid(GroupFlags: number): void;
+	SetGearUp(bNewGearUp: boolean): void;
+	SetGearDown(bNewGearDown: boolean): void;
+	SetBrakeInput(Brake: number): void;
+	SetAvoidanceGroupMask(GroupMask: NavAvoidanceMask): void;
+	SetAvoidanceGroup(GroupFlags: number): void;
+	SetAvoidanceEnabled(bEnable: boolean): void;
+	ServerUpdateState(InSteeringInput: number,InThrottleInput: number,InBrakeInput: number,InHandbrakeInput: number,CurrentGear: number): void;
+	GetUseAutoGears(): boolean;
+	GetTargetGear(): number;
+	GetForwardSpeed(): number;
+	GetEngineRotationSpeed(): number;
+	GetEngineMaxRotationSpeed(): number;
+	GetCurrentGear(): number;
+	static C(Other: UObject | any): WheeledVehicleMovementComponent;
+}
+
+declare class SimpleWheeledVehicleMovementComponent extends WheeledVehicleMovementComponent { 
+	static Load(ResourceName: string): SimpleWheeledVehicleMovementComponent;
+	static Find(Outer: UObject, ResourceName: string): SimpleWheeledVehicleMovementComponent;
+	static GetDefaultObject(): SimpleWheeledVehicleMovementComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SimpleWheeledVehicleMovementComponent;
+	SetSteerAngle(SteerAngle: number,WheelIndex: number): void;
+	SetDriveTorque(DriveTorque: number,WheelIndex: number): void;
+	SetBrakeTorque(BrakeTorque: number,WheelIndex: number): void;
+	static C(Other: UObject | any): SimpleWheeledVehicleMovementComponent;
+}
+
+declare class WheeledVehicle extends Pawn { 
+	Mesh: SkeletalMeshComponent;
+	VehicleMovement: WheeledVehicleMovementComponent;
+	static GetDefaultObject(): WheeledVehicle;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WheeledVehicle;
+	static C(Other: UObject | any): WheeledVehicle;
+}
+
+declare class VehicleAnimInstance extends AnimInstance { 
+	WheeledVehicleMovementComponent: WheeledVehicleMovementComponent;
+	static Load(ResourceName: string): VehicleAnimInstance;
+	static Find(Outer: UObject, ResourceName: string): VehicleAnimInstance;
+	static GetDefaultObject(): VehicleAnimInstance;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VehicleAnimInstance;
+	GetVehicle(): WheeledVehicle;
+	static C(Other: UObject | any): VehicleAnimInstance;
+}
+
+declare class VehicleEngineData { 
+	TorqueCurve: RuntimeFloatCurve;
+	MaxRPM: number;
+	MOI: number;
+	DampingRateFullThrottle: number;
+	DampingRateZeroThrottleClutchEngaged: number;
+	DampingRateZeroThrottleClutchDisengaged: number;
+	clone() : VehicleEngineData;
+	static C(Other: UObject | any): VehicleEngineData;
+}
+
+declare type EVehicleDifferential4W = 'LimitedSlip_4W' | 'LimitedSlip_FrontDrive' | 'LimitedSlip_RearDrive' | 'Open_4W' | 'Open_FrontDrive' | 'Open_RearDrive' | 'EVehicleDifferential4W_MAX';
+declare var EVehicleDifferential4W : { LimitedSlip_4W:'LimitedSlip_4W',LimitedSlip_FrontDrive:'LimitedSlip_FrontDrive',LimitedSlip_RearDrive:'LimitedSlip_RearDrive',Open_4W:'Open_4W',Open_FrontDrive:'Open_FrontDrive',Open_RearDrive:'Open_RearDrive',EVehicleDifferential4W_MAX:'EVehicleDifferential4W_MAX', };
+declare class VehicleDifferential4WData { 
+	DifferentialType: EVehicleDifferential4W;
+	FrontRearSplit: number;
+	FrontLeftRightSplit: number;
+	RearLeftRightSplit: number;
+	CentreBias: number;
+	FrontBias: number;
+	RearBias: number;
+	clone() : VehicleDifferential4WData;
+	static C(Other: UObject | any): VehicleDifferential4WData;
+}
+
+declare class VehicleGearData { 
+	Ratio: number;
+	DownRatio: number;
+	UpRatio: number;
+	clone() : VehicleGearData;
+	static C(Other: UObject | any): VehicleGearData;
+}
+
+declare class VehicleTransmissionData { 
+	bUseGearAutoBox: boolean;
+	GearSwitchTime: number;
+	GearAutoBoxLatency: number;
+	FinalRatio: number;
+	ForwardGears: VehicleGearData[];
+	ReverseGearRatio: number;
+	NeutralGearUpRatio: number;
+	ClutchStrength: number;
+	clone() : VehicleTransmissionData;
+	static C(Other: UObject | any): VehicleTransmissionData;
+}
+
+declare class WheeledVehicleMovementComponent4W extends WheeledVehicleMovementComponent { 
+	EngineSetup: VehicleEngineData;
+	DifferentialSetup: VehicleDifferential4WData;
+	AckermannAccuracy: number;
+	TransmissionSetup: VehicleTransmissionData;
+	SteeringCurve: RuntimeFloatCurve;
+	static Load(ResourceName: string): WheeledVehicleMovementComponent4W;
+	static Find(Outer: UObject, ResourceName: string): WheeledVehicleMovementComponent4W;
+	static GetDefaultObject(): WheeledVehicleMovementComponent4W;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WheeledVehicleMovementComponent4W;
+	static C(Other: UObject | any): WheeledVehicleMovementComponent4W;
+}
+
+declare class AnimNode_WheelHandler extends AnimNode_SkeletalControlBase { 
+	clone() : AnimNode_WheelHandler;
+	static C(Other: UObject | any): AnimNode_WheelHandler;
+}
+
+declare class AnimGraphNode_WheelHandler extends AnimGraphNode_SkeletalControlBase { 
+	UNode: AnimNode_WheelHandler;
+	static Load(ResourceName: string): AnimGraphNode_WheelHandler;
+	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_WheelHandler;
+	static GetDefaultObject(): AnimGraphNode_WheelHandler;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_WheelHandler;
+	static C(Other: UObject | any): AnimGraphNode_WheelHandler;
+}
+
+declare type EMeshPaintColorViewMode = 'Normal' | 'RGB' | 'Alpha' | 'Red' | 'Green' | 'Blue' | 'EMeshPaintColorViewMode_MAX';
+declare var EMeshPaintColorViewMode : { Normal:'Normal',RGB:'RGB',Alpha:'Alpha',Red:'Red',Green:'Green',Blue:'Blue',EMeshPaintColorViewMode_MAX:'EMeshPaintColorViewMode_MAX', };
+declare class PaintBrushSettings extends UObject { 
+	BrushRadius: number;
+	BrushStrength: number;
+	BrushFalloffAmount: number;
+	bEnableFlow: boolean;
+	bOnlyFrontFacingTriangles: boolean;
+	ColorViewMode: EMeshPaintColorViewMode;
+	static Load(ResourceName: string): PaintBrushSettings;
+	static Find(Outer: UObject, ResourceName: string): PaintBrushSettings;
+	static GetDefaultObject(): PaintBrushSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaintBrushSettings;
+	static C(Other: UObject | any): PaintBrushSettings;
+}
+
+declare class MeshPaintSettings extends UObject { 
+	VertexPreviewSize: number;
+	static Load(ResourceName: string): MeshPaintSettings;
+	static Find(Outer: UObject, ResourceName: string): MeshPaintSettings;
+	static GetDefaultObject(): MeshPaintSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshPaintSettings;
+	static C(Other: UObject | any): MeshPaintSettings;
+}
+
+declare class VertexColorImportOptions extends UObject { 
+	UVIndex: number;
+	LODIndex: number;
+	bRed: boolean;
+	bBlue: boolean;
+	bGreen: boolean;
+	bAlpha: boolean;
+	bImportToInstance: boolean;
+	bCanImportToInstance: boolean;
+	static Load(ResourceName: string): VertexColorImportOptions;
+	static Find(Outer: UObject, ResourceName: string): VertexColorImportOptions;
+	static GetDefaultObject(): VertexColorImportOptions;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VertexColorImportOptions;
+	static C(Other: UObject | any): VertexColorImportOptions;
+}
+
+declare class FlipbookEditorSettings extends UObject { 
+	BackgroundColor: Color;
+	bShowGridByDefault: boolean;
+	static Load(ResourceName: string): FlipbookEditorSettings;
+	static Find(Outer: UObject, ResourceName: string): FlipbookEditorSettings;
+	static GetDefaultObject(): FlipbookEditorSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FlipbookEditorSettings;
+	static C(Other: UObject | any): FlipbookEditorSettings;
+}
+
+declare type ESpriteExtractMode = 'Auto' | 'Grid' | 'ESpriteExtractMode_MAX';
+declare var ESpriteExtractMode : { Auto:'Auto',Grid:'Grid',ESpriteExtractMode_MAX:'ESpriteExtractMode_MAX', };
+declare class PaperExtractSpritesSettings extends UObject { 
+	SpriteExtractMode: ESpriteExtractMode;
+	OutlineColor: LinearColor;
+	ViewportTextureTint: LinearColor;
+	BackgroundColor: LinearColor;
+	NamingTemplate: string;
+	NamingStartIndex: number;
+	static Load(ResourceName: string): PaperExtractSpritesSettings;
+	static Find(Outer: UObject, ResourceName: string): PaperExtractSpritesSettings;
+	static GetDefaultObject(): PaperExtractSpritesSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperExtractSpritesSettings;
+	static C(Other: UObject | any): PaperExtractSpritesSettings;
+}
+
+declare class PaperExtractSpriteGridSettings extends UObject { 
+	CellWidth: number;
+	CellHeight: number;
+	NumCellsX: number;
+	NumCellsY: number;
+	MarginX: number;
+	MarginY: number;
+	SpacingX: number;
+	SpacingY: number;
+	static Load(ResourceName: string): PaperExtractSpriteGridSettings;
+	static Find(Outer: UObject, ResourceName: string): PaperExtractSpriteGridSettings;
+	static GetDefaultObject(): PaperExtractSpriteGridSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperExtractSpriteGridSettings;
+	static C(Other: UObject | any): PaperExtractSpriteGridSettings;
+}
+
+declare class PaperFlipbookActorFactory extends ActorFactory { 
+	static Load(ResourceName: string): PaperFlipbookActorFactory;
+	static Find(Outer: UObject, ResourceName: string): PaperFlipbookActorFactory;
+	static GetDefaultObject(): PaperFlipbookActorFactory;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperFlipbookActorFactory;
+	static C(Other: UObject | any): PaperFlipbookActorFactory;
+}
+
+declare class PaperFlipbookFactory extends Factory { 
+	static Load(ResourceName: string): PaperFlipbookFactory;
+	static Find(Outer: UObject, ResourceName: string): PaperFlipbookFactory;
+	static GetDefaultObject(): PaperFlipbookFactory;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperFlipbookFactory;
+	static C(Other: UObject | any): PaperFlipbookFactory;
+}
+
+declare class PaperSpriteThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
+	static Load(ResourceName: string): PaperSpriteThumbnailRenderer;
+	static Find(Outer: UObject, ResourceName: string): PaperSpriteThumbnailRenderer;
+	static GetDefaultObject(): PaperSpriteThumbnailRenderer;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperSpriteThumbnailRenderer;
+	static C(Other: UObject | any): PaperSpriteThumbnailRenderer;
+}
+
+declare class PaperFlipbookThumbnailRenderer extends PaperSpriteThumbnailRenderer { 
+	static Load(ResourceName: string): PaperFlipbookThumbnailRenderer;
+	static Find(Outer: UObject, ResourceName: string): PaperFlipbookThumbnailRenderer;
+	static GetDefaultObject(): PaperFlipbookThumbnailRenderer;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperFlipbookThumbnailRenderer;
+	static C(Other: UObject | any): PaperFlipbookThumbnailRenderer;
+}
+
+declare class PaperImporterSettings extends UObject { 
 	bPickBestMaterialWhenCreatingSprites: boolean;
 	bPickBestMaterialWhenCreatingTileMaps: boolean;
 	bAnalysisCanUseOpaque: boolean;
@@ -8023,6 +12737,14 @@ declare class LayersBlueprintLibrary extends BlueprintFunctionLibrary {
 	static C(Other: UObject | any): LayersBlueprintLibrary;
 }
 
+declare class AnimationSharingSetupFactory extends Factory { 
+	static Load(ResourceName: string): AnimationSharingSetupFactory;
+	static Find(Outer: UObject, ResourceName: string): AnimationSharingSetupFactory;
+	static GetDefaultObject(): AnimationSharingSetupFactory;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationSharingSetupFactory;
+	static C(Other: UObject | any): AnimationSharingSetupFactory;
+}
+
 declare class MyPluginStruct { 
 	TestString: string;
 	clone() : MyPluginStruct;
@@ -8072,1261 +12794,946 @@ declare class CryptoKeysSettings extends UObject {
 	static C(Other: UObject | any): CryptoKeysSettings;
 }
 
-declare class EditableMeshAdapter extends UObject { 
-	static Load(ResourceName: string): EditableMeshAdapter;
-	static Find(Outer: UObject, ResourceName: string): EditableMeshAdapter;
-	static GetDefaultObject(): EditableMeshAdapter;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableMeshAdapter;
-	static C(Other: UObject | any): EditableMeshAdapter;
-}
-
-declare class ElementID { 
-	IDValue: number;
-	clone() : ElementID;
-	static C(Other: UObject | any): ElementID;
-}
-
-declare class VertexID extends ElementID { 
-	clone() : VertexID;
-	static C(Other: UObject | any): VertexID;
-}
-
-declare class EdgeID extends ElementID { 
-	clone() : EdgeID;
-	static C(Other: UObject | any): EdgeID;
-}
-
-declare class PolygonID extends ElementID { 
-	clone() : PolygonID;
-	static C(Other: UObject | any): PolygonID;
-}
-
-declare type ETriangleTessellationMode = 'ThreeTriangles' | 'FourTriangles' | 'ETriangleTessellationMode_MAX';
-declare var ETriangleTessellationMode : { ThreeTriangles:'ThreeTriangles',FourTriangles:'FourTriangles',ETriangleTessellationMode_MAX:'ETriangleTessellationMode_MAX', };
-declare type EMeshModificationType = 'FirstInterim' | 'Interim' | 'Final' | 'EMeshModificationType_MAX';
-declare var EMeshModificationType : { FirstInterim:'FirstInterim',Interim:'Interim',Final:'Final',EMeshModificationType_MAX:'EMeshModificationType_MAX', };
-declare type EMeshTopologyChange = 'NoTopologyChange' | 'TopologyChange' | 'EMeshTopologyChange_MAX';
-declare var EMeshTopologyChange : { NoTopologyChange:'NoTopologyChange',TopologyChange:'TopologyChange',EMeshTopologyChange_MAX:'EMeshTopologyChange_MAX', };
-declare class VertexPair { 
-	VertexID0: VertexID;
-	VertexID1: VertexID;
-	clone() : VertexPair;
-	static C(Other: UObject | any): VertexPair;
-}
-
-declare class PolygonToSplit { 
-	PolygonID: PolygonID;
-	VertexPairsToSplitAt: VertexPair[];
-	clone() : PolygonToSplit;
-	static C(Other: UObject | any): PolygonToSplit;
-}
-
-declare class MeshElementAttributeValue { 
-	clone() : MeshElementAttributeValue;
-	static C(Other: UObject | any): MeshElementAttributeValue;
-}
-
-declare class MeshElementAttributeData { 
-	AttributeName: string;
-	AttributeIndex: number;
-	AttributeValue: MeshElementAttributeValue;
-	clone() : MeshElementAttributeData;
-	static C(Other: UObject | any): MeshElementAttributeData;
-}
-
-declare class MeshElementAttributeList { 
-	Attributes: MeshElementAttributeData[];
-	clone() : MeshElementAttributeList;
-	static C(Other: UObject | any): MeshElementAttributeList;
+declare type ECurveEditorFFTFilterType = 'Lowpass' | 'Highpass' | 'ECurveEditorFFTFilterType_MAX';
+declare var ECurveEditorFFTFilterType : { Lowpass:'Lowpass',Highpass:'Highpass',ECurveEditorFFTFilterType_MAX:'ECurveEditorFFTFilterType_MAX', };
+declare type ECurveEditorFFTFilterClass = 'Butterworth' | 'Chebyshev' | 'ECurveEditorFFTFilterClass_MAX';
+declare var ECurveEditorFFTFilterClass : { Butterworth:'Butterworth',Chebyshev:'Chebyshev',ECurveEditorFFTFilterClass_MAX:'ECurveEditorFFTFilterClass_MAX', };
+declare class CurveEditorFFTFilter extends CurveEditorFilterBase { 
+	CutoffFrequency: number;
+	Type: ECurveEditorFFTFilterType;
+	Response: ECurveEditorFFTFilterClass;
+	Order: number;
+	static Load(ResourceName: string): CurveEditorFFTFilter;
+	static Find(Outer: UObject, ResourceName: string): CurveEditorFFTFilter;
+	static GetDefaultObject(): CurveEditorFFTFilter;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveEditorFFTFilter;
+	static C(Other: UObject | any): CurveEditorFFTFilter;
 }
 
-declare class AttributesForVertex { 
-	VertexID: VertexID;
-	VertexAttributes: MeshElementAttributeList;
-	clone() : AttributesForVertex;
-	static C(Other: UObject | any): AttributesForVertex;
+declare class CurveEditorRetimeAnchor { 
+	ValueInSeconds: any;
+	bIsSelected: boolean;
+	clone() : CurveEditorRetimeAnchor;
+	static C(Other: UObject | any): CurveEditorRetimeAnchor;
 }
 
-declare class VertexInstanceID extends ElementID { 
-	clone() : VertexInstanceID;
-	static C(Other: UObject | any): VertexInstanceID;
+declare class CurveEditorRetimeToolData extends UObject { 
+	RetimingAnchors: CurveEditorRetimeAnchor[];
+	static Load(ResourceName: string): CurveEditorRetimeToolData;
+	static Find(Outer: UObject, ResourceName: string): CurveEditorRetimeToolData;
+	static GetDefaultObject(): CurveEditorRetimeToolData;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CurveEditorRetimeToolData;
+	static C(Other: UObject | any): CurveEditorRetimeToolData;
 }
 
-declare class AttributesForVertexInstance { 
-	VertexInstanceID: VertexInstanceID;
-	VertexInstanceAttributes: MeshElementAttributeList;
-	clone() : AttributesForVertexInstance;
-	static C(Other: UObject | any): AttributesForVertexInstance;
+declare class NewPluginDescriptorData extends UObject { 
+	CreatedBy: string;
+	CreatedByURL: string;
+	Description: string;
+	bIsBetaVersion: boolean;
+	static Load(ResourceName: string): NewPluginDescriptorData;
+	static Find(Outer: UObject, ResourceName: string): NewPluginDescriptorData;
+	static GetDefaultObject(): NewPluginDescriptorData;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NewPluginDescriptorData;
+	static C(Other: UObject | any): NewPluginDescriptorData;
 }
 
-declare class VertexAttributesForPolygonHole { 
-	VertexAttributeList: MeshElementAttributeList[];
-	clone() : VertexAttributesForPolygonHole;
-	static C(Other: UObject | any): VertexAttributesForPolygonHole;
+declare class PluginMetadataObject extends UObject { 
+	Version: number;
+	VersionName: string;
+	FriendlyName: string;
+	Description: string;
+	Category: string;
+	CreatedBy: string;
+	CreatedByURL: string;
+	DocsURL: string;
+	MarketplaceURL: string;
+	SupportURL: string;
+	bCanContainContent: boolean;
+	bIsBetaVersion: boolean;
+	static Load(ResourceName: string): PluginMetadataObject;
+	static Find(Outer: UObject, ResourceName: string): PluginMetadataObject;
+	static GetDefaultObject(): PluginMetadataObject;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PluginMetadataObject;
+	static C(Other: UObject | any): PluginMetadataObject;
 }
 
-declare class VertexAttributesForPolygon { 
-	PolygonID: PolygonID;
-	PerimeterVertexAttributeLists: MeshElementAttributeList[];
-	VertexAttributeListsForEachHole: VertexAttributesForPolygonHole[];
-	clone() : VertexAttributesForPolygon;
-	static C(Other: UObject | any): VertexAttributesForPolygon;
+declare class SpeedTreeImportFactory extends Factory { 
+	static Load(ResourceName: string): SpeedTreeImportFactory;
+	static Find(Outer: UObject, ResourceName: string): SpeedTreeImportFactory;
+	static GetDefaultObject(): SpeedTreeImportFactory;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpeedTreeImportFactory;
+	static C(Other: UObject | any): SpeedTreeImportFactory;
 }
 
-declare class VerticesForEdge { 
-	EdgeID: EdgeID;
-	NewVertexID0: VertexID;
-	NewVertexID1: VertexID;
-	clone() : VerticesForEdge;
-	static C(Other: UObject | any): VerticesForEdge;
+declare class ReimportSpeedTreeFactory extends SpeedTreeImportFactory { 
+	static Load(ResourceName: string): ReimportSpeedTreeFactory;
+	static Find(Outer: UObject, ResourceName: string): ReimportSpeedTreeFactory;
+	static GetDefaultObject(): ReimportSpeedTreeFactory;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportSpeedTreeFactory;
+	static C(Other: UObject | any): ReimportSpeedTreeFactory;
 }
 
-declare class AttributesForEdge { 
-	EdgeID: EdgeID;
-	EdgeAttributes: MeshElementAttributeList;
-	clone() : AttributesForEdge;
-	static C(Other: UObject | any): AttributesForEdge;
+declare type EImportGeometryType = 'IGT_3D' | 'IGT_Billboards' | 'IGT_Both' | 'IGT_MAX';
+declare var EImportGeometryType : { IGT_3D:'IGT_3D',IGT_Billboards:'IGT_Billboards',IGT_Both:'IGT_Both',IGT_MAX:'IGT_MAX', };
+declare type EImportLODType = 'ILT_PaintedFoliage' | 'ILT_IndividualActors' | 'ILT_MAX';
+declare var EImportLODType : { ILT_PaintedFoliage:'ILT_PaintedFoliage',ILT_IndividualActors:'ILT_IndividualActors',ILT_MAX:'ILT_MAX', };
+declare class SpeedTreeImportData extends AssetImportData { 
+	TreeScale: number;
+	ImportGeometryType: EImportGeometryType;
+	LODType: EImportLODType;
+	IncludeCollision: boolean;
+	MakeMaterialsCheck: boolean;
+	IncludeNormalMapCheck: boolean;
+	IncludeDetailMapCheck: boolean;
+	IncludeSpecularMapCheck: boolean;
+	IncludeBranchSeamSmoothing: boolean;
+	IncludeSpeedTreeAO: boolean;
+	IncludeColorAdjustment: boolean;
+	IncludeSubsurface: boolean;
+	IncludeVertexProcessingCheck: boolean;
+	IncludeWindCheck: boolean;
+	IncludeSmoothLODCheck: boolean;
+	static Load(ResourceName: string): SpeedTreeImportData;
+	static Find(Outer: UObject, ResourceName: string): SpeedTreeImportData;
+	static GetDefaultObject(): SpeedTreeImportData;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpeedTreeImportData;
+	static C(Other: UObject | any): SpeedTreeImportData;
 }
 
-declare class VertexToMove { 
-	VertexID: VertexID;
-	NewVertexPosition: Vector;
-	clone() : VertexToMove;
-	static C(Other: UObject | any): VertexToMove;
+declare class DatasmithSceneNewFactory extends Factory { 
+	static Load(ResourceName: string): DatasmithSceneNewFactory;
+	static Find(Outer: UObject, ResourceName: string): DatasmithSceneNewFactory;
+	static GetDefaultObject(): DatasmithSceneNewFactory;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithSceneNewFactory;
+	static C(Other: UObject | any): DatasmithSceneNewFactory;
 }
 
-declare class PolygonGroupID extends ElementID { 
-	clone() : PolygonGroupID;
-	static C(Other: UObject | any): PolygonGroupID;
+declare class CapturedPropSegment { 
+	PropertyName: string;
+	PropertyIndex: number;
+	ComponentName: string;
+	clone() : CapturedPropSegment;
+	static C(Other: UObject | any): CapturedPropSegment;
 }
 
-declare type EInsetPolygonsMode = 'All' | 'CenterPolygonOnly' | 'SidePolygonsOnly' | 'EInsetPolygonsMode_MAX';
-declare var EInsetPolygonsMode : { All:'All',CenterPolygonOnly:'CenterPolygonOnly',SidePolygonsOnly:'SidePolygonsOnly',EInsetPolygonsMode_MAX:'EInsetPolygonsMode_MAX', };
-declare class VertexAndAttributes { 
-	VertexInstanceID: VertexInstanceID;
-	VertexID: VertexID;
-	PolygonVertexAttributes: MeshElementAttributeList;
-	clone() : VertexAndAttributes;
-	static C(Other: UObject | any): VertexAndAttributes;
+declare type EPropertyValueCategory = 'Undefined' | 'Generic' | 'RelativeLocation' | 'RelativeRotation' | 'RelativeScale3D' | 'bVisible' | 'Material' | 'Color' | 'EPropertyValueCategory_MAX';
+declare var EPropertyValueCategory : { Undefined:'Undefined',Generic:'Generic',RelativeLocation:'RelativeLocation',RelativeRotation:'RelativeRotation',RelativeScale3D:'RelativeScale3D',bVisible:'bVisible',Material:'Material',Color:'Color',EPropertyValueCategory_MAX:'EPropertyValueCategory_MAX', };
+declare class PropertyValue extends UObject { 
+	Properties: Property[];
+	PropertyIndices: number[];
+	CapturedPropSegments: CapturedPropSegment[];
+	FullDisplayString: string;
+	PropertySetterName: string;
+	PropertySetterParameterDefaults: any;
+	bHasRecordedData: boolean;
+	LeafPropertyClass: UnrealEngineClass;
+	ValueBytes: number[];
+	PropCategory: EPropertyValueCategory;
+	static Load(ResourceName: string): PropertyValue;
+	static Find(Outer: UObject, ResourceName: string): PropertyValue;
+	static GetDefaultObject(): PropertyValue;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyValue;
+	HasRecordedData(): boolean;
+	GetPropertyTooltip(): string;
+	GetFullDisplayString(): string;
+	static C(Other: UObject | any): PropertyValue;
 }
 
-declare class SubdividedQuadVertex { 
-	VertexPositionIndex: number;
-	TextureCoordinate0: Vector2D;
-	TextureCoordinate1: Vector2D;
-	VertexColor: Color;
-	VertexNormal: Vector;
-	VertexTangent: Vector;
-	VertexBinormalSign: number;
-	clone() : SubdividedQuadVertex;
-	static C(Other: UObject | any): SubdividedQuadVertex;
+declare class FunctionCaller { 
+	FunctionName: string;
+	FunctionEntry: any;
+	clone() : FunctionCaller;
+	static C(Other: UObject | any): FunctionCaller;
 }
 
-declare class SubdividedQuad { 
-	QuadVertex0: SubdividedQuadVertex;
-	QuadVertex1: SubdividedQuadVertex;
-	QuadVertex2: SubdividedQuadVertex;
-	QuadVertex3: SubdividedQuadVertex;
-	clone() : SubdividedQuad;
-	static C(Other: UObject | any): SubdividedQuad;
+declare class VariantObjectBinding extends UObject { 
+	ObjectPtr: SoftObjectPath;
+	LazyObjectPtr: any;
+	CapturedProperties: PropertyValue[];
+	FunctionCallers: FunctionCaller[];
+	static Load(ResourceName: string): VariantObjectBinding;
+	static Find(Outer: UObject, ResourceName: string): VariantObjectBinding;
+	static GetDefaultObject(): VariantObjectBinding;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VariantObjectBinding;
+	static C(Other: UObject | any): VariantObjectBinding;
 }
 
-declare class SubdivisionLimitSection { 
-	SubdividedQuads: SubdividedQuad[];
-	clone() : SubdivisionLimitSection;
-	static C(Other: UObject | any): SubdivisionLimitSection;
+declare class Variant extends UObject { 
+	DisplayText: string;
+	ObjectBindings: VariantObjectBinding[];
+	static Load(ResourceName: string): Variant;
+	static Find(Outer: UObject, ResourceName: string): Variant;
+	static GetDefaultObject(): Variant;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Variant;
+	SwitchOn(): void;
+	SetDisplayText(NewDisplayText: string): void;
+	GetNumActors(): number;
+	GetDisplayText(): string;
+	GetActor(ActorIndex: number): Actor;
+	static C(Other: UObject | any): Variant;
 }
 
-declare class SubdividedWireEdge { 
-	EdgeVertex0PositionIndex: number;
-	EdgeVertex1PositionIndex: number;
-	clone() : SubdividedWireEdge;
-	static C(Other: UObject | any): SubdividedWireEdge;
+declare class VariantSet extends UObject { 
+	DisplayText: string;
+	bExpanded: boolean;
+	Variants: Variant[];
+	static Load(ResourceName: string): VariantSet;
+	static Find(Outer: UObject, ResourceName: string): VariantSet;
+	static GetDefaultObject(): VariantSet;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VariantSet;
+	SetDisplayText(NewDisplayText: string): void;
+	GetVariantByName(VariantName: string): Variant;
+	GetVariant(VariantIndex: number): Variant;
+	GetNumVariants(): number;
+	GetDisplayText(): string;
+	static C(Other: UObject | any): VariantSet;
 }
 
-declare class SubdivisionLimitData { 
-	VertexPositions: Vector[];
-	Sections: SubdivisionLimitSection[];
-	SubdividedWireEdges: SubdividedWireEdge[];
-	clone() : SubdivisionLimitData;
-	static C(Other: UObject | any): SubdivisionLimitData;
+declare class LevelVariantSets extends UObject { 
+	DirectorBlueprint: UObject;
+	DirectorClass: UnrealEngineClass;
+	VariantSets: VariantSet[];
+	static Load(ResourceName: string): LevelVariantSets;
+	static Find(Outer: UObject, ResourceName: string): LevelVariantSets;
+	static GetDefaultObject(): LevelVariantSets;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelVariantSets;
+	GetVariantSetByName(VariantSetName: string): VariantSet;
+	GetVariantSet(VariantSetIndex: number): VariantSet;
+	GetNumVariantSets(): number;
+	static C(Other: UObject | any): LevelVariantSets;
 }
 
-declare class MeshTriangle { 
-	VertexInstanceID0: VertexInstanceID;
-	VertexInstanceID1: VertexInstanceID;
-	VertexInstanceID2: VertexInstanceID;
-	clone() : MeshTriangle;
-	static C(Other: UObject | any): MeshTriangle;
+declare class LevelVariantSetsActor extends Actor { 
+	LevelVariantSets: SoftObjectPath;
+	static GetDefaultObject(): LevelVariantSetsActor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelVariantSetsActor;
+	SwitchOnVariantByName(VariantSetName: string,VariantName: string): boolean;
+	SwitchOnVariantByIndex(VariantSetIndex: number,VariantIndex: number): boolean;
+	SetLevelVariantSets(InVariantSets: LevelVariantSets): void;
+	GetLevelVariantSets(bLoad: boolean): LevelVariantSets;
+	static C(Other: UObject | any): LevelVariantSetsActor;
 }
 
-declare class VertexToCreate { 
-	VertexAttributes: MeshElementAttributeList;
-	OriginalVertexID: VertexID;
-	clone() : VertexToCreate;
-	static C(Other: UObject | any): VertexToCreate;
+declare class LevelVariantSetsFunctionDirector extends UObject { 
+	static Load(ResourceName: string): LevelVariantSetsFunctionDirector;
+	static Find(Outer: UObject, ResourceName: string): LevelVariantSetsFunctionDirector;
+	static GetDefaultObject(): LevelVariantSetsFunctionDirector;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelVariantSetsFunctionDirector;
+	static C(Other: UObject | any): LevelVariantSetsFunctionDirector;
 }
 
-declare class VertexInstanceToCreate { 
-	VertexID: VertexID;
-	VertexInstanceAttributes: MeshElementAttributeList;
-	OriginalVertexInstanceID: VertexInstanceID;
-	clone() : VertexInstanceToCreate;
-	static C(Other: UObject | any): VertexInstanceToCreate;
+declare class PropertyValueTransform extends PropertyValue { 
+	static Load(ResourceName: string): PropertyValueTransform;
+	static Find(Outer: UObject, ResourceName: string): PropertyValueTransform;
+	static GetDefaultObject(): PropertyValueTransform;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyValueTransform;
+	static C(Other: UObject | any): PropertyValueTransform;
 }
 
-declare class PolygonHoleVertices { 
-	HoleVertices: VertexAndAttributes[];
-	clone() : PolygonHoleVertices;
-	static C(Other: UObject | any): PolygonHoleVertices;
+declare class PropertyValueVisibility extends PropertyValue { 
+	static Load(ResourceName: string): PropertyValueVisibility;
+	static Find(Outer: UObject, ResourceName: string): PropertyValueVisibility;
+	static GetDefaultObject(): PropertyValueVisibility;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyValueVisibility;
+	static C(Other: UObject | any): PropertyValueVisibility;
 }
 
-declare type EPolygonEdgeHardness = 'NewEdgesSoft' | 'NewEdgesHard' | 'AllEdgesSoft' | 'AllEdgesHard' | 'EPolygonEdgeHardness_MAX';
-declare var EPolygonEdgeHardness : { NewEdgesSoft:'NewEdgesSoft',NewEdgesHard:'NewEdgesHard',AllEdgesSoft:'AllEdgesSoft',AllEdgesHard:'AllEdgesHard',EPolygonEdgeHardness_MAX:'EPolygonEdgeHardness_MAX', };
-declare class PolygonToCreate { 
-	PolygonGroupID: PolygonGroupID;
-	PerimeterVertices: VertexAndAttributes[];
-	PolygonHoles: PolygonHoleVertices[];
-	OriginalPolygonID: PolygonID;
-	PolygonEdgeHardness: EPolygonEdgeHardness;
-	clone() : PolygonToCreate;
-	static C(Other: UObject | any): PolygonToCreate;
+declare class PropertyValueColor extends PropertyValue { 
+	static Load(ResourceName: string): PropertyValueColor;
+	static Find(Outer: UObject, ResourceName: string): PropertyValueColor;
+	static GetDefaultObject(): PropertyValueColor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyValueColor;
+	static C(Other: UObject | any): PropertyValueColor;
 }
 
-declare class PolygonGroupToCreate { 
-	PolygonGroupAttributes: MeshElementAttributeList;
-	OriginalPolygonGroupID: PolygonGroupID;
-	clone() : PolygonGroupToCreate;
-	static C(Other: UObject | any): PolygonGroupToCreate;
+declare class PropertyValueMaterial extends PropertyValue { 
+	static Load(ResourceName: string): PropertyValueMaterial;
+	static Find(Outer: UObject, ResourceName: string): PropertyValueMaterial;
+	static GetDefaultObject(): PropertyValueMaterial;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyValueMaterial;
+	static C(Other: UObject | any): PropertyValueMaterial;
 }
 
-declare class EdgeToCreate { 
-	VertexID0: VertexID;
-	VertexID1: VertexID;
-	ConnectedPolygons: PolygonID[];
-	EdgeAttributes: MeshElementAttributeList;
-	OriginalEdgeID: EdgeID;
-	clone() : EdgeToCreate;
-	static C(Other: UObject | any): EdgeToCreate;
+declare class GeometryCacheTrack extends UObject { 
+	Duration: number;
+	static Load(ResourceName: string): GeometryCacheTrack;
+	static Find(Outer: UObject, ResourceName: string): GeometryCacheTrack;
+	static GetDefaultObject(): GeometryCacheTrack;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheTrack;
+	static C(Other: UObject | any): GeometryCacheTrack;
 }
 
-declare class VertexIndexAndInstanceID { 
-	ContourIndex: number;
-	VertexInstanceID: VertexInstanceID;
-	clone() : VertexIndexAndInstanceID;
-	static C(Other: UObject | any): VertexIndexAndInstanceID;
+declare class GeometryCache extends UObject { 
+	AssetImportData: AssetImportData;
+	ThumbnailInfo: ThumbnailInfo;
+	Materials: MaterialInterface[];
+	Tracks: GeometryCacheTrack[];
+	StartFrame: number;
+	EndFrame: number;
+	static Load(ResourceName: string): GeometryCache;
+	static Find(Outer: UObject, ResourceName: string): GeometryCache;
+	static GetDefaultObject(): GeometryCache;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCache;
+	static C(Other: UObject | any): GeometryCache;
 }
 
-declare class VertexInstancesForPolygonHole { 
-	VertexIndicesAndInstanceIDs: VertexIndexAndInstanceID[];
-	clone() : VertexInstancesForPolygonHole;
-	static C(Other: UObject | any): VertexInstancesForPolygonHole;
+declare class GeometryCacheComponent extends MeshComponent { 
+	GeometryCache: GeometryCache;
+	bRunning: boolean;
+	bLooping: boolean;
+	StartTimeOffset: number;
+	PlaybackSpeed: number;
+	NumTracks: number;
+	ElapsedTime: number;
+	Duration: number;
+	bManualTick: boolean;
+	static Load(ResourceName: string): GeometryCacheComponent;
+	static Find(Outer: UObject, ResourceName: string): GeometryCacheComponent;
+	static GetDefaultObject(): GeometryCacheComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheComponent;
+	TickAtThisTime(Time: number,bInIsRunning: boolean,bInBackwards: boolean,bInIsLooping: boolean): void;
+	Stop(): void;
+	SetStartTimeOffset(NewStartTimeOffset: number): void;
+	SetPlaybackSpeed(NewPlaybackSpeed: number): void;
+	SetLooping(bNewLooping: boolean): void;
+	SetGeometryCache(NewGeomCache: GeometryCache): boolean;
+	PlayReversedFromEnd(): void;
+	PlayReversed(): void;
+	PlayFromStart(): void;
+	Play(): void;
+	Pause(): void;
+	IsPlayingReversed(): boolean;
+	IsPlaying(): boolean;
+	IsLooping(): boolean;
+	GetStartTimeOffset(): number;
+	GetPlaybackSpeed(): number;
+	GetPlaybackDirection(): number;
+	GetNumberOfFrames(): number;
+	GetDuration(): number;
+	GetAnimationTime(): number;
+	static C(Other: UObject | any): GeometryCacheComponent;
 }
 
-declare class ChangeVertexInstancesForPolygon { 
-	PolygonID: PolygonID;
-	PerimeterVertexIndicesAndInstanceIDs: VertexIndexAndInstanceID[];
-	VertexIndicesAndInstanceIDsForEachHole: VertexInstancesForPolygonHole[];
-	clone() : ChangeVertexInstancesForPolygon;
-	static C(Other: UObject | any): ChangeVertexInstancesForPolygon;
+declare class GeometryCacheActor extends Actor { 
+	GeometryCacheComponent: GeometryCacheComponent;
+	static GetDefaultObject(): GeometryCacheActor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheActor;
+	GetGeometryCacheComponent(): GeometryCacheComponent;
+	static C(Other: UObject | any): GeometryCacheActor;
 }
 
-declare class PolygonGroupForPolygon { 
-	PolygonID: PolygonID;
-	PolygonGroupID: PolygonGroupID;
-	clone() : PolygonGroupForPolygon;
-	static C(Other: UObject | any): PolygonGroupForPolygon;
+declare class GeometryCacheCodecBase extends UObject { 
+	TopologyRanges: number[];
+	static Load(ResourceName: string): GeometryCacheCodecBase;
+	static Find(Outer: UObject, ResourceName: string): GeometryCacheCodecBase;
+	static GetDefaultObject(): GeometryCacheCodecBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheCodecBase;
+	static C(Other: UObject | any): GeometryCacheCodecBase;
 }
 
-declare class EditableMesh extends UObject { 
-	Adapters: EditableMeshAdapter[];
-	TextureCoordinateCount: number;
-	PendingCompactCounter: number;
-	SubdivisionCount: number;
-	static Load(ResourceName: string): EditableMesh;
-	static Find(Outer: UObject, ResourceName: string): EditableMesh;
-	static GetDefaultObject(): EditableMesh;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableMesh;
-	WeldVertices(VertexIDs: VertexID[],OutNewVertexID?: VertexID): {OutNewVertexID: VertexID};
-	TryToRemoveVertex(VertexID: VertexID,bOutWasVertexRemoved?: boolean,OutNewEdgeID?: EdgeID): {bOutWasVertexRemoved: boolean, OutNewEdgeID: EdgeID};
-	TryToRemovePolygonEdge(EdgeID: EdgeID,bOutWasEdgeRemoved?: boolean,OutNewPolygonID?: PolygonID): {bOutWasEdgeRemoved: boolean, OutNewPolygonID: PolygonID};
-	TriangulatePolygons(PolygonIDs: PolygonID[],OutNewTrianglePolygons?: PolygonID[]): {OutNewTrianglePolygons: PolygonID[]};
-	TessellatePolygons(PolygonIDs: PolygonID[],TriangleTessellationMode: ETriangleTessellationMode,OutNewPolygonIDs?: PolygonID[]): {OutNewPolygonIDs: PolygonID[]};
-	StartModification(MeshModificationType: EMeshModificationType,MeshTopologyChange: EMeshTopologyChange): void;
-	SplitPolygons(PolygonsToSplit: PolygonToSplit[],OutNewEdgeIDs?: EdgeID[]): {OutNewEdgeIDs: EdgeID[]};
-	SplitEdge(EdgeID: EdgeID,Splits: number[],OutNewVertexIDs?: VertexID[]): {OutNewVertexIDs: VertexID[]};
-	SetVerticesCornerSharpness(VertexIDs: VertexID[],VerticesNewCornerSharpness: number[]): void;
-	SetVerticesAttributes(AttributesForVertices: AttributesForVertex[]): void;
-	SetVertexInstancesAttributes(AttributesForVertexInstances: AttributesForVertexInstance[]): void;
-	SetTextureCoordinateCount(NumTexCoords: number): void;
-	SetSubdivisionCount(NewSubdivisionCount: number): void;
-	SetPolygonsVertexAttributes(VertexAttributesForPolygons: VertexAttributesForPolygon[]): void;
-	SetEdgesVertices(VerticesForEdges: VerticesForEdge[]): void;
-	SetEdgesHardnessAutomatically(EdgeIDs: EdgeID[],MaxDotProductForSoftEdge: number): void;
-	SetEdgesHardness(EdgeIDs: EdgeID[],EdgesNewIsHard: boolean[]): void;
-	SetEdgesCreaseSharpness(EdgeIDs: EdgeID[],EdgesNewCreaseSharpness: number[]): void;
-	SetEdgesAttributes(AttributesForEdges: AttributesForEdge[]): void;
-	SetAllowUndo(bInAllowUndo: boolean): void;
-	SetAllowSpatialDatabase(bInAllowSpatialDatabase: boolean): void;
-	SetAllowCompact(bInAllowCompact: boolean): void;
-	SearchSpatialDatabaseForPolygonsPotentiallyIntersectingLineSegment(LineSegmentStart: Vector,LineSegmentEnd: Vector,OutPolygons?: PolygonID[]): {OutPolygons: PolygonID[]};
-	SearchSpatialDatabaseForPolygonsInVolume(planes: Plane[],OutPolygons?: PolygonID[]): {OutPolygons: PolygonID[]};
-	RevertInstance(): EditableMesh;
-	Revert(): void;
-	RemovePolygonPerimeterVertices(PolygonID: PolygonID,FirstVertexNumberToRemove: number,NumVerticesToRemove: number,bDeleteOrphanedVertexInstances: boolean): void;
-	RebuildRenderMesh(): void;
-	QuadrangulateMesh(OutNewPolygonIDs?: PolygonID[]): {OutNewPolygonIDs: PolygonID[]};
-	PropagateInstanceChanges(): void;
-	MoveVertices(VerticesToMove: VertexToMove[]): void;
-	static MakeVertexID(VertexIndex: number): VertexID;
-	static MakePolygonID(PolygonIndex: number): PolygonID;
-	static MakePolygonGroupID(PolygonGroupIndex: number): PolygonGroupID;
-	static MakeEdgeID(EdgeIndex: number): EdgeID;
-	IsValidVertex(VertexID: VertexID): boolean;
-	IsValidPolygonGroup(PolygonGroupID: PolygonGroupID): boolean;
-	IsValidPolygon(PolygonID: PolygonID): boolean;
-	IsValidEdge(EdgeID: EdgeID): boolean;
-	IsUndoAllowed(): boolean;
-	IsSpatialDatabaseAllowed(): boolean;
-	IsPreviewingSubdivisions(): boolean;
-	IsOrphanedVertex(VertexID: VertexID): boolean;
-	IsCompactAllowed(): boolean;
-	IsCommittedAsInstance(): boolean;
-	IsCommitted(): boolean;
-	IsBeingModified(): boolean;
-	static InvalidVertexID(): VertexID;
-	static InvalidPolygonID(): PolygonID;
-	static InvalidPolygonGroupID(): PolygonGroupID;
-	static InvalidEdgeID(): EdgeID;
-	InsetPolygons(PolygonIDs: PolygonID[],InsetFixedDistance: number,InsetProgressTowardCenter: number,Mode: EInsetPolygonsMode,OutNewCenterPolygonIDs?: PolygonID[],OutNewSidePolygonIDs?: PolygonID[]): {OutNewCenterPolygonIDs: PolygonID[], OutNewSidePolygonIDs: PolygonID[]};
-	InsertPolygonPerimeterVertices(PolygonID: PolygonID,InsertBeforeVertexNumber: number,VerticesToInsert: VertexAndAttributes[]): void;
-	InsertEdgeLoop(EdgeID: EdgeID,Splits: number[],OutNewEdgeIDs?: EdgeID[]): {OutNewEdgeIDs: EdgeID[]};
-	InitializeAdapters(): void;
-	GetVertexPairEdge(VertexID: VertexID,NextVertexID: VertexID,bOutEdgeWindingIsReversed?: boolean): {bOutEdgeWindingIsReversed: boolean, $: EdgeID};
-	GetVertexInstanceVertex(VertexInstanceID: VertexInstanceID): VertexID;
-	GetVertexInstanceCount(): number;
-	GetVertexInstanceConnectedPolygons(VertexInstanceID: VertexInstanceID,OutConnectedPolygonIDs?: PolygonID[]): {OutConnectedPolygonIDs: PolygonID[]};
-	GetVertexInstanceConnectedPolygonCount(VertexInstanceID: VertexInstanceID): number;
-	GetVertexInstanceConnectedPolygon(VertexInstanceID: VertexInstanceID,ConnectedPolygonNumber: number): PolygonID;
-	GetVertexCount(): number;
-	GetVertexConnectedPolygons(VertexID: VertexID,OutConnectedPolygonIDs?: PolygonID[]): {OutConnectedPolygonIDs: PolygonID[]};
-	GetVertexConnectedEdges(VertexID: VertexID,OutConnectedEdgeIDs?: EdgeID[]): {OutConnectedEdgeIDs: EdgeID[]};
-	GetVertexConnectedEdgeCount(VertexID: VertexID): number;
-	GetVertexConnectedEdge(VertexID: VertexID,ConnectedEdgeNumber: number): EdgeID;
-	GetVertexAdjacentVertices(VertexID: VertexID,OutAdjacentVertexIDs?: VertexID[]): {OutAdjacentVertexIDs: VertexID[]};
-	GetTextureCoordinateCount(): number;
-	GetSubdivisionLimitData(): SubdivisionLimitData;
-	GetSubdivisionCount(): number;
-	GetPolygonTriangulatedTriangleCount(PolygonID: PolygonID): number;
-	GetPolygonTriangulatedTriangle(PolygonID: PolygonID,PolygonTriangleNumber: number): MeshTriangle;
-	GetPolygonPerimeterVertices(PolygonID: PolygonID,OutPolygonPerimeterVertexIDs?: VertexID[]): {OutPolygonPerimeterVertexIDs: VertexID[]};
-	GetPolygonPerimeterVertexInstances(PolygonID: PolygonID,OutPolygonPerimeterVertexInstanceIDs?: VertexInstanceID[]): {OutPolygonPerimeterVertexInstanceIDs: VertexInstanceID[]};
-	GetPolygonPerimeterVertexInstance(PolygonID: PolygonID,PolygonVertexNumber: number): VertexInstanceID;
-	GetPolygonPerimeterVertexCount(PolygonID: PolygonID): number;
-	GetPolygonPerimeterVertex(PolygonID: PolygonID,PolygonVertexNumber: number): VertexID;
-	GetPolygonPerimeterEdges(PolygonID: PolygonID,OutPolygonPerimeterEdgeIDs?: EdgeID[]): {OutPolygonPerimeterEdgeIDs: EdgeID[]};
-	GetPolygonPerimeterEdgeCount(PolygonID: PolygonID): number;
-	GetPolygonPerimeterEdge(PolygonID: PolygonID,PerimeterEdgeNumber: number,bOutEdgeWindingIsReversedForPolygon?: boolean): {bOutEdgeWindingIsReversedForPolygon: boolean, $: EdgeID};
-	GetPolygonInGroup(PolygonGroupID: PolygonGroupID,PolygonNumber: number): PolygonID;
-	GetPolygonHoleVertices(PolygonID: PolygonID,HoleNumber: number,OutHoleVertexIDs?: VertexID[]): {OutHoleVertexIDs: VertexID[]};
-	GetPolygonHoleVertexInstances(PolygonID: PolygonID,HoleNumber: number,OutHoleVertexInstanceIDs?: VertexInstanceID[]): {OutHoleVertexInstanceIDs: VertexInstanceID[]};
-	GetPolygonHoleVertexInstance(PolygonID: PolygonID,HoleNumber: number,PolygonVertexNumber: number): VertexInstanceID;
-	GetPolygonHoleVertexCount(PolygonID: PolygonID,HoleNumber: number): number;
-	GetPolygonHoleVertex(PolygonID: PolygonID,HoleNumber: number,PolygonVertexNumber: number): VertexID;
-	GetPolygonHoleEdges(PolygonID: PolygonID,HoleNumber: number,OutHoleEdgeIDs?: EdgeID[]): {OutHoleEdgeIDs: EdgeID[]};
-	GetPolygonHoleEdgeCount(PolygonID: PolygonID,HoleNumber: number): number;
-	GetPolygonHoleEdge(PolygonID: PolygonID,HoleNumber: number,HoleEdgeNumber: number): EdgeID;
-	GetPolygonHoleCount(PolygonID: PolygonID): number;
-	GetPolygonGroupCount(): number;
-	GetPolygonCountInGroup(PolygonGroupID: PolygonGroupID): number;
-	GetPolygonCount(): number;
-	GetPolygonAdjacentPolygons(PolygonID: PolygonID,OutAdjacentPolygons?: PolygonID[]): {OutAdjacentPolygons: PolygonID[]};
-	GetGroupForPolygon(PolygonID: PolygonID): PolygonGroupID;
-	GetFirstValidPolygonGroup(): PolygonGroupID;
-	GetEdgeVertices(EdgeID: EdgeID,OutEdgeVertexID0?: VertexID,OutEdgeVertexID1?: VertexID): {OutEdgeVertexID0: VertexID, OutEdgeVertexID1: VertexID};
-	GetEdgeVertex(EdgeID: EdgeID,EdgeVertexNumber: number): VertexID;
-	GetEdgeThatConnectsVertices(VertexID0: VertexID,VertexID1: VertexID): EdgeID;
-	GetEdgeLoopElements(EdgeID: EdgeID,EdgeLoopIDs?: EdgeID[]): {EdgeLoopIDs: EdgeID[]};
-	GetEdgeCount(): number;
-	GetEdgeConnectedPolygons(EdgeID: EdgeID,OutConnectedPolygonIDs?: PolygonID[]): {OutConnectedPolygonIDs: PolygonID[]};
-	GetEdgeConnectedPolygonCount(EdgeID: EdgeID): number;
-	GetEdgeConnectedPolygon(EdgeID: EdgeID,ConnectedPolygonNumber: number): PolygonID;
-	GeneratePolygonTangentsAndNormals(PolygonIDs: PolygonID[]): void;
-	FlipPolygons(PolygonIDs: PolygonID[]): void;
-	FindPolygonPerimeterVertexNumberForVertex(PolygonID: PolygonID,VertexID: VertexID): number;
-	FindPolygonPerimeterEdgeNumberForVertices(PolygonID: PolygonID,EdgeVertexID0: VertexID,EdgeVertexID1: VertexID): number;
-	FindPolygonLoop(EdgeID: EdgeID,OutEdgeLoopEdgeIDs?: EdgeID[],OutFlippedEdgeIDs?: EdgeID[],OutReversedEdgeIDPathToTake?: EdgeID[],OutPolygonIDsToSplit?: PolygonID[]): {OutEdgeLoopEdgeIDs: EdgeID[], OutFlippedEdgeIDs: EdgeID[], OutReversedEdgeIDPathToTake: EdgeID[], OutPolygonIDsToSplit: PolygonID[]};
-	FindPolygonHoleVertexNumberForVertex(PolygonID: PolygonID,HoleNumber: number,VertexID: VertexID): number;
-	FindPolygonHoleEdgeNumberForVertices(PolygonID: PolygonID,HoleNumber: number,EdgeVertexID0: VertexID,EdgeVertexID1: VertexID): number;
-	ExtrudePolygons(Polygons: PolygonID[],ExtrudeDistance: number,bKeepNeighborsTogether: boolean,OutNewExtrudedFrontPolygons?: PolygonID[]): {OutNewExtrudedFrontPolygons: PolygonID[]};
-	ExtendVertices(VertexIDs: VertexID[],bOnlyExtendClosestEdge: boolean,ReferencePosition: Vector,OutNewExtendedVertexIDs?: VertexID[]): {OutNewExtendedVertexIDs: VertexID[]};
-	ExtendEdges(EdgeIDs: EdgeID[],bWeldNeighbors: boolean,OutNewExtendedEdgeIDs?: EdgeID[]): {OutNewExtendedEdgeIDs: EdgeID[]};
-	EndModification(bFromUndo: boolean): void;
-	DeleteVertexInstances(VertexInstanceIDsToDelete: VertexInstanceID[],bDeleteOrphanedVertices: boolean): void;
-	DeleteVertexAndConnectedEdgesAndPolygons(VertexID: VertexID,bDeleteOrphanedEdges: boolean,bDeleteOrphanedVertices: boolean,bDeleteOrphanedVertexInstances: boolean,bDeleteEmptyPolygonGroups: boolean): void;
-	DeletePolygons(PolygonIDsToDelete: PolygonID[],bDeleteOrphanedEdges: boolean,bDeleteOrphanedVertices: boolean,bDeleteOrphanedVertexInstances: boolean,bDeleteEmptyPolygonGroups: boolean): void;
-	DeletePolygonGroups(PolygonGroupIDs: PolygonGroupID[]): void;
-	DeleteOrphanVertices(VertexIDsToDelete: VertexID[]): void;
-	DeleteEdges(EdgeIDsToDelete: EdgeID[],bDeleteOrphanedVertices: boolean): void;
-	DeleteEdgeAndConnectedPolygons(EdgeID: EdgeID,bDeleteOrphanedEdges: boolean,bDeleteOrphanedVertices: boolean,bDeleteOrphanedVertexInstances: boolean,bDeleteEmptyPolygonGroups: boolean): void;
-	CreateVertices(VerticesToCreate: VertexToCreate[],OutNewVertexIDs?: VertexID[]): {OutNewVertexIDs: VertexID[]};
-	CreateVertexInstances(VertexInstancesToCreate: VertexInstanceToCreate[],OutNewVertexInstanceIDs?: VertexInstanceID[]): {OutNewVertexInstanceIDs: VertexInstanceID[]};
-	CreatePolygons(PolygonsToCreate: PolygonToCreate[],OutNewPolygonIDs?: PolygonID[],OutNewEdgeIDs?: EdgeID[]): {OutNewPolygonIDs: PolygonID[], OutNewEdgeIDs: EdgeID[]};
-	CreatePolygonGroups(PolygonGroupsToCreate: PolygonGroupToCreate[],OutNewPolygonGroupIDs?: PolygonGroupID[]): {OutNewPolygonGroupIDs: PolygonGroupID[]};
-	CreateMissingPolygonPerimeterEdges(PolygonID: PolygonID,OutNewEdgeIDs?: EdgeID[]): {OutNewEdgeIDs: EdgeID[]};
-	CreateMissingPolygonHoleEdges(PolygonID: PolygonID,HoleNumber: number,OutNewEdgeIDs?: EdgeID[]): {OutNewEdgeIDs: EdgeID[]};
-	CreateEmptyVertexRange(NumVerticesToCreate: number,OutNewVertexIDs?: VertexID[]): {OutNewVertexIDs: VertexID[]};
-	CreateEdges(EdgesToCreate: EdgeToCreate[],OutNewEdgeIDs?: EdgeID[]): {OutNewEdgeIDs: EdgeID[]};
-	ComputePolygonTriangulation(PolygonID: PolygonID,OutTriangles?: MeshTriangle[]): {OutTriangles: MeshTriangle[]};
-	ComputePolygonsSharedEdges(PolygonIDs: PolygonID[],OutSharedEdgeIDs?: EdgeID[]): {OutSharedEdgeIDs: EdgeID[]};
-	ComputePolygonPlane(PolygonID: PolygonID): Plane;
-	ComputePolygonNormal(PolygonID: PolygonID): Vector;
-	ComputePolygonCenter(PolygonID: PolygonID): Vector;
-	ComputeBoundingBoxAndSphere(): BoxSphereBounds;
-	ComputeBoundingBox(): Box;
-	ComputeBarycentricWeightForPointOnPolygon(PolygonID: PolygonID,PointOnPolygon: Vector,OutTriangle?: MeshTriangle,OutTriangleVertexWeights?: Vector): {OutTriangle: MeshTriangle, OutTriangleVertexWeights: Vector, $: boolean};
-	CommitInstance(ComponentToInstanceTo: PrimitiveComponent): EditableMesh;
-	Commit(): void;
-	ChangePolygonsVertexInstances(VertexInstancesForPolygons: ChangeVertexInstancesForPolygon[]): void;
-	BevelPolygons(PolygonIDs: PolygonID[],BevelFixedDistance: number,BevelProgressTowardCenter: number,OutNewCenterPolygonIDs?: PolygonID[],OutNewSidePolygonIDs?: PolygonID[]): {OutNewCenterPolygonIDs: PolygonID[], OutNewSidePolygonIDs: PolygonID[]};
-	AssignPolygonsToPolygonGroups(PolygonGroupForPolygons: PolygonGroupForPolygon[],bDeleteOrphanedPolygonGroups: boolean): void;
-	AnyChangesToUndo(): boolean;
-	static C(Other: UObject | any): EditableMesh;
+declare class GeometryCacheCodecRaw extends GeometryCacheCodecBase { 
+	DummyProperty: number;
+	static Load(ResourceName: string): GeometryCacheCodecRaw;
+	static Find(Outer: UObject, ResourceName: string): GeometryCacheCodecRaw;
+	static GetDefaultObject(): GeometryCacheCodecRaw;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheCodecRaw;
+	static C(Other: UObject | any): GeometryCacheCodecRaw;
 }
 
-declare class EditableMeshFactory extends UObject { 
-	static Load(ResourceName: string): EditableMeshFactory;
-	static Find(Outer: UObject, ResourceName: string): EditableMeshFactory;
-	static GetDefaultObject(): EditableMeshFactory;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableMeshFactory;
-	static MakeEditableMesh(PrimitiveComponent: PrimitiveComponent,LODIndex: number): EditableMesh;
-	static C(Other: UObject | any): EditableMeshFactory;
+declare class GeometryCacheCodecV1 extends GeometryCacheCodecBase { 
+	static Load(ResourceName: string): GeometryCacheCodecV1;
+	static Find(Outer: UObject, ResourceName: string): GeometryCacheCodecV1;
+	static GetDefaultObject(): GeometryCacheCodecV1;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheCodecV1;
+	static C(Other: UObject | any): GeometryCacheCodecV1;
 }
 
-declare class EditableStaticMeshAdapter extends EditableMeshAdapter { 
-	StaticMesh: StaticMesh;
-	OriginalStaticMesh: StaticMesh;
-	StaticMeshLODIndex: number;
-	static Load(ResourceName: string): EditableStaticMeshAdapter;
-	static Find(Outer: UObject, ResourceName: string): EditableStaticMeshAdapter;
-	static GetDefaultObject(): EditableStaticMeshAdapter;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableStaticMeshAdapter;
-	static C(Other: UObject | any): EditableStaticMeshAdapter;
+declare class GeometryCacheMeshData { 
+	clone() : GeometryCacheMeshData;
+	static C(Other: UObject | any): GeometryCacheMeshData;
 }
 
-declare class MeshEditorAssetContainer extends DataAsset { 
-	HoveredGeometryMaterial: MaterialInterface;
-	HoveredFaceMaterial: MaterialInterface;
-	WireMaterial: MaterialInterface;
-	SubdividedMeshWireMaterial: MaterialInterface;
-	OverlayLineMaterial: MaterialInterface;
-	OverlayPointMaterial: MaterialInterface;
-	DefaultSound: SoundBase;
-	static Load(ResourceName: string): MeshEditorAssetContainer;
-	static Find(Outer: UObject, ResourceName: string): MeshEditorAssetContainer;
-	static GetDefaultObject(): MeshEditorAssetContainer;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshEditorAssetContainer;
-	static C(Other: UObject | any): MeshEditorAssetContainer;
-}
-
-declare class MeshEditorCommand extends UObject { 
-	static Load(ResourceName: string): MeshEditorCommand;
-	static Find(Outer: UObject, ResourceName: string): MeshEditorCommand;
-	static GetDefaultObject(): MeshEditorCommand;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshEditorCommand;
-	static C(Other: UObject | any): MeshEditorCommand;
-}
-
-declare class MeshEditorInstantCommand extends MeshEditorCommand { 
-	static Load(ResourceName: string): MeshEditorInstantCommand;
-	static Find(Outer: UObject, ResourceName: string): MeshEditorInstantCommand;
-	static GetDefaultObject(): MeshEditorInstantCommand;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshEditorInstantCommand;
-	static C(Other: UObject | any): MeshEditorInstantCommand;
-}
-
-declare class MeshEditorEditCommand extends MeshEditorCommand { 
-	UndoText: string;
-	bNeedsDraggingInitiated: boolean;
-	bNeedsHoverLocation: boolean;
-	static Load(ResourceName: string): MeshEditorEditCommand;
-	static Find(Outer: UObject, ResourceName: string): MeshEditorEditCommand;
-	static GetDefaultObject(): MeshEditorEditCommand;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshEditorEditCommand;
-	static C(Other: UObject | any): MeshEditorEditCommand;
-}
-
-declare class MeshEditorCommandList extends UObject { 
-	MeshEditorCommands: MeshEditorCommand[];
-	static Load(ResourceName: string): MeshEditorCommandList;
-	static Find(Outer: UObject, ResourceName: string): MeshEditorCommandList;
-	static GetDefaultObject(): MeshEditorCommandList;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshEditorCommandList;
-	static C(Other: UObject | any): MeshEditorCommandList;
-}
-
-declare class MeshEditorModeProxyObject extends UObject { 
-	static Load(ResourceName: string): MeshEditorModeProxyObject;
-	static Find(Outer: UObject, ResourceName: string): MeshEditorModeProxyObject;
-	static GetDefaultObject(): MeshEditorModeProxyObject;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshEditorModeProxyObject;
-	static C(Other: UObject | any): MeshEditorModeProxyObject;
-}
-
-declare class MeshEditorSelectionModifier extends UObject { 
-	static Load(ResourceName: string): MeshEditorSelectionModifier;
-	static Find(Outer: UObject, ResourceName: string): MeshEditorSelectionModifier;
-	static GetDefaultObject(): MeshEditorSelectionModifier;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshEditorSelectionModifier;
-	static C(Other: UObject | any): MeshEditorSelectionModifier;
-}
-
-declare class SelectSingleMeshElement extends MeshEditorSelectionModifier { 
-	static Load(ResourceName: string): SelectSingleMeshElement;
-	static Find(Outer: UObject, ResourceName: string): SelectSingleMeshElement;
-	static GetDefaultObject(): SelectSingleMeshElement;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SelectSingleMeshElement;
-	static C(Other: UObject | any): SelectSingleMeshElement;
-}
-
-declare class SelectPolygonsByGroup extends MeshEditorSelectionModifier { 
-	static Load(ResourceName: string): SelectPolygonsByGroup;
-	static Find(Outer: UObject, ResourceName: string): SelectPolygonsByGroup;
-	static GetDefaultObject(): SelectPolygonsByGroup;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SelectPolygonsByGroup;
-	static C(Other: UObject | any): SelectPolygonsByGroup;
-}
-
-declare class SelectPolygonsByConnectivity extends MeshEditorSelectionModifier { 
-	static Load(ResourceName: string): SelectPolygonsByConnectivity;
-	static Find(Outer: UObject, ResourceName: string): SelectPolygonsByConnectivity;
-	static GetDefaultObject(): SelectPolygonsByConnectivity;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SelectPolygonsByConnectivity;
-	static C(Other: UObject | any): SelectPolygonsByConnectivity;
-}
-
-declare class SelectPolygonsBySmoothingGroup extends MeshEditorSelectionModifier { 
-	static Load(ResourceName: string): SelectPolygonsBySmoothingGroup;
-	static Find(Outer: UObject, ResourceName: string): SelectPolygonsBySmoothingGroup;
-	static GetDefaultObject(): SelectPolygonsBySmoothingGroup;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SelectPolygonsBySmoothingGroup;
-	static C(Other: UObject | any): SelectPolygonsBySmoothingGroup;
-}
-
-declare class MeshEditorSelectionModifiersList extends UObject { 
-	SelectionModifiers: MeshEditorSelectionModifier[];
-	static Load(ResourceName: string): MeshEditorSelectionModifiersList;
-	static Find(Outer: UObject, ResourceName: string): MeshEditorSelectionModifiersList;
-	static GetDefaultObject(): MeshEditorSelectionModifiersList;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshEditorSelectionModifiersList;
-	static C(Other: UObject | any): MeshEditorSelectionModifiersList;
-}
-
-declare class MeshEditorSettings extends UObject { 
-	bSeparateSelectionSetPerMode: boolean;
-	bOnlySelectVisibleMeshes: boolean;
-	bOnlySelectVisibleElements: boolean;
-	bAllowGrabberSphere: boolean;
-	bAutoQuadrangulate: boolean;
-	static Load(ResourceName: string): MeshEditorSettings;
-	static Find(Outer: UObject, ResourceName: string): MeshEditorSettings;
-	static GetDefaultObject(): MeshEditorSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshEditorSettings;
-	static C(Other: UObject | any): MeshEditorSettings;
-}
-
-declare class WireframeMesh extends UObject { 
-	static Load(ResourceName: string): WireframeMesh;
-	static Find(Outer: UObject, ResourceName: string): WireframeMesh;
-	static GetDefaultObject(): WireframeMesh;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WireframeMesh;
-	static C(Other: UObject | any): WireframeMesh;
-}
-
-declare class MeshEditorStaticMeshAdapter extends EditableMeshAdapter { 
-	WireframeMesh: WireframeMesh;
-	StaticMeshLODIndex: number;
-	static Load(ResourceName: string): MeshEditorStaticMeshAdapter;
-	static Find(Outer: UObject, ResourceName: string): MeshEditorStaticMeshAdapter;
-	static GetDefaultObject(): MeshEditorStaticMeshAdapter;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshEditorStaticMeshAdapter;
-	static C(Other: UObject | any): MeshEditorStaticMeshAdapter;
+declare class GeometryCacheTrack_FlipbookAnimation extends GeometryCacheTrack { 
+	NumMeshSamples: any;
+	static Load(ResourceName: string): GeometryCacheTrack_FlipbookAnimation;
+	static Find(Outer: UObject, ResourceName: string): GeometryCacheTrack_FlipbookAnimation;
+	static GetDefaultObject(): GeometryCacheTrack_FlipbookAnimation;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheTrack_FlipbookAnimation;
+	AddMeshSample(MeshData: GeometryCacheMeshData,SampleTime: number): void;
+	static C(Other: UObject | any): GeometryCacheTrack_FlipbookAnimation;
 }
 
-declare class MeshEditorSubdividedStaticMeshAdapter extends EditableMeshAdapter { 
-	WireframeMesh: WireframeMesh;
-	StaticMeshLODIndex: number;
-	static Load(ResourceName: string): MeshEditorSubdividedStaticMeshAdapter;
-	static Find(Outer: UObject, ResourceName: string): MeshEditorSubdividedStaticMeshAdapter;
-	static GetDefaultObject(): MeshEditorSubdividedStaticMeshAdapter;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshEditorSubdividedStaticMeshAdapter;
-	static C(Other: UObject | any): MeshEditorSubdividedStaticMeshAdapter;
-}
-
-declare class MeshElementTransformer extends ViewportTransformer { 
-	static Load(ResourceName: string): MeshElementTransformer;
-	static Find(Outer: UObject, ResourceName: string): MeshElementTransformer;
-	static GetDefaultObject(): MeshElementTransformer;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshElementTransformer;
-	static C(Other: UObject | any): MeshElementTransformer;
-}
-
-declare class OverlayComponent extends MeshComponent { 
-	LineMaterial: MaterialInterface;
-	PointMaterial: MaterialInterface;
-	Bounds: BoxSphereBounds;
-	bBoundsDirty: boolean;
-	static Load(ResourceName: string): OverlayComponent;
-	static Find(Outer: UObject, ResourceName: string): OverlayComponent;
-	static GetDefaultObject(): OverlayComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OverlayComponent;
-	static C(Other: UObject | any): OverlayComponent;
-}
-
-declare class WireframeMeshComponent extends MeshComponent { 
-	WireframeMesh: WireframeMesh;
-	static Load(ResourceName: string): WireframeMeshComponent;
-	static Find(Outer: UObject, ResourceName: string): WireframeMeshComponent;
-	static GetDefaultObject(): WireframeMeshComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WireframeMeshComponent;
-	static C(Other: UObject | any): WireframeMeshComponent;
-}
-
-declare class AssignMaterialCommand extends MeshEditorInstantCommand { 
-	static Load(ResourceName: string): AssignMaterialCommand;
-	static Find(Outer: UObject, ResourceName: string): AssignMaterialCommand;
-	static GetDefaultObject(): AssignMaterialCommand;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssignMaterialCommand;
-	static C(Other: UObject | any): AssignMaterialCommand;
-}
-
-declare class BevelPolygonCommand extends MeshEditorEditCommand { 
-	static Load(ResourceName: string): BevelPolygonCommand;
-	static Find(Outer: UObject, ResourceName: string): BevelPolygonCommand;
-	static GetDefaultObject(): BevelPolygonCommand;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BevelPolygonCommand;
-	static C(Other: UObject | any): BevelPolygonCommand;
-}
-
-declare class InsetPolygonCommand extends MeshEditorEditCommand { 
-	static Load(ResourceName: string): InsetPolygonCommand;
-	static Find(Outer: UObject, ResourceName: string): InsetPolygonCommand;
-	static GetDefaultObject(): InsetPolygonCommand;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InsetPolygonCommand;
-	static C(Other: UObject | any): InsetPolygonCommand;
-}
-
-declare class DeleteMeshElementCommand extends MeshEditorInstantCommand { 
-	static Load(ResourceName: string): DeleteMeshElementCommand;
-	static Find(Outer: UObject, ResourceName: string): DeleteMeshElementCommand;
-	static GetDefaultObject(): DeleteMeshElementCommand;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DeleteMeshElementCommand;
-	static C(Other: UObject | any): DeleteMeshElementCommand;
-}
-
-declare class EditVertexCornerSharpnessCommand extends MeshEditorEditCommand { 
-	static Load(ResourceName: string): EditVertexCornerSharpnessCommand;
-	static Find(Outer: UObject, ResourceName: string): EditVertexCornerSharpnessCommand;
-	static GetDefaultObject(): EditVertexCornerSharpnessCommand;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditVertexCornerSharpnessCommand;
-	static C(Other: UObject | any): EditVertexCornerSharpnessCommand;
-}
-
-declare class EditEdgeCreaseSharpnessCommand extends MeshEditorEditCommand { 
-	static Load(ResourceName: string): EditEdgeCreaseSharpnessCommand;
-	static Find(Outer: UObject, ResourceName: string): EditEdgeCreaseSharpnessCommand;
-	static GetDefaultObject(): EditEdgeCreaseSharpnessCommand;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditEdgeCreaseSharpnessCommand;
-	static C(Other: UObject | any): EditEdgeCreaseSharpnessCommand;
-}
-
-declare class ExtendEdgeCommand extends MeshEditorEditCommand { 
-	static Load(ResourceName: string): ExtendEdgeCommand;
-	static Find(Outer: UObject, ResourceName: string): ExtendEdgeCommand;
-	static GetDefaultObject(): ExtendEdgeCommand;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ExtendEdgeCommand;
-	static C(Other: UObject | any): ExtendEdgeCommand;
-}
-
-declare class ExtendVertexCommand extends MeshEditorEditCommand { 
-	static Load(ResourceName: string): ExtendVertexCommand;
-	static Find(Outer: UObject, ResourceName: string): ExtendVertexCommand;
-	static GetDefaultObject(): ExtendVertexCommand;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ExtendVertexCommand;
-	static C(Other: UObject | any): ExtendVertexCommand;
-}
-
-declare class ExtrudePolygonCommand extends MeshEditorEditCommand { 
-	static Load(ResourceName: string): ExtrudePolygonCommand;
-	static Find(Outer: UObject, ResourceName: string): ExtrudePolygonCommand;
-	static GetDefaultObject(): ExtrudePolygonCommand;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ExtrudePolygonCommand;
-	static C(Other: UObject | any): ExtrudePolygonCommand;
-}
-
-declare class FlipPolygonCommand extends MeshEditorInstantCommand { 
-	static Load(ResourceName: string): FlipPolygonCommand;
-	static Find(Outer: UObject, ResourceName: string): FlipPolygonCommand;
-	static GetDefaultObject(): FlipPolygonCommand;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FlipPolygonCommand;
-	static C(Other: UObject | any): FlipPolygonCommand;
-}
-
-declare class HardenEdgeCommand extends MeshEditorInstantCommand { 
-	static Load(ResourceName: string): HardenEdgeCommand;
-	static Find(Outer: UObject, ResourceName: string): HardenEdgeCommand;
-	static GetDefaultObject(): HardenEdgeCommand;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HardenEdgeCommand;
-	static C(Other: UObject | any): HardenEdgeCommand;
+declare class GeometryCacheTrackStreamable extends GeometryCacheTrack { 
+	Codec: GeometryCacheCodecBase;
+	StartSampleTime: number;
+	static Load(ResourceName: string): GeometryCacheTrackStreamable;
+	static Find(Outer: UObject, ResourceName: string): GeometryCacheTrackStreamable;
+	static GetDefaultObject(): GeometryCacheTrackStreamable;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheTrackStreamable;
+	static C(Other: UObject | any): GeometryCacheTrackStreamable;
 }
 
-declare class SoftenEdgeCommand extends MeshEditorInstantCommand { 
-	static Load(ResourceName: string): SoftenEdgeCommand;
-	static Find(Outer: UObject, ResourceName: string): SoftenEdgeCommand;
-	static GetDefaultObject(): SoftenEdgeCommand;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoftenEdgeCommand;
-	static C(Other: UObject | any): SoftenEdgeCommand;
+declare class GeometryCacheTrack_TransformAnimation extends GeometryCacheTrack { 
+	static Load(ResourceName: string): GeometryCacheTrack_TransformAnimation;
+	static Find(Outer: UObject, ResourceName: string): GeometryCacheTrack_TransformAnimation;
+	static GetDefaultObject(): GeometryCacheTrack_TransformAnimation;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheTrack_TransformAnimation;
+	SetMesh(NewMeshData: GeometryCacheMeshData): void;
+	static C(Other: UObject | any): GeometryCacheTrack_TransformAnimation;
 }
 
-declare class InsertEdgeLoopCommand extends MeshEditorEditCommand { 
-	static Load(ResourceName: string): InsertEdgeLoopCommand;
-	static Find(Outer: UObject, ResourceName: string): InsertEdgeLoopCommand;
-	static GetDefaultObject(): InsertEdgeLoopCommand;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InsertEdgeLoopCommand;
-	static C(Other: UObject | any): InsertEdgeLoopCommand;
+declare class GeometryCacheTrack_TransformGroupAnimation extends GeometryCacheTrack { 
+	static Load(ResourceName: string): GeometryCacheTrack_TransformGroupAnimation;
+	static Find(Outer: UObject, ResourceName: string): GeometryCacheTrack_TransformGroupAnimation;
+	static GetDefaultObject(): GeometryCacheTrack_TransformGroupAnimation;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheTrack_TransformGroupAnimation;
+	SetMesh(NewMeshData: GeometryCacheMeshData): void;
+	static C(Other: UObject | any): GeometryCacheTrack_TransformGroupAnimation;
 }
 
-declare class QuadrangulateMeshCommand extends MeshEditorInstantCommand { 
-	static Load(ResourceName: string): QuadrangulateMeshCommand;
-	static Find(Outer: UObject, ResourceName: string): QuadrangulateMeshCommand;
-	static GetDefaultObject(): QuadrangulateMeshCommand;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): QuadrangulateMeshCommand;
-	static C(Other: UObject | any): QuadrangulateMeshCommand;
+declare type EAlembicSamplingType = 'PerFrame' | 'PerXFrames' | 'PerTimeStep' | 'EAlembicSamplingType_MAX';
+declare var EAlembicSamplingType : { PerFrame:'PerFrame',PerXFrames:'PerXFrames',PerTimeStep:'PerTimeStep',EAlembicSamplingType_MAX:'EAlembicSamplingType_MAX', };
+declare class AbcSamplingSettings { 
+	SamplingType: EAlembicSamplingType;
+	FrameSteps: number;
+	TimeSteps: number;
+	FrameStart: number;
+	FrameEnd: number;
+	bSkipEmpty: boolean;
+	clone() : AbcSamplingSettings;
+	static C(Other: UObject | any): AbcSamplingSettings;
 }
 
-declare class RemoveEdgeCommand extends MeshEditorInstantCommand { 
-	static Load(ResourceName: string): RemoveEdgeCommand;
-	static Find(Outer: UObject, ResourceName: string): RemoveEdgeCommand;
-	static GetDefaultObject(): RemoveEdgeCommand;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RemoveEdgeCommand;
-	static C(Other: UObject | any): RemoveEdgeCommand;
+declare class AbcAssetImportData extends AssetImportData { 
+	TrackNames: string[];
+	SamplingSettings: AbcSamplingSettings;
+	static Load(ResourceName: string): AbcAssetImportData;
+	static Find(Outer: UObject, ResourceName: string): AbcAssetImportData;
+	static GetDefaultObject(): AbcAssetImportData;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AbcAssetImportData;
+	static C(Other: UObject | any): AbcAssetImportData;
 }
 
-declare class RemoveVertexCommand extends MeshEditorInstantCommand { 
-	static Load(ResourceName: string): RemoveVertexCommand;
-	static Find(Outer: UObject, ResourceName: string): RemoveVertexCommand;
-	static GetDefaultObject(): RemoveVertexCommand;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RemoveVertexCommand;
-	static C(Other: UObject | any): RemoveVertexCommand;
+declare type EAlembicImportType = 'StaticMesh' | 'GeometryCache' | 'Skeletal' | 'EAlembicImportType_MAX';
+declare var EAlembicImportType : { StaticMesh:'StaticMesh',GeometryCache:'GeometryCache',Skeletal:'Skeletal',EAlembicImportType_MAX:'EAlembicImportType_MAX', };
+declare class AbcNormalGenerationSettings { 
+	bForceOneSmoothingGroupPerObject: boolean;
+	HardEdgeAngleThreshold: number;
+	bRecomputeNormals: boolean;
+	bIgnoreDegenerateTriangles: boolean;
+	clone() : AbcNormalGenerationSettings;
+	static C(Other: UObject | any): AbcNormalGenerationSettings;
 }
 
-declare class SplitEdgeCommand extends MeshEditorEditCommand { 
-	static Load(ResourceName: string): SplitEdgeCommand;
-	static Find(Outer: UObject, ResourceName: string): SplitEdgeCommand;
-	static GetDefaultObject(): SplitEdgeCommand;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SplitEdgeCommand;
-	static C(Other: UObject | any): SplitEdgeCommand;
+declare class AbcMaterialSettings { 
+	bCreateMaterials: boolean;
+	bFindMaterials: boolean;
+	clone() : AbcMaterialSettings;
+	static C(Other: UObject | any): AbcMaterialSettings;
 }
 
-declare class SplitPolygonCommand extends MeshEditorEditCommand { 
-	Component: PrimitiveComponent;
-	EditableMesh: EditableMesh;
-	static Load(ResourceName: string): SplitPolygonCommand;
-	static Find(Outer: UObject, ResourceName: string): SplitPolygonCommand;
-	static GetDefaultObject(): SplitPolygonCommand;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SplitPolygonCommand;
-	static C(Other: UObject | any): SplitPolygonCommand;
+declare type EBaseCalculationType = 'PercentageBased' | 'FixedNumber' | 'EBaseCalculationType_MAX';
+declare var EBaseCalculationType : { PercentageBased:'PercentageBased',FixedNumber:'FixedNumber',EBaseCalculationType_MAX:'EBaseCalculationType_MAX', };
+declare class AbcCompressionSettings { 
+	bMergeMeshes: boolean;
+	bBakeMatrixAnimation: boolean;
+	BaseCalculationType: EBaseCalculationType;
+	PercentageOfTotalBases: number;
+	MaxNumberOfBases: number;
+	MinimumNumberOfVertexInfluencePercentage: number;
+	clone() : AbcCompressionSettings;
+	static C(Other: UObject | any): AbcCompressionSettings;
 }
 
-declare class SplitPolygonFromVertexCommand extends SplitPolygonCommand { 
-	static Load(ResourceName: string): SplitPolygonFromVertexCommand;
-	static Find(Outer: UObject, ResourceName: string): SplitPolygonFromVertexCommand;
-	static GetDefaultObject(): SplitPolygonFromVertexCommand;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SplitPolygonFromVertexCommand;
-	static C(Other: UObject | any): SplitPolygonFromVertexCommand;
+declare class AbcStaticMeshSettings { 
+	bMergeMeshes: boolean;
+	bPropagateMatrixTransformations: boolean;
+	bGenerateLightmapUVs: boolean;
+	clone() : AbcStaticMeshSettings;
+	static C(Other: UObject | any): AbcStaticMeshSettings;
 }
 
-declare class SplitPolygonFromEdgeCommand extends SplitPolygonCommand { 
-	static Load(ResourceName: string): SplitPolygonFromEdgeCommand;
-	static Find(Outer: UObject, ResourceName: string): SplitPolygonFromEdgeCommand;
-	static GetDefaultObject(): SplitPolygonFromEdgeCommand;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SplitPolygonFromEdgeCommand;
-	static C(Other: UObject | any): SplitPolygonFromEdgeCommand;
+declare class AbcGeometryCacheSettings { 
+	bFlattenTracks: boolean;
+	bApplyConstantTopologyOptimizations: boolean;
+	bCalculateMotionVectorsDuringImport: boolean;
+	bOptimizeIndexBuffers: boolean;
+	CompressedPositionPrecision: number;
+	CompressedTextureCoordinatesNumberOfBits: number;
+	clone() : AbcGeometryCacheSettings;
+	static C(Other: UObject | any): AbcGeometryCacheSettings;
 }
 
-declare class SplitPolygonFromPolygonCommand extends SplitPolygonCommand { 
-	static Load(ResourceName: string): SplitPolygonFromPolygonCommand;
-	static Find(Outer: UObject, ResourceName: string): SplitPolygonFromPolygonCommand;
-	static GetDefaultObject(): SplitPolygonFromPolygonCommand;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SplitPolygonFromPolygonCommand;
-	static C(Other: UObject | any): SplitPolygonFromPolygonCommand;
+declare type EAbcConversionPreset = 'Maya' | 'Max' | 'Custom' | 'EAbcConversionPreset_MAX';
+declare var EAbcConversionPreset : { Maya:'Maya',Max:'Max',Custom:'Custom',EAbcConversionPreset_MAX:'EAbcConversionPreset_MAX', };
+declare class AbcConversionSettings { 
+	Preset: EAbcConversionPreset;
+	bFlipU: boolean;
+	bFlipV: boolean;
+	Scale: Vector;
+	Rotation: Vector;
+	clone() : AbcConversionSettings;
+	static C(Other: UObject | any): AbcConversionSettings;
 }
 
-declare class TessellatePolygonCommand extends MeshEditorInstantCommand { 
-	static Load(ResourceName: string): TessellatePolygonCommand;
-	static Find(Outer: UObject, ResourceName: string): TessellatePolygonCommand;
-	static GetDefaultObject(): TessellatePolygonCommand;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TessellatePolygonCommand;
-	static C(Other: UObject | any): TessellatePolygonCommand;
+declare class AbcImportSettings extends UObject { 
+	ImportType: EAlembicImportType;
+	SamplingSettings: AbcSamplingSettings;
+	NormalGenerationSettings: AbcNormalGenerationSettings;
+	MaterialSettings: AbcMaterialSettings;
+	CompressionSettings: AbcCompressionSettings;
+	StaticMeshSettings: AbcStaticMeshSettings;
+	GeometryCacheSettings: AbcGeometryCacheSettings;
+	ConversionSettings: AbcConversionSettings;
+	static Load(ResourceName: string): AbcImportSettings;
+	static Find(Outer: UObject, ResourceName: string): AbcImportSettings;
+	static GetDefaultObject(): AbcImportSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AbcImportSettings;
+	static C(Other: UObject | any): AbcImportSettings;
 }
 
-declare class UnifyNormalsCommand extends MeshEditorInstantCommand { 
-	static Load(ResourceName: string): UnifyNormalsCommand;
-	static Find(Outer: UObject, ResourceName: string): UnifyNormalsCommand;
-	static GetDefaultObject(): UnifyNormalsCommand;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnifyNormalsCommand;
-	static C(Other: UObject | any): UnifyNormalsCommand;
+declare class AlembicTestCommandlet extends Commandlet { 
+	static Load(ResourceName: string): AlembicTestCommandlet;
+	static Find(Outer: UObject, ResourceName: string): AlembicTestCommandlet;
+	static GetDefaultObject(): AlembicTestCommandlet;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AlembicTestCommandlet;
+	static C(Other: UObject | any): AlembicTestCommandlet;
 }
 
-declare class NewPluginDescriptorData extends UObject { 
-	CreatedBy: string;
-	CreatedByURL: string;
-	Description: string;
-	bIsBetaVersion: boolean;
-	static Load(ResourceName: string): NewPluginDescriptorData;
-	static Find(Outer: UObject, ResourceName: string): NewPluginDescriptorData;
-	static GetDefaultObject(): NewPluginDescriptorData;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NewPluginDescriptorData;
-	static C(Other: UObject | any): NewPluginDescriptorData;
+declare class AlembicImportFactory extends Factory { 
+	ImportSettings: AbcImportSettings;
+	bShowOption: boolean;
+	static Load(ResourceName: string): AlembicImportFactory;
+	static Find(Outer: UObject, ResourceName: string): AlembicImportFactory;
+	static GetDefaultObject(): AlembicImportFactory;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AlembicImportFactory;
+	static C(Other: UObject | any): AlembicImportFactory;
 }
 
-declare class PluginMetadataObject extends UObject { 
-	Version: number;
-	VersionName: string;
-	FriendlyName: string;
-	Description: string;
-	Category: string;
-	CreatedBy: string;
-	CreatedByURL: string;
-	DocsURL: string;
-	MarketplaceURL: string;
-	SupportURL: string;
-	bCanContainContent: boolean;
-	bIsBetaVersion: boolean;
-	static Load(ResourceName: string): PluginMetadataObject;
-	static Find(Outer: UObject, ResourceName: string): PluginMetadataObject;
-	static GetDefaultObject(): PluginMetadataObject;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PluginMetadataObject;
-	static C(Other: UObject | any): PluginMetadataObject;
+declare class ActorFactoryGeometryCache extends ActorFactory { 
+	static Load(ResourceName: string): ActorFactoryGeometryCache;
+	static Find(Outer: UObject, ResourceName: string): ActorFactoryGeometryCache;
+	static GetDefaultObject(): ActorFactoryGeometryCache;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryGeometryCache;
+	static C(Other: UObject | any): ActorFactoryGeometryCache;
 }
 
-declare class SpeedTreeImportFactory extends Factory { 
-	static Load(ResourceName: string): SpeedTreeImportFactory;
-	static Find(Outer: UObject, ResourceName: string): SpeedTreeImportFactory;
-	static GetDefaultObject(): SpeedTreeImportFactory;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpeedTreeImportFactory;
-	static C(Other: UObject | any): SpeedTreeImportFactory;
+declare class GeometryCacheThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
+	static Load(ResourceName: string): GeometryCacheThumbnailRenderer;
+	static Find(Outer: UObject, ResourceName: string): GeometryCacheThumbnailRenderer;
+	static GetDefaultObject(): GeometryCacheThumbnailRenderer;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheThumbnailRenderer;
+	static C(Other: UObject | any): GeometryCacheThumbnailRenderer;
 }
 
-declare class ReimportSpeedTreeFactory extends SpeedTreeImportFactory { 
-	static Load(ResourceName: string): ReimportSpeedTreeFactory;
-	static Find(Outer: UObject, ResourceName: string): ReimportSpeedTreeFactory;
-	static GetDefaultObject(): ReimportSpeedTreeFactory;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportSpeedTreeFactory;
-	static C(Other: UObject | any): ReimportSpeedTreeFactory;
+declare class AutomationUtilsBlueprintLibrary extends BlueprintFunctionLibrary { 
+	static Load(ResourceName: string): AutomationUtilsBlueprintLibrary;
+	static Find(Outer: UObject, ResourceName: string): AutomationUtilsBlueprintLibrary;
+	static GetDefaultObject(): AutomationUtilsBlueprintLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomationUtilsBlueprintLibrary;
+	static TakeGameplayAutomationScreenshot(ScreenShotName: string,MaxGlobalError: number,MaxLocalError: number,MapNameOverride: string): void;
+	static C(Other: UObject | any): AutomationUtilsBlueprintLibrary;
 }
 
-declare type EImportGeometryType = 'IGT_3D' | 'IGT_Billboards' | 'IGT_Both' | 'IGT_MAX';
-declare var EImportGeometryType : { IGT_3D:'IGT_3D',IGT_Billboards:'IGT_Billboards',IGT_Both:'IGT_Both',IGT_MAX:'IGT_MAX', };
-declare type EImportLODType = 'ILT_PaintedFoliage' | 'ILT_IndividualActors' | 'ILT_MAX';
-declare var EImportLODType : { ILT_PaintedFoliage:'ILT_PaintedFoliage',ILT_IndividualActors:'ILT_IndividualActors',ILT_MAX:'ILT_MAX', };
-declare class SpeedTreeImportData extends AssetImportData { 
-	TreeScale: number;
-	ImportGeometryType: EImportGeometryType;
-	LODType: EImportLODType;
-	IncludeCollision: boolean;
-	MakeMaterialsCheck: boolean;
-	IncludeNormalMapCheck: boolean;
-	IncludeDetailMapCheck: boolean;
-	IncludeSpecularMapCheck: boolean;
-	IncludeBranchSeamSmoothing: boolean;
-	IncludeSpeedTreeAO: boolean;
-	IncludeColorAdjustment: boolean;
-	IncludeSubsurface: boolean;
-	IncludeVertexProcessingCheck: boolean;
-	IncludeWindCheck: boolean;
-	IncludeSmoothLODCheck: boolean;
-	static Load(ResourceName: string): SpeedTreeImportData;
-	static Find(Outer: UObject, ResourceName: string): SpeedTreeImportData;
-	static GetDefaultObject(): SpeedTreeImportData;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpeedTreeImportData;
-	static C(Other: UObject | any): SpeedTreeImportData;
+declare class ScreenshotComparisonCommandlet extends Commandlet { 
+	static Load(ResourceName: string): ScreenshotComparisonCommandlet;
+	static Find(Outer: UObject, ResourceName: string): ScreenshotComparisonCommandlet;
+	static GetDefaultObject(): ScreenshotComparisonCommandlet;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ScreenshotComparisonCommandlet;
+	static C(Other: UObject | any): ScreenshotComparisonCommandlet;
 }
 
-declare type EPropertyValueCategory = 'Generic' | 'RelativeLocation' | 'RelativeRotation' | 'RelativeScale3D' | 'bVisible' | 'Material' | 'EPropertyValueCategory_MAX';
-declare var EPropertyValueCategory : { Generic:'Generic',RelativeLocation:'RelativeLocation',RelativeRotation:'RelativeRotation',RelativeScale3D:'RelativeScale3D',bVisible:'bVisible',Material:'Material',EPropertyValueCategory_MAX:'EPropertyValueCategory_MAX', };
-declare class PropertyValue extends UObject { 
-	FullDisplayString: string;
-	bHasRecordedData: boolean;
-	bIsObjectProperty: boolean;
-	ValueBytes: number[];
-	PropCategory: EPropertyValueCategory;
-	Properties: Property[];
-	PropertyIndices: number[];
-	static Load(ResourceName: string): PropertyValue;
-	static Find(Outer: UObject, ResourceName: string): PropertyValue;
-	static GetDefaultObject(): PropertyValue;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyValue;
-	static C(Other: UObject | any): PropertyValue;
+declare class MovieSceneGeometryCacheParams { 
+	GeometryCacheAsset: GeometryCache;
+	StartFrameOffset: FrameNumber;
+	EndFrameOffset: FrameNumber;
+	PlayRate: number;
+	bReverse: boolean;
+	StartOffset: number;
+	EndOffset: number;
+	GeometryCache: SoftObjectPath;
+	clone() : MovieSceneGeometryCacheParams;
+	static C(Other: UObject | any): MovieSceneGeometryCacheParams;
 }
 
-declare class VariantObjectBinding extends UObject { 
-	ObjectPtr: SoftObjectPath;
-	LazyObjectPtr: any;
-	CapturedProperties: PropertyValue[];
-	static Load(ResourceName: string): VariantObjectBinding;
-	static Find(Outer: UObject, ResourceName: string): VariantObjectBinding;
-	static GetDefaultObject(): VariantObjectBinding;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VariantObjectBinding;
-	static C(Other: UObject | any): VariantObjectBinding;
+declare class MovieSceneGeometryCacheSection extends MovieSceneSection { 
+	Params: MovieSceneGeometryCacheParams;
+	static Load(ResourceName: string): MovieSceneGeometryCacheSection;
+	static Find(Outer: UObject, ResourceName: string): MovieSceneGeometryCacheSection;
+	static GetDefaultObject(): MovieSceneGeometryCacheSection;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneGeometryCacheSection;
+	static C(Other: UObject | any): MovieSceneGeometryCacheSection;
 }
 
-declare class Variant extends UObject { 
-	DisplayText: string;
-	ObjectBindings: VariantObjectBinding[];
-	static Load(ResourceName: string): Variant;
-	static Find(Outer: UObject, ResourceName: string): Variant;
-	static GetDefaultObject(): Variant;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Variant;
-	SwitchOn(): void;
-	SetDisplayText(NewDisplayText: string): void;
-	GetNumActors(): number;
-	GetDisplayText(): string;
-	GetActor(ActorIndex: number): Actor;
-	static C(Other: UObject | any): Variant;
+declare class MovieSceneGeometryCacheTrack extends MovieSceneNameableTrack { 
+	AnimationSections: MovieSceneSection[];
+	static Load(ResourceName: string): MovieSceneGeometryCacheTrack;
+	static Find(Outer: UObject, ResourceName: string): MovieSceneGeometryCacheTrack;
+	static GetDefaultObject(): MovieSceneGeometryCacheTrack;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneGeometryCacheTrack;
+	static C(Other: UObject | any): MovieSceneGeometryCacheTrack;
 }
 
-declare class VariantSet extends UObject { 
-	DisplayText: string;
-	Variants: Variant[];
-	static Load(ResourceName: string): VariantSet;
-	static Find(Outer: UObject, ResourceName: string): VariantSet;
-	static GetDefaultObject(): VariantSet;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VariantSet;
-	SetDisplayText(NewDisplayText: string): void;
-	GetVariant(VariantIndex: number): Variant;
-	GetNumVariants(): number;
-	GetDisplayText(): string;
-	static C(Other: UObject | any): VariantSet;
+declare class WebSocketConnection extends NetConnection { 
+	static Load(ResourceName: string): WebSocketConnection;
+	static Find(Outer: UObject, ResourceName: string): WebSocketConnection;
+	static GetDefaultObject(): WebSocketConnection;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WebSocketConnection;
+	static C(Other: UObject | any): WebSocketConnection;
 }
 
-declare class LevelVariantSets extends UObject { 
-	VariantSets: VariantSet[];
-	DisplayNodeExpansionStates: any;
-	static Load(ResourceName: string): LevelVariantSets;
-	static Find(Outer: UObject, ResourceName: string): LevelVariantSets;
-	static GetDefaultObject(): LevelVariantSets;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelVariantSets;
-	GetVariantSet(VariantSetIndex: number): VariantSet;
-	GetNumVariantSets(): number;
-	static C(Other: UObject | any): LevelVariantSets;
+declare class WebSocketNetDriver extends NetDriver { 
+	WebSocketPort: number;
+	static Load(ResourceName: string): WebSocketNetDriver;
+	static Find(Outer: UObject, ResourceName: string): WebSocketNetDriver;
+	static GetDefaultObject(): WebSocketNetDriver;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WebSocketNetDriver;
+	static C(Other: UObject | any): WebSocketNetDriver;
 }
 
-declare class LevelVariantSetsActor extends Actor { 
-	LevelVariantSets: SoftObjectPath;
-	static GetDefaultObject(): LevelVariantSetsActor;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelVariantSetsActor;
-	SwitchOnVariantByName(VariantSetName: string,VariantName: string): boolean;
-	SwitchOnVariantByIndex(VariantSetIndex: number,VariantIndex: number): boolean;
-	SetLevelVariantSets(InVariantSets: LevelVariantSets): void;
-	GetLevelVariantSets(bLoad: boolean): LevelVariantSets;
-	static C(Other: UObject | any): LevelVariantSetsActor;
+declare class ImgMediaSettings extends UObject { 
+	DefaultFrameRate: FrameRate;
+	CacheBehindPercentage: number;
+	CacheSizeGB: number;
+	CacheThreads: number;
+	CacheThreadStackSizeKB: number;
+	GlobalCacheSizeGB: number;
+	UseGlobalCache: boolean;
+	ExrDecoderThreads: any;
+	DefaultProxy: string;
+	UseDefaultProxy: boolean;
+	static Load(ResourceName: string): ImgMediaSettings;
+	static Find(Outer: UObject, ResourceName: string): ImgMediaSettings;
+	static GetDefaultObject(): ImgMediaSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImgMediaSettings;
+	static C(Other: UObject | any): ImgMediaSettings;
 }
 
-declare class PropertyValueMaterial extends PropertyValue { 
-	static Load(ResourceName: string): PropertyValueMaterial;
-	static Find(Outer: UObject, ResourceName: string): PropertyValueMaterial;
-	static GetDefaultObject(): PropertyValueMaterial;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyValueMaterial;
-	static C(Other: UObject | any): PropertyValueMaterial;
+declare class ImgMediaSource extends BaseMediaSource { 
+	FrameRateOverride: FrameRate;
+	ProxyOverride: string;
+	SequencePath: DirectoryPath;
+	static Load(ResourceName: string): ImgMediaSource;
+	static Find(Outer: UObject, ResourceName: string): ImgMediaSource;
+	static GetDefaultObject(): ImgMediaSource;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImgMediaSource;
+	SetSequencePath(Path: string): void;
+	GetSequencePath(): string;
+	GetProxies(OutProxies?: string[]): {OutProxies: string[]};
+	static C(Other: UObject | any): ImgMediaSource;
 }
 
-declare class PropertyValueTransform extends PropertyValue { 
-	static Load(ResourceName: string): PropertyValueTransform;
-	static Find(Outer: UObject, ResourceName: string): PropertyValueTransform;
-	static GetDefaultObject(): PropertyValueTransform;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyValueTransform;
-	static C(Other: UObject | any): PropertyValueTransform;
+declare class MovieSceneMediaSection extends MovieSceneSection { 
+	MediaSource: MediaSource;
+	bLooping: boolean;
+	StartFrameOffset: FrameNumber;
+	MediaTexture: MediaTexture;
+	MediaSoundComponent: MediaSoundComponent;
+	bUseExternalMediaPlayer: boolean;
+	ExternalMediaPlayer: MediaPlayer;
+	ThumbnailReferenceOffset: number;
+	static Load(ResourceName: string): MovieSceneMediaSection;
+	static Find(Outer: UObject, ResourceName: string): MovieSceneMediaSection;
+	static GetDefaultObject(): MovieSceneMediaSection;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneMediaSection;
+	static C(Other: UObject | any): MovieSceneMediaSection;
 }
 
-declare class PropertyValueVisibility extends PropertyValue { 
-	static Load(ResourceName: string): PropertyValueVisibility;
-	static Find(Outer: UObject, ResourceName: string): PropertyValueVisibility;
-	static GetDefaultObject(): PropertyValueVisibility;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyValueVisibility;
-	static C(Other: UObject | any): PropertyValueVisibility;
+declare class MovieSceneMediaTrack extends MovieSceneNameableTrack { 
+	MediaSections: MovieSceneSection[];
+	static Load(ResourceName: string): MovieSceneMediaTrack;
+	static Find(Outer: UObject, ResourceName: string): MovieSceneMediaTrack;
+	static GetDefaultObject(): MovieSceneMediaTrack;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneMediaTrack;
+	static C(Other: UObject | any): MovieSceneMediaTrack;
 }
 
-declare class GeometryCacheTrack extends UObject { 
-	Duration: number;
-	static Load(ResourceName: string): GeometryCacheTrack;
-	static Find(Outer: UObject, ResourceName: string): GeometryCacheTrack;
-	static GetDefaultObject(): GeometryCacheTrack;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheTrack;
-	static C(Other: UObject | any): GeometryCacheTrack;
+declare class NetPropertyHook extends Property { 
+	static Load(ResourceName: string): NetPropertyHook;
+	static Find(Outer: UObject, ResourceName: string): NetPropertyHook;
+	static GetDefaultObject(): NetPropertyHook;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NetPropertyHook;
+	static C(Other: UObject | any): NetPropertyHook;
 }
 
-declare class GeometryCache extends UObject { 
-	AssetImportData: AssetImportData;
-	ThumbnailInfo: ThumbnailInfo;
-	Materials: MaterialInterface[];
-	Tracks: GeometryCacheTrack[];
-	StartFrame: number;
-	EndFrame: number;
-	static Load(ResourceName: string): GeometryCache;
-	static Find(Outer: UObject, ResourceName: string): GeometryCache;
-	static GetDefaultObject(): GeometryCache;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCache;
-	static C(Other: UObject | any): GeometryCache;
+declare class UnitTestBase extends UObject { 
+	static Load(ResourceName: string): UnitTestBase;
+	static Find(Outer: UObject, ResourceName: string): UnitTestBase;
+	static GetDefaultObject(): UnitTestBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnitTestBase;
+	static C(Other: UObject | any): UnitTestBase;
 }
 
-declare class GeometryCacheComponent extends MeshComponent { 
-	GeometryCache: GeometryCache;
-	bRunning: boolean;
-	bLooping: boolean;
-	StartTimeOffset: number;
-	PlaybackSpeed: number;
-	NumTracks: number;
-	ElapsedTime: number;
-	Duration: number;
-	bManualTick: boolean;
-	static Load(ResourceName: string): GeometryCacheComponent;
-	static Find(Outer: UObject, ResourceName: string): GeometryCacheComponent;
-	static GetDefaultObject(): GeometryCacheComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheComponent;
-	TickAtThisTime(Time: number,bInIsRunning: boolean,bInBackwards: boolean,bInIsLooping: boolean): void;
-	Stop(): void;
-	SetStartTimeOffset(NewStartTimeOffset: number): void;
-	SetPlaybackSpeed(NewPlaybackSpeed: number): void;
-	SetLooping(bNewLooping: boolean): void;
-	SetGeometryCache(NewGeomCache: GeometryCache): boolean;
-	PlayReversedFromEnd(): void;
-	PlayReversed(): void;
-	PlayFromStart(): void;
-	Play(): void;
-	Pause(): void;
-	IsPlayingReversed(): boolean;
-	IsPlaying(): boolean;
-	IsLooping(): boolean;
-	GetStartTimeOffset(): number;
-	GetPlaybackSpeed(): number;
-	GetPlaybackDirection(): number;
-	GetNumberOfFrames(): number;
-	GetDuration(): number;
-	GetAnimationTime(): number;
-	static C(Other: UObject | any): GeometryCacheComponent;
+declare class UnitTask extends UObject { 
+	static Load(ResourceName: string): UnitTask;
+	static Find(Outer: UObject, ResourceName: string): UnitTask;
+	static GetDefaultObject(): UnitTask;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnitTask;
+	static C(Other: UObject | any): UnitTask;
 }
 
-declare class GeometryCacheActor extends Actor { 
-	GeometryCacheComponent: GeometryCacheComponent;
-	static GetDefaultObject(): GeometryCacheActor;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheActor;
-	GetGeometryCacheComponent(): GeometryCacheComponent;
-	static C(Other: UObject | any): GeometryCacheActor;
+declare type EUnitTestVerification = 'Unverified' | 'VerifiedNotFixed' | 'VerifiedFixed' | 'VerifiedNeedsUpdate' | 'VerifiedUnreliable' | 'EUnitTestVerification_MAX';
+declare var EUnitTestVerification : { Unverified:'Unverified',VerifiedNotFixed:'VerifiedNotFixed',VerifiedFixed:'VerifiedFixed',VerifiedNeedsUpdate:'VerifiedNeedsUpdate',VerifiedUnreliable:'VerifiedUnreliable',EUnitTestVerification_MAX:'EUnitTestVerification_MAX', };
+declare class UnitTest extends UnitTestBase { 
+	PeakMemoryUsage: any;
+	TimeToPeakMem: number;
+	LastExecutionTime: number;
+	UnitTasks: UnitTask[];
+	VerificationState: EUnitTestVerification;
+	static Load(ResourceName: string): UnitTest;
+	static Find(Outer: UObject, ResourceName: string): UnitTest;
+	static GetDefaultObject(): UnitTest;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnitTest;
+	static C(Other: UObject | any): UnitTest;
 }
 
-declare class GeometryCacheCodecBase extends UObject { 
-	TopologyRanges: number[];
-	static Load(ResourceName: string): GeometryCacheCodecBase;
-	static Find(Outer: UObject, ResourceName: string): GeometryCacheCodecBase;
-	static GetDefaultObject(): GeometryCacheCodecBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheCodecBase;
-	static C(Other: UObject | any): GeometryCacheCodecBase;
+declare class ProcessUnitTest extends UnitTest { 
+	static Load(ResourceName: string): ProcessUnitTest;
+	static Find(Outer: UObject, ResourceName: string): ProcessUnitTest;
+	static GetDefaultObject(): ProcessUnitTest;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ProcessUnitTest;
+	static C(Other: UObject | any): ProcessUnitTest;
 }
 
-declare class GeometryCacheCodecRaw extends GeometryCacheCodecBase { 
-	DummyProperty: number;
-	static Load(ResourceName: string): GeometryCacheCodecRaw;
-	static Find(Outer: UObject, ResourceName: string): GeometryCacheCodecRaw;
-	static GetDefaultObject(): GeometryCacheCodecRaw;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheCodecRaw;
-	static C(Other: UObject | any): GeometryCacheCodecRaw;
+declare class MinimalClient extends UObject { 
+	static Load(ResourceName: string): MinimalClient;
+	static Find(Outer: UObject, ResourceName: string): MinimalClient;
+	static GetDefaultObject(): MinimalClient;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MinimalClient;
+	static C(Other: UObject | any): MinimalClient;
 }
 
-declare class GeometryCacheCodecV1 extends GeometryCacheCodecBase { 
-	static Load(ResourceName: string): GeometryCacheCodecV1;
-	static Find(Outer: UObject, ResourceName: string): GeometryCacheCodecV1;
-	static GetDefaultObject(): GeometryCacheCodecV1;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheCodecV1;
-	static C(Other: UObject | any): GeometryCacheCodecV1;
+declare class ClientUnitTest extends ProcessUnitTest { 
+	MinClient: MinimalClient;
+	static Load(ResourceName: string): ClientUnitTest;
+	static Find(Outer: UObject, ResourceName: string): ClientUnitTest;
+	static GetDefaultObject(): ClientUnitTest;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClientUnitTest;
+	static C(Other: UObject | any): ClientUnitTest;
 }
 
-declare class GeometryCacheMeshData { 
-	clone() : GeometryCacheMeshData;
-	static C(Other: UObject | any): GeometryCacheMeshData;
+declare class IPClient extends ClientUnitTest { 
+	static Load(ResourceName: string): IPClient;
+	static Find(Outer: UObject, ResourceName: string): IPClient;
+	static GetDefaultObject(): IPClient;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): IPClient;
+	static C(Other: UObject | any): IPClient;
 }
 
-declare class GeometryCacheTrack_FlipbookAnimation extends GeometryCacheTrack { 
-	NumMeshSamples: any;
-	static Load(ResourceName: string): GeometryCacheTrack_FlipbookAnimation;
-	static Find(Outer: UObject, ResourceName: string): GeometryCacheTrack_FlipbookAnimation;
-	static GetDefaultObject(): GeometryCacheTrack_FlipbookAnimation;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheTrack_FlipbookAnimation;
-	AddMeshSample(MeshData: GeometryCacheMeshData,SampleTime: number): void;
-	static C(Other: UObject | any): GeometryCacheTrack_FlipbookAnimation;
+declare class HTML5Client extends IPClient { 
+	static Load(ResourceName: string): HTML5Client;
+	static Find(Outer: UObject, ResourceName: string): HTML5Client;
+	static GetDefaultObject(): HTML5Client;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HTML5Client;
+	static C(Other: UObject | any): HTML5Client;
 }
 
-declare class GeometryCacheTrackStreamable extends GeometryCacheTrack { 
-	Codec: GeometryCacheCodecBase;
-	StartSampleTime: number;
-	static Load(ResourceName: string): GeometryCacheTrackStreamable;
-	static Find(Outer: UObject, ResourceName: string): GeometryCacheTrackStreamable;
-	static GetDefaultObject(): GeometryCacheTrackStreamable;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheTrackStreamable;
-	static C(Other: UObject | any): GeometryCacheTrackStreamable;
+declare class NUTActor extends Actor { 
+	TempDelegate: UnrealEngineDelegate<(InNUTActor: NUTActor) => void>;
+	static GetDefaultObject(): NUTActor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NUTActor;
+	Wait(Seconds: any): void;
+	UnitTravel(Dest: string): void;
+	UnitSeamlessTravel(Dest: string): void;
+	ServerReceiveText(InText: string): void;
+	ServerExecute(InDelegate: string): void;
+	ServerClientStillAlive(): void;
+	ServerClientPing(): void;
+	ServerAdmin(Command: string): void;
+	NetMulticastPing(): void;
+	NetFlush(): void;
+	Admin(Command: string): void;
+	static C(Other: UObject | any): NUTActor;
+}
+
+declare class NUTGlobals extends UObject { 
+	EventWatcher: NetConnection;
+	ServerPortOffset: number;
+	UnitTestNetDriverCount: number;
+	DumpRPCMatches: string[];
+	UnitTestModules: string[];
+	UnloadedModules: string[];
+	static Load(ResourceName: string): NUTGlobals;
+	static Find(Outer: UObject, ResourceName: string): NUTGlobals;
+	static GetDefaultObject(): NUTGlobals;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NUTGlobals;
+	static C(Other: UObject | any): NUTGlobals;
 }
 
-declare class GeometryCacheTrack_TransformAnimation extends GeometryCacheTrack { 
-	static Load(ResourceName: string): GeometryCacheTrack_TransformAnimation;
-	static Find(Outer: UObject, ResourceName: string): GeometryCacheTrack_TransformAnimation;
-	static GetDefaultObject(): GeometryCacheTrack_TransformAnimation;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheTrack_TransformAnimation;
-	SetMesh(NewMeshData: GeometryCacheMeshData): void;
-	static C(Other: UObject | any): GeometryCacheTrack_TransformAnimation;
+declare class PackedVectorTest extends UnitTest { 
+	static Load(ResourceName: string): PackedVectorTest;
+	static Find(Outer: UObject, ResourceName: string): PackedVectorTest;
+	static GetDefaultObject(): PackedVectorTest;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PackedVectorTest;
+	static C(Other: UObject | any): PackedVectorTest;
 }
 
-declare class GeometryCacheTrack_TransformGroupAnimation extends GeometryCacheTrack { 
-	static Load(ResourceName: string): GeometryCacheTrack_TransformGroupAnimation;
-	static Find(Outer: UObject, ResourceName: string): GeometryCacheTrack_TransformGroupAnimation;
-	static GetDefaultObject(): GeometryCacheTrack_TransformGroupAnimation;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheTrack_TransformGroupAnimation;
-	SetMesh(NewMeshData: GeometryCacheMeshData): void;
-	static C(Other: UObject | any): GeometryCacheTrack_TransformGroupAnimation;
+declare class SteamClient extends IPClient { 
+	static Load(ResourceName: string): SteamClient;
+	static Find(Outer: UObject, ResourceName: string): SteamClient;
+	static GetDefaultObject(): SteamClient;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SteamClient;
+	static C(Other: UObject | any): SteamClient;
 }
 
-declare type EAlembicSamplingType = 'PerFrame' | 'PerXFrames' | 'PerTimeStep' | 'EAlembicSamplingType_MAX';
-declare var EAlembicSamplingType : { PerFrame:'PerFrame',PerXFrames:'PerXFrames',PerTimeStep:'PerTimeStep',EAlembicSamplingType_MAX:'EAlembicSamplingType_MAX', };
-declare class AbcSamplingSettings { 
-	SamplingType: EAlembicSamplingType;
-	FrameSteps: number;
-	TimeSteps: number;
-	FrameStart: number;
-	FrameEnd: number;
-	bSkipEmpty: boolean;
-	clone() : AbcSamplingSettings;
-	static C(Other: UObject | any): AbcSamplingSettings;
+declare class UnitTestActorChannel extends ActorChannel { 
+	static Load(ResourceName: string): UnitTestActorChannel;
+	static Find(Outer: UObject, ResourceName: string): UnitTestActorChannel;
+	static GetDefaultObject(): UnitTestActorChannel;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnitTestActorChannel;
+	static C(Other: UObject | any): UnitTestActorChannel;
 }
 
-declare class AbcAssetImportData extends AssetImportData { 
-	TrackNames: string[];
-	SamplingSettings: AbcSamplingSettings;
-	static Load(ResourceName: string): AbcAssetImportData;
-	static Find(Outer: UObject, ResourceName: string): AbcAssetImportData;
-	static GetDefaultObject(): AbcAssetImportData;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AbcAssetImportData;
-	static C(Other: UObject | any): AbcAssetImportData;
+declare class UnitTestChannel extends Channel { 
+	static Load(ResourceName: string): UnitTestChannel;
+	static Find(Outer: UObject, ResourceName: string): UnitTestChannel;
+	static GetDefaultObject(): UnitTestChannel;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnitTestChannel;
+	static C(Other: UObject | any): UnitTestChannel;
 }
 
-declare type EAlembicImportType = 'StaticMesh' | 'GeometryCache' | 'Skeletal' | 'EAlembicImportType_MAX';
-declare var EAlembicImportType : { StaticMesh:'StaticMesh',GeometryCache:'GeometryCache',Skeletal:'Skeletal',EAlembicImportType_MAX:'EAlembicImportType_MAX', };
-declare class AbcNormalGenerationSettings { 
-	bForceOneSmoothingGroupPerObject: boolean;
-	HardEdgeAngleThreshold: number;
-	bRecomputeNormals: boolean;
-	bIgnoreDegenerateTriangles: boolean;
-	clone() : AbcNormalGenerationSettings;
-	static C(Other: UObject | any): AbcNormalGenerationSettings;
+declare class UnitTestCommandlet extends Commandlet { 
+	static Load(ResourceName: string): UnitTestCommandlet;
+	static Find(Outer: UObject, ResourceName: string): UnitTestCommandlet;
+	static GetDefaultObject(): UnitTestCommandlet;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnitTestCommandlet;
+	static C(Other: UObject | any): UnitTestCommandlet;
 }
 
-declare class AbcMaterialSettings { 
-	bCreateMaterials: boolean;
-	bFindMaterials: boolean;
-	clone() : AbcMaterialSettings;
-	static C(Other: UObject | any): AbcMaterialSettings;
+declare class UnitTestManager extends UObject { 
+	bCapUnitTestCount: boolean;
+	MaxUnitTestCount: number;
+	bCapUnitTestMemory: boolean;
+	MaxMemoryPercent: number;
+	AutoCloseMemoryPercent: number;
+	MaxAutoCloseCount: number;
+	UnitTestSessionCount: any;
+	PendingUnitTests: UnrealEngineClass[];
+	ActiveUnitTests: UnitTest[];
+	FinishedUnitTests: UnitTest[];
+	static Load(ResourceName: string): UnitTestManager;
+	static Find(Outer: UObject, ResourceName: string): UnitTestManager;
+	static GetDefaultObject(): UnitTestManager;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnitTestManager;
+	static C(Other: UObject | any): UnitTestManager;
 }
 
-declare type EBaseCalculationType = 'PercentageBased' | 'FixedNumber' | 'EBaseCalculationType_MAX';
-declare var EBaseCalculationType : { PercentageBased:'PercentageBased',FixedNumber:'FixedNumber',EBaseCalculationType_MAX:'EBaseCalculationType_MAX', };
-declare class AbcCompressionSettings { 
-	bMergeMeshes: boolean;
-	bBakeMatrixAnimation: boolean;
-	BaseCalculationType: EBaseCalculationType;
-	PercentageOfTotalBases: number;
-	MaxNumberOfBases: number;
-	MinimumNumberOfVertexInfluencePercentage: number;
-	clone() : AbcCompressionSettings;
-	static C(Other: UObject | any): AbcCompressionSettings;
+declare class UnitTestPackageMap extends PackageMapClient { 
+	static Load(ResourceName: string): UnitTestPackageMap;
+	static Find(Outer: UObject, ResourceName: string): UnitTestPackageMap;
+	static GetDefaultObject(): UnitTestPackageMap;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnitTestPackageMap;
+	static C(Other: UObject | any): UnitTestPackageMap;
 }
 
-declare class AbcStaticMeshSettings { 
-	bMergeMeshes: boolean;
-	bPropagateMatrixTransformations: boolean;
-	bGenerateLightmapUVs: boolean;
-	clone() : AbcStaticMeshSettings;
-	static C(Other: UObject | any): AbcStaticMeshSettings;
+declare class VMReflection extends UnitTest { 
+	static Load(ResourceName: string): VMReflection;
+	static Find(Outer: UObject, ResourceName: string): VMReflection;
+	static GetDefaultObject(): VMReflection;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VMReflection;
+	static C(Other: UObject | any): VMReflection;
 }
 
-declare class AbcGeometryCacheSettings { 
-	bFlattenTracks: boolean;
-	bApplyConstantTopologyOptimizations: boolean;
-	bCalculateMotionVectorsDuringImport: boolean;
-	bOptimizeIndexBuffers: boolean;
-	CompressedPositionPrecision: number;
-	CompressedTextureCoordinatesNumberOfBits: number;
-	clone() : AbcGeometryCacheSettings;
-	static C(Other: UObject | any): AbcGeometryCacheSettings;
+declare class VMTestClassA extends UObject { 
+	AObjectRef: UObject;
+	ByteProp: number;
+	UInt16Prop: any;
+	UInt32Prop: any;
+	UInt64Prop: any;
+	Int8Prop: any;
+	Int16Prop: any;
+	Int32Prop: number;
+	Int64Prop: any;
+	FloatProp: number;
+	DoubleProp: any;
+	bBoolPropA: boolean;
+	bBoolPropB: boolean;
+	bBoolPropC: boolean;
+	bBoolPropD: boolean;
+	bBoolPropE: boolean;
+	NameProp: string;
+	StringProp: string;
+	TextProp: string;
+	BytePropArray: number;
+	ObjectPropArray: UObject;
+	DynBytePropArray: number[];
+	DynBoolPropArray: boolean[];
+	DynObjectPropArray: UObject[];
+	DynNamePropArray: string[];
+	DynDoublePropArray: any[];
+	DynFloatPropArray: number[];
+	DynInt16PropArray: any[];
+	DynInt64PropArray: any[];
+	DynInt8PropArray: any[];
+	DynIntPropArray: number[];
+	DynUInt16PropArray: any[];
+	DynUIntPropArray: any[];
+	DynUInt64PropArray: any[];
+	DynStringPropArray: string[];
+	DynTextPropArray: string[];
+	DynClassPropArray: UnrealEngineClass[];
+	DynPawnPropArray: Pawn[];
+	StructProp: Vector;
+	StructPropArray: Vector;
+	DynStructPropArray: Vector[];
+	static Load(ResourceName: string): VMTestClassA;
+	static Find(Outer: UObject, ResourceName: string): VMTestClassA;
+	static GetDefaultObject(): VMTestClassA;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VMTestClassA;
+	static C(Other: UObject | any): VMTestClassA;
 }
 
-declare type EAbcConversionPreset = 'Maya' | 'Max' | 'Custom' | 'EAbcConversionPreset_MAX';
-declare var EAbcConversionPreset : { Maya:'Maya',Max:'Max',Custom:'Custom',EAbcConversionPreset_MAX:'EAbcConversionPreset_MAX', };
-declare class AbcConversionSettings { 
-	Preset: EAbcConversionPreset;
-	bFlipU: boolean;
-	bFlipV: boolean;
-	Scale: Vector;
-	Rotation: Vector;
-	clone() : AbcConversionSettings;
-	static C(Other: UObject | any): AbcConversionSettings;
+declare class VMTestClassB extends UObject { 
+	BObjectRef: UObject;
+	static Load(ResourceName: string): VMTestClassB;
+	static Find(Outer: UObject, ResourceName: string): VMTestClassB;
+	static GetDefaultObject(): VMTestClassB;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VMTestClassB;
+	static C(Other: UObject | any): VMTestClassB;
 }
 
-declare class AbcImportSettings extends UObject { 
-	ImportType: EAlembicImportType;
-	SamplingSettings: AbcSamplingSettings;
-	NormalGenerationSettings: AbcNormalGenerationSettings;
-	MaterialSettings: AbcMaterialSettings;
-	CompressionSettings: AbcCompressionSettings;
-	StaticMeshSettings: AbcStaticMeshSettings;
-	GeometryCacheSettings: AbcGeometryCacheSettings;
-	ConversionSettings: AbcConversionSettings;
-	static Load(ResourceName: string): AbcImportSettings;
-	static Find(Outer: UObject, ResourceName: string): AbcImportSettings;
-	static GetDefaultObject(): AbcImportSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AbcImportSettings;
-	static C(Other: UObject | any): AbcImportSettings;
+declare class FTextCrash extends ClientUnitTest { 
+	static Load(ResourceName: string): FTextCrash;
+	static Find(Outer: UObject, ResourceName: string): FTextCrash;
+	static GetDefaultObject(): FTextCrash;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FTextCrash;
+	static C(Other: UObject | any): FTextCrash;
 }
 
-declare class AlembicTestCommandlet extends Commandlet { 
-	static Load(ResourceName: string): AlembicTestCommandlet;
-	static Find(Outer: UObject, ResourceName: string): AlembicTestCommandlet;
-	static GetDefaultObject(): AlembicTestCommandlet;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AlembicTestCommandlet;
-	static C(Other: UObject | any): AlembicTestCommandlet;
+declare class NetBitsTest extends UnitTest { 
+	static Load(ResourceName: string): NetBitsTest;
+	static Find(Outer: UObject, ResourceName: string): NetBitsTest;
+	static GetDefaultObject(): NetBitsTest;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NetBitsTest;
+	static C(Other: UObject | any): NetBitsTest;
 }
 
-declare class AlembicImportFactory extends Factory { 
-	ImportSettings: AbcImportSettings;
-	bShowOption: boolean;
-	static Load(ResourceName: string): AlembicImportFactory;
-	static Find(Outer: UObject, ResourceName: string): AlembicImportFactory;
-	static GetDefaultObject(): AlembicImportFactory;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AlembicImportFactory;
-	static C(Other: UObject | any): AlembicImportFactory;
+declare class UTT61_DebugReplicateData extends ClientUnitTest { 
+	static Load(ResourceName: string): UTT61_DebugReplicateData;
+	static Find(Outer: UObject, ResourceName: string): UTT61_DebugReplicateData;
+	static GetDefaultObject(): UTT61_DebugReplicateData;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UTT61_DebugReplicateData;
+	static C(Other: UObject | any): UTT61_DebugReplicateData;
 }
 
-declare class ActorFactoryGeometryCache extends ActorFactory { 
-	static Load(ResourceName: string): ActorFactoryGeometryCache;
-	static Find(Outer: UObject, ResourceName: string): ActorFactoryGeometryCache;
-	static GetDefaultObject(): ActorFactoryGeometryCache;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorFactoryGeometryCache;
-	static C(Other: UObject | any): ActorFactoryGeometryCache;
+declare class AndroidPermissionCallbackProxy extends UObject { 
+	OnPermissionsGrantedDynamicDelegate: UnrealEngineMulticastDelegate<(Permissions: string[], GrantResults: boolean[]) => void>;
+	static Load(ResourceName: string): AndroidPermissionCallbackProxy;
+	static Find(Outer: UObject, ResourceName: string): AndroidPermissionCallbackProxy;
+	static GetDefaultObject(): AndroidPermissionCallbackProxy;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AndroidPermissionCallbackProxy;
+	static C(Other: UObject | any): AndroidPermissionCallbackProxy;
 }
 
-declare class GeometryCacheThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
-	static Load(ResourceName: string): GeometryCacheThumbnailRenderer;
-	static Find(Outer: UObject, ResourceName: string): GeometryCacheThumbnailRenderer;
-	static GetDefaultObject(): GeometryCacheThumbnailRenderer;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCacheThumbnailRenderer;
-	static C(Other: UObject | any): GeometryCacheThumbnailRenderer;
+declare class AndroidPermissionFunctionLibrary extends BlueprintFunctionLibrary { 
+	static Load(ResourceName: string): AndroidPermissionFunctionLibrary;
+	static Find(Outer: UObject, ResourceName: string): AndroidPermissionFunctionLibrary;
+	static GetDefaultObject(): AndroidPermissionFunctionLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AndroidPermissionFunctionLibrary;
+	static CheckPermission(permission: string): boolean;
+	static AcquirePermissions(Permissions: string[]): AndroidPermissionCallbackProxy;
+	static C(Other: UObject | any): AndroidPermissionFunctionLibrary;
 }
 
 declare class AppleImageUtilsImageConversionResult { 
@@ -9393,613 +13800,1664 @@ declare class K2Node_ConvertToPNG extends K2Node_BaseAsyncTask {
 	static C(Other: UObject | any): K2Node_ConvertToPNG;
 }
 
-declare class DetectedFeature { 
-	Confidence: number;
-	clone() : DetectedFeature;
-	static C(Other: UObject | any): DetectedFeature;
+declare class ArchVisCharacter extends Character { 
+	LookUpAxisName: string;
+	LookUpAtRateAxisName: string;
+	TurnAxisName: string;
+	TurnAtRateAxisName: string;
+	MoveForwardAxisName: string;
+	MoveRightAxisName: string;
+	MouseSensitivityScale_Pitch: number;
+	MouseSensitivityScale_Yaw: number;
+	static GetDefaultObject(): ArchVisCharacter;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ArchVisCharacter;
+	static C(Other: UObject | any): ArchVisCharacter;
 }
 
-declare class DetectedFeatureRegion extends DetectedFeature { 
-	Points: Vector2D[];
-	clone() : DetectedFeatureRegion;
-	static C(Other: UObject | any): DetectedFeatureRegion;
+declare class ArchVisCharMovementComponent extends CharacterMovementComponent { 
+	RotationalAcceleration: Rotator;
+	RotationalDeceleration: Rotator;
+	MaxRotationalVelocity: Rotator;
+	MinPitch: number;
+	MaxPitch: number;
+	WalkingFriction: number;
+	WalkingSpeed: number;
+	WalkingAcceleration: number;
+	static Load(ResourceName: string): ArchVisCharMovementComponent;
+	static Find(Outer: UObject, ResourceName: string): ArchVisCharMovementComponent;
+	static GetDefaultObject(): ArchVisCharMovementComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ArchVisCharMovementComponent;
+	static C(Other: UObject | any): ArchVisCharMovementComponent;
 }
 
-declare class DetectedFeature2D extends DetectedFeature { 
-	BoundingBox: Box2D;
-	clone() : DetectedFeature2D;
-	static C(Other: UObject | any): DetectedFeature2D;
+declare class AudioCaptureDeviceInfo { 
+	DeviceName: string;
+	NumInputChannels: number;
+	SampleRate: number;
+	clone() : AudioCaptureDeviceInfo;
+	static C(Other: UObject | any): AudioCaptureDeviceInfo;
 }
 
-declare type EDetectedFaceFeatureType = 'Unkown' | 'FaceContour' | 'InnerLips' | 'LeftEye' | 'LeftEyebrow' | 'LeftPupil' | 'MedianLine' | 'Nose' | 'NoseCrest' | 'OuterLips' | 'RightEye' | 'RightEyebrow' | 'RightPupil' | 'EDetectedFaceFeatureType_MAX';
-declare var EDetectedFaceFeatureType : { Unkown:'Unkown',FaceContour:'FaceContour',InnerLips:'InnerLips',LeftEye:'LeftEye',LeftEyebrow:'LeftEyebrow',LeftPupil:'LeftPupil',MedianLine:'MedianLine',Nose:'Nose',NoseCrest:'NoseCrest',OuterLips:'OuterLips',RightEye:'RightEye',RightEyebrow:'RightEyebrow',RightPupil:'RightPupil',EDetectedFaceFeatureType_MAX:'EDetectedFaceFeatureType_MAX', };
-declare class DetectedFaceFeature2D extends DetectedFeature2D { 
-	FeatureType: EDetectedFaceFeatureType;
-	clone() : DetectedFaceFeature2D;
-	static C(Other: UObject | any): DetectedFaceFeature2D;
+declare class AudioCapture extends AudioGenerator { 
+	static Load(ResourceName: string): AudioCapture;
+	static Find(Outer: UObject, ResourceName: string): AudioCapture;
+	static GetDefaultObject(): AudioCapture;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioCapture;
+	StopCapturingAudio(): void;
+	StartCapturingAudio(): void;
+	IsCapturingAudio(): boolean;
+	GetAudioCaptureDeviceInfo(OutInfo?: AudioCaptureDeviceInfo): {OutInfo: AudioCaptureDeviceInfo, $: boolean};
+	static C(Other: UObject | any): AudioCapture;
 }
 
-declare class DetectedFaceFeatureRegion extends DetectedFeatureRegion { 
-	FeatureType: EDetectedFaceFeatureType;
-	clone() : DetectedFaceFeatureRegion;
-	static C(Other: UObject | any): DetectedFaceFeatureRegion;
+declare class AudioCaptureFunctionLibrary extends BlueprintFunctionLibrary { 
+	static Load(ResourceName: string): AudioCaptureFunctionLibrary;
+	static Find(Outer: UObject, ResourceName: string): AudioCaptureFunctionLibrary;
+	static GetDefaultObject(): AudioCaptureFunctionLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioCaptureFunctionLibrary;
+	static CreateAudioCapture(): AudioCapture;
+	static C(Other: UObject | any): AudioCaptureFunctionLibrary;
 }
 
-declare class DetectedFace extends DetectedFeatureRegion { 
-	BoundingBox: Box2D;
-	Features: DetectedFaceFeature2D[];
-	FeatureRegions: DetectedFaceFeatureRegion[];
-	clone() : DetectedFace;
-	static C(Other: UObject | any): DetectedFace;
+declare class AudioCaptureComponent extends SynthComponent { 
+	JitterLatencyFrames: number;
+	static Load(ResourceName: string): AudioCaptureComponent;
+	static Find(Outer: UObject, ResourceName: string): AudioCaptureComponent;
+	static GetDefaultObject(): AudioCaptureComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioCaptureComponent;
+	static C(Other: UObject | any): AudioCaptureComponent;
 }
 
-declare class FaceDetectionResult { 
-	DetectedFaces: DetectedFace[];
-	clone() : FaceDetectionResult;
-	static C(Other: UObject | any): FaceDetectionResult;
+declare class ComponentReference { 
+	OtherActor: Actor;
+	ComponentProperty: string;
+	PathToComponent: string;
+	clone() : ComponentReference;
+	static C(Other: UObject | any): ComponentReference;
 }
 
-declare class AppleVisionDetectFacesAsyncTaskBlueprintProxy extends UObject { 
-	OnSuccess: UnrealEngineMulticastDelegate<(FaceDetectionResult: FaceDetectionResult) => void>;
-	OnFailure: UnrealEngineMulticastDelegate<(FaceDetectionResult: FaceDetectionResult) => void>;
-	FaceDetectionResult: FaceDetectionResult;
-	static Load(ResourceName: string): AppleVisionDetectFacesAsyncTaskBlueprintProxy;
-	static Find(Outer: UObject, ResourceName: string): AppleVisionDetectFacesAsyncTaskBlueprintProxy;
-	static GetDefaultObject(): AppleVisionDetectFacesAsyncTaskBlueprintProxy;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AppleVisionDetectFacesAsyncTaskBlueprintProxy;
-	static CreateProxyObjectForDetectFaces(SourceImage: Texture): AppleVisionDetectFacesAsyncTaskBlueprintProxy;
-	static C(Other: UObject | any): AppleVisionDetectFacesAsyncTaskBlueprintProxy;
+declare class CableComponent extends MeshComponent { 
+	bAttachStart: boolean;
+	bAttachEnd: boolean;
+	AttachEndTo: ComponentReference;
+	AttachEndToSocketName: string;
+	EndLocation: Vector;
+	CableLength: number;
+	NumSegments: number;
+	SubstepTime: number;
+	SolverIterations: number;
+	bEnableStiffness: boolean;
+	bEnableCollision: boolean;
+	CollisionFriction: number;
+	CableForce: Vector;
+	CableGravityScale: number;
+	CableWidth: number;
+	NumSides: number;
+	TileMaterial: number;
+	static Load(ResourceName: string): CableComponent;
+	static Find(Outer: UObject, ResourceName: string): CableComponent;
+	static GetDefaultObject(): CableComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CableComponent;
+	SetAttachEndToComponent(Component: SceneComponent,SocketName: string): void;
+	SetAttachEndTo(Actor: Actor,ComponentProperty: string,SocketName: string): void;
+	GetCableParticleLocations(Locations?: Vector[]): {Locations: Vector[]};
+	GetAttachedComponent(): SceneComponent;
+	GetAttachedActor(): Actor;
+	static C(Other: UObject | any): CableComponent;
 }
 
-declare class MovieSceneGeometryCacheParams { 
-	GeometryCache: SoftObjectPath;
-	StartOffset: number;
-	EndOffset: number;
-	PlayRate: number;
-	bReverse: boolean;
-	clone() : MovieSceneGeometryCacheParams;
-	static C(Other: UObject | any): MovieSceneGeometryCacheParams;
+declare class CableActor extends Actor { 
+	CableComponent: CableComponent;
+	static GetDefaultObject(): CableActor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CableActor;
+	static C(Other: UObject | any): CableActor;
 }
 
-declare class MovieSceneGeometryCacheSection extends MovieSceneSection { 
-	Params: MovieSceneGeometryCacheParams;
-	static Load(ResourceName: string): MovieSceneGeometryCacheSection;
-	static Find(Outer: UObject, ResourceName: string): MovieSceneGeometryCacheSection;
-	static GetDefaultObject(): MovieSceneGeometryCacheSection;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneGeometryCacheSection;
-	static C(Other: UObject | any): MovieSceneGeometryCacheSection;
+declare class CustomMeshTriangle { 
+	Vertex0: Vector;
+	Vertex1: Vector;
+	Vertex2: Vector;
+	clone() : CustomMeshTriangle;
+	static C(Other: UObject | any): CustomMeshTriangle;
 }
 
-declare class MovieSceneGeometryCacheTrack extends MovieSceneNameableTrack { 
-	AnimationSections: MovieSceneSection[];
-	static Load(ResourceName: string): MovieSceneGeometryCacheTrack;
-	static Find(Outer: UObject, ResourceName: string): MovieSceneGeometryCacheTrack;
-	static GetDefaultObject(): MovieSceneGeometryCacheTrack;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneGeometryCacheTrack;
-	static C(Other: UObject | any): MovieSceneGeometryCacheTrack;
+declare class CustomMeshComponent extends MeshComponent { 
+	static Load(ResourceName: string): CustomMeshComponent;
+	static Find(Outer: UObject, ResourceName: string): CustomMeshComponent;
+	static GetDefaultObject(): CustomMeshComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CustomMeshComponent;
+	SetCustomMeshTriangles(Triangles: CustomMeshTriangle[]): boolean;
+	ClearCustomMeshTriangles(): void;
+	AddCustomMeshTriangles(Triangles: CustomMeshTriangle[]): void;
+	static C(Other: UObject | any): CustomMeshComponent;
 }
 
-declare class WebSocketConnection extends NetConnection { 
-	static Load(ResourceName: string): WebSocketConnection;
-	static Find(Outer: UObject, ResourceName: string): WebSocketConnection;
-	static GetDefaultObject(): WebSocketConnection;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WebSocketConnection;
-	static C(Other: UObject | any): WebSocketConnection;
+declare class ChaosEventListenerComponent extends ActorComponent { 
+	static Load(ResourceName: string): ChaosEventListenerComponent;
+	static Find(Outer: UObject, ResourceName: string): ChaosEventListenerComponent;
+	static GetDefaultObject(): ChaosEventListenerComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ChaosEventListenerComponent;
+	static C(Other: UObject | any): ChaosEventListenerComponent;
 }
 
-declare class WebSocketNetDriver extends NetDriver { 
-	WebSocketPort: number;
-	static Load(ResourceName: string): WebSocketNetDriver;
-	static Find(Outer: UObject, ResourceName: string): WebSocketNetDriver;
-	static GetDefaultObject(): WebSocketNetDriver;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WebSocketNetDriver;
-	static C(Other: UObject | any): WebSocketNetDriver;
+declare class ChaosGameplayEventDispatcher extends ChaosEventListenerComponent { 
+	CollisionEventRegistrations: any;
+	BreakEventRegistrations: any;
+	static Load(ResourceName: string): ChaosGameplayEventDispatcher;
+	static Find(Outer: UObject, ResourceName: string): ChaosGameplayEventDispatcher;
+	static GetDefaultObject(): ChaosGameplayEventDispatcher;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ChaosGameplayEventDispatcher;
+	static C(Other: UObject | any): ChaosGameplayEventDispatcher;
 }
 
-declare class ImgMediaSettings extends UObject { 
-	DefaultFrameRate: FrameRate;
-	CacheBehindPercentage: number;
-	CacheSizeGB: number;
-	CacheThreads: number;
-	CacheThreadStackSizeKB: number;
-	ExrDecoderThreads: any;
-	DefaultProxy: string;
-	UseDefaultProxy: boolean;
-	static Load(ResourceName: string): ImgMediaSettings;
-	static Find(Outer: UObject, ResourceName: string): ImgMediaSettings;
-	static GetDefaultObject(): ImgMediaSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImgMediaSettings;
-	static C(Other: UObject | any): ImgMediaSettings;
+declare class ChaosNotifyHandlerInterface extends Interface { 
+	static Load(ResourceName: string): ChaosNotifyHandlerInterface;
+	static Find(Outer: UObject, ResourceName: string): ChaosNotifyHandlerInterface;
+	static GetDefaultObject(): ChaosNotifyHandlerInterface;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ChaosNotifyHandlerInterface;
+	static C(Other: UObject | any): ChaosNotifyHandlerInterface;
 }
 
-declare class ImgMediaSource extends BaseMediaSource { 
-	FrameRateOverride: FrameRate;
-	ProxyOverride: string;
-	SequencePath: DirectoryPath;
-	static Load(ResourceName: string): ImgMediaSource;
-	static Find(Outer: UObject, ResourceName: string): ImgMediaSource;
-	static GetDefaultObject(): ImgMediaSource;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImgMediaSource;
-	SetSequencePath(Path: string): void;
-	GetSequencePath(): string;
-	GetProxies(OutProxies?: string[]): {OutProxies: string[]};
-	static C(Other: UObject | any): ImgMediaSource;
+declare class ChaosPhysicsCollisionInfo { 
+	Component: PrimitiveComponent;
+	OtherComponent: PrimitiveComponent;
+	Location: Vector;
+	Normal: Vector;
+	AccumulatedImpulse: Vector;
+	Velocity: Vector;
+	OtherVelocity: Vector;
+	AngularVelocity: Vector;
+	OtherAngularVelocity: Vector;
+	Mass: number;
+	OtherMass: number;
+	clone() : ChaosPhysicsCollisionInfo;
+	static C(Other: UObject | any): ChaosPhysicsCollisionInfo;
+	ConvertPhysicsCollisionToHitResult(): HitResult;
+	static ConvertPhysicsCollisionToHitResult(PhysicsCollision: ChaosPhysicsCollisionInfo): HitResult;
+}
+
+declare class ChaosSolverEngineBlueprintLibrary extends BlueprintFunctionLibrary { 
+	static Load(ResourceName: string): ChaosSolverEngineBlueprintLibrary;
+	static Find(Outer: UObject, ResourceName: string): ChaosSolverEngineBlueprintLibrary;
+	static GetDefaultObject(): ChaosSolverEngineBlueprintLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ChaosSolverEngineBlueprintLibrary;
+	static ConvertPhysicsCollisionToHitResult(PhysicsCollision: ChaosPhysicsCollisionInfo): HitResult;
+	static C(Other: UObject | any): ChaosSolverEngineBlueprintLibrary;
+}
+
+declare class ChaosSolver extends UObject { 
+	static Load(ResourceName: string): ChaosSolver;
+	static Find(Outer: UObject, ResourceName: string): ChaosSolver;
+	static GetDefaultObject(): ChaosSolver;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ChaosSolver;
+	static C(Other: UObject | any): ChaosSolver;
+}
+
+declare type EClusterConnectionTypeEnum = 'Chaos_PointImplicit' | 'Chaos_DelaunayTriangulation' | 'Chaos_MinimalSpanningSubsetDelaunayTriangulation' | 'Chaos_PointImplicitAugmentedWithMinimalDelaunay' | 'Chaos_None' | 'Chaos_EClsuterCreationParameters_Max' | 'Chaos_MAX';
+declare var EClusterConnectionTypeEnum : { Chaos_PointImplicit:'Chaos_PointImplicit',Chaos_DelaunayTriangulation:'Chaos_DelaunayTriangulation',Chaos_MinimalSpanningSubsetDelaunayTriangulation:'Chaos_MinimalSpanningSubsetDelaunayTriangulation',Chaos_PointImplicitAugmentedWithMinimalDelaunay:'Chaos_PointImplicitAugmentedWithMinimalDelaunay',Chaos_None:'Chaos_None',Chaos_EClsuterCreationParameters_Max:'Chaos_EClsuterCreationParameters_Max',Chaos_MAX:'Chaos_MAX', };
+declare class SolverCollisionFilterSettings { 
+	FilterEnabled: boolean;
+	MinMass: number;
+	MinSpeed: number;
+	MinImpulse: number;
+	clone() : SolverCollisionFilterSettings;
+	static C(Other: UObject | any): SolverCollisionFilterSettings;
+}
+
+declare class SolverBreakingFilterSettings { 
+	FilterEnabled: boolean;
+	MinMass: number;
+	MinSpeed: number;
+	MinVolume: number;
+	clone() : SolverBreakingFilterSettings;
+	static C(Other: UObject | any): SolverBreakingFilterSettings;
+}
+
+declare class SolverTrailingFilterSettings { 
+	FilterEnabled: boolean;
+	MinMass: number;
+	MinSpeed: number;
+	MinVolume: number;
+	clone() : SolverTrailingFilterSettings;
+	static C(Other: UObject | any): SolverTrailingFilterSettings;
+}
+
+declare class ChaosDebugSubstepControl { 
+	bPause: boolean;
+	bSubstep: boolean;
+	bStep: boolean;
+	clone() : ChaosDebugSubstepControl;
+	static C(Other: UObject | any): ChaosDebugSubstepControl;
+}
+
+declare class ChaosSolverActor extends Actor { 
+	TimeStepMultiplier: number;
+	CollisionIterations: number;
+	PushOutIterations: number;
+	PushOutPairIterations: number;
+	ClusterConnectionFactor: number;
+	ClusterUnionConnectionType: EClusterConnectionTypeEnum;
+	DoGenerateCollisionData: boolean;
+	CollisionFilterSettings: SolverCollisionFilterSettings;
+	DoGenerateBreakingData: boolean;
+	BreakingFilterSettings: SolverBreakingFilterSettings;
+	DoGenerateTrailingData: boolean;
+	TrailingFilterSettings: SolverTrailingFilterSettings;
+	bHasFloor: boolean;
+	FloorHeight: number;
+	MassScale: number;
+	ChaosDebugSubstepControl: ChaosDebugSubstepControl;
+	SpriteComponent: BillboardComponent;
+	GameplayEventDispatcherComponent: ChaosGameplayEventDispatcher;
+	static GetDefaultObject(): ChaosSolverActor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ChaosSolverActor;
+	SetSolverActive(bActive: boolean): void;
+	SetAsCurrentWorldSolver(): void;
+	static C(Other: UObject | any): ChaosSolverActor;
+}
+
+declare class ChaosSolverSettings extends DeveloperSettings { 
+	DefaultChaosSolverActorClass: SoftClassPath;
+	static Load(ResourceName: string): ChaosSolverSettings;
+	static Find(Outer: UObject, ResourceName: string): ChaosSolverSettings;
+	static GetDefaultObject(): ChaosSolverSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ChaosSolverSettings;
+	static C(Other: UObject | any): ChaosSolverSettings;
+}
+
+declare class FieldSystem extends UObject { 
+	static Load(ResourceName: string): FieldSystem;
+	static Find(Outer: UObject, ResourceName: string): FieldSystem;
+	static GetDefaultObject(): FieldSystem;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FieldSystem;
+	static C(Other: UObject | any): FieldSystem;
+}
+
+declare type EFieldPhysicsType = 'Field_DynamicState' | 'Field_LinearForce' | 'Field_ExternalClusterStrain' | 'Field_Kill' | 'Field_LinearVelocity' | 'Field_AngularVelociy' | 'Field_AngularTorque' | 'Field_InternalClusterStrain' | 'Field_DisableThreshold' | 'Field_SleepingThreshold' | 'Field_PositionStatic' | 'Field_PositionAnimated' | 'Field_PositionTarget' | 'Field_DynamicConstraint' | 'Field_CollisionGroup' | 'Field_ActivateDisabled' | 'Field_PhysicsType_Max';
+declare var EFieldPhysicsType : { Field_DynamicState:'Field_DynamicState',Field_LinearForce:'Field_LinearForce',Field_ExternalClusterStrain:'Field_ExternalClusterStrain',Field_Kill:'Field_Kill',Field_LinearVelocity:'Field_LinearVelocity',Field_AngularVelociy:'Field_AngularVelociy',Field_AngularTorque:'Field_AngularTorque',Field_InternalClusterStrain:'Field_InternalClusterStrain',Field_DisableThreshold:'Field_DisableThreshold',Field_SleepingThreshold:'Field_SleepingThreshold',Field_PositionStatic:'Field_PositionStatic',Field_PositionAnimated:'Field_PositionAnimated',Field_PositionTarget:'Field_PositionTarget',Field_DynamicConstraint:'Field_DynamicConstraint',Field_CollisionGroup:'Field_CollisionGroup',Field_ActivateDisabled:'Field_ActivateDisabled',Field_PhysicsType_Max:'Field_PhysicsType_Max', };
+declare class FieldSystemMetaData extends ActorComponent { 
+	static Load(ResourceName: string): FieldSystemMetaData;
+	static Find(Outer: UObject, ResourceName: string): FieldSystemMetaData;
+	static GetDefaultObject(): FieldSystemMetaData;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FieldSystemMetaData;
+	static C(Other: UObject | any): FieldSystemMetaData;
+}
+
+declare class FieldNodeBase extends ActorComponent { 
+	static Load(ResourceName: string): FieldNodeBase;
+	static Find(Outer: UObject, ResourceName: string): FieldNodeBase;
+	static GetDefaultObject(): FieldNodeBase;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FieldNodeBase;
+	static C(Other: UObject | any): FieldNodeBase;
+}
+
+declare class FieldSystemComponent extends PrimitiveComponent { 
+	FieldSystem: FieldSystem;
+	SupportedSolvers: ChaosSolverActor[];
+	static Load(ResourceName: string): FieldSystemComponent;
+	static Find(Outer: UObject, ResourceName: string): FieldSystemComponent;
+	static GetDefaultObject(): FieldSystemComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FieldSystemComponent;
+	ResetFieldSystem(): void;
+	ApplyUniformVectorFalloffForce(Enabled: boolean,Position: Vector,Direction: Vector,Radius: number,Magnitude: number): void;
+	ApplyStrainField(Enabled: boolean,Position: Vector,Radius: number,Magnitude: number,Iterations: number): void;
+	ApplyStayDynamicField(Enabled: boolean,Position: Vector,Radius: number): void;
+	ApplyRadialVectorFalloffForce(Enabled: boolean,Position: Vector,Radius: number,Magnitude: number): void;
+	ApplyRadialForce(Enabled: boolean,Position: Vector,Magnitude: number): void;
+	ApplyPhysicsField(Enabled: boolean,Target: EFieldPhysicsType,MetaData: FieldSystemMetaData,Field: FieldNodeBase): void;
+	ApplyLinearForce(Enabled: boolean,Direction: Vector,Magnitude: number): void;
+	AddFieldCommand(Enabled: boolean,Target: EFieldPhysicsType,MetaData: FieldSystemMetaData,Field: FieldNodeBase): void;
+	static C(Other: UObject | any): FieldSystemComponent;
+}
+
+declare class FieldSystemActor extends Actor { 
+	FieldSystemComponent: FieldSystemComponent;
+	static GetDefaultObject(): FieldSystemActor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FieldSystemActor;
+	static C(Other: UObject | any): FieldSystemActor;
+}
+
+declare class FieldSystemMetaDataIteration extends FieldSystemMetaData { 
+	Iterations: number;
+	static Load(ResourceName: string): FieldSystemMetaDataIteration;
+	static Find(Outer: UObject, ResourceName: string): FieldSystemMetaDataIteration;
+	static GetDefaultObject(): FieldSystemMetaDataIteration;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FieldSystemMetaDataIteration;
+	SetMetaDataIteration(Iterations: number): FieldSystemMetaDataIteration;
+	static C(Other: UObject | any): FieldSystemMetaDataIteration;
+}
+
+declare type EFieldResolutionType = 'Field_Resolution_Minimal' | 'Field_Resolution_DisabledParents' | 'Field_Resolution_Maximum' | 'Field_Resolution_Max';
+declare var EFieldResolutionType : { Field_Resolution_Minimal:'Field_Resolution_Minimal',Field_Resolution_DisabledParents:'Field_Resolution_DisabledParents',Field_Resolution_Maximum:'Field_Resolution_Maximum',Field_Resolution_Max:'Field_Resolution_Max', };
+declare class FieldSystemMetaDataProcessingResolution extends FieldSystemMetaData { 
+	ResolutionType: EFieldResolutionType;
+	static Load(ResourceName: string): FieldSystemMetaDataProcessingResolution;
+	static Find(Outer: UObject, ResourceName: string): FieldSystemMetaDataProcessingResolution;
+	static GetDefaultObject(): FieldSystemMetaDataProcessingResolution;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FieldSystemMetaDataProcessingResolution;
+	SetMetaDataaProcessingResolutionType(ResolutionType: EFieldResolutionType): FieldSystemMetaDataProcessingResolution;
+	static C(Other: UObject | any): FieldSystemMetaDataProcessingResolution;
+}
+
+declare class FieldNodeInt extends FieldNodeBase { 
+	static Load(ResourceName: string): FieldNodeInt;
+	static Find(Outer: UObject, ResourceName: string): FieldNodeInt;
+	static GetDefaultObject(): FieldNodeInt;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FieldNodeInt;
+	static C(Other: UObject | any): FieldNodeInt;
+}
+
+declare class FieldNodeFloat extends FieldNodeBase { 
+	static Load(ResourceName: string): FieldNodeFloat;
+	static Find(Outer: UObject, ResourceName: string): FieldNodeFloat;
+	static GetDefaultObject(): FieldNodeFloat;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FieldNodeFloat;
+	static C(Other: UObject | any): FieldNodeFloat;
+}
+
+declare class FieldNodeVector extends FieldNodeBase { 
+	static Load(ResourceName: string): FieldNodeVector;
+	static Find(Outer: UObject, ResourceName: string): FieldNodeVector;
+	static GetDefaultObject(): FieldNodeVector;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FieldNodeVector;
+	static C(Other: UObject | any): FieldNodeVector;
+}
+
+declare class UniformInteger extends FieldNodeInt { 
+	Magnitude: number;
+	static Load(ResourceName: string): UniformInteger;
+	static Find(Outer: UObject, ResourceName: string): UniformInteger;
+	static GetDefaultObject(): UniformInteger;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UniformInteger;
+	SetUniformInteger(Magnitude: number): UniformInteger;
+	static C(Other: UObject | any): UniformInteger;
+}
+
+declare type ESetMaskConditionType = 'Field_Set_Always' | 'Field_Set_IFF_NOT_Interior' | 'Field_Set_IFF_NOT_Exterior' | 'Field_MaskCondition_Max';
+declare var ESetMaskConditionType : { Field_Set_Always:'Field_Set_Always',Field_Set_IFF_NOT_Interior:'Field_Set_IFF_NOT_Interior',Field_Set_IFF_NOT_Exterior:'Field_Set_IFF_NOT_Exterior',Field_MaskCondition_Max:'Field_MaskCondition_Max', };
+declare class RadialIntMask extends FieldNodeInt { 
+	Radius: number;
+	Position: Vector;
+	InteriorValue: number;
+	ExteriorValue: number;
+	SetMaskCondition: ESetMaskConditionType;
+	static Load(ResourceName: string): RadialIntMask;
+	static Find(Outer: UObject, ResourceName: string): RadialIntMask;
+	static GetDefaultObject(): RadialIntMask;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RadialIntMask;
+	SetRadialIntMask(Radius: number,Position: Vector,InteriorValue: number,ExteriorValue: number,SetMaskConditionIn: ESetMaskConditionType): RadialIntMask;
+	static C(Other: UObject | any): RadialIntMask;
+}
+
+declare class UniformScalar extends FieldNodeFloat { 
+	Magnitude: number;
+	static Load(ResourceName: string): UniformScalar;
+	static Find(Outer: UObject, ResourceName: string): UniformScalar;
+	static GetDefaultObject(): UniformScalar;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UniformScalar;
+	SetUniformScalar(Magnitude: number): UniformScalar;
+	static C(Other: UObject | any): UniformScalar;
+}
+
+declare type EFieldFalloffType = 'Field_FallOff_None' | 'Field_Falloff_Linear' | 'Field_Falloff_Inverse' | 'Field_Falloff_Squared' | 'Field_Falloff_Logarithmic' | 'Field_Falloff_Max';
+declare var EFieldFalloffType : { Field_FallOff_None:'Field_FallOff_None',Field_Falloff_Linear:'Field_Falloff_Linear',Field_Falloff_Inverse:'Field_Falloff_Inverse',Field_Falloff_Squared:'Field_Falloff_Squared',Field_Falloff_Logarithmic:'Field_Falloff_Logarithmic',Field_Falloff_Max:'Field_Falloff_Max', };
+declare class RadialFalloff extends FieldNodeFloat { 
+	Magnitude: number;
+	MinRange: number;
+	MaxRange: number;
+	Default: number;
+	Radius: number;
+	Position: Vector;
+	Falloff: EFieldFalloffType;
+	static Load(ResourceName: string): RadialFalloff;
+	static Find(Outer: UObject, ResourceName: string): RadialFalloff;
+	static GetDefaultObject(): RadialFalloff;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RadialFalloff;
+	SetRadialFalloff(Magnitude: number,MinRange: number,MaxRange: number,Default: number,Radius: number,Position: Vector,Falloff: EFieldFalloffType): RadialFalloff;
+	static C(Other: UObject | any): RadialFalloff;
+}
+
+declare class PlaneFalloff extends FieldNodeFloat { 
+	Magnitude: number;
+	MinRange: number;
+	MaxRange: number;
+	Default: number;
+	Distance: number;
+	Position: Vector;
+	Normal: Vector;
+	Falloff: EFieldFalloffType;
+	static Load(ResourceName: string): PlaneFalloff;
+	static Find(Outer: UObject, ResourceName: string): PlaneFalloff;
+	static GetDefaultObject(): PlaneFalloff;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlaneFalloff;
+	SetPlaneFalloff(Magnitude: number,MinRange: number,MaxRange: number,Default: number,Distance: number,Position: Vector,Normal: Vector,Falloff: EFieldFalloffType): PlaneFalloff;
+	static C(Other: UObject | any): PlaneFalloff;
+}
+
+declare class BoxFalloff extends FieldNodeFloat { 
+	Magnitude: number;
+	MinRange: number;
+	MaxRange: number;
+	Default: number;
+	Transform: Transform;
+	Falloff: EFieldFalloffType;
+	static Load(ResourceName: string): BoxFalloff;
+	static Find(Outer: UObject, ResourceName: string): BoxFalloff;
+	static GetDefaultObject(): BoxFalloff;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BoxFalloff;
+	SetBoxFalloff(Magnitude: number,MinRange: number,MaxRange: number,Default: number,Transform: Transform,Falloff: EFieldFalloffType): BoxFalloff;
+	static C(Other: UObject | any): BoxFalloff;
+}
+
+declare class NoiseField extends FieldNodeFloat { 
+	MinRange: number;
+	MaxRange: number;
+	Transform: Transform;
+	static Load(ResourceName: string): NoiseField;
+	static Find(Outer: UObject, ResourceName: string): NoiseField;
+	static GetDefaultObject(): NoiseField;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NoiseField;
+	SetNoiseField(MinRange: number,MaxRange: number,Transform: Transform): NoiseField;
+	static C(Other: UObject | any): NoiseField;
+}
+
+declare class UniformVector extends FieldNodeVector { 
+	Magnitude: number;
+	Direction: Vector;
+	static Load(ResourceName: string): UniformVector;
+	static Find(Outer: UObject, ResourceName: string): UniformVector;
+	static GetDefaultObject(): UniformVector;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UniformVector;
+	SetUniformVector(Magnitude: number,Direction: Vector): UniformVector;
+	static C(Other: UObject | any): UniformVector;
+}
+
+declare class RadialVector extends FieldNodeVector { 
+	Magnitude: number;
+	Position: Vector;
+	static Load(ResourceName: string): RadialVector;
+	static Find(Outer: UObject, ResourceName: string): RadialVector;
+	static GetDefaultObject(): RadialVector;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RadialVector;
+	SetRadialVector(Magnitude: number,Position: Vector): RadialVector;
+	static C(Other: UObject | any): RadialVector;
+}
+
+declare class RandomVector extends FieldNodeVector { 
+	Magnitude: number;
+	static Load(ResourceName: string): RandomVector;
+	static Find(Outer: UObject, ResourceName: string): RandomVector;
+	static GetDefaultObject(): RandomVector;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RandomVector;
+	SetRandomVector(Magnitude: number): RandomVector;
+	static C(Other: UObject | any): RandomVector;
+}
+
+declare type EFieldOperationType = 'Field_Multiply' | 'Field_Divide' | 'Field_Add' | 'Field_Substract' | 'Field_Operation_Max';
+declare var EFieldOperationType : { Field_Multiply:'Field_Multiply',Field_Divide:'Field_Divide',Field_Add:'Field_Add',Field_Substract:'Field_Substract',Field_Operation_Max:'Field_Operation_Max', };
+declare class OperatorField extends FieldNodeBase { 
+	Magnitude: number;
+	RightField: FieldNodeBase;
+	LeftField: FieldNodeBase;
+	Operation: EFieldOperationType;
+	static Load(ResourceName: string): OperatorField;
+	static Find(Outer: UObject, ResourceName: string): OperatorField;
+	static GetDefaultObject(): OperatorField;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OperatorField;
+	SetOperatorField(Magnitude: number,RightField: FieldNodeBase,LeftField: FieldNodeBase,Operation: EFieldOperationType): OperatorField;
+	static C(Other: UObject | any): OperatorField;
+}
+
+declare class ToIntegerField extends FieldNodeInt { 
+	FloatField: FieldNodeFloat;
+	static Load(ResourceName: string): ToIntegerField;
+	static Find(Outer: UObject, ResourceName: string): ToIntegerField;
+	static GetDefaultObject(): ToIntegerField;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ToIntegerField;
+	SetToIntegerField(FloatField: FieldNodeFloat): ToIntegerField;
+	static C(Other: UObject | any): ToIntegerField;
+}
+
+declare class ToFloatField extends FieldNodeFloat { 
+	IntField: FieldNodeInt;
+	static Load(ResourceName: string): ToFloatField;
+	static Find(Outer: UObject, ResourceName: string): ToFloatField;
+	static GetDefaultObject(): ToFloatField;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ToFloatField;
+	SetToFloatField(IntegerField: FieldNodeInt): ToFloatField;
+	static C(Other: UObject | any): ToFloatField;
+}
+
+declare type EFieldCullingOperationType = 'Field_Culling_Inside' | 'Field_Culling_Outside' | 'Field_Culling_Operation_Max' | 'Field_Culling_MAX';
+declare var EFieldCullingOperationType : { Field_Culling_Inside:'Field_Culling_Inside',Field_Culling_Outside:'Field_Culling_Outside',Field_Culling_Operation_Max:'Field_Culling_Operation_Max',Field_Culling_MAX:'Field_Culling_MAX', };
+declare class CullingField extends FieldNodeBase { 
+	Culling: FieldNodeBase;
+	Field: FieldNodeBase;
+	Operation: EFieldCullingOperationType;
+	static Load(ResourceName: string): CullingField;
+	static Find(Outer: UObject, ResourceName: string): CullingField;
+	static GetDefaultObject(): CullingField;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CullingField;
+	SetCullingField(Culling: FieldNodeBase,Field: FieldNodeBase,Operation: EFieldCullingOperationType): CullingField;
+	static C(Other: UObject | any): CullingField;
+}
+
+declare class ReturnResultsTerminal extends FieldNodeBase { 
+	static Load(ResourceName: string): ReturnResultsTerminal;
+	static Find(Outer: UObject, ResourceName: string): ReturnResultsTerminal;
+	static GetDefaultObject(): ReturnResultsTerminal;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReturnResultsTerminal;
+	SetReturnResultsTerminal(): ReturnResultsTerminal;
+	static C(Other: UObject | any): ReturnResultsTerminal;
+}
+
+declare type EChaosCollisionSortMethod = 'SortNone' | 'SortByHighestMass' | 'SortByHighestSpeed' | 'SortByHighestImpulse' | 'SortByNearestFirst' | 'Count' | 'EChaosCollisionSortMethod_MAX';
+declare var EChaosCollisionSortMethod : { SortNone:'SortNone',SortByHighestMass:'SortByHighestMass',SortByHighestSpeed:'SortByHighestSpeed',SortByHighestImpulse:'SortByHighestImpulse',SortByNearestFirst:'SortByNearestFirst',Count:'Count',EChaosCollisionSortMethod_MAX:'EChaosCollisionSortMethod_MAX', };
+declare class ChaosCollisionEventRequestSettings { 
+	MaxNumberResults: number;
+	MinMass: number;
+	MinSpeed: number;
+	MinImpulse: number;
+	MaxDistance: number;
+	SortMethod: EChaosCollisionSortMethod;
+	clone() : ChaosCollisionEventRequestSettings;
+	static C(Other: UObject | any): ChaosCollisionEventRequestSettings;
+}
+
+declare type EChaosBreakingSortMethod = 'SortNone' | 'SortByHighestMass' | 'SortByHighestSpeed' | 'SortByNearestFirst' | 'Count' | 'EChaosBreakingSortMethod_MAX';
+declare var EChaosBreakingSortMethod : { SortNone:'SortNone',SortByHighestMass:'SortByHighestMass',SortByHighestSpeed:'SortByHighestSpeed',SortByNearestFirst:'SortByNearestFirst',Count:'Count',EChaosBreakingSortMethod_MAX:'EChaosBreakingSortMethod_MAX', };
+declare class ChaosBreakingEventRequestSettings { 
+	MaxNumberOfResults: number;
+	MinRadius: number;
+	MinSpeed: number;
+	MinMass: number;
+	MaxDistance: number;
+	SortMethod: EChaosBreakingSortMethod;
+	clone() : ChaosBreakingEventRequestSettings;
+	static C(Other: UObject | any): ChaosBreakingEventRequestSettings;
+}
+
+declare type EChaosTrailingSortMethod = 'SortNone' | 'SortByHighestMass' | 'SortByHighestSpeed' | 'SortByNearestFirst' | 'Count' | 'EChaosTrailingSortMethod_MAX';
+declare var EChaosTrailingSortMethod : { SortNone:'SortNone',SortByHighestMass:'SortByHighestMass',SortByHighestSpeed:'SortByHighestSpeed',SortByNearestFirst:'SortByNearestFirst',Count:'Count',EChaosTrailingSortMethod_MAX:'EChaosTrailingSortMethod_MAX', };
+declare class ChaosTrailingEventRequestSettings { 
+	MaxNumberOfResults: number;
+	MinMass: number;
+	MinSpeed: number;
+	MinAngularSpeed: number;
+	MaxDistance: number;
+	SortMethod: EChaosTrailingSortMethod;
+	clone() : ChaosTrailingEventRequestSettings;
+	static C(Other: UObject | any): ChaosTrailingEventRequestSettings;
+}
+
+declare class ChaosCollisionEventData { 
+	Location: Vector;
+	Normal: Vector;
+	Velocity1: Vector;
+	Velocity2: Vector;
+	Mass1: number;
+	Mass2: number;
+	Impulse: Vector;
+	ParticleIndex: number;
+	LevelsetIndex: number;
+	clone() : ChaosCollisionEventData;
+	static C(Other: UObject | any): ChaosCollisionEventData;
+}
+
+declare class ChaosBreakingEventData { 
+	Location: Vector;
+	Velocity: Vector;
+	Mass: number;
+	ParticleIndex: number;
+	clone() : ChaosBreakingEventData;
+	static C(Other: UObject | any): ChaosBreakingEventData;
+}
+
+declare class ChaosTrailingEventData { 
+	Location: Vector;
+	Velocity: Vector;
+	AngularVelocity: Vector;
+	Mass: number;
+	ParticleIndex: number;
+	clone() : ChaosTrailingEventData;
+	static C(Other: UObject | any): ChaosTrailingEventData;
+}
+
+declare type EImplicitTypeEnum = 'Chaos_Implicit_Box' | 'Chaos_Implicit_Sphere' | 'Chaos_Implicit_Capsule' | 'Chaos_Implicit_LevelSet' | 'Chaos_Implicit_None' | 'Chaos_Max';
+declare var EImplicitTypeEnum : { Chaos_Implicit_Box:'Chaos_Implicit_Box',Chaos_Implicit_Sphere:'Chaos_Implicit_Sphere',Chaos_Implicit_Capsule:'Chaos_Implicit_Capsule',Chaos_Implicit_LevelSet:'Chaos_Implicit_LevelSet',Chaos_Implicit_None:'Chaos_Implicit_None',Chaos_Max:'Chaos_Max', };
+declare class GeometryCollectionSizeSpecificData { 
+	MaxSize: number;
+	CollisionType: ECollisionTypeEnum;
+	ImplicitType: EImplicitTypeEnum;
+	MinLevelSetResolution: number;
+	MaxLevelSetResolution: number;
+	MinClusterLevelSetResolution: number;
+	MaxClusterLevelSetResolution: number;
+	CollisionObjectReductionPercentage: number;
+	CollisionParticlesFraction: number;
+	MaximumCollisionParticles: number;
+	clone() : GeometryCollectionSizeSpecificData;
+	static C(Other: UObject | any): GeometryCollectionSizeSpecificData;
+}
+
+declare class GeometryCollection extends UObject { 
+	Materials: MaterialInterface[];
+	CollisionType: ECollisionTypeEnum;
+	ImplicitType: EImplicitTypeEnum;
+	MinLevelSetResolution: number;
+	MaxLevelSetResolution: number;
+	MinClusterLevelSetResolution: number;
+	MaxClusterLevelSetResolution: number;
+	CollisionObjectReductionPercentage: number;
+	bMassAsDensity: boolean;
+	Mass: number;
+	MinimumMassClamp: number;
+	CollisionParticlesFraction: number;
+	MaximumCollisionParticles: number;
+	SizeSpecificData: GeometryCollectionSizeSpecificData[];
+	EnableRemovePiecesOnFracture: boolean;
+	RemoveOnFractureMaterials: MaterialInterface[];
+	ThumbnailInfo: ThumbnailInfo;
+	PersistentGuid: Guid;
+	StateGuid: Guid;
+	BoneSelectedMaterialIndex: number;
+	static Load(ResourceName: string): GeometryCollection;
+	static Find(Outer: UObject, ResourceName: string): GeometryCollection;
+	static GetDefaultObject(): GeometryCollection;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCollection;
+	static C(Other: UObject | any): GeometryCollection;
+}
+
+declare type EGeometryCollectionCacheType = 'None' | 'Record' | 'Play' | 'RecordAndPlay' | 'EGeometryCollectionCacheType_MAX';
+declare var EGeometryCollectionCacheType : { None:'None',Record:'Record',Play:'Play',RecordAndPlay:'RecordAndPlay',EGeometryCollectionCacheType_MAX:'EGeometryCollectionCacheType_MAX', };
+declare class SolverCollisionData { 
+	Location: Vector;
+	AccumulatedImpulse: Vector;
+	Normal: Vector;
+	Velocity1: Vector;
+	Velocity2: Vector;
+	AngularVelocity1: Vector;
+	AngularVelocity2: Vector;
+	Mass1: number;
+	Mass2: number;
+	ParticleIndex: number;
+	LevelsetIndex: number;
+	ParticleIndexMesh: number;
+	LevelsetIndexMesh: number;
+	clone() : SolverCollisionData;
+	static C(Other: UObject | any): SolverCollisionData;
+}
+
+declare class SolverBreakingData { 
+	Location: Vector;
+	Velocity: Vector;
+	AngularVelocity: Vector;
+	Mass: number;
+	ParticleIndex: number;
+	ParticleIndexMesh: number;
+	clone() : SolverBreakingData;
+	static C(Other: UObject | any): SolverBreakingData;
+}
+
+declare class RecordedFrame { 
+	Transforms: Transform[];
+	TransformIndices: number[];
+	PreviousTransformIndices: number[];
+	DisabledFlags: boolean[];
+	Collisions: SolverCollisionData[];
+	Breakings: SolverBreakingData[];
+	Trailings: any;
+	Timestamp: number;
+	clone() : RecordedFrame;
+	static C(Other: UObject | any): RecordedFrame;
+}
+
+declare class RecordedTransformTrack { 
+	Records: RecordedFrame[];
+	clone() : RecordedTransformTrack;
+	static C(Other: UObject | any): RecordedTransformTrack;
+}
+
+declare class GeometryCollectionCache extends UObject { 
+	RecordedData: RecordedTransformTrack;
+	SupportedCollection: GeometryCollection;
+	CompatibleCollectionState: Guid;
+	static Load(ResourceName: string): GeometryCollectionCache;
+	static Find(Outer: UObject, ResourceName: string): GeometryCollectionCache;
+	static GetDefaultObject(): GeometryCollectionCache;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCollectionCache;
+	static C(Other: UObject | any): GeometryCollectionCache;
+}
+
+declare class GeomComponentCacheParameters { 
+	CacheMode: EGeometryCollectionCacheType;
+	TargetCache: GeometryCollectionCache;
+	ReverseCacheBeginTime: number;
+	SaveCollisionData: boolean;
+	DoGenerateCollisionData: boolean;
+	CollisionDataSizeMax: number;
+	DoCollisionDataSpatialHash: boolean;
+	CollisionDataSpatialHashRadius: number;
+	MaxCollisionPerCell: number;
+	SaveBreakingData: boolean;
+	DoGenerateBreakingData: boolean;
+	BreakingDataSizeMax: number;
+	DoBreakingDataSpatialHash: boolean;
+	BreakingDataSpatialHashRadius: number;
+	MaxBreakingPerCell: number;
+	SaveTrailingData: boolean;
+	DoGenerateTrailingData: boolean;
+	TrailingDataSizeMax: number;
+	TrailingMinSpeedThreshold: number;
+	TrailingMinVolumeThreshold: number;
+	clone() : GeomComponentCacheParameters;
+	static C(Other: UObject | any): GeomComponentCacheParameters;
+}
+
+declare class ChaosBreakEvent { 
+	Component: PrimitiveComponent;
+	Location: Vector;
+	Velocity: Vector;
+	AngularVelocity: Vector;
+	Mass: number;
+	clone() : ChaosBreakEvent;
+	static C(Other: UObject | any): ChaosBreakEvent;
+}
+
+declare type EGeometryCollectionPhysicsTypeEnum = 'Chaos_AngularVelocity' | 'Chaos_DynamicState' | 'Chaos_LinearVelocity' | 'Chaos_InitialAngularVelocity' | 'Chaos_InitialLinearVelocity' | 'Chaos_CollisionGroup' | 'Chaos_LinearForce' | 'Chaos_AngularTorque' | 'Chaos_Max';
+declare var EGeometryCollectionPhysicsTypeEnum : { Chaos_AngularVelocity:'Chaos_AngularVelocity',Chaos_DynamicState:'Chaos_DynamicState',Chaos_LinearVelocity:'Chaos_LinearVelocity',Chaos_InitialAngularVelocity:'Chaos_InitialAngularVelocity',Chaos_InitialLinearVelocity:'Chaos_InitialLinearVelocity',Chaos_CollisionGroup:'Chaos_CollisionGroup',Chaos_LinearForce:'Chaos_LinearForce',Chaos_AngularTorque:'Chaos_AngularTorque',Chaos_Max:'Chaos_Max', };
+declare class GeometryCollectionComponent extends MeshComponent { 
+	ChaosSolverActor: ChaosSolverActor;
+	RestCollection: GeometryCollection;
+	InitializationFields: FieldSystemActor[];
+	Simulating: boolean;
+	ObjectType: EObjectStateTypeEnum;
+	EnableClustering: boolean;
+	ClusterGroupIndex: number;
+	MaxClusterLevel: number;
+	DamageThreshold: number[];
+	ClusterConnectionType: EClusterConnectionTypeEnum;
+	CollisionGroup: number;
+	CollisionSampleFraction: number;
+	PhysicalMaterial: ChaosPhysicalMaterial;
+	InitialVelocityType: EInitialVelocityTypeEnum;
+	InitialLinearVelocity: Vector;
+	InitialAngularVelocity: Vector;
+	CacheParameters: GeomComponentCacheParameters;
+	NotifyGeometryCollectionPhysicsStateChange: UnrealEngineMulticastDelegate<(FracturedComponent: GeometryCollectionComponent) => void>;
+	NotifyGeometryCollectionPhysicsLoadingStateChange: UnrealEngineMulticastDelegate<(FracturedComponent: GeometryCollectionComponent) => void>;
+	OnChaosBreakEvent: UnrealEngineMulticastDelegate<(BreakEvent: ChaosBreakEvent) => void>;
+	DesiredCacheTime: number;
+	CachePlayback: boolean;
+	OnChaosPhysicsCollision: UnrealEngineMulticastDelegate<(CollisionInfo: ChaosPhysicsCollisionInfo) => void>;
+	bNotifyBreaks: boolean;
+	bNotifyCollisions: boolean;
+	SelectedBones: number[];
+	HighlightedBones: number[];
+	DummyBodySetup: BodySetup;
+	EditorActor: Actor;
+	static Load(ResourceName: string): GeometryCollectionComponent;
+	static Find(Outer: UObject, ResourceName: string): GeometryCollectionComponent;
+	static GetDefaultObject(): GeometryCollectionComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCollectionComponent;
+	SetNotifyBreaks(bNewNotifyBreaks: boolean): void;
+	ReceivePhysicsCollision(CollisionInfo: ChaosPhysicsCollisionInfo): void;
+	ApplyPhysicsField(Enabled: boolean,Target: EGeometryCollectionPhysicsTypeEnum,MetaData: FieldSystemMetaData,Field: FieldNodeBase): void;
+	ApplyKinematicField(Radius: number,Position: Vector): void;
+	static C(Other: UObject | any): GeometryCollectionComponent;
+}
+
+declare class GeometryCollectionDebugDrawWarningMessage { 
+	clone() : GeometryCollectionDebugDrawWarningMessage;
+	static C(Other: UObject | any): GeometryCollectionDebugDrawWarningMessage;
+}
+
+declare class GeometryCollectionDebugDrawActorSelectedRigidBody { 
+	ID: number;
+	Solver: ChaosSolverActor;
+	GeometryCollection: GeometryCollectionActor;
+	clone() : GeometryCollectionDebugDrawActorSelectedRigidBody;
+	static C(Other: UObject | any): GeometryCollectionDebugDrawActorSelectedRigidBody;
+}
+
+declare type EGeometryCollectionDebugDrawActorHideGeometry = 'HideNone' | 'HideWithCollision' | 'HideSelected' | 'HideWholeCollection' | 'HideAll' | 'EGeometryCollectionDebugDrawActorHideGeometry_MAX';
+declare var EGeometryCollectionDebugDrawActorHideGeometry : { HideNone:'HideNone',HideWithCollision:'HideWithCollision',HideSelected:'HideSelected',HideWholeCollection:'HideWholeCollection',HideAll:'HideAll',EGeometryCollectionDebugDrawActorHideGeometry_MAX:'EGeometryCollectionDebugDrawActorHideGeometry_MAX', };
+declare class GeometryCollectionDebugDrawActor extends Actor { 
+	WarningMessage: GeometryCollectionDebugDrawWarningMessage;
+	SelectedRigidBody: GeometryCollectionDebugDrawActorSelectedRigidBody;
+	bDebugDrawWholeCollection: boolean;
+	bDebugDrawHierarchy: boolean;
+	bDebugDrawClustering: boolean;
+	HideGeometry: EGeometryCollectionDebugDrawActorHideGeometry;
+	bShowRigidBodyId: boolean;
+	bShowRigidBodyCollision: boolean;
+	bCollisionAtOrigin: boolean;
+	bShowRigidBodyTransform: boolean;
+	bShowRigidBodyInertia: boolean;
+	bShowRigidBodyVelocity: boolean;
+	bShowRigidBodyForce: boolean;
+	bShowRigidBodyInfos: boolean;
+	bShowTransformIndex: boolean;
+	bShowTransform: boolean;
+	bShowParent: boolean;
+	bShowLevel: boolean;
+	bShowConnectivityEdges: boolean;
+	bShowGeometryIndex: boolean;
+	bShowGeometryTransform: boolean;
+	bShowBoundingBox: boolean;
+	bShowFaces: boolean;
+	bShowFaceIndices: boolean;
+	bShowFaceNormals: boolean;
+	bShowSingleFace: boolean;
+	SingleFaceIndex: number;
+	bShowVertices: boolean;
+	bShowVertexIndices: boolean;
+	bShowVertexNormals: boolean;
+	bUseActiveVisualization: boolean;
+	PointThickness: number;
+	LineThickness: number;
+	bTextShadow: boolean;
+	TextScale: number;
+	NormalScale: number;
+	AxisScale: number;
+	ArrowScale: number;
+	RigidBodyIdColor: Color;
+	RigidBodyTransformScale: number;
+	RigidBodyCollisionColor: Color;
+	RigidBodyInertiaColor: Color;
+	RigidBodyVelocityColor: Color;
+	RigidBodyForceColor: Color;
+	RigidBodyInfoColor: Color;
+	TransformIndexColor: Color;
+	TransformScale: number;
+	LevelColor: Color;
+	ParentColor: Color;
+	ConnectivityEdgeThickness: number;
+	GeometryIndexColor: Color;
+	GeometryTransformScale: number;
+	BoundingBoxColor: Color;
+	FaceColor: Color;
+	FaceIndexColor: Color;
+	FaceNormalColor: Color;
+	SingleFaceColor: Color;
+	VertexColor: Color;
+	VertexIndexColor: Color;
+	VertexNormalColor: Color;
+	SpriteComponent: BillboardComponent;
+	static GetDefaultObject(): GeometryCollectionDebugDrawActor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCollectionDebugDrawActor;
+	static C(Other: UObject | any): GeometryCollectionDebugDrawActor;
+}
+
+declare class GeometryCollectionRenderLevelSetActor extends Actor { 
+	TargetVolumeTexture: VolumeTexture;
+	RayMarchMaterial: Material;
+	SurfaceTolerance: number;
+	Isovalue: number;
+	Enabled: boolean;
+	RenderVolumeBoundingBox: boolean;
+	static GetDefaultObject(): GeometryCollectionRenderLevelSetActor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCollectionRenderLevelSetActor;
+	static C(Other: UObject | any): GeometryCollectionRenderLevelSetActor;
+}
+
+declare class GeometryCollectionDebugDrawComponent extends ActorComponent { 
+	GeometryCollectionDebugDrawActor: GeometryCollectionDebugDrawActor;
+	GeometryCollectionRenderLevelSetActor: GeometryCollectionRenderLevelSetActor;
+	static Load(ResourceName: string): GeometryCollectionDebugDrawComponent;
+	static Find(Outer: UObject, ResourceName: string): GeometryCollectionDebugDrawComponent;
+	static GetDefaultObject(): GeometryCollectionDebugDrawComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCollectionDebugDrawComponent;
+	static C(Other: UObject | any): GeometryCollectionDebugDrawComponent;
+}
+
+declare class GeometryCollectionActor extends Actor { 
+	GeometryCollectionComponent: GeometryCollectionComponent;
+	GeometryCollectionDebugDrawComponent: GeometryCollectionDebugDrawComponent;
+	static GetDefaultObject(): GeometryCollectionActor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GeometryCollectionActor;
+	RaycastSingle(Start: Vector,End: Vector,OutHit?: HitResult): {OutHit: HitResult, $: boolean};
+	static C(Other: UObject | any): GeometryCollectionActor;
+}
+
+declare class ChaosDestructionListener extends SceneComponent { 
+	bIsCollisionEventListeningEnabled: boolean;
+	bIsBreakingEventListeningEnabled: boolean;
+	bIsTrailingEventListeningEnabled: boolean;
+	CollisionEventRequestSettings: ChaosCollisionEventRequestSettings;
+	BreakingEventRequestSettings: ChaosBreakingEventRequestSettings;
+	TrailingEventRequestSettings: ChaosTrailingEventRequestSettings;
+	ChaosSolverActors: any;
+	GeometryCollectionActors: any;
+	OnCollisionEvents: UnrealEngineMulticastDelegate<(CollisionEvents: ChaosCollisionEventData[]) => void>;
+	OnBreakingEvents: UnrealEngineMulticastDelegate<(BreakingEvents: ChaosBreakingEventData[]) => void>;
+	OnTrailingEvents: UnrealEngineMulticastDelegate<(TrailingEvents: ChaosTrailingEventData[]) => void>;
+	static Load(ResourceName: string): ChaosDestructionListener;
+	static Find(Outer: UObject, ResourceName: string): ChaosDestructionListener;
+	static GetDefaultObject(): ChaosDestructionListener;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ChaosDestructionListener;
+	SortTrailingEvents(TrailingEvents?: ChaosTrailingEventData[],SortMethod?: EChaosTrailingSortMethod): {TrailingEvents: ChaosTrailingEventData[]};
+	SortCollisionEvents(CollisionEvents?: ChaosCollisionEventData[],SortMethod?: EChaosCollisionSortMethod): {CollisionEvents: ChaosCollisionEventData[]};
+	SortBreakingEvents(BreakingEvents?: ChaosBreakingEventData[],SortMethod?: EChaosBreakingSortMethod): {BreakingEvents: ChaosBreakingEventData[]};
+	SetTrailingEventRequestSettings(InSettings: ChaosTrailingEventRequestSettings): void;
+	SetTrailingEventEnabled(bIsEnabled: boolean): void;
+	SetCollisionEventRequestSettings(InSettings: ChaosCollisionEventRequestSettings): void;
+	SetCollisionEventEnabled(bIsEnabled: boolean): void;
+	SetBreakingEventRequestSettings(InSettings: ChaosBreakingEventRequestSettings): void;
+	SetBreakingEventEnabled(bIsEnabled: boolean): void;
+	RemoveGeometryCollectionActor(GeometryCollectionActor: GeometryCollectionActor): void;
+	RemoveChaosSolverActor(ChaosSolverActor: ChaosSolverActor): void;
+	IsEventListening(): boolean;
+	AddGeometryCollectionActor(GeometryCollectionActor: GeometryCollectionActor): void;
+	AddChaosSolverActor(ChaosSolverActor: ChaosSolverActor): void;
+	static C(Other: UObject | any): ChaosDestructionListener;
+}
+
+declare class SkeletalMeshSimulationComponent extends ActorComponent { 
+	PhysicalMaterial: ChaosPhysicalMaterial;
+	ChaosSolverActor: ChaosSolverActor;
+	OverridePhysicsAsset: PhysicsAsset;
+	bSimulating: boolean;
+	bNotifyCollisions: boolean;
+	ObjectType: EObjectStateTypeEnum;
+	Density: number;
+	MinMass: number;
+	MaxMass: number;
+	CollisionType: ECollisionTypeEnum;
+	ImplicitShapeParticlesPerUnitArea: number;
+	ImplicitShapeMinNumParticles: number;
+	ImplicitShapeMaxNumParticles: number;
+	MinLevelSetResolution: number;
+	MaxLevelSetResolution: number;
+	CollisionGroup: number;
+	InitialVelocityType: EInitialVelocityTypeEnum;
+	InitialLinearVelocity: Vector;
+	InitialAngularVelocity: Vector;
+	OnChaosPhysicsCollision: UnrealEngineMulticastDelegate<(CollisionInfo: ChaosPhysicsCollisionInfo) => void>;
+	static Load(ResourceName: string): SkeletalMeshSimulationComponent;
+	static Find(Outer: UObject, ResourceName: string): SkeletalMeshSimulationComponent;
+	static GetDefaultObject(): SkeletalMeshSimulationComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkeletalMeshSimulationComponent;
+	ReceivePhysicsCollision(CollisionInfo: ChaosPhysicsCollisionInfo): void;
+	static C(Other: UObject | any): SkeletalMeshSimulationComponent;
+}
+
+declare class StaticMeshSimulationComponent extends ActorComponent { 
+	Simulating: boolean;
+	bNotifyCollisions: boolean;
+	ObjectType: EObjectStateTypeEnum;
+	Mass: number;
+	CollisionType: ECollisionTypeEnum;
+	ImplicitType: EImplicitTypeEnum;
+	MinLevelSetResolution: number;
+	MaxLevelSetResolution: number;
+	InitialVelocityType: EInitialVelocityTypeEnum;
+	InitialLinearVelocity: Vector;
+	InitialAngularVelocity: Vector;
+	DamageThreshold: number;
+	PhysicalMaterial: ChaosPhysicalMaterial;
+	ChaosSolverActor: ChaosSolverActor;
+	OnChaosPhysicsCollision: UnrealEngineMulticastDelegate<(CollisionInfo: ChaosPhysicsCollisionInfo) => void>;
+	SimulatedComponents: PrimitiveComponent[];
+	static Load(ResourceName: string): StaticMeshSimulationComponent;
+	static Find(Outer: UObject, ResourceName: string): StaticMeshSimulationComponent;
+	static GetDefaultObject(): StaticMeshSimulationComponent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StaticMeshSimulationComponent;
+	ReceivePhysicsCollision(CollisionInfo: ChaosPhysicsCollisionInfo): void;
+	ForceRecreatePhysicsState(): void;
+	static C(Other: UObject | any): StaticMeshSimulationComponent;
+}
+
+declare class EditableMeshAdapter extends UObject { 
+	static Load(ResourceName: string): EditableMeshAdapter;
+	static Find(Outer: UObject, ResourceName: string): EditableMeshAdapter;
+	static GetDefaultObject(): EditableMeshAdapter;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableMeshAdapter;
+	static C(Other: UObject | any): EditableMeshAdapter;
+}
+
+declare class EditableGeometryCollectionAdapter extends EditableMeshAdapter { 
+	GeometryCollection: GeometryCollection;
+	OriginalGeometryCollection: GeometryCollection;
+	GeometryCollectionLODIndex: number;
+	static Load(ResourceName: string): EditableGeometryCollectionAdapter;
+	static Find(Outer: UObject, ResourceName: string): EditableGeometryCollectionAdapter;
+	static GetDefaultObject(): EditableGeometryCollectionAdapter;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableGeometryCollectionAdapter;
+	static C(Other: UObject | any): EditableGeometryCollectionAdapter;
+}
+
+declare class ElementID { 
+	IDValue: number;
+	clone() : ElementID;
+	static C(Other: UObject | any): ElementID;
+}
+
+declare class VertexID extends ElementID { 
+	clone() : VertexID;
+	static C(Other: UObject | any): VertexID;
+}
+
+declare class EdgeID extends ElementID { 
+	clone() : EdgeID;
+	static C(Other: UObject | any): EdgeID;
+}
+
+declare class PolygonID extends ElementID { 
+	clone() : PolygonID;
+	static C(Other: UObject | any): PolygonID;
+}
+
+declare type ETriangleTessellationMode = 'ThreeTriangles' | 'FourTriangles' | 'ETriangleTessellationMode_MAX';
+declare var ETriangleTessellationMode : { ThreeTriangles:'ThreeTriangles',FourTriangles:'FourTriangles',ETriangleTessellationMode_MAX:'ETriangleTessellationMode_MAX', };
+declare type EMeshModificationType = 'FirstInterim' | 'Interim' | 'Final' | 'EMeshModificationType_MAX';
+declare var EMeshModificationType : { FirstInterim:'FirstInterim',Interim:'Interim',Final:'Final',EMeshModificationType_MAX:'EMeshModificationType_MAX', };
+declare type EMeshTopologyChange = 'NoTopologyChange' | 'TopologyChange' | 'EMeshTopologyChange_MAX';
+declare var EMeshTopologyChange : { NoTopologyChange:'NoTopologyChange',TopologyChange:'TopologyChange',EMeshTopologyChange_MAX:'EMeshTopologyChange_MAX', };
+declare class VertexPair { 
+	VertexID0: VertexID;
+	VertexID1: VertexID;
+	clone() : VertexPair;
+	static C(Other: UObject | any): VertexPair;
 }
 
-declare class DropTimecode { 
-	Timecode: Timecode;
-	FrameRate: number;
-	bColorFraming: boolean;
-	bRunningForward: boolean;
-	bNewFrame: boolean;
-	clone() : DropTimecode;
-	static C(Other: UObject | any): DropTimecode;
-	Conv_DropTimecodeToString(): string;
-	static Conv_DropTimecodeToString(InTimecode: DropTimecode): string;
+declare class PolygonToSplit { 
+	PolygonID: PolygonID;
+	VertexPairsToSplitAt: VertexPair[];
+	clone() : PolygonToSplit;
+	static C(Other: UObject | any): PolygonToSplit;
 }
 
-declare class LinearTimecodeComponent extends SceneComponent { 
-	MediaPlayer: MediaPlayer;
-	DropTimecode: DropTimecode;
-	OnTimecodeChange: UnrealEngineMulticastDelegate<(Timecode: DropTimecode) => void>;
-	static Load(ResourceName: string): LinearTimecodeComponent;
-	static Find(Outer: UObject, ResourceName: string): LinearTimecodeComponent;
-	static GetDefaultObject(): LinearTimecodeComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LinearTimecodeComponent;
-	static SetDropTimecodeFrameNumber(Timecode: DropTimecode,FrameNumber: number,OutTimecode?: DropTimecode): {OutTimecode: DropTimecode};
-	static GetDropTimeCodeFrameNumber(Timecode: DropTimecode,FrameNumber?: number): {FrameNumber: number};
-	GetDropFrameNumber(): number;
-	static C(Other: UObject | any): LinearTimecodeComponent;
-}
-
-declare class DropTimecodeToStringConversion extends BlueprintFunctionLibrary { 
-	static Load(ResourceName: string): DropTimecodeToStringConversion;
-	static Find(Outer: UObject, ResourceName: string): DropTimecodeToStringConversion;
-	static GetDefaultObject(): DropTimecodeToStringConversion;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DropTimecodeToStringConversion;
-	static Conv_DropTimecodeToString(InTimecode: DropTimecode): string;
-	static C(Other: UObject | any): DropTimecodeToStringConversion;
+declare class MeshElementAttributeValue { 
+	clone() : MeshElementAttributeValue;
+	static C(Other: UObject | any): MeshElementAttributeValue;
 }
 
-declare class MovieSceneMediaSection extends MovieSceneSection { 
-	MediaSource: MediaSource;
-	bLooping: boolean;
-	MediaTexture: MediaTexture;
-	MediaSoundComponent: MediaSoundComponent;
-	bUseExternalMediaPlayer: boolean;
-	ExternalMediaPlayer: MediaPlayer;
-	ThumbnailReferenceOffset: number;
-	static Load(ResourceName: string): MovieSceneMediaSection;
-	static Find(Outer: UObject, ResourceName: string): MovieSceneMediaSection;
-	static GetDefaultObject(): MovieSceneMediaSection;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneMediaSection;
-	static C(Other: UObject | any): MovieSceneMediaSection;
+declare class MeshElementAttributeData { 
+	AttributeName: string;
+	AttributeIndex: number;
+	AttributeValue: MeshElementAttributeValue;
+	clone() : MeshElementAttributeData;
+	static C(Other: UObject | any): MeshElementAttributeData;
 }
 
-declare class MovieSceneMediaTrack extends MovieSceneNameableTrack { 
-	MediaSections: MovieSceneSection[];
-	static Load(ResourceName: string): MovieSceneMediaTrack;
-	static Find(Outer: UObject, ResourceName: string): MovieSceneMediaTrack;
-	static GetDefaultObject(): MovieSceneMediaTrack;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneMediaTrack;
-	static C(Other: UObject | any): MovieSceneMediaTrack;
+declare class MeshElementAttributeList { 
+	Attributes: MeshElementAttributeData[];
+	clone() : MeshElementAttributeList;
+	static C(Other: UObject | any): MeshElementAttributeList;
 }
 
-declare class NetPropertyHook extends Property { 
-	static Load(ResourceName: string): NetPropertyHook;
-	static Find(Outer: UObject, ResourceName: string): NetPropertyHook;
-	static GetDefaultObject(): NetPropertyHook;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NetPropertyHook;
-	static C(Other: UObject | any): NetPropertyHook;
+declare class AttributesForVertex { 
+	VertexID: VertexID;
+	VertexAttributes: MeshElementAttributeList;
+	clone() : AttributesForVertex;
+	static C(Other: UObject | any): AttributesForVertex;
 }
 
-declare class UnitTestBase extends UObject { 
-	static Load(ResourceName: string): UnitTestBase;
-	static Find(Outer: UObject, ResourceName: string): UnitTestBase;
-	static GetDefaultObject(): UnitTestBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnitTestBase;
-	static C(Other: UObject | any): UnitTestBase;
+declare class VertexInstanceID extends ElementID { 
+	clone() : VertexInstanceID;
+	static C(Other: UObject | any): VertexInstanceID;
 }
 
-declare class UnitTask extends UObject { 
-	static Load(ResourceName: string): UnitTask;
-	static Find(Outer: UObject, ResourceName: string): UnitTask;
-	static GetDefaultObject(): UnitTask;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnitTask;
-	static C(Other: UObject | any): UnitTask;
+declare class AttributesForVertexInstance { 
+	VertexInstanceID: VertexInstanceID;
+	VertexInstanceAttributes: MeshElementAttributeList;
+	clone() : AttributesForVertexInstance;
+	static C(Other: UObject | any): AttributesForVertexInstance;
 }
 
-declare type EUnitTestVerification = 'Unverified' | 'VerifiedNotFixed' | 'VerifiedFixed' | 'VerifiedNeedsUpdate' | 'VerifiedUnreliable' | 'EUnitTestVerification_MAX';
-declare var EUnitTestVerification : { Unverified:'Unverified',VerifiedNotFixed:'VerifiedNotFixed',VerifiedFixed:'VerifiedFixed',VerifiedNeedsUpdate:'VerifiedNeedsUpdate',VerifiedUnreliable:'VerifiedUnreliable',EUnitTestVerification_MAX:'EUnitTestVerification_MAX', };
-declare class UnitTest extends UnitTestBase { 
-	PeakMemoryUsage: any;
-	TimeToPeakMem: number;
-	LastExecutionTime: number;
-	UnitTasks: UnitTask[];
-	VerificationState: EUnitTestVerification;
-	static Load(ResourceName: string): UnitTest;
-	static Find(Outer: UObject, ResourceName: string): UnitTest;
-	static GetDefaultObject(): UnitTest;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnitTest;
-	static C(Other: UObject | any): UnitTest;
+declare class VertexAttributesForPolygonHole { 
+	VertexAttributeList: MeshElementAttributeList[];
+	clone() : VertexAttributesForPolygonHole;
+	static C(Other: UObject | any): VertexAttributesForPolygonHole;
 }
 
-declare class ProcessUnitTest extends UnitTest { 
-	static Load(ResourceName: string): ProcessUnitTest;
-	static Find(Outer: UObject, ResourceName: string): ProcessUnitTest;
-	static GetDefaultObject(): ProcessUnitTest;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ProcessUnitTest;
-	static C(Other: UObject | any): ProcessUnitTest;
+declare class VertexAttributesForPolygon { 
+	PolygonID: PolygonID;
+	PerimeterVertexAttributeLists: MeshElementAttributeList[];
+	VertexAttributeListsForEachHole: VertexAttributesForPolygonHole[];
+	clone() : VertexAttributesForPolygon;
+	static C(Other: UObject | any): VertexAttributesForPolygon;
 }
 
-declare class MinimalClient extends UObject { 
-	static Load(ResourceName: string): MinimalClient;
-	static Find(Outer: UObject, ResourceName: string): MinimalClient;
-	static GetDefaultObject(): MinimalClient;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MinimalClient;
-	static C(Other: UObject | any): MinimalClient;
+declare class VerticesForEdge { 
+	EdgeID: EdgeID;
+	NewVertexID0: VertexID;
+	NewVertexID1: VertexID;
+	clone() : VerticesForEdge;
+	static C(Other: UObject | any): VerticesForEdge;
 }
 
-declare class ClientUnitTest extends ProcessUnitTest { 
-	MinClient: MinimalClient;
-	static Load(ResourceName: string): ClientUnitTest;
-	static Find(Outer: UObject, ResourceName: string): ClientUnitTest;
-	static GetDefaultObject(): ClientUnitTest;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ClientUnitTest;
-	static C(Other: UObject | any): ClientUnitTest;
+declare class AttributesForEdge { 
+	EdgeID: EdgeID;
+	EdgeAttributes: MeshElementAttributeList;
+	clone() : AttributesForEdge;
+	static C(Other: UObject | any): AttributesForEdge;
 }
 
-declare class IPClient extends ClientUnitTest { 
-	static Load(ResourceName: string): IPClient;
-	static Find(Outer: UObject, ResourceName: string): IPClient;
-	static GetDefaultObject(): IPClient;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): IPClient;
-	static C(Other: UObject | any): IPClient;
+declare class VertexToMove { 
+	VertexID: VertexID;
+	NewVertexPosition: Vector;
+	clone() : VertexToMove;
+	static C(Other: UObject | any): VertexToMove;
 }
 
-declare class HTML5Client extends IPClient { 
-	static Load(ResourceName: string): HTML5Client;
-	static Find(Outer: UObject, ResourceName: string): HTML5Client;
-	static GetDefaultObject(): HTML5Client;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HTML5Client;
-	static C(Other: UObject | any): HTML5Client;
+declare class PolygonGroupID extends ElementID { 
+	clone() : PolygonGroupID;
+	static C(Other: UObject | any): PolygonGroupID;
 }
 
-declare class NUTActor extends Actor { 
-	TempDelegate: UnrealEngineDelegate<(InNUTActor: NUTActor) => void>;
-	static GetDefaultObject(): NUTActor;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NUTActor;
-	Wait(Seconds: any): void;
-	UnitTravel(Dest: string): void;
-	UnitSeamlessTravel(Dest: string): void;
-	ServerReceiveText(InText: string): void;
-	ServerExecute(InDelegate: string): void;
-	ServerClientStillAlive(): void;
-	ServerClientPing(): void;
-	ServerAdmin(Command: string): void;
-	NetMulticastPing(): void;
-	NetFlush(): void;
-	Admin(Command: string): void;
-	static C(Other: UObject | any): NUTActor;
+declare type EInsetPolygonsMode = 'All' | 'CenterPolygonOnly' | 'SidePolygonsOnly' | 'EInsetPolygonsMode_MAX';
+declare var EInsetPolygonsMode : { All:'All',CenterPolygonOnly:'CenterPolygonOnly',SidePolygonsOnly:'SidePolygonsOnly',EInsetPolygonsMode_MAX:'EInsetPolygonsMode_MAX', };
+declare class VertexAndAttributes { 
+	VertexInstanceID: VertexInstanceID;
+	VertexID: VertexID;
+	PolygonVertexAttributes: MeshElementAttributeList;
+	clone() : VertexAndAttributes;
+	static C(Other: UObject | any): VertexAndAttributes;
 }
 
-declare class NUTGlobals extends UObject { 
-	EventWatcher: NetConnection;
-	ServerPortOffset: number;
-	UnitTestNetDriverCount: number;
-	DumpRPCMatches: string[];
-	UnitTestModules: string[];
-	UnloadedModules: string[];
-	static Load(ResourceName: string): NUTGlobals;
-	static Find(Outer: UObject, ResourceName: string): NUTGlobals;
-	static GetDefaultObject(): NUTGlobals;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NUTGlobals;
-	static C(Other: UObject | any): NUTGlobals;
+declare class SubdividedQuadVertex { 
+	VertexPositionIndex: number;
+	TextureCoordinate0: Vector2D;
+	TextureCoordinate1: Vector2D;
+	VertexColor: Color;
+	VertexNormal: Vector;
+	VertexTangent: Vector;
+	VertexBinormalSign: number;
+	clone() : SubdividedQuadVertex;
+	static C(Other: UObject | any): SubdividedQuadVertex;
 }
 
-declare class SteamClient extends IPClient { 
-	static Load(ResourceName: string): SteamClient;
-	static Find(Outer: UObject, ResourceName: string): SteamClient;
-	static GetDefaultObject(): SteamClient;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SteamClient;
-	static C(Other: UObject | any): SteamClient;
+declare class SubdividedQuad { 
+	QuadVertex0: SubdividedQuadVertex;
+	QuadVertex1: SubdividedQuadVertex;
+	QuadVertex2: SubdividedQuadVertex;
+	QuadVertex3: SubdividedQuadVertex;
+	clone() : SubdividedQuad;
+	static C(Other: UObject | any): SubdividedQuad;
 }
 
-declare class UnitTestActorChannel extends ActorChannel { 
-	static Load(ResourceName: string): UnitTestActorChannel;
-	static Find(Outer: UObject, ResourceName: string): UnitTestActorChannel;
-	static GetDefaultObject(): UnitTestActorChannel;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnitTestActorChannel;
-	static C(Other: UObject | any): UnitTestActorChannel;
+declare class SubdivisionLimitSection { 
+	SubdividedQuads: SubdividedQuad[];
+	clone() : SubdivisionLimitSection;
+	static C(Other: UObject | any): SubdivisionLimitSection;
 }
 
-declare class UnitTestChannel extends Channel { 
-	static Load(ResourceName: string): UnitTestChannel;
-	static Find(Outer: UObject, ResourceName: string): UnitTestChannel;
-	static GetDefaultObject(): UnitTestChannel;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnitTestChannel;
-	static C(Other: UObject | any): UnitTestChannel;
+declare class SubdividedWireEdge { 
+	EdgeVertex0PositionIndex: number;
+	EdgeVertex1PositionIndex: number;
+	clone() : SubdividedWireEdge;
+	static C(Other: UObject | any): SubdividedWireEdge;
 }
 
-declare class UnitTestCommandlet extends Commandlet { 
-	static Load(ResourceName: string): UnitTestCommandlet;
-	static Find(Outer: UObject, ResourceName: string): UnitTestCommandlet;
-	static GetDefaultObject(): UnitTestCommandlet;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnitTestCommandlet;
-	static C(Other: UObject | any): UnitTestCommandlet;
+declare class SubdivisionLimitData { 
+	VertexPositions: Vector[];
+	Sections: SubdivisionLimitSection[];
+	SubdividedWireEdges: SubdividedWireEdge[];
+	clone() : SubdivisionLimitData;
+	static C(Other: UObject | any): SubdivisionLimitData;
 }
 
-declare class UnitTestManager extends UObject { 
-	bCapUnitTestCount: boolean;
-	MaxUnitTestCount: number;
-	bCapUnitTestMemory: boolean;
-	MaxMemoryPercent: number;
-	AutoCloseMemoryPercent: number;
-	MaxAutoCloseCount: number;
-	UnitTestSessionCount: any;
-	PendingUnitTests: UnrealEngineClass[];
-	ActiveUnitTests: UnitTest[];
-	FinishedUnitTests: UnitTest[];
-	static Load(ResourceName: string): UnitTestManager;
-	static Find(Outer: UObject, ResourceName: string): UnitTestManager;
-	static GetDefaultObject(): UnitTestManager;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnitTestManager;
-	static C(Other: UObject | any): UnitTestManager;
+declare class MeshTriangle { 
+	VertexInstanceID0: VertexInstanceID;
+	VertexInstanceID1: VertexInstanceID;
+	VertexInstanceID2: VertexInstanceID;
+	clone() : MeshTriangle;
+	static C(Other: UObject | any): MeshTriangle;
 }
 
-declare class UnitTestPackageMap extends PackageMapClient { 
-	static Load(ResourceName: string): UnitTestPackageMap;
-	static Find(Outer: UObject, ResourceName: string): UnitTestPackageMap;
-	static GetDefaultObject(): UnitTestPackageMap;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UnitTestPackageMap;
-	static C(Other: UObject | any): UnitTestPackageMap;
+declare class VertexToCreate { 
+	VertexAttributes: MeshElementAttributeList;
+	OriginalVertexID: VertexID;
+	clone() : VertexToCreate;
+	static C(Other: UObject | any): VertexToCreate;
 }
 
-declare class VMReflection extends UnitTest { 
-	static Load(ResourceName: string): VMReflection;
-	static Find(Outer: UObject, ResourceName: string): VMReflection;
-	static GetDefaultObject(): VMReflection;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VMReflection;
-	static C(Other: UObject | any): VMReflection;
+declare class VertexInstanceToCreate { 
+	VertexID: VertexID;
+	VertexInstanceAttributes: MeshElementAttributeList;
+	OriginalVertexInstanceID: VertexInstanceID;
+	clone() : VertexInstanceToCreate;
+	static C(Other: UObject | any): VertexInstanceToCreate;
 }
 
-declare class VMTestClassA extends UObject { 
-	AObjectRef: UObject;
-	ByteProp: number;
-	UInt16Prop: any;
-	UInt32Prop: any;
-	UInt64Prop: any;
-	Int8Prop: any;
-	Int16Prop: any;
-	Int32Prop: number;
-	Int64Prop: any;
-	FloatProp: number;
-	DoubleProp: any;
-	bBoolPropA: boolean;
-	bBoolPropB: boolean;
-	bBoolPropC: boolean;
-	bBoolPropD: boolean;
-	bBoolPropE: boolean;
-	NameProp: string;
-	StringProp: string;
-	TextProp: string;
-	BytePropArray: number;
-	ObjectPropArray: UObject;
-	DynBytePropArray: number[];
-	DynBoolPropArray: boolean[];
-	DynObjectPropArray: UObject[];
-	DynNamePropArray: string[];
-	DynDoublePropArray: any[];
-	DynFloatPropArray: number[];
-	DynInt16PropArray: any[];
-	DynInt64PropArray: any[];
-	DynInt8PropArray: any[];
-	DynIntPropArray: number[];
-	DynUInt16PropArray: any[];
-	DynUIntPropArray: any[];
-	DynUInt64PropArray: any[];
-	DynStringPropArray: string[];
-	DynTextPropArray: string[];
-	DynClassPropArray: UnrealEngineClass[];
-	DynPawnPropArray: Pawn[];
-	StructProp: Vector;
-	StructPropArray: Vector;
-	DynStructPropArray: Vector[];
-	static Load(ResourceName: string): VMTestClassA;
-	static Find(Outer: UObject, ResourceName: string): VMTestClassA;
-	static GetDefaultObject(): VMTestClassA;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VMTestClassA;
-	static C(Other: UObject | any): VMTestClassA;
+declare type EPolygonEdgeHardness = 'NewEdgesSoft' | 'NewEdgesHard' | 'AllEdgesSoft' | 'AllEdgesHard' | 'EPolygonEdgeHardness_MAX';
+declare var EPolygonEdgeHardness : { NewEdgesSoft:'NewEdgesSoft',NewEdgesHard:'NewEdgesHard',AllEdgesSoft:'AllEdgesSoft',AllEdgesHard:'AllEdgesHard',EPolygonEdgeHardness_MAX:'EPolygonEdgeHardness_MAX', };
+declare class PolygonToCreate { 
+	PolygonGroupID: PolygonGroupID;
+	PerimeterVertices: VertexAndAttributes[];
+	OriginalPolygonID: PolygonID;
+	PolygonEdgeHardness: EPolygonEdgeHardness;
+	clone() : PolygonToCreate;
+	static C(Other: UObject | any): PolygonToCreate;
 }
 
-declare class VMTestClassB extends UObject { 
-	BObjectRef: UObject;
-	static Load(ResourceName: string): VMTestClassB;
-	static Find(Outer: UObject, ResourceName: string): VMTestClassB;
-	static GetDefaultObject(): VMTestClassB;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VMTestClassB;
-	static C(Other: UObject | any): VMTestClassB;
+declare class PolygonGroupToCreate { 
+	PolygonGroupAttributes: MeshElementAttributeList;
+	OriginalPolygonGroupID: PolygonGroupID;
+	clone() : PolygonGroupToCreate;
+	static C(Other: UObject | any): PolygonGroupToCreate;
 }
 
-declare class FTextCrash extends ClientUnitTest { 
-	static Load(ResourceName: string): FTextCrash;
-	static Find(Outer: UObject, ResourceName: string): FTextCrash;
-	static GetDefaultObject(): FTextCrash;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FTextCrash;
-	static C(Other: UObject | any): FTextCrash;
+declare class EdgeToCreate { 
+	VertexID0: VertexID;
+	VertexID1: VertexID;
+	ConnectedPolygons: PolygonID[];
+	EdgeAttributes: MeshElementAttributeList;
+	OriginalEdgeID: EdgeID;
+	clone() : EdgeToCreate;
+	static C(Other: UObject | any): EdgeToCreate;
 }
 
-declare class NetBitsTest extends UnitTest { 
-	static Load(ResourceName: string): NetBitsTest;
-	static Find(Outer: UObject, ResourceName: string): NetBitsTest;
-	static GetDefaultObject(): NetBitsTest;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NetBitsTest;
-	static C(Other: UObject | any): NetBitsTest;
+declare class VertexIndexAndInstanceID { 
+	ContourIndex: number;
+	VertexInstanceID: VertexInstanceID;
+	clone() : VertexIndexAndInstanceID;
+	static C(Other: UObject | any): VertexIndexAndInstanceID;
 }
 
-declare class UTT61_DebugReplicateData extends ClientUnitTest { 
-	static Load(ResourceName: string): UTT61_DebugReplicateData;
-	static Find(Outer: UObject, ResourceName: string): UTT61_DebugReplicateData;
-	static GetDefaultObject(): UTT61_DebugReplicateData;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UTT61_DebugReplicateData;
-	static C(Other: UObject | any): UTT61_DebugReplicateData;
+declare class VertexInstancesForPolygonHole { 
+	VertexIndicesAndInstanceIDs: VertexIndexAndInstanceID[];
+	clone() : VertexInstancesForPolygonHole;
+	static C(Other: UObject | any): VertexInstancesForPolygonHole;
 }
 
-declare class AndroidPermissionCallbackProxy extends UObject { 
-	OnPermissionsGrantedDynamicDelegate: UnrealEngineMulticastDelegate<(Permissions: string[], GrantResults: boolean[]) => void>;
-	static Load(ResourceName: string): AndroidPermissionCallbackProxy;
-	static Find(Outer: UObject, ResourceName: string): AndroidPermissionCallbackProxy;
-	static GetDefaultObject(): AndroidPermissionCallbackProxy;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AndroidPermissionCallbackProxy;
-	static C(Other: UObject | any): AndroidPermissionCallbackProxy;
+declare class ChangeVertexInstancesForPolygon { 
+	PolygonID: PolygonID;
+	PerimeterVertexIndicesAndInstanceIDs: VertexIndexAndInstanceID[];
+	VertexIndicesAndInstanceIDsForEachHole: VertexInstancesForPolygonHole[];
+	clone() : ChangeVertexInstancesForPolygon;
+	static C(Other: UObject | any): ChangeVertexInstancesForPolygon;
 }
 
-declare class AndroidPermissionFunctionLibrary extends BlueprintFunctionLibrary { 
-	static Load(ResourceName: string): AndroidPermissionFunctionLibrary;
-	static Find(Outer: UObject, ResourceName: string): AndroidPermissionFunctionLibrary;
-	static GetDefaultObject(): AndroidPermissionFunctionLibrary;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AndroidPermissionFunctionLibrary;
-	static CheckPermission(permission: string): boolean;
-	static AcquirePermissions(Permissions: string[]): AndroidPermissionCallbackProxy;
-	static C(Other: UObject | any): AndroidPermissionFunctionLibrary;
+declare class PolygonGroupForPolygon { 
+	PolygonID: PolygonID;
+	PolygonGroupID: PolygonGroupID;
+	clone() : PolygonGroupForPolygon;
+	static C(Other: UObject | any): PolygonGroupForPolygon;
+}
+
+declare class EditableMesh extends UObject { 
+	Adapters: EditableMeshAdapter[];
+	TextureCoordinateCount: number;
+	PendingCompactCounter: number;
+	SubdivisionCount: number;
+	static Load(ResourceName: string): EditableMesh;
+	static Find(Outer: UObject, ResourceName: string): EditableMesh;
+	static GetDefaultObject(): EditableMesh;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableMesh;
+	WeldVertices(VertexIDs: VertexID[],OutNewVertexID?: VertexID): {OutNewVertexID: VertexID};
+	TryToRemoveVertex(VertexID: VertexID,bOutWasVertexRemoved?: boolean,OutNewEdgeID?: EdgeID): {bOutWasVertexRemoved: boolean, OutNewEdgeID: EdgeID};
+	TryToRemovePolygonEdge(EdgeID: EdgeID,bOutWasEdgeRemoved?: boolean,OutNewPolygonID?: PolygonID): {bOutWasEdgeRemoved: boolean, OutNewPolygonID: PolygonID};
+	TriangulatePolygons(PolygonIDs: PolygonID[],OutNewTrianglePolygons?: PolygonID[]): {OutNewTrianglePolygons: PolygonID[]};
+	TessellatePolygons(PolygonIDs: PolygonID[],TriangleTessellationMode: ETriangleTessellationMode,OutNewPolygonIDs?: PolygonID[]): {OutNewPolygonIDs: PolygonID[]};
+	StartModification(MeshModificationType: EMeshModificationType,MeshTopologyChange: EMeshTopologyChange): void;
+	SplitPolygons(PolygonsToSplit: PolygonToSplit[],OutNewEdgeIDs?: EdgeID[]): {OutNewEdgeIDs: EdgeID[]};
+	SplitPolygonalMesh(InPlane: Plane,PolygonIDs1?: PolygonID[],PolygonIDs2?: PolygonID[],BoundaryIDs?: EdgeID[]): {PolygonIDs1: PolygonID[], PolygonIDs2: PolygonID[], BoundaryIDs: EdgeID[]};
+	SplitEdge(EdgeID: EdgeID,Splits: number[],OutNewVertexIDs?: VertexID[]): {OutNewVertexIDs: VertexID[]};
+	SetVerticesCornerSharpness(VertexIDs: VertexID[],VerticesNewCornerSharpness: number[]): void;
+	SetVerticesAttributes(AttributesForVertices: AttributesForVertex[]): void;
+	SetVertexInstancesAttributes(AttributesForVertexInstances: AttributesForVertexInstance[]): void;
+	SetTextureCoordinateCount(NumTexCoords: number): void;
+	SetSubdivisionCount(NewSubdivisionCount: number): void;
+	SetPolygonsVertexAttributes(VertexAttributesForPolygons: VertexAttributesForPolygon[]): void;
+	SetEdgesVertices(VerticesForEdges: VerticesForEdge[]): void;
+	SetEdgesHardnessAutomatically(EdgeIDs: EdgeID[],MaxDotProductForSoftEdge: number): void;
+	SetEdgesHardness(EdgeIDs: EdgeID[],EdgesNewIsHard: boolean[]): void;
+	SetEdgesCreaseSharpness(EdgeIDs: EdgeID[],EdgesNewCreaseSharpness: number[]): void;
+	SetEdgesAttributes(AttributesForEdges: AttributesForEdge[]): void;
+	SetAllowUndo(bInAllowUndo: boolean): void;
+	SetAllowSpatialDatabase(bInAllowSpatialDatabase: boolean): void;
+	SetAllowCompact(bInAllowCompact: boolean): void;
+	SearchSpatialDatabaseForPolygonsPotentiallyIntersectingPlane(InPlane: Plane,OutPolygons?: PolygonID[]): {OutPolygons: PolygonID[]};
+	SearchSpatialDatabaseForPolygonsPotentiallyIntersectingLineSegment(LineSegmentStart: Vector,LineSegmentEnd: Vector,OutPolygons?: PolygonID[]): {OutPolygons: PolygonID[]};
+	SearchSpatialDatabaseForPolygonsInVolume(Planes: Plane[],OutPolygons?: PolygonID[]): {OutPolygons: PolygonID[]};
+	RevertInstance(): EditableMesh;
+	Revert(): void;
+	RemovePolygonPerimeterVertices(PolygonID: PolygonID,FirstVertexNumberToRemove: number,NumVerticesToRemove: number,bDeleteOrphanedVertexInstances: boolean): void;
+	RebuildRenderMesh(): void;
+	QuadrangulateMesh(OutNewPolygonIDs?: PolygonID[]): {OutNewPolygonIDs: PolygonID[]};
+	PropagateInstanceChanges(): void;
+	MoveVertices(VerticesToMove: VertexToMove[]): void;
+	static MakeVertexID(VertexIndex: number): VertexID;
+	static MakePolygonID(PolygonIndex: number): PolygonID;
+	static MakePolygonGroupID(PolygonGroupIndex: number): PolygonGroupID;
+	static MakeEdgeID(EdgeIndex: number): EdgeID;
+	IsValidVertex(VertexID: VertexID): boolean;
+	IsValidPolygonGroup(PolygonGroupID: PolygonGroupID): boolean;
+	IsValidPolygon(PolygonID: PolygonID): boolean;
+	IsValidEdge(EdgeID: EdgeID): boolean;
+	IsUndoAllowed(): boolean;
+	IsSpatialDatabaseAllowed(): boolean;
+	IsPreviewingSubdivisions(): boolean;
+	IsOrphanedVertex(VertexID: VertexID): boolean;
+	IsCompactAllowed(): boolean;
+	IsCommittedAsInstance(): boolean;
+	IsCommitted(): boolean;
+	IsBeingModified(): boolean;
+	static InvalidVertexID(): VertexID;
+	static InvalidPolygonID(): PolygonID;
+	static InvalidPolygonGroupID(): PolygonGroupID;
+	static InvalidEdgeID(): EdgeID;
+	InsetPolygons(PolygonIDs: PolygonID[],InsetFixedDistance: number,InsetProgressTowardCenter: number,Mode: EInsetPolygonsMode,OutNewCenterPolygonIDs?: PolygonID[],OutNewSidePolygonIDs?: PolygonID[]): {OutNewCenterPolygonIDs: PolygonID[], OutNewSidePolygonIDs: PolygonID[]};
+	InsertPolygonPerimeterVertices(PolygonID: PolygonID,InsertBeforeVertexNumber: number,VerticesToInsert: VertexAndAttributes[]): void;
+	InsertEdgeLoop(EdgeID: EdgeID,Splits: number[],OutNewEdgeIDs?: EdgeID[]): {OutNewEdgeIDs: EdgeID[]};
+	InitializeAdapters(): void;
+	GetVertexPairEdge(VertexID: VertexID,NextVertexID: VertexID,bOutEdgeWindingIsReversed?: boolean): {bOutEdgeWindingIsReversed: boolean, $: EdgeID};
+	GetVertexInstanceVertex(VertexInstanceID: VertexInstanceID): VertexID;
+	GetVertexInstanceCount(): number;
+	GetVertexInstanceConnectedPolygons(VertexInstanceID: VertexInstanceID,OutConnectedPolygonIDs?: PolygonID[]): {OutConnectedPolygonIDs: PolygonID[]};
+	GetVertexInstanceConnectedPolygonCount(VertexInstanceID: VertexInstanceID): number;
+	GetVertexInstanceConnectedPolygon(VertexInstanceID: VertexInstanceID,ConnectedPolygonNumber: number): PolygonID;
+	GetVertexCount(): number;
+	GetVertexConnectedPolygons(VertexID: VertexID,OutConnectedPolygonIDs?: PolygonID[]): {OutConnectedPolygonIDs: PolygonID[]};
+	GetVertexConnectedEdges(VertexID: VertexID,OutConnectedEdgeIDs?: EdgeID[]): {OutConnectedEdgeIDs: EdgeID[]};
+	GetVertexConnectedEdgeCount(VertexID: VertexID): number;
+	GetVertexConnectedEdge(VertexID: VertexID,ConnectedEdgeNumber: number): EdgeID;
+	GetVertexAdjacentVertices(VertexID: VertexID,OutAdjacentVertexIDs?: VertexID[]): {OutAdjacentVertexIDs: VertexID[]};
+	GetTextureCoordinateCount(): number;
+	GetSubdivisionLimitData(): SubdivisionLimitData;
+	GetSubdivisionCount(): number;
+	GetPolygonTriangulatedTriangleCount(PolygonID: PolygonID): number;
+	GetPolygonTriangulatedTriangle(PolygonID: PolygonID,PolygonTriangleNumber: number): MeshTriangle;
+	GetPolygonPerimeterVertices(PolygonID: PolygonID,OutPolygonPerimeterVertexIDs?: VertexID[]): {OutPolygonPerimeterVertexIDs: VertexID[]};
+	GetPolygonPerimeterVertexInstances(PolygonID: PolygonID,OutPolygonPerimeterVertexInstanceIDs?: VertexInstanceID[]): {OutPolygonPerimeterVertexInstanceIDs: VertexInstanceID[]};
+	GetPolygonPerimeterVertexInstance(PolygonID: PolygonID,PolygonVertexNumber: number): VertexInstanceID;
+	GetPolygonPerimeterVertexCount(PolygonID: PolygonID): number;
+	GetPolygonPerimeterVertex(PolygonID: PolygonID,PolygonVertexNumber: number): VertexID;
+	GetPolygonPerimeterEdges(PolygonID: PolygonID,OutPolygonPerimeterEdgeIDs?: EdgeID[]): {OutPolygonPerimeterEdgeIDs: EdgeID[]};
+	GetPolygonPerimeterEdgeCount(PolygonID: PolygonID): number;
+	GetPolygonPerimeterEdge(PolygonID: PolygonID,PerimeterEdgeNumber: number,bOutEdgeWindingIsReversedForPolygon?: boolean): {bOutEdgeWindingIsReversedForPolygon: boolean, $: EdgeID};
+	GetPolygonInGroup(PolygonGroupID: PolygonGroupID,PolygonNumber: number): PolygonID;
+	GetPolygonGroupCount(): number;
+	GetPolygonCountInGroup(PolygonGroupID: PolygonGroupID): number;
+	GetPolygonCount(): number;
+	GetPolygonAdjacentPolygons(PolygonID: PolygonID,OutAdjacentPolygons?: PolygonID[]): {OutAdjacentPolygons: PolygonID[]};
+	GetGroupForPolygon(PolygonID: PolygonID): PolygonGroupID;
+	GetFirstValidPolygonGroup(): PolygonGroupID;
+	GetEdgeVertices(EdgeID: EdgeID,OutEdgeVertexID0?: VertexID,OutEdgeVertexID1?: VertexID): {OutEdgeVertexID0: VertexID, OutEdgeVertexID1: VertexID};
+	GetEdgeVertex(EdgeID: EdgeID,EdgeVertexNumber: number): VertexID;
+	GetEdgeThatConnectsVertices(VertexID0: VertexID,VertexID1: VertexID): EdgeID;
+	GetEdgeLoopElements(EdgeID: EdgeID,EdgeLoopIDs?: EdgeID[]): {EdgeLoopIDs: EdgeID[]};
+	GetEdgeCount(): number;
+	GetEdgeConnectedPolygons(EdgeID: EdgeID,OutConnectedPolygonIDs?: PolygonID[]): {OutConnectedPolygonIDs: PolygonID[]};
+	GetEdgeConnectedPolygonCount(EdgeID: EdgeID): number;
+	GetEdgeConnectedPolygon(EdgeID: EdgeID,ConnectedPolygonNumber: number): PolygonID;
+	GeneratePolygonTangentsAndNormals(PolygonIDs: PolygonID[]): void;
+	FlipPolygons(PolygonIDs: PolygonID[]): void;
+	FindPolygonPerimeterVertexNumberForVertex(PolygonID: PolygonID,VertexID: VertexID): number;
+	FindPolygonPerimeterEdgeNumberForVertices(PolygonID: PolygonID,EdgeVertexID0: VertexID,EdgeVertexID1: VertexID): number;
+	FindPolygonLoop(EdgeID: EdgeID,OutEdgeLoopEdgeIDs?: EdgeID[],OutFlippedEdgeIDs?: EdgeID[],OutReversedEdgeIDPathToTake?: EdgeID[],OutPolygonIDsToSplit?: PolygonID[]): {OutEdgeLoopEdgeIDs: EdgeID[], OutFlippedEdgeIDs: EdgeID[], OutReversedEdgeIDPathToTake: EdgeID[], OutPolygonIDsToSplit: PolygonID[]};
+	ExtrudePolygons(Polygons: PolygonID[],ExtrudeDistance: number,bKeepNeighborsTogether: boolean,OutNewExtrudedFrontPolygons?: PolygonID[]): {OutNewExtrudedFrontPolygons: PolygonID[]};
+	ExtendVertices(VertexIDs: VertexID[],bOnlyExtendClosestEdge: boolean,ReferencePosition: Vector,OutNewExtendedVertexIDs?: VertexID[]): {OutNewExtendedVertexIDs: VertexID[]};
+	ExtendEdges(EdgeIDs: EdgeID[],bWeldNeighbors: boolean,OutNewExtendedEdgeIDs?: EdgeID[]): {OutNewExtendedEdgeIDs: EdgeID[]};
+	EndModification(bFromUndo: boolean): void;
+	DeleteVertexInstances(VertexInstanceIDsToDelete: VertexInstanceID[],bDeleteOrphanedVertices: boolean): void;
+	DeleteVertexAndConnectedEdgesAndPolygons(VertexID: VertexID,bDeleteOrphanedEdges: boolean,bDeleteOrphanedVertices: boolean,bDeleteOrphanedVertexInstances: boolean,bDeleteEmptyPolygonGroups: boolean): void;
+	DeletePolygons(PolygonIDsToDelete: PolygonID[],bDeleteOrphanedEdges: boolean,bDeleteOrphanedVertices: boolean,bDeleteOrphanedVertexInstances: boolean,bDeleteEmptyPolygonGroups: boolean): void;
+	DeletePolygonGroups(PolygonGroupIDs: PolygonGroupID[]): void;
+	DeleteOrphanVertices(VertexIDsToDelete: VertexID[]): void;
+	DeleteEdges(EdgeIDsToDelete: EdgeID[],bDeleteOrphanedVertices: boolean): void;
+	DeleteEdgeAndConnectedPolygons(EdgeID: EdgeID,bDeleteOrphanedEdges: boolean,bDeleteOrphanedVertices: boolean,bDeleteOrphanedVertexInstances: boolean,bDeleteEmptyPolygonGroups: boolean): void;
+	CreateVertices(VerticesToCreate: VertexToCreate[],OutNewVertexIDs?: VertexID[]): {OutNewVertexIDs: VertexID[]};
+	CreateVertexInstances(VertexInstancesToCreate: VertexInstanceToCreate[],OutNewVertexInstanceIDs?: VertexInstanceID[]): {OutNewVertexInstanceIDs: VertexInstanceID[]};
+	CreatePolygons(PolygonsToCreate: PolygonToCreate[],OutNewPolygonIDs?: PolygonID[],OutNewEdgeIDs?: EdgeID[]): {OutNewPolygonIDs: PolygonID[], OutNewEdgeIDs: EdgeID[]};
+	CreatePolygonGroups(PolygonGroupsToCreate: PolygonGroupToCreate[],OutNewPolygonGroupIDs?: PolygonGroupID[]): {OutNewPolygonGroupIDs: PolygonGroupID[]};
+	CreateMissingPolygonPerimeterEdges(PolygonID: PolygonID,OutNewEdgeIDs?: EdgeID[]): {OutNewEdgeIDs: EdgeID[]};
+	CreateEmptyVertexRange(NumVerticesToCreate: number,OutNewVertexIDs?: VertexID[]): {OutNewVertexIDs: VertexID[]};
+	CreateEdges(EdgesToCreate: EdgeToCreate[],OutNewEdgeIDs?: EdgeID[]): {OutNewEdgeIDs: EdgeID[]};
+	ComputePolygonTriangulation(PolygonID: PolygonID,OutTriangles?: MeshTriangle[]): {OutTriangles: MeshTriangle[]};
+	ComputePolygonsSharedEdges(PolygonIDs: PolygonID[],OutSharedEdgeIDs?: EdgeID[]): {OutSharedEdgeIDs: EdgeID[]};
+	ComputePolygonPlane(PolygonID: PolygonID): Plane;
+	ComputePolygonNormal(PolygonID: PolygonID): Vector;
+	ComputePolygonCenter(PolygonID: PolygonID): Vector;
+	ComputeBoundingBoxAndSphere(): BoxSphereBounds;
+	ComputeBoundingBox(): Box;
+	ComputeBarycentricWeightForPointOnPolygon(PolygonID: PolygonID,PointOnPolygon: Vector,OutTriangle?: MeshTriangle,OutTriangleVertexWeights?: Vector): {OutTriangle: MeshTriangle, OutTriangleVertexWeights: Vector, $: boolean};
+	CommitInstance(ComponentToInstanceTo: PrimitiveComponent): EditableMesh;
+	Commit(): void;
+	ChangePolygonsVertexInstances(VertexInstancesForPolygons: ChangeVertexInstancesForPolygon[]): void;
+	BevelPolygons(PolygonIDs: PolygonID[],BevelFixedDistance: number,BevelProgressTowardCenter: number,OutNewCenterPolygonIDs?: PolygonID[],OutNewSidePolygonIDs?: PolygonID[]): {OutNewCenterPolygonIDs: PolygonID[], OutNewSidePolygonIDs: PolygonID[]};
+	AssignPolygonsToPolygonGroups(PolygonGroupForPolygons: PolygonGroupForPolygon[],bDeleteOrphanedPolygonGroups: boolean): void;
+	AnyChangesToUndo(): boolean;
+	static C(Other: UObject | any): EditableMesh;
 }
 
-declare class ArchVisCharacter extends Character { 
-	LookUpAxisName: string;
-	LookUpAtRateAxisName: string;
-	TurnAxisName: string;
-	TurnAtRateAxisName: string;
-	MoveForwardAxisName: string;
-	MoveRightAxisName: string;
-	MouseSensitivityScale_Pitch: number;
-	MouseSensitivityScale_Yaw: number;
-	static GetDefaultObject(): ArchVisCharacter;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ArchVisCharacter;
-	static C(Other: UObject | any): ArchVisCharacter;
+declare class EditableMeshFactory extends UObject { 
+	static Load(ResourceName: string): EditableMeshFactory;
+	static Find(Outer: UObject, ResourceName: string): EditableMeshFactory;
+	static GetDefaultObject(): EditableMeshFactory;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableMeshFactory;
+	static MakeEditableMesh(PrimitiveComponent: PrimitiveComponent,LODIndex: number): EditableMesh;
+	static C(Other: UObject | any): EditableMeshFactory;
 }
 
-declare class ArchVisCharMovementComponent extends CharacterMovementComponent { 
-	RotationalAcceleration: Rotator;
-	RotationalDeceleration: Rotator;
-	MaxRotationalVelocity: Rotator;
-	MinPitch: number;
-	MaxPitch: number;
-	WalkingFriction: number;
-	WalkingSpeed: number;
-	WalkingAcceleration: number;
-	static Load(ResourceName: string): ArchVisCharMovementComponent;
-	static Find(Outer: UObject, ResourceName: string): ArchVisCharMovementComponent;
-	static GetDefaultObject(): ArchVisCharMovementComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ArchVisCharMovementComponent;
-	static C(Other: UObject | any): ArchVisCharMovementComponent;
+declare class EditableStaticMeshAdapter extends EditableMeshAdapter { 
+	StaticMesh: StaticMesh;
+	OriginalStaticMesh: StaticMesh;
+	StaticMeshLODIndex: number;
+	static Load(ResourceName: string): EditableStaticMeshAdapter;
+	static Find(Outer: UObject, ResourceName: string): EditableStaticMeshAdapter;
+	static GetDefaultObject(): EditableStaticMeshAdapter;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditableStaticMeshAdapter;
+	static C(Other: UObject | any): EditableStaticMeshAdapter;
 }
 
-declare class AudioCaptureComponent extends SynthComponent { 
-	JitterLatencyFrames: number;
-	static Load(ResourceName: string): AudioCaptureComponent;
-	static Find(Outer: UObject, ResourceName: string): AudioCaptureComponent;
-	static GetDefaultObject(): AudioCaptureComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioCaptureComponent;
-	static C(Other: UObject | any): AudioCaptureComponent;
+declare class MobileInstalledContent extends UObject { 
+	static Load(ResourceName: string): MobileInstalledContent;
+	static Find(Outer: UObject, ResourceName: string): MobileInstalledContent;
+	static GetDefaultObject(): MobileInstalledContent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MobileInstalledContent;
+	Mount(PakOrder: number,MountPoint: string): boolean;
+	GetInstalledContentSize(): number;
+	GetDiskFreeSpace(): number;
+	static C(Other: UObject | any): MobileInstalledContent;
 }
 
-declare class ComponentReference { 
-	OtherActor: Actor;
-	ComponentProperty: string;
-	clone() : ComponentReference;
-	static C(Other: UObject | any): ComponentReference;
+declare class MobilePendingContent extends MobileInstalledContent { 
+	static Load(ResourceName: string): MobilePendingContent;
+	static Find(Outer: UObject, ResourceName: string): MobilePendingContent;
+	static GetDefaultObject(): MobilePendingContent;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MobilePendingContent;
+	GetTotalDownloadedSize(): number;
+	GetRequiredDiskSpace(): number;
+	GetInstallProgress(): number;
+	GetDownloadStatusText(): string;
+	GetDownloadSpeed(): number;
+	GetDownloadSize(): number;
+	static C(Other: UObject | any): MobilePendingContent;
 }
 
-declare class CableComponent extends MeshComponent { 
-	bAttachStart: boolean;
-	bAttachEnd: boolean;
-	AttachEndTo: ComponentReference;
-	AttachEndToSocketName: string;
-	EndLocation: Vector;
-	CableLength: number;
-	NumSegments: number;
-	SubstepTime: number;
-	SolverIterations: number;
-	bEnableStiffness: boolean;
-	bEnableCollision: boolean;
-	CollisionFriction: number;
-	CableForce: Vector;
-	CableGravityScale: number;
-	CableWidth: number;
-	NumSides: number;
-	TileMaterial: number;
-	static Load(ResourceName: string): CableComponent;
-	static Find(Outer: UObject, ResourceName: string): CableComponent;
-	static GetDefaultObject(): CableComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CableComponent;
-	SetAttachEndTo(Actor: Actor,ComponentProperty: string,SocketName: string): void;
-	GetCableParticleLocations(Locations?: Vector[]): {Locations: Vector[]};
-	GetAttachedComponent(): SceneComponent;
-	GetAttachedActor(): Actor;
-	static C(Other: UObject | any): CableComponent;
+declare class MobilePatchingLibrary extends BlueprintFunctionLibrary { 
+	static Load(ResourceName: string): MobilePatchingLibrary;
+	static Find(Outer: UObject, ResourceName: string): MobilePatchingLibrary;
+	static GetDefaultObject(): MobilePatchingLibrary;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MobilePatchingLibrary;
+	static HasActiveWiFiConnection(): boolean;
+	static GetSupportedPlatformNames(): string[];
+	static GetInstalledContent(InstallDirectory: string): MobileInstalledContent;
+	static GetActiveDeviceProfileName(): string;
+	static C(Other: UObject | any): MobilePatchingLibrary;
 }
 
-declare class CableActor extends Actor { 
-	CableComponent: CableComponent;
-	static GetDefaultObject(): CableActor;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CableActor;
-	static C(Other: UObject | any): CableActor;
+declare type EAndroidInstallLocation = 'InternalOnly' | 'PreferExternal' | 'Auto' | 'EAndroidInstallLocation_MAX';
+declare var EAndroidInstallLocation : { InternalOnly:'InternalOnly',PreferExternal:'PreferExternal',Auto:'Auto',EAndroidInstallLocation_MAX:'EAndroidInstallLocation_MAX', };
+declare type EAndroidScreenOrientation = 'Portrait' | 'ReversePortrait' | 'SensorPortrait' | 'Landscape' | 'ReverseLandscape' | 'SensorLandscape' | 'Sensor' | 'FullSensor' | 'EAndroidScreenOrientation_MAX';
+declare var EAndroidScreenOrientation : { Portrait:'Portrait',ReversePortrait:'ReversePortrait',SensorPortrait:'SensorPortrait',Landscape:'Landscape',ReverseLandscape:'ReverseLandscape',SensorLandscape:'SensorLandscape',Sensor:'Sensor',FullSensor:'FullSensor',EAndroidScreenOrientation_MAX:'EAndroidScreenOrientation_MAX', };
+declare type EAndroidAntVerbosity = 'Quiet' | 'Normal' | 'Verbose' | 'EAndroidAntVerbosity_MAX';
+declare var EAndroidAntVerbosity : { Quiet:'Quiet',Normal:'Normal',Verbose:'Verbose',EAndroidAntVerbosity_MAX:'EAndroidAntVerbosity_MAX', };
+declare type EAndroidDepthBufferPreference = 'Default' | 'Bits16' | 'Bits24' | 'Bits32' | 'EAndroidDepthBufferPreference_MAX';
+declare var EAndroidDepthBufferPreference : { Default:'Default',Bits16:'Bits16',Bits24:'Bits24',Bits32:'Bits32',EAndroidDepthBufferPreference_MAX:'EAndroidDepthBufferPreference_MAX', };
+declare type EOculusMobileDevice = 'GearGo' | 'Quest' | 'EOculusMobileDevice_MAX';
+declare var EOculusMobileDevice : { GearGo:'GearGo',Quest:'Quest',EOculusMobileDevice_MAX:'EOculusMobileDevice_MAX', };
+declare type EGoogleVRCaps = 'Cardboard' | 'Daydream33' | 'Daydream63' | 'Daydream66' | 'EGoogleVRCaps_MAX';
+declare var EGoogleVRCaps : { Cardboard:'Cardboard',Daydream33:'Daydream33',Daydream63:'Daydream63',Daydream66:'Daydream66',EGoogleVRCaps_MAX:'EGoogleVRCaps_MAX', };
+declare class GooglePlayAchievementMapping { 
+	Name: string;
+	AchievementID: string;
+	clone() : GooglePlayAchievementMapping;
+	static C(Other: UObject | any): GooglePlayAchievementMapping;
 }
 
-declare class CustomMeshTriangle { 
-	Vertex0: Vector;
-	Vertex1: Vector;
-	Vertex2: Vector;
-	clone() : CustomMeshTriangle;
-	static C(Other: UObject | any): CustomMeshTriangle;
+declare class GooglePlayLeaderboardMapping { 
+	Name: string;
+	LeaderboardID: string;
+	clone() : GooglePlayLeaderboardMapping;
+	static C(Other: UObject | any): GooglePlayLeaderboardMapping;
 }
 
-declare class CustomMeshComponent extends MeshComponent { 
-	static Load(ResourceName: string): CustomMeshComponent;
-	static Find(Outer: UObject, ResourceName: string): CustomMeshComponent;
-	static GetDefaultObject(): CustomMeshComponent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CustomMeshComponent;
-	SetCustomMeshTriangles(Triangles: CustomMeshTriangle[]): boolean;
-	ClearCustomMeshTriangles(): void;
-	AddCustomMeshTriangles(Triangles: CustomMeshTriangle[]): void;
-	static C(Other: UObject | any): CustomMeshComponent;
+declare type EAndroidAudio = 'Default' | 'OGG' | 'ADPCM' | 'EAndroidAudio_MAX';
+declare var EAndroidAudio : { Default:'Default',OGG:'OGG',ADPCM:'ADPCM',EAndroidAudio_MAX:'EAndroidAudio_MAX', };
+declare class PlatformRuntimeAudioCompressionOverrides { 
+	bOverrideCompressionTimes: boolean;
+	DurationThreshold: number;
+	MaxNumRandomBranches: number;
+	SoundCueQualityIndex: number;
+	clone() : PlatformRuntimeAudioCompressionOverrides;
+	static C(Other: UObject | any): PlatformRuntimeAudioCompressionOverrides;
 }
 
-declare class MobileInstalledContent extends UObject { 
-	static Load(ResourceName: string): MobileInstalledContent;
-	static Find(Outer: UObject, ResourceName: string): MobileInstalledContent;
-	static GetDefaultObject(): MobileInstalledContent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MobileInstalledContent;
-	Mount(PakOrder: number,MountPoint: string): boolean;
-	GetInstalledContentSize(): number;
-	GetDiskFreeSpace(): number;
-	static C(Other: UObject | any): MobileInstalledContent;
+declare type EAndroidGraphicsDebugger = 'None' | 'Mali' | 'Adreno' | 'EAndroidGraphicsDebugger_MAX';
+declare var EAndroidGraphicsDebugger : { None:'None',Mali:'Mali',Adreno:'Adreno',EAndroidGraphicsDebugger_MAX:'EAndroidGraphicsDebugger_MAX', };
+declare class AndroidRuntimeSettings extends UObject { 
+	PackageName: string;
+	StoreVersion: number;
+	StoreVersionOffsetArmV7: number;
+	StoreVersionOffsetArm64: number;
+	StoreVersionOffsetX8664: number;
+	ApplicationDisplayName: string;
+	VersionDisplayName: string;
+	MinSDKVersion: number;
+	TargetSDKVersion: number;
+	InstallLocation: EAndroidInstallLocation;
+	bEnableGradle: boolean;
+	bEnableLint: boolean;
+	bPackageDataInsideApk: boolean;
+	bCreateAllPlatformsInstall: boolean;
+	bDisableVerifyOBBOnStartUp: boolean;
+	bAllowLargeOBBFiles: boolean;
+	bAllowPatchOBBFile: boolean;
+	bUseExternalFilesDir: boolean;
+	Orientation: EAndroidScreenOrientation;
+	MaxAspectRatio: number;
+	bUseDisplayCutout: boolean;
+	AntVerbosity: EAndroidAntVerbosity;
+	bFullScreen: boolean;
+	bEnableNewKeyboard: boolean;
+	DepthBufferPreference: EAndroidDepthBufferPreference;
+	bValidateTextureFormats: boolean;
+	ExtraManifestNodeTags: string[];
+	ExtraApplicationNodeTags: string[];
+	ExtraApplicationSettings: string;
+	ExtraActivityNodeTags: string[];
+	ExtraActivitySettings: string;
+	ExtraPermissions: string[];
+	bAndroidVoiceEnabled: boolean;
+	PackageForOculusMobile: EOculusMobileDevice[];
+	bRemoveOSIG: boolean;
+	GoogleVRCaps: EGoogleVRCaps[];
+	bGoogleVRSustainedPerformance: boolean;
+	KeyStore: string;
+	KeyAlias: string;
+	KeyStorePassword: string;
+	KeyPassword: string;
+	bBuildForArmV7: boolean;
+	bBuildForArm64: boolean;
+	bBuildForX8664: boolean;
+	bBuildForES2: boolean;
+	bBuildForES31: boolean;
+	bSupportsVulkan: boolean;
+	bDetectVulkanByDefault: boolean;
+	bBuildWithHiddenSymbolVisibility: boolean;
+	bSaveSymbols: boolean;
+	bEnableGooglePlaySupport: boolean;
+	bUseGetAccounts: boolean;
+	GamesAppID: string;
+	AchievementMap: GooglePlayAchievementMapping[];
+	LeaderboardMap: GooglePlayLeaderboardMapping[];
+	bEnableSnapshots: boolean;
+	bSupportAdMob: boolean;
+	AdMobAdUnitID: string;
+	AdMobAdUnitIDs: string[];
+	GooglePlayLicenseKey: string;
+	GCMClientSenderID: string;
+	bShowLaunchImage: boolean;
+	bAllowIMU: boolean;
+	bAllowControllers: boolean;
+	bBlockAndroidKeysOnControllers: boolean;
+	AndroidAudio: EAndroidAudio;
+	AudioSampleRate: number;
+	AudioCallbackBufferFrameSize: number;
+	AudioNumBuffersToEnqueue: number;
+	AudioMaxChannels: number;
+	AudioNumSourceWorkers: number;
+	SpatializationPlugin: string;
+	ReverbPlugin: string;
+	OcclusionPlugin: string;
+	CompressionOverrides: PlatformRuntimeAudioCompressionOverrides;
+	bResampleForDevice: boolean;
+	MaxSampleRate: number;
+	HighSampleRate: number;
+	MedSampleRate: number;
+	LowSampleRate: number;
+	MinSampleRate: number;
+	CompressionQualityModifier: number;
+	AutoStreamingThreshold: number;
+	AndroidGraphicsDebugger: EAndroidGraphicsDebugger;
+	MaliGraphicsDebuggerPath: DirectoryPath;
+	bMultiTargetFormat_ETC1: boolean;
+	bMultiTargetFormat_ETC1a: boolean;
+	bMultiTargetFormat_ETC2: boolean;
+	bMultiTargetFormat_DXT: boolean;
+	bMultiTargetFormat_PVRTC: boolean;
+	bMultiTargetFormat_ATC: boolean;
+	bMultiTargetFormat_ASTC: boolean;
+	TextureFormatPriority_ETC1: number;
+	TextureFormatPriority_ETC1a: number;
+	TextureFormatPriority_ETC2: number;
+	TextureFormatPriority_DXT: number;
+	TextureFormatPriority_PVRTC: number;
+	TextureFormatPriority_ATC: number;
+	TextureFormatPriority_ASTC: number;
+	SDKAPILevelOverride: string;
+	NDKAPILevelOverride: string;
+	static Load(ResourceName: string): AndroidRuntimeSettings;
+	static Find(Outer: UObject, ResourceName: string): AndroidRuntimeSettings;
+	static GetDefaultObject(): AndroidRuntimeSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AndroidRuntimeSettings;
+	static C(Other: UObject | any): AndroidRuntimeSettings;
 }
 
-declare class MobilePendingContent extends MobileInstalledContent { 
-	static Load(ResourceName: string): MobilePendingContent;
-	static Find(Outer: UObject, ResourceName: string): MobilePendingContent;
-	static GetDefaultObject(): MobilePendingContent;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MobilePendingContent;
-	GetTotalDownloadedSize(): number;
-	GetRequiredDiskSpace(): number;
-	GetInstallProgress(): number;
-	GetDownloadStatusText(): string;
-	GetDownloadSpeed(): number;
-	GetDownloadSize(): number;
-	static C(Other: UObject | any): MobilePendingContent;
+declare type EOculusPlatform = 'PC' | 'Mobile' | 'Length' | 'EOculusPlatform_MAX';
+declare var EOculusPlatform : { PC:'PC',Mobile:'Mobile',Length:'Length',EOculusPlatform_MAX:'EOculusPlatform_MAX', };
+declare class OculusEditorSettings extends UObject { 
+	PerfToolIgnoreList: any;
+	PerfToolTargetPlatform: EOculusPlatform;
+	bAddMenuOption: boolean;
+	static Load(ResourceName: string): OculusEditorSettings;
+	static Find(Outer: UObject, ResourceName: string): OculusEditorSettings;
+	static GetDefaultObject(): OculusEditorSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OculusEditorSettings;
+	static C(Other: UObject | any): OculusEditorSettings;
 }
 
-declare class MobilePatchingLibrary extends BlueprintFunctionLibrary { 
-	static Load(ResourceName: string): MobilePatchingLibrary;
-	static Find(Outer: UObject, ResourceName: string): MobilePatchingLibrary;
-	static GetDefaultObject(): MobilePatchingLibrary;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MobilePatchingLibrary;
-	static HasActiveWiFiConnection(): boolean;
-	static GetSupportedPlatformNames(): string[];
-	static GetInstalledContent(InstallDirectory: string): MobileInstalledContent;
-	static GetActiveDeviceProfileName(): string;
-	static C(Other: UObject | any): MobilePatchingLibrary;
+declare type EOculusPlatformTarget = 'Rift' | 'Quest' | 'Mobile' | 'Length' | 'EOculusPlatformTarget_MAX';
+declare var EOculusPlatformTarget : { Rift:'Rift',Quest:'Quest',Mobile:'Mobile',Length:'Length',EOculusPlatformTarget_MAX:'EOculusPlatformTarget_MAX', };
+declare class OculusPlatformToolSettings extends UObject { 
+	OculusRiftBuildDirectory: string;
+	OculusRiftBuildVersion: string;
+	OculusTargetPlatform: EOculusPlatformTarget;
+	OculusApplicationID: string[];
+	OculusApplicationToken: string[];
+	OculusReleaseChannel: string[];
+	OculusReleaseNote: string[];
+	OculusLaunchFilePath: string[];
+	static Load(ResourceName: string): OculusPlatformToolSettings;
+	static Find(Outer: UObject, ResourceName: string): OculusPlatformToolSettings;
+	static GetDefaultObject(): OculusPlatformToolSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OculusPlatformToolSettings;
+	static C(Other: UObject | any): OculusPlatformToolSettings;
 }
 
 declare type ESteamVRTouchDPadMapping = 'FaceButtons' | 'ThumbstickDirections' | 'Disabled' | 'ESteamVRTouchDPadMapping_MAX';
@@ -10026,6 +15484,7 @@ declare class JavascriptGraphEdNode extends EdGraphNode {
 	BackgroundColor: SlateColor;
 	GraphNode: UObject;
 	IsTitleOnly: boolean;
+	OnWidgetFinalized: UnrealEngineDelegate<() => void>;
 	Bidirectional: boolean;
 	PriorityOrder: number;
 	static Load(ResourceName: string): JavascriptGraphEdNode;
@@ -10033,13 +15492,16 @@ declare class JavascriptGraphEdNode extends EdGraphNode {
 	static GetDefaultObject(): JavascriptGraphEdNode;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptGraphEdNode;
 	UpdateSlate(): void;
-	SetTitleSelectionMode(TitleHeight: number): void;
+	SetVisible(bVisible: boolean): void;
+	SetTitleSelectionMode(InTitleHeight: number): void;
+	SetEnable(bEnable: boolean): void;
 	ResetTitleSelectionMode(): void;
 	RemovePinByName(PinName: string): boolean;
 	RemovePin(Pin: JavascriptEdGraphPin): boolean;
+	GetVisible(): boolean;
 	GetNumOfPins(Direction: EEdGraphPinDirection): number;
 	GetDesiredSize(): Vector2D;
-	CreatePin(Dir: EEdGraphPinDirection,PinCategory: string,PinSubCategory: string,PinSubCategoryObject: UObject,PinName: string,PinToolTip: string,InPinParams: JavascriptPinParams): JavascriptEdGraphPin;
+	CreatePin(Dir: EEdGraphPinDirection,PinCategory: string,PinSubCategory: string,PinSubCategoryObject: UObject,PinName: string,PinToolTip: string,PinDisplayName: string,InPinParams: JavascriptPinParams): JavascriptEdGraphPin;
 	static C(Other: UObject | any): JavascriptGraphEdNode;
 }
 
@@ -10172,15 +15634,15 @@ declare class JavascriptGraphAssetGraphSchema extends EdGraphSchema {
 	OnGetSlateBrushName: UnrealEngineDelegate<(bHovered: boolean, Pin: JavascriptEdGraphPin) => string>;
 	OnPinConnectionListChanged: UnrealEngineDelegate<(Pin: JavascriptEdGraphPin) => void>;
 	OnTryCreateConnection: UnrealEngineDelegate<(PinA: JavascriptEdGraphPin, PinB: JavascriptEdGraphPin) => void>;
-	OnMouseEnter: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode, SlateEdNode: JavascriptSlateEdNode) => void>;
-	OnMouseLeave: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode, SlateEdNode: JavascriptSlateEdNode) => void>;
-	OnMouseMove: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode, Delta: Vector2D, bUserIsDragging: boolean, MouseZone: number) => void>;
-	OnMouseButtonDown: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode, MyGeometry: Geometry) => void>;
-	OnMouseButtonUp: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode, MyGeometry: Geometry) => void>;
+	OnMouseEnter: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode, SlateEdNode: JavascriptSlateEdNode, UPointerEvent: UPointerEvent) => void>;
+	OnMouseLeave: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode, SlateEdNode: JavascriptSlateEdNode, UPointerEvent: UPointerEvent) => void>;
+	OnMouseMove: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode, Delta: Vector2D, bUserIsDragging: boolean, MouseZone: number, UPointerEvent: UPointerEvent) => boolean>;
+	OnMouseButtonDown: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode, MyGeometry: Geometry, UPointerEvent: UPointerEvent) => boolean>;
+	OnMouseButtonUp: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode, MyGeometry: Geometry, UPointerEvent: UPointerEvent) => boolean>;
 	OnPerformSecondPassLayout: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode) => JavascriptPerformSecondPassLayoutContainer>;
 	OnRequiresSecondPassLayout: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode) => boolean>;
 	OnMoveTo: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode, NewPosition: Vector2D) => boolean>;
-	OnTakeCustomContentWidget: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode, OutUserWidget: JavascriptSlateWidget, OutLeftNodeBoxWidget: JavascriptSlateWidget, OutRightNodeBoxWidget: JavascriptSlateWidget, OutAltLeftNodeBoxWidget: JavascriptSlateWidget, OutAltRightNodeBoxWidget: JavascriptSlateWidget) => JavascriptSlateWidget>;
+	OnTakeContentWidget: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode, OutLeftNodeBoxWidget: JavascriptSlateWidget, OutRightNodeBoxWidget: JavascriptSlateWidget) => JavascriptSlateWidget>;
 	OnGetValueWidget: UnrealEngineDelegate<(Pin: JavascriptEdGraphPin) => JavascriptSlateWidget>;
 	OnGetActualPinWidget: UnrealEngineDelegate<(Pin: JavascriptEdGraphPin) => JavascriptSlateWidget>;
 	OnGetPinStatusIndicator: UnrealEngineDelegate<(Pin: JavascriptEdGraphPin) => JavascriptSlateWidget>;
@@ -10195,8 +15657,8 @@ declare class JavascriptGraphAssetGraphSchema extends EdGraphSchema {
 	OnDrawSplineWithArrow: UnrealEngineDelegate<(A: Vector2D, B: Vector2D, Params: JavascriptConnectionParams, Container: JavascriptGraphConnectionDrawingPolicyContainer, ArrowRadius: Vector2D) => boolean>;
 	OnDrawSplineWithArrow_Geom: UnrealEngineDelegate<(A: Geometry, B: Geometry, Params: JavascriptConnectionParams, Container: JavascriptGraphConnectionDrawingPolicyContainer) => boolean>;
 	OnDrawPreviewConnector: UnrealEngineDelegate<(PinGeometry: Geometry, StartPoint: Vector2D, Endpoint: Vector2D, Pin: JavascriptEdGraphPin, Params: JavascriptConnectionParams, Container: JavascriptGraphConnectionDrawingPolicyContainer) => boolean>;
-	OnTakeWidget: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode) => JavascriptSlateWidget>;
-	OnTakeTitleWidget: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode) => JavascriptSlateWidget>;
+	OnTakeUserWidget: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode) => JavascriptSlateWidget>;
+	OnTakeTitleAreaWidget: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode) => JavascriptSlateWidget>;
 	OnTakeErrorReportingWidget: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode) => JavascriptSlateWidget>;
 	OnGetString: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode, Query: EGraphSchemaGetStringQuery) => string>;
 	OnBuildMenu: UnrealEngineDelegate<(Builder: JavascriptGraphMenuBuilder) => void>;
@@ -10208,13 +15670,15 @@ declare class JavascriptGraphAssetGraphSchema extends EdGraphSchema {
 	OnNodeConnectionListChanged: UnrealEngineDelegate<(UNode: JavascriptGraphEdNode) => void>;
 	OnCreateAutomaticConversionNodeAndConnections: UnrealEngineDelegate<(A: JavascriptEdGraphPin, B: JavascriptEdGraphPin) => boolean>;
 	OnDetermineLinkGeometry: UnrealEngineDelegate<(OutPin: JavascriptEdGraphPin, InputPin: JavascriptEdGraphPin, StartWidgetGeometry: JavascriptArrangedWidget, EndWidgetGeometry: JavascriptArrangedWidget, Container: JavascriptDetermineLinkGeometryContainer) => boolean>;
-	OnGetNodeComment: UnrealEngineDelegate<(UNode: JavascriptGraphEdNode) => string>;
-	OnSetNodeComment: UnrealEngineDelegate<(UNode: JavascriptGraphEdNode, string: string) => void>;
 	OnIsNodeComment: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode) => boolean>;
 	OnEndUserInteraction: UnrealEngineDelegate<(UNode: JavascriptGraphEdNode) => void>;
 	OnCreateOutputSideAddButton: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode) => boolean>;
 	OnAddPinByAddButton: UnrealEngineDelegate<(UNode: JavascriptGraphEdNode) => void>;
 	OnShouldAlwaysPurgeOnModification: UnrealEngineDelegate<() => boolean>;
+	OnDragEnter: UnrealEngineDelegate<(Target: JavascriptGraphEdNode, Capture: JavascriptGraphEdNode, MyGeometry: Geometry) => boolean>;
+	OnDragLeave: UnrealEngineDelegate<(Instance: JavascriptGraphEdNode) => boolean>;
+	OnDragOver: UnrealEngineDelegate<(Target: JavascriptGraphEdNode, Capture: JavascriptGraphEdNode, MyGeometry: Geometry) => boolean>;
+	OnDrop: UnrealEngineDelegate<(Target: JavascriptGraphEdNode, Capture: JavascriptGraphEdNode, MyGeometry: Geometry) => boolean>;
 	static Load(ResourceName: string): JavascriptGraphAssetGraphSchema;
 	static Find(Outer: UObject, ResourceName: string): JavascriptGraphAssetGraphSchema;
 	static GetDefaultObject(): JavascriptGraphAssetGraphSchema;
@@ -10240,7 +15704,9 @@ declare class JavascriptGraphEdGraph extends EdGraph {
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptGraphEdGraph;
 	RebuildGenericGraph(): void;
 	static C(Other: UObject | any): JavascriptGraphEdGraph;
+	CreateEmptyNode(): JavascriptGraphEdNode;
 	NodeCreator(bSelectNewNode: boolean): JavascriptNodeCreator;
+	static CreateEmptyNode(Graph: JavascriptGraphEdGraph): JavascriptGraphEdNode;
 	static NodeCreator(Graph: JavascriptGraphEdGraph,bSelectNewNode: boolean): JavascriptNodeCreator;
 }
 
@@ -10252,6 +15718,8 @@ declare class JavascriptGraphEditorLibrary extends BlueprintFunctionLibrary {
 	static TryConnection(Schema: EdGraphSchema,A: JavascriptEdGraphPin,B: JavascriptEdGraphPin): void;
 	static SetPinType(Pin: JavascriptEdGraphPin,PinType: EdGraphPinType): void;
 	static SetPinInfo(A: JavascriptEdGraphPin,InPinName: string,InPinToolTip: string): void;
+	static SetPinHidden(A: JavascriptEdGraphPin,bHidden: boolean): void;
+	static SetParentPin(A: JavascriptEdGraphPin,Parent: JavascriptEdGraphPin): void;
 	static SetNodeMetaData(Schema: EdGraphSchema,UNode: EdGraphNode,KeyValue: string): boolean;
 	static ResizeNode(UNode: EdGraphNode,NewSize: Vector2D): void;
 	static RemovePinFromHoverSet(InSlateNode: JavascriptSlateEdNode,Pin: JavascriptEdGraphPin): void;
@@ -10259,15 +15727,20 @@ declare class JavascriptGraphEditorLibrary extends BlueprintFunctionLibrary {
 	static MakeRotatedBox(Container: JavascriptGraphConnectionDrawingPolicyContainer,ArrowDrawPos: Vector2D,AngleInRadians: number,WireColor: LinearColor): void;
 	static MakeLinkTo(A: JavascriptEdGraphPin,B: JavascriptEdGraphPin): void;
 	static IsValid(A: JavascriptEdGraphPin): boolean;
+	static IsPinHidden(A: JavascriptEdGraphPin): boolean;
 	static IsContainedHoveredPins(Container: JavascriptGraphConnectionDrawingPolicyContainer,Pin: JavascriptEdGraphPin): boolean;
+	static GetSubPins(A: JavascriptEdGraphPin): JavascriptEdGraphPin[];
 	static GetPinType(A: JavascriptEdGraphPin): EdGraphPinType;
 	static GetPins(UNode: EdGraphNode): JavascriptEdGraphPin[];
 	static GetPinName(A: JavascriptEdGraphPin): string;
+	static GetPinIndex(A: JavascriptEdGraphPin): number;
 	static GetPinGUID(A: JavascriptEdGraphPin): Guid;
 	static GetPinContainerType(A: JavascriptEdGraphPin): EJavascriptPinContainerType;
+	static GetParentPin(A: JavascriptEdGraphPin): JavascriptEdGraphPin;
 	static GetOwningNode(A: JavascriptEdGraphPin): EdGraphNode;
 	static GetOutputPinWidget(Container: JavascriptDetermineLinkGeometryContainer): JavascriptPinWidget;
 	static GetLinkedTo(A: JavascriptEdGraphPin): JavascriptEdGraphPin[];
+	static GetLinkedPinNum(A: JavascriptEdGraphPin): number;
 	static GetHorveredPinNum(Container: JavascriptGraphConnectionDrawingPolicyContainer): number;
 	static GetDirection(A: JavascriptEdGraphPin): EEdGraphPinDirection;
 	static GetDefaultObject(): JavascriptEdGraphPin;
@@ -10281,6 +15754,7 @@ declare class JavascriptGraphEditorLibrary extends BlueprintFunctionLibrary {
 	static DrawConnection(Container: JavascriptGraphConnectionDrawingPolicyContainer,A: Vector2D,B: Vector2D,Params: JavascriptConnectionParams): void;
 	static DetermineWiringStyle(Container: JavascriptGraphConnectionDrawingPolicyContainer,OutputPin: JavascriptEdGraphPin,InputPin: JavascriptEdGraphPin,Params?: JavascriptConnectionParams): {Params: JavascriptConnectionParams};
 	static DestroyNode(UNode: EdGraphNode): void;
+	static CreateEmptyNode(Graph: JavascriptGraphEdGraph): JavascriptGraphEdNode;
 	static CenterOf(Geom: Geometry): Vector2D;
 	static CanUserDeleteNode(UNode: EdGraphNode): boolean;
 	static CanDuplicateNode(UNode: EdGraphNode): boolean;
@@ -10328,15 +15802,14 @@ declare class JavascriptGraphEditorWidget extends Widget {
 	static C(Other: UObject | any): JavascriptGraphEditorWidget;
 }
 
-declare class JavascriptGraphPinObject extends Widget { 
-	OnGetGraphPin: UnrealEngineDelegate<() => JavascriptEdGraphPin>;
-	OnGetDefaultValue: UnrealEngineDelegate<() => UObject>;
-	OnSetDefaultValue: UnrealEngineDelegate<(Value: string) => void>;
-	static Load(ResourceName: string): JavascriptGraphPinObject;
-	static Find(Outer: UObject, ResourceName: string): JavascriptGraphPinObject;
-	static GetDefaultObject(): JavascriptGraphPinObject;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptGraphPinObject;
-	static C(Other: UObject | any): JavascriptGraphPinObject;
+declare class JavascriptGraphEdNodeWidget extends Widget { 
+	EdNode: JavascriptGraphEdNode;
+	static Load(ResourceName: string): JavascriptGraphEdNodeWidget;
+	static Find(Outer: UObject, ResourceName: string): JavascriptGraphEdNodeWidget;
+	static GetDefaultObject(): JavascriptGraphEdNodeWidget;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptGraphEdNodeWidget;
+	SetNode(InEdNode: JavascriptGraphEdNode): void;
+	static C(Other: UObject | any): JavascriptGraphEdNodeWidget;
 }
 
 declare class JavascriptTextProperty { 
@@ -10387,6 +15860,7 @@ declare class JavascriptEditorTab extends UObject {
 	static Find(Outer: UObject, ResourceName: string): JavascriptEditorTab;
 	static GetDefaultObject(): JavascriptEditorTab;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptEditorTab;
+	ForceCommit(): void;
 	Discard(): void;
 	Commit(): void;
 	CloseTab(Widget: Widget): void;
@@ -10440,6 +15914,20 @@ declare class JavascriptAssetEditorToolkit extends UObject {
 	static C(Other: UObject | any): JavascriptAssetEditorToolkit;
 }
 
+declare class JavascriptAssetPicker extends Widget { 
+	OnGetDefaultValue: UnrealEngineDelegate<() => UObject>;
+	OnSetDefaultValue: UnrealEngineDelegate<(Value: string) => void>;
+	CategoryObject: UObject;
+	AllowedClasses: string;
+	static Load(ResourceName: string): JavascriptAssetPicker;
+	static Find(Outer: UObject, ResourceName: string): JavascriptAssetPicker;
+	static GetDefaultObject(): JavascriptAssetPicker;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptAssetPicker;
+	SetCategoryObject(InCategoryObject: UObject): void;
+	SetAllowedClasses(InAllowedClasses: string): void;
+	static C(Other: UObject | any): JavascriptAssetPicker;
+}
+
 declare class JavascriptAssetTypeActions extends UObject { 
 	ActionsName: string;
 	Color: Color;
@@ -10456,6 +15944,16 @@ declare class JavascriptAssetTypeActions extends UObject {
 	static C(Other: UObject | any): JavascriptAssetTypeActions;
 }
 
+declare class JavascriptColorPicker extends Widget { 
+	OnColorChanged: UnrealEngineMulticastDelegate<(Color: LinearColor) => void>;
+	SelectedColor: LinearColor;
+	static Load(ResourceName: string): JavascriptColorPicker;
+	static Find(Outer: UObject, ResourceName: string): JavascriptColorPicker;
+	static GetDefaultObject(): JavascriptColorPicker;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptColorPicker;
+	static C(Other: UObject | any): JavascriptColorPicker;
+}
+
 declare class JavascriptCommandlet extends Commandlet { 
 	CmdLineTokens: string[];
 	CmdLineSwitches: string[];
@@ -10466,6 +15964,17 @@ declare class JavascriptCommandlet extends Commandlet {
 	static C(Other: UObject | any): JavascriptCommandlet;
 }
 
+declare class JavascriptCurveTableEditor extends Widget { 
+	static Load(ResourceName: string): JavascriptCurveTableEditor;
+	static Find(Outer: UObject, ResourceName: string): JavascriptCurveTableEditor;
+	static GetDefaultObject(): JavascriptCurveTableEditor;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptCurveTableEditor;
+	SetObject(UObject: CurveTable,bForceRefresh: boolean): void;
+	Destruct(): void;
+	Construct(): void;
+	static C(Other: UObject | any): JavascriptCurveTableEditor;
+}
+
 declare class JavascriptEditorEngineLibrary extends BlueprintFunctionLibrary { 
 	static Load(ResourceName: string): JavascriptEditorEngineLibrary;
 	static Find(Outer: UObject, ResourceName: string): JavascriptEditorEngineLibrary;
@@ -10724,6 +16233,7 @@ declare class JavascriptEditorLibrary extends BlueprintFunctionLibrary {
 	static SetFolderPath_Recursively(Actor: Actor,NewFolderPath: string): void;
 	static SetFolderPath(Actor: Actor,NewFolderPath: string): void;
 	static SetAlphamapDataFromMemory(LandscapeInfo: LandscapeInfo,LayerInfo: LandscapeLayerInfoObject,MinX: number,MinY: number,MaxX: number,MaxY: number,PaintingRestriction: ELandscapeLayerPaintingRestriction): void;
+	static SetActorLocation(Actor: Actor,NewLocation: Vector,bSweep: boolean,SweepHitResult?: HitResult,bTeleport?: boolean): {SweepHitResult: HitResult, $: boolean};
 	static SetActorLabel(Actor: Actor,NewActorLabel: string,bMarkDirty: boolean): void;
 	static Select(USelection: USelection,InObject: UObject): void;
 	static SavePackage(Package: Package,Filename: string): boolean;
@@ -10738,6 +16248,7 @@ declare class JavascriptEditorLibrary extends BlueprintFunctionLibrary {
 	static OpenFileDialog(WindowHandle: JavascriptWindow,DialogTitle: string,DefaultPath: string,DefaultFile: string,FileTypes: string,Flags: number,OutFilenames?: string[]): {OutFilenames: string[], $: boolean};
 	static OpenEditorForAssetByPath(AssetPathName: string,ObjectName: string): void;
 	static OpenEditorForAsset(Asset: UObject): boolean;
+	static NotifyUpdateCurveTable(InCurveTable: CurveTable): void;
 	static ModifyObject(UObject: UObject,bAlwaysMarkDirty: boolean): void;
 	static MarkPackageDirty(InObject: UObject): boolean;
 	static LoadImageFromDiskAsync(ImagePath: string,Callback: AsyncTaskDownloadImage): boolean;
@@ -10750,6 +16261,7 @@ declare class JavascriptEditorLibrary extends BlueprintFunctionLibrary {
 	static IsActorLabelEditable(Actor: Actor): boolean;
 	static IsActive(Transactor: Transactor): boolean;
 	static InvalidateModelGeometry(World: World,InLevel: Level): void;
+	static HasMetaData(Field: Field,Key: string): boolean;
 	static GetTransaction(Transactor: Transactor,QueueIndex: number): JavascriptTransaction;
 	static GetToolBarExtensibilityManager(What: string): JavascriptExtensibilityManager;
 	static GetTitle(Transaction: JavascriptTransaction): string;
@@ -10767,6 +16279,7 @@ declare class JavascriptEditorLibrary extends BlueprintFunctionLibrary {
 	static GetLayerInfoByName(LandscapeInfo: LandscapeInfo,LayerName: string,Owner: LandscapeProxy): LandscapeLayerInfoObject;
 	static GetLandscapeInfo(Landscape: Landscape,bSpawnNewActor: boolean): LandscapeInfo;
 	static GetLandscapeExtent(LandscapeInfo: LandscapeInfo,MinX?: number,MinY?: number,MaxX?: number,MaxY?: number): {MinX: number, MinY: number, MaxX: number, MaxY: number, $: boolean};
+	static GetKeyNameByKeyEvent(Event: KeyEvent): string;
 	static GetKey(Click: JavascriptViewportClick): Key;
 	static GetHeightmapDataToMemory(LandscapeInfo: LandscapeInfo,MinX: number,MinY: number,MaxX: number,MaxY: number): void;
 	static GetGroup(Name: string): JavascriptWorkspaceItem;
@@ -10775,6 +16288,7 @@ declare class JavascriptEditorLibrary extends BlueprintFunctionLibrary {
 	static GetEngine(): EditorEngine;
 	static GetDirection(Click: JavascriptViewportClick): Vector;
 	static GetDefaultBrush(World: World): Brush;
+	static GetDataTableAsJSON(InDataTable: DataTable,InDTExportFlags: number): string;
 	static GetContext(Transaction: JavascriptTransaction): string;
 	static GetClickPos(Click: JavascriptViewportClick): IntPoint;
 	static GetClass(AssetData: JavascriptAssetData): UnrealEngineClass;
@@ -10782,6 +16296,7 @@ declare class JavascriptEditorLibrary extends BlueprintFunctionLibrary {
 	static GetAsset(AssetData: JavascriptAssetData): UObject;
 	static GetAlphamapDataToMemory(LandscapeInfo: LandscapeInfo,LayerInfo: LandscapeLayerInfoObject,MinX: number,MinY: number,MaxX: number,MaxY: number): void;
 	static GetAllTags(AssetData: JavascriptAssetData,OutArray?: string[]): {OutArray: string[]};
+	static GetActorLocation(Actor: Actor): Vector;
 	static GetActorLabel(Actor: Actor): string;
 	static GetActor(Proxy: JavascriptHitProxy): Actor;
 	static FindWorldInPackage(Package: Package): World;
@@ -10822,6 +16337,7 @@ declare class JavascriptEditorLibrary extends BlueprintFunctionLibrary {
 	static BroadcastHotReload(): void;
 	static BroadcastAssetCreated(NewAsset: UObject): void;
 	static AddWhitelistedObject(InObject: UObject): void;
+	static AddRichCurve(InCurveTable: CurveTable,Key: string,InCurve: RichCurve): void;
 	static AddLogListingMessage(InLogName: string,InSeverity: EJavascriptMessageSeverity,LogText: string): void;
 	static AddLazyExtender(Manager: JavascriptExtensibilityManager,Delegates: JavascriptLazyExtenderDelegates): void;
 	static AddGroup(Parent: JavascriptWorkspaceItem,DisplayName: string): JavascriptWorkspaceItem;
@@ -11110,6 +16626,15 @@ declare class JavascriptInputEventStateLibrary extends BlueprintFunctionLibrary
 	static C(Other: UObject | any): JavascriptInputEventStateLibrary;
 }
 
+declare class JavascriptLogSubscriber extends UObject { 
+	OnNewLogMessage: UnrealEngineMulticastDelegate<(Message: string, Type: string, Category: string) => void>;
+	static Load(ResourceName: string): JavascriptLogSubscriber;
+	static Find(Outer: UObject, ResourceName: string): JavascriptLogSubscriber;
+	static GetDefaultObject(): JavascriptLogSubscriber;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptLogSubscriber;
+	static C(Other: UObject | any): JavascriptLogSubscriber;
+}
+
 declare type EJSCheckBoxState = 'Unchecked' | 'Checked' | 'Undetermined' | 'EJSCheckBoxState_MAX';
 declare var EJSCheckBoxState : { Unchecked:'Unchecked',Checked:'Checked',Undetermined:'Undetermined',EJSCheckBoxState_MAX:'EJSCheckBoxState_MAX', };
 declare class JavascriptNotification extends UObject { 
@@ -11154,6 +16679,8 @@ declare class JavascriptPropertyHandle {
 	GetMetaData(Key: string): string;
 	GetProperty(): Property;
 	GetValueAsFormattedString(OutValue?: string): {OutValue: string, $: EPropertyAccessResult};
+	IsEditConst(): boolean;
+	IsValidHandle(): boolean;
 	SetOnPropertyValueChanged(Custom: JavascriptPropertyCustomization): void;
 	SetValueFromFormattedString(InValue: string): EPropertyAccessResult;
 	static CreatePropertyNameWidget(Handle: JavascriptPropertyHandle,NameOverride: string,ToolTipOverride: string,bDisplayResetToDefault: boolean,bHideText: boolean,bHideThumbnail: boolean): JavascriptSlateWidget;
@@ -11162,6 +16689,8 @@ declare class JavascriptPropertyHandle {
 	static GetMetaData(Handle: JavascriptPropertyHandle,Key: string): string;
 	static GetProperty(Handle: JavascriptPropertyHandle): Property;
 	static GetValueAsFormattedString(Handle: JavascriptPropertyHandle,OutValue?: string): {OutValue: string, $: EPropertyAccessResult};
+	static IsEditConst(Handle: JavascriptPropertyHandle): boolean;
+	static IsValidHandle(Handle: JavascriptPropertyHandle): boolean;
 	static SetOnPropertyValueChanged(Handle: JavascriptPropertyHandle,Custom: JavascriptPropertyCustomization): void;
 	static SetValueFromFormattedString(Handle: JavascriptPropertyHandle,InValue: string): EPropertyAccessResult;
 }
@@ -11197,12 +16726,25 @@ declare class JavascriptDetailWidgetRow {
 declare class JavascriptPropertyTypeCustomizationUtils { 
 	clone() : JavascriptPropertyTypeCustomizationUtils;
 	static C(Other: UObject | any): JavascriptPropertyTypeCustomizationUtils;
+	RequestRefresh(bForce: boolean): void;
+	static RequestRefresh(CustomizationUtils: JavascriptPropertyTypeCustomizationUtils,bForce: boolean): void;
+}
+
+declare class JavascriptSimpleGetBoolDelegateWrapper extends UObject { 
+	delegate: UnrealEngineDelegate<() => boolean>;
+	static Load(ResourceName: string): JavascriptSimpleGetBoolDelegateWrapper;
+	static Find(Outer: UObject, ResourceName: string): JavascriptSimpleGetBoolDelegateWrapper;
+	static GetDefaultObject(): JavascriptSimpleGetBoolDelegateWrapper;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptSimpleGetBoolDelegateWrapper;
+	static C(Other: UObject | any): JavascriptSimpleGetBoolDelegateWrapper;
 }
 
 declare class JavascriptDetailPropertyRow { 
 	clone() : JavascriptDetailPropertyRow;
 	static C(Other: UObject | any): JavascriptDetailPropertyRow;
+	BindVisibility(Wrapper: JavascriptSimpleGetBoolDelegateWrapper): void;
 	CustomWidget(bShowChildren: boolean): JavascriptDetailWidgetRow;
+	static BindVisibility(Row: JavascriptDetailPropertyRow,Wrapper: JavascriptSimpleGetBoolDelegateWrapper): void;
 	static CustomWidget(Row: JavascriptDetailPropertyRow,bShowChildren: boolean): JavascriptDetailWidgetRow;
 }
 
@@ -11211,9 +16753,13 @@ declare class JavascriptDetailChildrenBuilder {
 	static C(Other: UObject | any): JavascriptDetailChildrenBuilder;
 	AddChildContent(SearchString: string): JavascriptDetailWidgetRow;
 	AddChildProperty(PropertyHandle: JavascriptPropertyHandle): JavascriptDetailPropertyRow;
+	AddExternalObjectProperty(Objects?: UObject[],PropertyName?: string,UniqueIdName?: string,bAllowChildrenOverride?: boolean,bCreateCategoryNodesOverride?: boolean): {Objects: UObject[], $: JavascriptDetailPropertyRow};
+	AddExternalObjects(Objects?: UObject[],UniqueIdName?: string): {Objects: UObject[], $: JavascriptDetailPropertyRow};
 	GenerateStructValueWidget(StructPropertyHandle: JavascriptPropertyHandle): JavascriptSlateWidget;
 	static AddChildContent(ChildBuilder: JavascriptDetailChildrenBuilder,SearchString: string): JavascriptDetailWidgetRow;
 	static AddChildProperty(ChildBuilder: JavascriptDetailChildrenBuilder,PropertyHandle: JavascriptPropertyHandle): JavascriptDetailPropertyRow;
+	static AddExternalObjectProperty(ChildBuilder: JavascriptDetailChildrenBuilder,Objects?: UObject[],PropertyName?: string,UniqueIdName?: string,bAllowChildrenOverride?: boolean,bCreateCategoryNodesOverride?: boolean): {Objects: UObject[], $: JavascriptDetailPropertyRow};
+	static AddExternalObjects(ChildBuilder: JavascriptDetailChildrenBuilder,Objects?: UObject[],UniqueIdName?: string): {Objects: UObject[], $: JavascriptDetailPropertyRow};
 	static GenerateStructValueWidget(ChildBuilder: JavascriptDetailChildrenBuilder,StructPropertyHandle: JavascriptPropertyHandle): JavascriptSlateWidget;
 }
 
@@ -11247,7 +16793,10 @@ declare class JavascriptPropertyCustomizationLibrary extends BlueprintFunctionLi
 	static SetHAlign(Decl: JavascriptDetailWidgetDecl,InAlignment: EHorizontalAlignment): void;
 	static SetFilterString(Row: JavascriptDetailWidgetRow,InFilterString: string): void;
 	static SetContent(Decl: JavascriptDetailWidgetDecl,Widget: JavascriptSlateWidget): void;
+	static RequestRefresh(CustomizationUtils: JavascriptPropertyTypeCustomizationUtils,bForce: boolean): void;
 	static NameContent(Row: JavascriptDetailWidgetRow): JavascriptDetailWidgetDecl;
+	static IsValidHandle(Handle: JavascriptPropertyHandle): boolean;
+	static IsEditConst(Handle: JavascriptPropertyHandle): boolean;
 	static GetValueAsFormattedString(Handle: JavascriptPropertyHandle,OutValue?: string): {OutValue: string, $: EPropertyAccessResult};
 	static GetProperty(Handle: JavascriptPropertyHandle): Property;
 	static GetMetaData(Handle: JavascriptPropertyHandle,Key: string): string;
@@ -11256,11 +16805,24 @@ declare class JavascriptPropertyCustomizationLibrary extends BlueprintFunctionLi
 	static CustomWidget(Row: JavascriptDetailPropertyRow,bShowChildren: boolean): JavascriptDetailWidgetRow;
 	static CreatePropertyValueWidget(Handle: JavascriptPropertyHandle,bHideDefaultPropertyButtons: boolean): JavascriptSlateWidget;
 	static CreatePropertyNameWidget(Handle: JavascriptPropertyHandle,NameOverride: string,ToolTipOverride: string,bDisplayResetToDefault: boolean,bHideText: boolean,bHideThumbnail: boolean): JavascriptSlateWidget;
+	static BindVisibility(Row: JavascriptDetailPropertyRow,Wrapper: JavascriptSimpleGetBoolDelegateWrapper): void;
+	static AddExternalObjects(ChildBuilder: JavascriptDetailChildrenBuilder,Objects?: UObject[],UniqueIdName?: string): {Objects: UObject[], $: JavascriptDetailPropertyRow};
+	static AddExternalObjectProperty(ChildBuilder: JavascriptDetailChildrenBuilder,Objects?: UObject[],PropertyName?: string,UniqueIdName?: string,bAllowChildrenOverride?: boolean,bCreateCategoryNodesOverride?: boolean): {Objects: UObject[], $: JavascriptDetailPropertyRow};
 	static AddChildProperty(ChildBuilder: JavascriptDetailChildrenBuilder,PropertyHandle: JavascriptPropertyHandle): JavascriptDetailPropertyRow;
 	static AddChildContent(ChildBuilder: JavascriptDetailChildrenBuilder,SearchString: string): JavascriptDetailWidgetRow;
 	static C(Other: UObject | any): JavascriptPropertyCustomizationLibrary;
 }
 
+declare class JavascriptPropertyTable extends Widget { 
+	static Load(ResourceName: string): JavascriptPropertyTable;
+	static Find(Outer: UObject, ResourceName: string): JavascriptPropertyTable;
+	static GetDefaultObject(): JavascriptPropertyTable;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptPropertyTable;
+	SetEditingObjects(InEditingObjects: UObject[]): void;
+	GetEditingObjects(): UObject[];
+	static C(Other: UObject | any): JavascriptPropertyTable;
+}
+
 declare class JavascriptRawMeshLibrary extends BlueprintFunctionLibrary { 
 	static Load(ResourceName: string): JavascriptRawMeshLibrary;
 	static Find(Outer: UObject, ResourceName: string): JavascriptRawMeshLibrary;
@@ -11307,6 +16869,24 @@ declare class JavascriptScrubControlPanel extends Widget {
 	static C(Other: UObject | any): JavascriptScrubControlPanel;
 }
 
+declare class JavascriptWebBrowser extends Widget { 
+	OnUrlChanged: UnrealEngineMulticastDelegate<(text: string) => void>;
+	OnBeforePopup: UnrealEngineMulticastDelegate<(URL: string, Frame: string) => void>;
+	bShowAddressBar: boolean;
+	bShowControls: boolean;
+	bSupportsThumbMouseButtonNavigation: boolean;
+	static Load(ResourceName: string): JavascriptWebBrowser;
+	static Find(Outer: UObject, ResourceName: string): JavascriptWebBrowser;
+	static GetDefaultObject(): JavascriptWebBrowser;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptWebBrowser;
+	LoadURL(NewURL: string): void;
+	LoadString(Contents: string,DummyURL: string): void;
+	GetUrl(): string;
+	GetTitleText(): string;
+	ExecuteJavascript(ScriptText: string): void;
+	static C(Other: UObject | any): JavascriptWebBrowser;
+}
+
 declare type EPropertyEditorNameAreaSettings = 'HideNameArea' | 'ObjectsUseNameArea' | 'ActorsUseNameArea' | 'ComponentsAndActorsUseNameArea' | 'EPropertyEditorNameAreaSettings_MAX';
 declare var EPropertyEditorNameAreaSettings : { HideNameArea:'HideNameArea',ObjectsUseNameArea:'ObjectsUseNameArea',ActorsUseNameArea:'ActorsUseNameArea',ComponentsAndActorsUseNameArea:'ComponentsAndActorsUseNameArea',EPropertyEditorNameAreaSettings_MAX:'EPropertyEditorNameAreaSettings_MAX', };
 declare class PropertyEditor extends Widget { 
@@ -11316,6 +16896,7 @@ declare class PropertyEditor extends Widget {
 	bAllowSearch: boolean;
 	bHideSelectionTip: boolean;
 	bReadOnly: boolean;
+	bEnablePropertyPath: boolean;
 	NameAreaSettings: EPropertyEditorNameAreaSettings;
 	static Load(ResourceName: string): PropertyEditor;
 	static Find(Outer: UObject, ResourceName: string): PropertyEditor;
@@ -11323,8 +16904,8 @@ declare class PropertyEditor extends Widget {
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PropertyEditor;
 	SetObjects(Objects: UObject[],bForceRefresh: boolean,bOverrideLock: boolean): void;
 	SetObject(UObject: UObject,bForceRefresh: boolean): void;
-	IsPropertyVisible(PropertName: string,ParentPropertyName: string): boolean;
-	IsPropertyReadOnly(PropertyName: string,ParentPropertyName: string): boolean;
+	IsPropertyVisible(PropertName: string,ParentPropertyName: string,PropertyPaths: string[]): boolean;
+	IsPropertyReadOnly(PropertyName: string,ParentPropertyName: string,PropertyPaths: string[]): boolean;
 	Destruct(): void;
 	Construct(): void;
 	static C(Other: UObject | any): PropertyEditor;
@@ -11401,228 +16982,110 @@ declare class TestBTService_Log extends BTService {
 	static Find(Outer: UObject, ResourceName: string): TestBTService_Log;
 	static GetDefaultObject(): TestBTService_Log;
 	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestBTService_Log;
-	static C(Other: UObject | any): TestBTService_Log;
-}
-
-declare class TestBTTask_LatentWithFlags extends BTTaskNode { 
-	LogIndexExecuteStart: number;
-	LogIndexExecuteFinish: number;
-	LogIndexAbortStart: number;
-	LogIndexAbortFinish: number;
-	ExecuteTicks: number;
-	AbortTicks: number;
-	KeyNameExecute: string;
-	KeyNameAbort: string;
-	LogResult: EBTNodeResult;
-	static Load(ResourceName: string): TestBTTask_LatentWithFlags;
-	static Find(Outer: UObject, ResourceName: string): TestBTTask_LatentWithFlags;
-	static GetDefaultObject(): TestBTTask_LatentWithFlags;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestBTTask_LatentWithFlags;
-	static C(Other: UObject | any): TestBTTask_LatentWithFlags;
-}
-
-declare class TestBTTask_Log extends BTTaskNode { 
-	LogIndex: number;
-	LogFinished: number;
-	ExecutionTicks: number;
-	LogResult: EBTNodeResult;
-	static Load(ResourceName: string): TestBTTask_Log;
-	static Find(Outer: UObject, ResourceName: string): TestBTTask_Log;
-	static GetDefaultObject(): TestBTTask_Log;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestBTTask_Log;
-	static C(Other: UObject | any): TestBTTask_Log;
-}
-
-declare class TestBTTask_SetFlag extends BTTaskNode { 
-	KeyName: string;
-	bValue: boolean;
-	TaskResult: EBTNodeResult;
-	static Load(ResourceName: string): TestBTTask_SetFlag;
-	static Find(Outer: UObject, ResourceName: string): TestBTTask_SetFlag;
-	static GetDefaultObject(): TestBTTask_SetFlag;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestBTTask_SetFlag;
-	static C(Other: UObject | any): TestBTTask_SetFlag;
-}
-
-declare class TestBTTask_SetValue extends BTTaskNode { 
-	KeyName: string;
-	Value: number;
-	TaskResult: EBTNodeResult;
-	static Load(ResourceName: string): TestBTTask_SetValue;
-	static Find(Outer: UObject, ResourceName: string): TestBTTask_SetValue;
-	static GetDefaultObject(): TestBTTask_SetValue;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestBTTask_SetValue;
-	static C(Other: UObject | any): TestBTTask_SetValue;
-}
-
-declare class TestPawnAction_Log extends PawnAction { 
-	static Load(ResourceName: string): TestPawnAction_Log;
-	static Find(Outer: UObject, ResourceName: string): TestPawnAction_Log;
-	static GetDefaultObject(): TestPawnAction_Log;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestPawnAction_Log;
-	static C(Other: UObject | any): TestPawnAction_Log;
-}
-
-declare class TestPawnAction_CallFunction extends TestPawnAction_Log { 
-	static Load(ResourceName: string): TestPawnAction_CallFunction;
-	static Find(Outer: UObject, ResourceName: string): TestPawnAction_CallFunction;
-	static GetDefaultObject(): TestPawnAction_CallFunction;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestPawnAction_CallFunction;
-	static C(Other: UObject | any): TestPawnAction_CallFunction;
-}
-
-declare type EPinnedCommandListType = 'Command' | 'CustomWidget' | 'EPinnedCommandListType_MAX';
-declare var EPinnedCommandListType : { Command:'Command',CustomWidget:'CustomWidget',EPinnedCommandListType_MAX:'EPinnedCommandListType_MAX', };
-declare class PinnedCommandListCommand { 
-	Name: string;
-	Binding: string;
-	Type: EPinnedCommandListType;
-	clone() : PinnedCommandListCommand;
-	static C(Other: UObject | any): PinnedCommandListCommand;
-}
-
-declare class PinnedCommandListContext { 
-	Name: string;
-	Commands: PinnedCommandListCommand[];
-	clone() : PinnedCommandListContext;
-	static C(Other: UObject | any): PinnedCommandListContext;
-}
-
-declare class PinnedCommandListSettings extends UObject { 
-	Contexts: PinnedCommandListContext[];
-	static Load(ResourceName: string): PinnedCommandListSettings;
-	static Find(Outer: UObject, ResourceName: string): PinnedCommandListSettings;
-	static GetDefaultObject(): PinnedCommandListSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PinnedCommandListSettings;
-	static C(Other: UObject | any): PinnedCommandListSettings;
-}
-
-declare class AnimationEditorPreviewActor extends Actor { 
-	static GetDefaultObject(): AnimationEditorPreviewActor;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationEditorPreviewActor;
-	static C(Other: UObject | any): AnimationEditorPreviewActor;
-}
-
-declare class PersonaPreviewSceneController extends UObject { 
-	static Load(ResourceName: string): PersonaPreviewSceneController;
-	static Find(Outer: UObject, ResourceName: string): PersonaPreviewSceneController;
-	static GetDefaultObject(): PersonaPreviewSceneController;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PersonaPreviewSceneController;
-	static C(Other: UObject | any): PersonaPreviewSceneController;
-}
-
-declare class PersonaPreviewSceneAnimationController extends PersonaPreviewSceneController { 
-	Animation: AnimationAsset;
-	static Load(ResourceName: string): PersonaPreviewSceneAnimationController;
-	static Find(Outer: UObject, ResourceName: string): PersonaPreviewSceneAnimationController;
-	static GetDefaultObject(): PersonaPreviewSceneAnimationController;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PersonaPreviewSceneAnimationController;
-	static C(Other: UObject | any): PersonaPreviewSceneAnimationController;
-}
-
-declare class PersonaPreviewSceneDefaultController extends PersonaPreviewSceneController { 
-	static Load(ResourceName: string): PersonaPreviewSceneDefaultController;
-	static Find(Outer: UObject, ResourceName: string): PersonaPreviewSceneDefaultController;
-	static GetDefaultObject(): PersonaPreviewSceneDefaultController;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PersonaPreviewSceneDefaultController;
-	static C(Other: UObject | any): PersonaPreviewSceneDefaultController;
-}
-
-declare class PersonaPreviewSceneDescription extends UObject { 
-	PreviewController: UnrealEngineClass;
-	PreviewControllerInstance: PersonaPreviewSceneController;
-	PreviewControllerInstances: PersonaPreviewSceneController[];
-	PreviewMesh: SkeletalMesh;
-	AdditionalMeshes: DataAsset;
-	DefaultAdditionalMeshes: PreviewMeshCollection;
-	static Load(ResourceName: string): PersonaPreviewSceneDescription;
-	static Find(Outer: UObject, ResourceName: string): PersonaPreviewSceneDescription;
-	static GetDefaultObject(): PersonaPreviewSceneDescription;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PersonaPreviewSceneDescription;
-	static C(Other: UObject | any): PersonaPreviewSceneDescription;
-}
-
-declare class PersonaPreviewSceneRefPoseController extends PersonaPreviewSceneController { 
-	bResetBoneTransforms: boolean;
-	static Load(ResourceName: string): PersonaPreviewSceneRefPoseController;
-	static Find(Outer: UObject, ResourceName: string): PersonaPreviewSceneRefPoseController;
-	static GetDefaultObject(): PersonaPreviewSceneRefPoseController;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PersonaPreviewSceneRefPoseController;
-	static C(Other: UObject | any): PersonaPreviewSceneRefPoseController;
+	static C(Other: UObject | any): TestBTService_Log;
 }
 
-declare class GlobalEditorUtilityBase extends UObject { 
-	HelpText: string;
-	bDirtiedSelectionSet: boolean;
-	bAutoRunDefaultAction: boolean;
-	OnEachSelectedActor: UnrealEngineMulticastDelegate<(Actor: Actor, index: number) => void>;
-	OnEachSelectedAsset: UnrealEngineMulticastDelegate<(Asset: UObject, index: number) => void>;
-	static Load(ResourceName: string): GlobalEditorUtilityBase;
-	static Find(Outer: UObject, ResourceName: string): GlobalEditorUtilityBase;
-	static GetDefaultObject(): GlobalEditorUtilityBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GlobalEditorUtilityBase;
-	SetActorSelectionState(Actor: Actor,bShouldBeSelected: boolean): void;
-	SelectNothing(): void;
-	RenameAsset(Asset: UObject,NewName: string): void;
-	OnDefaultActionClicked(): void;
-	GetSelectionSet(): Actor[];
-	GetSelectionBounds(Origin?: Vector,BoxExtent?: Vector,SphereRadius?: number): {Origin: Vector, BoxExtent: Vector, SphereRadius: number};
-	GetSelectedAssets(): UObject[];
-	GetEditorUserSettings(): EditorPerProjectUserSettings;
-	GetActorReference(PathToActor: string): Actor;
-	ForEachSelectedAsset(): void;
-	ForEachSelectedActor(): void;
-	ClearActorSelectionSet(): void;
-	static C(Other: UObject | any): GlobalEditorUtilityBase;
+declare class TestBTTask_LatentWithFlags extends BTTaskNode { 
+	LogIndexExecuteStart: number;
+	LogIndexExecuteFinish: number;
+	LogIndexAbortStart: number;
+	LogIndexAbortFinish: number;
+	ExecuteTicks: number;
+	AbortTicks: number;
+	KeyNameExecute: string;
+	KeyNameAbort: string;
+	LogResult: EBTNodeResult;
+	static Load(ResourceName: string): TestBTTask_LatentWithFlags;
+	static Find(Outer: UObject, ResourceName: string): TestBTTask_LatentWithFlags;
+	static GetDefaultObject(): TestBTTask_LatentWithFlags;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestBTTask_LatentWithFlags;
+	static C(Other: UObject | any): TestBTTask_LatentWithFlags;
 }
 
-declare class ActorActionUtility extends GlobalEditorUtilityBase { 
-	static Load(ResourceName: string): ActorActionUtility;
-	static Find(Outer: UObject, ResourceName: string): ActorActionUtility;
-	static GetDefaultObject(): ActorActionUtility;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorActionUtility;
-	GetSupportedClass(): UnrealEngineClass;
-	static C(Other: UObject | any): ActorActionUtility;
+declare class TestBTTask_Log extends BTTaskNode { 
+	LogIndex: number;
+	LogFinished: number;
+	ExecutionTicks: number;
+	LogResult: EBTNodeResult;
+	static Load(ResourceName: string): TestBTTask_Log;
+	static Find(Outer: UObject, ResourceName: string): TestBTTask_Log;
+	static GetDefaultObject(): TestBTTask_Log;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestBTTask_Log;
+	static C(Other: UObject | any): TestBTTask_Log;
 }
 
-declare class AssetActionUtility extends GlobalEditorUtilityBase { 
-	static Load(ResourceName: string): AssetActionUtility;
-	static Find(Outer: UObject, ResourceName: string): AssetActionUtility;
-	static GetDefaultObject(): AssetActionUtility;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetActionUtility;
-	GetSupportedClass(): UnrealEngineClass;
-	static C(Other: UObject | any): AssetActionUtility;
+declare class TestBTTask_SetFlag extends BTTaskNode { 
+	KeyName: string;
+	bValue: boolean;
+	TaskResult: EBTNodeResult;
+	static Load(ResourceName: string): TestBTTask_SetFlag;
+	static Find(Outer: UObject, ResourceName: string): TestBTTask_SetFlag;
+	static GetDefaultObject(): TestBTTask_SetFlag;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestBTTask_SetFlag;
+	static C(Other: UObject | any): TestBTTask_SetFlag;
 }
 
-declare class EditorUtilityBlueprint extends Blueprint { 
-	static Load(ResourceName: string): EditorUtilityBlueprint;
-	static Find(Outer: UObject, ResourceName: string): EditorUtilityBlueprint;
-	static GetDefaultObject(): EditorUtilityBlueprint;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorUtilityBlueprint;
-	static C(Other: UObject | any): EditorUtilityBlueprint;
+declare class TestBTTask_SetValue extends BTTaskNode { 
+	KeyName: string;
+	Value: number;
+	TaskResult: EBTNodeResult;
+	static Load(ResourceName: string): TestBTTask_SetValue;
+	static Find(Outer: UObject, ResourceName: string): TestBTTask_SetValue;
+	static GetDefaultObject(): TestBTTask_SetValue;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestBTTask_SetValue;
+	static C(Other: UObject | any): TestBTTask_SetValue;
 }
 
-declare class EditorUtilityBlueprintFactory extends Factory { 
-	ParentClass: UnrealEngineClass;
-	static Load(ResourceName: string): EditorUtilityBlueprintFactory;
-	static Find(Outer: UObject, ResourceName: string): EditorUtilityBlueprintFactory;
-	static GetDefaultObject(): EditorUtilityBlueprintFactory;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EditorUtilityBlueprintFactory;
-	static C(Other: UObject | any): EditorUtilityBlueprintFactory;
+declare class TestPawnAction_Log extends PawnAction { 
+	static Load(ResourceName: string): TestPawnAction_Log;
+	static Find(Outer: UObject, ResourceName: string): TestPawnAction_Log;
+	static GetDefaultObject(): TestPawnAction_Log;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestPawnAction_Log;
+	static C(Other: UObject | any): TestPawnAction_Log;
 }
 
-declare class PlacedEditorUtilityBase extends Actor { 
-	HelpText: string;
-	static GetDefaultObject(): PlacedEditorUtilityBase;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlacedEditorUtilityBase;
-	SetLevelViewportCameraInfo(CameraLocation: Vector,CameraRotation: Rotator): void;
-	SetActorSelectionState(Actor: Actor,bShouldBeSelected: boolean): void;
-	SelectNothing(): void;
-	GetSelectionSet(): Actor[];
-	GetLevelViewportCameraInfo(CameraLocation?: Vector,CameraRotation?: Rotator): {CameraLocation: Vector, CameraRotation: Rotator, $: boolean};
-	GetActorReference(PathToActor: string): Actor;
-	ClearActorSelectionSet(): void;
-	static C(Other: UObject | any): PlacedEditorUtilityBase;
+declare class TestPawnAction_CallFunction extends TestPawnAction_Log { 
+	static Load(ResourceName: string): TestPawnAction_CallFunction;
+	static Find(Outer: UObject, ResourceName: string): TestPawnAction_CallFunction;
+	static GetDefaultObject(): TestPawnAction_CallFunction;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestPawnAction_CallFunction;
+	static C(Other: UObject | any): TestPawnAction_CallFunction;
+}
+
+declare type ELiveCodingStartupMode = 'Automatic' | 'AutomaticButHidden' | 'Manual' | 'ELiveCodingStartupMode_MAX';
+declare var ELiveCodingStartupMode : { Automatic:'Automatic',AutomaticButHidden:'AutomaticButHidden',Manual:'Manual',ELiveCodingStartupMode_MAX:'ELiveCodingStartupMode_MAX', };
+declare class LiveCodingSettings extends UObject { 
+	bEnabled: boolean;
+	Startup: ELiveCodingStartupMode;
+	bPreloadEngineModules: boolean;
+	bPreloadEnginePluginModules: boolean;
+	bPreloadProjectModules: boolean;
+	bPreloadProjectPluginModules: boolean;
+	PreloadNamedModules: string[];
+	static Load(ResourceName: string): LiveCodingSettings;
+	static Find(Outer: UObject, ResourceName: string): LiveCodingSettings;
+	static GetDefaultObject(): LiveCodingSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveCodingSettings;
+	static C(Other: UObject | any): LiveCodingSettings;
+}
+
+declare class StructViewerProjectSettings extends UObject { 
+	InternalOnlyPaths: DirectoryPath[];
+	InternalOnlyStructs: ScriptStruct[];
+	static Load(ResourceName: string): StructViewerProjectSettings;
+	static Find(Outer: UObject, ResourceName: string): StructViewerProjectSettings;
+	static GetDefaultObject(): StructViewerProjectSettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StructViewerProjectSettings;
+	static C(Other: UObject | any): StructViewerProjectSettings;
+}
+
+declare class UndoHistorySettings extends UObject { 
+	bShowTransactionDetails: boolean;
+	static Load(ResourceName: string): UndoHistorySettings;
+	static Find(Outer: UObject, ResourceName: string): UndoHistorySettings;
+	static GetDefaultObject(): UndoHistorySettings;
+	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UndoHistorySettings;
+	static C(Other: UObject | any): UndoHistorySettings;
 }
 
 declare class LocalizationDashboardSettings extends UObject { 
@@ -11641,6 +17104,7 @@ declare class MeshInstancingSettings {
 	MeshReplacementMethod: EMeshInstancingReplacementMethod;
 	bSkipMeshesWithVertexColors: boolean;
 	bUseHLODVolumes: boolean;
+	ISMComponentToUse: UnrealEngineClass;
 	clone() : MeshInstancingSettings;
 	static C(Other: UObject | any): MeshInstancingSettings;
 }
@@ -11680,144 +17144,8 @@ declare class EditorKeyboardShortcutSettings extends DeveloperSettings {
 	static C(Other: UObject | any): EditorKeyboardShortcutSettings;
 }
 
-declare type EAndroidInstallLocation = 'InternalOnly' | 'PreferExternal' | 'Auto' | 'EAndroidInstallLocation_MAX';
-declare var EAndroidInstallLocation : { InternalOnly:'InternalOnly',PreferExternal:'PreferExternal',Auto:'Auto',EAndroidInstallLocation_MAX:'EAndroidInstallLocation_MAX', };
-declare type EAndroidScreenOrientation = 'Portrait' | 'ReversePortrait' | 'SensorPortrait' | 'Landscape' | 'ReverseLandscape' | 'SensorLandscape' | 'Sensor' | 'FullSensor' | 'EAndroidScreenOrientation_MAX';
-declare var EAndroidScreenOrientation : { Portrait:'Portrait',ReversePortrait:'ReversePortrait',SensorPortrait:'SensorPortrait',Landscape:'Landscape',ReverseLandscape:'ReverseLandscape',SensorLandscape:'SensorLandscape',Sensor:'Sensor',FullSensor:'FullSensor',EAndroidScreenOrientation_MAX:'EAndroidScreenOrientation_MAX', };
-declare type EAndroidAntVerbosity = 'Quiet' | 'Normal' | 'Verbose' | 'EAndroidAntVerbosity_MAX';
-declare var EAndroidAntVerbosity : { Quiet:'Quiet',Normal:'Normal',Verbose:'Verbose',EAndroidAntVerbosity_MAX:'EAndroidAntVerbosity_MAX', };
-declare type EAndroidDepthBufferPreference = 'Default' | 'Bits16' | 'Bits24' | 'Bits32' | 'EAndroidDepthBufferPreference_MAX';
-declare var EAndroidDepthBufferPreference : { Default:'Default',Bits16:'Bits16',Bits24:'Bits24',Bits32:'Bits32',EAndroidDepthBufferPreference_MAX:'EAndroidDepthBufferPreference_MAX', };
-declare type EGoogleVRCaps = 'Cardboard' | 'Daydream33' | 'Daydream63' | 'Daydream66' | 'EGoogleVRCaps_MAX';
-declare var EGoogleVRCaps : { Cardboard:'Cardboard',Daydream33:'Daydream33',Daydream63:'Daydream63',Daydream66:'Daydream66',EGoogleVRCaps_MAX:'EGoogleVRCaps_MAX', };
-declare class GooglePlayAchievementMapping { 
-	Name: string;
-	AchievementID: string;
-	clone() : GooglePlayAchievementMapping;
-	static C(Other: UObject | any): GooglePlayAchievementMapping;
-}
-
-declare class GooglePlayLeaderboardMapping { 
-	Name: string;
-	LeaderboardID: string;
-	clone() : GooglePlayLeaderboardMapping;
-	static C(Other: UObject | any): GooglePlayLeaderboardMapping;
-}
-
-declare type EAndroidAudio = 'Default' | 'OGG' | 'ADPCM' | 'EAndroidAudio_MAX';
-declare var EAndroidAudio : { Default:'Default',OGG:'OGG',ADPCM:'ADPCM',EAndroidAudio_MAX:'EAndroidAudio_MAX', };
-declare class PlatformRuntimeAudioCompressionOverrides { 
-	bOverrideCompressionTimes: boolean;
-	DurationThreshold: number;
-	MaxNumRandomBranches: number;
-	SoundCueQualityIndex: number;
-	clone() : PlatformRuntimeAudioCompressionOverrides;
-	static C(Other: UObject | any): PlatformRuntimeAudioCompressionOverrides;
-}
-
-declare type EAndroidGraphicsDebugger = 'None' | 'Mali' | 'Adreno' | 'EAndroidGraphicsDebugger_MAX';
-declare var EAndroidGraphicsDebugger : { None:'None',Mali:'Mali',Adreno:'Adreno',EAndroidGraphicsDebugger_MAX:'EAndroidGraphicsDebugger_MAX', };
-declare class AndroidRuntimeSettings extends UObject { 
-	PackageName: string;
-	StoreVersion: number;
-	ApplicationDisplayName: string;
-	VersionDisplayName: string;
-	MinSDKVersion: number;
-	TargetSDKVersion: number;
-	InstallLocation: EAndroidInstallLocation;
-	bEnableGradle: boolean;
-	bEnableLint: boolean;
-	bPackageDataInsideApk: boolean;
-	bCreateAllPlatformsInstall: boolean;
-	bDisableVerifyOBBOnStartUp: boolean;
-	bAllowLargeOBBFiles: boolean;
-	bUseExternalFilesDir: boolean;
-	Orientation: EAndroidScreenOrientation;
-	MaxAspectRatio: number;
-	AntVerbosity: EAndroidAntVerbosity;
-	bFullScreen: boolean;
-	bEnableNewKeyboard: boolean;
-	DepthBufferPreference: EAndroidDepthBufferPreference;
-	bValidateTextureFormats: boolean;
-	ExtraManifestNodeTags: string[];
-	ExtraApplicationNodeTags: string[];
-	ExtraApplicationSettings: string;
-	ExtraActivityNodeTags: string[];
-	ExtraActivitySettings: string;
-	ExtraPermissions: string[];
-	bAndroidVoiceEnabled: boolean;
-	bPackageForGearVR: boolean;
-	bRemoveOSIG: boolean;
-	GoogleVRCaps: EGoogleVRCaps[];
-	bGoogleVRSustainedPerformance: boolean;
-	KeyStore: string;
-	KeyAlias: string;
-	KeyStorePassword: string;
-	KeyPassword: string;
-	bBuildForArmV7: boolean;
-	bBuildForArm64: boolean;
-	bBuildForX8664: boolean;
-	bBuildForES2: boolean;
-	bBuildForES31: boolean;
-	bSupportsVulkan: boolean;
-	bDetectVulkanByDefault: boolean;
-	bBuildWithHiddenSymbolVisibility: boolean;
-	bSaveSymbols: boolean;
-	bEnableGooglePlaySupport: boolean;
-	bUseGetAccounts: boolean;
-	GamesAppID: string;
-	AchievementMap: GooglePlayAchievementMapping[];
-	LeaderboardMap: GooglePlayLeaderboardMapping[];
-	bSupportAdMob: boolean;
-	AdMobAdUnitID: string;
-	AdMobAdUnitIDs: string[];
-	GooglePlayLicenseKey: string;
-	GCMClientSenderID: string;
-	bShowLaunchImage: boolean;
-	bAllowIMU: boolean;
-	bAllowControllers: boolean;
-	AndroidAudio: EAndroidAudio;
-	AudioSampleRate: number;
-	AudioCallbackBufferFrameSize: number;
-	AudioNumBuffersToEnqueue: number;
-	AudioMaxChannels: number;
-	AudioNumSourceWorkers: number;
-	SpatializationPlugin: string;
-	ReverbPlugin: string;
-	OcclusionPlugin: string;
-	CompressionOverrides: PlatformRuntimeAudioCompressionOverrides;
-	bResampleForDevice: boolean;
-	MaxSampleRate: number;
-	HighSampleRate: number;
-	MedSampleRate: number;
-	LowSampleRate: number;
-	MinSampleRate: number;
-	CompressionQualityModifier: number;
-	AndroidGraphicsDebugger: EAndroidGraphicsDebugger;
-	MaliGraphicsDebuggerPath: DirectoryPath;
-	bMultiTargetFormat_ETC1: boolean;
-	bMultiTargetFormat_ETC1a: boolean;
-	bMultiTargetFormat_ETC2: boolean;
-	bMultiTargetFormat_DXT: boolean;
-	bMultiTargetFormat_PVRTC: boolean;
-	bMultiTargetFormat_ATC: boolean;
-	bMultiTargetFormat_ASTC: boolean;
-	TextureFormatPriority_ETC1: number;
-	TextureFormatPriority_ETC1a: number;
-	TextureFormatPriority_ETC2: number;
-	TextureFormatPriority_DXT: number;
-	TextureFormatPriority_PVRTC: number;
-	TextureFormatPriority_ATC: number;
-	TextureFormatPriority_ASTC: number;
-	SDKAPILevelOverride: string;
-	NDKAPILevelOverride: string;
-	static Load(ResourceName: string): AndroidRuntimeSettings;
-	static Find(Outer: UObject, ResourceName: string): AndroidRuntimeSettings;
-	static GetDefaultObject(): AndroidRuntimeSettings;
-	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AndroidRuntimeSettings;
-	static C(Other: UObject | any): AndroidRuntimeSettings;
-}
-
+declare type EIOSCloudKitSyncStrategy = 'None' | 'OnlyAtGameStart' | 'Always' | 'EIOSCloudKitSyncStrategy_MAX';
+declare var EIOSCloudKitSyncStrategy : { None:'None',OnlyAtGameStart:'OnlyAtGameStart',Always:'Always',EIOSCloudKitSyncStrategy_MAX:'EIOSCloudKitSyncStrategy_MAX', };
 declare class IOSBuildResourceDirectory { 
 	Path: string;
 	clone() : IOSBuildResourceDirectory;
@@ -11839,6 +17167,7 @@ declare var EIOSVersion : { IOS_61:'IOS_61',IOS_7:'IOS_7',IOS_8:'IOS_8',IOS_9:'I
 declare class IOSRuntimeSettings extends UObject { 
 	bEnableGameCenterSupport: boolean;
 	bEnableCloudKitSupport: boolean;
+	IOSCloudKitSyncStrategy: EIOSCloudKitSyncStrategy;
 	bEnableRemoteNotificationsSupport: boolean;
 	bEnableBackgroundFetch: boolean;
 	bSupportsMetal: boolean;
@@ -11858,6 +17187,7 @@ declare class IOSRuntimeSettings extends UObject {
 	bShipForArm64: boolean;
 	bShipForArmV7S: boolean;
 	bShipForBitcode: boolean;
+	bEnableAdvertisingIdentifier: boolean;
 	AdditionalLinkerFlags: string;
 	AdditionalShippingLinkerFlags: string;
 	RemoteServerName: string;
@@ -11871,10 +17201,12 @@ declare class IOSRuntimeSettings extends UObject {
 	bUseRemoteAsVirtualJoystick: boolean;
 	bUseRemoteAbsoluteDpadValues: boolean;
 	bAllowControllers: boolean;
+	bDisableMotionData: boolean;
 	bSupportsPortraitOrientation: boolean;
 	bSupportsUpsideDownOrientation: boolean;
 	bSupportsLandscapeLeftOrientation: boolean;
 	bSupportsLandscapeRightOrientation: boolean;
+	bSupportsITunesFileSharing: boolean;
 	PreferredLandscapeOrientation: EIOSLandscapeOrientation;
 	BundleDisplayName: string;
 	BundleName: string;
@@ -11894,6 +17226,7 @@ declare class IOSRuntimeSettings extends UObject {
 	bDisableHTTPS: boolean;
 	MaxShaderLanguageVersion: number;
 	UseFastIntrinsics: boolean;
+	ForceFloats: boolean;
 	EnableMathOptimisations: boolean;
 	bUseIntegratedKeyboard: boolean;
 	AudioSampleRate: number;
@@ -11912,6 +17245,7 @@ declare class IOSRuntimeSettings extends UObject {
 	LowSampleRate: number;
 	MinSampleRate: number;
 	CompressionQualityModifier: number;
+	AutoStreamingThreshold: number;
 	static Load(ResourceName: string): IOSRuntimeSettings;
 	static Find(Outer: UObject, ResourceName: string): IOSRuntimeSettings;
 	static GetDefaultObject(): IOSRuntimeSettings;
@@ -11936,13 +17270,14 @@ declare class LuminRuntimeSettings extends UObject {
 	IconModelPath: DirectoryPath;
 	IconPortalPath: DirectoryPath;
 	VersionCode: number;
-	MinimumOSVersion: string;
+	MinimumAPILevel: number;
 	AppPrivileges: ELuminPrivilege[];
 	ExtraApplicationNodes: string[];
 	ExtraComponentNodes: string[];
 	SpatializationPlugin: string;
 	ReverbPlugin: string;
 	OcclusionPlugin: string;
+	bRemoveDebugInfo: boolean;
 	static Load(ResourceName: string): LuminRuntimeSettings;
 	static Find(Outer: UObject, ResourceName: string): LuminRuntimeSettings;
 	static GetDefaultObject(): LuminRuntimeSettings;
@@ -11977,6 +17312,8 @@ declare var ECanvasScalingMode : { Stretch:'Stretch',Aspect:'Aspect',Fixed:'Fixe
 declare class HTML5TargetSettings extends UObject { 
 	EnableIndexedDB: boolean;
 	UseFixedTimeStep: boolean;
+	EnableMultithreading: boolean;
+	OffscreenCanvas: boolean;
 	EnableTracing: boolean;
 	CanvasScalingMode: ECanvasScalingMode;
 	Compressed: boolean;
diff --git a/Examples/JavascriptPlayground.uproject b/Examples/JavascriptPlayground.uproject
index 738bf52..a2020f3 100644
--- a/Examples/JavascriptPlayground.uproject
+++ b/Examples/JavascriptPlayground.uproject
@@ -1,15 +1,8 @@
 {
 	"FileVersion": 3,
-	"EngineAssociation": "4.21",
+	"EngineAssociation": "4.23",
 	"Category": "",
 	"Description": "",
-	"Modules": [
-		{
-			"Name": "JavascriptPlayground",
-			"Type": "Runtime",
-			"LoadingPhase": "Default"
-		}
-	],
 	"Plugins": [
 		{
 			"Name": "UnrealJS",
diff --git a/Examples/Source/JavascriptPlayground.Target.cs b/Examples/Source/JavascriptPlayground.Target.cs
deleted file mode 100644
index d3bf5d1..0000000
--- a/Examples/Source/JavascriptPlayground.Target.cs
+++ /dev/null
@@ -1,13 +0,0 @@
-// Fill out your copyright notice in the Description page of Project Settings.
-
-using UnrealBuildTool;
-using System.Collections.Generic;
-
-public class JavascriptPlaygroundTarget : TargetRules
-{
-	public JavascriptPlaygroundTarget(TargetInfo Target) : base(Target)
-	{
-		Type = TargetType.Game;
-		ExtraModuleNames.Add("JavascriptPlayground");
-	}
-}
diff --git a/Examples/Source/JavascriptPlayground/JavascriptPlayground.Build.cs b/Examples/Source/JavascriptPlayground/JavascriptPlayground.Build.cs
deleted file mode 100644
index a7d3fe3..0000000
--- a/Examples/Source/JavascriptPlayground/JavascriptPlayground.Build.cs
+++ /dev/null
@@ -1,28 +0,0 @@
-// Fill out your copyright notice in the Description page of Project Settings.
-
-using UnrealBuildTool;
-
-public class JavascriptPlayground : ModuleRules
-{
-	public JavascriptPlayground(ReadOnlyTargetRules Target) : base(Target)
-    {
-        PCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs;
-
-        PublicDependencyModuleNames.AddRange(new string[] { "Core", "CoreUObject", "Engine", "InputCore" });
-
-		PrivateDependencyModuleNames.AddRange(new string[] {  });
-
-		// Uncomment if you are using Slate UI
-		// PrivateDependencyModuleNames.AddRange(new string[] { "Slate", "SlateCore" });
-		
-		// Uncomment if you are using online features
-		// PrivateDependencyModuleNames.Add("OnlineSubsystem");
-		// if ((Target.Platform == UnrealTargetPlatform.Win32) || (Target.Platform == UnrealTargetPlatform.Win64))
-		// {
-		//		if (UEBuildConfiguration.bCompileSteamOSS == true)
-		//		{
-		//			DynamicallyLoadedModuleNames.Add("OnlineSubsystemSteam");
-		//		}
-		// }
-	}
-}
diff --git a/Examples/Source/JavascriptPlayground/JavascriptPlayground.cpp b/Examples/Source/JavascriptPlayground/JavascriptPlayground.cpp
deleted file mode 100644
index 799a691..0000000
--- a/Examples/Source/JavascriptPlayground/JavascriptPlayground.cpp
+++ /dev/null
@@ -1,5 +0,0 @@
-// Fill out your copyright notice in the Description page of Project Settings.
-
-#include "JavascriptPlayground.h"
-
-IMPLEMENT_PRIMARY_GAME_MODULE( FDefaultGameModuleImpl, JavascriptPlayground, "JavascriptPlayground" );
diff --git a/Examples/Source/JavascriptPlayground/JavascriptPlayground.h b/Examples/Source/JavascriptPlayground/JavascriptPlayground.h
deleted file mode 100644
index 73407dd..0000000
--- a/Examples/Source/JavascriptPlayground/JavascriptPlayground.h
+++ /dev/null
@@ -1,5 +0,0 @@
-// Fill out your copyright notice in the Description page of Project Settings.
-
-#pragma once
-
-#include "CoreMinimal.h"
diff --git a/Examples/Source/JavascriptPlayground/MyClass.cpp b/Examples/Source/JavascriptPlayground/MyClass.cpp
deleted file mode 100644
index 37fd0d5..0000000
--- a/Examples/Source/JavascriptPlayground/MyClass.cpp
+++ /dev/null
@@ -1,12 +0,0 @@
-// Fill out your copyright notice in the Description page of Project Settings.
-
-#include "MyClass.h"
-#include "JavascriptPlayground.h"
-
-MyClass::MyClass()
-{
-}
-
-MyClass::~MyClass()
-{
-}
diff --git a/Examples/Source/JavascriptPlayground/MyClass.h b/Examples/Source/JavascriptPlayground/MyClass.h
deleted file mode 100644
index 407a6fc..0000000
--- a/Examples/Source/JavascriptPlayground/MyClass.h
+++ /dev/null
@@ -1,13 +0,0 @@
-// Fill out your copyright notice in the Description page of Project Settings.
-
-#pragma once
-
-/**
- * 
- */
-class JAVASCRIPTPLAYGROUND_API MyClass
-{
-public:
-	MyClass();
-	~MyClass();
-};
diff --git a/Examples/Source/JavascriptPlaygroundEditor.Target.cs b/Examples/Source/JavascriptPlaygroundEditor.Target.cs
deleted file mode 100644
index 7f6fcb7..0000000
--- a/Examples/Source/JavascriptPlaygroundEditor.Target.cs
+++ /dev/null
@@ -1,13 +0,0 @@
-// Fill out your copyright notice in the Description page of Project Settings.
-
-using UnrealBuildTool;
-using System.Collections.Generic;
-
-public class JavascriptPlaygroundEditorTarget : TargetRules
-{
-	public JavascriptPlaygroundEditorTarget(TargetInfo Target)  : base(Target)
-	{
-		Type = TargetType.Editor;
-		ExtraModuleNames.Add("JavascriptPlayground");
-	}
-}
